<#@ assembly name="$(LinqToDBT4SapHanaClientPath)System.Data.Odbc.dll"            #>
<#@ include file="$(LinqToDBT4TemplatesPath)LinqToDB.ttinclude"       once="true" #>
<#@ include file="$(LinqToDBT4TemplatesPath)LinqToDB.Tools.ttinclude" once="true" #>
<#@ import namespace="LinqToDB.DataProvider.SapHana"                              #>
<#
	Model.Usings.Add("LinqToDB.DataProvider.SapHana");
	Model.Usings.Add("System.Reflection");

	GenerateProviderSpecificTable = it =>
	{
		var t = (Table)it;

		var method = new Method(
			() => string.Format("ITable<{0}>", t.TypeName),
			t.DataContextPropertyName,
			t.Parameters.Select(p => (Func<string>)(() => p.Type.ToTypeName() + " " + p.ParameterName)),
			() => new []
			{
				string.Concat("return GetTable<",t.TypeName,">(this, (MethodInfo) MethodBase.GetCurrentMethod()", EnableNullableReferenceTypes ? "!" : "" ,","),
				string.Join(",", t.Parameters.Select(p => p.ParameterName)),
				");"
			});

		method.Attributes.Add(new Attribute("CalculationViewInputParametersExpression", new string[] {}));
		return method;
	};

	LoadProviderSpecificTable = t =>
	{
		var v = t as ViewWithParametersTableSchema;
		return new Table
			{
				Schema                  = (t.IsDefaultSchema && !IncludeDefaultSchema) || string.IsNullOrEmpty(t.SchemaName)? null : t.SchemaName,
				BaseClass               = BaseEntityClass,
				TableName               = t.TableName,
				TypeName                =
				PluralizeClassNames   ? ToPlural  (t.TypeName) :
				SingularizeClassNames ? ToSingular(t.TypeName) : t.TypeName,
				DataContextPropertyName =
				PluralizeDataContextPropertyNames   ? ToPlural  (t.TypeName) :
				SingularizeDataContextPropertyNames ? ToSingular(t.TypeName) : t.TypeName,
				IsView                  = t.IsView,
				IsProviderSpecific      = true,
				Description             = t.Description,
				Columns                 = t.Columns.ToDictionary(
					c => c.ColumnName,
					c => (IColumn)new Column(new ModelType(c.MemberType, !IsValueType(c.MemberType), c.IsNullable))
					{
						ColumnName      = c.ColumnName,
						ColumnType      = c.ColumnType,
						IsNullable      = c.IsNullable,
						IsIdentity      = c.IsIdentity,
						IsPrimaryKey    = c.IsPrimaryKey,
						PrimaryKeyOrder = c.PrimaryKeyOrder,
						MemberName      = ModelGenerator.CheckType(c.SystemType, c.MemberName),
						SkipOnInsert    = c.SkipOnInsert,
						SkipOnUpdate    = c.SkipOnUpdate,
						Description     = c.Description,
					}),
				Parameters = v.Parameters.Select(pr => new Parameter
				{
					SchemaName    = pr.SchemaName,
					SchemaType    = pr.SchemaType,
					IsIn          = pr.IsIn,
					IsOut         = pr.IsOut,
					IsResult      = pr.IsResult,
					Size          = pr.Size,
					ParameterName = pr.ParameterName,
					ParameterType = pr.ParameterType,
					SystemType    = pr.SystemType ?? typeof(object),
					DataType      = pr.DataType.ToString(),
					IsNullable    = pr.IsNullable
				})
				.ToList()
			};
	};
#>
<#+
	public partial class Table
	{
		public List<Parameter> Parameters;
	}

	LinqToDB.Data.DataConnection GetSapHanaConnection(string connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged)
	{
		return LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(connectionString, provider);
	}

	LinqToDB.Data.DataConnection GetSapHanaConnection(string server, string schema, string uid, string password, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged)
	{
		return GetSapHanaConnection(string.Format("Server={0};Current Schema={1};UserID={2};Password={3};", server, schema, uid, password), provider);
	}

	public void LoadSapHanaMetadata(DataConnection dataConnection)
	{
		LoadMetadata(dataConnection);
	}

	public void LoadSapHanaMetadata(string connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged)
	{
		using (var dataConnection = GetSapHanaConnection(connectionString, provider))
			LoadMetadata(dataConnection);
	}

	public void LoadSapHanaMetadata(string server, string schema, string uid, string password, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged)
	{
		using (var dataConnection = GetSapHanaConnection(server, schema, uid, password, provider))
			LoadMetadata(dataConnection);
	}
#>
