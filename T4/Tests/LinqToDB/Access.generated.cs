//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace AccessDataContext
{
	/// <summary>
	/// Database       : TestData
	/// Data Source    : I:\linq2db.t4models\\Data\TestData.mdb
	/// Server Version : 04.00.0000
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<AllType>             AllTypes             { get { return this.GetTable<AllType>(); } }
		public ITable<Child>               Children             { get { return this.GetTable<Child>(); } }
		public ITable<DataTypeTest>        DataTypeTests        { get { return this.GetTable<DataTypeTest>(); } }
		public ITable<Doctor>              Doctors              { get { return this.GetTable<Doctor>(); } }
		public ITable<Dual>                Duals                { get { return this.GetTable<Dual>(); } }
		public ITable<GrandChild>          GrandChildren        { get { return this.GetTable<GrandChild>(); } }
		public ITable<LinqDataType>        LinqDataTypes        { get { return this.GetTable<LinqDataType>(); } }
		public ITable<LinqDataTypesQuery>  LinqDataTypesQueries { get { return this.GetTable<LinqDataTypesQuery>(); } }
		public ITable<LinqDataTypesQuery1> LinqDataTypesQuery1  { get { return this.GetTable<LinqDataTypesQuery1>(); } }
		public ITable<LinqDataTypesQuery2> LinqDataTypesQuery2  { get { return this.GetTable<LinqDataTypesQuery2>(); } }
		public ITable<Parent>              Parents              { get { return this.GetTable<Parent>(); } }
		public ITable<Patient>             Patients             { get { return this.GetTable<Patient>(); } }
		public ITable<Patient_SelectAll>   Patient_SelectAll    { get { return this.GetTable<Patient_SelectAll>(); } }
		public ITable<Person>              People               { get { return this.GetTable<Person>(); } }
		public ITable<Person_SelectAll>    Person_SelectAll     { get { return this.GetTable<Person_SelectAll>(); } }
		public ITable<Scalar_DataReader>   Scalar_DataReaders   { get { return this.GetTable<Scalar_DataReader>(); } }
		public ITable<TestIdentity>        TestIdentities       { get { return this.GetTable<TestIdentity>(); } }

		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("AllTypes")]
	public partial class AllType
	{
		[Column(DbType="Long",       DataType=DataType.Int32,     Precision=10),          Identity] public int       ID                       { get; set; } // Long
		[Column(DbType="Bit",        DataType=DataType.Boolean,   Length=2),              Identity] public bool      bitDataType              { get; set; } // Bit
		[Column(DbType="Short",      DataType=DataType.Int16,     Precision=5),           Nullable] public short?    smallintDataType         { get; set; } // Short
		[Column(DbType="Decimal",    DataType=DataType.Decimal,   Precision=18, Scale=0), Nullable] public decimal?  decimalDataType          { get; set; } // Decimal
		[Column(DbType="Long",       DataType=DataType.Int32,     Precision=10),          Nullable] public int?      intDataType              { get; set; } // Long
		[Column(DbType="Byte",       DataType=DataType.Byte,      Precision=3),           Nullable] public byte?     tinyintDataType          { get; set; } // Byte
		[Column(DbType="Currency",   DataType=DataType.Money,     Precision=19),          Nullable] public decimal?  moneyDataType            { get; set; } // Currency
		[Column(DbType="Double",     DataType=DataType.Double,    Precision=15),          Nullable] public double?   floatDataType            { get; set; } // Double
		[Column(DbType="Single",     DataType=DataType.Single,    Precision=7),           Nullable] public float?    realDataType             { get; set; } // Single
		[Column(DbType="DateTime",   DataType=DataType.DateTime),                         Nullable] public DateTime? datetimeDataType         { get; set; } // DateTime
		[Column(DbType="text(1)",    DataType=DataType.NText,     Length=1),              Nullable] public char?     charDataType             { get; set; } // text(1)
		[Column(DbType="text(20)",   DataType=DataType.NText,     Length=20),             Nullable] public string    varcharDataType          { get; set; } // text(20)
		[Column(DbType="text(0)",    DataType=DataType.NText,     Length=0),              Nullable] public string    textDataType             { get; set; } // text(0)
		[Column(DbType="text(20)",   DataType=DataType.NText,     Length=20),             Nullable] public string    ncharDataType            { get; set; } // text(20)
		[Column(DbType="text(20)",   DataType=DataType.NText,     Length=20),             Nullable] public string    nvarcharDataType         { get; set; } // text(20)
		[Column(DbType="text(0)",    DataType=DataType.NText,     Length=0),              Nullable] public string    ntextDataType            { get; set; } // text(0)
		[Column(DbType="image(10)",  DataType=DataType.Undefined, Length=10),             Nullable] public byte[]    binaryDataType           { get; set; } // image(10)
		[Column(DbType="image(510)", DataType=DataType.Undefined, Length=510),            Nullable] public byte[]    varbinaryDataType        { get; set; } // image(510)
		[Column(DbType="image(0)",   DataType=DataType.Undefined, Length=0),              Nullable] public byte[]    imageDataType            { get; set; } // image(0)
		[Column(DbType="image(0)",   DataType=DataType.Undefined, Length=0),              Nullable] public byte[]    oleObjectDataType        { get; set; } // image(0)
		[Column(DbType="GUID",       DataType=DataType.Guid),                             Nullable] public Guid?     uniqueidentifierDataType { get; set; } // GUID
	}

	[Table("Child")]
	public partial class Child
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ParentID { get; set; } // Long
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ChildID  { get; set; } // Long
	}

	[Table("DataTypeTest")]
	public partial class DataTypeTest
	{
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), PrimaryKey, Identity] public int       DataTypeID { get; set; } // Long
		[Column(DbType="image(0)", DataType=DataType.Undefined, Length=0),     Nullable            ] public byte[]    Binary_    { get; set; } // image(0)
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), Nullable            ] public int?      Boolean_   { get; set; } // Long
		[Column(DbType="Byte",     DataType=DataType.Byte,      Precision=3),  Nullable            ] public byte?     Byte_      { get; set; } // Byte
		[Column(DbType="image(0)", DataType=DataType.Undefined, Length=0),     Nullable            ] public byte[]    Bytes_     { get; set; } // image(0)
		[Column(DbType="text(1)",  DataType=DataType.NText,     Length=1),     Nullable            ] public char?     Char_      { get; set; } // text(1)
		[Column(DbType="DateTime", DataType=DataType.DateTime),                Nullable            ] public DateTime? DateTime_  { get; set; } // DateTime
		[Column(DbType="Currency", DataType=DataType.Money,     Precision=19), Nullable            ] public decimal?  Decimal_   { get; set; } // Currency
		[Column(DbType="Double",   DataType=DataType.Double,    Precision=15), Nullable            ] public double?   Double_    { get; set; } // Double
		[Column(DbType="GUID",     DataType=DataType.Guid),                    Nullable            ] public Guid?     Guid_      { get; set; } // GUID
		[Column(DbType="Short",    DataType=DataType.Int16,     Precision=5),  Nullable            ] public short?    Int16_     { get; set; } // Short
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), Nullable            ] public int?      Int32_     { get; set; } // Long
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), Nullable            ] public int?      Int64_     { get; set; } // Long
		[Column(DbType="Currency", DataType=DataType.Money,     Precision=19), Nullable            ] public decimal?  Money_     { get; set; } // Currency
		[Column(DbType="Byte",     DataType=DataType.Byte,      Precision=3),  Nullable            ] public byte?     SByte_     { get; set; } // Byte
		[Column(DbType="Single",   DataType=DataType.Single,    Precision=7),  Nullable            ] public float?    Single_    { get; set; } // Single
		[Column(DbType="image(0)", DataType=DataType.Undefined, Length=0),     Nullable            ] public byte[]    Stream_    { get; set; } // image(0)
		[Column(DbType="text(50)", DataType=DataType.NText,     Length=50),    Nullable            ] public string    String_    { get; set; } // text(50)
		[Column(DbType="Short",    DataType=DataType.Int16,     Precision=5),  Nullable            ] public short?    UInt16_    { get; set; } // Short
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), Nullable            ] public int?      UInt32_    { get; set; } // Long
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10), Nullable            ] public int?      UInt64_    { get; set; } // Long
		[Column(DbType="text(0)",  DataType=DataType.NText,     Length=0),     Nullable            ] public string    Xml_       { get; set; } // text(0)
	}

	[Table("Doctor")]
	public partial class Doctor
	{
		[Column(DbType="Long",     DataType=DataType.Int32, Precision=10), PrimaryKey, Identity] public int    PersonID { get; set; } // Long
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    NotNull             ] public string Taxonomy { get; set; } // text(50)
	}

	[Table("Dual")]
	public partial class Dual
	{
		[Column(DbType="text(10)", DataType=DataType.NText, Length=10), Nullable] public string Dummy { get; set; } // text(10)
	}

	[Table("GrandChild")]
	public partial class GrandChild
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ParentID     { get; set; } // Long
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ChildID      { get; set; } // Long
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? GrandChildID { get; set; } // Long
	}

	[Table("LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10),          Nullable] public int?      ID             { get; set; } // Long
		[Column(DbType="Decimal",  DataType=DataType.Decimal,   Precision=10, Scale=4), Nullable] public decimal?  MoneyValue     { get; set; } // Decimal
		[Column(DbType="DateTime", DataType=DataType.DateTime),                         Nullable] public DateTime? DateTimeValue  { get; set; } // DateTime
		[Column(DbType="DateTime", DataType=DataType.DateTime),                         Nullable] public DateTime? DateTimeValue2 { get; set; } // DateTime
		[Column(DbType="Bit",      DataType=DataType.Boolean,   Length=2),              Identity] public bool      BoolValue      { get; set; } // Bit
		[Column(DbType="GUID",     DataType=DataType.Guid),                             Nullable] public Guid?     GuidValue      { get; set; } // GUID
		[Column(DbType="image(0)", DataType=DataType.Undefined, Length=0),              Nullable] public byte[]    BinaryValue    { get; set; } // image(0)
		[Column(DbType="Short",    DataType=DataType.Int16,     Precision=5),           Nullable] public short?    SmallIntValue  { get; set; } // Short
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10),          Nullable] public int?      IntValue       { get; set; } // Long
		[Column(DbType="Long",     DataType=DataType.Int32,     Precision=10),          Nullable] public int?      BigIntValue    { get; set; } // Long
	}

	[Table("LinqDataTypes Query", IsView=true)]
	public partial class LinqDataTypesQuery
	{
		[Column(DbType="DateTime", DataType=DataType.DateTime), Nullable] public DateTime? DateTimeValue { get; set; } // DateTime
	}

	[Table("LinqDataTypes Query1", IsView=true)]
	public partial class LinqDataTypesQuery1
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ID { get; set; } // Long
	}

	[Table("LinqDataTypes Query2", IsView=true)]
	public partial class LinqDataTypesQuery2
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ID { get; set; } // Long
	}

	[Table("Parent")]
	public partial class Parent
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? ParentID { get; set; } // Long
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), Nullable] public int? Value1   { get; set; } // Long
	}

	[Table("Patient")]
	public partial class Patient
	{
		[Column(DbType="Long",      DataType=DataType.Int32, Precision=10), PrimaryKey, Identity] public int    PersonID  { get; set; } // Long
		[Column(DbType="text(255)", DataType=DataType.NText, Length=255),   NotNull             ] public string Diagnosis { get; set; } // text(255)
	}

	[Table("Patient_SelectAll", IsView=true)]
	public partial class Patient_SelectAll
	{
		[Column(DbType="Long",      DataType=DataType.Int32, Precision=10), Identity] public int    PersonID   { get; set; } // Long
		[Column(DbType="text(50)",  DataType=DataType.NText, Length=50),    Nullable] public string FirstName  { get; set; } // text(50)
		[Column(DbType="text(50)",  DataType=DataType.NText, Length=50),    Nullable] public string LastName   { get; set; } // text(50)
		[Column(DbType="text(50)",  DataType=DataType.NText, Length=50),    Nullable] public string MiddleName { get; set; } // text(50)
		[Column(DbType="text(1)",   DataType=DataType.NText, Length=1),     Nullable] public char?  Gender     { get; set; } // text(1)
		[Column(DbType="text(255)", DataType=DataType.NText, Length=255),   Nullable] public string Diagnosis  { get; set; } // text(255)
	}

	[Table("Person")]
	public partial class Person
	{
		[Column(DbType="Long",     DataType=DataType.Int32, Precision=10), PrimaryKey,  Identity] public int    PersonID   { get; set; } // Long
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    NotNull              ] public string FirstName  { get; set; } // text(50)
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    NotNull              ] public string LastName   { get; set; } // text(50)
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),       Nullable          ] public string MiddleName { get; set; } // text(50)
		[Column(DbType="text(1)",  DataType=DataType.NText, Length=1),     NotNull              ] public char   Gender     { get; set; } // text(1)
	}

	[Table("Person_SelectAll", IsView=true)]
	public partial class Person_SelectAll
	{
		[Column(DbType="Long",     DataType=DataType.Int32, Precision=10), Identity] public int    PersonID   { get; set; } // Long
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    Nullable] public string FirstName  { get; set; } // text(50)
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    Nullable] public string LastName   { get; set; } // text(50)
		[Column(DbType="text(50)", DataType=DataType.NText, Length=50),    Nullable] public string MiddleName { get; set; } // text(50)
		[Column(DbType="text(1)",  DataType=DataType.NText, Length=1),     Nullable] public char?  Gender     { get; set; } // text(1)
	}

	[Table("Scalar_DataReader", IsView=true)]
	public partial class Scalar_DataReader
	{
		[Column(DbType="Long",      DataType=DataType.Int32, Precision=10), Nullable] public int?   intField    { get; set; } // Long
		[Column(DbType="text(255)", DataType=DataType.NText, Length=255),   Nullable] public string stringField { get; set; } // text(255)
	}

	[Table("TestIdentity")]
	public partial class TestIdentity
	{
		[Column(DbType="Long", DataType=DataType.Int32, Precision=10), PrimaryKey, Identity] public int ID { get; set; } // Long
	}

	public static partial class TestDataDBStoredProcedures
	{
		#region Patient_SelectByName

		public static int Patient_SelectByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.ExecuteProc("[Patient_SelectByName]",
				new DataParameter("@firstName", @firstName, DataType.NText),
				new DataParameter("@lastName",  @lastName,  DataType.NText));
		}

		#endregion

		#region Person_Delete

		public static int Person_Delete(this DataConnection dataConnection, int? @PersonID)
		{
			return dataConnection.ExecuteProc("[Person_Delete]",
				new DataParameter("@PersonID", @PersonID, DataType.Int32));
		}

		#endregion

		#region Person_Insert

		public static int Person_Insert(this DataConnection dataConnection, string @FirstName, string @MiddleName, string @LastName, string @Gender)
		{
			return dataConnection.ExecuteProc("[Person_Insert]",
				new DataParameter("@FirstName",  @FirstName,  DataType.NText),
				new DataParameter("@MiddleName", @MiddleName, DataType.NText),
				new DataParameter("@LastName",   @LastName,   DataType.NText),
				new DataParameter("@Gender",     @Gender,     DataType.NText));
		}

		#endregion

		#region Person_SelectByKey

		public static int Person_SelectByKey(this DataConnection dataConnection, int? @id)
		{
			return dataConnection.ExecuteProc("[Person_SelectByKey]",
				new DataParameter("@id", @id, DataType.Int32));
		}

		#endregion

		#region Person_SelectByName

		public static int Person_SelectByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.ExecuteProc("[Person_SelectByName]",
				new DataParameter("@firstName", @firstName, DataType.NText),
				new DataParameter("@lastName",  @lastName,  DataType.NText));
		}

		#endregion

		#region Person_SelectListByName

		public static int Person_SelectListByName(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.ExecuteProc("[Person_SelectListByName]",
				new DataParameter("@firstName", @firstName, DataType.NText),
				new DataParameter("@lastName",  @lastName,  DataType.NText));
		}

		#endregion

		#region Person_Update

		public static int Person_Update(this DataConnection dataConnection, int? @id, int? @PersonID, string @FirstName, string @MiddleName, string @LastName, string @Gender)
		{
			return dataConnection.ExecuteProc("[Person_Update]",
				new DataParameter("@id",         @id,         DataType.Int32),
				new DataParameter("@PersonID",   @PersonID,   DataType.Int32),
				new DataParameter("@FirstName",  @FirstName,  DataType.NText),
				new DataParameter("@MiddleName", @MiddleName, DataType.NText),
				new DataParameter("@LastName",   @LastName,   DataType.NText),
				new DataParameter("@Gender",     @Gender,     DataType.NText));
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static DataTypeTest Find(this ITable<DataTypeTest> table, int DataTypeID)
		{
			return table.FirstOrDefault(t =>
				t.DataTypeID == DataTypeID);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
