//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace MySqlDataContext
{
	/// <summary>
	/// Database       : TestData
	/// Data Source    : DBHost
	/// Server Version : 5.5.28
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<alltype>      alltypes       { get { return this.GetTable<alltype>(); } }
		public ITable<binarydata>   binarydatas    { get { return this.GetTable<binarydata>(); } }
		public ITable<child>        children       { get { return this.GetTable<child>(); } }
		public ITable<datatypetest> datatypetests  { get { return this.GetTable<datatypetest>(); } }
		public ITable<doctor>       doctors        { get { return this.GetTable<doctor>(); } }
		public ITable<grandchild>   grandchilds    { get { return this.GetTable<grandchild>(); } }
		public ITable<linqdatatype> linqdatatypes  { get { return this.GetTable<linqdatatype>(); } }
		public ITable<parent>       parents        { get { return this.GetTable<parent>(); } }
		public ITable<patient>      patients       { get { return this.GetTable<patient>(); } }
		public ITable<person>       people         { get { return this.GetTable<person>(); } }
		public ITable<personview>   personviews    { get { return this.GetTable<personview>(); } }
		public ITable<testidentity> testidentities { get { return this.GetTable<testidentity>(); } }
		public ITable<testsamename> testsamenames  { get { return this.GetTable<testsamename>(); } }
		public ITable<testtable2>   testtable2     { get { return this.GetTable<testtable2>(); } }
		public ITable<testtable3>   testtable3     { get { return this.GetTable<testtable3>(); } }

		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("alltypes")]
	public partial class alltype
	{
		[PrimaryKey, Identity] public int       ID                  { get; set; } // int(11)
		[Column,     Nullable] public long?     bigintDataType      { get; set; } // bigint(20)
		[Column,     Nullable] public short?    smallintDataType    { get; set; } // smallint(6)
		[Column,     Nullable] public sbyte?    tinyintDataType     { get; set; } // tinyint(4)
		[Column,     Nullable] public int?      mediumintDataType   { get; set; } // mediumint(9)
		[Column,     Nullable] public int?      intDataType         { get; set; } // int(11)
		[Column,     Nullable] public decimal?  numericDataType     { get; set; } // decimal(10,0)
		[Column,     Nullable] public decimal?  decimalDataType     { get; set; } // decimal(10,0)
		[Column,     Nullable] public double?   doubleDataType      { get; set; } // double
		[Column,     Nullable] public float?    floatDataType       { get; set; } // float
		[Column,     Nullable] public DateTime? dateDataType        { get; set; } // date
		[Column,     Nullable] public DateTime? datetimeDataType    { get; set; } // datetime
		[Column,     Nullable] public DateTime? timestampDataType   { get; set; } // timestamp
		[Column,     Nullable] public TimeSpan? timeDataType        { get; set; } // time
		[Column,     Nullable] public int?      yearDataType        { get; set; } // year(4)
		[Column,     Nullable] public int?      year2DataType       { get; set; } // year(2)
		[Column,     Nullable] public int?      year4DataType       { get; set; } // year(4)
		[Column,     Nullable] public char?     charDataType        { get; set; } // char(1)
		[Column,     Nullable] public string    varcharDataType     { get; set; } // varchar(20)
		[Column,     Nullable] public string    textDataType        { get; set; } // text
		[Column,     Nullable] public byte[]    binaryDataType      { get; set; } // binary(3)
		[Column,     Nullable] public byte[]    varbinaryDataType   { get; set; } // varbinary(5)
		[Column,     Nullable] public byte[]    blobDataType        { get; set; } // blob
		[Column,     Nullable] public ulong?    bitDataType         { get; set; } // bit(3)
		[Column,     Nullable] public string    enumDataType        { get; set; } // enum('Green','Red','Blue')
		[Column,     Nullable] public string    setDataType         { get; set; } // set('one','two')
		[Column,     Nullable] public uint?     intUnsignedDataType { get; set; } // int(10) unsigned
		[Column,     Nullable] public bool?     boolDataType        { get; set; } // tinyint(1)
	}

	[Table("binarydata")]
	public partial class binarydata
	{
		[PrimaryKey, Identity] public int      BinaryDataID { get; set; } // int(11)
		[Column,     NotNull ] public DateTime Stamp        { get; set; } // timestamp
		[Column,     NotNull ] public byte[]   Data         { get; set; } // varbinary(1024)
	}

	[Table("child")]
	public partial class child
	{
		[Column, Nullable] public int? ParentID { get; set; } // int(11)
		[Column, Nullable] public int? ChildID  { get; set; } // int(11)
	}

	[Table("datatypetest")]
	public partial class datatypetest
	{
		[PrimaryKey, Identity   ] public int       DataTypeID { get; set; } // int(11)
		[Column,        Nullable] public byte[]    Binary_    { get; set; } // binary(50)
		[Column,     NotNull    ] public ulong     Boolean_   { get; set; } // bit(1)
		[Column,        Nullable] public sbyte?    Byte_      { get; set; } // tinyint(4)
		[Column,        Nullable] public byte[]    Bytes_     { get; set; } // varbinary(50)
		[Column,        Nullable] public char?     Char_      { get; set; } // char(1)
		[Column,        Nullable] public DateTime? DateTime_  { get; set; } // datetime
		[Column,        Nullable] public decimal?  Decimal_   { get; set; } // decimal(20,2)
		[Column,        Nullable] public float?    Double_    { get; set; } // float
		[Column,        Nullable] public byte[]    Guid_      { get; set; } // varbinary(50)
		[Column,        Nullable] public short?    Int16_     { get; set; } // smallint(6)
		[Column,        Nullable] public int?      Int32_     { get; set; } // int(11)
		[Column,        Nullable] public long?     Int64_     { get; set; } // bigint(20)
		[Column,        Nullable] public decimal?  Money_     { get; set; } // decimal(20,4)
		[Column,        Nullable] public sbyte?    SByte_     { get; set; } // tinyint(4)
		[Column,        Nullable] public double?   Single_    { get; set; } // double
		[Column,        Nullable] public byte[]    Stream_    { get; set; } // varbinary(50)
		[Column,        Nullable] public string    String_    { get; set; } // varchar(50)
		[Column,        Nullable] public short?    UInt16_    { get; set; } // smallint(6)
		[Column,        Nullable] public int?      UInt32_    { get; set; } // int(11)
		[Column,        Nullable] public long?     UInt64_    { get; set; } // bigint(20)
		[Column,        Nullable] public string    Xml_       { get; set; } // varchar(1000)
	}

	[Table("doctor")]
	public partial class doctor
	{
		[PrimaryKey, NotNull] public int    PersonID { get; set; } // int(11)
		[Column,     NotNull] public string Taxonomy { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Doctor_Person", BackReferenceName="DoctorPerson")]
		public person DoctorPerson { get; set; }

		#endregion
	}

	[Table("grandchild")]
	public partial class grandchild
	{
		[Column, Nullable] public int? ParentID     { get; set; } // int(11)
		[Column, Nullable] public int? ChildID      { get; set; } // int(11)
		[Column, Nullable] public int? GrandChildID { get; set; } // int(11)
	}

	[Table("linqdatatypes")]
	public partial class linqdatatype
	{
		[Column, Nullable] public int?      ID             { get; set; } // int(11)
		[Column, Nullable] public decimal?  MoneyValue     { get; set; } // decimal(10,4)
		[Column, Nullable] public DateTime? DateTimeValue  { get; set; } // datetime
		[Column, Nullable] public DateTime? DateTimeValue2 { get; set; } // datetime
		[Column, Nullable] public bool?     BoolValue      { get; set; } // tinyint(1)
		[Column, Nullable] public string    GuidValue      { get; set; } // char(36)
		[Column, Nullable] public byte[]    BinaryValue    { get; set; } // varbinary(5000)
		[Column, Nullable] public short?    SmallIntValue  { get; set; } // smallint(6)
		[Column, Nullable] public int?      IntValue       { get; set; } // int(11)
		[Column, Nullable] public long?     BigIntValue    { get; set; } // bigint(20)
	}

	[Table("parent")]
	public partial class parent
	{
		[Column, Nullable] public int? ParentID { get; set; } // int(11)
		[Column, Nullable] public int? Value1   { get; set; } // int(11)
	}

	[Table("patient")]
	public partial class patient
	{
		[PrimaryKey, NotNull] public int    PersonID  { get; set; } // int(11)
		[Column,     NotNull] public string Diagnosis { get; set; } // varchar(256)

		#region Associations

		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient_Person", BackReferenceName="PatientPerson")]
		public person PatientPerson { get; set; }

		#endregion
	}

	[Table("person")]
	public partial class person
	{
		[PrimaryKey, Identity   ] public int    PersonID   { get; set; } // int(11)
		[Column,     NotNull    ] public string FirstName  { get; set; } // varchar(50)
		[Column,     NotNull    ] public string LastName   { get; set; } // varchar(50)
		[Column,        Nullable] public string MiddleName { get; set; } // varchar(50)
		[Column,     NotNull    ] public char   Gender     { get; set; } // char(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public doctor DoctorPerson { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public patient PatientPerson { get; set; }

		#endregion
	}

	[Table("personview", IsView=true)]
	public partial class personview
	{
		[Column, NotNull] public int ID { get; set; } // int(11)
	}

	[Table("testidentity")]
	public partial class testidentity
	{
		[PrimaryKey, Identity] public int ID { get; set; } // int(11)
	}

	[Table("testsamename")]
	public partial class testsamename
	{
		[PrimaryKey, NotNull] public int ID { get; set; } // int(11)
	}

	[Table("testtable2")]
	public partial class testtable2
	{
		[PrimaryKey, Identity   ] public int       ID          { get; set; } // int(11)
		[Column,     NotNull    ] public string    Name        { get; set; } // char(50)
		[Column,        Nullable] public string    Description { get; set; } // char(250)
		[Column,        Nullable] public DateTime? CreatedOn   { get; set; } // datetime
	}

	[Table("testtable3")]
	public partial class testtable3
	{
		[PrimaryKey, NotNull] public int    ID   { get; set; } // int(11)
		[Column,     NotNull] public string Name { get; set; } // char(50)
	}

	public static partial class TableExtensions
	{
		public static alltype Find(this ITable<alltype> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static binarydata Find(this ITable<binarydata> table, int BinaryDataID)
		{
			return table.FirstOrDefault(t =>
				t.BinaryDataID == BinaryDataID);
		}

		public static datatypetest Find(this ITable<datatypetest> table, int DataTypeID)
		{
			return table.FirstOrDefault(t =>
				t.DataTypeID == DataTypeID);
		}

		public static doctor Find(this ITable<doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static patient Find(this ITable<patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static person Find(this ITable<person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static testidentity Find(this ITable<testidentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static testsamename Find(this ITable<testsamename> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static testtable2 Find(this ITable<testtable2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static testtable3 Find(this ITable<testtable3> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
