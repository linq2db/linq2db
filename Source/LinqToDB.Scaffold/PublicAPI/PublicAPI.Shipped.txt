#nullable enable
abstract LinqToDB.CodeModel.AttributeOwner.ElementType.get -> LinqToDB.CodeModel.CodeElementType
abstract LinqToDB.CodeModel.CodeGenerationVisitor.NewLineSequences.get -> string![]!
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.ClassGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAsOperator! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentExpression! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentStatement! statement) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAttribute! attribute) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitExpression! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitStatement! statement) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeBinary! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallExpression! call) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallStatement! call) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeClass! class) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeComment! comment) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstant! constant) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstructor! ctor) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeDefault! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeEmptyLine! line) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeField! field) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeFile! file) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIdentifier! identifier) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeImport! import) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIndex! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeLambda! method) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMember! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMethod! method) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNameOf! nameOf) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNamespace! namespace) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNew! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNewArray! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeParameter! parameter) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodePragma! pragma) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeProperty! property) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReference! reference) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeRegion! region) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReturn! statement) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeSuppressNull! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTernary! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThis! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowExpression! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowStatement! statement) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeCast! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeInitializer! cctor) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeReference! type) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeToken! type) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeUnary! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeVariable! expression) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.CodeXmlComment! doc) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.ConstructorGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.FieldGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.MethodGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.PragmaGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.PropertyGroup! group) -> void
abstract LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.RegionGroup! group) -> void
abstract LinqToDB.CodeModel.MemberGroup<TMember>.ElementType.get -> LinqToDB.CodeModel.CodeElementType
abstract LinqToDB.Naming.NameConverterBase.GetConverter(LinqToDB.Naming.Pluralization conversion) -> System.Func<string!, string!>!
abstract LinqToDB.Schema.CallableObject.<Clone>$() -> LinqToDB.Schema.CallableObject!
abstract LinqToDB.Schema.Result.<Clone>$() -> LinqToDB.Schema.Result!
abstract LinqToDB.Schema.TableLikeObject.<Clone>$() -> LinqToDB.Schema.TableLikeObject!
abstract LinqToDB.Tools.ModelGeneration.MemberBase.CalcBodyLen() -> int
abstract LinqToDB.Tools.ModelGeneration.MemberBase.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
abstract LinqToDB.Tools.ModelGeneration.TypeBase.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
abstract LinqToDB.Tools.ModelGeneration.TypeBase.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
abstract LinqToDB.Tools.ModelGeneration.TypeBase.SetTree() -> void
LinqToDB.CodeModel.AstExtensions
LinqToDB.CodeModel.AttributeBuilder
LinqToDB.CodeModel.AttributeBuilder.Attribute.get -> LinqToDB.CodeModel.CodeAttribute!
LinqToDB.CodeModel.AttributeBuilder.Parameter(LinqToDB.CodeModel.CodeReference! property, LinqToDB.CodeModel.ICodeExpression! value) -> LinqToDB.CodeModel.AttributeBuilder!
LinqToDB.CodeModel.AttributeBuilder.Parameter(LinqToDB.CodeModel.ICodeExpression! value) -> LinqToDB.CodeModel.AttributeBuilder!
LinqToDB.CodeModel.AttributeOwner
LinqToDB.CodeModel.AttributeOwner.AttributeOwner(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes) -> void
LinqToDB.CodeModel.AttributeOwner.CustomAttributes.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeAttribute!>!
LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BinaryOperation.Add = 4 -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BinaryOperation.And = 2 -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BinaryOperation.Equal = 0 -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BinaryOperation.NotEqual = 1 -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BinaryOperation.Or = 3 -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.BlockBuilder
LinqToDB.CodeModel.BlockBuilder.Append(LinqToDB.CodeModel.ICodeStatement! statement) -> LinqToDB.CodeModel.BlockBuilder!
LinqToDB.CodeModel.BlockBuilder.Block.get -> LinqToDB.CodeModel.CodeBlock!
LinqToDB.CodeModel.ClassBuilder
LinqToDB.CodeModel.ClassBuilder.Classes() -> LinqToDB.CodeModel.ClassGroup!
LinqToDB.CodeModel.ClassBuilder.Constructors() -> LinqToDB.CodeModel.ConstructorGroup!
LinqToDB.CodeModel.ClassBuilder.Fields(bool tableLayout) -> LinqToDB.CodeModel.FieldGroup!
LinqToDB.CodeModel.ClassBuilder.Implements(LinqToDB.CodeModel.IType! interface) -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.CodeModel.ClassBuilder.Inherits(LinqToDB.CodeModel.IType! baseClass) -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.CodeModel.ClassBuilder.Methods(bool tableLayout) -> LinqToDB.CodeModel.MethodGroup!
LinqToDB.CodeModel.ClassBuilder.Properties(bool tableLayout) -> LinqToDB.CodeModel.PropertyGroup!
LinqToDB.CodeModel.ClassBuilder.Regions() -> LinqToDB.CodeModel.RegionGroup!
LinqToDB.CodeModel.ClassBuilder.TypeInitializer() -> LinqToDB.CodeModel.TypeInitializerBuilder!
LinqToDB.CodeModel.ClassGroup
LinqToDB.CodeModel.ClassGroup.ClassGroup(LinqToDB.CodeModel.ITopLevelElement? owner) -> void
LinqToDB.CodeModel.ClassGroup.ClassGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeClass!>? members, LinqToDB.CodeModel.ITopLevelElement? owner) -> void
LinqToDB.CodeModel.ClassGroup.New(LinqToDB.CodeModel.CodeIdentifier! name) -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.CodeModel.ClassGroup.Owner.get -> LinqToDB.CodeModel.ITopLevelElement?
LinqToDB.CodeModel.CodeAsOperator
LinqToDB.CodeModel.CodeAsOperator.CodeAsOperator(LinqToDB.CodeModel.CodeTypeToken! type, LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeAsOperator.CodeAsOperator(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeAsOperator.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeAsOperator.Value.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeAssignmentBase
LinqToDB.CodeModel.CodeAssignmentBase.CodeAssignmentBase(LinqToDB.CodeModel.ILValue! lvalue, LinqToDB.CodeModel.ICodeExpression! rvalue) -> void
LinqToDB.CodeModel.CodeAssignmentBase.LValue.get -> LinqToDB.CodeModel.ILValue!
LinqToDB.CodeModel.CodeAssignmentBase.RValue.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeAssignmentExpression
LinqToDB.CodeModel.CodeAssignmentExpression.CodeAssignmentExpression(LinqToDB.CodeModel.ILValue! lvalue, LinqToDB.CodeModel.ICodeExpression! rvalue) -> void
LinqToDB.CodeModel.CodeAssignmentStatement
LinqToDB.CodeModel.CodeAssignmentStatement.CodeAssignmentStatement(LinqToDB.CodeModel.ILValue! lvalue, LinqToDB.CodeModel.ICodeExpression! rvalue, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? beforeTrivia, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? afterTrivia) -> void
LinqToDB.CodeModel.CodeAttribute
LinqToDB.CodeModel.CodeAttribute.AddNamedParameter(LinqToDB.CodeModel.CodeReference! property, LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeAttribute.AddParameter(LinqToDB.CodeModel.ICodeExpression! parameterValue) -> void
LinqToDB.CodeModel.CodeAttribute.CodeAttribute(LinqToDB.CodeModel.CodeTypeToken! type, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>? parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter!>? namedParameters) -> void
LinqToDB.CodeModel.CodeAttribute.CodeAttribute(LinqToDB.CodeModel.IType! type) -> void
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.CodeNamedParameter(LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter! original) -> void
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.CodeNamedParameter(LinqToDB.CodeModel.CodeReference! Property, LinqToDB.CodeModel.ICodeExpression! Value) -> void
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Deconstruct(out LinqToDB.CodeModel.CodeReference! Property, out LinqToDB.CodeModel.ICodeExpression! Value) -> void
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Property.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Property.init -> void
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Value.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Value.init -> void
LinqToDB.CodeModel.CodeAttribute.NamedParameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter!>!
LinqToDB.CodeModel.CodeAttribute.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.ICodeExpression!>!
LinqToDB.CodeModel.CodeAttribute.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeAwaitExpression
LinqToDB.CodeModel.CodeAwaitExpression.CodeAwaitExpression(LinqToDB.CodeModel.ICodeExpression! task) -> void
LinqToDB.CodeModel.CodeAwaitExpression.Task.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeAwaitStatement
LinqToDB.CodeModel.CodeAwaitStatement.CodeAwaitStatement(LinqToDB.CodeModel.ICodeExpression! task, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? beforeTrivia, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? afterTrivia) -> void
LinqToDB.CodeModel.CodeAwaitStatement.Task.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeBinary
LinqToDB.CodeModel.CodeBinary.CodeBinary(LinqToDB.CodeModel.ICodeExpression! left, LinqToDB.CodeModel.BinaryOperation operation, LinqToDB.CodeModel.ICodeExpression! right) -> void
LinqToDB.CodeModel.CodeBinary.Left.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeBinary.Operation.get -> LinqToDB.CodeModel.BinaryOperation
LinqToDB.CodeModel.CodeBinary.Right.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeBlock
LinqToDB.CodeModel.CodeBlock.CodeBlock() -> void
LinqToDB.CodeModel.CodeBlock.CodeBlock(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeStatement!>? items) -> void
LinqToDB.CodeModel.CodeBuilder
LinqToDB.CodeModel.CodeBuilder.Add(LinqToDB.CodeModel.ICodeExpression! left, LinqToDB.CodeModel.ICodeExpression! right) -> LinqToDB.CodeModel.CodeBinary!
LinqToDB.CodeModel.CodeBuilder.And(LinqToDB.CodeModel.ICodeExpression! left, LinqToDB.CodeModel.ICodeExpression! right) -> LinqToDB.CodeModel.CodeBinary!
LinqToDB.CodeModel.CodeBuilder.Array(LinqToDB.CodeModel.IType! type, bool valueTyped, bool inline, params LinqToDB.CodeModel.ICodeExpression![]! values) -> LinqToDB.CodeModel.CodeNewArray!
LinqToDB.CodeModel.CodeBuilder.ArrayType(LinqToDB.CodeModel.IType! elementType, bool nullable) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeBuilder.As(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.ICodeExpression! expression) -> LinqToDB.CodeModel.CodeAsOperator!
LinqToDB.CodeModel.CodeBuilder.Assign(LinqToDB.CodeModel.ILValue! lvalue, LinqToDB.CodeModel.ICodeExpression! rvalue) -> LinqToDB.CodeModel.CodeAssignmentStatement!
LinqToDB.CodeModel.CodeBuilder.AwaitExpression(LinqToDB.CodeModel.ICodeExpression! task) -> LinqToDB.CodeModel.CodeAwaitExpression!
LinqToDB.CodeModel.CodeBuilder.AwaitStatement(LinqToDB.CodeModel.ICodeExpression! task) -> LinqToDB.CodeModel.CodeAwaitStatement!
LinqToDB.CodeModel.CodeBuilder.Call(LinqToDB.CodeModel.ICodeExpression! objOrType, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType! returnType, LinqToDB.CodeModel.IType![]! genericArguments, bool skipTypeArguments, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallExpression!
LinqToDB.CodeModel.CodeBuilder.Call(LinqToDB.CodeModel.ICodeExpression! objOrType, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType! returnType, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallExpression!
LinqToDB.CodeModel.CodeBuilder.Call(LinqToDB.CodeModel.ICodeExpression! objOrType, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType![]! genericArguments, bool skipTypeArguments, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallStatement!
LinqToDB.CodeModel.CodeBuilder.Call(LinqToDB.CodeModel.ICodeExpression! objOrType, LinqToDB.CodeModel.CodeIdentifier! method, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallStatement!
LinqToDB.CodeModel.CodeBuilder.Cast(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.ICodeExpression! value) -> LinqToDB.CodeModel.CodeTypeCast!
LinqToDB.CodeModel.CodeBuilder.Commentary(string! text, bool inline) -> LinqToDB.CodeModel.CodeComment!
LinqToDB.CodeModel.CodeBuilder.Constant(bool value, bool targetTyped) -> LinqToDB.CodeModel.CodeConstant!
LinqToDB.CodeModel.CodeBuilder.Constant(int value, bool targetTyped) -> LinqToDB.CodeModel.CodeConstant!
LinqToDB.CodeModel.CodeBuilder.Constant(string! value, bool targetTyped) -> LinqToDB.CodeModel.CodeConstant!
LinqToDB.CodeModel.CodeBuilder.Constant<T>(T value, bool targetTyped) -> LinqToDB.CodeModel.CodeConstant!
LinqToDB.CodeModel.CodeBuilder.Default(LinqToDB.CodeModel.IType! type, bool targetTyped) -> LinqToDB.CodeModel.CodeDefault!
LinqToDB.CodeModel.CodeBuilder.DisableWarnings(params string![]! warnings) -> LinqToDB.CodeModel.CodePragma!
LinqToDB.CodeModel.CodeBuilder.EnableNullableReferenceTypes() -> LinqToDB.CodeModel.CodePragma!
LinqToDB.CodeModel.CodeBuilder.Equal(LinqToDB.CodeModel.ICodeExpression! left, LinqToDB.CodeModel.ICodeExpression! right) -> LinqToDB.CodeModel.CodeBinary!
LinqToDB.CodeModel.CodeBuilder.Error(string! errorMessage) -> LinqToDB.CodeModel.CodePragma!
LinqToDB.CodeModel.CodeBuilder.ExtCall(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType! returnType, LinqToDB.CodeModel.IType![]! genericArguments, bool skipTypeArguments, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallExpression!
LinqToDB.CodeModel.CodeBuilder.ExtCall(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType! returnType, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallExpression!
LinqToDB.CodeModel.CodeBuilder.ExtCall(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! method, LinqToDB.CodeModel.IType![]! genericArguments, bool skipTypeArguments, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallStatement!
LinqToDB.CodeModel.CodeBuilder.ExtCall(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! method, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeCallStatement!
LinqToDB.CodeModel.CodeBuilder.File(string! fileName, params LinqToDB.CodeModel.CodeImport![]! imports) -> LinqToDB.CodeModel.CodeFile!
LinqToDB.CodeModel.CodeBuilder.IIF(LinqToDB.CodeModel.ICodeExpression! condition, LinqToDB.CodeModel.ICodeExpression! true, LinqToDB.CodeModel.ICodeExpression! false) -> LinqToDB.CodeModel.CodeTernary!
LinqToDB.CodeModel.CodeBuilder.Import(System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>! namespace) -> LinqToDB.CodeModel.CodeImport!
LinqToDB.CodeModel.CodeBuilder.Index(LinqToDB.CodeModel.ICodeExpression! obj, LinqToDB.CodeModel.ICodeExpression! index, LinqToDB.CodeModel.IType! returnType) -> LinqToDB.CodeModel.CodeIndex!
LinqToDB.CodeModel.CodeBuilder.Lambda(LinqToDB.CodeModel.IType! lambdaType, bool ommitTypes) -> LinqToDB.CodeModel.LambdaMethodBuilder!
LinqToDB.CodeModel.CodeBuilder.LambdaParameter(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.CodeParameter!
LinqToDB.CodeModel.CodeBuilder.Member(LinqToDB.CodeModel.ICodeExpression! obj, LinqToDB.CodeModel.CodeReference! member) -> LinqToDB.CodeModel.CodeMember!
LinqToDB.CodeModel.CodeBuilder.Member(LinqToDB.CodeModel.IType! owner, LinqToDB.CodeModel.CodeReference! member) -> LinqToDB.CodeModel.CodeMember!
LinqToDB.CodeModel.CodeBuilder.Name(string! name) -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeBuilder.Name(string! name, LinqToDB.CodeModel.NameFixOptions? fixOptions, int? position) -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeBuilder.NameOf(LinqToDB.CodeModel.ICodeExpression! member) -> LinqToDB.CodeModel.CodeNameOf!
LinqToDB.CodeModel.CodeBuilder.Namespace(string! name) -> LinqToDB.CodeModel.NamespaceBuilder!
LinqToDB.CodeModel.CodeBuilder.New(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.ICodeExpression![]! parameters, params LinqToDB.CodeModel.CodeAssignmentStatement![]! initializers) -> LinqToDB.CodeModel.CodeNew!
LinqToDB.CodeModel.CodeBuilder.New(LinqToDB.CodeModel.IType! type, params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.CodeNew!
LinqToDB.CodeModel.CodeBuilder.Null(LinqToDB.CodeModel.IType! type, bool targetTyped) -> LinqToDB.CodeModel.CodeConstant!
LinqToDB.CodeModel.CodeBuilder.Parameter(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeParameterDirection direction, LinqToDB.CodeModel.ICodeExpression? defaultValue = null) -> LinqToDB.CodeModel.CodeParameter!
LinqToDB.CodeModel.CodeBuilder.Return(LinqToDB.CodeModel.ICodeExpression? expression) -> LinqToDB.CodeModel.CodeReturn!
LinqToDB.CodeModel.CodeBuilder.SuppressNull(LinqToDB.CodeModel.ICodeExpression! value) -> LinqToDB.CodeModel.CodeSuppressNull!
LinqToDB.CodeModel.CodeBuilder.Throw(LinqToDB.CodeModel.ICodeExpression! exception) -> LinqToDB.CodeModel.CodeThrowStatement!
LinqToDB.CodeModel.CodeBuilder.Type(System.Type! type, bool nullable) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeBuilder.TypeParameter(LinqToDB.CodeModel.CodeIdentifier! name) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeBuilder.Variable(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type, bool rvalueTyped) -> LinqToDB.CodeModel.CodeVariable!
LinqToDB.CodeModel.CodeCallBase
LinqToDB.CodeModel.CodeCallBase.Callee.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeCallBase.CanSkipTypeArguments.get -> bool
LinqToDB.CodeModel.CodeCallBase.CodeCallBase(bool extension, LinqToDB.CodeModel.ICodeExpression! callee, LinqToDB.CodeModel.CodeIdentifier! method, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeTypeToken!>? genericArguments, bool skipTypeArguments, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? wrapTrivia) -> void
LinqToDB.CodeModel.CodeCallBase.Extension.get -> bool
LinqToDB.CodeModel.CodeCallBase.MethodName.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeCallBase.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.ICodeExpression!>!
LinqToDB.CodeModel.CodeCallBase.TypeArguments.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeTypeToken!>!
LinqToDB.CodeModel.CodeCallBase.WrapTrivia.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.SimpleTrivia>?
LinqToDB.CodeModel.CodeCallExpression
LinqToDB.CodeModel.CodeCallExpression.CodeCallExpression(bool extension, LinqToDB.CodeModel.ICodeExpression! callee, LinqToDB.CodeModel.CodeIdentifier! method, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.IType!>! genericArguments, bool skipTypeArguments, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? wrapTrivia, LinqToDB.CodeModel.IType! returnType) -> void
LinqToDB.CodeModel.CodeCallExpression.ReturnType.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeCallStatement
LinqToDB.CodeModel.CodeCallStatement.CodeCallStatement(bool extension, LinqToDB.CodeModel.ICodeExpression! callee, LinqToDB.CodeModel.CodeIdentifier! method, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.IType!>! genericArguments, bool skipTypeArguments, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? wrapTrivia) -> void
LinqToDB.CodeModel.CodeClass
LinqToDB.CodeModel.CodeClass.CodeClass(LinqToDB.CodeModel.CodeClass! parent, LinqToDB.CodeModel.CodeIdentifier! name) -> void
LinqToDB.CodeModel.CodeClass.CodeClass(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeClass? parent, LinqToDB.CodeModel.CodeTypeToken? inherits, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeTypeToken!>? implements, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.IMemberGroup!>? members, LinqToDB.CodeModel.CodeTypeInitializer? typeInitializer) -> void
LinqToDB.CodeModel.CodeClass.CodeClass(System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>? namespace, LinqToDB.CodeModel.CodeIdentifier! name) -> void
LinqToDB.CodeModel.CodeClass.Implements.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeTypeToken!>!
LinqToDB.CodeModel.CodeClass.Inherits.get -> LinqToDB.CodeModel.CodeTypeToken?
LinqToDB.CodeModel.CodeClass.Members.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.IMemberGroup!>!
LinqToDB.CodeModel.CodeClass.Parent.get -> LinqToDB.CodeModel.CodeClass?
LinqToDB.CodeModel.CodeClass.This.get -> LinqToDB.CodeModel.CodeThis!
LinqToDB.CodeModel.CodeClass.TypeInitializer.get -> LinqToDB.CodeModel.CodeTypeInitializer?
LinqToDB.CodeModel.CodeComment
LinqToDB.CodeModel.CodeComment.CodeComment(string! text, bool inline) -> void
LinqToDB.CodeModel.CodeComment.Inline.get -> bool
LinqToDB.CodeModel.CodeComment.Text.get -> string!
LinqToDB.CodeModel.CodeConstant
LinqToDB.CodeModel.CodeConstant.CodeConstant(LinqToDB.CodeModel.IType! type, object? value, bool targetTyped) -> void
LinqToDB.CodeModel.CodeConstant.TargetTyped.get -> bool
LinqToDB.CodeModel.CodeConstant.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeConstant.Value.get -> object?
LinqToDB.CodeModel.CodeConstructor
LinqToDB.CodeModel.CodeConstructor.BaseArguments.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.ICodeExpression!>!
LinqToDB.CodeModel.CodeConstructor.Class.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.CodeConstructor.CodeConstructor(LinqToDB.CodeModel.CodeClass! class) -> void
LinqToDB.CodeModel.CodeConstructor.CodeConstructor(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeBlock? body, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeParameter!>? parameters, LinqToDB.CodeModel.CodeClass! class, bool thisCall, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>? baseArguments) -> void
LinqToDB.CodeModel.CodeConstructor.ThisCall.get -> bool
LinqToDB.CodeModel.CodeDefault
LinqToDB.CodeModel.CodeDefault.CodeDefault(LinqToDB.CodeModel.CodeTypeToken! type, bool targetTyped) -> void
LinqToDB.CodeModel.CodeDefault.CodeDefault(LinqToDB.CodeModel.IType! type, bool targetTyped) -> void
LinqToDB.CodeModel.CodeDefault.TargetTyped.get -> bool
LinqToDB.CodeModel.CodeDefault.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeElementList<TElement>
LinqToDB.CodeModel.CodeElementList<TElement>.Add(TElement element) -> void
LinqToDB.CodeModel.CodeElementList<TElement>.CodeElementList(System.Collections.Generic.IEnumerable<TElement>? items) -> void
LinqToDB.CodeModel.CodeElementList<TElement>.InsertAt(TElement element, int index) -> void
LinqToDB.CodeModel.CodeElementList<TElement>.Items.get -> System.Collections.Generic.IReadOnlyList<TElement>!
LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Array = 43 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.AsOperator = 46 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.AssignmentExpression = 41 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.AssignmentStatement = 28 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Attribute = 6 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.AwaitExpression = 50 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.AwaitStatement = 29 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.BinaryOperation = 35 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.CallExpression = 48 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.CallStatement = 27 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Cast = 45 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Class = 8 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ClassGroup = 16 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Comment = 1 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Constant = 32 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Constructor = 10 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ConstructorGroup = 18 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Default = 42 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.EmptyLine = 4 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ExternalPropertyOrField = 52 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Field = 13 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.FieldGroup = 20 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.File = 0 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Identifier = 21 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Import = 3 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Index = 44 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Lambda = 31 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.MemberAccess = 37 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Method = 12 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.MethodGroup = 17 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.NameOf = 39 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Namespace = 5 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.New = 40 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Parameter = 23 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Pragma = 2 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.PragmaGroup = 15 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Property = 9 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.PropertyGroup = 19 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Reference = 38 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Region = 7 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.RegionGroup = 14 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ReturnStatement = 25 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.SuppressNull = 47 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.TernaryOperation = 36 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.This = 33 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ThrowExpression = 49 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.ThrowStatement = 26 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.TypeConstructor = 11 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.TypeReference = 30 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.TypeToken = 24 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.UnaryOperation = 34 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.Variable = 51 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeElementType.XmlComment = 22 -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.CodeEmptyLine
LinqToDB.CodeModel.CodeExternalPropertyOrField
LinqToDB.CodeModel.CodeExternalPropertyOrField.CodeExternalPropertyOrField(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken! type) -> void
LinqToDB.CodeModel.CodeField
LinqToDB.CodeModel.CodeField.Attributes.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.CodeField.CodeField(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken! type, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.ICodeExpression? initializer) -> void
LinqToDB.CodeModel.CodeField.CodeField(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type) -> void
LinqToDB.CodeModel.CodeField.Initializer.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.CodeModel.CodeField.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeField.Reference.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.CodeModel.CodeField.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeFile
LinqToDB.CodeModel.CodeFile.CodeFile(string! fileName) -> void
LinqToDB.CodeModel.CodeFile.CodeFile(string! fileName, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeComment!>? header, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeImport!>? imports, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ITopLevelElement!>? items) -> void
LinqToDB.CodeModel.CodeFile.FileName.get -> string!
LinqToDB.CodeModel.CodeFile.FileName.set -> void
LinqToDB.CodeModel.CodeFile.Header.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeComment!>!
LinqToDB.CodeModel.CodeFile.Imports.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeImport!>!
LinqToDB.CodeModel.CodeFile.NameSource.get -> LinqToDB.CodeModel.CodeIdentifier?
LinqToDB.CodeModel.CodeFile.NameSource.set -> void
LinqToDB.CodeModel.CodeGenerationVisitor
LinqToDB.CodeModel.CodeGenerationVisitor.BuildFragment(System.Action! fragmentBuilder) -> string!
LinqToDB.CodeModel.CodeGenerationVisitor.CodeGenerationVisitor(string! newLine, string! indent) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.DecreaseIdent() -> void
LinqToDB.CodeModel.CodeGenerationVisitor.GetResult() -> string!
LinqToDB.CodeModel.CodeGenerationVisitor.IncreaseIdent() -> void
LinqToDB.CodeModel.CodeGenerationVisitor.PadWithSpaces(string! text, int fullLength) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.SplitByNewLine(string! text) -> string![]!
LinqToDB.CodeModel.CodeGenerationVisitor.UndoTrivia(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? trivia) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.Write(char chr) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.Write(string! text) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteDelimitedList<T>(System.Collections.Generic.IEnumerable<T>! items, string! delimiter, bool newLine) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteDelimitedList<T>(System.Collections.Generic.IEnumerable<T>! items, System.Action<T>! writer, string! delimiter, bool newLine) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteLine() -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteLine(char chr) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteLine(string! text) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteNewLineDelimitedList<T>(System.Collections.Generic.IEnumerable<T>! items) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteTrivia(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? trivia) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteUnindented(string! text) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteUnindentedLine(string! text) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteXmlAttribute(string! text, bool doubleQuote = true) -> void
LinqToDB.CodeModel.CodeGenerationVisitor.WriteXmlText(string! text) -> void
LinqToDB.CodeModel.CodeIdentifier
LinqToDB.CodeModel.CodeIdentifier.CodeIdentifier(string! name, bool immutable) -> void
LinqToDB.CodeModel.CodeIdentifier.CodeIdentifier(string! name, LinqToDB.CodeModel.NameFixOptions? fixOptions, int? position) -> void
LinqToDB.CodeModel.CodeIdentifier.FixOptions.get -> LinqToDB.CodeModel.NameFixOptions?
LinqToDB.CodeModel.CodeIdentifier.Immutable.get -> bool
LinqToDB.CodeModel.CodeIdentifier.Name.get -> string!
LinqToDB.CodeModel.CodeIdentifier.Position.get -> int?
LinqToDB.CodeModel.CodeImport
LinqToDB.CodeModel.CodeImport.CodeImport(System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>! namespace) -> void
LinqToDB.CodeModel.CodeImport.Namespace.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>!
LinqToDB.CodeModel.CodeIndex
LinqToDB.CodeModel.CodeIndex.CodeIndex(LinqToDB.CodeModel.ICodeExpression! object, LinqToDB.CodeModel.ICodeExpression! index, LinqToDB.CodeModel.IType! returnType) -> void
LinqToDB.CodeModel.CodeIndex.Index.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeIndex.Object.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeIndex.ReturnType.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeLambda
LinqToDB.CodeModel.CodeLambda.CanOmmitTypes.get -> bool
LinqToDB.CodeModel.CodeLambda.CodeLambda(LinqToDB.CodeModel.IType! targetType, bool canOmmitTypes) -> void
LinqToDB.CodeModel.CodeLambda.CodeLambda(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeBlock? body, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeParameter!>? parameters, LinqToDB.CodeModel.IType! targetType, bool canOmmitTypes) -> void
LinqToDB.CodeModel.CodeLambda.TargetType.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeMember
LinqToDB.CodeModel.CodeMember.CodeMember(LinqToDB.CodeModel.ICodeExpression! instance, LinqToDB.CodeModel.CodeReference! member) -> void
LinqToDB.CodeModel.CodeMember.CodeMember(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeReference! member) -> void
LinqToDB.CodeModel.CodeMember.Instance.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.CodeModel.CodeMember.Member.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.CodeModel.CodeMember.Type.get -> LinqToDB.CodeModel.CodeTypeReference?
LinqToDB.CodeModel.CodeMethod
LinqToDB.CodeModel.CodeMethod.CodeMethod(LinqToDB.CodeModel.CodeIdentifier! name) -> void
LinqToDB.CodeModel.CodeMethod.CodeMethod(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeBlock? body, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeParameter!>? parameters, LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken? returnType, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeTypeToken!>? typeParameters) -> void
LinqToDB.CodeModel.CodeMethod.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeMethod.ReturnType.get -> LinqToDB.CodeModel.CodeTypeToken?
LinqToDB.CodeModel.CodeMethod.TypeParameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeTypeToken!>!
LinqToDB.CodeModel.CodeModelVisitor
LinqToDB.CodeModel.CodeModelVisitor.CodeModelVisitor() -> void
LinqToDB.CodeModel.CodeModelVisitor.Parent.get -> LinqToDB.CodeModel.ICodeElement?
LinqToDB.CodeModel.CodeModelVisitor.Visit(LinqToDB.CodeModel.ICodeElement! node) -> void
LinqToDB.CodeModel.CodeModelVisitor.VisitList<T>(LinqToDB.CodeModel.CodeElementList<T>! list) -> void
LinqToDB.CodeModel.CodeModelVisitor.VisitList<T>(System.Collections.Generic.IEnumerable<T>! list) -> void
LinqToDB.CodeModel.CodeNameOf
LinqToDB.CodeModel.CodeNameOf.CodeNameOf(LinqToDB.CodeModel.ICodeExpression! expression) -> void
LinqToDB.CodeModel.CodeNameOf.Expression.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeNamespace
LinqToDB.CodeModel.CodeNamespace.CodeNamespace(System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>! name) -> void
LinqToDB.CodeModel.CodeNamespace.Members.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.IMemberGroup!>!
LinqToDB.CodeModel.CodeNamespace.Name.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>!
LinqToDB.CodeModel.CodeNew
LinqToDB.CodeModel.CodeNew.CodeNew(LinqToDB.CodeModel.CodeTypeToken! type, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAssignmentStatement!>! initializers) -> void
LinqToDB.CodeModel.CodeNew.CodeNew(LinqToDB.CodeModel.IType! type, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! parameters, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAssignmentStatement!>! initializers) -> void
LinqToDB.CodeModel.CodeNew.Initializers.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeAssignmentStatement!>!
LinqToDB.CodeModel.CodeNew.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.ICodeExpression!>!
LinqToDB.CodeModel.CodeNew.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeNewArray
LinqToDB.CodeModel.CodeNewArray.CodeNewArray(LinqToDB.CodeModel.CodeTypeToken! type, bool valueTyped, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! values, bool inline) -> void
LinqToDB.CodeModel.CodeNewArray.CodeNewArray(LinqToDB.CodeModel.IType! type, bool valueTyped, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.ICodeExpression!>! values, bool inline) -> void
LinqToDB.CodeModel.CodeNewArray.Inline.get -> bool
LinqToDB.CodeModel.CodeNewArray.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeNewArray.Values.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.ICodeExpression!>!
LinqToDB.CodeModel.CodeNewArray.ValueTyped.get -> bool
LinqToDB.CodeModel.CodeParameter
LinqToDB.CodeModel.CodeParameter.CodeParameter(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeParameterDirection direction, LinqToDB.CodeModel.ICodeExpression? defaultValue) -> void
LinqToDB.CodeModel.CodeParameter.DefaultValue.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.CodeModel.CodeParameter.Direction.get -> LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.CodeModel.CodeParameterDirection.In = 0 -> LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.CodeModel.CodeParameterDirection.Out = 2 -> LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.CodeModel.CodeParameterDirection.Ref = 1 -> LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.CodeModel.CodePragma
LinqToDB.CodeModel.CodePragma.CodePragma(LinqToDB.CodeModel.PragmaType type, System.Collections.Generic.IEnumerable<string!>! parameters) -> void
LinqToDB.CodeModel.CodePragma.Parameters.get -> System.Collections.Generic.IReadOnlyList<string!>!
LinqToDB.CodeModel.CodePragma.PragmaType.get -> LinqToDB.CodeModel.PragmaType
LinqToDB.CodeModel.CodeProperty
LinqToDB.CodeModel.CodeProperty.Attributes.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.CodeProperty.CodeProperty(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type) -> void
LinqToDB.CodeModel.CodeProperty.CodeProperty(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken! type, LinqToDB.CodeModel.Modifiers attributes, bool hasGetter, LinqToDB.CodeModel.CodeBlock? getter, bool hasSetter, LinqToDB.CodeModel.Modifiers setterModifiers, LinqToDB.CodeModel.CodeBlock? setter, LinqToDB.CodeModel.CodeComment? trailingComment, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, LinqToDB.CodeModel.ICodeExpression? initializer) -> void
LinqToDB.CodeModel.CodeProperty.Getter.get -> LinqToDB.CodeModel.CodeBlock?
LinqToDB.CodeModel.CodeProperty.HasGetter.get -> bool
LinqToDB.CodeModel.CodeProperty.HasSetter.get -> bool
LinqToDB.CodeModel.CodeProperty.Initializer.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.CodeModel.CodeProperty.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeProperty.Reference.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.CodeModel.CodeProperty.Setter.get -> LinqToDB.CodeModel.CodeBlock?
LinqToDB.CodeModel.CodeProperty.SetterModifiers.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.CodeProperty.TrailingComment.get -> LinqToDB.CodeModel.CodeComment?
LinqToDB.CodeModel.CodeProperty.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeProperty.XmlDoc.get -> LinqToDB.CodeModel.CodeXmlComment?
LinqToDB.CodeModel.CodeReference
LinqToDB.CodeModel.CodeReference.CodeReference(LinqToDB.CodeModel.ITypedName! referenced) -> void
LinqToDB.CodeModel.CodeReference.Referenced.get -> LinqToDB.CodeModel.ITypedName!
LinqToDB.CodeModel.CodeRegion
LinqToDB.CodeModel.CodeRegion.CodeRegion(LinqToDB.CodeModel.CodeClass! ownerType, string! name) -> void
LinqToDB.CodeModel.CodeRegion.IsEmpty() -> bool
LinqToDB.CodeModel.CodeRegion.Members.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.IMemberGroup!>!
LinqToDB.CodeModel.CodeRegion.Name.get -> string!
LinqToDB.CodeModel.CodeRegion.Type.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.CodeReturn
LinqToDB.CodeModel.CodeReturn.CodeReturn(LinqToDB.CodeModel.ICodeExpression? expression, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? beforeTrivia, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? afterTrivia) -> void
LinqToDB.CodeModel.CodeReturn.Expression.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.CodeModel.CodeSuppressNull
LinqToDB.CodeModel.CodeSuppressNull.CodeSuppressNull(LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeSuppressNull.Value.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeTernary
LinqToDB.CodeModel.CodeTernary.CodeTernary(LinqToDB.CodeModel.ICodeExpression! condition, LinqToDB.CodeModel.ICodeExpression! trueValue, LinqToDB.CodeModel.ICodeExpression! falseValue) -> void
LinqToDB.CodeModel.CodeTernary.Condition.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeTernary.False.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeTernary.True.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeThis
LinqToDB.CodeModel.CodeThis.Class.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.CodeThis.CodeThis(LinqToDB.CodeModel.CodeClass! class) -> void
LinqToDB.CodeModel.CodeThrowBase
LinqToDB.CodeModel.CodeThrowBase.CodeThrowBase(LinqToDB.CodeModel.ICodeExpression! exception) -> void
LinqToDB.CodeModel.CodeThrowBase.Exception.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeThrowExpression
LinqToDB.CodeModel.CodeThrowExpression.CodeThrowExpression(LinqToDB.CodeModel.ICodeExpression! exception, LinqToDB.CodeModel.IType! targetType) -> void
LinqToDB.CodeModel.CodeThrowStatement
LinqToDB.CodeModel.CodeThrowStatement.CodeThrowStatement(LinqToDB.CodeModel.ICodeExpression! exception, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? beforeTrivia, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.SimpleTrivia>? afterTrivia) -> void
LinqToDB.CodeModel.CodeTypeCast
LinqToDB.CodeModel.CodeTypeCast.CodeTypeCast(LinqToDB.CodeModel.CodeTypeToken! type, LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeTypeCast.CodeTypeCast(LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.ICodeExpression! value) -> void
LinqToDB.CodeModel.CodeTypeCast.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeTypeCast.Value.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeTypedName
LinqToDB.CodeModel.CodeTypedName.CodeTypedName(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken! type) -> void
LinqToDB.CodeModel.CodeTypedName.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeTypedName.Reference.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.CodeModel.CodeTypedName.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.CodeTypeInitializer
LinqToDB.CodeModel.CodeTypeInitializer.CodeTypeInitializer(LinqToDB.CodeModel.CodeClass! type) -> void
LinqToDB.CodeModel.CodeTypeInitializer.Type.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.CodeTypeReference
LinqToDB.CodeModel.CodeTypeReference.CodeTypeReference(LinqToDB.CodeModel.IType! type) -> void
LinqToDB.CodeModel.CodeTypeReference.Type.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeTypeToken
LinqToDB.CodeModel.CodeTypeToken.CodeTypeToken(LinqToDB.CodeModel.IType! type) -> void
LinqToDB.CodeModel.CodeTypeToken.Type.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.CodeUnary
LinqToDB.CodeModel.CodeUnary.Argument.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.CodeModel.CodeUnary.CodeUnary(LinqToDB.CodeModel.ICodeExpression! argument, LinqToDB.CodeModel.UnaryOperation operation) -> void
LinqToDB.CodeModel.CodeUnary.Operation.get -> LinqToDB.CodeModel.UnaryOperation
LinqToDB.CodeModel.CodeVariable
LinqToDB.CodeModel.CodeVariable.CodeVariable(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.CodeTypeToken! type, bool rvalueTyped) -> void
LinqToDB.CodeModel.CodeVariable.CodeVariable(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type, bool rvalueTyped) -> void
LinqToDB.CodeModel.CodeVariable.RValueTyped.get -> bool
LinqToDB.CodeModel.CodeXmlComment
LinqToDB.CodeModel.CodeXmlComment.CodeXmlComment() -> void
LinqToDB.CodeModel.CodeXmlComment.ParameterComment
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Comment.get -> string!
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Comment.init -> void
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Deconstruct(out LinqToDB.CodeModel.CodeIdentifier! Parameter, out string! Comment) -> void
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Parameter.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Parameter.init -> void
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.ParameterComment(LinqToDB.CodeModel.CodeIdentifier! Parameter, string! Comment) -> void
LinqToDB.CodeModel.CodeXmlComment.ParameterComment.ParameterComment(LinqToDB.CodeModel.CodeXmlComment.ParameterComment! original) -> void
LinqToDB.CodeModel.CodeXmlComment.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeXmlComment.ParameterComment!>!
LinqToDB.CodeModel.CodeXmlComment.Summary.get -> string?
LinqToDB.CodeModel.ConstructorBuilder
LinqToDB.CodeModel.ConstructorBuilder.Base(params LinqToDB.CodeModel.ICodeExpression![]! parameters) -> LinqToDB.CodeModel.ConstructorBuilder!
LinqToDB.CodeModel.ConstructorGroup
LinqToDB.CodeModel.ConstructorGroup.Class.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.ConstructorGroup.Class.set -> void
LinqToDB.CodeModel.ConstructorGroup.ConstructorGroup(LinqToDB.CodeModel.CodeClass! owner) -> void
LinqToDB.CodeModel.ConstructorGroup.ConstructorGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeConstructor!>? members, LinqToDB.CodeModel.CodeClass! owner) -> void
LinqToDB.CodeModel.ConstructorGroup.New() -> LinqToDB.CodeModel.ConstructorBuilder!
LinqToDB.CodeModel.ConvertCodeModelVisitor
LinqToDB.CodeModel.ConvertCodeModelVisitor.ConvertCodeModelVisitor() -> void
LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.ICodeElement! node) -> LinqToDB.CodeModel.ICodeElement!
LinqToDB.CodeModel.FieldBuilder
LinqToDB.CodeModel.FieldBuilder.AddInitializer(LinqToDB.CodeModel.ICodeExpression! initializer) -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldBuilder.Field.get -> LinqToDB.CodeModel.CodeField!
LinqToDB.CodeModel.FieldBuilder.Private() -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldBuilder.Public() -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldBuilder.ReadOnly() -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldBuilder.Static() -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldGroup
LinqToDB.CodeModel.FieldGroup.FieldGroup(bool tableLayout) -> void
LinqToDB.CodeModel.FieldGroup.FieldGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeField!>? members, bool tableLayout) -> void
LinqToDB.CodeModel.FieldGroup.New(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.FieldBuilder!
LinqToDB.CodeModel.FieldGroup.TableLayout.get -> bool
LinqToDB.CodeModel.ICodeElement
LinqToDB.CodeModel.ICodeElement.ElementType.get -> LinqToDB.CodeModel.CodeElementType
LinqToDB.CodeModel.ICodeExpression
LinqToDB.CodeModel.ICodeExpression.Type.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.ICodeStatement
LinqToDB.CodeModel.ICodeStatement.AddSimpleTrivia(LinqToDB.CodeModel.SimpleTrivia trivia, bool after) -> void
LinqToDB.CodeModel.ICodeStatement.After.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.SimpleTrivia>?
LinqToDB.CodeModel.ICodeStatement.Before.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.SimpleTrivia>?
LinqToDB.CodeModel.IGroupElement
LinqToDB.CodeModel.ILanguageProvider
LinqToDB.CodeModel.ILanguageProvider.ASTBuilder.get -> LinqToDB.CodeModel.CodeBuilder!
LinqToDB.CodeModel.ILanguageProvider.FileExtension.get -> string!
LinqToDB.CodeModel.ILanguageProvider.FullNameComparer.get -> System.Collections.Generic.IComparer<System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeIdentifier!>!>!
LinqToDB.CodeModel.ILanguageProvider.FullNameEqualityComparer.get -> System.Collections.Generic.IEqualityComparer<System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeIdentifier!>!>!
LinqToDB.CodeModel.ILanguageProvider.GetAlias(LinqToDB.CodeModel.IType! type) -> string?
LinqToDB.CodeModel.ILanguageProvider.GetCodeGenerator(string! newLine, string! indent, bool useNRT, System.Collections.Generic.IReadOnlyDictionary<LinqToDB.CodeModel.CodeIdentifier!, System.Collections.Generic.ISet<System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeIdentifier!>!>!>! knownTypes, System.Collections.Generic.IReadOnlyDictionary<System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeIdentifier!>!, System.Collections.Generic.ISet<LinqToDB.CodeModel.CodeIdentifier!>!>! scopedNames, System.Collections.Generic.IReadOnlyDictionary<System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeIdentifier!>!, System.Collections.Generic.ISet<LinqToDB.CodeModel.CodeIdentifier!>!>! scopedTypes) -> LinqToDB.CodeModel.CodeGenerationVisitor!
LinqToDB.CodeModel.ILanguageProvider.GetIdentifiersNormalizer() -> LinqToDB.CodeModel.CodeModelVisitor!
LinqToDB.CodeModel.ILanguageProvider.IdentifierEqualityComparer.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.CodeModel.CodeIdentifier!>!
LinqToDB.CodeModel.ILanguageProvider.IsValidIdentifierFirstChar(string! character, System.Globalization.UnicodeCategory category) -> bool
LinqToDB.CodeModel.ILanguageProvider.IsValidIdentifierNonFirstChar(string! character, System.Globalization.UnicodeCategory category) -> bool
LinqToDB.CodeModel.ILanguageProvider.MissingXmlCommentWarnCodes.get -> string![]!
LinqToDB.CodeModel.ILanguageProvider.NRTSupported.get -> bool
LinqToDB.CodeModel.ILanguageProvider.RawIdentifierEqualityComparer.get -> System.Collections.Generic.IEqualityComparer<string!>!
LinqToDB.CodeModel.ILanguageProvider.TypeEqualityComparerWithNRT.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.CodeModel.IType!>!
LinqToDB.CodeModel.ILanguageProvider.TypeEqualityComparerWithoutNRT.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.CodeModel.IType!>!
LinqToDB.CodeModel.ILanguageProvider.TypeParser.get -> LinqToDB.CodeModel.ITypeParser!
LinqToDB.CodeModel.ILValue
LinqToDB.CodeModel.IMemberGroup
LinqToDB.CodeModel.IMemberGroup.IsEmpty.get -> bool
LinqToDB.CodeModel.ITopLevelElement
LinqToDB.CodeModel.IType
LinqToDB.CodeModel.IType.ArrayElementType.get -> LinqToDB.CodeModel.IType?
LinqToDB.CodeModel.IType.ArraySizes.get -> System.Collections.Generic.IReadOnlyList<int?>?
LinqToDB.CodeModel.IType.External.get -> bool
LinqToDB.CodeModel.IType.IsNullable.get -> bool
LinqToDB.CodeModel.IType.IsValueType.get -> bool
LinqToDB.CodeModel.IType.Kind.get -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.IType.Name.get -> LinqToDB.CodeModel.CodeIdentifier?
LinqToDB.CodeModel.IType.Namespace.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeIdentifier!>?
LinqToDB.CodeModel.IType.OpenGenericArgCount.get -> int?
LinqToDB.CodeModel.IType.Parent.get -> LinqToDB.CodeModel.IType?
LinqToDB.CodeModel.IType.TypeArguments.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.IType!>?
LinqToDB.CodeModel.IType.WithNullability(bool nullable) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.IType.WithTypeArguments(params LinqToDB.CodeModel.IType![]! typeArguments) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.ITypedName
LinqToDB.CodeModel.ITypedName.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.ITypedName.Type.get -> LinqToDB.CodeModel.CodeTypeToken!
LinqToDB.CodeModel.ITypeParser
LinqToDB.CodeModel.ITypeParser.Parse(string! typeName, bool valueType) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.ITypeParser.Parse(System.Type! type) -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.ITypeParser.Parse<T>() -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.ITypeParser.ParseNamespaceOrRegularTypeName(string! name, bool generated) -> LinqToDB.CodeModel.CodeIdentifier![]!
LinqToDB.CodeModel.LambdaMethodBuilder
LinqToDB.CodeModel.LanguageProviders
LinqToDB.CodeModel.MemberGroup<TMember>
LinqToDB.CodeModel.MemberGroup<TMember>.AddMember(TMember member) -> TMember
LinqToDB.CodeModel.MemberGroup<TMember>.MemberGroup(System.Collections.Generic.IEnumerable<TMember>? members) -> void
LinqToDB.CodeModel.MemberGroup<TMember>.Members.get -> System.Collections.Generic.IReadOnlyList<TMember>!
LinqToDB.CodeModel.MethodBase
LinqToDB.CodeModel.MethodBase.Attributes.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.MethodBase.Body.get -> LinqToDB.CodeModel.CodeBlock?
LinqToDB.CodeModel.MethodBase.MethodBase(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeBlock? body, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeParameter!>? parameters) -> void
LinqToDB.CodeModel.MethodBase.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.CodeModel.CodeParameter!>!
LinqToDB.CodeModel.MethodBase.XmlDoc.get -> LinqToDB.CodeModel.CodeXmlComment?
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.Attribute(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.AttributeBuilder!
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.Body() -> LinqToDB.CodeModel.BlockBuilder!
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.Method.get -> TMethod!
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.MethodBaseBuilder(TMethod! method) -> void
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.Parameter(LinqToDB.CodeModel.CodeParameter! parameter) -> TBuilder!
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.SetModifiers(LinqToDB.CodeModel.Modifiers modifiers) -> TBuilder!
LinqToDB.CodeModel.MethodBaseBuilder<TBuilder, TMethod>.XmlComment() -> LinqToDB.CodeModel.XmlDocBuilder!
LinqToDB.CodeModel.MethodBuilder
LinqToDB.CodeModel.MethodBuilder.AddAttribute(LinqToDB.CodeModel.CodeAttribute! attribute) -> LinqToDB.CodeModel.MethodBuilder!
LinqToDB.CodeModel.MethodBuilder.Returns(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.MethodBuilder!
LinqToDB.CodeModel.MethodBuilder.TypeParameter(LinqToDB.CodeModel.IType! typeParameter) -> LinqToDB.CodeModel.MethodBuilder!
LinqToDB.CodeModel.MethodGroup
LinqToDB.CodeModel.MethodGroup.MethodGroup(bool tableLayout) -> void
LinqToDB.CodeModel.MethodGroup.MethodGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeMethod!>? members, bool tableLayout) -> void
LinqToDB.CodeModel.MethodGroup.New(LinqToDB.CodeModel.CodeIdentifier! name) -> LinqToDB.CodeModel.MethodBuilder!
LinqToDB.CodeModel.MethodGroup.TableLayout.get -> bool
LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Abstract = 64 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Async = 2048 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Extension = 4608 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Internal = 4 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.New = 16 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.None = 0 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Override = 32 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Partial = 256 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Private = 8 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Protected = 2 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Public = 1 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.ReadOnly = 1024 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Sealed = 128 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Static = 4096 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.Modifiers.Virtual = 8192 -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.NameFixOptions
LinqToDB.CodeModel.NameFixOptions.DefaultValue.get -> string!
LinqToDB.CodeModel.NameFixOptions.FixType.get -> LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NameFixOptions.NameFixOptions(string! defaultValue, LinqToDB.CodeModel.NameFixType fixType) -> void
LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NameFixType.Replace = 0 -> LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NameFixType.ReplaceWithPosition = 1 -> LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NameFixType.Suffix = 2 -> LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NameFixType.SuffixWithPosition = 3 -> LinqToDB.CodeModel.NameFixType
LinqToDB.CodeModel.NamespaceBuilder
LinqToDB.CodeModel.NamespaceBuilder.Classes() -> LinqToDB.CodeModel.ClassGroup!
LinqToDB.CodeModel.NamespaceBuilder.Namespace.get -> LinqToDB.CodeModel.CodeNamespace!
LinqToDB.CodeModel.NoopCodeModelVisitor
LinqToDB.CodeModel.NoopCodeModelVisitor.NoopCodeModelVisitor() -> void
LinqToDB.CodeModel.PragmaGroup
LinqToDB.CodeModel.PragmaGroup.Add(LinqToDB.CodeModel.CodePragma! pragma) -> LinqToDB.CodeModel.PragmaGroup!
LinqToDB.CodeModel.PragmaGroup.PragmaGroup() -> void
LinqToDB.CodeModel.PragmaGroup.PragmaGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodePragma!>? members) -> void
LinqToDB.CodeModel.PragmaType
LinqToDB.CodeModel.PragmaType.DisableWarning = 0 -> LinqToDB.CodeModel.PragmaType
LinqToDB.CodeModel.PragmaType.Error = 2 -> LinqToDB.CodeModel.PragmaType
LinqToDB.CodeModel.PragmaType.NullableEnable = 1 -> LinqToDB.CodeModel.PragmaType
LinqToDB.CodeModel.PropertyBuilder
LinqToDB.CodeModel.PropertyBuilder.AddAttribute(LinqToDB.CodeModel.CodeAttribute! attribute) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyBuilder.AddAttribute(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.AttributeBuilder!
LinqToDB.CodeModel.PropertyBuilder.AddGetter() -> LinqToDB.CodeModel.BlockBuilder!
LinqToDB.CodeModel.PropertyBuilder.AddSetter() -> LinqToDB.CodeModel.BlockBuilder!
LinqToDB.CodeModel.PropertyBuilder.Default(bool hasSetter, LinqToDB.CodeModel.Modifiers setterModifiers = LinqToDB.CodeModel.Modifiers.None) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyBuilder.Property.get -> LinqToDB.CodeModel.CodeProperty!
LinqToDB.CodeModel.PropertyBuilder.SetInitializer(LinqToDB.CodeModel.ICodeExpression! initializer) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyBuilder.SetModifiers(LinqToDB.CodeModel.Modifiers modifiers) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyBuilder.TrailingComment(string! comment) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyBuilder.XmlComment() -> LinqToDB.CodeModel.XmlDocBuilder!
LinqToDB.CodeModel.PropertyGroup
LinqToDB.CodeModel.PropertyGroup.New(LinqToDB.CodeModel.CodeIdentifier! name, LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.PropertyBuilder!
LinqToDB.CodeModel.PropertyGroup.PropertyGroup(bool tableLayout) -> void
LinqToDB.CodeModel.PropertyGroup.PropertyGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeProperty!>? members, bool tableLayout) -> void
LinqToDB.CodeModel.PropertyGroup.TableLayout.get -> bool
LinqToDB.CodeModel.ProviderSpecificStructsEqualityFixer
LinqToDB.CodeModel.ProviderSpecificStructsEqualityFixer.ProviderSpecificStructsEqualityFixer(LinqToDB.CodeModel.ILanguageProvider! languageProvider) -> void
LinqToDB.CodeModel.RegionBuilder
LinqToDB.CodeModel.RegionBuilder.Classes() -> LinqToDB.CodeModel.ClassGroup!
LinqToDB.CodeModel.RegionBuilder.Constructors() -> LinqToDB.CodeModel.ConstructorGroup!
LinqToDB.CodeModel.RegionBuilder.Fields(bool tableLayout) -> LinqToDB.CodeModel.FieldGroup!
LinqToDB.CodeModel.RegionBuilder.Methods(bool tableLayout) -> LinqToDB.CodeModel.MethodGroup!
LinqToDB.CodeModel.RegionBuilder.Pragmas() -> LinqToDB.CodeModel.PragmaGroup!
LinqToDB.CodeModel.RegionBuilder.Properties(bool tableLayout) -> LinqToDB.CodeModel.PropertyGroup!
LinqToDB.CodeModel.RegionBuilder.Region.get -> LinqToDB.CodeModel.CodeRegion!
LinqToDB.CodeModel.RegionBuilder.Regions() -> LinqToDB.CodeModel.RegionGroup!
LinqToDB.CodeModel.RegionGroup
LinqToDB.CodeModel.RegionGroup.New(string! name) -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.CodeModel.RegionGroup.OwnerType.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.CodeModel.RegionGroup.RegionGroup(LinqToDB.CodeModel.CodeClass! class) -> void
LinqToDB.CodeModel.RegionGroup.RegionGroup(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeRegion!>? members, LinqToDB.CodeModel.CodeClass! class) -> void
LinqToDB.CodeModel.SimpleTrivia
LinqToDB.CodeModel.SimpleTrivia.NewLine = 0 -> LinqToDB.CodeModel.SimpleTrivia
LinqToDB.CodeModel.SimpleTrivia.Padding = 1 -> LinqToDB.CodeModel.SimpleTrivia
LinqToDB.CodeModel.TypeBase
LinqToDB.CodeModel.TypeBase.Attributes.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.CodeModel.TypeBase.Name.get -> LinqToDB.CodeModel.CodeIdentifier!
LinqToDB.CodeModel.TypeBase.Type.get -> LinqToDB.CodeModel.IType!
LinqToDB.CodeModel.TypeBase.TypeBase(System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeAttribute!>? customAttributes, LinqToDB.CodeModel.Modifiers attributes, LinqToDB.CodeModel.CodeXmlComment? xmlDoc, LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeIdentifier! name) -> void
LinqToDB.CodeModel.TypeBase.XmlDoc.get -> LinqToDB.CodeModel.CodeXmlComment?
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.AddAttribute(LinqToDB.CodeModel.CodeAttribute! attribute) -> TBuilder!
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.AddAttribute(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.AttributeBuilder!
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.Group.get -> LinqToDB.CodeModel.ClassGroup!
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.SetModifiers(LinqToDB.CodeModel.Modifiers modifiers) -> TBuilder!
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.Type.get -> TType!
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.TypeBuilder(TType! type, LinqToDB.CodeModel.ClassGroup! group) -> void
LinqToDB.CodeModel.TypeBuilder<TBuilder, TType>.XmlComment() -> LinqToDB.CodeModel.XmlDocBuilder!
LinqToDB.CodeModel.TypeInitializerBuilder
LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.Array = 0 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.Dynamic = 1 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.Generic = 3 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.OpenGeneric = 4 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.Regular = 2 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.TypeKind.TypeArgument = 5 -> LinqToDB.CodeModel.TypeKind
LinqToDB.CodeModel.UnaryOperation
LinqToDB.CodeModel.UnaryOperation.Not = 0 -> LinqToDB.CodeModel.UnaryOperation
LinqToDB.CodeModel.WellKnownTypes
LinqToDB.CodeModel.WellKnownTypes.LinqToDB
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Common
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Expressions
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Tools
LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Tools.Comparers
LinqToDB.CodeModel.WellKnownTypes.Microsoft
LinqToDB.CodeModel.WellKnownTypes.Microsoft.SqlServer
LinqToDB.CodeModel.WellKnownTypes.Microsoft.SqlServer.Types
LinqToDB.CodeModel.WellKnownTypes.System
LinqToDB.CodeModel.WellKnownTypes.System.Collections
LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic
LinqToDB.CodeModel.WellKnownTypes.System.Data
LinqToDB.CodeModel.WellKnownTypes.System.Data.Common
LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes
LinqToDB.CodeModel.WellKnownTypes.System.Linq
LinqToDB.CodeModel.WellKnownTypes.System.Linq.Expressions
LinqToDB.CodeModel.WellKnownTypes.System.Reflection
LinqToDB.CodeModel.WellKnownTypes.System.Threading
LinqToDB.CodeModel.WellKnownTypes.System.Threading.Tasks
LinqToDB.CodeModel.XmlDocBuilder
LinqToDB.CodeModel.XmlDocBuilder.Parameter(LinqToDB.CodeModel.CodeIdentifier! parameter, string! text) -> LinqToDB.CodeModel.XmlDocBuilder!
LinqToDB.CodeModel.XmlDocBuilder.Summary(string! summary) -> LinqToDB.CodeModel.XmlDocBuilder!
LinqToDB.DataModel.AdditionalSchemaModel
LinqToDB.DataModel.AdditionalSchemaModel.AdditionalSchemaModel(string! dataContextPropertyName, LinqToDB.DataModel.ClassModel! wrapperClass, LinqToDB.DataModel.ClassModel! contextClass) -> void
LinqToDB.DataModel.AdditionalSchemaModel.ContextClass.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.AdditionalSchemaModel.DataContextPropertyName.get -> string!
LinqToDB.DataModel.AdditionalSchemaModel.DataContextPropertyName.set -> void
LinqToDB.DataModel.AdditionalSchemaModel.WrapperClass.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.AggregateFunctionModel
LinqToDB.DataModel.AggregateFunctionModel.AggregateFunctionModel(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method, LinqToDB.Metadata.FunctionMetadata! metadata, LinqToDB.CodeModel.IType! returnType) -> void
LinqToDB.DataModel.AggregateFunctionModel.ReturnType.get -> LinqToDB.CodeModel.IType!
LinqToDB.DataModel.AggregateFunctionModel.ReturnType.set -> void
LinqToDB.DataModel.AssociationModel
LinqToDB.DataModel.AssociationModel.AssociationModel(LinqToDB.Metadata.AssociationMetadata! sourceMetadata, LinqToDB.Metadata.AssociationMetadata! tagetMetadata, LinqToDB.DataModel.EntityModel! source, LinqToDB.DataModel.EntityModel! target, bool manyToOne) -> void
LinqToDB.DataModel.AssociationModel.BackreferenceExtension.get -> LinqToDB.DataModel.MethodModel?
LinqToDB.DataModel.AssociationModel.BackreferenceExtension.set -> void
LinqToDB.DataModel.AssociationModel.BackreferenceProperty.get -> LinqToDB.DataModel.PropertyModel?
LinqToDB.DataModel.AssociationModel.BackreferenceProperty.set -> void
LinqToDB.DataModel.AssociationModel.Extension.get -> LinqToDB.DataModel.MethodModel?
LinqToDB.DataModel.AssociationModel.Extension.set -> void
LinqToDB.DataModel.AssociationModel.ForeignKeyName.get -> string?
LinqToDB.DataModel.AssociationModel.ForeignKeyName.set -> void
LinqToDB.DataModel.AssociationModel.FromColumns.get -> LinqToDB.DataModel.ColumnModel![]?
LinqToDB.DataModel.AssociationModel.FromColumns.set -> void
LinqToDB.DataModel.AssociationModel.ManyToOne.get -> bool
LinqToDB.DataModel.AssociationModel.ManyToOne.set -> void
LinqToDB.DataModel.AssociationModel.Property.get -> LinqToDB.DataModel.PropertyModel?
LinqToDB.DataModel.AssociationModel.Property.set -> void
LinqToDB.DataModel.AssociationModel.Source.get -> LinqToDB.DataModel.EntityModel!
LinqToDB.DataModel.AssociationModel.Source.set -> void
LinqToDB.DataModel.AssociationModel.SourceMetadata.get -> LinqToDB.Metadata.AssociationMetadata!
LinqToDB.DataModel.AssociationModel.SourceMetadata.set -> void
LinqToDB.DataModel.AssociationModel.Target.get -> LinqToDB.DataModel.EntityModel!
LinqToDB.DataModel.AssociationModel.Target.set -> void
LinqToDB.DataModel.AssociationModel.TargetMetadata.get -> LinqToDB.Metadata.AssociationMetadata!
LinqToDB.DataModel.AssociationModel.TargetMetadata.set -> void
LinqToDB.DataModel.AssociationModel.ToColumns.get -> LinqToDB.DataModel.ColumnModel![]?
LinqToDB.DataModel.AssociationModel.ToColumns.set -> void
LinqToDB.DataModel.AsyncProcedureResult
LinqToDB.DataModel.AsyncProcedureResult.AsyncProcedureResult(LinqToDB.DataModel.ClassModel! class, LinqToDB.DataModel.PropertyModel! mainResult) -> void
LinqToDB.DataModel.AsyncProcedureResult.Class.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.AsyncProcedureResult.Class.set -> void
LinqToDB.DataModel.AsyncProcedureResult.MainResult.get -> LinqToDB.DataModel.PropertyModel!
LinqToDB.DataModel.AsyncProcedureResult.MainResult.set -> void
LinqToDB.DataModel.AsyncProcedureResult.ParameterProperties.get -> System.Collections.Generic.Dictionary<LinqToDB.DataModel.FunctionParameterModel!, LinqToDB.DataModel.PropertyModel!>!
LinqToDB.DataModel.ClassModel
LinqToDB.DataModel.ClassModel.BaseType.get -> LinqToDB.CodeModel.IType?
LinqToDB.DataModel.ClassModel.BaseType.set -> void
LinqToDB.DataModel.ClassModel.ClassModel(string! fileName, string! name) -> void
LinqToDB.DataModel.ClassModel.ClassModel(string! name) -> void
LinqToDB.DataModel.ClassModel.CustomAttributes.get -> System.Collections.Generic.List<LinqToDB.CodeModel.CodeAttribute!>?
LinqToDB.DataModel.ClassModel.CustomAttributes.set -> void
LinqToDB.DataModel.ClassModel.FileName.get -> string?
LinqToDB.DataModel.ClassModel.FileName.set -> void
LinqToDB.DataModel.ClassModel.Interfaces.get -> System.Collections.Generic.List<LinqToDB.CodeModel.IType!>?
LinqToDB.DataModel.ClassModel.Interfaces.set -> void
LinqToDB.DataModel.ClassModel.Modifiers.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.DataModel.ClassModel.Modifiers.set -> void
LinqToDB.DataModel.ClassModel.Name.get -> string!
LinqToDB.DataModel.ClassModel.Name.set -> void
LinqToDB.DataModel.ClassModel.Namespace.get -> string?
LinqToDB.DataModel.ClassModel.Namespace.set -> void
LinqToDB.DataModel.ClassModel.Summary.get -> string?
LinqToDB.DataModel.ClassModel.Summary.set -> void
LinqToDB.DataModel.ColumnModel
LinqToDB.DataModel.ColumnModel.ColumnModel(LinqToDB.Metadata.ColumnMetadata! metadata, LinqToDB.DataModel.PropertyModel! property) -> void
LinqToDB.DataModel.ColumnModel.Metadata.get -> LinqToDB.Metadata.ColumnMetadata!
LinqToDB.DataModel.ColumnModel.Metadata.set -> void
LinqToDB.DataModel.ColumnModel.Property.get -> LinqToDB.DataModel.PropertyModel!
LinqToDB.DataModel.ColumnModel.Property.set -> void
LinqToDB.DataModel.DatabaseModel
LinqToDB.DataModel.DatabaseModel.AutoGeneratedHeader.get -> string?
LinqToDB.DataModel.DatabaseModel.AutoGeneratedHeader.set -> void
LinqToDB.DataModel.DatabaseModel.DatabaseModel(LinqToDB.DataModel.DataContextModel! context) -> void
LinqToDB.DataModel.DatabaseModel.DataContext.get -> LinqToDB.DataModel.DataContextModel!
LinqToDB.DataModel.DatabaseModel.DisableXmlDocWarnings.get -> bool
LinqToDB.DataModel.DatabaseModel.DisableXmlDocWarnings.set -> void
LinqToDB.DataModel.DatabaseModel.NRTEnabled.get -> bool
LinqToDB.DataModel.DatabaseModel.NRTEnabled.set -> void
LinqToDB.DataModel.DataContextModel
LinqToDB.DataModel.DataContextModel.AdditionalSchemas.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.DataModel.AdditionalSchemaModel!>!
LinqToDB.DataModel.DataContextModel.Associations.get -> System.Collections.Generic.List<LinqToDB.DataModel.AssociationModel!>!
LinqToDB.DataModel.DataContextModel.Class.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.DataContextModel.Class.set -> void
LinqToDB.DataModel.DataContextModel.DataContextModel(LinqToDB.DataModel.ClassModel! classModel) -> void
LinqToDB.DataModel.DataContextModel.HasConfigurationConstructor.get -> bool
LinqToDB.DataModel.DataContextModel.HasConfigurationConstructor.set -> void
LinqToDB.DataModel.DataContextModel.HasDefaultConstructor.get -> bool
LinqToDB.DataModel.DataContextModel.HasDefaultConstructor.set -> void
LinqToDB.DataModel.DataContextModel.HasTypedOptionsConstructor.get -> bool
LinqToDB.DataModel.DataContextModel.HasTypedOptionsConstructor.set -> void
LinqToDB.DataModel.DataContextModel.HasUntypedOptionsConstructor.get -> bool
LinqToDB.DataModel.DataContextModel.HasUntypedOptionsConstructor.set -> void
LinqToDB.DataModel.DataModelGenerator
LinqToDB.DataModel.DataModelGenerator.ConvertToCodeModel() -> LinqToDB.CodeModel.CodeFile![]!
LinqToDB.DataModel.DataModelGenerator.DataModelGenerator(LinqToDB.CodeModel.ILanguageProvider! languageProvider, LinqToDB.DataModel.DatabaseModel! dataModel, LinqToDB.Metadata.IMetadataBuilder? metadataBuilder, System.Func<string!, string!>! findMethodParameterNameNormalizer, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Scaffold.ScaffoldOptions! options) -> void
LinqToDB.DataModel.EntityModel
LinqToDB.DataModel.EntityModel.Class.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.EntityModel.Class.set -> void
LinqToDB.DataModel.EntityModel.Columns.get -> System.Collections.Generic.List<LinqToDB.DataModel.ColumnModel!>!
LinqToDB.DataModel.EntityModel.ContextProperty.get -> LinqToDB.DataModel.PropertyModel?
LinqToDB.DataModel.EntityModel.ContextProperty.set -> void
LinqToDB.DataModel.EntityModel.EntityModel(LinqToDB.Metadata.EntityMetadata! metadata, LinqToDB.DataModel.ClassModel! class, LinqToDB.DataModel.PropertyModel? contextProperty) -> void
LinqToDB.DataModel.EntityModel.FindExtensions.get -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.EntityModel.FindExtensions.set -> void
LinqToDB.DataModel.EntityModel.ImplementsIEquatable.get -> bool
LinqToDB.DataModel.EntityModel.ImplementsIEquatable.set -> void
LinqToDB.DataModel.EntityModel.Metadata.get -> LinqToDB.Metadata.EntityMetadata!
LinqToDB.DataModel.EntityModel.Metadata.set -> void
LinqToDB.DataModel.FileData
LinqToDB.DataModel.FileData.<Clone>$() -> LinqToDB.DataModel.FileData!
LinqToDB.DataModel.FileData.ClassesPerNamespace.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.CodeModel.ClassGroup!>!
LinqToDB.DataModel.FileData.ClassesPerNamespace.init -> void
LinqToDB.DataModel.FileData.Deconstruct(out LinqToDB.CodeModel.CodeFile! File, out System.Collections.Generic.Dictionary<string!, LinqToDB.CodeModel.ClassGroup!>! ClassesPerNamespace) -> void
LinqToDB.DataModel.FileData.Equals(LinqToDB.DataModel.FileData? other) -> bool
LinqToDB.DataModel.FileData.File.get -> LinqToDB.CodeModel.CodeFile!
LinqToDB.DataModel.FileData.File.init -> void
LinqToDB.DataModel.FileData.FileData(LinqToDB.CodeModel.CodeFile! File, System.Collections.Generic.Dictionary<string!, LinqToDB.CodeModel.ClassGroup!>! ClassesPerNamespace) -> void
LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.Async = 2 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.ByEntity = 32 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.ByPrimaryKey = 16 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindAsyncByPkOnContext = LinqToDB.DataModel.FindTypes.Async | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindAsyncByPkOnTable = LinqToDB.DataModel.FindTypes.Async | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindAsyncByRecordOnContext = LinqToDB.DataModel.FindTypes.Async | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindAsyncByRecordOnTable = LinqToDB.DataModel.FindTypes.Async | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindByPkOnContext = LinqToDB.DataModel.FindTypes.Sync | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindByPkOnTable = LinqToDB.DataModel.FindTypes.Sync | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindByRecordOnContext = LinqToDB.DataModel.FindTypes.Sync | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindByRecordOnTable = LinqToDB.DataModel.FindTypes.Sync | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindQueryByPkOnContext = LinqToDB.DataModel.FindTypes.Query | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindQueryByPkOnTable = LinqToDB.DataModel.FindTypes.Query | LinqToDB.DataModel.FindTypes.ByPrimaryKey | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindQueryByRecordOnContext = LinqToDB.DataModel.FindTypes.Query | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnContext -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.FindQueryByRecordOnTable = LinqToDB.DataModel.FindTypes.Query | LinqToDB.DataModel.FindTypes.ByEntity | LinqToDB.DataModel.FindTypes.OnTable -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.None = 0 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.OnContext = 512 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.OnTable = 256 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.Query = 4 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FindTypes.Sync = 1 -> LinqToDB.DataModel.FindTypes
LinqToDB.DataModel.FunctionModelBase
LinqToDB.DataModel.FunctionModelBase.FunctionModelBase(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method) -> void
LinqToDB.DataModel.FunctionModelBase.Method.get -> LinqToDB.DataModel.MethodModel!
LinqToDB.DataModel.FunctionModelBase.Method.set -> void
LinqToDB.DataModel.FunctionModelBase.Name.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.DataModel.FunctionModelBase.Name.set -> void
LinqToDB.DataModel.FunctionModelBase.Parameters.get -> System.Collections.Generic.List<LinqToDB.DataModel.FunctionParameterModel!>!
LinqToDB.DataModel.FunctionParameterModel
LinqToDB.DataModel.FunctionParameterModel.DataType.get -> LinqToDB.DataType?
LinqToDB.DataModel.FunctionParameterModel.DataType.set -> void
LinqToDB.DataModel.FunctionParameterModel.DbName.get -> string?
LinqToDB.DataModel.FunctionParameterModel.DbName.set -> void
LinqToDB.DataModel.FunctionParameterModel.Direction.get -> System.Data.ParameterDirection
LinqToDB.DataModel.FunctionParameterModel.Direction.set -> void
LinqToDB.DataModel.FunctionParameterModel.FunctionParameterModel(LinqToDB.DataModel.ParameterModel! parameter, System.Data.ParameterDirection direction) -> void
LinqToDB.DataModel.FunctionParameterModel.IsNullable.get -> bool
LinqToDB.DataModel.FunctionParameterModel.IsNullable.set -> void
LinqToDB.DataModel.FunctionParameterModel.Parameter.get -> LinqToDB.DataModel.ParameterModel!
LinqToDB.DataModel.FunctionParameterModel.Parameter.set -> void
LinqToDB.DataModel.FunctionParameterModel.Type.get -> LinqToDB.Schema.DatabaseType?
LinqToDB.DataModel.FunctionParameterModel.Type.set -> void
LinqToDB.DataModel.FunctionResult
LinqToDB.DataModel.FunctionResult.<Clone>$() -> LinqToDB.DataModel.FunctionResult!
LinqToDB.DataModel.FunctionResult.AsyncResult.get -> LinqToDB.DataModel.AsyncProcedureResult?
LinqToDB.DataModel.FunctionResult.AsyncResult.init -> void
LinqToDB.DataModel.FunctionResult.CustomTable.get -> LinqToDB.DataModel.ResultTableModel?
LinqToDB.DataModel.FunctionResult.CustomTable.init -> void
LinqToDB.DataModel.FunctionResult.Deconstruct(out LinqToDB.DataModel.ResultTableModel? CustomTable, out LinqToDB.DataModel.EntityModel? Entity, out LinqToDB.DataModel.AsyncProcedureResult? AsyncResult) -> void
LinqToDB.DataModel.FunctionResult.Entity.get -> LinqToDB.DataModel.EntityModel?
LinqToDB.DataModel.FunctionResult.Entity.init -> void
LinqToDB.DataModel.FunctionResult.Equals(LinqToDB.DataModel.FunctionResult? other) -> bool
LinqToDB.DataModel.FunctionResult.FunctionResult(LinqToDB.DataModel.ResultTableModel? CustomTable, LinqToDB.DataModel.EntityModel? Entity, LinqToDB.DataModel.AsyncProcedureResult? AsyncResult) -> void
LinqToDB.DataModel.IDataModelGenerationContext
LinqToDB.DataModel.IDataModelGenerationContext.AddAggregateFunctionRegion(string! regionName) -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.AddFile(string! fileName) -> LinqToDB.DataModel.FileData!
LinqToDB.DataModel.IDataModelGenerationContext.AddScalarFunctionRegion(string! regionName) -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.AddStoredProcedureRegion(string! regionName) -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.AddTableFunctionRegion(string! regionName) -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.AST.get -> LinqToDB.CodeModel.CodeBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.ContextMappingSchema.get -> LinqToDB.CodeModel.CodeReference!
LinqToDB.DataModel.IDataModelGenerationContext.ContextProperties.get -> LinqToDB.CodeModel.PropertyGroup!
LinqToDB.DataModel.IDataModelGenerationContext.ContextReference.get -> LinqToDB.CodeModel.ICodeExpression!
LinqToDB.DataModel.IDataModelGenerationContext.CurrentDataContext.get -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.ExtensionsClass.get -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.Files.get -> System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.CodeFile!>!
LinqToDB.DataModel.IDataModelGenerationContext.FindExtensionsGroup.get -> LinqToDB.CodeModel.MethodGroup!
LinqToDB.DataModel.IDataModelGenerationContext.GetChildContext(LinqToDB.DataModel.AdditionalSchemaModel! schema) -> LinqToDB.DataModel.IDataModelGenerationContext!
LinqToDB.DataModel.IDataModelGenerationContext.GetColumnProperty(LinqToDB.DataModel.ColumnModel! model) -> LinqToDB.CodeModel.CodeProperty!
LinqToDB.DataModel.IDataModelGenerationContext.GetEntityAssociationExtensionsGroup(LinqToDB.DataModel.EntityModel! entity) -> LinqToDB.CodeModel.MethodGroup!
LinqToDB.DataModel.IDataModelGenerationContext.GetEntityAssociationsGroup(LinqToDB.DataModel.EntityModel! entity) -> LinqToDB.CodeModel.PropertyGroup!
LinqToDB.DataModel.IDataModelGenerationContext.GetEntityBuilder(LinqToDB.DataModel.EntityModel! model) -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.HasContextMappingSchema.get -> bool
LinqToDB.DataModel.IDataModelGenerationContext.LanguageProvider.get -> LinqToDB.CodeModel.ILanguageProvider!
LinqToDB.DataModel.IDataModelGenerationContext.MainDataContext.get -> LinqToDB.CodeModel.ClassBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.MainDataContextConstructors.get -> LinqToDB.CodeModel.ConstructorGroup!
LinqToDB.DataModel.IDataModelGenerationContext.MainDataContextPartialMethods.get -> LinqToDB.CodeModel.MethodGroup!
LinqToDB.DataModel.IDataModelGenerationContext.MakeFullyQualifiedRoutineName(LinqToDB.SqlQuery.SqlObjectName routineName) -> string!
LinqToDB.DataModel.IDataModelGenerationContext.MetadataBuilder.get -> LinqToDB.Metadata.IMetadataBuilder?
LinqToDB.DataModel.IDataModelGenerationContext.Model.get -> LinqToDB.DataModel.DatabaseModel!
LinqToDB.DataModel.IDataModelGenerationContext.NonTableFunctionsClass.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.DataModel.IDataModelGenerationContext.NormalizeParameterName(string! parameterName) -> string!
LinqToDB.DataModel.IDataModelGenerationContext.Options.get -> LinqToDB.Scaffold.DataModelOptions!
LinqToDB.DataModel.IDataModelGenerationContext.ProcedureContextParameterType.get -> LinqToDB.CodeModel.IType!
LinqToDB.DataModel.IDataModelGenerationContext.RegisterChildContext(LinqToDB.DataModel.AdditionalSchemaModel! schema, LinqToDB.DataModel.IDataModelGenerationContext! context) -> void
LinqToDB.DataModel.IDataModelGenerationContext.RegisterColumnProperty(LinqToDB.DataModel.ColumnModel! model, LinqToDB.CodeModel.CodeProperty! property) -> void
LinqToDB.DataModel.IDataModelGenerationContext.RegisterEntityBuilder(LinqToDB.DataModel.EntityModel! model, LinqToDB.CodeModel.ClassBuilder! builder) -> void
LinqToDB.DataModel.IDataModelGenerationContext.Schema.get -> LinqToDB.DataModel.SchemaModelBase!
LinqToDB.DataModel.IDataModelGenerationContext.SchemasContextRegion.get -> LinqToDB.CodeModel.RegionBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.StaticInitializer.get -> LinqToDB.CodeModel.BlockBuilder!
LinqToDB.DataModel.IDataModelGenerationContext.TableFunctionsClass.get -> LinqToDB.CodeModel.CodeClass!
LinqToDB.DataModel.IDataModelGenerationContext.TryGetFile(string! fileName, out LinqToDB.DataModel.FileData? file) -> bool
LinqToDB.DataModel.MethodModel
LinqToDB.DataModel.MethodModel.CustomAttributes.get -> System.Collections.Generic.List<LinqToDB.CodeModel.CodeAttribute!>?
LinqToDB.DataModel.MethodModel.CustomAttributes.set -> void
LinqToDB.DataModel.MethodModel.MethodModel(string! name) -> void
LinqToDB.DataModel.MethodModel.Modifiers.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.DataModel.MethodModel.Modifiers.set -> void
LinqToDB.DataModel.MethodModel.Name.get -> string!
LinqToDB.DataModel.MethodModel.Name.set -> void
LinqToDB.DataModel.MethodModel.Summary.get -> string?
LinqToDB.DataModel.MethodModel.Summary.set -> void
LinqToDB.DataModel.ParameterModel
LinqToDB.DataModel.ParameterModel.Description.get -> string?
LinqToDB.DataModel.ParameterModel.Description.set -> void
LinqToDB.DataModel.ParameterModel.Direction.get -> LinqToDB.CodeModel.CodeParameterDirection
LinqToDB.DataModel.ParameterModel.Direction.set -> void
LinqToDB.DataModel.ParameterModel.Name.get -> string!
LinqToDB.DataModel.ParameterModel.Name.set -> void
LinqToDB.DataModel.ParameterModel.ParameterModel(string! name, LinqToDB.CodeModel.IType! type, LinqToDB.CodeModel.CodeParameterDirection direction) -> void
LinqToDB.DataModel.ParameterModel.Type.get -> LinqToDB.CodeModel.IType!
LinqToDB.DataModel.ParameterModel.Type.set -> void
LinqToDB.DataModel.PropertyModel
LinqToDB.DataModel.PropertyModel.CustomAttributes.get -> System.Collections.Generic.List<LinqToDB.CodeModel.CodeAttribute!>?
LinqToDB.DataModel.PropertyModel.CustomAttributes.set -> void
LinqToDB.DataModel.PropertyModel.HasSetter.get -> bool
LinqToDB.DataModel.PropertyModel.HasSetter.set -> void
LinqToDB.DataModel.PropertyModel.IsDefault.get -> bool
LinqToDB.DataModel.PropertyModel.IsDefault.set -> void
LinqToDB.DataModel.PropertyModel.Modifiers.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.DataModel.PropertyModel.Modifiers.set -> void
LinqToDB.DataModel.PropertyModel.Name.get -> string!
LinqToDB.DataModel.PropertyModel.Name.set -> void
LinqToDB.DataModel.PropertyModel.PropertyModel(string! name) -> void
LinqToDB.DataModel.PropertyModel.PropertyModel(string! name, LinqToDB.CodeModel.IType! type) -> void
LinqToDB.DataModel.PropertyModel.SetterModifiers.get -> LinqToDB.CodeModel.Modifiers
LinqToDB.DataModel.PropertyModel.SetterModifiers.set -> void
LinqToDB.DataModel.PropertyModel.Summary.get -> string?
LinqToDB.DataModel.PropertyModel.Summary.set -> void
LinqToDB.DataModel.PropertyModel.TrailingComment.get -> string?
LinqToDB.DataModel.PropertyModel.TrailingComment.set -> void
LinqToDB.DataModel.PropertyModel.Type.get -> LinqToDB.CodeModel.IType?
LinqToDB.DataModel.PropertyModel.Type.set -> void
LinqToDB.DataModel.ResultTableModel
LinqToDB.DataModel.ResultTableModel.Class.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.ResultTableModel.Class.set -> void
LinqToDB.DataModel.ResultTableModel.Columns.get -> System.Collections.Generic.List<LinqToDB.DataModel.ColumnModel!>!
LinqToDB.DataModel.ResultTableModel.ResultTableModel(LinqToDB.DataModel.ClassModel! class) -> void
LinqToDB.DataModel.ScalarFunctionModel
LinqToDB.DataModel.ScalarFunctionModel.Return.get -> LinqToDB.CodeModel.IType?
LinqToDB.DataModel.ScalarFunctionModel.Return.set -> void
LinqToDB.DataModel.ScalarFunctionModel.ReturnTuple.get -> LinqToDB.DataModel.TupleModel?
LinqToDB.DataModel.ScalarFunctionModel.ReturnTuple.set -> void
LinqToDB.DataModel.ScalarFunctionModel.ScalarFunctionModel(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method, LinqToDB.Metadata.FunctionMetadata! metadata) -> void
LinqToDB.DataModel.ScalarFunctionModelBase
LinqToDB.DataModel.ScalarFunctionModelBase.Metadata.get -> LinqToDB.Metadata.FunctionMetadata!
LinqToDB.DataModel.ScalarFunctionModelBase.Metadata.set -> void
LinqToDB.DataModel.ScalarFunctionModelBase.ScalarFunctionModelBase(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method, LinqToDB.Metadata.FunctionMetadata! metadata) -> void
LinqToDB.DataModel.SchemaModelBase
LinqToDB.DataModel.SchemaModelBase.AggregateFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.AggregateFunctionModel!>!
LinqToDB.DataModel.SchemaModelBase.Entities.get -> System.Collections.Generic.List<LinqToDB.DataModel.EntityModel!>!
LinqToDB.DataModel.SchemaModelBase.ScalarFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.ScalarFunctionModel!>!
LinqToDB.DataModel.SchemaModelBase.SchemaModelBase() -> void
LinqToDB.DataModel.SchemaModelBase.StoredProcedures.get -> System.Collections.Generic.List<LinqToDB.DataModel.StoredProcedureModel!>!
LinqToDB.DataModel.SchemaModelBase.TableFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.TableFunctionModel!>!
LinqToDB.DataModel.StoredProcedureModel
LinqToDB.DataModel.StoredProcedureModel.Results.get -> System.Collections.Generic.List<LinqToDB.DataModel.FunctionResult!>!
LinqToDB.DataModel.StoredProcedureModel.Results.set -> void
LinqToDB.DataModel.StoredProcedureModel.Return.get -> LinqToDB.DataModel.FunctionParameterModel?
LinqToDB.DataModel.StoredProcedureModel.Return.set -> void
LinqToDB.DataModel.StoredProcedureModel.StoredProcedureModel(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method) -> void
LinqToDB.DataModel.TableFunctionModel
LinqToDB.DataModel.TableFunctionModel.Metadata.get -> LinqToDB.Metadata.TableFunctionMetadata!
LinqToDB.DataModel.TableFunctionModel.Metadata.set -> void
LinqToDB.DataModel.TableFunctionModel.Result.get -> LinqToDB.DataModel.FunctionResult?
LinqToDB.DataModel.TableFunctionModel.Result.set -> void
LinqToDB.DataModel.TableFunctionModel.TableFunctionModel(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method, LinqToDB.Metadata.TableFunctionMetadata! metadata) -> void
LinqToDB.DataModel.TableFunctionModelBase
LinqToDB.DataModel.TableFunctionModelBase.Error.get -> string?
LinqToDB.DataModel.TableFunctionModelBase.Error.set -> void
LinqToDB.DataModel.TableFunctionModelBase.TableFunctionModelBase(LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.DataModel.MethodModel! method) -> void
LinqToDB.DataModel.TupleFieldModel
LinqToDB.DataModel.TupleFieldModel.DataType.get -> LinqToDB.DataType?
LinqToDB.DataModel.TupleFieldModel.DataType.set -> void
LinqToDB.DataModel.TupleFieldModel.Property.get -> LinqToDB.DataModel.PropertyModel!
LinqToDB.DataModel.TupleFieldModel.Property.set -> void
LinqToDB.DataModel.TupleFieldModel.TupleFieldModel(LinqToDB.DataModel.PropertyModel! property, LinqToDB.Schema.DatabaseType! type) -> void
LinqToDB.DataModel.TupleFieldModel.Type.get -> LinqToDB.Schema.DatabaseType!
LinqToDB.DataModel.TupleFieldModel.Type.set -> void
LinqToDB.DataModel.TupleModel
LinqToDB.DataModel.TupleModel.CanBeNull.get -> bool
LinqToDB.DataModel.TupleModel.CanBeNull.set -> void
LinqToDB.DataModel.TupleModel.Class.get -> LinqToDB.DataModel.ClassModel!
LinqToDB.DataModel.TupleModel.Class.set -> void
LinqToDB.DataModel.TupleModel.Fields.get -> System.Collections.Generic.List<LinqToDB.DataModel.TupleFieldModel!>!
LinqToDB.DataModel.TupleModel.TupleModel(LinqToDB.DataModel.ClassModel! class) -> void
LinqToDB.Metadata.AssociationMetadata
LinqToDB.Metadata.AssociationMetadata.Alias.get -> string?
LinqToDB.Metadata.AssociationMetadata.Alias.set -> void
LinqToDB.Metadata.AssociationMetadata.AssociationMetadata() -> void
LinqToDB.Metadata.AssociationMetadata.CanBeNull.get -> bool
LinqToDB.Metadata.AssociationMetadata.CanBeNull.set -> void
LinqToDB.Metadata.AssociationMetadata.Configuration.get -> string?
LinqToDB.Metadata.AssociationMetadata.Configuration.set -> void
LinqToDB.Metadata.AssociationMetadata.ExpressionPredicate.get -> string?
LinqToDB.Metadata.AssociationMetadata.ExpressionPredicate.set -> void
LinqToDB.Metadata.AssociationMetadata.OtherKey.get -> string?
LinqToDB.Metadata.AssociationMetadata.OtherKey.set -> void
LinqToDB.Metadata.AssociationMetadata.OtherKeyExpression.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.Metadata.AssociationMetadata.OtherKeyExpression.set -> void
LinqToDB.Metadata.AssociationMetadata.QueryExpressionMethod.get -> string?
LinqToDB.Metadata.AssociationMetadata.QueryExpressionMethod.set -> void
LinqToDB.Metadata.AssociationMetadata.Storage.get -> string?
LinqToDB.Metadata.AssociationMetadata.Storage.set -> void
LinqToDB.Metadata.AssociationMetadata.ThisKey.get -> string?
LinqToDB.Metadata.AssociationMetadata.ThisKey.set -> void
LinqToDB.Metadata.AssociationMetadata.ThisKeyExpression.get -> LinqToDB.CodeModel.ICodeExpression?
LinqToDB.Metadata.AssociationMetadata.ThisKeyExpression.set -> void
LinqToDB.Metadata.ColumnMetadata
LinqToDB.Metadata.ColumnMetadata.CanBeNull.get -> bool
LinqToDB.Metadata.ColumnMetadata.CanBeNull.set -> void
LinqToDB.Metadata.ColumnMetadata.ColumnMetadata() -> void
LinqToDB.Metadata.ColumnMetadata.Configuration.get -> string?
LinqToDB.Metadata.ColumnMetadata.Configuration.set -> void
LinqToDB.Metadata.ColumnMetadata.CreateFormat.get -> string?
LinqToDB.Metadata.ColumnMetadata.CreateFormat.set -> void
LinqToDB.Metadata.ColumnMetadata.DataType.get -> LinqToDB.DataType?
LinqToDB.Metadata.ColumnMetadata.DataType.set -> void
LinqToDB.Metadata.ColumnMetadata.DbType.get -> LinqToDB.Schema.DatabaseType?
LinqToDB.Metadata.ColumnMetadata.DbType.set -> void
LinqToDB.Metadata.ColumnMetadata.IsColumn.get -> bool
LinqToDB.Metadata.ColumnMetadata.IsColumn.set -> void
LinqToDB.Metadata.ColumnMetadata.IsDiscriminator.get -> bool
LinqToDB.Metadata.ColumnMetadata.IsDiscriminator.set -> void
LinqToDB.Metadata.ColumnMetadata.IsIdentity.get -> bool
LinqToDB.Metadata.ColumnMetadata.IsIdentity.set -> void
LinqToDB.Metadata.ColumnMetadata.IsPrimaryKey.get -> bool
LinqToDB.Metadata.ColumnMetadata.IsPrimaryKey.set -> void
LinqToDB.Metadata.ColumnMetadata.MemberName.get -> string?
LinqToDB.Metadata.ColumnMetadata.MemberName.set -> void
LinqToDB.Metadata.ColumnMetadata.Name.get -> string?
LinqToDB.Metadata.ColumnMetadata.Name.set -> void
LinqToDB.Metadata.ColumnMetadata.Order.get -> int?
LinqToDB.Metadata.ColumnMetadata.Order.set -> void
LinqToDB.Metadata.ColumnMetadata.PrimaryKeyOrder.get -> int?
LinqToDB.Metadata.ColumnMetadata.PrimaryKeyOrder.set -> void
LinqToDB.Metadata.ColumnMetadata.SkipOnEntityFetch.get -> bool
LinqToDB.Metadata.ColumnMetadata.SkipOnEntityFetch.set -> void
LinqToDB.Metadata.ColumnMetadata.SkipOnInsert.get -> bool
LinqToDB.Metadata.ColumnMetadata.SkipOnInsert.set -> void
LinqToDB.Metadata.ColumnMetadata.SkipOnUpdate.get -> bool
LinqToDB.Metadata.ColumnMetadata.SkipOnUpdate.set -> void
LinqToDB.Metadata.ColumnMetadata.Storage.get -> string?
LinqToDB.Metadata.ColumnMetadata.Storage.set -> void
LinqToDB.Metadata.EntityMetadata
LinqToDB.Metadata.EntityMetadata.Configuration.get -> string?
LinqToDB.Metadata.EntityMetadata.Configuration.set -> void
LinqToDB.Metadata.EntityMetadata.EntityMetadata() -> void
LinqToDB.Metadata.EntityMetadata.IsColumnAttributeRequired.get -> bool
LinqToDB.Metadata.EntityMetadata.IsColumnAttributeRequired.set -> void
LinqToDB.Metadata.EntityMetadata.IsTemporary.get -> bool
LinqToDB.Metadata.EntityMetadata.IsTemporary.set -> void
LinqToDB.Metadata.EntityMetadata.IsView.get -> bool
LinqToDB.Metadata.EntityMetadata.IsView.set -> void
LinqToDB.Metadata.EntityMetadata.Name.get -> LinqToDB.SqlQuery.SqlObjectName?
LinqToDB.Metadata.EntityMetadata.Name.set -> void
LinqToDB.Metadata.EntityMetadata.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Metadata.EntityMetadata.TableOptions.set -> void
LinqToDB.Metadata.FunctionMetadata
LinqToDB.Metadata.FunctionMetadata.ArgIndices.get -> int[]?
LinqToDB.Metadata.FunctionMetadata.ArgIndices.set -> void
LinqToDB.Metadata.FunctionMetadata.CanBeNull.get -> bool?
LinqToDB.Metadata.FunctionMetadata.CanBeNull.set -> void
LinqToDB.Metadata.FunctionMetadata.Configuration.get -> string?
LinqToDB.Metadata.FunctionMetadata.Configuration.set -> void
LinqToDB.Metadata.FunctionMetadata.FunctionMetadata() -> void
LinqToDB.Metadata.FunctionMetadata.InlineParameters.get -> bool?
LinqToDB.Metadata.FunctionMetadata.InlineParameters.set -> void
LinqToDB.Metadata.FunctionMetadata.IsAggregate.get -> bool?
LinqToDB.Metadata.FunctionMetadata.IsAggregate.set -> void
LinqToDB.Metadata.FunctionMetadata.IsNullable.get -> LinqToDB.Sql.IsNullableType?
LinqToDB.Metadata.FunctionMetadata.IsNullable.set -> void
LinqToDB.Metadata.FunctionMetadata.IsPredicate.get -> bool?
LinqToDB.Metadata.FunctionMetadata.IsPredicate.set -> void
LinqToDB.Metadata.FunctionMetadata.IsPure.get -> bool?
LinqToDB.Metadata.FunctionMetadata.IsPure.set -> void
LinqToDB.Metadata.FunctionMetadata.IsWindowFunction.get -> bool?
LinqToDB.Metadata.FunctionMetadata.IsWindowFunction.set -> void
LinqToDB.Metadata.FunctionMetadata.Name.get -> LinqToDB.SqlQuery.SqlObjectName?
LinqToDB.Metadata.FunctionMetadata.Name.set -> void
LinqToDB.Metadata.FunctionMetadata.PreferServerSide.get -> bool?
LinqToDB.Metadata.FunctionMetadata.PreferServerSide.set -> void
LinqToDB.Metadata.FunctionMetadata.ServerSideOnly.get -> bool?
LinqToDB.Metadata.FunctionMetadata.ServerSideOnly.set -> void
LinqToDB.Metadata.IMetadataBuilder
LinqToDB.Metadata.IMetadataBuilder.BuildAssociationMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.CodeModel.CodeClass! entityClass, LinqToDB.Metadata.AssociationMetadata! metadata, LinqToDB.CodeModel.MethodBuilder! methodBuilder) -> void
LinqToDB.Metadata.IMetadataBuilder.BuildAssociationMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.CodeModel.CodeClass! entityClass, LinqToDB.Metadata.AssociationMetadata! metadata, LinqToDB.CodeModel.PropertyBuilder! propertyBuilder) -> void
LinqToDB.Metadata.IMetadataBuilder.BuildColumnMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.CodeModel.CodeClass! entityClass, LinqToDB.Metadata.ColumnMetadata! metadata, LinqToDB.CodeModel.PropertyBuilder! propertyBuilder) -> void
LinqToDB.Metadata.IMetadataBuilder.BuildEntityMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.DataModel.EntityModel! entity) -> void
LinqToDB.Metadata.IMetadataBuilder.BuildFunctionMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.Metadata.FunctionMetadata! metadata, LinqToDB.CodeModel.MethodBuilder! methodBuilder) -> void
LinqToDB.Metadata.IMetadataBuilder.BuildTableFunctionMetadata(LinqToDB.DataModel.IDataModelGenerationContext! context, LinqToDB.Metadata.TableFunctionMetadata! metadata, LinqToDB.CodeModel.MethodBuilder! methodBuilder) -> void
LinqToDB.Metadata.IMetadataBuilder.Complete(LinqToDB.DataModel.IDataModelGenerationContext! context) -> void
LinqToDB.Metadata.MetadataBuilders
LinqToDB.Metadata.MetadataSource
LinqToDB.Metadata.MetadataSource.Attributes = 1 -> LinqToDB.Metadata.MetadataSource
LinqToDB.Metadata.MetadataSource.FluentMapping = 2 -> LinqToDB.Metadata.MetadataSource
LinqToDB.Metadata.MetadataSource.None = 0 -> LinqToDB.Metadata.MetadataSource
LinqToDB.Metadata.TableFunctionMetadata
LinqToDB.Metadata.TableFunctionMetadata.ArgIndices.get -> int[]?
LinqToDB.Metadata.TableFunctionMetadata.ArgIndices.set -> void
LinqToDB.Metadata.TableFunctionMetadata.Configuration.get -> string?
LinqToDB.Metadata.TableFunctionMetadata.Configuration.set -> void
LinqToDB.Metadata.TableFunctionMetadata.Name.get -> LinqToDB.SqlQuery.SqlObjectName?
LinqToDB.Metadata.TableFunctionMetadata.Name.set -> void
LinqToDB.Metadata.TableFunctionMetadata.TableFunctionMetadata() -> void
LinqToDB.Naming.HumanizerNameConverter
LinqToDB.Naming.INameConversionProvider
LinqToDB.Naming.INameConversionProvider.GetConverter(LinqToDB.Naming.Pluralization conversion) -> System.Func<string!, string!>!
LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.CamelCase = 2 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.LowerCase = 4 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.None = 0 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.Pascal = 1 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.SnakeCase = 3 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.T4CompatNonPluralized = 7 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.T4CompatPluralized = 6 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameCasing.UpperCase = 5 -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NameConverterBase
LinqToDB.Naming.NameConverterBase.NameConverterBase() -> void
LinqToDB.Naming.NameConverterBase.NameParts
LinqToDB.Naming.NameConverterBase.NameParts.Deconstruct(out string? Prefix, out string! MainWord, out string? Suffix) -> void
LinqToDB.Naming.NameConverterBase.NameParts.MainWord.get -> string!
LinqToDB.Naming.NameConverterBase.NameParts.MainWord.init -> void
LinqToDB.Naming.NameConverterBase.NameParts.NameParts(LinqToDB.Naming.NameConverterBase.NameParts! original) -> void
LinqToDB.Naming.NameConverterBase.NameParts.NameParts(string? Prefix, string! MainWord, string? Suffix) -> void
LinqToDB.Naming.NameConverterBase.NameParts.Prefix.get -> string?
LinqToDB.Naming.NameConverterBase.NameParts.Prefix.init -> void
LinqToDB.Naming.NameConverterBase.NameParts.Suffix.get -> string?
LinqToDB.Naming.NameConverterBase.NameParts.Suffix.init -> void
LinqToDB.Naming.NameTransformation
LinqToDB.Naming.NameTransformation.Association = 2 -> LinqToDB.Naming.NameTransformation
LinqToDB.Naming.NameTransformation.None = 0 -> LinqToDB.Naming.NameTransformation
LinqToDB.Naming.NameTransformation.SplitByUnderscore = 1 -> LinqToDB.Naming.NameTransformation
LinqToDB.Naming.NamingServices
LinqToDB.Naming.NamingServices.NormalizeIdentifier(LinqToDB.Naming.NormalizationOptions! settings, string! name) -> string!
LinqToDB.Naming.NormalizationOptions
LinqToDB.Naming.NormalizationOptions.Casing.get -> LinqToDB.Naming.NameCasing
LinqToDB.Naming.NormalizationOptions.Casing.set -> void
LinqToDB.Naming.NormalizationOptions.DontCaseAllCaps.get -> bool
LinqToDB.Naming.NormalizationOptions.DontCaseAllCaps.set -> void
LinqToDB.Naming.NormalizationOptions.MaxUpperCaseWordLength.get -> int
LinqToDB.Naming.NormalizationOptions.MaxUpperCaseWordLength.set -> void
LinqToDB.Naming.NormalizationOptions.MergeInto(LinqToDB.Naming.NormalizationOptions! baseOptions) -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Naming.NormalizationOptions.NormalizationOptions() -> void
LinqToDB.Naming.NormalizationOptions.Pluralization.get -> LinqToDB.Naming.Pluralization
LinqToDB.Naming.NormalizationOptions.Pluralization.set -> void
LinqToDB.Naming.NormalizationOptions.PluralizeOnlyIfLastWordIsText.get -> bool
LinqToDB.Naming.NormalizationOptions.PluralizeOnlyIfLastWordIsText.set -> void
LinqToDB.Naming.NormalizationOptions.Prefix.get -> string?
LinqToDB.Naming.NormalizationOptions.Prefix.set -> void
LinqToDB.Naming.NormalizationOptions.Suffix.get -> string?
LinqToDB.Naming.NormalizationOptions.Suffix.set -> void
LinqToDB.Naming.NormalizationOptions.Transformation.get -> LinqToDB.Naming.NameTransformation
LinqToDB.Naming.NormalizationOptions.Transformation.set -> void
LinqToDB.Naming.Pluralization
LinqToDB.Naming.Pluralization.None = 0 -> LinqToDB.Naming.Pluralization
LinqToDB.Naming.Pluralization.Plural = 2 -> LinqToDB.Naming.Pluralization
LinqToDB.Naming.Pluralization.PluralIfLongerThanOne = 3 -> LinqToDB.Naming.Pluralization
LinqToDB.Naming.Pluralization.Singular = 1 -> LinqToDB.Naming.Pluralization
LinqToDB.Scaffold.CodeGenerationOptions
LinqToDB.Scaffold.CodeGenerationOptions.AddGeneratedFileSuffix.get -> bool
LinqToDB.Scaffold.CodeGenerationOptions.AddGeneratedFileSuffix.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.AutoGeneratedHeader.get -> string?
LinqToDB.Scaffold.CodeGenerationOptions.AutoGeneratedHeader.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.ClassPerFile.get -> bool
LinqToDB.Scaffold.CodeGenerationOptions.ClassPerFile.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.ConflictingNames.get -> System.Collections.Generic.ISet<string!>!
LinqToDB.Scaffold.CodeGenerationOptions.EnableNullableReferenceTypes.get -> bool
LinqToDB.Scaffold.CodeGenerationOptions.EnableNullableReferenceTypes.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.Indent.get -> string!
LinqToDB.Scaffold.CodeGenerationOptions.Indent.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.MarkAsAutoGenerated.get -> bool
LinqToDB.Scaffold.CodeGenerationOptions.MarkAsAutoGenerated.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.Namespace.get -> string?
LinqToDB.Scaffold.CodeGenerationOptions.Namespace.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.NewLine.get -> string!
LinqToDB.Scaffold.CodeGenerationOptions.NewLine.set -> void
LinqToDB.Scaffold.CodeGenerationOptions.SuppressMissingXmlDocWarnings.get -> bool
LinqToDB.Scaffold.CodeGenerationOptions.SuppressMissingXmlDocWarnings.set -> void
LinqToDB.Scaffold.DataModelLoader
LinqToDB.Scaffold.DataModelLoader.DataModelLoader(LinqToDB.Naming.NamingServices! namingServices, LinqToDB.CodeModel.ILanguageProvider! languageProvider, LinqToDB.Schema.ISchemaProvider! schemaProvider, LinqToDB.Schema.ITypeMappingProvider! typeMappingsProvider, LinqToDB.Scaffold.ScaffoldOptions! options, LinqToDB.Scaffold.ScaffoldInterceptors? interceptors) -> void
LinqToDB.Scaffold.DataModelLoader.LoadSchema() -> LinqToDB.DataModel.DatabaseModel!
LinqToDB.Scaffold.DataModelOptions
LinqToDB.Scaffold.DataModelOptions.AssociationCollectionAsArray.get -> bool
LinqToDB.Scaffold.DataModelOptions.AssociationCollectionAsArray.set -> void
LinqToDB.Scaffold.DataModelOptions.AssociationCollectionType.get -> string?
LinqToDB.Scaffold.DataModelOptions.AssociationCollectionType.set -> void
LinqToDB.Scaffold.DataModelOptions.AsyncProcedureResultClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.AsyncProcedureResultClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.AsyncProcedureResultClassPropertiesNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.AsyncProcedureResultClassPropertiesNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.BaseContextClass.get -> string?
LinqToDB.Scaffold.DataModelOptions.BaseContextClass.set -> void
LinqToDB.Scaffold.DataModelOptions.BaseEntityClass.get -> string?
LinqToDB.Scaffold.DataModelOptions.BaseEntityClass.set -> void
LinqToDB.Scaffold.DataModelOptions.ContextClassName.get -> string?
LinqToDB.Scaffold.DataModelOptions.ContextClassName.set -> void
LinqToDB.Scaffold.DataModelOptions.DataContextClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.DataContextClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityClassIsPartial.get -> bool
LinqToDB.Scaffold.DataModelOptions.EntityClassIsPartial.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.EntityClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityClassNameProvider.get -> System.Func<LinqToDB.Schema.TableLikeObject!, string?>?
LinqToDB.Scaffold.DataModelOptions.EntityClassNameProvider.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityColumnPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.EntityColumnPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityContextPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.EntityContextPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.EntityContextPropertyNameProvider.get -> System.Func<LinqToDB.Schema.TableLikeObject!, string?>?
LinqToDB.Scaffold.DataModelOptions.EntityContextPropertyNameProvider.set -> void
LinqToDB.Scaffold.DataModelOptions.FindParameterNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.FindParameterNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.FunctionTupleResultClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.FunctionTupleResultClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.FunctionTupleResultPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.FunctionTupleResultPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateAssociationExtensions.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateAssociationExtensions.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateAssociations.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateAssociations.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateDataType.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateDataType.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateDbType.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateDbType.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateDefaultSchema.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateDefaultSchema.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateFindExtensions.get -> LinqToDB.DataModel.FindTypes
LinqToDB.Scaffold.DataModelOptions.GenerateFindExtensions.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateIEquatable.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateIEquatable.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateInitDataContextMethod.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateInitDataContextMethod.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateLength.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateLength.set -> void
LinqToDB.Scaffold.DataModelOptions.GeneratePrecision.get -> bool
LinqToDB.Scaffold.DataModelOptions.GeneratePrecision.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureAsync.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureAsync.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureParameterDbType.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureParameterDbType.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureResultAsList.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureResultAsList.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateProceduresSchemaError.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateProceduresSchemaError.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureSync.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateProcedureSync.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateScale.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateScale.set -> void
LinqToDB.Scaffold.DataModelOptions.GenerateSchemaAsType.get -> bool
LinqToDB.Scaffold.DataModelOptions.GenerateSchemaAsType.set -> void
LinqToDB.Scaffold.DataModelOptions.HasConfigurationConstructor.get -> bool
LinqToDB.Scaffold.DataModelOptions.HasConfigurationConstructor.set -> void
LinqToDB.Scaffold.DataModelOptions.HasDefaultConstructor.get -> bool
LinqToDB.Scaffold.DataModelOptions.HasDefaultConstructor.set -> void
LinqToDB.Scaffold.DataModelOptions.HasTypedOptionsConstructor.get -> bool
LinqToDB.Scaffold.DataModelOptions.HasTypedOptionsConstructor.set -> void
LinqToDB.Scaffold.DataModelOptions.HasUntypedOptionsConstructor.get -> bool
LinqToDB.Scaffold.DataModelOptions.HasUntypedOptionsConstructor.set -> void
LinqToDB.Scaffold.DataModelOptions.IncludeDatabaseInfo.get -> bool
LinqToDB.Scaffold.DataModelOptions.IncludeDatabaseInfo.set -> void
LinqToDB.Scaffold.DataModelOptions.IncludeDatabaseName.get -> bool
LinqToDB.Scaffold.DataModelOptions.IncludeDatabaseName.set -> void
LinqToDB.Scaffold.DataModelOptions.MapProcedureResultToEntity.get -> bool
LinqToDB.Scaffold.DataModelOptions.MapProcedureResultToEntity.set -> void
LinqToDB.Scaffold.DataModelOptions.Metadata.get -> LinqToDB.Metadata.MetadataSource
LinqToDB.Scaffold.DataModelOptions.Metadata.set -> void
LinqToDB.Scaffold.DataModelOptions.OrderFindParametersByColumnOrdinal.get -> bool
LinqToDB.Scaffold.DataModelOptions.OrderFindParametersByColumnOrdinal.set -> void
LinqToDB.Scaffold.DataModelOptions.ProcedureNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.ProcedureNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.ProcedureParameterNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.ProcedureParameterNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.ProcedureResultClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.ProcedureResultClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.ProcedureResultColumnPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.ProcedureResultColumnPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.SchemaClassNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.SchemaClassNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.SchemaMap.get -> System.Collections.Generic.IDictionary<string!, string!>!
LinqToDB.Scaffold.DataModelOptions.SchemaPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.SchemaPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.SkipProceduresWithSchemaErrors.get -> bool
LinqToDB.Scaffold.DataModelOptions.SkipProceduresWithSchemaErrors.set -> void
LinqToDB.Scaffold.DataModelOptions.SourceAssociationPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.SourceAssociationPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.TableFunctionReturnsTable.get -> bool
LinqToDB.Scaffold.DataModelOptions.TableFunctionReturnsTable.set -> void
LinqToDB.Scaffold.DataModelOptions.TargetMultipleAssociationPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.TargetMultipleAssociationPropertyNameOptions.set -> void
LinqToDB.Scaffold.DataModelOptions.TargetSingularAssociationPropertyNameOptions.get -> LinqToDB.Naming.NormalizationOptions!
LinqToDB.Scaffold.DataModelOptions.TargetSingularAssociationPropertyNameOptions.set -> void
LinqToDB.Scaffold.FinalDataModel
LinqToDB.Scaffold.FinalDataModel.AggregateFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.AggregateFunctionModel!>!
LinqToDB.Scaffold.FinalDataModel.Associations.get -> System.Collections.Generic.List<LinqToDB.DataModel.AssociationModel!>!
LinqToDB.Scaffold.FinalDataModel.Entities.get -> System.Collections.Generic.List<LinqToDB.DataModel.EntityModel!>!
LinqToDB.Scaffold.FinalDataModel.FinalDataModel() -> void
LinqToDB.Scaffold.FinalDataModel.ScalarFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.ScalarFunctionModel!>!
LinqToDB.Scaffold.FinalDataModel.StoredProcedures.get -> System.Collections.Generic.List<LinqToDB.DataModel.StoredProcedureModel!>!
LinqToDB.Scaffold.FinalDataModel.TableFunctions.get -> System.Collections.Generic.List<LinqToDB.DataModel.TableFunctionModel!>!
LinqToDB.Scaffold.Internal.NameGenerationServices
LinqToDB.Scaffold.Scaffolder
LinqToDB.Scaffold.Scaffolder.GenerateCodeModel(LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.DataModel.DatabaseModel! dataModel, LinqToDB.Metadata.IMetadataBuilder? metadataBuilder, params LinqToDB.CodeModel.ConvertCodeModelVisitor![]! modelConverters) -> LinqToDB.CodeModel.CodeFile![]!
LinqToDB.Scaffold.Scaffolder.GenerateSourceCode(LinqToDB.DataModel.DatabaseModel! dataModel, params LinqToDB.CodeModel.CodeFile![]! files) -> LinqToDB.Scaffold.SourceCodeFile![]!
LinqToDB.Scaffold.Scaffolder.Language.get -> LinqToDB.CodeModel.ILanguageProvider!
LinqToDB.Scaffold.Scaffolder.LoadDataModel(LinqToDB.Schema.ISchemaProvider! schemaProvider, LinqToDB.Schema.ITypeMappingProvider! typeMappingsProvider) -> LinqToDB.DataModel.DatabaseModel!
LinqToDB.Scaffold.Scaffolder.Scaffolder(LinqToDB.CodeModel.ILanguageProvider! languageProvider, LinqToDB.Naming.INameConversionProvider! nameConverter, LinqToDB.Scaffold.ScaffoldOptions! options, LinqToDB.Scaffold.ScaffoldInterceptors? interceptors) -> void
LinqToDB.Scaffold.ScaffoldInterceptors
LinqToDB.Scaffold.ScaffoldInterceptors.ScaffoldInterceptors() -> void
LinqToDB.Scaffold.ScaffoldOptions
LinqToDB.Scaffold.ScaffoldOptions.CodeGeneration.get -> LinqToDB.Scaffold.CodeGenerationOptions!
LinqToDB.Scaffold.ScaffoldOptions.DataModel.get -> LinqToDB.Scaffold.DataModelOptions!
LinqToDB.Scaffold.ScaffoldOptions.Schema.get -> LinqToDB.Scaffold.SchemaOptions!
LinqToDB.Scaffold.SchemaOptions
LinqToDB.Scaffold.SchemaOptions.Catalogs.get -> System.Collections.Generic.ISet<string!>!
LinqToDB.Scaffold.SchemaOptions.DefaultSchemas.get -> System.Collections.Generic.ISet<string!>?
LinqToDB.Scaffold.SchemaOptions.DefaultSchemas.set -> void
LinqToDB.Scaffold.SchemaOptions.EnableSqlServerReturnValue.get -> bool
LinqToDB.Scaffold.SchemaOptions.EnableSqlServerReturnValue.set -> void
LinqToDB.Scaffold.SchemaOptions.IgnoreDuplicateForeignKeys.get -> bool
LinqToDB.Scaffold.SchemaOptions.IgnoreDuplicateForeignKeys.set -> void
LinqToDB.Scaffold.SchemaOptions.IgnoreSystemHistoryTables.get -> bool
LinqToDB.Scaffold.SchemaOptions.IgnoreSystemHistoryTables.set -> void
LinqToDB.Scaffold.SchemaOptions.IncludeCatalogs.get -> bool
LinqToDB.Scaffold.SchemaOptions.IncludeCatalogs.set -> void
LinqToDB.Scaffold.SchemaOptions.IncludeSchemas.get -> bool
LinqToDB.Scaffold.SchemaOptions.IncludeSchemas.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadAggregateFunction.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadAggregateFunction.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadDatabaseName.get -> bool
LinqToDB.Scaffold.SchemaOptions.LoadDatabaseName.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadedObjects.get -> LinqToDB.Schema.SchemaObjects
LinqToDB.Scaffold.SchemaOptions.LoadedObjects.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadProcedureSchema.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadProcedureSchema.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadProceduresSchema.get -> bool
LinqToDB.Scaffold.SchemaOptions.LoadProceduresSchema.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadScalarFunction.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadScalarFunction.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadStoredProcedure.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadStoredProcedure.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadTableFunction.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadTableFunction.set -> void
LinqToDB.Scaffold.SchemaOptions.LoadTableOrView.get -> System.Func<LinqToDB.SqlQuery.SqlObjectName, bool, bool>!
LinqToDB.Scaffold.SchemaOptions.LoadTableOrView.set -> void
LinqToDB.Scaffold.SchemaOptions.PreferProviderSpecificTypes.get -> bool
LinqToDB.Scaffold.SchemaOptions.PreferProviderSpecificTypes.set -> void
LinqToDB.Scaffold.SchemaOptions.Schemas.get -> System.Collections.Generic.ISet<string!>!
LinqToDB.Scaffold.SchemaOptions.UseSafeSchemaLoad.get -> bool
LinqToDB.Scaffold.SchemaOptions.UseSafeSchemaLoad.set -> void
LinqToDB.Scaffold.SourceCodeFile
LinqToDB.Scaffold.SourceCodeFile.Code.get -> string!
LinqToDB.Scaffold.SourceCodeFile.Code.init -> void
LinqToDB.Scaffold.SourceCodeFile.Deconstruct(out string! FileName, out string! Code) -> void
LinqToDB.Scaffold.SourceCodeFile.FileName.get -> string!
LinqToDB.Scaffold.SourceCodeFile.FileName.init -> void
LinqToDB.Scaffold.SourceCodeFile.SourceCodeFile(LinqToDB.Scaffold.SourceCodeFile! original) -> void
LinqToDB.Scaffold.SourceCodeFile.SourceCodeFile(string! FileName, string! Code) -> void
LinqToDB.Schema.AggregateFunction
LinqToDB.Schema.AggregateFunction.AggregateFunction(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, LinqToDB.Schema.ScalarResult! Result) -> void
LinqToDB.Schema.AggregateFunction.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, out LinqToDB.Schema.ScalarResult! Result) -> void
LinqToDB.Schema.AggregateFunction.Equals(LinqToDB.Schema.AggregateFunction? other) -> bool
LinqToDB.Schema.AggregateFunction.Result.get -> LinqToDB.Schema.ScalarResult!
LinqToDB.Schema.AggregateFunction.Result.init -> void
LinqToDB.Schema.AggregateTypeMappingsProvider
LinqToDB.Schema.AggregateTypeMappingsProvider.AggregateTypeMappingsProvider(params LinqToDB.Schema.ITypeMappingProvider![]! providers) -> void
LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableKind.AggregateFunction = 1 -> LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableKind.ScalarFunction = 0 -> LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableKind.StoredProcedure = 3 -> LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableKind.TableFunction = 2 -> LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableObject
LinqToDB.Schema.CallableObject.CallableObject(LinqToDB.Schema.CallableKind Kind, LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters) -> void
LinqToDB.Schema.CallableObject.CallableObject(LinqToDB.Schema.CallableObject! original) -> void
LinqToDB.Schema.CallableObject.Deconstruct(out LinqToDB.Schema.CallableKind Kind, out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters) -> void
LinqToDB.Schema.CallableObject.Description.get -> string?
LinqToDB.Schema.CallableObject.Description.init -> void
LinqToDB.Schema.CallableObject.Kind.get -> LinqToDB.Schema.CallableKind
LinqToDB.Schema.CallableObject.Kind.init -> void
LinqToDB.Schema.CallableObject.Name.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.Schema.CallableObject.Name.init -> void
LinqToDB.Schema.CallableObject.Parameters.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>!
LinqToDB.Schema.CallableObject.Parameters.init -> void
LinqToDB.Schema.Column
LinqToDB.Schema.Column.<Clone>$() -> LinqToDB.Schema.Column!
LinqToDB.Schema.Column.Column(string! Name, string? Description, LinqToDB.Schema.DatabaseType! Type, bool Nullable, bool Insertable, bool Updatable, int? Ordinal) -> void
LinqToDB.Schema.Column.Deconstruct(out string! Name, out string? Description, out LinqToDB.Schema.DatabaseType! Type, out bool Nullable, out bool Insertable, out bool Updatable, out int? Ordinal) -> void
LinqToDB.Schema.Column.Description.get -> string?
LinqToDB.Schema.Column.Description.init -> void
LinqToDB.Schema.Column.Equals(LinqToDB.Schema.Column? other) -> bool
LinqToDB.Schema.Column.Insertable.get -> bool
LinqToDB.Schema.Column.Insertable.init -> void
LinqToDB.Schema.Column.Name.get -> string!
LinqToDB.Schema.Column.Name.init -> void
LinqToDB.Schema.Column.Nullable.get -> bool
LinqToDB.Schema.Column.Nullable.init -> void
LinqToDB.Schema.Column.Ordinal.get -> int?
LinqToDB.Schema.Column.Ordinal.init -> void
LinqToDB.Schema.Column.Type.get -> LinqToDB.Schema.DatabaseType!
LinqToDB.Schema.Column.Type.init -> void
LinqToDB.Schema.Column.Updatable.get -> bool
LinqToDB.Schema.Column.Updatable.init -> void
LinqToDB.Schema.DatabaseOptions
LinqToDB.Schema.DatabaseOptions.DatabaseOptions() -> void
LinqToDB.Schema.DatabaseType
LinqToDB.Schema.DatabaseType.<Clone>$() -> LinqToDB.Schema.DatabaseType!
LinqToDB.Schema.DatabaseType.DatabaseType(string? Name, int? Length, int? Precision, int? Scale) -> void
LinqToDB.Schema.DatabaseType.Deconstruct(out string? Name, out int? Length, out int? Precision, out int? Scale) -> void
LinqToDB.Schema.DatabaseType.Equals(LinqToDB.Schema.DatabaseType? other) -> bool
LinqToDB.Schema.DatabaseType.Length.get -> int?
LinqToDB.Schema.DatabaseType.Length.init -> void
LinqToDB.Schema.DatabaseType.Name.get -> string?
LinqToDB.Schema.DatabaseType.Name.init -> void
LinqToDB.Schema.DatabaseType.Precision.get -> int?
LinqToDB.Schema.DatabaseType.Precision.init -> void
LinqToDB.Schema.DatabaseType.Scale.get -> int?
LinqToDB.Schema.DatabaseType.Scale.init -> void
LinqToDB.Schema.ForeignKey
LinqToDB.Schema.ForeignKey.<Clone>$() -> LinqToDB.Schema.ForeignKey!
LinqToDB.Schema.ForeignKey.Deconstruct(out string! Name, out LinqToDB.SqlQuery.SqlObjectName Source, out LinqToDB.SqlQuery.SqlObjectName Target, out System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ForeignKeyColumnMapping!>! Relation) -> void
LinqToDB.Schema.ForeignKey.Equals(LinqToDB.Schema.ForeignKey? other) -> bool
LinqToDB.Schema.ForeignKey.ForeignKey(string! Name, LinqToDB.SqlQuery.SqlObjectName Source, LinqToDB.SqlQuery.SqlObjectName Target, System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ForeignKeyColumnMapping!>! Relation) -> void
LinqToDB.Schema.ForeignKey.Name.get -> string!
LinqToDB.Schema.ForeignKey.Name.init -> void
LinqToDB.Schema.ForeignKey.Relation.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ForeignKeyColumnMapping!>!
LinqToDB.Schema.ForeignKey.Relation.init -> void
LinqToDB.Schema.ForeignKey.Source.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.Schema.ForeignKey.Source.init -> void
LinqToDB.Schema.ForeignKey.Target.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.Schema.ForeignKey.Target.init -> void
LinqToDB.Schema.ForeignKeyColumnMapping
LinqToDB.Schema.ForeignKeyColumnMapping.<Clone>$() -> LinqToDB.Schema.ForeignKeyColumnMapping!
LinqToDB.Schema.ForeignKeyColumnMapping.Deconstruct(out string! SourceColumn, out string! TargetColumn) -> void
LinqToDB.Schema.ForeignKeyColumnMapping.Equals(LinqToDB.Schema.ForeignKeyColumnMapping? other) -> bool
LinqToDB.Schema.ForeignKeyColumnMapping.ForeignKeyColumnMapping(string! SourceColumn, string! TargetColumn) -> void
LinqToDB.Schema.ForeignKeyColumnMapping.SourceColumn.get -> string!
LinqToDB.Schema.ForeignKeyColumnMapping.SourceColumn.init -> void
LinqToDB.Schema.ForeignKeyColumnMapping.TargetColumn.get -> string!
LinqToDB.Schema.ForeignKeyColumnMapping.TargetColumn.init -> void
LinqToDB.Schema.Identity
LinqToDB.Schema.Identity.<Clone>$() -> LinqToDB.Schema.Identity!
LinqToDB.Schema.Identity.Column.get -> string!
LinqToDB.Schema.Identity.Column.init -> void
LinqToDB.Schema.Identity.Deconstruct(out string! Column, out LinqToDB.Schema.Sequence? Sequence) -> void
LinqToDB.Schema.Identity.Equals(LinqToDB.Schema.Identity? other) -> bool
LinqToDB.Schema.Identity.Identity(string! Column, LinqToDB.Schema.Sequence? Sequence) -> void
LinqToDB.Schema.Identity.Sequence.get -> LinqToDB.Schema.Sequence?
LinqToDB.Schema.Identity.Sequence.init -> void
LinqToDB.Schema.ISchemaProvider
LinqToDB.Schema.ISchemaProvider.DatabaseName.get -> string?
LinqToDB.Schema.ISchemaProvider.DatabaseOptions.get -> LinqToDB.Schema.DatabaseOptions!
LinqToDB.Schema.ISchemaProvider.DataSource.get -> string?
LinqToDB.Schema.ISchemaProvider.GetAggregateFunctions() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.AggregateFunction!>!
LinqToDB.Schema.ISchemaProvider.GetDefaultSchemas() -> System.Collections.Generic.ISet<string!>!
LinqToDB.Schema.ISchemaProvider.GetForeignKeys() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.ForeignKey!>!
LinqToDB.Schema.ISchemaProvider.GetProcedures(bool withSchema, bool safeSchemaOnly) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.StoredProcedure!>!
LinqToDB.Schema.ISchemaProvider.GetScalarFunctions() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.ScalarFunction!>!
LinqToDB.Schema.ISchemaProvider.GetTableFunctions() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.TableFunction!>!
LinqToDB.Schema.ISchemaProvider.GetTables() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.Table!>!
LinqToDB.Schema.ISchemaProvider.GetViews() -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.View!>!
LinqToDB.Schema.ISchemaProvider.ServerVersion.get -> string?
LinqToDB.Schema.ITypeMappingProvider
LinqToDB.Schema.ITypeMappingProvider.GetTypeMapping(LinqToDB.Schema.DatabaseType! databaseType) -> LinqToDB.Schema.TypeMapping?
LinqToDB.Schema.LegacySchemaProvider
LinqToDB.Schema.LegacySchemaProvider.LegacySchemaProvider(LinqToDB.Data.DataConnection! connection, LinqToDB.Scaffold.SchemaOptions! options, LinqToDB.CodeModel.ILanguageProvider! languageProvider) -> void
LinqToDB.Schema.MergedAccessSchemaProvider
LinqToDB.Schema.MergedAccessSchemaProvider.MergedAccessSchemaProvider(LinqToDB.Schema.ISchemaProvider! oleDbSchema, LinqToDB.Schema.ISchemaProvider! odbcSchema) -> void
LinqToDB.Schema.Parameter
LinqToDB.Schema.Parameter.<Clone>$() -> LinqToDB.Schema.Parameter!
LinqToDB.Schema.Parameter.Deconstruct(out string! Name, out string? Description, out LinqToDB.Schema.DatabaseType! Type, out bool Nullable, out LinqToDB.Schema.ParameterDirection Direction) -> void
LinqToDB.Schema.Parameter.Description.get -> string?
LinqToDB.Schema.Parameter.Description.init -> void
LinqToDB.Schema.Parameter.Direction.get -> LinqToDB.Schema.ParameterDirection
LinqToDB.Schema.Parameter.Direction.init -> void
LinqToDB.Schema.Parameter.Equals(LinqToDB.Schema.Parameter? other) -> bool
LinqToDB.Schema.Parameter.Name.get -> string!
LinqToDB.Schema.Parameter.Name.init -> void
LinqToDB.Schema.Parameter.Nullable.get -> bool
LinqToDB.Schema.Parameter.Nullable.init -> void
LinqToDB.Schema.Parameter.Parameter(string! Name, string? Description, LinqToDB.Schema.DatabaseType! Type, bool Nullable, LinqToDB.Schema.ParameterDirection Direction) -> void
LinqToDB.Schema.Parameter.Type.get -> LinqToDB.Schema.DatabaseType!
LinqToDB.Schema.Parameter.Type.init -> void
LinqToDB.Schema.ParameterDirection
LinqToDB.Schema.ParameterDirection.Input = 0 -> LinqToDB.Schema.ParameterDirection
LinqToDB.Schema.ParameterDirection.InputOutput = 2 -> LinqToDB.Schema.ParameterDirection
LinqToDB.Schema.ParameterDirection.Output = 1 -> LinqToDB.Schema.ParameterDirection
LinqToDB.Schema.PrimaryKey
LinqToDB.Schema.PrimaryKey.<Clone>$() -> LinqToDB.Schema.PrimaryKey!
LinqToDB.Schema.PrimaryKey.Columns.get -> System.Collections.Generic.IReadOnlyCollection<string!>!
LinqToDB.Schema.PrimaryKey.Columns.init -> void
LinqToDB.Schema.PrimaryKey.Deconstruct(out string? Name, out System.Collections.Generic.IReadOnlyCollection<string!>! Columns) -> void
LinqToDB.Schema.PrimaryKey.Equals(LinqToDB.Schema.PrimaryKey? other) -> bool
LinqToDB.Schema.PrimaryKey.GetColumnPositionInKey(LinqToDB.Schema.Column! column) -> int
LinqToDB.Schema.PrimaryKey.Name.get -> string?
LinqToDB.Schema.PrimaryKey.Name.init -> void
LinqToDB.Schema.PrimaryKey.PrimaryKey(string? Name, System.Collections.Generic.IReadOnlyCollection<string!>! Columns) -> void
LinqToDB.Schema.Result
LinqToDB.Schema.Result.Deconstruct(out LinqToDB.Schema.ResultKind Kind) -> void
LinqToDB.Schema.Result.Kind.get -> LinqToDB.Schema.ResultKind
LinqToDB.Schema.Result.Kind.init -> void
LinqToDB.Schema.Result.Result(LinqToDB.Schema.Result! original) -> void
LinqToDB.Schema.Result.Result(LinqToDB.Schema.ResultKind Kind) -> void
LinqToDB.Schema.ResultColumn
LinqToDB.Schema.ResultColumn.<Clone>$() -> LinqToDB.Schema.ResultColumn!
LinqToDB.Schema.ResultColumn.Deconstruct(out string? Name, out LinqToDB.Schema.DatabaseType! Type, out bool Nullable) -> void
LinqToDB.Schema.ResultColumn.Equals(LinqToDB.Schema.ResultColumn? other) -> bool
LinqToDB.Schema.ResultColumn.Name.get -> string?
LinqToDB.Schema.ResultColumn.Name.init -> void
LinqToDB.Schema.ResultColumn.Nullable.get -> bool
LinqToDB.Schema.ResultColumn.Nullable.init -> void
LinqToDB.Schema.ResultColumn.ResultColumn(string? Name, LinqToDB.Schema.DatabaseType! Type, bool Nullable) -> void
LinqToDB.Schema.ResultColumn.Type.get -> LinqToDB.Schema.DatabaseType!
LinqToDB.Schema.ResultColumn.Type.init -> void
LinqToDB.Schema.ResultKind
LinqToDB.Schema.ResultKind.Scalar = 2 -> LinqToDB.Schema.ResultKind
LinqToDB.Schema.ResultKind.Tuple = 1 -> LinqToDB.Schema.ResultKind
LinqToDB.Schema.ResultKind.Void = 0 -> LinqToDB.Schema.ResultKind
LinqToDB.Schema.ScalarFunction
LinqToDB.Schema.ScalarFunction.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, out LinqToDB.Schema.Result! Result) -> void
LinqToDB.Schema.ScalarFunction.Equals(LinqToDB.Schema.ScalarFunction? other) -> bool
LinqToDB.Schema.ScalarFunction.Result.get -> LinqToDB.Schema.Result!
LinqToDB.Schema.ScalarFunction.Result.init -> void
LinqToDB.Schema.ScalarFunction.ScalarFunction(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, LinqToDB.Schema.Result! Result) -> void
LinqToDB.Schema.ScalarResult
LinqToDB.Schema.ScalarResult.Deconstruct(out string? Name, out LinqToDB.Schema.DatabaseType! Type, out bool Nullable) -> void
LinqToDB.Schema.ScalarResult.Equals(LinqToDB.Schema.ScalarResult? other) -> bool
LinqToDB.Schema.ScalarResult.Name.get -> string?
LinqToDB.Schema.ScalarResult.Name.init -> void
LinqToDB.Schema.ScalarResult.Nullable.get -> bool
LinqToDB.Schema.ScalarResult.Nullable.init -> void
LinqToDB.Schema.ScalarResult.ScalarResult(string? Name, LinqToDB.Schema.DatabaseType! Type, bool Nullable) -> void
LinqToDB.Schema.ScalarResult.Type.get -> LinqToDB.Schema.DatabaseType!
LinqToDB.Schema.ScalarResult.Type.init -> void
LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.AggregateFunction = 32 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.ForeignKey = 64 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.None = 0 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.ScalarFunction = 16 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.StoredProcedure = 4 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.Table = 1 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.TableFunction = 8 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.SchemaObjects.View = 2 -> LinqToDB.Schema.SchemaObjects
LinqToDB.Schema.Sequence
LinqToDB.Schema.Sequence.<Clone>$() -> LinqToDB.Schema.Sequence!
LinqToDB.Schema.Sequence.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName? Name) -> void
LinqToDB.Schema.Sequence.Equals(LinqToDB.Schema.Sequence? other) -> bool
LinqToDB.Schema.Sequence.Name.get -> LinqToDB.SqlQuery.SqlObjectName?
LinqToDB.Schema.Sequence.Name.init -> void
LinqToDB.Schema.Sequence.Sequence(LinqToDB.SqlQuery.SqlObjectName? Name) -> void
LinqToDB.Schema.SqlServerDatabaseOptions
LinqToDB.Schema.StoredProcedure
LinqToDB.Schema.StoredProcedure.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, out System.Exception? SchemaError, out System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ResultColumn!>!>? ResultSets, out LinqToDB.Schema.Result! Result) -> void
LinqToDB.Schema.StoredProcedure.Equals(LinqToDB.Schema.StoredProcedure? other) -> bool
LinqToDB.Schema.StoredProcedure.Result.get -> LinqToDB.Schema.Result!
LinqToDB.Schema.StoredProcedure.Result.init -> void
LinqToDB.Schema.StoredProcedure.ResultSets.get -> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ResultColumn!>!>?
LinqToDB.Schema.StoredProcedure.ResultSets.init -> void
LinqToDB.Schema.StoredProcedure.SchemaError.get -> System.Exception?
LinqToDB.Schema.StoredProcedure.SchemaError.init -> void
LinqToDB.Schema.StoredProcedure.StoredProcedure(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, System.Exception? SchemaError, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.IReadOnlyList<LinqToDB.Schema.ResultColumn!>!>? ResultSets, LinqToDB.Schema.Result! Result) -> void
LinqToDB.Schema.Table
LinqToDB.Schema.Table.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, out LinqToDB.Schema.Identity? Identity, out LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.Table.Equals(LinqToDB.Schema.Table? other) -> bool
LinqToDB.Schema.Table.Table(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, LinqToDB.Schema.Identity? Identity, LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.TableFunction
LinqToDB.Schema.TableFunction.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, out System.Exception? SchemaError, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ResultColumn!>? Result) -> void
LinqToDB.Schema.TableFunction.Equals(LinqToDB.Schema.TableFunction? other) -> bool
LinqToDB.Schema.TableFunction.Result.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ResultColumn!>?
LinqToDB.Schema.TableFunction.Result.init -> void
LinqToDB.Schema.TableFunction.SchemaError.get -> System.Exception?
LinqToDB.Schema.TableFunction.SchemaError.init -> void
LinqToDB.Schema.TableFunction.TableFunction(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Parameter!>! Parameters, System.Exception? SchemaError, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ResultColumn!>? Result) -> void
LinqToDB.Schema.TableLikeObject
LinqToDB.Schema.TableLikeObject.Columns.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>!
LinqToDB.Schema.TableLikeObject.Columns.init -> void
LinqToDB.Schema.TableLikeObject.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, out LinqToDB.Schema.Identity? Identity, out LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.TableLikeObject.Description.get -> string?
LinqToDB.Schema.TableLikeObject.Description.init -> void
LinqToDB.Schema.TableLikeObject.Identity.get -> LinqToDB.Schema.Identity?
LinqToDB.Schema.TableLikeObject.Identity.init -> void
LinqToDB.Schema.TableLikeObject.Name.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.Schema.TableLikeObject.Name.init -> void
LinqToDB.Schema.TableLikeObject.PrimaryKey.get -> LinqToDB.Schema.PrimaryKey?
LinqToDB.Schema.TableLikeObject.PrimaryKey.init -> void
LinqToDB.Schema.TableLikeObject.TableLikeObject(LinqToDB.Schema.TableLikeObject! original) -> void
LinqToDB.Schema.TableLikeObject.TableLikeObject(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, LinqToDB.Schema.Identity? Identity, LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.TupleResult
LinqToDB.Schema.TupleResult.Deconstruct(out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ScalarResult!>! Fields, out bool Nullable) -> void
LinqToDB.Schema.TupleResult.Equals(LinqToDB.Schema.TupleResult? other) -> bool
LinqToDB.Schema.TupleResult.Fields.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ScalarResult!>!
LinqToDB.Schema.TupleResult.Fields.init -> void
LinqToDB.Schema.TupleResult.Nullable.get -> bool
LinqToDB.Schema.TupleResult.Nullable.init -> void
LinqToDB.Schema.TupleResult.TupleResult(System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.ScalarResult!>! Fields, bool Nullable) -> void
LinqToDB.Schema.TypeMapping
LinqToDB.Schema.TypeMapping.<Clone>$() -> LinqToDB.Schema.TypeMapping!
LinqToDB.Schema.TypeMapping.CLRType.get -> LinqToDB.CodeModel.IType!
LinqToDB.Schema.TypeMapping.CLRType.init -> void
LinqToDB.Schema.TypeMapping.DataType.get -> LinqToDB.DataType?
LinqToDB.Schema.TypeMapping.DataType.init -> void
LinqToDB.Schema.TypeMapping.Deconstruct(out LinqToDB.CodeModel.IType! CLRType, out LinqToDB.DataType? DataType) -> void
LinqToDB.Schema.TypeMapping.Equals(LinqToDB.Schema.TypeMapping? other) -> bool
LinqToDB.Schema.TypeMapping.TypeMapping(LinqToDB.CodeModel.IType! CLRType, LinqToDB.DataType? DataType) -> void
LinqToDB.Schema.View
LinqToDB.Schema.View.Deconstruct(out LinqToDB.SqlQuery.SqlObjectName Name, out string? Description, out System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, out LinqToDB.Schema.Identity? Identity, out LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.View.Equals(LinqToDB.Schema.View? other) -> bool
LinqToDB.Schema.View.View(LinqToDB.SqlQuery.SqlObjectName Name, string? Description, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Schema.Column!>! Columns, LinqToDB.Schema.Identity? Identity, LinqToDB.Schema.PrimaryKey? PrimaryKey) -> void
LinqToDB.Schema.VoidResult
LinqToDB.Schema.VoidResult.Equals(LinqToDB.Schema.VoidResult? other) -> bool
LinqToDB.Schema.VoidResult.VoidResult() -> void
LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.Internal = 2 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.None = 5 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.Partial = 4 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.Private = 3 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.Protected = 1 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AccessModifier.Public = 0 -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.AssociationType.Auto = 0 -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.AssociationType.ManyToOne = 3 -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.AssociationType.OneToMany = 2 -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.AssociationType.OneToOne = 1 -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.Attribute<T>
LinqToDB.Tools.ModelGeneration.Attribute<T>.Attribute() -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.Attribute(string! name, params string![]! ps) -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.Attribute<T>.Conditional.set -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.IsSeparated.get -> bool
LinqToDB.Tools.ModelGeneration.Attribute<T>.IsSeparated.set -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.Name.get -> string?
LinqToDB.Tools.ModelGeneration.Attribute<T>.Name.set -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.Parameters.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.Attribute<T>.Parameters.set -> void
LinqToDB.Tools.ModelGeneration.Attribute<T>.Tag.get -> object?
LinqToDB.Tools.ModelGeneration.Attribute<T>.Tag.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>
LinqToDB.Tools.ModelGeneration.Class<T>.BaseClass.get -> string?
LinqToDB.Tools.ModelGeneration.Class<T>.BaseClass.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>.Class() -> void
LinqToDB.Tools.ModelGeneration.Class<T>.Class(string! name, params LinqToDB.Tools.ModelGeneration.IClassMember![]! members) -> void
LinqToDB.Tools.ModelGeneration.Class<T>.GenericArguments.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.Class<T>.GenericArguments.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>.Interfaces.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.Class<T>.Interfaces.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>.IsInterface.get -> bool
LinqToDB.Tools.ModelGeneration.Class<T>.IsInterface.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.Class<T>.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.Class<T>.Members.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IClassMember!>!
LinqToDB.Tools.ModelGeneration.Class<T>.Members.set -> void
LinqToDB.Tools.ModelGeneration.Event<T>
LinqToDB.Tools.ModelGeneration.Event<T>.Event() -> void
LinqToDB.Tools.ModelGeneration.Event<T>.Event(string! eventType, string! name, bool nullable) -> void
LinqToDB.Tools.ModelGeneration.Event<T>.Event(System.Func<string!>! typeBuilder, string! name) -> void
LinqToDB.Tools.ModelGeneration.Event<T>.Event(System.Type! eventType, string! name, bool nullable) -> void
LinqToDB.Tools.ModelGeneration.Event<T>.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.Event<T>.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.Event<T>.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.Event<T>.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.Field<T>
LinqToDB.Tools.ModelGeneration.Field<T>.Field() -> void
LinqToDB.Tools.ModelGeneration.Field<T>.Field(LinqToDB.Tools.ModelGeneration.ModelType! type, string! name) -> void
LinqToDB.Tools.ModelGeneration.Field<T>.Field(string! type, string! name) -> void
LinqToDB.Tools.ModelGeneration.Field<T>.Field(System.Func<string!>! typeBuilder, string! name) -> void
LinqToDB.Tools.ModelGeneration.Field<T>.InitValue.get -> string?
LinqToDB.Tools.ModelGeneration.Field<T>.InitValue.set -> void
LinqToDB.Tools.ModelGeneration.Field<T>.IsReadonly.get -> bool
LinqToDB.Tools.ModelGeneration.Field<T>.IsReadonly.set -> void
LinqToDB.Tools.ModelGeneration.Field<T>.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.Field<T>.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.AssociationType.get -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.AssociationType.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.BackReference.get -> LinqToDB.Tools.ModelGeneration.IForeignKey?
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.BackReference.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.CanBeNull.get -> bool
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.CanBeNull.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.ForeignKey() -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.KeyName.get -> string!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.KeyName.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.MemberName.get -> string!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.MemberName.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.OtherColumns.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IColumn!>!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.OtherColumns.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.OtherTable.get -> LinqToDB.Tools.ModelGeneration.ITable!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.OtherTable.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.ThisColumns.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IColumn!>!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.ThisColumns.set -> void
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.ThisTable.get -> LinqToDB.Tools.ModelGeneration.ITable!
LinqToDB.Tools.ModelGeneration.ForeignKey<T>.ThisTable.set -> void
LinqToDB.Tools.ModelGeneration.IAttribute
LinqToDB.Tools.ModelGeneration.IAttribute.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.IAttribute.IsSeparated.get -> bool
LinqToDB.Tools.ModelGeneration.IAttribute.Name.get -> string?
LinqToDB.Tools.ModelGeneration.IAttribute.Parameters.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IAttribute.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
LinqToDB.Tools.ModelGeneration.IClass
LinqToDB.Tools.ModelGeneration.IClass.BaseClass.get -> string?
LinqToDB.Tools.ModelGeneration.IClass.BaseClass.set -> void
LinqToDB.Tools.ModelGeneration.IClass.GenericArguments.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IClass.Interfaces.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IClass.IsInterface.get -> bool
LinqToDB.Tools.ModelGeneration.IClass.IsInterface.set -> void
LinqToDB.Tools.ModelGeneration.IClass.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.IClass.Members.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IClassMember!>!
LinqToDB.Tools.ModelGeneration.IClassMember
LinqToDB.Tools.ModelGeneration.IColumn
LinqToDB.Tools.ModelGeneration.IColumn.AliasName.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.AliasName.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.ColumnName.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.ColumnName.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.ColumnType.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.ColumnType.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.DataType.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.DataType.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.DbType.get -> System.Data.DbType
LinqToDB.Tools.ModelGeneration.IColumn.DbType.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.Description.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.Description.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.IsDiscriminator.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.IsDiscriminator.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.IsDuplicateOrEmpty.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.IsDuplicateOrEmpty.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.IsIdentity.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.IsIdentity.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.IsNullable.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.IsNullable.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.IsPrimaryKey.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.IsPrimaryKey.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.Length.get -> int?
LinqToDB.Tools.ModelGeneration.IColumn.Length.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.MemberName.get -> string?
LinqToDB.Tools.ModelGeneration.IColumn.MemberName.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.ModelType.get -> LinqToDB.Tools.ModelGeneration.ModelType?
LinqToDB.Tools.ModelGeneration.IColumn.ModelType.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.Precision.get -> int?
LinqToDB.Tools.ModelGeneration.IColumn.Precision.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.PrimaryKeyOrder.get -> int
LinqToDB.Tools.ModelGeneration.IColumn.PrimaryKeyOrder.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.Scale.get -> int?
LinqToDB.Tools.ModelGeneration.IColumn.Scale.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.SkipOnInsert.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.SkipOnInsert.set -> void
LinqToDB.Tools.ModelGeneration.IColumn.SkipOnUpdate.get -> bool
LinqToDB.Tools.ModelGeneration.IColumn.SkipOnUpdate.set -> void
LinqToDB.Tools.ModelGeneration.IEditableObjectProperty
LinqToDB.Tools.ModelGeneration.IEditableObjectProperty.IsDirtyText.get -> string!
LinqToDB.Tools.ModelGeneration.IEditableObjectProperty.IsDirtyText.set -> void
LinqToDB.Tools.ModelGeneration.IEditableObjectProperty.IsEditable.get -> bool
LinqToDB.Tools.ModelGeneration.IEditableObjectProperty.IsEditable.set -> void
LinqToDB.Tools.ModelGeneration.IEvent
LinqToDB.Tools.ModelGeneration.IEvent.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.IEvent.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.IEvent.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.IEvent.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.IField
LinqToDB.Tools.ModelGeneration.IField.InitValue.get -> string?
LinqToDB.Tools.ModelGeneration.IField.InitValue.set -> void
LinqToDB.Tools.ModelGeneration.IField.IsReadonly.get -> bool
LinqToDB.Tools.ModelGeneration.IField.IsReadonly.set -> void
LinqToDB.Tools.ModelGeneration.IField.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.IField.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey
LinqToDB.Tools.ModelGeneration.IForeignKey.AssociationType.get -> LinqToDB.Tools.ModelGeneration.AssociationType
LinqToDB.Tools.ModelGeneration.IForeignKey.AssociationType.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.BackReference.get -> LinqToDB.Tools.ModelGeneration.IForeignKey?
LinqToDB.Tools.ModelGeneration.IForeignKey.BackReference.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.CanBeNull.get -> bool
LinqToDB.Tools.ModelGeneration.IForeignKey.CanBeNull.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.KeyName.get -> string!
LinqToDB.Tools.ModelGeneration.IForeignKey.KeyName.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.MemberName.get -> string!
LinqToDB.Tools.ModelGeneration.IForeignKey.MemberName.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.OtherColumns.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IColumn!>!
LinqToDB.Tools.ModelGeneration.IForeignKey.OtherColumns.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.OtherTable.get -> LinqToDB.Tools.ModelGeneration.ITable!
LinqToDB.Tools.ModelGeneration.IForeignKey.OtherTable.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.ThisColumns.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IColumn!>!
LinqToDB.Tools.ModelGeneration.IForeignKey.ThisColumns.set -> void
LinqToDB.Tools.ModelGeneration.IForeignKey.ThisTable.get -> LinqToDB.Tools.ModelGeneration.ITable!
LinqToDB.Tools.ModelGeneration.IForeignKey.ThisTable.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase
LinqToDB.Tools.ModelGeneration.IMemberBase.AccessModifier.get -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.IMemberBase.AccessModifier.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.AccessModifierLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.AccessModifierLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.Attributes.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IAttribute!>!
LinqToDB.Tools.ModelGeneration.IMemberBase.Attributes.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.BodyLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.BodyLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.BuildType() -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.Comment.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IMemberBase.Comment.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.Conditional.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.EndLineComment.get -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.EndLineComment.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.ID.get -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.ID.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.InsertBlankLineAfter.get -> bool
LinqToDB.Tools.ModelGeneration.IMemberBase.InsertBlankLineAfter.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.ModifierLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.ModifierLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.Name.get -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.Name.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.NameLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.NameLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.ParamLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.ParamLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.Type.get -> string?
LinqToDB.Tools.ModelGeneration.IMemberBase.Type.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.TypeBuilder.get -> System.Func<string?>?
LinqToDB.Tools.ModelGeneration.IMemberBase.TypeBuilder.set -> void
LinqToDB.Tools.ModelGeneration.IMemberBase.TypeLen.get -> int
LinqToDB.Tools.ModelGeneration.IMemberBase.TypeLen.set -> void
LinqToDB.Tools.ModelGeneration.IMemberGroup
LinqToDB.Tools.ModelGeneration.IMemberGroup.IsCompact.get -> bool
LinqToDB.Tools.ModelGeneration.IMemberGroup.IsCompact.set -> void
LinqToDB.Tools.ModelGeneration.IMemberGroup.IsPropertyGroup.get -> bool
LinqToDB.Tools.ModelGeneration.IMemberGroup.IsPropertyGroup.set -> void
LinqToDB.Tools.ModelGeneration.IMemberGroup.Members.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IClassMember!>!
LinqToDB.Tools.ModelGeneration.IMemberGroup.Members.set -> void
LinqToDB.Tools.ModelGeneration.IMethod
LinqToDB.Tools.ModelGeneration.IMethod.AfterSignature.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IMethod.AfterSignature.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.BodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.IMethod.BodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.BuildBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.IMethod.GenericArguments.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.IMethod.GenericArguments.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.IsAbstract.get -> bool
LinqToDB.Tools.ModelGeneration.IMethod.IsAbstract.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.IsOverride.get -> bool
LinqToDB.Tools.ModelGeneration.IMethod.IsOverride.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.IMethod.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.IMethod.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.IMethod.ParameterBuilders.get -> System.Collections.Generic.List<System.Func<string!>!>!
LinqToDB.Tools.ModelGeneration.IMethod.ParameterBuilders.set -> void
LinqToDB.Tools.ModelGeneration.IModelSource
LinqToDB.Tools.ModelGeneration.IModelSource.Namespace.get -> LinqToDB.Tools.ModelGeneration.INamespace!
LinqToDB.Tools.ModelGeneration.IModelSource.Namespaces.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.INamespace!>!
LinqToDB.Tools.ModelGeneration.IModelSource.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
LinqToDB.Tools.ModelGeneration.IModelSource.Types.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.ITypeBase!>!
LinqToDB.Tools.ModelGeneration.IModelSource.Usings.get -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Tools.ModelGeneration.INamespace
LinqToDB.Tools.ModelGeneration.INamespace.Name.get -> string?
LinqToDB.Tools.ModelGeneration.INamespace.Name.set -> void
LinqToDB.Tools.ModelGeneration.INamespace.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
LinqToDB.Tools.ModelGeneration.INamespace.Types.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.ITypeBase!>!
LinqToDB.Tools.ModelGeneration.INamespace.Types.set -> void
LinqToDB.Tools.ModelGeneration.INamespace.Usings.get -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Tools.ModelGeneration.INamespace.Usings.set -> void
LinqToDB.Tools.ModelGeneration.INotifyingPropertyProperty
LinqToDB.Tools.ModelGeneration.INotifyingPropertyProperty.Dependents.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.INotifyingPropertyProperty.Dependents.set -> void
LinqToDB.Tools.ModelGeneration.INotifyingPropertyProperty.IsNotifying.get -> bool
LinqToDB.Tools.ModelGeneration.INotifyingPropertyProperty.IsNotifying.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.Description.get -> string?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.Description.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsAggregateFunction.get -> bool
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsAggregateFunction.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsDefaultSchema.get -> bool
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsDefaultSchema.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsFunction.get -> bool
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsFunction.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsLoaded.get -> bool
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsLoaded.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsTableFunction.get -> bool
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.IsTableFunction.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.PackageName.get -> string?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.PackageName.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ProcedureName.get -> string?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ProcedureName.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ProcParameters.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.Parameter!>!
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ProcParameters.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ResultException.get -> System.Exception?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ResultException.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ResultTable.get -> TTable?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.ResultTable.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.Schema.get -> string?
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.Schema.set -> void
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.SimilarTables.get -> System.Collections.Generic.List<TTable!>!
LinqToDB.Tools.ModelGeneration.IProcedure<TTable>.SimilarTables.set -> void
LinqToDB.Tools.ModelGeneration.IProperty
LinqToDB.Tools.ModelGeneration.IProperty.BuildGetBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.IProperty.BuildSetBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.IProperty.EnforceNotNullable.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.GetBodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.IProperty.GetBodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.GetterLen.get -> int
LinqToDB.Tools.ModelGeneration.IProperty.GetterLen.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.HasGetter.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.HasGetter.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.HasSetter.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.HasSetter.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.InitValue.get -> string?
LinqToDB.Tools.ModelGeneration.IProperty.InitValue.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.IsAbstract.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.IsAbstract.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.IsAuto.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.IsAuto.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.IsOverride.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.IsOverride.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.IProperty.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.SetBodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.IProperty.SetBodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.IProperty.SetterLen.get -> int
LinqToDB.Tools.ModelGeneration.IProperty.SetterLen.set -> void
LinqToDB.Tools.ModelGeneration.IPropertyValidation
LinqToDB.Tools.ModelGeneration.IPropertyValidation.CustomValidation.get -> bool
LinqToDB.Tools.ModelGeneration.IPropertyValidation.CustomValidation.set -> void
LinqToDB.Tools.ModelGeneration.IPropertyValidation.ValidateProperty.get -> bool
LinqToDB.Tools.ModelGeneration.IPropertyValidation.ValidateProperty.set -> void
LinqToDB.Tools.ModelGeneration.ITable
LinqToDB.Tools.ModelGeneration.ITable.AliasPropertyName.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.AliasPropertyName.set -> void
LinqToDB.Tools.ModelGeneration.ITable.AliasTypeName.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.AliasTypeName.set -> void
LinqToDB.Tools.ModelGeneration.ITable.Columns.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.Tools.ModelGeneration.IColumn!>!
LinqToDB.Tools.ModelGeneration.ITable.Columns.set -> void
LinqToDB.Tools.ModelGeneration.ITable.DataContextProperty.get -> LinqToDB.Tools.ModelGeneration.MemberBase?
LinqToDB.Tools.ModelGeneration.ITable.DataContextProperty.set -> void
LinqToDB.Tools.ModelGeneration.ITable.DataContextPropertyName.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.DataContextPropertyName.set -> void
LinqToDB.Tools.ModelGeneration.ITable.Description.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.Description.set -> void
LinqToDB.Tools.ModelGeneration.ITable.ForeignKeys.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.Tools.ModelGeneration.IForeignKey!>!
LinqToDB.Tools.ModelGeneration.ITable.ForeignKeys.set -> void
LinqToDB.Tools.ModelGeneration.ITable.IsDefaultSchema.get -> bool
LinqToDB.Tools.ModelGeneration.ITable.IsDefaultSchema.set -> void
LinqToDB.Tools.ModelGeneration.ITable.IsProviderSpecific.get -> bool
LinqToDB.Tools.ModelGeneration.ITable.IsProviderSpecific.set -> void
LinqToDB.Tools.ModelGeneration.ITable.IsView.get -> bool
LinqToDB.Tools.ModelGeneration.ITable.IsView.set -> void
LinqToDB.Tools.ModelGeneration.ITable.Schema.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.Schema.set -> void
LinqToDB.Tools.ModelGeneration.ITable.TableName.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.TableName.set -> void
LinqToDB.Tools.ModelGeneration.ITable.TableSchema.get -> LinqToDB.SchemaProvider.TableSchema?
LinqToDB.Tools.ModelGeneration.ITable.TableSchema.set -> void
LinqToDB.Tools.ModelGeneration.ITable.TypeName.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.TypeName.set -> void
LinqToDB.Tools.ModelGeneration.ITable.TypePrefix.get -> string?
LinqToDB.Tools.ModelGeneration.ITable.TypePrefix.set -> void
LinqToDB.Tools.ModelGeneration.ITree
LinqToDB.Tools.ModelGeneration.ITree.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
LinqToDB.Tools.ModelGeneration.ITree.Parent.get -> LinqToDB.Tools.ModelGeneration.ITree?
LinqToDB.Tools.ModelGeneration.ITree.Parent.set -> void
LinqToDB.Tools.ModelGeneration.ITree.SetTree() -> void
LinqToDB.Tools.ModelGeneration.ITypeBase
LinqToDB.Tools.ModelGeneration.ITypeBase.AccessModifier.get -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.ITypeBase.AccessModifier.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.Attributes.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IAttribute!>!
LinqToDB.Tools.ModelGeneration.ITypeBase.Attributes.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.ClassKeyword.get -> string!
LinqToDB.Tools.ModelGeneration.ITypeBase.ClassKeyword.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.Comment.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.ITypeBase.Comment.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.ITypeBase.Conditional.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.IsPartial.get -> bool
LinqToDB.Tools.ModelGeneration.ITypeBase.IsPartial.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.Name.get -> string?
LinqToDB.Tools.ModelGeneration.ITypeBase.Name.set -> void
LinqToDB.Tools.ModelGeneration.ITypeBase.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
LinqToDB.Tools.ModelGeneration.MemberBase
LinqToDB.Tools.ModelGeneration.MemberBase.AccessModifier.get -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.MemberBase.AccessModifier.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.AccessModifierLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.AccessModifierLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.Attributes.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IAttribute!>!
LinqToDB.Tools.ModelGeneration.MemberBase.Attributes.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.BodyLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.BodyLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.BuildType() -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.Comment.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.MemberBase.Comment.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.Conditional.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.EndLineComment.get -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.EndLineComment.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.ID.get -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.ID.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.InsertBlankLineAfter.get -> bool
LinqToDB.Tools.ModelGeneration.MemberBase.InsertBlankLineAfter.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.MemberBase() -> void
LinqToDB.Tools.ModelGeneration.MemberBase.ModifierLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.ModifierLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.Name.get -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.Name.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.NameLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.NameLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.ParamLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.ParamLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.Parent.get -> LinqToDB.Tools.ModelGeneration.ITree?
LinqToDB.Tools.ModelGeneration.MemberBase.Parent.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.Type.get -> string?
LinqToDB.Tools.ModelGeneration.MemberBase.Type.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.TypeBuilder.get -> System.Func<string?>?
LinqToDB.Tools.ModelGeneration.MemberBase.TypeBuilder.set -> void
LinqToDB.Tools.ModelGeneration.MemberBase.TypeLen.get -> int
LinqToDB.Tools.ModelGeneration.MemberBase.TypeLen.set -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Errors.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Errors.set -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.IsCompact.get -> bool
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.IsCompact.set -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.IsPropertyGroup.get -> bool
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.IsPropertyGroup.set -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.MemberGroup() -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Members.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IClassMember!>!
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Members.set -> void
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Region.get -> string?
LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Region.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>
LinqToDB.Tools.ModelGeneration.Method<T>.AfterSignature.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.Method<T>.AfterSignature.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.BodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.Method<T>.BodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.BuildBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.Method<T>.GenericArguments.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.Method<T>.GenericArguments.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.IsAbstract.get -> bool
LinqToDB.Tools.ModelGeneration.Method<T>.IsAbstract.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.IsOverride.get -> bool
LinqToDB.Tools.ModelGeneration.Method<T>.IsOverride.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.Method<T>.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.Method<T>.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.Method<T>.Method() -> void
LinqToDB.Tools.ModelGeneration.Method<T>.Method(string! type, string! name, System.Collections.Generic.IEnumerable<string!>? parameters = null, System.Collections.Generic.IEnumerable<string!>? body = null) -> void
LinqToDB.Tools.ModelGeneration.Method<T>.Method(System.Func<string!>! typeBuilder, string! name, System.Collections.Generic.IEnumerable<System.Func<string!>!>? parameterBuilders = null, params System.Func<System.Collections.Generic.IEnumerable<string!>!>![]? bodyBuilders) -> void
LinqToDB.Tools.ModelGeneration.Method<T>.ParameterBuilders.get -> System.Collections.Generic.List<System.Func<string!>!>!
LinqToDB.Tools.ModelGeneration.Method<T>.ParameterBuilders.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator
LinqToDB.Tools.ModelGeneration.ModelGenerator.AfterGenerateLinqToDBModel.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.AfterGenerateLinqToDBModel.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.AfterLoadMetadata -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseEntityClass.get -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseEntityClass.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeforeGenerateLinqToDBModel.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeforeGenerateLinqToDBModel.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeforeGenerateModel.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeforeGenerateModel.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeginRegion.get -> System.Action<string?>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.BeginRegion.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.BuildColumnComparison -> System.Func<LinqToDB.Tools.ModelGeneration.IColumn!, string!, string!, bool, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.CheckColumnName(string! memberName) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.CheckParameterName(string! parameterName) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.CheckType(System.Type? type, string? typeName) -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertToCompilable.get -> System.Func<string!, bool, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertToCompilable.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertToCompilableDefault(string! name, bool mayRemoveUnderscore) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertUpperNamesToLower.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertUpperNamesToLower.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.CreateXmlCommentFromText(string? text, string! tag = "summary", string? attributes = null) -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.DatabaseName.get -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.DatabaseName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.DataContextName.get -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.DataContextName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.DataContextObject.get -> LinqToDB.Tools.ModelGeneration.IClass?
LinqToDB.Tools.ModelGeneration.ModelGenerator.DataContextObject.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.DefaultConfiguration.get -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.DefaultConfiguration.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.EditableObjectImplementation<TMemberGroup, TMethod, TProperty, TField>() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.EndRegion.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.EndRegion.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.Error.get -> System.Action<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateAssociationExtensions.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateAssociationExtensions.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateAssociations.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateAssociations.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateBackReferences.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateBackReferences.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateConstructors.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateConstructors.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseInfo.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseInfo.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseName.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseNameFromTable.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDatabaseNameFromTable.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDataOptionsConstructors.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDataOptionsConstructors.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDataTypes.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDataTypes.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDbTypes.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateDbTypes.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateFindExtensions.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateFindExtensions.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateLengthProperty.get -> bool?
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateLengthProperty.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateModel() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateModelInterface.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateModelInterface.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateModelOnly.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateModelOnly.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateNameOf.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateNameOf.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateObsoleteAttributeForAliases.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateObsoleteAttributeForAliases.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GeneratePrecisionProperty.get -> bool?
LinqToDB.Tools.ModelGeneration.ModelGenerator.GeneratePrecisionProperty.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureDbType.get -> System.Func<LinqToDB.Tools.ModelGeneration.Parameter!, bool>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureDbType.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureErrors.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureErrors.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureResultAsList.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProcedureResultAsList.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProceduresOnTypedContext.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProceduresOnTypedContext.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProviderSpecificTable.get -> System.Func<LinqToDB.Tools.ModelGeneration.ITable!, LinqToDB.Tools.ModelGeneration.MemberBase?>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateProviderSpecificTable.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateScaleProperty.get -> bool?
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateScaleProperty.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateSchemaAsType.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateSchemaAsType.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateTableRegion.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateTableRegion.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateViews.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerateViews.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GenerationEnvironment.get -> System.Text.StringBuilder!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetAssociationExtensionPluralName.get -> System.Func<LinqToDB.Tools.ModelGeneration.IForeignKey!, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetAssociationExtensionPluralName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetAssociationExtensionSingularName.get -> System.Func<LinqToDB.Tools.ModelGeneration.IForeignKey!, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetAssociationExtensionSingularName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetConstructors -> System.Func<string?, string!, System.Func<LinqToDB.Tools.ModelGeneration.IMethod!>!, System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.IMethod!>!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetSchemaOptions.get -> LinqToDB.SchemaProvider.GetSchemaOptions!
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetSchemaOptions.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.GetTreeNodes(LinqToDB.Tools.ModelGeneration.ITree! parent) -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ImplementNotifyPropertyChanging.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.ImplementNotifyPropertyChanging.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.IncludeDefaultSchema.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.IncludeDefaultSchema.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsCompactColumnAliases.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsCompactColumnAliases.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsCompactColumns.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsCompactColumns.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsParameter -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.IsProcedureColumn -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.KeyWords -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.LenDiff(int max, string! str) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.MakeMembersNamesUnique(System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.IClassMember!>! members, string! defaultName, params string![]! reservedNames) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.MakeTypeMembersNamesUnique(LinqToDB.Tools.ModelGeneration.IClass! type, string! defaultName = "Member", params string![]! exceptMethods) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.Model.get -> LinqToDB.Tools.ModelGeneration.IModelSource!
LinqToDB.Tools.ModelGeneration.ModelGenerator.Model.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ModelGenerator(LinqToDB.Tools.ModelGeneration.IModelSource! model, System.Text.StringBuilder! generationEnvironment, System.Action<string?>! write, System.Action<string?>! writeLine, System.Action<string!>! pushIndent, System.Func<string!>! popIndent, System.Action<string!>! error) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeName.get -> System.Func<string!, bool, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeNamesWithoutUnderscores.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeNamesWithoutUnderscores.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeParameterName.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeParameterName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeProcedureColumnName.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeProcedureColumnName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NormalizeStringName(string! name) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.NotifyDataErrorInfoImplementation<TMemberGroup, TMethod, TProperty, TField, TEvent, TAttribute>() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.NotifyPropertyChangedImplementation<TMemberGroup, TMethod, TField, TEvent, TAttribute>() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.OneToManyAssociationType.get -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.OneToManyAssociationType.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.OnPropertyChangedArgBody -> string![]!
LinqToDB.Tools.ModelGeneration.ModelGenerator.OnPropertyChangedBody -> string![]!
LinqToDB.Tools.ModelGeneration.ModelGenerator.OnPropertyChangingArgBody -> string![]!
LinqToDB.Tools.ModelGeneration.ModelGenerator.OnPropertyChangingBody -> string![]!
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeClassNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeClassNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeDataContextPropertyNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeDataContextPropertyNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeForeignKeyNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.PluralizeForeignKeyNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.PopIndent.get -> System.Func<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.PrefixTableMappingForDefaultSchema.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.PrefixTableMappingForDefaultSchema.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.PrefixTableMappingWithSchema.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.PrefixTableMappingWithSchema.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.PushIndent.get -> System.Action<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.RemoveSpace() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.RenderUsings(System.Collections.Generic.HashSet<string!>! usings) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ReplaceSimilarTables.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.ReplaceSimilarTables.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SchemaDataContextTypeName.get -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.SchemaDataContextTypeName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SchemaNameMapping -> System.Collections.Generic.Dictionary<string!, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.SchemaNameSuffix.get -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.SchemaNameSuffix.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ServerName.get -> string?
LinqToDB.Tools.ModelGeneration.ModelGenerator.ServerName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SetPropertyValue(LinqToDB.Tools.ModelGeneration.IProperty! propertyObject, string! propertyName, object! value) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SetPropertyValueAction -> System.Action<LinqToDB.Tools.ModelGeneration.IProperty!, string!, object!>?
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeClassNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeClassNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeDataContextPropertyNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeDataContextPropertyNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeForeignKeyNames.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.SingularizeForeignKeyNames.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SkipNotifyPropertyChangedImplementation.get -> bool
LinqToDB.Tools.ModelGeneration.ModelGenerator.SkipNotifyPropertyChangedImplementation.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SkipSpacesAndInsert(string! value) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.SqlBuilder -> LinqToDB.SqlProvider.ISqlBuilder?
LinqToDB.Tools.ModelGeneration.ModelGenerator.SuggestNoDuplicate(System.Collections.Generic.IEnumerable<string!>! currentNames, string! newName, string? prefix) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ToCamelCase(string! name) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ToDictionary<T, TR>(System.Collections.Generic.IEnumerable<T>! source, System.Func<T, string!>! keyGetter, System.Func<T, TR>! objGetter, System.Func<TR, int, string!>! getKeyName) -> System.Collections.Generic.Dictionary<string!, TR>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ToValidName.get -> System.Func<string!, bool, string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.ToValidName.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ToValidNameDefault(string! name, bool mayRemoveUnderscore) -> string!
LinqToDB.Tools.ModelGeneration.ModelGenerator.Trim() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.ValidationImplementation<TClass, TMemberGroup, TMethod, TField, TAttribute>() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.Write.get -> System.Action<string?>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteAttribute.get -> System.Action<LinqToDB.Tools.ModelGeneration.IAttribute!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteAttribute.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteBeginClass.get -> System.Action<LinqToDB.Tools.ModelGeneration.IClass!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteBeginClass.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteBeginNamespace.get -> System.Action<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteBeginNamespace.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteComment.get -> System.Action<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteComment.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEndClass.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEndClass.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEndNamespace.get -> System.Action!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEndNamespace.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEvent.get -> System.Action<LinqToDB.Tools.ModelGeneration.IEvent!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteEvent.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteField.get -> System.Action<LinqToDB.Tools.ModelGeneration.IField!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteField.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteLine.get -> System.Action<string?>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteMethod.get -> System.Action<LinqToDB.Tools.ModelGeneration.IMethod!, bool>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteMethod.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteProperty.get -> System.Action<LinqToDB.Tools.ModelGeneration.IProperty!, bool>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteProperty.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteSpaces(int len) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteUsing.get -> System.Action<string!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator.WriteUsing.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GenerateTypesFromMetadata<TMemberGroup, TClass, TAttribute, TMethod, TProperty, TField>() -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GetColumn(string! tableName, string! columnName) -> LinqToDB.Tools.ModelGeneration.IColumn!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GetFK(string! tableName, string! fkName) -> LinqToDB.Tools.ModelGeneration.IForeignKey!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GetForeignKey(string! tableName, string! fkName) -> LinqToDB.Tools.ModelGeneration.IForeignKey!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GetProcedure(string! name) -> TProcedure
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.GetTable(string! name) -> TTable!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.LoadMetadata<TClass, TForeignKey, TColumn>(LinqToDB.Data.DataConnection! dataConnection) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.LoadProviderSpecificTable -> System.Func<LinqToDB.SchemaProvider.TableSchema!, TTable?>!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.LoadServerMetadata<TForeignKey, TColumn>(LinqToDB.Data.DataConnection! dataConnection) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.ModelGenerator(LinqToDB.Tools.ModelGeneration.IModelSource! model, System.Text.StringBuilder! generationEnvironment, System.Action<string?>! write, System.Action<string?>! writeLine, System.Action<string!>! pushIndent, System.Func<string!>! popIndent, System.Action<string!>! error) -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.Procedures.get -> System.Collections.Generic.Dictionary<string!, TProcedure>!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.Procedures.set -> void
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.SetTable(string! tableName, string? TypeName = null, string? DataContextPropertyName = null) -> LinqToDB.Tools.ModelGeneration.TableContext<TTable!, TProcedure>!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.Tables.get -> System.Collections.Generic.Dictionary<string!, TTable!>!
LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable, TProcedure>.Tables.set -> void
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.CurrentNamespace -> int
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.ModelSource() -> void
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Namespace.get -> LinqToDB.Tools.ModelGeneration.INamespace!
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Namespaces.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.INamespace!>!
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Parent.get -> LinqToDB.Tools.ModelGeneration.ITree?
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Parent.set -> void
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.SetTree() -> void
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Types.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.ITypeBase!>!
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Usings.get -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Usings.set -> void
LinqToDB.Tools.ModelGeneration.ModelType
LinqToDB.Tools.ModelGeneration.ModelType.Arguments.get -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ModelType!>!
LinqToDB.Tools.ModelGeneration.ModelType.ElementType.get -> LinqToDB.Tools.ModelGeneration.ModelType?
LinqToDB.Tools.ModelGeneration.ModelType.IsArray.get -> bool
LinqToDB.Tools.ModelGeneration.ModelType.IsNullable.get -> bool
LinqToDB.Tools.ModelGeneration.ModelType.IsReference.get -> bool
LinqToDB.Tools.ModelGeneration.ModelType.ModelType(LinqToDB.Tools.ModelGeneration.ModelType! elementType, bool isNullable) -> void
LinqToDB.Tools.ModelGeneration.ModelType.ModelType(string! type, bool referenceType, bool isNullable, params LinqToDB.Tools.ModelGeneration.ModelType![]! typeArguments) -> void
LinqToDB.Tools.ModelGeneration.ModelType.ModelType(System.Type! type, bool nullable, params LinqToDB.Tools.ModelGeneration.ModelType![]! typeArguments) -> void
LinqToDB.Tools.ModelGeneration.ModelType.ToTypeName() -> string!
LinqToDB.Tools.ModelGeneration.ModelType.Type.get -> System.Type?
LinqToDB.Tools.ModelGeneration.ModelType.TypeName.get -> string?
LinqToDB.Tools.ModelGeneration.NameChangedArgs
LinqToDB.Tools.ModelGeneration.NameChangedArgs.Deconstruct(out string! OldName, out string? NewName) -> void
LinqToDB.Tools.ModelGeneration.NameChangedArgs.NameChangedArgs(LinqToDB.Tools.ModelGeneration.NameChangedArgs! original) -> void
LinqToDB.Tools.ModelGeneration.NameChangedArgs.NameChangedArgs(string! OldName, string? NewName) -> void
LinqToDB.Tools.ModelGeneration.NameChangedArgs.NewName.get -> string?
LinqToDB.Tools.ModelGeneration.NameChangedArgs.NewName.init -> void
LinqToDB.Tools.ModelGeneration.NameChangedArgs.OldName.get -> string!
LinqToDB.Tools.ModelGeneration.NameChangedArgs.OldName.init -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>
LinqToDB.Tools.ModelGeneration.Namespace<T>.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
LinqToDB.Tools.ModelGeneration.Namespace<T>.Name.get -> string?
LinqToDB.Tools.ModelGeneration.Namespace<T>.Name.set -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>.Namespace() -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>.Parent.get -> LinqToDB.Tools.ModelGeneration.ITree?
LinqToDB.Tools.ModelGeneration.Namespace<T>.Parent.set -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>.SetTree() -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>.Types.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.ITypeBase!>!
LinqToDB.Tools.ModelGeneration.Namespace<T>.Types.set -> void
LinqToDB.Tools.ModelGeneration.Namespace<T>.Usings.get -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Tools.ModelGeneration.Namespace<T>.Usings.set -> void
LinqToDB.Tools.ModelGeneration.Parameter
LinqToDB.Tools.ModelGeneration.Parameter.DataType.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.DataType.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.Description.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.Description.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.IsIn.get -> bool
LinqToDB.Tools.ModelGeneration.Parameter.IsIn.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.IsNullable.get -> bool
LinqToDB.Tools.ModelGeneration.Parameter.IsNullable.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.IsOut.get -> bool
LinqToDB.Tools.ModelGeneration.Parameter.IsOut.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.IsResult.get -> bool
LinqToDB.Tools.ModelGeneration.Parameter.IsResult.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.Parameter() -> void
LinqToDB.Tools.ModelGeneration.Parameter.ParameterName.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.ParameterName.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.ParameterType.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.ParameterType.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.SchemaName.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.SchemaName.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.SchemaType.get -> string?
LinqToDB.Tools.ModelGeneration.Parameter.SchemaType.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.Size.get -> int?
LinqToDB.Tools.ModelGeneration.Parameter.Size.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.SystemType.get -> System.Type?
LinqToDB.Tools.ModelGeneration.Parameter.SystemType.set -> void
LinqToDB.Tools.ModelGeneration.Parameter.Type.get -> LinqToDB.Tools.ModelGeneration.ModelType!
LinqToDB.Tools.ModelGeneration.Property<T>
LinqToDB.Tools.ModelGeneration.Property<T>.BuildGetBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.Property<T>.BuildSetBody() -> System.Collections.Generic.IEnumerable<string!>!
LinqToDB.Tools.ModelGeneration.Property<T>.GetBodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.Property<T>.GetBodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.GetterLen.get -> int
LinqToDB.Tools.ModelGeneration.Property<T>.GetterLen.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.HasGetter.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.HasGetter.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.HasSetter.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.HasSetter.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.InitBody(System.Func<System.Collections.Generic.IEnumerable<string!>!>? getBodyBuilder = null, System.Func<System.Collections.Generic.IEnumerable<string!>!>? setBodyBuilder = null) -> LinqToDB.Tools.ModelGeneration.IProperty!
LinqToDB.Tools.ModelGeneration.Property<T>.InitGetter(string! getBody) -> LinqToDB.Tools.ModelGeneration.IProperty!
LinqToDB.Tools.ModelGeneration.Property<T>.InitGetter(System.Func<System.Collections.Generic.IEnumerable<string!>!>! getBodyBuilder) -> LinqToDB.Tools.ModelGeneration.IProperty!
LinqToDB.Tools.ModelGeneration.Property<T>.InitValue.get -> string?
LinqToDB.Tools.ModelGeneration.Property<T>.InitValue.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.IsAbstract.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.IsAbstract.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.IsAuto.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.IsAuto.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.IsOverride.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.IsOverride.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.IsStatic.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.IsStatic.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.IsVirtual.get -> bool
LinqToDB.Tools.ModelGeneration.Property<T>.IsVirtual.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.Property() -> void
LinqToDB.Tools.ModelGeneration.Property<T>.Property(bool enforceNotNullable, System.Func<string!>! typeBuilder, string! name, System.Func<System.Collections.Generic.IEnumerable<string!>!>? getBodyBuilder = null, System.Func<System.Collections.Generic.IEnumerable<string!>!>? setBodyBuilder = null) -> void
LinqToDB.Tools.ModelGeneration.Property<T>.Property(LinqToDB.Tools.ModelGeneration.ModelType! type, string! name, System.Func<System.Collections.Generic.IEnumerable<string!>!>? getBodyBuilder = null, System.Func<System.Collections.Generic.IEnumerable<string!>!>? setBodyBuilder = null) -> void
LinqToDB.Tools.ModelGeneration.Property<T>.Property(string! type, string! name, System.Func<System.Collections.Generic.IEnumerable<string!>!>? getBodyBuilder = null, System.Func<System.Collections.Generic.IEnumerable<string!>!>? setBodyBuilder = null) -> void
LinqToDB.Tools.ModelGeneration.Property<T>.Property(System.Func<string!>! typeBuilder, string! name, System.Func<System.Collections.Generic.IEnumerable<string!>!>? getBodyBuilder = null, System.Func<System.Collections.Generic.IEnumerable<string!>!>? setBodyBuilder = null) -> void
LinqToDB.Tools.ModelGeneration.Property<T>.SetBodyBuilders.get -> System.Collections.Generic.List<System.Func<System.Collections.Generic.IEnumerable<string!>!>!>!
LinqToDB.Tools.ModelGeneration.Property<T>.SetBodyBuilders.set -> void
LinqToDB.Tools.ModelGeneration.Property<T>.SetterLen.get -> int
LinqToDB.Tools.ModelGeneration.Property<T>.SetterLen.set -> void
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>.Column(string! columnName, string? MemberName = null, string? Type = null, bool? IsNullable = null, string? Conditional = null) -> LinqToDB.Tools.ModelGeneration.TableContext<TTable!, TProcedure>!
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>.FK(string! fkName, string? MemberName = null, LinqToDB.Tools.ModelGeneration.AssociationType? AssociationType = null, bool? CanBeNull = null) -> LinqToDB.Tools.ModelGeneration.TableContext<TTable!, TProcedure>!
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>.TableContext(LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable!, TProcedure>! transformation, string! tableName) -> void
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>.TableName -> string!
LinqToDB.Tools.ModelGeneration.TableContext<TTable, TProcedure>.Transformation -> LinqToDB.Tools.ModelGeneration.ModelGenerator<TTable!, TProcedure>!
LinqToDB.Tools.ModelGeneration.TypeBase
LinqToDB.Tools.ModelGeneration.TypeBase.AccessModifier.get -> LinqToDB.Tools.ModelGeneration.AccessModifier
LinqToDB.Tools.ModelGeneration.TypeBase.AccessModifier.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.Attributes.get -> System.Collections.Generic.List<LinqToDB.Tools.ModelGeneration.IAttribute!>!
LinqToDB.Tools.ModelGeneration.TypeBase.Attributes.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.Comment.get -> System.Collections.Generic.List<string!>!
LinqToDB.Tools.ModelGeneration.TypeBase.Comment.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.Conditional.get -> string?
LinqToDB.Tools.ModelGeneration.TypeBase.Conditional.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.IsPartial.get -> bool
LinqToDB.Tools.ModelGeneration.TypeBase.IsPartial.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.Name.get -> string?
LinqToDB.Tools.ModelGeneration.TypeBase.Name.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.OnNameChanged -> LinqToDB.Tools.ModelGeneration.TypeBase.OnNameChangedHandler?
LinqToDB.Tools.ModelGeneration.TypeBase.OnNameChangedHandler
LinqToDB.Tools.ModelGeneration.TypeBase.Parent.get -> LinqToDB.Tools.ModelGeneration.ITree?
LinqToDB.Tools.ModelGeneration.TypeBase.Parent.set -> void
LinqToDB.Tools.ModelGeneration.TypeBase.TypeBase() -> void
override LinqToDB.CodeModel.ClassGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Equals(object? obj) -> bool
override LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.GetHashCode() -> int
override LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.ToString() -> string!
override LinqToDB.CodeModel.CodeClass.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeConstructor.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeLambda.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeMethod.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeProperty.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeTypeInitializer.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Equals(object? obj) -> bool
override LinqToDB.CodeModel.CodeXmlComment.ParameterComment.GetHashCode() -> int
override LinqToDB.CodeModel.CodeXmlComment.ParameterComment.ToString() -> string!
override LinqToDB.CodeModel.ConstructorGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.FieldGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.MethodGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.ClassGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAsOperator! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentExpression! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentStatement! statement) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAttribute! attribute) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitExpression! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitStatement! statement) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeBinary! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallExpression! call) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallStatement! call) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeClass! class) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeComment! comment) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstant! constant) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstructor! ctor) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeDefault! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeEmptyLine! line) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeField! field) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeFile! file) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIdentifier! identifier) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeImport! import) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIndex! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeLambda! method) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMember! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMethod! method) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNameOf! nameOf) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNamespace! namespace) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNew! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNewArray! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeParameter! parameter) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodePragma! pragma) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeProperty! property) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReference! reference) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeRegion! region) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReturn! statement) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeSuppressNull! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTernary! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThis! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowExpression! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowStatement! statement) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeCast! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeInitializer! cctor) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeReference! type) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeToken! type) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeUnary! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeVariable! expression) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeXmlComment! doc) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.ConstructorGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.FieldGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.MethodGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.PragmaGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.PropertyGroup! group) -> void
override LinqToDB.CodeModel.NoopCodeModelVisitor.Visit(LinqToDB.CodeModel.RegionGroup! group) -> void
override LinqToDB.CodeModel.PragmaGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.PropertyGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.RegionGroup.ElementType.get -> LinqToDB.CodeModel.CodeElementType
override LinqToDB.CodeModel.RegionGroup.IsEmpty.get -> bool
override LinqToDB.DataModel.FileData.Equals(object? obj) -> bool
override LinqToDB.DataModel.FileData.GetHashCode() -> int
override LinqToDB.DataModel.FileData.ToString() -> string!
override LinqToDB.DataModel.FunctionResult.Equals(object? obj) -> bool
override LinqToDB.DataModel.FunctionResult.GetHashCode() -> int
override LinqToDB.DataModel.FunctionResult.ToString() -> string!
override LinqToDB.Naming.HumanizerNameConverter.GetConverter(LinqToDB.Naming.Pluralization conversion) -> System.Func<string!, string!>!
override LinqToDB.Naming.NameConverterBase.NameParts.Equals(object? obj) -> bool
override LinqToDB.Naming.NameConverterBase.NameParts.GetHashCode() -> int
override LinqToDB.Naming.NameConverterBase.NameParts.ToString() -> string!
override LinqToDB.Scaffold.SourceCodeFile.Equals(object? obj) -> bool
override LinqToDB.Scaffold.SourceCodeFile.GetHashCode() -> int
override LinqToDB.Scaffold.SourceCodeFile.ToString() -> string!
override LinqToDB.Schema.AggregateFunction.Equals(object? obj) -> bool
override LinqToDB.Schema.AggregateFunction.GetHashCode() -> int
override LinqToDB.Schema.AggregateFunction.ToString() -> string!
override LinqToDB.Schema.CallableObject.Equals(object? obj) -> bool
override LinqToDB.Schema.CallableObject.GetHashCode() -> int
override LinqToDB.Schema.CallableObject.ToString() -> string!
override LinqToDB.Schema.Column.Equals(object? obj) -> bool
override LinqToDB.Schema.Column.GetHashCode() -> int
override LinqToDB.Schema.Column.ToString() -> string!
override LinqToDB.Schema.DatabaseType.Equals(object? obj) -> bool
override LinqToDB.Schema.DatabaseType.GetHashCode() -> int
override LinqToDB.Schema.DatabaseType.ToString() -> string!
override LinqToDB.Schema.ForeignKey.Equals(object? obj) -> bool
override LinqToDB.Schema.ForeignKey.GetHashCode() -> int
override LinqToDB.Schema.ForeignKey.ToString() -> string!
override LinqToDB.Schema.ForeignKeyColumnMapping.Equals(object? obj) -> bool
override LinqToDB.Schema.ForeignKeyColumnMapping.GetHashCode() -> int
override LinqToDB.Schema.ForeignKeyColumnMapping.ToString() -> string!
override LinqToDB.Schema.Identity.Equals(object? obj) -> bool
override LinqToDB.Schema.Identity.GetHashCode() -> int
override LinqToDB.Schema.Identity.ToString() -> string!
override LinqToDB.Schema.Parameter.Equals(object? obj) -> bool
override LinqToDB.Schema.Parameter.GetHashCode() -> int
override LinqToDB.Schema.Parameter.ToString() -> string!
override LinqToDB.Schema.PrimaryKey.Equals(object? obj) -> bool
override LinqToDB.Schema.PrimaryKey.GetHashCode() -> int
override LinqToDB.Schema.PrimaryKey.ToString() -> string!
override LinqToDB.Schema.Result.Equals(object? obj) -> bool
override LinqToDB.Schema.Result.GetHashCode() -> int
override LinqToDB.Schema.Result.ToString() -> string!
override LinqToDB.Schema.ResultColumn.Equals(object? obj) -> bool
override LinqToDB.Schema.ResultColumn.GetHashCode() -> int
override LinqToDB.Schema.ResultColumn.ToString() -> string!
override LinqToDB.Schema.ScalarFunction.Equals(object? obj) -> bool
override LinqToDB.Schema.ScalarFunction.GetHashCode() -> int
override LinqToDB.Schema.ScalarFunction.ToString() -> string!
override LinqToDB.Schema.ScalarResult.Equals(object? obj) -> bool
override LinqToDB.Schema.ScalarResult.GetHashCode() -> int
override LinqToDB.Schema.ScalarResult.ToString() -> string!
override LinqToDB.Schema.Sequence.Equals(object? obj) -> bool
override LinqToDB.Schema.Sequence.GetHashCode() -> int
override LinqToDB.Schema.Sequence.ToString() -> string!
override LinqToDB.Schema.SqlServerDatabaseOptions.ScalarFunctionSchemaRequired.get -> bool
override LinqToDB.Schema.StoredProcedure.Equals(object? obj) -> bool
override LinqToDB.Schema.StoredProcedure.GetHashCode() -> int
override LinqToDB.Schema.StoredProcedure.ToString() -> string!
override LinqToDB.Schema.Table.Equals(object? obj) -> bool
override LinqToDB.Schema.Table.GetHashCode() -> int
override LinqToDB.Schema.Table.ToString() -> string!
override LinqToDB.Schema.TableFunction.Equals(object? obj) -> bool
override LinqToDB.Schema.TableFunction.GetHashCode() -> int
override LinqToDB.Schema.TableFunction.ToString() -> string!
override LinqToDB.Schema.TableLikeObject.Equals(object? obj) -> bool
override LinqToDB.Schema.TableLikeObject.GetHashCode() -> int
override LinqToDB.Schema.TableLikeObject.ToString() -> string!
override LinqToDB.Schema.TupleResult.Equals(object? obj) -> bool
override LinqToDB.Schema.TupleResult.GetHashCode() -> int
override LinqToDB.Schema.TupleResult.ToString() -> string!
override LinqToDB.Schema.TypeMapping.Equals(object? obj) -> bool
override LinqToDB.Schema.TypeMapping.GetHashCode() -> int
override LinqToDB.Schema.TypeMapping.ToString() -> string!
override LinqToDB.Schema.View.Equals(object? obj) -> bool
override LinqToDB.Schema.View.GetHashCode() -> int
override LinqToDB.Schema.View.ToString() -> string!
override LinqToDB.Schema.VoidResult.Equals(object? obj) -> bool
override LinqToDB.Schema.VoidResult.GetHashCode() -> int
override LinqToDB.Schema.VoidResult.ToString() -> string!
override LinqToDB.Tools.ModelGeneration.Class<T>.ClassKeyword.get -> string!
override LinqToDB.Tools.ModelGeneration.Class<T>.ClassKeyword.set -> void
override LinqToDB.Tools.ModelGeneration.Class<T>.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
override LinqToDB.Tools.ModelGeneration.Class<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
override LinqToDB.Tools.ModelGeneration.Class<T>.SetTree() -> void
override LinqToDB.Tools.ModelGeneration.Event<T>.CalcBodyLen() -> int
override LinqToDB.Tools.ModelGeneration.Event<T>.CalcModifierLen() -> int
override LinqToDB.Tools.ModelGeneration.Event<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
override LinqToDB.Tools.ModelGeneration.Field<T>.CalcBodyLen() -> int
override LinqToDB.Tools.ModelGeneration.Field<T>.CalcModifierLen() -> int
override LinqToDB.Tools.ModelGeneration.Field<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
override LinqToDB.Tools.ModelGeneration.ForeignKey<T>.EnforceNotNullable.get -> bool
override LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.CalcBodyLen() -> int
override LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
override LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
override LinqToDB.Tools.ModelGeneration.MemberGroup<TMemberGroup>.SetTree() -> void
override LinqToDB.Tools.ModelGeneration.Method<T>.CalcBodyLen() -> int
override LinqToDB.Tools.ModelGeneration.Method<T>.CalcModifierLen() -> int
override LinqToDB.Tools.ModelGeneration.Method<T>.CalcParamLen() -> int
override LinqToDB.Tools.ModelGeneration.Method<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
override LinqToDB.Tools.ModelGeneration.NameChangedArgs.Equals(object? obj) -> bool
override LinqToDB.Tools.ModelGeneration.NameChangedArgs.GetHashCode() -> int
override LinqToDB.Tools.ModelGeneration.NameChangedArgs.ToString() -> string!
override LinqToDB.Tools.ModelGeneration.Property<T>.CalcBodyLen() -> int
override LinqToDB.Tools.ModelGeneration.Property<T>.CalcModifierLen() -> int
override LinqToDB.Tools.ModelGeneration.Property<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
override sealed LinqToDB.Schema.AggregateFunction.Equals(LinqToDB.Schema.CallableObject? other) -> bool
override sealed LinqToDB.Schema.ScalarFunction.Equals(LinqToDB.Schema.CallableObject? other) -> bool
override sealed LinqToDB.Schema.ScalarResult.Equals(LinqToDB.Schema.Result? other) -> bool
override sealed LinqToDB.Schema.StoredProcedure.Equals(LinqToDB.Schema.CallableObject? other) -> bool
override sealed LinqToDB.Schema.Table.Equals(LinqToDB.Schema.TableLikeObject? other) -> bool
override sealed LinqToDB.Schema.TableFunction.Equals(LinqToDB.Schema.CallableObject? other) -> bool
override sealed LinqToDB.Schema.TupleResult.Equals(LinqToDB.Schema.Result? other) -> bool
override sealed LinqToDB.Schema.View.Equals(LinqToDB.Schema.TableLikeObject? other) -> bool
override sealed LinqToDB.Schema.VoidResult.Equals(LinqToDB.Schema.Result? other) -> bool
static LinqToDB.CodeModel.AstExtensions.EnumerateMemberGroups<TGroup>(this System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.IMemberGroup!>! groups) -> System.Collections.Generic.IEnumerable<TGroup>!
static LinqToDB.CodeModel.AstExtensions.EnumerateMembers<TGroup, TElement>(this System.Collections.Generic.IEnumerable<LinqToDB.CodeModel.IMemberGroup!>! groups) -> System.Collections.Generic.IEnumerable<TElement>!
static LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.operator !=(LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter? left, LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter? right) -> bool
static LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.operator ==(LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter? left, LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter? right) -> bool
static LinqToDB.CodeModel.CodeXmlComment.ParameterComment.operator !=(LinqToDB.CodeModel.CodeXmlComment.ParameterComment? left, LinqToDB.CodeModel.CodeXmlComment.ParameterComment? right) -> bool
static LinqToDB.CodeModel.CodeXmlComment.ParameterComment.operator ==(LinqToDB.CodeModel.CodeXmlComment.ParameterComment? left, LinqToDB.CodeModel.CodeXmlComment.ParameterComment? right) -> bool
static LinqToDB.CodeModel.LanguageProviders.CSharp.get -> LinqToDB.CodeModel.ILanguageProvider!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.AsyncExtensions.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.AsyncExtensions_FirstOrDefaultAsync.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.AsyncExtensions_ToListAsync.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Common.Converter.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Common.Converter_ChangeTypeTo.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.ConnectionOptions_MappingSchema.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptions.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptionsExtensions_UseConfiguration.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptionsExtensions_UseMappingSchema.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptionsWithType(LinqToDB.CodeModel.IType! contextType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptions_ConnectionOptions.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Configuration.DataOptions_Options.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnection.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnectionExtensions.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnectionExtensions_ExecuteProc.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnectionExtensions_ExecuteProcAsync.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnectionExtensions_QueryProc.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnectionExtensions_QueryProcAsync.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataConnection_CommandTimeout.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameterArray.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_DbType.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_Direction.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_Precision.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_Scale.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_Size.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Data.DataParameter_Value.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.DataExtensions.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.DataExtensions_GetTable.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.DataExtensions_QueryFromExpression.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.DataExtensions_TableFromExpression.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.DataType.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Expressions.MemberHelper.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Expressions.MemberHelper_MethodOf.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.IDataContext.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.IDataContext_MappingSchema.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.ITable(LinqToDB.CodeModel.IType! tableType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.ITableT.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_AliasName.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_CanBeNull.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_ExpressionPredicate.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_OtherKey.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_QueryExpressionMethod.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_Storage.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.AssociationAttribute_ThisKey.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_CanBeNull.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_CreateFormat.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_DataType.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_DbType.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_IsDiscriminator.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_IsIdentity.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_IsPrimaryKey.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_Length.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_MemberName.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_Order.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_Precision.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_PrimaryKeyOrder.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_Scale.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_SkipOnEntityFetch.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_SkipOnInsert.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_SkipOnUpdate.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.ColumnAttribute_Storage.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.EntityMappingBuilderWithType(LinqToDB.CodeModel.IType! entityType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.EntityMappingBuilder_HasAttribute.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.EntityMappingBuilder_Member.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.FluentMappingBuilder.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.FluentMappingBuilder_Build.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.FluentMappingBuilder_Entity.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.FluentMappingBuilder_HasAttribute.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.MappingAttribute_Configuration.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.MappingSchema.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.MappingSchema_CombineSchemas.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.MappingSchema_SetConvertExpression.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.NotColumnAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.PropertyMappingBuilder_IsNotColumn.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_Database.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_IsColumnAttributeRequired.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_IsTemporary.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_IsView.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_Schema.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_Server.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Mapping.TableAttribute_TableOptions.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.SqlFunctionAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.SqlTableFunctionAttribute.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_ArgIndices.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_CanBeNull.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_InlineParameters.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_IsAggregate.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_IsNullable.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_IsPredicate.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_IsPure.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_IsWindowFunction.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_PreferServerSide.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_ExpressionAttribute_ServerSideOnly.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_TableFunctionAttribute_ArgIndices.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_TableFunctionAttribute_Database.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_TableFunctionAttribute_Package.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_TableFunctionAttribute_Schema.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Sql_TableFunctionAttribute_Server.get -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Tools.Comparers.ComparerBuilder.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.LinqToDB.Tools.Comparers.ComparerBuilder_GetEqualityComparer.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.Microsoft.SqlServer.Types.SqlHierarchyId.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.PropertyOrField<TObject, TProperty>(System.Linq.Expressions.Expression<System.Func<TObject, TProperty>!>! accessor) -> LinqToDB.CodeModel.CodeReference!
static LinqToDB.CodeModel.WellKnownTypes.System.Action.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Boolean.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic.IEnumerable(LinqToDB.CodeModel.IType! elementType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic.IEqualityComparer(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic.IEqualityComparer_Equals.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic.IEqualityComparer_GetHashCode.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Collections.Generic.List(LinqToDB.CodeModel.IType! elementType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.Common.DbDataReader.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.Common.DbDataReader_GetValue.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlBinary.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlBoolean.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlByte.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlDateTime.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlDecimal.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlDouble.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlGuid.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlInt16.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlInt32.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlInt64.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlMoney.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlSingle.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlString.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Data.SqlTypes.SqlXml.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Func(LinqToDB.CodeModel.IType! returnType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Func(LinqToDB.CodeModel.IType! returnType, LinqToDB.CodeModel.IType! arg0) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Func(LinqToDB.CodeModel.IType! returnType, LinqToDB.CodeModel.IType! arg0, LinqToDB.CodeModel.IType! arg1) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.IEquatable(LinqToDB.CodeModel.IType! type) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.IEquatable_Equals.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.IEquatable_Equals_Parameter.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Int32.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Int64.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.InvalidOperationException.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Enumerable.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Enumerable_ToList.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Expressions.Expression(LinqToDB.CodeModel.IType! expressionType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Expressions.LambdaExpression.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.IQueryable(LinqToDB.CodeModel.IType! elementType) -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Queryable.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Queryable_First.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Queryable_FirstOrDefault.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Linq.Queryable_Where.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Object.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.ObjectArrayNullable.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.ObjectNullable.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Object_Equals.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Object_Equals_Parameter.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Object_GetHashCode.get -> LinqToDB.CodeModel.CodeIdentifier!
static LinqToDB.CodeModel.WellKnownTypes.System.Reflection.MethodInfo.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.String.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Threading.CancellationToken.get -> LinqToDB.CodeModel.IType!
static LinqToDB.CodeModel.WellKnownTypes.System.Threading.Tasks.Task(LinqToDB.CodeModel.IType! valueType) -> LinqToDB.CodeModel.IType!
static LinqToDB.DataModel.FileData.operator !=(LinqToDB.DataModel.FileData? left, LinqToDB.DataModel.FileData? right) -> bool
static LinqToDB.DataModel.FileData.operator ==(LinqToDB.DataModel.FileData? left, LinqToDB.DataModel.FileData? right) -> bool
static LinqToDB.DataModel.FunctionResult.operator !=(LinqToDB.DataModel.FunctionResult? left, LinqToDB.DataModel.FunctionResult? right) -> bool
static LinqToDB.DataModel.FunctionResult.operator ==(LinqToDB.DataModel.FunctionResult? left, LinqToDB.DataModel.FunctionResult? right) -> bool
static LinqToDB.Metadata.MetadataBuilders.GetMetadataBuilder(LinqToDB.CodeModel.ILanguageProvider! languageProvider, LinqToDB.Metadata.MetadataSource metadataSource) -> LinqToDB.Metadata.IMetadataBuilder?
static LinqToDB.Naming.NameConverterBase.NameParts.operator !=(LinqToDB.Naming.NameConverterBase.NameParts? left, LinqToDB.Naming.NameConverterBase.NameParts? right) -> bool
static LinqToDB.Naming.NameConverterBase.NameParts.operator ==(LinqToDB.Naming.NameConverterBase.NameParts? left, LinqToDB.Naming.NameConverterBase.NameParts? right) -> bool
static LinqToDB.Naming.NameConverterBase.NormalizeName(string! name) -> LinqToDB.Naming.NameConverterBase.NameParts!
static LinqToDB.Scaffold.Internal.NameGenerationServices.GenerateAssociationName(System.Func<LinqToDB.SqlQuery.SqlObjectName, string!, bool>! isPrimaryKeyColumn, LinqToDB.SqlQuery.SqlObjectName thisTable, LinqToDB.SqlQuery.SqlObjectName otherTable, bool isBackReference, string![]! thisColumns, string! fkName, LinqToDB.Naming.NameTransformation transformationSettings, System.Collections.Generic.ISet<string!>! defaultSchemas) -> string!
static LinqToDB.Scaffold.ScaffoldOptions.Default() -> LinqToDB.Scaffold.ScaffoldOptions!
static LinqToDB.Scaffold.ScaffoldOptions.T4() -> LinqToDB.Scaffold.ScaffoldOptions!
static LinqToDB.Scaffold.SourceCodeFile.operator !=(LinqToDB.Scaffold.SourceCodeFile? left, LinqToDB.Scaffold.SourceCodeFile? right) -> bool
static LinqToDB.Scaffold.SourceCodeFile.operator ==(LinqToDB.Scaffold.SourceCodeFile? left, LinqToDB.Scaffold.SourceCodeFile? right) -> bool
static LinqToDB.Schema.AggregateFunction.operator !=(LinqToDB.Schema.AggregateFunction? left, LinqToDB.Schema.AggregateFunction? right) -> bool
static LinqToDB.Schema.AggregateFunction.operator ==(LinqToDB.Schema.AggregateFunction? left, LinqToDB.Schema.AggregateFunction? right) -> bool
static LinqToDB.Schema.CallableObject.operator !=(LinqToDB.Schema.CallableObject? left, LinqToDB.Schema.CallableObject? right) -> bool
static LinqToDB.Schema.CallableObject.operator ==(LinqToDB.Schema.CallableObject? left, LinqToDB.Schema.CallableObject? right) -> bool
static LinqToDB.Schema.Column.operator !=(LinqToDB.Schema.Column? left, LinqToDB.Schema.Column? right) -> bool
static LinqToDB.Schema.Column.operator ==(LinqToDB.Schema.Column? left, LinqToDB.Schema.Column? right) -> bool
static LinqToDB.Schema.DatabaseType.operator !=(LinqToDB.Schema.DatabaseType? left, LinqToDB.Schema.DatabaseType? right) -> bool
static LinqToDB.Schema.DatabaseType.operator ==(LinqToDB.Schema.DatabaseType? left, LinqToDB.Schema.DatabaseType? right) -> bool
static LinqToDB.Schema.ForeignKey.operator !=(LinqToDB.Schema.ForeignKey? left, LinqToDB.Schema.ForeignKey? right) -> bool
static LinqToDB.Schema.ForeignKey.operator ==(LinqToDB.Schema.ForeignKey? left, LinqToDB.Schema.ForeignKey? right) -> bool
static LinqToDB.Schema.ForeignKeyColumnMapping.operator !=(LinqToDB.Schema.ForeignKeyColumnMapping? left, LinqToDB.Schema.ForeignKeyColumnMapping? right) -> bool
static LinqToDB.Schema.ForeignKeyColumnMapping.operator ==(LinqToDB.Schema.ForeignKeyColumnMapping? left, LinqToDB.Schema.ForeignKeyColumnMapping? right) -> bool
static LinqToDB.Schema.Identity.operator !=(LinqToDB.Schema.Identity? left, LinqToDB.Schema.Identity? right) -> bool
static LinqToDB.Schema.Identity.operator ==(LinqToDB.Schema.Identity? left, LinqToDB.Schema.Identity? right) -> bool
static LinqToDB.Schema.Parameter.operator !=(LinqToDB.Schema.Parameter? left, LinqToDB.Schema.Parameter? right) -> bool
static LinqToDB.Schema.Parameter.operator ==(LinqToDB.Schema.Parameter? left, LinqToDB.Schema.Parameter? right) -> bool
static LinqToDB.Schema.PrimaryKey.operator !=(LinqToDB.Schema.PrimaryKey? left, LinqToDB.Schema.PrimaryKey? right) -> bool
static LinqToDB.Schema.PrimaryKey.operator ==(LinqToDB.Schema.PrimaryKey? left, LinqToDB.Schema.PrimaryKey? right) -> bool
static LinqToDB.Schema.Result.operator !=(LinqToDB.Schema.Result? left, LinqToDB.Schema.Result? right) -> bool
static LinqToDB.Schema.Result.operator ==(LinqToDB.Schema.Result? left, LinqToDB.Schema.Result? right) -> bool
static LinqToDB.Schema.ResultColumn.operator !=(LinqToDB.Schema.ResultColumn? left, LinqToDB.Schema.ResultColumn? right) -> bool
static LinqToDB.Schema.ResultColumn.operator ==(LinqToDB.Schema.ResultColumn? left, LinqToDB.Schema.ResultColumn? right) -> bool
static LinqToDB.Schema.ScalarFunction.operator !=(LinqToDB.Schema.ScalarFunction? left, LinqToDB.Schema.ScalarFunction? right) -> bool
static LinqToDB.Schema.ScalarFunction.operator ==(LinqToDB.Schema.ScalarFunction? left, LinqToDB.Schema.ScalarFunction? right) -> bool
static LinqToDB.Schema.ScalarResult.operator !=(LinqToDB.Schema.ScalarResult? left, LinqToDB.Schema.ScalarResult? right) -> bool
static LinqToDB.Schema.ScalarResult.operator ==(LinqToDB.Schema.ScalarResult? left, LinqToDB.Schema.ScalarResult? right) -> bool
static LinqToDB.Schema.Sequence.operator !=(LinqToDB.Schema.Sequence? left, LinqToDB.Schema.Sequence? right) -> bool
static LinqToDB.Schema.Sequence.operator ==(LinqToDB.Schema.Sequence? left, LinqToDB.Schema.Sequence? right) -> bool
static LinqToDB.Schema.StoredProcedure.operator !=(LinqToDB.Schema.StoredProcedure? left, LinqToDB.Schema.StoredProcedure? right) -> bool
static LinqToDB.Schema.StoredProcedure.operator ==(LinqToDB.Schema.StoredProcedure? left, LinqToDB.Schema.StoredProcedure? right) -> bool
static LinqToDB.Schema.Table.operator !=(LinqToDB.Schema.Table? left, LinqToDB.Schema.Table? right) -> bool
static LinqToDB.Schema.Table.operator ==(LinqToDB.Schema.Table? left, LinqToDB.Schema.Table? right) -> bool
static LinqToDB.Schema.TableFunction.operator !=(LinqToDB.Schema.TableFunction? left, LinqToDB.Schema.TableFunction? right) -> bool
static LinqToDB.Schema.TableFunction.operator ==(LinqToDB.Schema.TableFunction? left, LinqToDB.Schema.TableFunction? right) -> bool
static LinqToDB.Schema.TableLikeObject.operator !=(LinqToDB.Schema.TableLikeObject? left, LinqToDB.Schema.TableLikeObject? right) -> bool
static LinqToDB.Schema.TableLikeObject.operator ==(LinqToDB.Schema.TableLikeObject? left, LinqToDB.Schema.TableLikeObject? right) -> bool
static LinqToDB.Schema.TupleResult.operator !=(LinqToDB.Schema.TupleResult? left, LinqToDB.Schema.TupleResult? right) -> bool
static LinqToDB.Schema.TupleResult.operator ==(LinqToDB.Schema.TupleResult? left, LinqToDB.Schema.TupleResult? right) -> bool
static LinqToDB.Schema.TypeMapping.operator !=(LinqToDB.Schema.TypeMapping? left, LinqToDB.Schema.TypeMapping? right) -> bool
static LinqToDB.Schema.TypeMapping.operator ==(LinqToDB.Schema.TypeMapping? left, LinqToDB.Schema.TypeMapping? right) -> bool
static LinqToDB.Schema.View.operator !=(LinqToDB.Schema.View? left, LinqToDB.Schema.View? right) -> bool
static LinqToDB.Schema.View.operator ==(LinqToDB.Schema.View? left, LinqToDB.Schema.View? right) -> bool
static LinqToDB.Schema.VoidResult.operator !=(LinqToDB.Schema.VoidResult? left, LinqToDB.Schema.VoidResult? right) -> bool
static LinqToDB.Schema.VoidResult.operator ==(LinqToDB.Schema.VoidResult? left, LinqToDB.Schema.VoidResult? right) -> bool
static LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseDataContextClass.get -> string?
static LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseDataContextClass.set -> void
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertColumnMemberType -> System.Func<LinqToDB.SchemaProvider.ColumnSchema!, string!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertProcedureColumnMemberType -> System.Func<LinqToDB.SchemaProvider.ProcedureSchema!, LinqToDB.SchemaProvider.ColumnSchema!, string!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertTableColumnMemberType -> System.Func<LinqToDB.SchemaProvider.TableSchema!, LinqToDB.SchemaProvider.ColumnSchema!, string!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.EnableNullableReferenceTypes.get -> bool
static LinqToDB.Tools.ModelGeneration.ModelGenerator.EnableNullableReferenceTypes.set -> void
static LinqToDB.Tools.ModelGeneration.ModelGenerator.EnforceModelNullability.get -> bool
static LinqToDB.Tools.ModelGeneration.ModelGenerator.EnforceModelNullability.set -> void
static LinqToDB.Tools.ModelGeneration.ModelGenerator.GetDataOptionsMethod.get -> string?
static LinqToDB.Tools.ModelGeneration.ModelGenerator.GetDataOptionsMethod.set -> void
static LinqToDB.Tools.ModelGeneration.ModelGenerator.IsValueType -> System.Func<string!, bool>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.LoadDatabaseSchema -> System.Func<LinqToDB.Data.DataConnection!, LinqToDB.SchemaProvider.GetSchemaOptions!, LinqToDB.SchemaProvider.DatabaseSchema!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ToPlural -> System.Func<string!, string!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ToSingular -> System.Func<string!, string!>!
static LinqToDB.Tools.ModelGeneration.ModelGenerator.ToStringLiteral(string? value) -> string!
static LinqToDB.Tools.ModelGeneration.ModelType.Array(LinqToDB.Tools.ModelGeneration.ModelType! elementType, bool referenceNullable) -> LinqToDB.Tools.ModelGeneration.ModelType!
static LinqToDB.Tools.ModelGeneration.ModelType.Create(System.Type! type, bool referenceNullable) -> LinqToDB.Tools.ModelGeneration.ModelType!
static LinqToDB.Tools.ModelGeneration.ModelType.Create<TType>(bool referenceNullable) -> LinqToDB.Tools.ModelGeneration.ModelType!
static LinqToDB.Tools.ModelGeneration.NameChangedArgs.operator !=(LinqToDB.Tools.ModelGeneration.NameChangedArgs? left, LinqToDB.Tools.ModelGeneration.NameChangedArgs? right) -> bool
static LinqToDB.Tools.ModelGeneration.NameChangedArgs.operator ==(LinqToDB.Tools.ModelGeneration.NameChangedArgs? left, LinqToDB.Tools.ModelGeneration.NameChangedArgs? right) -> bool
static readonly LinqToDB.CodeModel.CodeEmptyLine.Instance -> LinqToDB.CodeModel.CodeEmptyLine!
static readonly LinqToDB.Naming.HumanizerNameConverter.Instance -> LinqToDB.Naming.INameConversionProvider!
static readonly LinqToDB.Schema.DatabaseOptions.Default -> LinqToDB.Schema.DatabaseOptions!
static readonly LinqToDB.Schema.SqlServerDatabaseOptions.Instance -> LinqToDB.Schema.SqlServerDatabaseOptions!
virtual LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.<Clone>$() -> LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter!
virtual LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.EqualityContract.get -> System.Type!
virtual LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.Equals(LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter? other) -> bool
virtual LinqToDB.CodeModel.CodeAttribute.CodeNamedParameter.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.CodeModel.CodeXmlComment.ParameterComment.<Clone>$() -> LinqToDB.CodeModel.CodeXmlComment.ParameterComment!
virtual LinqToDB.CodeModel.CodeXmlComment.ParameterComment.EqualityContract.get -> System.Type!
virtual LinqToDB.CodeModel.CodeXmlComment.ParameterComment.Equals(LinqToDB.CodeModel.CodeXmlComment.ParameterComment? other) -> bool
virtual LinqToDB.CodeModel.CodeXmlComment.ParameterComment.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.ClassGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAsOperator! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentExpression! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAssignmentStatement! statement) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAttribute! attribute) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitExpression! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeAwaitStatement! statement) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeBinary! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallExpression! call) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeCallStatement! call) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeClass! class) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeComment! comment) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstant! constant) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeConstructor! ctor) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeDefault! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeEmptyLine! line) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeField! field) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeFile! file) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIdentifier! identifier) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeImport! import) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeIndex! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeLambda! method) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMember! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeMethod! method) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNameOf! nameOf) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNamespace! namespace) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNew! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeNewArray! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeParameter! parameter) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodePragma! pragma) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeProperty! property) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReference! reference) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeRegion! region) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeReturn! statement) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeSuppressNull! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTernary! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThis! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowExpression! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeThrowStatement! statement) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeCast! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeInitializer! cctor) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeReference! type) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeTypeToken! type) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeUnary! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeVariable! expression) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.CodeXmlComment! doc) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.ConstructorGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.FieldGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.MethodGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.PragmaGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.PropertyGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.ConvertCodeModelVisitor.Visit(LinqToDB.CodeModel.RegionGroup! group) -> LinqToDB.CodeModel.ICodeElement!
virtual LinqToDB.CodeModel.MemberGroup<TMember>.IsEmpty.get -> bool
virtual LinqToDB.Naming.NameConverterBase.NameParts.<Clone>$() -> LinqToDB.Naming.NameConverterBase.NameParts!
virtual LinqToDB.Naming.NameConverterBase.NameParts.EqualityContract.get -> System.Type!
virtual LinqToDB.Naming.NameConverterBase.NameParts.Equals(LinqToDB.Naming.NameConverterBase.NameParts? other) -> bool
virtual LinqToDB.Naming.NameConverterBase.NameParts.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Scaffold.ScaffoldInterceptors.AfterSourceCodeGenerated(LinqToDB.Scaffold.FinalDataModel! model) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetAggregateFunctions(System.Collections.Generic.IEnumerable<LinqToDB.Schema.AggregateFunction!>! functions) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.AggregateFunction!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetForeignKeys(System.Collections.Generic.IEnumerable<LinqToDB.Schema.ForeignKey!>! keys) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.ForeignKey!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetProcedures(System.Collections.Generic.IEnumerable<LinqToDB.Schema.StoredProcedure!>! procedures) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.StoredProcedure!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetScalarFunctions(System.Collections.Generic.IEnumerable<LinqToDB.Schema.ScalarFunction!>! functions) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.ScalarFunction!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetTableFunctions(System.Collections.Generic.IEnumerable<LinqToDB.Schema.TableFunction!>! functions) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.TableFunction!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetTables(System.Collections.Generic.IEnumerable<LinqToDB.Schema.Table!>! tables) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.Table!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetTypeMapping(LinqToDB.Schema.DatabaseType! databaseType, LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.Schema.TypeMapping? defaultMapping) -> LinqToDB.Schema.TypeMapping?
virtual LinqToDB.Scaffold.ScaffoldInterceptors.GetViews(System.Collections.Generic.IEnumerable<LinqToDB.Schema.View!>! views) -> System.Collections.Generic.IEnumerable<LinqToDB.Schema.View!>!
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessAggregateFunction(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.AggregateFunctionModel! functionModel) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessAssociation(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.AssociationModel! associationModel) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessEntity(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.EntityModel! entityModel) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessScalarFunction(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.ScalarFunctionModel! functionModel) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessStoredProcedure(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.StoredProcedureModel! procedureModel) -> void
virtual LinqToDB.Scaffold.ScaffoldInterceptors.PreprocessTableFunction(LinqToDB.CodeModel.ITypeParser! typeParser, LinqToDB.DataModel.TableFunctionModel! functionModel) -> void
virtual LinqToDB.Scaffold.SourceCodeFile.<Clone>$() -> LinqToDB.Scaffold.SourceCodeFile!
virtual LinqToDB.Scaffold.SourceCodeFile.EqualityContract.get -> System.Type!
virtual LinqToDB.Scaffold.SourceCodeFile.Equals(LinqToDB.Scaffold.SourceCodeFile? other) -> bool
virtual LinqToDB.Scaffold.SourceCodeFile.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Schema.CallableObject.EqualityContract.get -> System.Type!
virtual LinqToDB.Schema.CallableObject.Equals(LinqToDB.Schema.CallableObject? other) -> bool
virtual LinqToDB.Schema.CallableObject.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Schema.DatabaseOptions.ScalarFunctionSchemaRequired.get -> bool
virtual LinqToDB.Schema.Result.EqualityContract.get -> System.Type!
virtual LinqToDB.Schema.Result.Equals(LinqToDB.Schema.Result? other) -> bool
virtual LinqToDB.Schema.Result.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Schema.TableLikeObject.EqualityContract.get -> System.Type!
virtual LinqToDB.Schema.TableLikeObject.Equals(LinqToDB.Schema.TableLikeObject? other) -> bool
virtual LinqToDB.Schema.TableLikeObject.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Tools.ModelGeneration.Attribute<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
virtual LinqToDB.Tools.ModelGeneration.MemberBase.BeginConditional(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
virtual LinqToDB.Tools.ModelGeneration.MemberBase.CalcModifierLen() -> int
virtual LinqToDB.Tools.ModelGeneration.MemberBase.CalcParamLen() -> int
virtual LinqToDB.Tools.ModelGeneration.MemberBase.EndConditional(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt, bool isCompact) -> void
virtual LinqToDB.Tools.ModelGeneration.MemberBase.GetNodes() -> System.Collections.Generic.IEnumerable<LinqToDB.Tools.ModelGeneration.ITree!>!
virtual LinqToDB.Tools.ModelGeneration.MemberBase.SetTree() -> void
virtual LinqToDB.Tools.ModelGeneration.ModelSource<TModel, TNamespace>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
virtual LinqToDB.Tools.ModelGeneration.NameChangedArgs.<Clone>$() -> LinqToDB.Tools.ModelGeneration.NameChangedArgs!
virtual LinqToDB.Tools.ModelGeneration.NameChangedArgs.EqualityContract.get -> System.Type!
virtual LinqToDB.Tools.ModelGeneration.NameChangedArgs.Equals(LinqToDB.Tools.ModelGeneration.NameChangedArgs? other) -> bool
virtual LinqToDB.Tools.ModelGeneration.NameChangedArgs.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Tools.ModelGeneration.Namespace<T>.Render(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
virtual LinqToDB.Tools.ModelGeneration.Property<T>.EnforceNotNullable.get -> bool
virtual LinqToDB.Tools.ModelGeneration.Property<T>.EnforceNotNullable.set -> void
virtual LinqToDB.Tools.ModelGeneration.TypeBase.BeginConditional(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
virtual LinqToDB.Tools.ModelGeneration.TypeBase.ClassKeyword.get -> string!
virtual LinqToDB.Tools.ModelGeneration.TypeBase.ClassKeyword.set -> void
virtual LinqToDB.Tools.ModelGeneration.TypeBase.EndConditional(LinqToDB.Tools.ModelGeneration.ModelGenerator! tt) -> void
virtual LinqToDB.Tools.ModelGeneration.TypeBase.OnNameChangedHandler.Invoke(object! sender, LinqToDB.Tools.ModelGeneration.NameChangedArgs! e) -> void
