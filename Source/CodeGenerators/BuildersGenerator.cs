using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;

using Microsoft.CodeAnalysis;

namespace CodeGenerators
{
	/// <summary></summary>
	[Generator]
	public partial class BuildersGenerator : IIncrementalGenerator
	{
		/// <summary></summary>
		public void Initialize(IncrementalGeneratorInitializationContext context)
		{
			var buildsAnyNodes = context.SyntaxProvider
				.ForAttributeWithMetadataName(
					"LinqToDB.Linq.Builder.BuildsAnyAttribute",
					(_, _) => true,
					TransformBuildsAny
				)
				.Collect();

			var buildsExpressionNodes = context.SyntaxProvider
				.ForAttributeWithMetadataName(
					"LinqToDB.Linq.Builder.BuildsExpressionAttribute",
					(_, _) => true,
					TransformBuildsExpression
				)
				.SelectMany((x, ct) => x)
				.Collect();

			var buildsMethodCallNodes = context.SyntaxProvider
				.ForAttributeWithMetadataName(
					"LinqToDB.Linq.Builder.BuildsMethodCallAttribute",
					(_, _) => true,
					TransformBuildsMethodCall
				)
				.SelectMany((x, ct) => x)
				.Collect();

			context
				.RegisterImplementationSourceOutput(
					buildsAnyNodes
						.Combine(buildsExpressionNodes)
						.Combine(buildsMethodCallNodes),
					(spc, x) => GenerateCode(
						spc,
						x.Left.Left,
						x.Left.Right,
						x.Right
					)
				);
		}

		static BuilderNode TransformBuildsAny(
			GeneratorAttributeSyntaxContext context,
			CancellationToken token)
		{
			token.ThrowIfCancellationRequested();

			var symbol = (INamedTypeSymbol)context.TargetSymbol;
			var className = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			return new(className, "", BuilderKind.Any, "CanBuild");
		}

		static EquatableReadOnlyList<BuilderNode> TransformBuildsExpression(
			GeneratorAttributeSyntaxContext context,
			CancellationToken token)
		{
			token.ThrowIfCancellationRequested();

			var symbol = (INamedTypeSymbol)context.TargetSymbol;
			var className = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			var nodes = new List<BuilderNode>();

			foreach (var attribute in context.Attributes)
			{
				token.ThrowIfCancellationRequested();

				var check = attribute.NamedArguments
					.FirstOrDefault(a => a.Key == "CanBuildName")
					.Value.Value?.ToString()
					?? "CanBuild";

				foreach (var argument in attribute.ConstructorArguments)
				{
					nodes.Add(new(
						className,
						((ExpressionType)(int)argument.Value!).ToString(),
						BuilderKind.Expr,
						check
					));
				}
			}

			return nodes.ToEquatableReadOnlyList();
		}

		static EquatableReadOnlyList<BuilderNode> TransformBuildsMethodCall(
			GeneratorAttributeSyntaxContext context,
			CancellationToken token)
		{
			token.ThrowIfCancellationRequested();
	
			var symbol = (INamedTypeSymbol)context.TargetSymbol;
			var className = symbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
			var nodes = new List<BuilderNode>();

			foreach (var attribute in context.Attributes)
			{
				var check = attribute.NamedArguments
					.FirstOrDefault(a => a.Key == "CanBuildName")
					.Value.Value?.ToString()
					?? "CanBuildMethod";

				token.ThrowIfCancellationRequested();

				foreach (var argument in attribute.ConstructorArguments)
				{
					nodes.Add(new(
						className,
						argument.Value!.ToString(),
						BuilderKind.Call,
						check
					));
				}
			}

			return nodes.ToEquatableReadOnlyList();
		}

		void GenerateCode(
			SourceProductionContext context,
			ImmutableArray<BuilderNode> anyNodes,
			ImmutableArray<BuilderNode> expressionNodes,
			ImmutableArray<BuilderNode> methodCallNodes)
		{
			var source =
				$$"""
				// <auto-generated />
				#nullable enable

				using LinqToDB.Expressions;
				using System.Diagnostics.CodeAnalysis;
				using System.Linq.Expressions;

				namespace LinqToDB.Linq.Builder;
			
				partial class ExpressionBuilder
				{
					private static class Builder<T> where T: ISequenceBuilder, new()
					{
						public static readonly T Instance = new();
					}

					private static partial ISequenceBuilder? FindBuilderImpl(BuildInfo info, ExpressionBuilder builder)
					{
						var expr = info.Expression = info.Expression.Unwrap();
						switch (expr.NodeType)
						{
				{{RenderExpressionNodes(expressionNodes)}}
							case ExpressionType.Call:
							{
								var call = (MethodCallExpression)expr;
								switch (call.Method.Name)
								{
				{{RenderMethodCallNodes(methodCallNodes)}}
								}

				{{RenderExpressionCallNodes(expressionNodes)}}
								break;
							}
						}

				{{RenderAnyNodes(anyNodes)}}
						return null;
					}
				}
				""";

			context.AddSource("ExpressionBuilder.g.cs", source);
		}

		static string RenderExpressionNodes(ImmutableArray<BuilderNode> expressionNodes) =>
			string.Join(
				"",
				expressionNodes
					.Where(n => n.Key != "Call")
					.GroupBy(n => n.Key)
					.Select(g =>
						$$"""
									case ExpressionType.{{g.Key}}:

						""" +
						string.Join(
							"",
							g.Select(RenderExpressionNode)
						) +
						"""
										break;


						"""
					)
			);

		static string RenderExpressionNode(BuilderNode n) =>
			$$"""
							if ({{n.Builder}}.{{n.Check}}(expr, info, builder))
								return Builder<{{n.Builder}}>.Instance;


			""";

		static string RenderMethodCallNodes(ImmutableArray<BuilderNode> expressionNodes) =>
			string.Join(
				"",
				expressionNodes
					.GroupBy(n => n.Key)
					.OrderBy(n => n.Key)
					.Select(g =>
						$$"""
											case "{{g.Key}}":

						""" +
						string.Join(
							"",
							g.Select(RenderCallNode)
						) +
						"""
												break;


						"""
					)
			);

		static string RenderCallNode(BuilderNode n) =>
			$$"""
									if ({{n.Builder}}.{{n.Check}}(call, info, builder))
										return Builder<{{n.Builder}}>.Instance;


			""";

		static string RenderExpressionCallNodes(ImmutableArray<BuilderNode> expressionNodes) =>
			string.Join(
				"",
				expressionNodes
					.Where(n => n.Key == "Call")
					.Select(RenderExpressionNode)
			);

		static string RenderAnyNodes(ImmutableArray<BuilderNode> anyNodes) =>
			string.Join(
				"",
				anyNodes.Select(RenderAnyNode)
			);

		static string RenderAnyNode(BuilderNode n) =>
			$$"""
					if ({{n.Builder}}.{{n.Check}}(info, builder))
						return Builder<{{n.Builder}}>.Instance;


			""";
	}
}
