<#@ include file="T4Model.ttinclude"   once="true" #>
<#@ include file="DataModel.ttinclude" once="true" #>
<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			beforeGenerateModel();
			EquatableImpl();
		};
	}
#><#+

static bool DefaultEquatable = true;

string EqualityComparerFieldName = "_comparer";

Func<Class, Property, bool> EqualityPropertiesFilter = EqualityPropertiesFilterDefault;

void EquatableImpl()
{
	foreach (Class cl in GetTreeNodes(Model).OfType<Class>().Where(c => c.IsEquatable && !c.IsStatic))
	{
		var props = GetTreeNodes(cl).OfType<Property>().Where(p => EqualityPropertiesFilter(cl, p)).ToList();
		if (props.Count > 0)
		{
			var className = cl.Name;

			if (!cl.Interfaces.Contains(string.Format("IEquatable<{0}>", className)))
			{
				cl.Interfaces.Add(string.Format("IEquatable<{0}>", className));

				if (!Model.Usings.Contains("LinqToDB.Tools.Comparers"))
					Model.Usings.Add("LinqToDB.Tools.Comparers");

				var comparerProperties = string.Join(", ", props.Select(p => string.Format("c => c.{0}", p.Name)));

				cl.Members.Add(new MemberGroup
				{
					Region  = "IEquatable support",
					Members =
					{
						new MemberGroup
						{
							IsCompact = false,
							Members   =
							{
								new Field(() => string.Format("IEqualityComparer<{0}>", className), EqualityComparerFieldName)
								{
									InitValue      = string.Format("ComparerBuilder.GetEqualityComparer<{0}>({1})", className, comparerProperties),
									AccessModifier = AccessModifier.Private,
									IsStatic       = true,
									IsReadonly     = true
								},

								new Method(() => "bool", "Equals",
									new Func<string>[]
									{
										() => string.Format("{0} other", new ModelType(className, true, true).ToTypeName())
									},
									() => new[]
									{
										string.Format("return {0}.Equals(this, other{1});", EqualityComparerFieldName, EnableNullableReferenceTypes ? "!" : "")
									}),

								new Method(() => "int", "GetHashCode", null,
									() => new[]
									{
										string.Format("return {0}.GetHashCode(this);", EqualityComparerFieldName)
									})
									{
										IsOverride = true
									},

								new Method(() => "bool", "Equals",
									new Func<string>[]
									{
										() => new ModelType("object", true, true).ToTypeName() + " obj",
									},
									() => new[]
									{
										string.Format("if (!(obj is {0} other))", className), "\treturn false;", string.Empty,
										"// use IEquatable implementation",
										"return Equals(other);"
									})
									{
										IsOverride = true
									}
							}
						}
					}
				});
			}
		}

		cl.SetTree();
	}
}

partial class Class
{
	public bool IsEquatable = DefaultEquatable;
}

static bool EqualityPropertiesFilterDefault(Class cl, Property prop)
{
	return cl is Table && prop is Column && ((Column)prop).IsPrimaryKey;
}
#>
