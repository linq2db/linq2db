<#@ include file="T4Model.ttinclude" once="true" #>
<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			EditableObjectImpl();
			beforeGenerateModel();
		};

		SetPropertyValueAction += (obj,prop,val) =>
		{
			if (prop == "IsEditable")
				obj.IsEditable = (bool)val;
		};
	}
#>
<#+
void EditableObjectImpl()
{
	foreach (Property prop in GetTreeNodes(Model).OfType<Property>().Where(p => p.IsEditable).ToList())
	{
		SetPropertyValue(prop, "IsNotifying", true);

		List<IClassMember> parentMembers;

		if (prop.Parent is Class)
		{
		    parentMembers = ((Class)prop.Parent).Members;
		}
		else
		{
			var parent = (MemberGroup)prop.Parent;
			parentMembers = parent.Members;

			parent.IsCompact = false;
		}

		var name = prop.Name.Trim();
		var type = prop.BuildType().Trim();

		var gr = new MemberGroup
		{
			Region          = name + " : " + type,
			Members         = { prop },
			IsPropertyGroup = true,
		};

		var index = parentMembers.IndexOf(prop);

		parentMembers.RemoveAt(index);
		parentMembers.Insert  (index, gr);

		var originalField = new Field(() => type, "_original" + name)
		{
			AccessModifier       = AccessModifier.Private,
			InsertBlankLineAfter = false,
		};

		gr.Members.Insert(0, originalField);

		var currentField = new Field(() => type, " _current" + name)
		{
			AccessModifier       = AccessModifier.Private,
			InsertBlankLineAfter = false,
		};

		if (prop.InitValue != null)
		{
			originalField.InitValue = prop.InitValue;
			currentField.InitValue  = prop.InitValue;
		}

		gr.Members.Insert(0, currentField);

		prop.Name        = "         " + name;
		prop.TypeBuilder = () => " " + type;
		prop.IsAuto      = false;

		if (prop.HasGetter) prop.GetBodyBuilders.Add(() => new [] { "return " + currentField.Name.Trim() + ";" });
		if (prop.HasSetter) prop.SetBodyBuilders.Add(() => new [] { currentField.Name.Trim() + " = value;" });

		var ac = new Method  (() => "void", "Accept" + name + "Changes", null, () => new[] { string.Format("_original{0} = _current{0};", name) });
		var rc = new Method  (() => "void", "Reject" + name + "Changes", null, () => new[] { string.Format("{0} = _original{0};", name) });
		var id = new Property(() => "bool", "Is" + name + "Dirty")
			.InitGetter(() => new [] { string.Format(prop.IsDirtyText, "_current" + name, "_original" + name) });

		gr.Members.Add(new MemberGroup
		{
			Region  = "EditableObject support",
			Members = { ac, rc, id },
		});

		prop.Parent.SetTree();
	}

	foreach (Class cl in GetTreeNodes(Model).OfType<Class>())
	{
		var props = GetTreeNodes(cl).OfType<Property>().Where(p => p.IsEditable).ToList();

		if (props.Count > 0)
		{
			if (props.Any(p => p.IsEditable))
			{
				var ctor = GetTreeNodes(cl)
					.OfType<Method>()
					.FirstOrDefault(m => m.Name == cl.Name && m.ParameterBuilders.Count == 0);

				if (ctor == null)
				{
					ctor = new Method(null, cl.Name);
					cl.Members.Insert(0, ctor);
				}

				ctor.BodyBuilders.Add(() => new [] { "AcceptChanges();" });
			}

			var maxLen = props.Max(p => p.Name.Trim().Length);

			var ac = new Method(() => "void", "AcceptChanges") { IsVirtual = true };
			var rc = new Method(() => "void", "RejectChanges") { IsVirtual = true };
			var id = new Property(() => "bool", "IsDirty") { IsAuto = false, HasSetter = false, IsVirtual = true };

			ac.BodyBuilders.Add(() => new []
			{
				"BeforeAcceptChanges();",
				""
			});
			rc.BodyBuilders.Add(() => new []
			{
				"BeforeRejectChanges();",
				""
			});
			id.GetBodyBuilders.Add(() => new [] { "return" });

			foreach (var p in props)
			{
				var name = p.Name.Trim();

				ac.BodyBuilders.Add(() => new [] { string.Format("Accept{0}Changes();", name) });
				rc.BodyBuilders.Add(() => new [] { string.Format("Reject{0}Changes();", name) });
				id.GetBodyBuilders.Add(() => new [] { string.Format("\tIs{0}Dirty{1} ||", name, LenDiff(maxLen, name)) });
			}

			ac.BodyBuilders.Add(() => new[]
			{
				"",
				"AfterAcceptChanges();"
			});
			rc.BodyBuilders.Add(() => new[]
			{
				"",
				"AfterRejectChanges();"
			});
			var getBody = id.BuildGetBody().ToArray();
			getBody[getBody.Length - 1] = getBody[getBody.Length - 1].Trim(' ' , '|') + ";";
			id.GetBodyBuilders.Clear();
			id.GetBodyBuilders.Add(() => getBody);

			cl.Members.Add(new MemberGroup
			{
				Region  = "EditableObject support",
				Members =
				{
					new MemberGroup
					{
						IsCompact = true,
						Members   =
						{
							new Method(() => "void", "BeforeAcceptChanges") { AccessModifier = AccessModifier.Partial },
							new Method(() => "void", "AfterAcceptChanges")  { AccessModifier = AccessModifier.Partial },
						}
					},
					ac,
					new MemberGroup
					{
						IsCompact = true,
						Members   =
						{
							new Method(() => "void", "BeforeRejectChanges") { AccessModifier = AccessModifier.Partial },
							new Method(() => "void", "AfterRejectChanges")  { AccessModifier = AccessModifier.Partial },
						}
					},
					rc,
					id
				},
			});

			if (!cl.Interfaces.Contains("IEditableObject"))
			{
				if (!Model.Usings.Contains("System.ComponentModel"))
					Model.Usings.Add("System.ComponentModel");

				cl.Interfaces.Add("IEditableObject");

				cl.Members.Add(new MemberGroup
				{
					Region  = "IEditableObject support",
					Members =
					{
						new MemberGroup
						{
							IsCompact = true,
							Members   =
							{
								new Field   (() => "bool", "_isEditing") { AccessModifier = AccessModifier.Private },
								new Property(() => "bool", " IsEditing").InitGetter(() => new [] { "_isEditing" }),
							}
						},
						new MemberGroup
						{
							IsCompact = true,
							Members   =
							{
								new Method(() => "void", "BeginEdit",  null, () => new[] { "AcceptChanges();", "_isEditing = true;"   }) { IsVirtual = true },
								new Method(() => "void", "CancelEdit", null, () => new[] { "_isEditing = false;", "RejectChanges();", }) { IsVirtual = true },
								new Method(() => "void", "EndEdit",    null, () => new[] { "_isEditing = false;", "AcceptChanges();", }) { IsVirtual = true },
							}
						},
					}
				});
			}
		}

		cl.SetTree();
	}
}

partial class Property
{
	public bool   IsEditable;
	public string IsDirtyText = "{0} != {1}";
}

public class EditableProperty : Property
{
	public EditableProperty()
	{
		IsEditable = true;
	}

	public EditableProperty(ModelType type, string name)
		: base(type.ToTypeName, name)
	{
		IsEditable = true;
	}

	public EditableProperty(string type, string name)
		: base(() => type, name)
	{
		IsEditable = true;
	}
}
#>
