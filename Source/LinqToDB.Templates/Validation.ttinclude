<#@ include file="NotifyPropertyChanged.ttinclude" once="true" #>
<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			beforeGenerateModel();
			ValidationImpl();
		};
	}
#>
<#+
void ValidationImpl()
{
	foreach (Class cl in GetTreeNodes(Model).OfType<Class>())
	{
		var validationGroup = new MemberGroup
		{
			Region = "Validation",
		};

		var props = GetTreeNodes(cl).OfType<Property>().Where(p => p.CustomValidation).ToList();

		if (props.Count > 0)
		{
			if (!Model.Usings.Contains("System.Collections.Generic"))
			{
				Model.Usings.Add("System.Collections.Generic");
			}

			var isValid      = new Method(() => "bool", "IsValid", new Func<string>[] { () => cl.Name + " obj" }) { IsStatic = true };
			var validator    = new Class("CustomValidator", isValid) { IsStatic = true, };
			var partialGroup = new MemberGroup { IsCompact = true };

			validationGroup.Members.Add(new Field(() => "int", "_isValidCounter") { Attributes = { new Attribute("field : NonSerialized") } });
			validationGroup.Members.Add(validator);
			validationGroup.Members.Add(partialGroup);

			isValid.BodyBuilders.Add(() => new []
			{
				"try",
				"{",
				"\tobj._isValidCounter++;",
				""
			});

			var ret = "\treturn ";

			for (var idx = 0; idx < props.Count; idx++)
			{
				var i = idx;
				var p = props[i];

				var name  = p.Name.Trim();
				var mname = "Validate" + name;

				var conditional = p.Conditional;
				if (conditional == null && p is NotifyingProperty && p.Parent is MemberGroup)
					conditional = ((MemberGroup)p.Parent).Conditional;

				cl.Attributes.Add(
					new Attribute("CustomValidation",
						"typeof(" + cl.Name + ".CustomValidator)",
						ToStringLiteral(mname))
						{
							IsSeparated = true
						});

				if (conditional != null)
					isValid.BodyBuilders.Add(() => new [] { "\t#if " + conditional });

				isValid.BodyBuilders.Add(() => new [] {
					"\tvar flag" + i + " = ValidationResult.Success == " + mname + "(obj, obj." + name + ");" });

				if (conditional != null)
					isValid.BodyBuilders.Add(() => new []
					{
						"\t#else",
						"\tvar flag" + i + " = true;",
						"\t#endif",
					});

				ret += (i == 0 ? "" : " && ") + "flag" + i;

				var validate = new Method(() => new ModelType("ValidationResult", true, true).ToTypeName(), mname,
					new Func<string>[] { () => cl.Name + " obj", () => p.BuildType().Trim() + " value" }) { IsStatic = true, Conditional = conditional };

				validate.BodyBuilders.Add(() => new []
				{
					"var list = new List<ValidationResult>();",
					"",
					"Validator.TryValidateProperty(",
					"\tvalue,",
					"\tnew ValidationContext(obj, null, null) { MemberName = NameOf" + name + " }, list);",
					"",
					"obj." + mname + "(value, list);",
					"",
					"if (list.Count > 0)",
					"{",
					"\tforeach (var result in list)",
					"\t\tforeach (var name in result.MemberNames)",
					"\t\t\tobj.AddError(name, result.ErrorMessage);",
					"",
					"\treturn list[0];",
					"}",
					"",
					"obj.RemoveError(NameOf" + name + ");",
					"",
					"return ValidationResult.Success;"
				});

				validator.Members.Add(validate);

				partialGroup.Members.Add(new Method(
					() => "void",
					mname,
					new Func<string>[]
					{
						() => p.BuildType().Trim() + " value",
						() => "List<ValidationResult> validationResults",
					})
					{
						AccessModifier = AccessModifier.Partial,
						Conditional    = conditional
					});
			}

			isValid.BodyBuilders.Add(() => new []
			{
				"",
				ret + ";",
				"}",
				"finally",
				"{",
				"\tobj._isValidCounter--;",
				"}"
			});
		}

		props = GetTreeNodes(cl).OfType<Property>().Where(p => p.ValidateProperty && p.HasSetter).ToList();

		if (props.Count > 0)
		{
			foreach (var p in props)
			{
				var setBody = p.BuildSetBody().ToList();
				if (setBody.Count > 0)
					setBody.Insert(0, "");

				setBody.Insert(0, "if (_validationLockCounter == 0)");
				setBody.Insert(1, "{");

				if (p.CustomValidation)
				{
					setBody.Insert(2, "\tvar validationResult = CustomValidator.Validate" + p.Name.Trim() + "(this, value);");
					setBody.Insert(3, "\tif (validationResult != ValidationResult.Success)");
					setBody.Insert(4, "\t\tthrow new ValidationException(validationResult, null, null);");
					setBody.Insert(5, "}");
				}
				else
				{
					setBody.Insert(2, "\tValidator.ValidateProperty(");
					setBody.Insert(3, "\t\tvalue,");
					setBody.Insert(4, string.Format("\t\tnew ValidationContext(this, null, null) {{ MemberName = NameOf{0} }});", p.Name.Trim()));
					setBody.Insert(5, "}");
				}

				p.SetBodyBuilders.Clear();
				p.SetBodyBuilders.Add(() => setBody.ToArray());
			}

			validationGroup.Members.Add(new Field(() => "int", "_validationLockCounter")
			{
				AccessModifier = AccessModifier.Private,
				InitValue      = "0",
				Attributes     = { new Attribute("field : NonSerialized") }
			});

			validationGroup.Members.Add(new Method (() => "void", "LockValidation",   null, () => new[] { "_validationLockCounter++;" }));
			validationGroup.Members.Add(new Method (() => "void", "UnlockValidation", null, () => new[] { "_validationLockCounter--;" }));
		}

		if (validationGroup.Members.Count > 0)
		{
			if (!Model.Usings.Contains("System.ComponentModel.DataAnnotations"))
				Model.Usings.Add("System.ComponentModel.DataAnnotations");

			cl.Members.Add(validationGroup);
			cl.SetTree();
		}
	}
}

partial class Property
{
	public bool CustomValidation;
	public bool ValidateProperty;

	public bool Validate
	{
		set
		{
			CustomValidation = value;
			ValidateProperty = value;
		}
	}
}
#>
