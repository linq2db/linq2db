<#@ include file="LinqToDB.ttinclude"                  #>
<#@ import namespace="LinqToDB.DataProvider.SqlServer" #>
<#
	{
		GenerateProcedureDbType = p => p.DataType == "Structured" && p.SchemaType != null;

		var afterGenerateLinqToDBModel = AfterGenerateLinqToDBModel;
		AfterGenerateLinqToDBModel = () =>
		{
			afterGenerateLinqToDBModel();
			DoGenerateSqlServerFreeText();
		};

		var buildColumnComparison = BuildColumnComparison;
		BuildColumnComparison = (c, padding1, padding2, last) =>
		{
			if (c.BuildType() == "SqlHierarchyId")
				return string.Format("\t(bool)(t.{0}{1} == {0}{3}){2}", c.MemberName, padding1, last ? ");" : " &&", last ? "" : padding2);
			else
				return buildColumnComparison(c, padding1, padding2, last);
		};
	}
#>
<#+
bool GenerateSqlServerFreeText = false; // Defines whether to generate extensions for Free Text search, or not

void DoGenerateSqlServerFreeText()
{
	if (!GenerateSqlServerFreeText)
		return;

	Model.Usings.Add("System.Collections.Generic");
	Model.Usings.Add("System.Linq.Expressions");
	Model.Usings.Add("System.Reflection");
	Model.Usings.Add("LinqToDB");
	Model.Usings.Add("LinqToDB.DataProvider.SqlServer");
	Model.Usings.Add("LinqToDB.Extensions");

	DataContextObject.Members.Add(
		new MemberGroup
		{
			Region  = "FreeTextTable",
			Members =
			{
				new Method(() => "IQueryable<SqlServerExtensions.FreeTextKey<TKey>>", "FreeTextTable",
					new Func<string>[] { () => "ITable<TTable> table", () => $"Expression<Func<TTable,{ModelType.Create<object>(true).ToTypeName()}>> columns", () => "string search" },
					() => new[]
					{
						"return Sql.Ext.SqlServer().FreeTextTable<TTable, TKey>(table, columns, search);"
					})
				{
					GenericArguments = { "TTable", "TKey" }
				},
			}
		}
	);
}

LinqToDB.Data.DataConnection GetSqlServerConnection(
	string connectionString,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	return LinqToDB.DataProvider.SqlServer.SqlServerTools.CreateDataConnection(connectionString, version, provider);
}

LinqToDB.Data.DataConnection GetSqlServerConnection(
	string server,
	string database,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	return GetSqlServerConnection(string.Format("Data Source={0};Database={1};Integrated Security=SSPI", server, database, version, provider));
}

LinqToDB.Data.DataConnection GetSqlServerConnection(string server, string database, string user, string password,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	return GetSqlServerConnection(string.Format("Server={0};Database={1};User Id={2};Password={3};", server, database, user, password), version, provider);
}

void LoadSqlServerMetadata(string connectionString,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	using (var dataConnection = GetSqlServerConnection(connectionString, version, provider))
		LoadMetadata(dataConnection);
}

void LoadSqlServerMetadata(string server, string database,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	using (var dataConnection = GetSqlServerConnection(server, database, version, provider))
		LoadMetadata(dataConnection);
}

void LoadSqlServerMetadata(string server, string database, string user, string password,
	SqlServerVersion  version  = SqlServerVersion.v2008,
	SqlServerProvider provider = SqlServerProvider.SystemDataSqlClient)
{
	using (var dataConnection = GetSqlServerConnection(server, database, user, password, version, provider))
		LoadMetadata(dataConnection);
}
#>
