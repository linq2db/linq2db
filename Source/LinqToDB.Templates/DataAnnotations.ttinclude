<#@ include file="T4Model.ttinclude" once="true" #>
<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			beforeGenerateModel();
			DataAnnotationsImpl();
		};
	}
#>
<#+
void DataAnnotationsImpl()
{
	foreach (Class cl in GetTreeNodes(Model).OfType<Class>())
	{
		foreach (var p in GetTreeNodes(cl).OfType<Property>())
		{
			if (p.DisplayName != null)
			{
				p.Attributes.Add(new Attribute("Display", "Name=" + LinqToDB.Tools.ModelGeneration.ModelGenerator.ToStringLiteral(p.DisplayName)) { IsSeparated = true });
			}

			if (p.IsRequired)
			{
				var attr = new Attribute("Required") { IsSeparated = true };

				if (p.IsRequiredMessage != null)
					attr.Parameters.Add(string.Format("ErrorMessage=" + LinqToDB.Tools.ModelGeneration.ModelGenerator.ToStringLiteral(p.IsRequiredMessage), p.DisplayName ?? p.Name));

				p.Attributes.Add(attr);
			}

			if (p.StringLength > 0)
			{
				var attr = new Attribute("StringLength", p.StringLength.ToString()) { IsSeparated = true };

				if (p.StringLengthMessage != null)
					attr.Parameters.Add(string.Format("ErrorMessage=" + LinqToDB.Tools.ModelGeneration.ModelGenerator.ToStringLiteral(p.StringLengthMessage), p.DisplayName ?? p.Name));

				p.Attributes.Add(attr);

//				p.Attributes.Add(
//					new Attribute("StringLength",
//						p.StringLength.ToString(),
//						"ErrorMessage=" + LinqToDB.Tools.ModelGeneration.ModelGenerator.ToStringLiteral(string.Format(
//							"The {0} must be a string with a maximum length of {1}.",
//							p.DisplayName ?? "field",
//							p.StringLength)))
//					{
//						IsSeparated = true
//					});
			}
		}
	}
}

partial class Property
{
	public string DisplayName;
	public bool   IsRequired;
	public string IsRequiredMessage;
	public int    StringLength;
	public string StringLengthMessage;
}
#>
