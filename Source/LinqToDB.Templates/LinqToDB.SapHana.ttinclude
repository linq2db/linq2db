<#@ include file="T4Model.ttinclude"  once="true"    #>
<#@ include file="LinqToDB.ttinclude" once="true"    #>
<#@ import namespace="LinqToDB.DataProvider.SapHana" #>
<#
	Model.Usings.Add("LinqToDB.DataProvider.SapHana");
	Model.Usings.Add("System.Reflection");

	GenerateProviderSpecificTable = t =>
	{
		var method = new Method(
			() => string.Format("ITable<{0}>", t.TypeName),
			t.DataContextPropertyName,
			t.Parameters.Select(p => (Func<string>)(() => p.Type.ToTypeName() + " " + p.ParameterName)),
			() => new []
			{
				String.Concat("return GetTable<",t.TypeName,">(this, (MethodInfo) MethodBase.GetCurrentMethod()", EnableNullableReferenceTypes ? "!" : "" ,","),
				String.Join(",", t.Parameters.Select(p => p.ParameterName)),
				");"
			});

		method.Attributes.Add(new Attribute("CalculationViewInputParametersExpression", new string[] {}));
		return method;
	};

	LoadProviderSpecificTable = t =>
	{
		var v = t as ViewWithParametersTableSchema;
		return new Table
			{
				Schema                  = (t.IsDefaultSchema && !IncludeDefaultSchema) || string.IsNullOrEmpty(t.SchemaName)? null : t.SchemaName,
				BaseClass               = BaseEntityClass,
				TableName               = t.TableName,
				TypeName                =
				PluralizeClassNames   ? ToPlural  (t.TypeName) :
				SingularizeClassNames ? ToSingular(t.TypeName) : t.TypeName,
				DataContextPropertyName =
				PluralizeDataContextPropertyNames   ? ToPlural  (t.TypeName) :
				SingularizeDataContextPropertyNames ? ToSingular(t.TypeName) : t.TypeName,
				IsView                  = t.IsView,
				IsProviderSpecific      = true,
				Description             = t.Description,
				Columns                 = t.Columns.ToDictionary(
				c => c.ColumnName,
				c => new Column(new ModelType(c.MemberType, !IsValueType(c.MemberType), c.IsNullable))
				{
					ColumnName      = c.ColumnName,
					ColumnType      = c.ColumnType,
					IsNullable      = c.IsNullable,
					IsIdentity      = c.IsIdentity,
					IsPrimaryKey    = c.IsPrimaryKey,
					PrimaryKeyOrder = c.PrimaryKeyOrder,
					MemberName      = CheckType(c.SystemType, c.MemberName),
					SkipOnInsert    = c.SkipOnInsert,
					SkipOnUpdate    = c.SkipOnUpdate,
					Description     = c.Description,
				}),
				Parameters = v.Parameters.Select(pr => new Parameter
				{
					SchemaName    = pr.SchemaName,
					SchemaType    = pr.SchemaType,
					IsIn          = pr.IsIn,
					IsOut         = pr.IsOut,
					IsResult      = pr.IsResult,
					Size          = pr.Size,
					ParameterName = pr.ParameterName,
					ParameterType = pr.ParameterType,
					SystemType    = pr.SystemType,
					DataType      = pr.DataType.ToString(),
					IsNullable    = pr.IsNullable
				})
				.ToList()
			};
	};
#>
<#+
	public partial class Table
	{
		public List<Parameter> Parameters;
	}

	LinqToDB.Data.DataConnection GetSapHanaConnection(string connectionString)
	{
		return LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(connectionString);
	}

	LinqToDB.Data.DataConnection GetSapHanaConnection(string server, string schema, string uid, string password)
	{
		return GetSapHanaConnection(string.Format("Server={0};Current Schema={1};UserID={2};Password={3};", server, schema, uid, password));
	}

	public void LoadSapHanaMetadata(DataConnection dataConnection)
	{
		LoadMetadata(dataConnection);
	}

	public void LoadSapHanaMetadata(string connectionString)
	{
		using (var dataConnection = GetSapHanaConnection(connectionString))
			LoadMetadata(dataConnection);
	}

	public void LoadSapHanaMetadata(string server, string schema, string uid, string password)
	{
		using (var dataConnection = GetSapHanaConnection(server, schema, uid, password))
			LoadMetadata(dataConnection);
	}
#>
