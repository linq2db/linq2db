<#@ assembly name="System.Data"                  #>
<#@ import namespace="LinqToDB.SchemaProvider"   #>
<#@ include file="T4Model.ttinclude" once="true" #>
<#

#><#+
string NamespaceName
{
	get { return Model.Namespace.Name;  }
	set { Model.Namespace.Name = value; }
}

public static string BaseDataContextClass     { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseDataContextClass;    } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.BaseDataContextClass    = value; } }
public static bool   EnforceModelNullability  { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.EnforceModelNullability; } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.EnforceModelNullability = value; } }
public static string GetDataOptionsMethod     { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.GetDataOptionsMethod;    } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.GetDataOptionsMethod    = value; } }

public string   ServerName                    { get { return ModelGenerator.ServerName;                    } set { ModelGenerator.ServerName                    = value; } }
public string   DatabaseName                  { get { return ModelGenerator.DatabaseName;                  } set { ModelGenerator.DatabaseName                  = value; } }
public string   DataContextName               { get { return ModelGenerator.DataContextName;               } set { ModelGenerator.DataContextName               = value; } }
public string   BaseEntityClass               { get { return ModelGenerator.BaseEntityClass;               } set { ModelGenerator.BaseEntityClass               = value; } }
public string   OneToManyAssociationType      { get { return ModelGenerator.OneToManyAssociationType;      } set { ModelGenerator.OneToManyAssociationType      = value; } }

public bool     GenerateModelInterface        { get { return ModelGenerator.GenerateModelInterface;        } set { ModelGenerator.GenerateModelInterface        = value; } }
public bool     GenerateModelOnly             { get { return ModelGenerator.GenerateModelOnly;             } set { ModelGenerator.GenerateModelOnly             = value; } }
public bool     GenerateDatabaseInfo          { get { return ModelGenerator.GenerateDatabaseInfo;          } set { ModelGenerator.GenerateDatabaseInfo          = value; } }
public bool     GenerateDatabaseName          { get { return ModelGenerator.GenerateDatabaseName;          } set { ModelGenerator.GenerateDatabaseName          = value; } }
public bool     GenerateDatabaseNameFromTable { get { return ModelGenerator.GenerateDatabaseNameFromTable; } set { ModelGenerator.GenerateDatabaseNameFromTable = value; } }
public bool     GenerateConstructors          { get { return ModelGenerator.GenerateConstructors;          } set { ModelGenerator.GenerateConstructors          = value; } }
public string   DefaultConfiguration          { get { return ModelGenerator.DefaultConfiguration;          } set { ModelGenerator.DefaultConfiguration          = value; } }
public bool     GenerateAssociations          { get { return ModelGenerator.GenerateAssociations;          } set { ModelGenerator.GenerateAssociations          = value; } }
public bool     GenerateBackReferences        { get { return ModelGenerator.GenerateBackReferences;        } set { ModelGenerator.GenerateBackReferences        = value; } }
public bool     GenerateAssociationExtensions { get { return ModelGenerator.GenerateAssociationExtensions; } set { ModelGenerator.GenerateAssociationExtensions = value; } }
public bool     ReplaceSimilarTables          { get { return ModelGenerator.ReplaceSimilarTables;          } set { ModelGenerator.ReplaceSimilarTables          = value; } }
public bool     IncludeDefaultSchema          { get { return ModelGenerator.IncludeDefaultSchema;          } set { ModelGenerator.IncludeDefaultSchema          = value; } }

public IClass   DataContextObject             { get { return ModelGenerator.DataContextObject;             } set { ModelGenerator.DataContextObject             = value; } }

public bool     PluralizeClassNames                 { get { return ModelGenerator.PluralizeClassNames;                 } set { ModelGenerator.PluralizeClassNames                 = value; } }
public bool     SingularizeClassNames               { get { return ModelGenerator.SingularizeClassNames;               } set { ModelGenerator.SingularizeClassNames               = value; } }
public bool     PluralizeDataContextPropertyNames   { get { return ModelGenerator.PluralizeDataContextPropertyNames;   } set { ModelGenerator.PluralizeDataContextPropertyNames   = value; } }
public bool     SingularizeDataContextPropertyNames { get { return ModelGenerator.SingularizeDataContextPropertyNames; } set { ModelGenerator.SingularizeDataContextPropertyNames = value; } }
public bool     PluralizeForeignKeyNames            { get { return ModelGenerator.PluralizeForeignKeyNames;            } set { ModelGenerator.PluralizeForeignKeyNames            = value; } }
public bool     SingularizeForeignKeyNames          { get { return ModelGenerator.SingularizeForeignKeyNames;          } set { ModelGenerator.SingularizeForeignKeyNames          = value; } }

public bool     NormalizeParameterName              { get { return ModelGenerator.NormalizeParameterName;              } set { ModelGenerator.NormalizeParameterName              = value; } }
public bool     NormalizeProcedureColumnName        { get { return ModelGenerator.NormalizeProcedureColumnName;        } set { ModelGenerator.NormalizeProcedureColumnName        = value; } }
public bool     NormalizeNames                      { get { return ModelGenerator.NormalizeNames;                      } set { ModelGenerator.NormalizeNames                      = value; } }
public bool     NormalizeNamesWithoutUnderscores    { get { return ModelGenerator.NormalizeNamesWithoutUnderscores;    } set { ModelGenerator.NormalizeNamesWithoutUnderscores    = value; } }
public bool     ConvertUpperNamesToLower            { get { return ModelGenerator.ConvertUpperNamesToLower;            } set { ModelGenerator.ConvertUpperNamesToLower            = value; } }

public Func<string,bool,string> ToValidName         { get { return ModelGenerator.ToValidName;         } set { ModelGenerator.ToValidName         = value; } }
public Func<string,bool,string> ConvertToCompilable { get { return ModelGenerator.ConvertToCompilable; } set { ModelGenerator.ConvertToCompilable = value; } }
public Func<string,bool,string> NormalizeName       { get { return ModelGenerator.NormalizeName;       } set { ModelGenerator.NormalizeName       = value; } }

public Func<IForeignKey,string> GetAssociationExtensionPluralName   { get { return ModelGenerator.GetAssociationExtensionPluralName;   } set { ModelGenerator.GetAssociationExtensionPluralName   = value; } }
public Func<IForeignKey,string> GetAssociationExtensionSingularName { get { return ModelGenerator.GetAssociationExtensionSingularName; } set { ModelGenerator.GetAssociationExtensionSingularName = value; } }

public GetSchemaOptions GetSchemaOptions { get { return ModelGenerator.GetSchemaOptions; } set { ModelGenerator.GetSchemaOptions = value; } }

public Func<TableSchema,Table> LoadProviderSpecificTable { get { return ModelGenerator.LoadProviderSpecificTable; } set { ModelGenerator.LoadProviderSpecificTable = value; } }

public static Func<ColumnSchema,string>                 ConvertColumnMemberType          { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertColumnMemberType;          } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertColumnMemberType          = value; } }
public static Func<TableSchema,ColumnSchema,string>     ConvertTableColumnMemberType     { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertTableColumnMemberType;     } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertTableColumnMemberType     = value; } }
public static Func<ProcedureSchema,ColumnSchema,string> ConvertProcedureColumnMemberType { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertProcedureColumnMemberType; } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.ConvertProcedureColumnMemberType = value; } }

public static Func<string,bool>   IsValueType { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.IsValueType; } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.IsValueType = value; } }
public static Func<string,string> ToPlural    { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.ToPlural;    } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.ToPlural    = value; } }
public static Func<string,string> ToSingular  { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.ToSingular;  } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.ToSingular  = value; } }

public static Func<DataConnection,GetSchemaOptions,DatabaseSchema> LoadDatabaseSchema { get { return LinqToDB.Tools.ModelGeneration.ModelGenerator.LoadDatabaseSchema; } set { LinqToDB.Tools.ModelGeneration.ModelGenerator.LoadDatabaseSchema = value; } }

Action AfterLoadMetadata { get { return ModelGenerator.AfterLoadMetadata; } set { ModelGenerator.AfterLoadMetadata = value; } }

void LoadServerMetadata(DataConnection dataConnection)
{
	ModelGenerator.LoadServerMetadata<ForeignKey,Column>(dataConnection);
}

void LoadMetadata(DataConnection dataConnection)
{
	ModelGenerator.LoadMetadata<Class,ForeignKey,Column>(dataConnection);
}

Table     GetTable    (string name) { return ModelGenerator.GetTable    (name); }
Procedure GetProcedure(string name) { return ModelGenerator.GetProcedure(name); }

IColumn     GetColumn    (string tableName, string columnName) { return ModelGenerator.GetColumn(tableName, columnName); }
IForeignKey GetFK        (string tableName, string fkName)     { return GetForeignKey(tableName, fkName);                }
IForeignKey GetForeignKey(string tableName, string fkName)     { return ModelGenerator.GetForeignKey(tableName, fkName); }

public TableContext<Table,Procedure> SetTable(string tableName,
	string TypeName                = null,
	string DataContextPropertyName = null)
{
	return ModelGenerator.SetTable(tableName, TypeName, DataContextPropertyName);
}

Dictionary<string,Table>     Tables     { get { return ModelGenerator.Tables;     } set { ModelGenerator.Tables     = value; } }
Dictionary<string,Procedure> Procedures { get { return ModelGenerator.Procedures; } set { ModelGenerator.Procedures = value; } }

public partial class Column : Property, IColumn
{
	public Column()
	{
	}

	public Column(ModelType type)
	{
		ModelType   = type;
		TypeBuilder = () => ModelType.ToTypeName();
	}

	public string ColumnName         { get; set; } // Column name in database
	public bool   IsNullable         { get; set; }
	public bool   IsIdentity         { get; set; }
	public string ColumnType         { get; set; } // Type of the column in database
	public string DataType           { get; set; }
	public int?   Length             { get; set; }
	public int?   Precision          { get; set; }
	public int?   Scale              { get; set; }
	public DbType DbType             { get; set; }
	public string Description        { get; set; }
	public bool   IsPrimaryKey       { get; set; }
	public int    PrimaryKeyOrder    { get; set; }
	public bool   SkipOnUpdate       { get; set; }
	public bool   SkipOnInsert       { get; set; }
	public bool   IsDuplicateOrEmpty { get; set; }
	public bool   IsDiscriminator    { get; set; }
	public string AliasName          { get; set; }

	public string MemberName
	{
		get { return Name;  }
		set { Name = value; }
	}

	public ModelType ModelType { get; set; }

	public override bool EnforceNotNullable => EnableNullableReferenceTypes && EnforceModelNullability && ModelType != null && ModelType.IsReference == true && ModelType.IsNullable == false;
}


#>
