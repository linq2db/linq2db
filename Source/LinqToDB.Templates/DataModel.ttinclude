<#@ assembly name="System.Data"                   #>
<#@ include file="LinqToDB.ttinclude" once="true" #>
<#@ import namespace="LinqToDB.SchemaProvider"    #>
<#
	{
		var beforeGenerateModel = BeforeGenerateModel;
		BeforeGenerateModel = () =>
		{
			GenerateTypesFromMetadata();
			beforeGenerateModel();
		};
	}
#><#+

string   NamespaceName
{
	get { return Model.Namespace.Name;  }
	set { Model.Namespace.Name = value; }
}

public static string BaseDataContextClass;
public static bool   EnforceModelNullability = true;

public string   ServerName;
public string   DatabaseName;
public string   DataContextName;
public string   BaseEntityClass;
public string   OneToManyAssociationType      = "IEnumerable<{0}>";

public bool     GenerateDatabaseInfo          = true;
public bool     GenerateDatabaseName;
public bool     GenerateConstructors          = true;
public string   DefaultConfiguration;
public bool     GenerateAssociations          = true;
public bool     GenerateBackReferences        = true;
public bool     GenerateAssociationExtensions;
public bool     ReplaceSimilarTables          = true;
public bool     IncludeDefaultSchema          = true;

Class    DataContextObject;

public bool PluralizeClassNames;
public bool SingularizeClassNames               = true;
public bool PluralizeDataContextPropertyNames   = true;
public bool SingularizeDataContextPropertyNames;

public bool NormalizeNames                      = true;
public bool NormalizeNamesWithoutUnderscores;

private Func<string, bool, string> _toValidName;
public Func<string, bool, string> ToValidName
{
	get { return _toValidName ?? ToValidNameDefault; }
	set { _toValidName = value;                      }
}

private Func<string, bool, string> _convertToCompilabl;
public Func<string, bool, string> ConvertToCompilable
{
	get { return _convertToCompilabl ?? ConvertToCompilableDefault; }
	set { _convertToCompilabl = value;                              }
}

private Func<ForeignKey, string> _getAssociationExtensionPluralName;
public Func<ForeignKey, string> GetAssociationExtensionPluralName
{
	get { return _getAssociationExtensionPluralName ?? GetAssociationExtensionPluralNameDefault; }
	set { _getAssociationExtensionPluralName = value;                                            }
}

private Func<ForeignKey, string> _getAssociationExtensionSingularName;
public Func<ForeignKey, string> GetAssociationExtensionSingularName
{
	get { return _getAssociationExtensionSingularName ?? GetAssociationExtensionSingularNameDefault; }
	set { _getAssociationExtensionSingularName = value;                                              }
}

public LinqToDB.SchemaProvider.GetSchemaOptions GetSchemaOptions =
	new LinqToDB.SchemaProvider.GetSchemaOptions();

LinqToDB.SqlProvider.ISqlBuilder SqlBuilder;

public Func<TableSchema,Table> LoadProviderSpecificTable = tableSchema => null;

public static Func<ColumnSchema,string>                 ConvertColumnMemberType          = (c) => c.MemberType;
public static Func<TableSchema,ColumnSchema,string>     ConvertTableColumnMemberType     = (t,c) => ConvertColumnMemberType(c);
public static Func<ProcedureSchema,ColumnSchema,string> ConvertProcedureColumnMemberType = (t,c) => ConvertColumnMemberType(c);

public HashSet<string> KeyWords = new HashSet<string>
{
	"abstract", "as",       "base",     "bool",    "break",     "byte",      "case",       "catch",     "char",    "checked",
	"class",    "const",    "continue", "decimal", "default",   "delegate",  "do",         "double",    "else",    "enum",
	"event",    "explicit", "extern",   "false",   "finally",   "fixed",     "float",      "for",       "foreach", "goto",
	"if",       "implicit", "in",       "int",     "interface", "internal",  "is",         "lock",      "long",    "new",
	"null",     "object",   "operator", "out",     "override",  "params",    "private",    "protected", "public",  "readonly",
	"ref",      "return",   "sbyte",    "sealed",  "short",     "sizeof",    "stackalloc", "static",    "struct",  "switch",
	"this",     "throw",    "true",     "try",     "typeof",    "uint",      "ulong",      "unchecked", "unsafe",  "ushort",
	"using",    "virtual",  "volatile", "void",    "while",     "namespace", "string"
};

public static Func<string, bool>  IsValueType    = IsValueTypeDefault;
public static Func<string,string> ToPlural       = s => s + "s";
public static Func<string,string> ToSingular     = s => s;


void LoadServerMetadata(DataConnection dataConnection)
{
	SqlBuilder = dataConnection.DataProvider.CreateSqlBuilder(dataConnection.MappingSchema);

	var sp = dataConnection.DataProvider.GetSchemaProvider();
	var db = sp.GetSchema(dataConnection, GetSchemaOptions);

	if (DatabaseName == null && GenerateDatabaseName)
		DatabaseName = db.Database;

	if (DataContextName == null)
		DataContextObject.Name = DataContextName = ToValidName(db.Database, true) + "DB";

	if (GenerateDatabaseInfo)
	{
		DataContextObject.Comment.Add("/ <summary>");
		DataContextObject.Comment.Add("/ Database       : " + db.Database);
		DataContextObject.Comment.Add("/ Data Source    : " + db.DataSource);
		DataContextObject.Comment.Add("/ Server Version : " + db.ServerVersion);
		DataContextObject.Comment.Add("/ </summary>");
	}

	var tables = db.Tables
		.Where(t => !t.IsProviderSpecific)
		.Select(t => new
		{
			t,
			key = t.IsDefaultSchema ? t.TableName : t.SchemaName + "." + t.TableName,
			table = new Table
			{
				TableSchema             = t,
				IsDefaultSchema         = t.IsDefaultSchema,
				Schema                  = t.IsDefaultSchema && !IncludeDefaultSchema || string.IsNullOrEmpty(t.SchemaName) ? null : t.SchemaName,
				BaseClass               = BaseEntityClass,
				TableName               = t.TableName,
				TypeName                = t.TypeName,
				DataContextPropertyName = t.TypeName,
				IsView                  = t.IsView,
				IsProviderSpecific      = false,
				Description             = t.Description,
				Columns                 = t.Columns.ToDictionary(
					c => c.ColumnName,
					c => new Column(new ModelType(ConvertTableColumnMemberType(t, c), !IsValueType(ConvertTableColumnMemberType(t, c)), c.IsNullable))
					{
						ColumnName      = c.ColumnName,
						ColumnType      = c.ColumnType,
						DataType        = "DataType." + c.DataType,
						Length          = c.Length,
						Precision       = c.Precision,
						Scale           = c.Scale,
						IsNullable      = c.IsNullable,
						IsIdentity      = c.IsIdentity,
						IsPrimaryKey    = c.IsPrimaryKey,
						PrimaryKeyOrder = c.PrimaryKeyOrder,
						MemberName      = CheckType(c.SystemType, c.MemberName),
						SkipOnInsert    = c.SkipOnInsert,
						SkipOnUpdate    = c.SkipOnUpdate,
						Description     = c.Description,
					})
			}
		})
		.ToList();

	if (PluralizeClassNames || SingularizeClassNames)
	{
		var foundNames = new HashSet<string>(tables.Select(t => t.table.Schema + '.' + t.table.TypeName));

		foreach (var t in tables)
		{
			var newName = t.table.TypeName;
				newName =
					PluralizeClassNames   ? ToPlural  (newName) :
					SingularizeClassNames ? ToSingular(newName) : newName;

			if (newName != t.table.TypeName)
			{
				if (!foundNames.Contains(t.table.Schema + '.' + newName))
				{
					t.table.TypeName = newName;
					foundNames.Add(t.table.Schema + '.' + newName);
				}
			}
		}
	}

	if (PluralizeDataContextPropertyNames || SingularizeDataContextPropertyNames)
	{
		var foundNames = new HashSet<string>(tables.Select(t => t.table.Schema + '.' + t.table.DataContextPropertyName));

		foreach (var t in tables)
		{
			var newName = t.table.DataContextPropertyName;
				newName =
					PluralizeDataContextPropertyNames   ? ToPlural  (newName) :
					SingularizeDataContextPropertyNames ? ToSingular(newName) : newName;

			if (newName != t.table.TypeName)
			{
				if (!foundNames.Contains(t.table.Schema + '.' + newName))
				{
					t.table.DataContextPropertyName = newName;
					foundNames.Add(t.table.Schema + '.' + newName);
				}
			}
		}
	}

	tables.AddRange(db.Tables
		.Where(t => t.IsProviderSpecific)
		.Select(t => new
		{
			t,
			key = t.IsDefaultSchema ? t.TableName : t.SchemaName + "." + t.TableName,
			table = LoadProviderSpecificTable(t)
		})
		.Where(t => t.table != null));

	foreach (var t in tables)
		Tables.Add(t.key, t.table);

	var keys =
	(
		from t in tables
		from k in t.t.ForeignKeys
		let otherTable = tables.Where(tbl => tbl.t == k.OtherTable).Select(tbl => tbl.table).Single()
		select new
		{
			k,
			k.KeyName,
			t,
			key = new ForeignKey
			{
				KeyName         = k.KeyName,
				OtherTable      = otherTable,
				OtherColumns    = k.OtherColumns.Select(c => otherTable.Columns[c.ColumnName]).ToList(),
				ThisColumns     = k.ThisColumns. Select(c => t.table.   Columns[c.ColumnName]).ToList(),
				CanBeNull       = k.CanBeNull,
				MemberName      = k.MemberName,
				AssociationType = (AssociationType)(int)k.AssociationType,
			}
		}
	).ToList();

	foreach (var key in keys)
	{
		var keyName = (key.k.OtherTable.IsDefaultSchema ? null : key.k.OtherTable.SchemaName + ".")
			+ key.k.OtherTable.TableName + "."
			+ key.KeyName;
		key.t.table.ForeignKeys.Add(keyName, key.key);

		if (key.k.BackReference != null)
			key.key.BackReference = keys.First(k => k.k == key.k.BackReference).key;

		key.key.MemberName = key.key.MemberName.Replace(".", string.Empty);

		key.key.MemberName = key.key.AssociationType == AssociationType.OneToMany ?
			ToPlural(key.key.MemberName) : ToSingular(key.key.MemberName);
	}

	var procedures = db.Procedures
		.Select(p => new
		{
			p,
			key = p.IsDefaultSchema ? p.ProcedureName : p.SchemaName + "." + p.ProcedureName,
			proc = new Procedure
			{
				Schema              = (p.IsDefaultSchema && !IncludeDefaultSchema) || string.IsNullOrEmpty(p.SchemaName)? null : p.SchemaName,
				ProcedureName       = p.ProcedureName,
				Name                = ToValidName(p.MemberName, true),
				IsFunction          = p.IsFunction,
				IsTableFunction     = p.IsTableFunction,
				IsAggregateFunction = p.IsAggregateFunction,
				IsDefaultSchema     = p.IsDefaultSchema,
				Description         = p.Description,
				IsLoaded            = p.IsLoaded,
				ResultTable         = p.ResultTable == null ? null :
					new Table
					{
						TypeName = ToValidName(
							PluralizeClassNames   ? ToPlural  (p.ResultTable.TypeName) :
							SingularizeClassNames ? ToSingular(p.ResultTable.TypeName) : p.ResultTable.TypeName, true),
						Columns  = ToDictionary(
							p.ResultTable.Columns,
							c => c.ColumnName,
							c => new Column(new ModelType(ConvertProcedureColumnMemberType(p, c), !IsValueType(ConvertProcedureColumnMemberType(p, c)), c.IsNullable))
							{
								ColumnName      = c.ColumnName,
								ColumnType      = c.ColumnType,
								IsNullable      = c.IsNullable,
								IsIdentity      = c.IsIdentity,
								IsPrimaryKey    = c.IsPrimaryKey,
								PrimaryKeyOrder = c.PrimaryKeyOrder,
								MemberName      = CheckColumnName(CheckType(c.SystemType, c.MemberName)),
								SkipOnInsert    = c.SkipOnInsert,
								SkipOnUpdate    = c.SkipOnUpdate,
								Description     = c.Description,
							},
							(c,n) =>
							{
								c.IsDuplicateOrEmpty = true;
								return "$" + (c.MemberName = "Column" + n);
							})
					},
				ResultException = p.ResultException,
				SimilarTables   = p.SimilarTables == null ? new List<Table>() :
					p.SimilarTables
						.Select(t => tables.Single(tbl => tbl.t == t).table)
						.ToList(),
				ProcParameters  = p.Parameters
					.Select(pr => new Parameter
					{
						SchemaName    = pr.SchemaName,
						SchemaType    = pr.SchemaType,
						IsIn          = pr.IsIn,
						IsOut         = pr.IsOut,
						IsResult      = pr.IsResult,
						Size          = pr.Size,
						ParameterName = CheckParameterName(CheckType(pr.SystemType, pr.ParameterName)),
						ParameterType = pr.ParameterType,
						SystemType    = pr.SystemType,
						DataType      = pr.DataType.ToString(),
						IsNullable    = pr.IsNullable,
						Description   = pr.Description,
					})
					.ToList(),
			}
		})
		.ToList();

	foreach (var p in procedures)
	{
		if (ReplaceSimilarTables)
			if (p.proc.SimilarTables.Count() == 1 || p.proc.SimilarTables.Count(t => !t.IsView) == 1)
				p.proc.ResultTable = p.proc.SimilarTables.Count() == 1 ?
					p.proc.SimilarTables[0] :
					p.proc.SimilarTables.First(t => !t.IsView);

		Procedures[p.key] = p.proc;
	}
}

Dictionary<string,TR> ToDictionary<T,TR>(IEnumerable<T> source, Func<T,string> keyGetter, Func<T,TR> objGetter, Func<TR,int,string> getKeyName)
{
	var dic     = new Dictionary<string,TR>();
	var current = 1;

	foreach (var item in source)
	{
		var key = keyGetter(item);
		var obj = objGetter(item);

		if (string.IsNullOrEmpty(key) || dic.ContainsKey(key))
			key = getKeyName(obj, current);

		dic.Add(key, obj);

		current++;
	}

	return dic;
}

string CheckType(Type type, string typeName)
{
	if (!Model.Usings.Contains(type.Namespace))
		Model.Usings.Add(type.Namespace);

	if (type.IsGenericType)
		foreach (var argType in type.GetGenericArguments())
			CheckType(argType, null);

	return typeName;
}

string CheckColumnName(string memberName)
{
	if (string.IsNullOrEmpty(memberName))
		memberName = "Empty";
	else
	{
		memberName = memberName
			.Replace("%", "Percent")
			.Replace(">", "Greater")
			.Replace("<", "Lower")
			.Replace("+", "Plus")
			.Replace('(', '_')
			.Replace(')', '_')
			.Replace('-', '_')
			.Replace('|', '_')
			.Replace(',', '_')
			.Replace('"', '_')
			.Replace("'", "_")
			.Replace(".", "_")
			.Replace("\u00A3", "Pound");

		if (KeyWords.Contains(memberName))
			memberName = "@" + memberName;
	}
	return memberName;
}

string CheckParameterName(string parameterName)
{
	var invalidParameterNames = new List<string>
	{
		"@DataType"
	};

	var result = parameterName;
	while (invalidParameterNames.Contains(result))
	{
		result = result + "_";
	}
	return result;
}

Action AfterLoadMetadata = () => {};

void LoadMetadata(DataConnection dataConnection)
{
	if (DataContextObject == null)
	{
		DataContextObject = new Class(DataContextName) { BaseClass = BaseDataContextClass, };

		Model.Types.Add(DataContextObject);
	}

	LoadServerMetadata(dataConnection);

	if (Tables.Values.SelectMany(_ => _.ForeignKeys.Values).Any(_ => _.AssociationType == AssociationType.OneToMany))
		Model.Usings.Add("System.Collections.Generic");

	foreach (var t in Tables.Values)
	{
		if (KeyWords.Contains(t.TypeName))
			t.TypeName = "@" + t.TypeName;

		if (KeyWords.Contains(t.DataContextPropertyName))
			t.DataContextPropertyName = "@" + t.DataContextPropertyName;

		t.TypeName                = ConvertToCompilable(t.TypeName,                true);
		t.DataContextPropertyName = ConvertToCompilable(t.DataContextPropertyName, true);

		foreach (var col in t.Columns.Values)
		{
			if (KeyWords.Contains(col.MemberName))
				col.MemberName = "@" + col.MemberName;

			col.MemberName = ConvertToCompilable(col.MemberName, true);

			if (col.MemberName == t.TypeName)
				col.MemberName += "Column";
		}

		foreach (var fk in t.ForeignKeys.Values)
		{
			if (KeyWords.Contains(fk.MemberName))
				fk.MemberName = "@" + fk.MemberName;

			fk.MemberName = ConvertToCompilable(fk.MemberName, true);

			if (fk.MemberName == t.TypeName)
				fk.MemberName += "_FK";
		}
	}

	foreach (var t in Tables.Values)
	{
		var hasDuplicates = t.Columns.Values
				.Select(c => c.MemberName)
				.Concat(t.ForeignKeys.Values.Select(f => f.MemberName))
				.ToLookup(n => n)
				.Any(g => g.Count() > 1);

		if (hasDuplicates)
		{
			foreach (var fk in t.ForeignKeys.Values)
			{
				var mayDuplicate = t.Columns.Values
					.Select(c => c.MemberName)
					.Concat(t.ForeignKeys.Values.Where(f => f != fk).Select(f => f.MemberName));

				fk.MemberName = SuggestNoDuplicate(mayDuplicate, fk.MemberName, "FK");
			}

			foreach (var col in t.Columns.Values)
			{
				var mayDuplicate = t.Columns.Values
					.Where(c => c != col)
					.Select(c => c.MemberName)
					.Concat(t.ForeignKeys.Values.Select(fk => fk.MemberName));

				col.MemberName = SuggestNoDuplicate(mayDuplicate, col.MemberName, null);
			}
		}
	}

	foreach (var proc in Procedures.Values)
	{
		proc.Name = ConvertToCompilable(proc.Name, false);

		if (KeyWords.Contains(proc.Name))
			proc.Name = "@" + proc.Name;

		foreach (var param in proc.ProcParameters)
		{
			if (KeyWords.Contains(param.ParameterName))
				param.ParameterName = ConvertToCompilable("@" + param.ParameterName, true);
		}
	}

	AfterLoadMetadata();
}

string SuggestNoDuplicate(IEnumerable<string> currentNames, string newName, string prefix)
{
	var names = new HashSet<string>(currentNames);
	var result = newName;
	if (names.Contains(result))
	{
		if (!string.IsNullOrEmpty(prefix))
			result = prefix + result;
		if (names.Contains(result))
		{
			var counter = 0;

			// get last 6 digits
			var idx = result.Length;
			while (idx > 0 && idx > result.Length - 6 && char.IsDigit(result[idx - 1]))
				idx--;
			var number = result.Substring(idx);

			if (!string.IsNullOrEmpty(number))
			{
				if (int.TryParse(number, out counter))
				{
					result = result.Remove(result.Length - number.Length);
				}
			}

			do
			{
				++counter;
				if (!names.Contains(result + counter))
				{
					result = result + counter;
					break;
				}
			}
			while(true);
		}
	}

	return result;
}

string ConvertToCompilableDefault(string name, bool mayRemoveUnderscore)
{
	var query =
		from c in name
		select char.IsLetterOrDigit(c) || c == '@' ? c : '_';

	return ToValidName(new string(query.ToArray()), mayRemoveUnderscore);
}

Table GetTable(string name)
{
	Table tbl;
	if (Tables.TryGetValue(name, out tbl))
		return tbl;

	WriteLine("#error Table '" + name +  "' not found.");
	WriteLine("/*");
	WriteLine("\tExisting tables:");
	WriteLine("");

	foreach (var key in Tables.Keys)
		WriteLine("\t" + key);

	WriteLine(" */");

	throw new ArgumentException("Table '" + name +  "' not found.");
}

Procedure GetProcedure(string name)
{
	Procedure proc;
	if (Procedures.TryGetValue(name, out proc))
		return proc;

	WriteLine("#error Procedure '" + name +  "' not found.");
	WriteLine("");
	WriteLine("/*");
	WriteLine("\tExisting procedures:");
	WriteLine("");

	foreach (var key in Procedures.Keys)
		WriteLine("\t" + key);

	WriteLine(" */");

	throw new ArgumentException("Procedure '" + name +  "' not found.");
}

Column GetColumn(string tableName, string columnName)
{
	var tbl = GetTable(tableName);

	Column col;
	if (tbl.Columns.TryGetValue(columnName, out col))
		return col;

	WriteLine("#error Column '" + tableName + "'.'" + columnName +  "' not found.");
	WriteLine("");
	WriteLine("/*");
	WriteLine("\tExisting '" + tableName + "'columns:");
	WriteLine("");

	foreach (var key in tbl.Columns.Keys)
		WriteLine("\t" + key);

	WriteLine(" */");

	throw new ArgumentException("Column '" + tableName + "'.'" + columnName +  "' not found.");
}

ForeignKey GetFK(string tableName, string fkName)
{
	return GetForeignKey(tableName, fkName);
}

ForeignKey GetForeignKey(string tableName, string fkName)
{
	var tbl = GetTable(tableName);

	ForeignKey fk;
	if (tbl.ForeignKeys.TryGetValue(fkName, out fk))
		return fk;

	WriteLine("#error FK '" + tableName + "'.'" + fkName +  "' not found.");
	WriteLine("");
	WriteLine("/*");
	WriteLine("\tExisting '" + tableName + "'FKs:");
	WriteLine("");

	foreach (var key in tbl.ForeignKeys.Keys)
		WriteLine("\t" + key);

	WriteLine(" */");

	throw new ArgumentException("FK '" + tableName + "'.'" + fkName +  "' not found.");
}


public TableContext SetTable(string tableName,
	string TypeName                = null,
	string DataContextPropertyName = null)
{
	var ctx = new TableContext { Transformation = this, TableName = tableName };

	if (TypeName != null || DataContextPropertyName != null)
	{
		var t = GetTable(tableName);

		if (TypeName                != null) t.TypeName                = TypeName;
		if (DataContextPropertyName != null) t.DataContextPropertyName = DataContextPropertyName;
	}

	return ctx;
}

public class TableContext
{
	public GeneratedTextTransformation Transformation;
	public string                      TableName;

	public TableContext Column(string columnName,
		string MemberName  = null,
		string Type        = null,
		bool?  IsNullable  = null,
		string Conditional = null)
	{
		var c = Transformation.GetColumn(TableName, columnName);

		if (MemberName  != null) c.MemberName  = MemberName;
		if (Type        != null) c.TypeBuilder = () => Type;
		if (IsNullable  != null) c.IsNullable  = IsNullable.Value;
		if (Conditional != null) c.Conditional = Conditional;

		return this;
	}

	public TableContext FK(string fkName,
		string           MemberName      = null,
		AssociationType? AssociationType = null,
		bool?            CanBeNull       = null)
	{
		var c = Transformation.GetFK(TableName, fkName);

		if (MemberName      != null) c.MemberName      = MemberName;
		if (AssociationType != null) c.AssociationType = AssociationType.Value;
		if (CanBeNull       != null) c.CanBeNull       = CanBeNull.Value;

		return this;
	}
}


Dictionary<string,Table>     Tables     = new Dictionary<string,Table>    ();
Dictionary<string,Procedure> Procedures = new Dictionary<string,Procedure>();

public partial class Table : Class
{
	public TableSchema TableSchema             { get; set; }
	public string      Schema                  { get; set; }
	public string      TableName               { get; set; }
	public string      DataContextPropertyName { get; set; }
	public MemberBase  DataContextProperty     { get; set; }
	public bool        IsView                  { get; set; }
	public bool        IsProviderSpecific      { get; set; }
	public bool        IsDefaultSchema         { get; set; }
	public string      Description             { get; set; }
	public string      AliasPropertyName       { get; set; }
	public string      AliasTypeName           { get; set; }
	public string      TypePrefix              { get; set; }

	public string TypeName
	{
		get { return Name;  }
		set { Name = value; }
	}

	public Dictionary<string,Column>     Columns;
	public Dictionary<string,ForeignKey> ForeignKeys = new Dictionary<string,ForeignKey>();
}

public partial class Column : Property
{
	public Column()
	{
	}

	public Column(ModelType type)
	{
		ModelType = type;
		TypeBuilder = () => ModelType.ToTypeName();
	}

	public string    ColumnName; // Column name in database
	public bool      IsNullable;
	public bool      IsIdentity;
	public string    ColumnType; // Type of the column in database
	public string    DataType;
	public long?     Length;
	public int?      Precision;
	public int?      Scale;
	public DbType    DbType;
	public string    Description;
	public bool      IsPrimaryKey;
	public int       PrimaryKeyOrder;
	public bool      SkipOnUpdate;
	public bool      SkipOnInsert;
	public bool      IsDuplicateOrEmpty;
	public bool      IsDiscriminator;
	public string    AliasName;

	public string MemberName
	{
		get { return Name;  }
		set { Name = value; }
	}

	public ModelType ModelType { get; }

	protected internal override bool EnforceNotNullable => EnableNullableReferenceTypes && EnforceModelNullability && ModelType != null && ModelType.IsReference && !ModelType.IsNullable;
}

public enum AssociationType
{
	Auto,
	OneToOne,
	OneToMany,
	ManyToOne,
}

public partial class ForeignKey : Property
{
	public string       KeyName;
	public Table        OtherTable;
	public List<Column> ThisColumns;
	public List<Column> OtherColumns;
	public bool         CanBeNull;
	public ForeignKey   BackReference;

	public string MemberName
	{
		get { return Name;  }
		set { Name = value; }
	}

	private AssociationType _associationType = AssociationType.Auto;
	public  AssociationType  AssociationType
	{
		get { return _associationType; }
		set
		{
			_associationType = value;

			if (BackReference != null)
			{
				switch (value)
				{
					case AssociationType.Auto      : BackReference.AssociationType = AssociationType.Auto;      break;
					case AssociationType.OneToOne  : BackReference.AssociationType = AssociationType.OneToOne;  break;
					case AssociationType.OneToMany : BackReference.AssociationType = AssociationType.ManyToOne; break;
					case AssociationType.ManyToOne : BackReference.AssociationType = AssociationType.OneToMany; break;
				}
			}
		}
	}

	protected internal override bool EnforceNotNullable => EnableNullableReferenceTypes && EnforceModelNullability && (!CanBeNull || AssociationType == AssociationType.OneToMany);
}

public partial class Procedure : Method
{
	public string Schema              { get; set; }
	public string ProcedureName       { get; set; }
	public bool   IsFunction          { get; set; }
	public bool   IsTableFunction     { get; set; }
	public bool   IsAggregateFunction { get; set; }
	public bool   IsDefaultSchema     { get; set; }
	public bool   IsLoaded            { get; set; }
	public string Description         { get; set; }

	public Table           ResultTable     { get; set; }
	public Exception       ResultException { get; set; }
	public List<Table>     SimilarTables   { get; set; }
	public List<Parameter> ProcParameters  { get; set; }
}

public class Parameter
{
	public string   SchemaName    { get; set; }
	public string   SchemaType    { get; set; }
	public bool     IsIn          { get; set; }
	public bool     IsOut         { get; set; }
	public bool     IsResult      { get; set; }
	public long?    Size          { get; set; }

	public string   ParameterName { get; set; }
	public string   ParameterType { get; set; }
	public bool     IsNullable    { get; set; }
	public Type     SystemType    { get; set; }
	public string   DataType      { get; set; }
	public string   Description   { get; set; }

	public ModelType Type => new ModelType(ParameterType, !IsValueType(ParameterType), IsNullable);
}

private int _counter = 0;

string ToValidNameDefault(string name, bool mayRemoveUnderscore)
{
	if (NormalizeNames)
	{
		if (mayRemoveUnderscore && name.Contains("_"))
			name = SplitAndJoin(name, "", '_');
		else if (NormalizeNamesWithoutUnderscores)
			name = NormalizeFragment(name);
	}

	if (name.Contains("."))
	{
		name = SplitAndJoin(name, "", '.');
	}

	if (name.Length > 0 && char.IsDigit(name[0]))
		name = "_" + name;

	if (string.IsNullOrEmpty(name))
		name = "_" + _counter++;

	if (NormalizeNames)
	{
		name = char.ToUpper(name[0]) + name.Substring(1);
	}

	return name;
}

static string SplitAndJoin(string value, string join, params char[] split)
{
	var ss = value.Split(split, StringSplitOptions.RemoveEmptyEntries)
		.Select(NormalizeFragment);

	return string.Join(join, ss.ToArray());
}

static string NormalizeFragment(string s)
{
	return char.ToUpper(s[0]) + (s.Substring(1).All(char.IsUpper) ? s.Substring(1).ToLower() : s.Substring(1));
}

private string GetAssociationExtensionSingularNameDefault(ForeignKey key)
{
	return ToSingular(key.Name);
}

private string GetAssociationExtensionPluralNameDefault(ForeignKey key)
{
	return ToPlural(ToSingular(key.Name));
}

static bool IsValueTypeDefault(string typeName)
{
	switch (typeName)
	{
		case "bool":
		case "bool?":
		case "char":
		case "char?":
		case "decimal":
		case "decimal?":
		case "int":
		case "int?":
		case "uint":
		case "uint?":
		case "byte":
		case "byte?":
		case "sbyte":
		case "sbyte?":
		case "long":
		case "long?":
		case "ulong":
		case "ulong?":
		case "short":
		case "short?":
		case "ushort":
		case "ushort?":
		case "float":
		case "float?":
		case "double":
		case "double?":
		case "DateTime":
		case "DateTime?":
		case "DateTimeOffset":
		case "DateTimeOffset?":
		case "TimeSpan":
		case "TimeSpan?":
		case "Guid":
		case "Guid?":
		case "SqlHierarchyId":
		case "SqlHierarchyId?":
		case "NpgsqlDate":
		case "NpgsqlDate?":
		case "NpgsqlTimeSpan":
		case "NpgsqlTimeSpan?":
		case "NpgsqlPoint":
		case "NpgsqlPoint?":
		case "NpgsqlLSeg":
		case "NpgsqlLSeg?":
		case "NpgsqlBox":
		case "NpgsqlBox?":
		case "NpgsqlPath":
		case "NpgsqlPath?":
		case "NpgsqlPolygon":
		case "NpgsqlPolygon?":
		case "NpgsqlCircle":
		case "NpgsqlCircle?":
		case "NpgsqlLine":
		case "NpgsqlLine?":
		case "NpgsqlInet":
		case "NpgsqlInet?":
		case "NpgsqlDateTime":
		case "NpgsqlDateTime?":
			return true;
		case "object":
		case "string":
		case "byte[]":
		case "BitArray":
		case "SqlGeography":
		case "SqlGeometry":
		case "PhysicalAddress":
		case "Array":
		case "DataTable":
			return false;
	}

	return typeName.EndsWith("?");
}

#>
