// <auto-generated> This file has been auto generated. </auto-generated>
using System;

namespace LinqToDB.Common.Internal
{
	internal static partial class MutableTuple
	{
		public const int MaxMemberCount = 10;

		public static readonly Type[] MTypes = new []
		{
			typeof(MTuple<>),
			typeof(MTuple<,>),
			typeof(MTuple<,,>),
			typeof(MTuple<,,,>),
			typeof(MTuple<,,,,>),
			typeof(MTuple<,,,,,>),
			typeof(MTuple<,,,,,,>),
			typeof(MTuple<,,,,,,,>),
			typeof(MTuple<,,,,,,,,>),
			typeof(MTuple<,,,,,,,,,>),
	
		};

		internal static int CombineHashCodes(int h1, int h2)
		{
			return (((h1 << 5) + h1) ^ h2);
		}
		internal static int CombineHashCodes(int h1, int h2, int h3)
			=> CombineHashCodes(CombineHashCodes(h1, h2), h3);
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4)
			=> CombineHashCodes(CombineHashCodes(h1, h2), CombineHashCodes(h3, h4));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3), CombineHashCodes(h4, h5));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3), CombineHashCodes(h4, h5, h6));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3, h4), CombineHashCodes(h5, h6, h7));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3, h4), CombineHashCodes(h5, h6, h7, h8));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3, h4, h5), CombineHashCodes(h6, h7, h8, h9));
	
		internal static int CombineHashCodes(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8, int h9, int h10)
			=> CombineHashCodes(CombineHashCodes(h1, h2, h3, h4, h5), CombineHashCodes(h6, h7, h8, h9, h10));
	
	
	}
		

	internal class MTuple<T1>
	{
		public T1 Item1 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1);
		}

		public override int GetHashCode() 
			=> Item1?.GetHashCode() ?? 0;
	}

	internal class MTuple<T1, T2>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5, T6>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
		public T6 Item6 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5, T6>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5)
				&& Equals(Item6, objTuple.Item6);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0,
				Item6?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5, T6, T7>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
		public T6 Item6 { get; set; }
		public T7 Item7 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5, T6, T7>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5)
				&& Equals(Item6, objTuple.Item6)
				&& Equals(Item7, objTuple.Item7);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0,
				Item6?.GetHashCode() ?? 0,
				Item7?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5, T6, T7, T8>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
		public T6 Item6 { get; set; }
		public T7 Item7 { get; set; }
		public T8 Item8 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5, T6, T7, T8>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5)
				&& Equals(Item6, objTuple.Item6)
				&& Equals(Item7, objTuple.Item7)
				&& Equals(Item8, objTuple.Item8);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0,
				Item6?.GetHashCode() ?? 0,
				Item7?.GetHashCode() ?? 0,
				Item8?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
		public T6 Item6 { get; set; }
		public T7 Item7 { get; set; }
		public T8 Item8 { get; set; }
		public T9 Item9 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5)
				&& Equals(Item6, objTuple.Item6)
				&& Equals(Item7, objTuple.Item7)
				&& Equals(Item8, objTuple.Item8)
				&& Equals(Item9, objTuple.Item9);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0,
				Item6?.GetHashCode() ?? 0,
				Item7?.GetHashCode() ?? 0,
				Item8?.GetHashCode() ?? 0,
				Item9?.GetHashCode() ?? 0);
	}

	internal class MTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
	{
		public T1 Item1 { get; set; }
		public T2 Item2 { get; set; }
		public T3 Item3 { get; set; }
		public T4 Item4 { get; set; }
		public T5 Item5 { get; set; }
		public T6 Item6 { get; set; }
		public T7 Item7 { get; set; }
		public T8 Item8 { get; set; }
		public T9 Item9 { get; set; }
		public T10 Item10 { get; set; }
	
		public override bool Equals(object other) 
		{
			if (other == null) return false;

			var objTuple = other as MTuple<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>;

			if (objTuple == null)
				return false;

			return Equals(Item1, objTuple.Item1)
				&& Equals(Item2, objTuple.Item2)
				&& Equals(Item3, objTuple.Item3)
				&& Equals(Item4, objTuple.Item4)
				&& Equals(Item5, objTuple.Item5)
				&& Equals(Item6, objTuple.Item6)
				&& Equals(Item7, objTuple.Item7)
				&& Equals(Item8, objTuple.Item8)
				&& Equals(Item9, objTuple.Item9)
				&& Equals(Item10, objTuple.Item10);
		}

		public override int GetHashCode() 
			=> MutableTuple.CombineHashCodes(Item1?.GetHashCode() ?? 0,
				Item2?.GetHashCode() ?? 0,
				Item3?.GetHashCode() ?? 0,
				Item4?.GetHashCode() ?? 0,
				Item5?.GetHashCode() ?? 0,
				Item6?.GetHashCode() ?? 0,
				Item7?.GetHashCode() ?? 0,
				Item8?.GetHashCode() ?? 0,
				Item9?.GetHashCode() ?? 0,
				Item10?.GetHashCode() ?? 0);
	}
}
