#nullable enable
abstract LinqToDB.DataProvider.DataProviderBase.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
abstract LinqToDB.DataProvider.IdentifierServiceBase.IsFit(LinqToDB.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
abstract LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
abstract LinqToDB.SqlQuery.QueryElement.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
abstract LinqToDB.SqlQuery.QueryElement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
abstract LinqToDB.SqlQuery.SqlExpressionBase.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
abstract LinqToDB.SqlQuery.SqlExpressionBase.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
abstract LinqToDB.SqlQuery.SqlExpressionBase.Precedence.get -> int
abstract LinqToDB.SqlQuery.SqlExpressionBase.SystemType.get -> System.Type?
abstract LinqToDB.SqlQuery.SqlInlinedBase.GetSqlExpression(LinqToDB.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.SqlQuery.ISqlExpression!
abstract LinqToDB.SqlQuery.SqlPredicate.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
abstract LinqToDB.SqlQuery.SqlPredicate.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
abstract LinqToDB.SqlQuery.SqlPredicate.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
abstract LinqToDB.SqlQuery.SqlSourceBase.All.get -> LinqToDB.SqlQuery.SqlField!
abstract LinqToDB.SqlQuery.SqlSourceBase.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
abstract LinqToDB.SqlQuery.SqlSourceBase.Source.get -> LinqToDB.SqlQuery.ISqlTableSource!
abstract LinqToDB.SqlQuery.SqlSourceBase.SqlTableType.get -> LinqToDB.SqlQuery.SqlTableType
abstract LinqToDB.SqlQuery.SqlStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
abstract LinqToDB.SqlQuery.SqlStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
abstract LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.ConvertElement(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
const LinqToDB.Expressions.ChangeTypeExpression.ChangeTypeType = (System.Linq.Expressions.ExpressionType)1000 -> System.Linq.Expressions.ExpressionType
const LinqToDB.ProviderName.Firebird25 = "Firebird.2.5" -> string!
const LinqToDB.ProviderName.Firebird3 = "Firebird.3" -> string!
const LinqToDB.ProviderName.Firebird4 = "Firebird.4" -> string!
const LinqToDB.ProviderName.Firebird5 = "Firebird.5" -> string!
const LinqToDB.ProviderName.MariaDB10 = "MariaDB.10" -> string!
const LinqToDB.ProviderName.MariaDB10MySqlConnector = "MariaDB.10.MySqlConnector" -> string!
const LinqToDB.ProviderName.MariaDB10MySqlData = "MariaDB.10.MySql.Data" -> string!
const LinqToDB.ProviderName.MySql57 = "MySql.5.7" -> string!
const LinqToDB.ProviderName.MySql57MySqlConnector = "MySql.5.7.MySqlConnector" -> string!
const LinqToDB.ProviderName.MySql57MySqlData = "MySql.5.7.MySql.Data" -> string!
const LinqToDB.ProviderName.MySql80 = "MySql.8.0" -> string!
const LinqToDB.ProviderName.MySql80MySqlConnector = "MySql.8.0.MySqlConnector" -> string!
const LinqToDB.ProviderName.MySql80MySqlData = "MySql.8.0.MySql.Data" -> string!
const LinqToDB.Sql.SqlRow.MaxMemberCount = 10 -> int
const LinqToDB.SqlQuery.PseudoFunctions.CONVERT_FORMAT = "$Convert_Format$" -> string!
LinqToDB.Common.DbDataType.WithPrecisionScale(int? precision, int? scale) -> LinqToDB.Common.DbDataType
LinqToDB.Common.Internal.IdentifierBuilder.AddRange(System.Collections.IEnumerable? items) -> LinqToDB.Common.Internal.IdentifierBuilder
LinqToDB.Common.SqlTextWriter
LinqToDB.Common.SqlTextWriter.Append(byte value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(char value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(char value, int repeatCount) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(decimal value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(double value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(float value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(int value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(long value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(object? value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(sbyte value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(short value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(string? value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(System.Text.StringBuilder? value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(uint value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(ulong value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Append(ushort value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendFormat(string! format, object! arg0) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendFormat(string! format, params object![]! args) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendIdentCheck(string! str) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendIndent() -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendIndentIfNeeded() -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendLine() -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendLine(char value) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.AppendLine(string! str) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.Clear() -> void
LinqToDB.Common.SqlTextWriter.DecrementIndent() -> int
LinqToDB.Common.SqlTextWriter.IncrementIndent() -> int
LinqToDB.Common.SqlTextWriter.Indent() -> LinqToDB.Common.SqlTextWriter.IndentScope
LinqToDB.Common.SqlTextWriter.IndentScope
LinqToDB.Common.SqlTextWriter.IndentScope.Dispose() -> void
LinqToDB.Common.SqlTextWriter.IndentScope.IndentScope() -> void
LinqToDB.Common.SqlTextWriter.IndentScope.IndentScope(LinqToDB.Common.SqlTextWriter! writer) -> void
LinqToDB.Common.SqlTextWriter.Length.get -> int
LinqToDB.Common.SqlTextWriter.Length.set -> void
LinqToDB.Common.SqlTextWriter.Replace(string! oldValue, string! newValue, int startIndex, int count) -> LinqToDB.Common.SqlTextWriter!
LinqToDB.Common.SqlTextWriter.SqlTextWriter() -> void
LinqToDB.Common.SqlTextWriter.SqlTextWriter(int capacity) -> void
LinqToDB.Common.SqlTextWriter.SqlTextWriter(System.Text.StringBuilder! stringBuilder) -> void
LinqToDB.Common.SqlTextWriter.StringBuilder.get -> System.Text.StringBuilder!
LinqToDB.Common.SqlTextWriter.ToString(int startIndex, int length) -> string!
LinqToDB.Data.CommandInfo.QueryToAsyncEnumerable<T>() -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryToAsyncEnumerable<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.Common.DbDataType dbDataType) -> void
LinqToDB.Data.DataParameter.DbDataType.get -> LinqToDB.Common.DbDataType
LinqToDB.Data.DataParameter.DbDataType.set -> void
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>() -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>(T template) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.DataContextOptions.DataContextOptions(int? CommandTimeout = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>? MemberTranslators = null) -> void
LinqToDB.DataContextOptions.Deconstruct(out int? CommandTimeout, out System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors, out System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>? MemberTranslators) -> void
LinqToDB.DataContextOptions.MemberTranslators.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>?
LinqToDB.DataContextOptions.MemberTranslators.init -> void
LinqToDB.DataOptions.Apply(LinqToDB.Remote.RemoteDataContextBase! dataContext) -> void
LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor
LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.AccessSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator
LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.AccessMemberTranslator() -> void
LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.AliasesHelper
LinqToDB.DataProvider.ClickHouse.ClickHouseProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.ClickHouse.ClickHouseProviderAdapter.HasFaultyClientDecimalType.get -> bool
LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor
LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ClickHouseSqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions! providerOptions) -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.MakeConversion(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.Common.DbDataType toType, bool isTry, LinqToDB.SqlQuery.ISqlExpression? defaultValue) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator
LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.ClickHouseMemberTranslator() -> void
LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.DataProviderBase.SetProviderField<TP, T>(System.Type! providerFieldType, System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.DataProvider.DB2.DB2ProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor
LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.DB2SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.DB2MathMemberTranslator() -> void
LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MemberTranslator() -> void
LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder
LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.Firebird3SqlBuilder(LinqToDB.DataProvider.IDataProvider! provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.Firebird3SqlBuilder(LinqToDB.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor
LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.Firebird3SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Firebird.Firebird3SqlOptimizer
LinqToDB.DataProvider.Firebird.Firebird3SqlOptimizer.Firebird3SqlOptimizer(LinqToDB.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.DataProvider.Firebird.Firebird4SqlBuilder
LinqToDB.DataProvider.Firebird.Firebird4SqlBuilder.Firebird4SqlBuilder(LinqToDB.DataProvider.IDataProvider! provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.DataProvider.Firebird.FirebirdDataProvider.FirebirdDataProvider(string! name, LinqToDB.DataProvider.Firebird.FirebirdVersion version) -> void
LinqToDB.DataProvider.Firebird.FirebirdDataProvider.Version.get -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.FirebirdSqlBuilder(LinqToDB.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor
LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.FirebirdSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect = 0 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v25 = 1 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v3 = 2 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v4 = 3 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v5 = 4 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.Translation.Firebird5MemberTranslator
LinqToDB.DataProvider.Firebird.Translation.Firebird5MemberTranslator.Firebird5MemberTranslator() -> void
LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator
LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator
LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.FirebirdDateFunctionsTranslator() -> void
LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdMemberTranslator() -> void
LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Alias = 13 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Database = 11 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.DataType = 17 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Field = 1 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.ForeignKey = 3 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Function = 9 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Index = 2 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Keyword = 16 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Other = 18 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Parameter = 14 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.PrimaryKey = 4 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Schema = 12 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Sequence = 6 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.StoredProcedure = 8 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Table = 0 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Trigger = 7 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.UniqueKey = 5 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.Variable = 15 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierKind.View = 10 -> LinqToDB.DataProvider.IdentifierKind
LinqToDB.DataProvider.IdentifierServiceBase
LinqToDB.DataProvider.IdentifierServiceBase.IdentifierServiceBase() -> void
LinqToDB.DataProvider.IdentifierServiceSimple
LinqToDB.DataProvider.IdentifierServiceSimple.IdentifierServiceSimple(int maxLength) -> void
LinqToDB.DataProvider.IdentifierServiceSimple.MaxLength.get -> int
LinqToDB.DataProvider.IDynamicProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.IIdentifierService
LinqToDB.DataProvider.IIdentifierService.CorrectAlias(string! alias) -> string!
LinqToDB.DataProvider.IIdentifierService.IsFit(LinqToDB.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
LinqToDB.DataProvider.Informix.InformixProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor
LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.InformixSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator
LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.InformixMemberTranslator() -> void
LinqToDB.DataProvider.MySql.MySqlDataProvider.MySqlDataProvider(string! name, LinqToDB.DataProvider.MySql.MySqlVersion version, LinqToDB.DataProvider.MySql.MySqlProvider provider) -> void
LinqToDB.DataProvider.MySql.MySqlDataProvider.Provider.get -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlDataProvider.Version.get -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.MySql.MySqlSqlExpressionConvertVisitor
LinqToDB.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.MySqlSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect = 0 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MariaDB10 = 3 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MySql57 = 1 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MySql80 = 2 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator
LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.MySqlMemberTranslator() -> void
LinqToDB.DataProvider.OdbcProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.OleDbProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor
LinqToDB.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor.Oracle12SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor
LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.OracleSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.OracleMathMemberTranslator() -> void
LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMemberTranslator() -> void
LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor
LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.PostgreSQLSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator
LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.PostgreSQLMemberTranslator() -> void
LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor
LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.SapHanaSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.SapHanaMathMemberTranslator() -> void
LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMemberTranslator() -> void
LinqToDB.DataProvider.SimpleServiceProvider
LinqToDB.DataProvider.SimpleServiceProvider.AddService<T>(T! service) -> void
LinqToDB.DataProvider.SimpleServiceProvider.GetService(System.Type! serviceType) -> object?
LinqToDB.DataProvider.SimpleServiceProvider.SimpleServiceProvider() -> void
LinqToDB.DataProvider.SqlCe.SqlCeProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor
LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.SqlCeSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMemberTranslator() -> void
LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor
LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.SQLiteSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.WrapDateTime(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.Common.DbDataType dbDataType) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator
LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.SQLiteMemberTranslator() -> void
LinqToDB.DataProvider.SqlProviderHelper
LinqToDB.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor
LinqToDB.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.SqlServer2005SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor
LinqToDB.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor.SqlServer2008SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor
LinqToDB.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor.SqlServer2012SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor
LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.SqlServerSqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.SqlServer2005MemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator.SqlServer2012DateFunctionsTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012MemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.SqlServer2022MathMemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.SqlServerDateFunctionsTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor
LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.SybaseSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMemberTranslator() -> void
LinqToDB.DataProvider.WrapParametersVisitor
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.All = LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InSelect | LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InUpdateSet | LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InInsertValue | LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InInsertOrUpdate | LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InOutput | LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InMerge -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InInsertOrUpdate = 16 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InInsertValue = 4 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InMerge = 64 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InOutput = 32 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InSelect = 1 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.InUpdateSet = 2 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags.None = 0 -> LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.DataProvider.WrapParametersVisitor.WrapParameters(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.DataProvider.WrapParametersVisitor.WrapFlags wrapFlags) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.DataProvider.WrapParametersVisitor.WrapParametersVisitor(LinqToDB.SqlQuery.VisitMode visitMode) -> void
LinqToDB.Expressions.ChangeTypeExpression
LinqToDB.Expressions.ChangeTypeExpression.ChangeTypeExpression(System.Linq.Expressions.Expression! expression, System.Type! type) -> void
LinqToDB.Expressions.ChangeTypeExpression.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.ChangeTypeExpression.Update(System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.ChangeTypeExpression!
LinqToDB.Expressions.DefaultValueExpression.Equals(LinqToDB.Expressions.DefaultValueExpression! other) -> bool
LinqToDB.Expressions.ExpressionConstants
LinqToDB.Expressions.ExpressionEqualityComparer
LinqToDB.Expressions.ExpressionEqualityComparer.Equals(System.Linq.Expressions.Expression? x, System.Linq.Expressions.Expression? y) -> bool
LinqToDB.Expressions.ExpressionEqualityComparer.GetHashCode(System.Linq.Expressions.Expression? obj) -> int
LinqToDB.Expressions.ExpressionPrinter
LinqToDB.Expressions.ExpressionPrinter.ExpressionPrinter() -> void
LinqToDB.Expressions.ExpressionVisitorBase
LinqToDB.Expressions.ExpressionVisitorBase.ExpressionVisitorBase() -> void
LinqToDB.Expressions.IExpressionEvaluator
LinqToDB.Expressions.IExpressionEvaluator.CanBeEvaluated(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Expressions.IExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Expressions.IPrintableExpression
LinqToDB.Expressions.IPrintableExpression.Print(LinqToDB.Expressions.ExpressionPrinter! expressionPrinter) -> void
LinqToDB.Expressions.PlaceholderExpression
LinqToDB.Expressions.PlaceholderExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.PlaceholderExpression.PlaceholderExpression(System.Linq.Expressions.Expression! innerExpression, LinqToDB.Expressions.PlaceholderType placeholderType) -> void
LinqToDB.Expressions.PlaceholderExpression.PlaceholderType.get -> LinqToDB.Expressions.PlaceholderType
LinqToDB.Expressions.PlaceholderExpression.Update(System.Linq.Expressions.Expression! closureExpression) -> LinqToDB.Expressions.PlaceholderExpression!
LinqToDB.Expressions.PlaceholderType
LinqToDB.Expressions.PlaceholderType.Closure = 0 -> LinqToDB.Expressions.PlaceholderType
LinqToDB.Expressions.PlaceholderType.Converted = 1 -> LinqToDB.Expressions.PlaceholderType
LinqToDB.Expressions.SqlDefaultIfEmptyExpression
LinqToDB.Expressions.SqlDefaultIfEmptyExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.SqlDefaultIfEmptyExpression.NotNullExpressions.get -> System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>!
LinqToDB.Expressions.SqlDefaultIfEmptyExpression.SqlDefaultIfEmptyExpression(System.Linq.Expressions.Expression! innerExpression, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! notNullExpressions) -> void
LinqToDB.Expressions.SqlDefaultIfEmptyExpression.Update(System.Linq.Expressions.Expression! innerExpression, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! notNullExpressions) -> LinqToDB.Expressions.SqlDefaultIfEmptyExpression!
LinqToDB.Expressions.SqlErrorExpression
LinqToDB.Expressions.SqlErrorExpression.BuildContext.get -> object?
LinqToDB.Expressions.SqlErrorExpression.CreateException() -> System.Exception!
LinqToDB.Expressions.SqlErrorExpression.Expression.get -> System.Linq.Expressions.Expression?
LinqToDB.Expressions.SqlErrorExpression.IsCritical.get -> bool
LinqToDB.Expressions.SqlErrorExpression.Message.get -> string?
LinqToDB.Expressions.SqlErrorExpression.ResultType.get -> System.Type!
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(object? buildContext, System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(object? buildContext, System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType, bool isCritical) -> void
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(string! message, System.Type! resultType) -> void
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType) -> void
LinqToDB.Expressions.SqlErrorExpression.WithType(System.Type! type) -> LinqToDB.Expressions.SqlErrorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression
LinqToDB.Expressions.SqlGenericConstructorExpression.AppendAssignment(LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment! assignment) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.Assignment(System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.Expression! expression, bool isMandatory, bool isLoaded) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.IsLoaded.get -> bool
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.IsMandatory.get -> bool
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.MemberInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.WithExpression(System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.WithMember(System.Reflection.MemberInfo! member) -> LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!
LinqToDB.Expressions.SqlGenericConstructorExpression.Assignments.get -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>!
LinqToDB.Expressions.SqlGenericConstructorExpression.ConstructionRoot.get -> System.Linq.Expressions.Expression?
LinqToDB.Expressions.SqlGenericConstructorExpression.Constructor.get -> System.Reflection.ConstructorInfo?
LinqToDB.Expressions.SqlGenericConstructorExpression.ConstructorMethod.get -> System.Reflection.MethodInfo?
LinqToDB.Expressions.SqlGenericConstructorExpression.ConstructType.get -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.Auto = 1 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.Full = 2 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.Incompatible = 0 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.Keys = 3 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.MemberInit = 5 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.MethodCall = 6 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType.New = 4 -> LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Expressions.SqlGenericConstructorExpression.Equals(LinqToDB.Expressions.SqlGenericConstructorExpression? other) -> bool
LinqToDB.Expressions.SqlGenericConstructorExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Expressions.SqlGenericConstructorExpression.NewExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Expressions.SqlGenericConstructorExpression.ObjectType.get -> System.Type!
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.MemberInfo.get -> System.Reflection.MemberInfo?
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.Parameter(System.Linq.Expressions.Expression! expression, System.Reflection.ParameterInfo! parameterInfo, System.Reflection.MemberInfo? memberInfo) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.ParameterInfo.get -> System.Reflection.ParameterInfo!
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.ParameterType.get -> System.Type!
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.WithExpression(System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!
LinqToDB.Expressions.SqlGenericConstructorExpression.Parameters.get -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>!
LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceAssignments(System.Collections.Generic.List<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>! assignment) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceParameters(System.Collections.Generic.List<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>! parameters) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression! basedOn) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression.CreateType createType, System.Type! objectType, System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>? parameters, System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>? assignments, LinqToDB.Mapping.MappingSchema? mappingSchema, System.Linq.Expressions.Expression? constructionRoot) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.MemberInitExpression! memberInitExpression) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.MethodCallExpression! methodCall) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.NewExpression! newExpression) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Type! objectType, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding!>! bindings) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.WithConstructionRoot(System.Linq.Expressions.Expression! constructionRoot) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression.WithMappingSchema(LinqToDB.Mapping.MappingSchema? mappingSchema) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericParamAccessExpression
LinqToDB.Expressions.SqlGenericParamAccessExpression.Constructor.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.SqlGenericParamAccessExpression.Equals(LinqToDB.Expressions.SqlGenericParamAccessExpression? other) -> bool
LinqToDB.Expressions.SqlGenericParamAccessExpression.ParameterInfo.get -> System.Reflection.ParameterInfo!
LinqToDB.Expressions.SqlGenericParamAccessExpression.ParamIndex.get -> int
LinqToDB.Expressions.SqlGenericParamAccessExpression.ParamType.get -> System.Type!
LinqToDB.Expressions.SqlGenericParamAccessExpression.SqlGenericParamAccessExpression(System.Linq.Expressions.Expression! constructor, System.Reflection.ParameterInfo! parameterInfo) -> void
LinqToDB.Expressions.SqlGenericParamAccessExpression.Update(System.Linq.Expressions.Expression! constructor) -> LinqToDB.Expressions.SqlGenericParamAccessExpression!
LinqToDB.Expressions.SqlPathExpression
LinqToDB.Expressions.SqlPathExpression.Equals(LinqToDB.Expressions.SqlPathExpression? other) -> bool
LinqToDB.Expressions.SqlPathExpression.Path.get -> System.Linq.Expressions.Expression![]!
LinqToDB.Expressions.SqlPathExpression.Path.set -> void
LinqToDB.Expressions.SqlPathExpression.SqlPathExpression(System.Linq.Expressions.Expression![]! path, System.Type! type) -> void
LinqToDB.Expressions.SqlPathExpression.Update(System.Linq.Expressions.Expression![]! path) -> LinqToDB.Expressions.SqlPathExpression!
LinqToDB.Expressions.SqlPathExpression.WithType(System.Type! type) -> LinqToDB.Expressions.SqlPathExpression!
LinqToDB.Expressions.SqlPlaceholderExpression
LinqToDB.Expressions.SqlPlaceholderExpression.Alias.get -> string?
LinqToDB.Expressions.SqlPlaceholderExpression.Alias.set -> void
LinqToDB.Expressions.SqlPlaceholderExpression.ConvertType.get -> System.Type!
LinqToDB.Expressions.SqlPlaceholderExpression.Equals(LinqToDB.Expressions.SqlPlaceholderExpression! other) -> bool
LinqToDB.Expressions.SqlPlaceholderExpression.Index.get -> int?
LinqToDB.Expressions.SqlPlaceholderExpression.MakeNotNullable() -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.MakeNullable() -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.Path.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.SqlPlaceholderExpression.SelectQuery.get -> LinqToDB.SqlQuery.SelectQuery?
LinqToDB.Expressions.SqlPlaceholderExpression.Sql.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.SqlPlaceholderExpression(LinqToDB.SqlQuery.SelectQuery? selectQuery, LinqToDB.SqlQuery.ISqlExpression! sql, System.Linq.Expressions.Expression! path, System.Type? convertType = null, string? alias = null, int? index = null, System.Linq.Expressions.Expression? trackingPath = null) -> void
LinqToDB.Expressions.SqlPlaceholderExpression.TrackingPath.get -> System.Linq.Expressions.Expression?
LinqToDB.Expressions.SqlPlaceholderExpression.WithAlias(string? alias) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.WithPath(System.Linq.Expressions.Expression! path) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.WithSelectQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.WithSql(LinqToDB.SqlQuery.ISqlExpression! sqlExpression) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.WithTrackingPath(System.Linq.Expressions.Expression! trackingPath) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.WithType(System.Type! type) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Expressions.SqlQueryDependentAttributeHelper
LinqToDB.Expressions.SqlQueryRootExpression
LinqToDB.Expressions.SqlQueryRootExpression.ContextType.get -> System.Type!
LinqToDB.Expressions.SqlQueryRootExpression.Equals(LinqToDB.Expressions.SqlQueryRootExpression? other) -> bool
LinqToDB.Expressions.SqlQueryRootExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Expressions.SqlQueryRootExpression.SqlQueryRootExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! contextType) -> void
LinqToDB.Expressions.TagExpression
LinqToDB.Expressions.TagExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.TagExpression.Tag.get -> object!
LinqToDB.Expressions.TagExpression.TagExpression(System.Linq.Expressions.Expression! innerExpression, object! tag) -> void
LinqToDB.Expressions.TagExpression.Update(System.Linq.Expressions.Expression! innerExpression, object! tag) -> LinqToDB.Expressions.TagExpression!
LinqToDB.Expressions.TypeMapper.BuildFactory<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! newFunc) -> System.Func<T, object!>!
LinqToDB.Expressions.TypeMapper.BuildFactory<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! newFunc) -> System.Func<T1, T2, T3, object!>!
LinqToDB.Expressions.TypeMapper.BuildFactory<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! newFunc) -> System.Func<T1, T2, object!>!
LinqToDB.Expressions.TypeMapper.BuildFactory<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! newFunc) -> System.Func<object!>!
LinqToDB.Expressions.TypeMapper.BuildTypedFactory<T, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! newFunc) -> System.Func<T, TRes>!
LinqToDB.Expressions.TypeMapper.BuildTypedFactory<T1, T2, T3, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! newFunc) -> System.Func<T1, T2, T3, TRes>!
LinqToDB.Expressions.TypeMapper.BuildTypedFactory<T1, T2, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! newFunc) -> System.Func<T1, T2, TRes>!
LinqToDB.Expressions.TypeMapper.BuildTypedFactory<TR, TRes>(System.Linq.Expressions.Expression<System.Func<TR>!>! newFunc) -> System.Func<TRes>!
LinqToDB.ExprParameterAttribute.DoNotParametrize.get -> bool
LinqToDB.ExprParameterAttribute.DoNotParametrize.set -> void
LinqToDB.ExprParameterAttribute.ParameterKind.get -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterAttribute.ParameterKind.set -> void
LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Default = 0 -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Sequence = 1 -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Values = 2 -> LinqToDB.ExprParameterKind
LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query! query, LinqToDB.IDataContext! parametersContext, int queryNumber, System.Linq.Expressions.Expression! expression, object?[]? parameters, object?[]? preambles) -> LinqToDB.Linq.IQueryRunner!
LinqToDB.Infrastructure.IInfrastructure<T>
LinqToDB.Infrastructure.IInfrastructure<T>.Instance.get -> T
LinqToDB.Infrastructure.ServiceProviderExtensions
LinqToDB.Infrastructure.TypeExtensions
LinqToDB.Interceptors.Internal.EntityBindingInterceptor
LinqToDB.Interceptors.Internal.EntityBindingInterceptor.EntityBindingInterceptor() -> void
LinqToDB.Interceptors.Internal.IEntityBindingInterceptor
LinqToDB.Interceptors.Internal.IEntityBindingInterceptor.ConvertConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression! expression) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Interceptors.IQueryExpressionInterceptor
LinqToDB.Interceptors.IQueryExpressionInterceptor.ProcessExpression(System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs! args) -> System.Linq.Expressions.Expression!
LinqToDB.Interceptors.QueryExpressionArgs
LinqToDB.Interceptors.QueryExpressionArgs.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.QueryExpressionArgs.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.AssociationExpression = 1 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.Query = 0 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.QueryFilter = 2 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.Kind.get -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.QueryExpressionArgs(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind kind) -> void
LinqToDB.Linq.Builder.EvaluationHelper
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.AggregateExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeCompiled(System.Linq.Expressions.Expression! expr, bool inProjection) -> bool
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expr, bool inProjection) -> bool
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.OptimizeExpressionTree(System.Linq.Expressions.Expression! expression, bool inProjection) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.OptimizeExpressionTreeTransformer(System.Linq.Expressions.Expression! expr, bool inProjection) -> LinqToDB.Expressions.TransformInfo
LinqToDB.Linq.Builder.IToSqlConverter.ToSql(object! value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.Linq.Builder.SqlQueryExtensionData.ToDebugString() -> string!
LinqToDB.Linq.IQueryContext.IsContinuousRun.get -> bool
LinqToDB.Linq.IQueryContext.IsContinuousRun.set -> void
LinqToDB.Linq.IResultEnumerable<T>
LinqToDB.Linq.LinqException.LinqException(string! message) -> void
LinqToDB.Linq.Query.GetExpression() -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Query.IsParametrized(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Linq.Query.SetDynamicAccessors(System.Collections.Generic.List<(System.Linq.Expressions.Expression! used, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.IDataContext!, LinqToDB.Mapping.MappingSchema!, System.Linq.Expressions.Expression!>! accessorFunc)>? dynamicAccessors) -> void
LinqToDB.Linq.QueryInfo.IsContinuousRun.get -> bool
LinqToDB.Linq.QueryInfo.IsContinuousRun.set -> void
LinqToDB.Linq.Translation.CombinedMemberTranslator
LinqToDB.Linq.Translation.CombinedMemberTranslator.Add(LinqToDB.Linq.Translation.IMemberTranslator! memberTranslator) -> void
LinqToDB.Linq.Translation.CombinedMemberTranslator.CombinedMemberTranslator() -> void
LinqToDB.Linq.Translation.CombinedMemberTranslator.CombinedMemberTranslator(System.Collections.Generic.IEnumerable<LinqToDB.Linq.Translation.IMemberTranslator!>! translators) -> void
LinqToDB.Linq.Translation.CombinedMemberTranslator.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.CombinedMemberTranslator.Translators.get -> System.Collections.Generic.List<LinqToDB.Linq.Translation.IMemberTranslator!>!
LinqToDB.Linq.Translation.CombinedMemberTranslator.Translators.set -> void
LinqToDB.Linq.Translation.DateFunctionsTranslatorBase
LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.DateFunctionsTranslatorBase() -> void
LinqToDB.Linq.Translation.IMemberTranslator
LinqToDB.Linq.Translation.IMemberTranslator.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.ISqlExpressionFactory
LinqToDB.Linq.Translation.ISqlExpressionFactory.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Linq.Translation.ISqlExpressionFactory.GetDbDataType(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.Common.DbDataType
LinqToDB.Linq.Translation.ISqlExpressionFactory.GetDbDataType(System.Type! type) -> LinqToDB.Common.DbDataType
LinqToDB.Linq.Translation.ITranslationContext
LinqToDB.Linq.Translation.ITranslationContext.CanBeCompiled(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
LinqToDB.Linq.Translation.ITranslationContext.CanBeEvaluated(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Linq.Translation.ITranslationContext.CreateErrorExpression(System.Linq.Expressions.Expression! basedOn, string! message) -> LinqToDB.Expressions.SqlErrorExpression!
LinqToDB.Linq.Translation.ITranslationContext.CreatePlaceholder(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.ISqlExpression! sqlExpression, System.Linq.Expressions.Expression! basedOn) -> LinqToDB.Expressions.SqlPlaceholderExpression!
LinqToDB.Linq.Translation.ITranslationContext.CurrentAlias.get -> string?
LinqToDB.Linq.Translation.ITranslationContext.CurrentColumnDescriptor.get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Linq.Translation.ITranslationContext.CurrentSelectQuery.get -> LinqToDB.SqlQuery.SelectQuery!
LinqToDB.Linq.Translation.ITranslationContext.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Linq.Translation.ITranslationContext.Evaluate(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Linq.Translation.ITranslationContext.ExpressionFactory.get -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
LinqToDB.Linq.Translation.ITranslationContext.IsPreferServerSide(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
LinqToDB.Linq.Translation.ITranslationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
LinqToDB.Linq.Translation.ITranslationContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Linq.Translation.ITranslationContext.Translate(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags = LinqToDB.Linq.Translation.TranslationFlags.Sql) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Translation.ITranslationContext.TryEvaluate(LinqToDB.SqlQuery.ISqlExpression! expression, out object? result) -> bool
LinqToDB.Linq.Translation.MathMemberTranslatorBase
LinqToDB.Linq.Translation.MathMemberTranslatorBase.MathMemberTranslatorBase() -> void
LinqToDB.Linq.Translation.MemberTranslatorBase
LinqToDB.Linq.Translation.MemberTranslatorBase.CombinedMemberTranslator -> LinqToDB.Linq.Translation.CombinedMemberTranslator!
LinqToDB.Linq.Translation.MemberTranslatorBase.MemberTranslatorBase() -> void
LinqToDB.Linq.Translation.MemberTranslatorBase.Registration -> LinqToDB.Linq.Translation.TranslationRegistration!
LinqToDB.Linq.Translation.MemberTranslatorBase.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.MemberTranslatorBase.TranslateNoRequiredExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression? objExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags, bool skipIfParameter = true) -> LinqToDB.Expressions.SqlPlaceholderExpression?
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ProcessConvertToBoolean(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ProcessGetValueOrDefault(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ProcessSqlConvert(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ProcessToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ProviderMemberTranslatorDefault() -> void
LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateNoRequiredObjectExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression? objExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Expressions.SqlPlaceholderExpression?
LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions
LinqToDB.Linq.Translation.SqlTypesTranslationDefault
LinqToDB.Linq.Translation.SqlTypesTranslationDefault.MakeSqlTypeExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! basedOn, System.Func<LinqToDB.Common.DbDataType, LinqToDB.Common.DbDataType>? correctFunc = null) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Translation.SqlTypesTranslationDefault.MakeSqlTypeExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! basedOn, System.Type! type, System.Func<LinqToDB.Common.DbDataType, LinqToDB.Common.DbDataType>? correctFunc = null) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Translation.SqlTypesTranslationDefault.SqlTypesTranslationDefault() -> void
LinqToDB.Linq.Translation.SqlTypesTranslationDefault.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.TranslationContextExtensions
LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.Expression = 1 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.None = 0 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.Sql = 2 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationRegistration
LinqToDB.Linq.Translation.TranslationRegistration.GetMemberReplacementInfo(System.Reflection.MemberInfo! member) -> LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement?
LinqToDB.Linq.Translation.TranslationRegistration.GetTranslation(System.Reflection.MemberInfo! member) -> LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc?
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Deconstruct(out System.Linq.Expressions.LambdaExpression! Pattern, out System.Linq.Expressions.LambdaExpression! Replacement) -> void
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.MemberReplacement(LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement! original) -> void
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.MemberReplacement(System.Linq.Expressions.LambdaExpression! Pattern, System.Linq.Expressions.LambdaExpression! Replacement) -> void
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Pattern.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Pattern.init -> void
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Replacement.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Replacement.init -> void
LinqToDB.Linq.Translation.TranslationRegistration.ProvideReplacement(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.TranslationRegistration.RegisterConstructorInternal(System.Linq.Expressions.LambdaExpression! memberAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
LinqToDB.Linq.Translation.TranslationRegistration.RegisterMemberInternal(System.Linq.Expressions.LambdaExpression! memberAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
LinqToDB.Linq.Translation.TranslationRegistration.RegisterMemberReplacement(System.Linq.Expressions.LambdaExpression! pattern, System.Linq.Expressions.LambdaExpression! replacement) -> void
LinqToDB.Linq.Translation.TranslationRegistration.RegisterMethodInternal(System.Linq.Expressions.LambdaExpression! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch) -> void
LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc
LinqToDB.Linq.Translation.TranslationRegistration.TranslateMemberAccessFunc
LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc
LinqToDB.Linq.Translation.TranslationRegistration.TranslationRegistration() -> void
LinqToDB.Linq.Translation.TranslationRegistrationExtensions
LinqToDB.Mapping.EntityDescriptor.QueryFilterLambda.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.SqlQuery.SqlDataType! dataType) -> void
LinqToDB.Mapping.MappingSchema.GetDbDataType(System.Type! type) -> LinqToDB.Common.DbDataType
LinqToDB.Mapping.Nullability
LinqToDB.Mapping.QueryFilterAttribute.FilterLambda.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.QueryFilterAttribute.FilterLambda.set -> void
LinqToDB.Mapping.SpecialPropertyInfo
LinqToDB.Mapping.SpecialPropertyInfo.Equals(LinqToDB.Mapping.SpecialPropertyInfo? other) -> bool
LinqToDB.Mapping.SpecialPropertyInfo.SpecialPropertyInfo(System.Type! declaringType, System.Type! columnType, string! memberName) -> void
LinqToDB.Reflection.MemberInfoEqualityComparer
LinqToDB.Reflection.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo? x, System.Reflection.MemberInfo? y) -> bool
LinqToDB.Reflection.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo! obj) -> int
LinqToDB.Reflection.MemberInfoEqualityComparer.MemberInfoEqualityComparer() -> void
LinqToDB.Reflection.TypeAccessor.GetMemberByName(string! memberName) -> LinqToDB.Reflection.MemberAccessor?
LinqToDB.Reflection.VirtualPropertyInfoBase
LinqToDB.Reflection.VirtualPropertyInfoBase.VirtualPropertyInfoBase() -> void
LinqToDB.Remote.LinqServiceInfo.MethodCallTranslatorType.get -> string!
LinqToDB.Remote.LinqServiceInfo.MethodCallTranslatorType.set -> void
LinqToDB.Remote.RemoteDataContextBase.InitServiceProvider(LinqToDB.DataProvider.SimpleServiceProvider! serviceProvider) -> void
LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>
LinqToDB.Sql.ExtensionAttribute.BuildFunctionsChain<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expr, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, out System.Linq.Expressions.Expression? error) -> System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam!>?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.CanBeNull.get -> bool?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpression(System.Linq.Expressions.Expression! expr, bool unwrap, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, bool? inlineParameters) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.EvaluateExpression(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Evaluator.get -> LinqToDB.Expressions.IExpressionEvaluator!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ExtensionBuilder(TContext context, LinqToDB.Expressions.IExpressionEvaluator! evaluator, string? configuration, object? builderValue, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! extension, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, System.Reflection.MemberInfo! member, System.Linq.Expressions.Expression![]! arguments, LinqToDB.Sql.IsNullableType isNullable, bool? canBeNull) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(int index, bool unwrap, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(string! argName, bool unwrap, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsConvertible.get -> bool
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsConvertible.set -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IGroupBy.Cube<T>(T cubeKey) -> T
LinqToDB.Sql.IGroupBy.GroupingSets<T>(T setsExpression) -> T
LinqToDB.Sql.IGroupBy.Rollup<T>(T rollupKey) -> T
LinqToDB.Sql.ISqExtensionBuilder.CanBeNull.get -> bool?
LinqToDB.Sql.ISqExtensionBuilder.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.EvaluateExpression(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Sql.ISqExtensionBuilder.GetExpression(int index, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.GetExpression(string! argName, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.IsConvertible.get -> bool
LinqToDB.Sql.ISqExtensionBuilder.IsConvertible.set -> void
LinqToDB.Sql.ISqExtensionBuilder.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.SqlExtension.Flags.get -> LinqToDB.SqlQuery.SqlFlags
LinqToDB.Sql.SqlExtension.Flags.set -> void
LinqToDB.Sql.SqlExtension.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.SqlExtension.IsNullable.set -> void
LinqToDB.Sql.SqlExtension.SqlExtension(System.Type? systemType, string! expr, int precedence, int chainPrecedence, bool isAggregate, bool isWindowFunction, bool isPure, bool isPredicate, LinqToDB.Sql.IsNullableType isNullable, bool? canBeNull, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
LinqToDB.Sql.SqlID.ToSql(object! value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.Sql.SqlRow
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value10.get -> T10
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value9.get -> T9
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value9.get -> T9
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3>
LinqToDB.Sql.SqlRow<T1, T2, T3>.SqlRow(T1 value1, T2 value2, T3 value3) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2>.SqlRow(T1 value1, T2 value2) -> void
LinqToDB.Sql.SqlRow<T1, T2>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1>
LinqToDB.Sql.SqlRow<T1>.SqlRow(T1 value1) -> void
LinqToDB.Sql.SqlRow<T1>.Value1.get -> T1
LinqToDB.SqlProvider.BasicSqlBuilder.AliasesContext.get -> LinqToDB.SqlQuery.AliasesContext!
LinqToDB.SqlProvider.BasicSqlBuilder.AliasesContext.set -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(LinqToDB.Common.DbDataType type, bool forCreateTable, bool canBeNull) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.Common.DbDataType dataType) -> System.Text.StringBuilder!
LinqToDB.SqlProvider.BasicSqlBuilder.BuildInsertOrUpdateQueryAsOnConflictUpdateOrNothing(LinqToDB.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildJoinTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlTableSource! tableSource, LinqToDB.SqlQuery.SqlJoinedTable! join, ref int joinCounter) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.SqlQuery.AliasesContext! aliases, int startIndent = 0) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlConditionExpressionAsFunction(string! funcName, LinqToDB.SqlQuery.SqlConditionExpression! conditionExpression) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.Common.DbDataType? dataType, object? value) -> void
LinqToDB.SqlProvider.BasicSqlBuilder.ConvertCaseToConditions(LinqToDB.SqlQuery.SqlCaseExpression! caseExpression, int start) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.BasicSqlBuilder.NullabilityContext.get -> LinqToDB.SqlQuery.NullabilityContext!
LinqToDB.SqlProvider.BasicSqlBuilder.NullabilityContext.set -> void
LinqToDB.SqlProvider.BasicSqlBuilder.Optimize(LinqToDB.SqlQuery.IQueryElement? element, bool reduceBinary) -> LinqToDB.SqlQuery.IQueryElement?
LinqToDB.SqlProvider.BasicSqlBuilder.PrepareSearchCondition(LinqToDB.SqlQuery.SqlSearchCondition! searchCondition) -> LinqToDB.SqlQuery.SqlSearchCondition!
LinqToDB.SqlProvider.BasicSqlBuilder.Step.FromClause = 8 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.GroupByClause = 10 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.HavingClause = 11 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.InsertClause = 6 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.MergeInsertClause = 7 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.MergeUpdateClause = 5 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.OffsetLimit = 13 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.OrderByClause = 12 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.Output = 15 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.QueryExtensions = 16 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.Tag = 14 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.TypedExpression = 17 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlBuilder.Step.WhereClause = 9 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectMultiTableQueries(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectUpdateSetters(LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement) -> void
LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectUpdateTable(LinqToDB.SqlQuery.SqlUpdateStatement! statement, bool leaveUpdateTableInQuery, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlUpdateStatement!
LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdate(LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlUpdateStatement!
LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdatePostgreSqlite(LinqToDB.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlStatement! statement) -> bool
LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeQueries(LinqToDB.SqlQuery.IQueryElement! startFrom, LinqToDB.SqlQuery.IQueryElement! root, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlProvider.BasicSqlOptimizer.RemoveUpdateTableIfPossible(LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.SqlQuery.SqlTable! table, out LinqToDB.SqlQuery.SqlTableSource? source) -> bool
LinqToDB.SqlProvider.ISqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.Common.DbDataType dataType) -> System.Text.StringBuilder!
LinqToDB.SqlProvider.ISqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.SqlQuery.AliasesContext! aliases, int startIndent = 0) -> void
LinqToDB.SqlProvider.ISqlOptimizer.ConvertSkipTake(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
LinqToDB.SqlProvider.ISqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
LinqToDB.SqlProvider.ISqlOptimizer.CreateOptimizerVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor!
LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlStatement! statement) -> bool
LinqToDB.SqlProvider.OptimizationContext.ConvertVisitor.get -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
LinqToDB.SqlProvider.OptimizationContext.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.SqlProvider.OptimizationContext.EvaluationContext.get -> LinqToDB.SqlQuery.EvaluationContext!
LinqToDB.SqlProvider.OptimizationContext.IsAlreadyOptimizedAndConverted.get -> bool
LinqToDB.SqlProvider.OptimizationContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlProvider.SqlProviderFlags? sqlProviderFlags, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor! optimizerVisitor, LinqToDB.SqlProvider.SqlExpressionConvertVisitor! convertVisitor, bool isParameterOrderDepended, bool isAlreadyOptimizedAndConverted, System.Func<LinqToDB.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
LinqToDB.SqlProvider.OptimizationContext.Optimize<T>(T? element, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext, bool isInsideNot, bool reduceBinary) -> T?
LinqToDB.SqlProvider.OptimizationContext.OptimizeAndConvert<T>(T? element, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext, bool isInsideNot) -> T?
LinqToDB.SqlProvider.OptimizationContext.OptimizeAndConvertAll<T>(T! element, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext) -> T!
LinqToDB.SqlProvider.OptimizationContext.OptimizerVisitor.get -> LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor!
LinqToDB.SqlProvider.OptimizationContext.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags?
LinqToDB.SqlProvider.OptimizationContext.TransformationInfo.get -> LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.SqlProvider.OptimizationContext.TransformationInfoConvert.get -> LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Add<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertBooleanToCase(LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.Common.DbDataType toType) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesceToBinaryFunc(LinqToDB.SqlQuery.SqlFunction! func, string! funcName, bool supportsParameters = true) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertRowExprExpr(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSearchStringPredicateViaLike(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertToBooleanSearchCondition(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Dec(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Div<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.EvaluationContext.get -> LinqToDB.SqlQuery.EvaluationContext!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.FloorBeforeConvert(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.SqlCastExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Inc(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsForPredicate -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsInsideNot -> bool
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Mul<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.NullabilityContext -> LinqToDB.SqlQuery.NullabilityContext!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.OptimizationContext -> LinqToDB.SqlProvider.OptimizationContext!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Optimize(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.RowComparisonFallback(LinqToDB.SqlQuery.SqlPredicate.Operator op, LinqToDB.SqlQuery.SqlRowExpression! row1, LinqToDB.SqlQuery.SqlRowExpression! row2, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.RowIsNullFallback(LinqToDB.SqlQuery.SqlRowExpression! row, bool isNot) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags?
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Sub<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.TryConvertToValue(LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitQueries -> bool
LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor
LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.CanBeEvaluateNoParameters(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.SqlExpressionOptimizerVisitor(bool allowModify) -> void
LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.TryEvaluate(LinqToDB.SqlQuery.IQueryElement! expr, out object? result) -> bool
LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.TryEvaluateNoParameters(LinqToDB.SqlQuery.IQueryElement! expr, out object? result) -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsAccessBuggyLeftJoinConstantNullability.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsAccessBuggyLeftJoinConstantNullability.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsAggregationDistinctSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsAggregationDistinctSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryShouldNotContainParentIsNotNull.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryShouldNotContainParentIsNotNull.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceAndTakeSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceAndTakeSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsCorrelatedSubQueryTakeSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsCorrelatedSubQueryTakeSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsCrossApplyJoinSupportsCondition.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsCrossApplyJoinSupportsCondition.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsCTESupportsOrdering.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsCTESupportsOrdering.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsDerivedTableOrderBySupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsDerivedTableOrderBySupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsJoinDerivedTableWithTakeInvalid.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsJoinDerivedTableWithTakeInvalid.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsMultiTablesSupportsJoins.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsMultiTablesSupportsJoins.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsNestedJoinsSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsNestedJoinsSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsOuterApplyJoinSupportsCondition.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsOuterApplyJoinSupportsCondition.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsOuterJoinSupportsInnerJoin.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsOuterJoinSupportsInnerJoin.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsRecursiveCTEJoinWithConditionSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsRecursiveCTEJoinWithConditionSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsRowNumberWithoutOrderBySupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsRowNumberWithoutOrderBySupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsSubQuerySkipSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsSubQuerySkipSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsSubqueryWithParentReferenceInJoinConditionSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsSubqueryWithParentReferenceInJoinConditionSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsSupportsJoinWithoutCondition.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsSupportsJoinWithoutCondition.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSkipTakeSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSkipTakeSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateTakeSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateTakeSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsWindowFunctionsSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsWindowFunctionsSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanComparison.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanComparison.set -> void
LinqToDB.SqlProvider.ValueToSqlConverter.CanConvert(LinqToDB.Common.DbDataType dataType, LinqToDB.DataOptions! options, object? value) -> bool
LinqToDB.SqlProvider.ValueToSqlConverter.Convert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Common.DbDataType? dataType, LinqToDB.DataOptions! options, object? value) -> System.Text.StringBuilder!
LinqToDB.SqlProvider.ValueToSqlConverter.SetConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.Common.DbDataType, LinqToDB.DataOptions!, object!>? converter) -> void
LinqToDB.SqlProvider.ValueToSqlConverter.TryConvert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Common.DbDataType? dataType, LinqToDB.DataOptions! options, object? value) -> bool
LinqToDB.SqlQuery.ClauseBase.Having.get -> LinqToDB.SqlQuery.SqlHavingClause!
LinqToDB.SqlQuery.ClauseBase<T1>
LinqToDB.SqlQuery.ClauseBase<T1>.ClauseBase(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.SqlQuery.ClauseBase<T1>.From.get -> LinqToDB.SqlQuery.SqlFromClause!
LinqToDB.SqlQuery.ClauseBase<T1>.GroupBy.get -> LinqToDB.SqlQuery.SqlGroupByClause!
LinqToDB.SqlQuery.ClauseBase<T1>.Having.get -> LinqToDB.SqlQuery.SqlHavingClause!
LinqToDB.SqlQuery.ClauseBase<T1>.OrderBy.get -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.ClauseBase<T1>.Select.get -> LinqToDB.SqlQuery.SqlSelectClause!
LinqToDB.SqlQuery.ClauseBase<T1>.SelectQuery.get -> LinqToDB.SqlQuery.SelectQuery!
LinqToDB.SqlQuery.CteClause.Fields.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlField!>!
LinqToDB.SqlQuery.DebugStringExtensions
LinqToDB.SqlQuery.EvaluationContext.IsParametersInitialized.get -> bool
LinqToDB.SqlQuery.IQueryElement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.IQueryExtension
LinqToDB.SqlQuery.IQueryExtension.Accept(LinqToDB.SqlQuery.QueryElementVisitor! visitor) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.ISqlExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.ISqlPredicate.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.ISqlPredicate.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension) -> void
LinqToDB.SqlQuery.ISqlTableExtensionBuilder.Build(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension, LinqToDB.SqlQuery.SqlTable! table, string! alias) -> void
LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>?
LinqToDB.SqlQuery.JoinType.Cross = 3 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.CrossApply = 4 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.Full = 7 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.FullApply = 9 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.OuterApply = 5 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.Right = 6 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.JoinType.RightApply = 8 -> LinqToDB.SqlQuery.JoinType
LinqToDB.SqlQuery.NullabilityContext
LinqToDB.SqlQuery.NullabilityContext.CanBeNull(LinqToDB.SqlQuery.ISqlExpression! expression) -> bool
LinqToDB.SqlQuery.NullabilityContext.InQuery.get -> LinqToDB.SqlQuery.SelectQuery?
LinqToDB.SqlQuery.NullabilityContext.IsEmpty.get -> bool
LinqToDB.SqlQuery.NullabilityContext.NullabilityContext(LinqToDB.SqlQuery.SelectQuery! inQuery) -> void
LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.IfAllParametersNullable = 8 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.IfAnyParameterNullable = 3 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.NotNullable = 2 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.Nullable = 1 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.SameAsFirstParameter = 4 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.SameAsLastParameter = 7 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.SameAsSecondParameter = 5 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.SameAsThirdParameter = 6 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.ParametersNullabilityType.Undefined = 0 -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.PredicateExtensions
LinqToDB.SqlQuery.QueryElement
LinqToDB.SqlQuery.QueryElement.QueryElement() -> void
LinqToDB.SqlQuery.QueryElementCorrectVisitor
LinqToDB.SqlQuery.QueryElementCorrectVisitor.QueryElementCorrectVisitor(LinqToDB.SqlQuery.VisitMode visitMode, LinqToDB.SqlQuery.QueryElementVisitor! visitor, LinqToDB.SqlQuery.IQueryElement! toReplace, LinqToDB.SqlQuery.IQueryElement! replaceBy) -> void
LinqToDB.SqlQuery.QueryElementTextWriter
LinqToDB.SqlQuery.QueryElementTextWriter.AddVisited(LinqToDB.SqlQuery.IQueryElement! element) -> bool
LinqToDB.SqlQuery.QueryElementTextWriter.Append(byte value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(char value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(char value, int repeatCount) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(decimal value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(double value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(float value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(int value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(long value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(object? value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(sbyte value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(short value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(string? value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(System.Text.StringBuilder? value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(uint value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(ulong value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Append(ushort value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendFormat(string! format, object! arg0) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendFormat(string! format, params object![]! args) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendIdentCheck(string! str) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendLine() -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendLine(char value) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.AppendLine(string! str) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.Indent() -> int
LinqToDB.SqlQuery.QueryElementTextWriter.IndentScope() -> LinqToDB.Common.SqlTextWriter.IndentScope
LinqToDB.SqlQuery.QueryElementTextWriter.Length.get -> int
LinqToDB.SqlQuery.QueryElementTextWriter.Length.set -> void
LinqToDB.SqlQuery.QueryElementTextWriter.Nullability.get -> LinqToDB.SqlQuery.NullabilityContext!
LinqToDB.SqlQuery.QueryElementTextWriter.QueryElementTextWriter() -> void
LinqToDB.SqlQuery.QueryElementTextWriter.QueryElementTextWriter(LinqToDB.SqlQuery.NullabilityContext! nullability) -> void
LinqToDB.SqlQuery.QueryElementTextWriter.RemoveVisited(LinqToDB.SqlQuery.IQueryElement! element) -> void
LinqToDB.SqlQuery.QueryElementTextWriter.Replace(string! oldValue, string! newValue, int startIndex, int count) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.QueryElementTextWriter.ToString(int startIndex, int length) -> string!
LinqToDB.SqlQuery.QueryElementTextWriter.UnIndent() -> int
LinqToDB.SqlQuery.QueryElementType.BetweenPredicate = 20 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.Column = 28 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.Comment = 63 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.CompareTo = 73 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.ConditionalInsertClause = 56 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.CreateTableStatement = 57 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.CteClause = 44 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.DeleteStatement = 53 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.DropTableStatement = 58 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.ExprExprPredicate = 17 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.ExprPredicate = 16 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.FalsePredicate = 15 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.FromClause = 36 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.FuncLikePredicate = 26 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.GroupByClause = 39 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.GroupingSet = 62 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.HavingClause = 38 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.InListPredicate = 25 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.InsertClause = 33 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.InsertOrUpdateStatement = 51 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.InsertStatement = 50 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.InSubQueryPredicate = 24 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.IsDistinctPredicate = 22 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.IsNullPredicate = 21 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.IsTruePredicate = 23 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.JoinedTable = 31 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.LikePredicate = 18 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.MergeOperationClause = 61 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.MergeStatement = 54 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.MultiInsertStatement = 55 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.NotPredicate = 13 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.OrderByClause = 40 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.OrderByItem = 41 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.OutputClause = 48 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SearchCondition = 29 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SearchStringPredicate = 19 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SelectClause = 32 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SelectStatement = 49 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SetExpression = 35 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SetOperator = 42 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlAliasPlaceholder = 11 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlAnchor = 5 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlBinaryExpression = 7 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlCase = 71 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlCast = 68 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlCoalesce = 69 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlCondition = 70 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlCteTable = 45 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlDataType = 9 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlExtension = 64 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlInlinedExpression = 65 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlInlinedToSqlExpression = 66 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlNullabilityExpression = 4 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlObjectExpression = 6 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlQuery = 27 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlQueryExtension = 67 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlRawSqlTable = 46 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlRow = 12 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlSimpleCase = 72 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlTable = 10 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlTableLikeSource = 60 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlValue = 8 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.SqlValuesTable = 47 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.TableSource = 30 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.TruePredicate = 14 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.TruncateTableStatement = 59 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.UpdateClause = 34 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.UpdateStatement = 52 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.WhereClause = 37 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementType.WithClause = 43 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementVisitor
LinqToDB.SqlQuery.QueryElementVisitor.CreateInvalidVisitModeException(string? methodName = null) -> System.Exception!
LinqToDB.SqlQuery.QueryElementVisitor.QueryElementVisitor(LinqToDB.SqlQuery.VisitMode visitMode) -> void
LinqToDB.SqlQuery.QueryElementVisitor.VisitElements<T>(System.Collections.Generic.List<T!>? list1, LinqToDB.SqlQuery.VisitMode mode) -> System.Collections.Generic.List<T!>?
LinqToDB.SqlQuery.QueryElementVisitor.VisitElements<T>(System.Collections.Generic.List<T!>? list1, LinqToDB.SqlQuery.VisitMode mode, System.Func<T!, T!>! transformFunc) -> System.Collections.Generic.List<T!>?
LinqToDB.SqlQuery.QueryElementVisitor.VisitElements<T>(T![]? arr1, LinqToDB.SqlQuery.VisitMode mode) -> T![]?
LinqToDB.SqlQuery.QueryElementVisitor.VisitListOfArrays<T>(System.Collections.Generic.List<T![]!>? list1, LinqToDB.SqlQuery.VisitMode mode) -> System.Collections.Generic.List<T![]!>?
LinqToDB.SqlQuery.QueryElementVisitor.VisitMode.get -> LinqToDB.SqlQuery.VisitMode
LinqToDB.SqlQuery.QueryInformation.RootQuery.get -> LinqToDB.SqlQuery.SelectQuery!
LinqToDB.SqlQuery.SelectQuery.Cleanup() -> void
LinqToDB.SqlQuery.SelectQuery.CloneQuery() -> LinqToDB.SqlQuery.SelectQuery!
LinqToDB.SqlQuery.SelectQuery.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>?
LinqToDB.SqlQuery.SelectQuery.Having.get -> LinqToDB.SqlQuery.SqlHavingClause!
LinqToDB.SqlQuery.SelectQuery.IsLimited.get -> bool
LinqToDB.SqlQuery.SelectQuery.IsSimpleButWhere.get -> bool
LinqToDB.SqlQuery.SelectQueryOptimizerVisitor
LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.Optimize(LinqToDB.SqlQuery.IQueryElement! root, LinqToDB.SqlQuery.IQueryElement! rootElement, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, bool removeWeakJoins, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.EvaluationContext! evaluationContext, params LinqToDB.SqlQuery.IQueryElement![]! dependencies) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.SelectQueryOptimizerVisitor() -> void
LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.Many = 4 -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.One = 2 -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.OneOrMany = LinqToDB.SqlQuery.SourceCardinality.One | LinqToDB.SqlQuery.SourceCardinality.Many -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.Unknown = 0 -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.Zero = 1 -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.ZeroOrMany = LinqToDB.SqlQuery.SourceCardinality.Zero | LinqToDB.SqlQuery.SourceCardinality.Many -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SourceCardinality.ZeroOrOne = LinqToDB.SqlQuery.SourceCardinality.Zero | LinqToDB.SqlQuery.SourceCardinality.One -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SqlAliasPlaceholder.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlAliasPlaceholder.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.SqlAnchor
LinqToDB.SqlQuery.SqlAnchor.AnchorKind.get -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.Deleted = 0 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.Inserted = 1 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.TableAsSelfColumn = 4 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.TableAsSelfColumnOrField = 5 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.TableName = 3 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum.TableSource = 2 -> LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.SqlQuery.SqlAnchor.CanBeNull.get -> bool
LinqToDB.SqlQuery.SqlAnchor.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlAnchor.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.SqlAnchor.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.SqlQuery.SqlAnchor.Modify(LinqToDB.SqlQuery.ISqlExpression! expression) -> void
LinqToDB.SqlQuery.SqlAnchor.Precedence.get -> int
LinqToDB.SqlQuery.SqlAnchor.SqlAnchor(LinqToDB.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.SqlQuery.SqlAnchor.AnchorKindEnum anchorKind) -> void
LinqToDB.SqlQuery.SqlAnchor.SqlExpression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlAnchor.SystemType.get -> System.Type?
LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2, int precedence = 0) -> void
LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2, int precedence = 0) -> void
LinqToDB.SqlQuery.SqlBinaryExpression.Type.get -> LinqToDB.Common.DbDataType
LinqToDB.SqlQuery.SqlCaseExpression
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.CaseItem(LinqToDB.SqlQuery.ISqlPredicate! condition, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.Condition.get -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.Condition.set -> void
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.Modify(LinqToDB.SqlQuery.ISqlPredicate! condition, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.ResultExpression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.ResultExpression.set -> void
LinqToDB.SqlQuery.SqlCaseExpression.CaseItem.Update(LinqToDB.SqlQuery.ISqlPredicate! condition, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
LinqToDB.SqlQuery.SqlCaseExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!>!
LinqToDB.SqlQuery.SqlCaseExpression.ElseExpression.get -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.SqlQuery.SqlCaseExpression.Modify(LinqToDB.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.SqlQuery.SqlCaseExpression.Modify(System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!>! cases, LinqToDB.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.SqlQuery.SqlCaseExpression.SqlCaseExpression(LinqToDB.Common.DbDataType dataType, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!>! cases, LinqToDB.SqlQuery.ISqlExpression? elseExpression) -> void
LinqToDB.SqlQuery.SqlCaseExpression.Type.get -> LinqToDB.Common.DbDataType
LinqToDB.SqlQuery.SqlCastExpression
LinqToDB.SqlQuery.SqlCastExpression.Expression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlCastExpression.FromType.get -> LinqToDB.SqlQuery.SqlDataType?
LinqToDB.SqlQuery.SqlCastExpression.IsMandatory.get -> bool
LinqToDB.SqlQuery.SqlCastExpression.MakeMandatory() -> LinqToDB.SqlQuery.SqlCastExpression!
LinqToDB.SqlQuery.SqlCastExpression.Modify(LinqToDB.Common.DbDataType toType, LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.SqlDataType? fromType) -> void
LinqToDB.SqlQuery.SqlCastExpression.SqlCastExpression(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.Common.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType, bool isMandatory = false) -> void
LinqToDB.SqlQuery.SqlCastExpression.ToType.get -> LinqToDB.Common.DbDataType
LinqToDB.SqlQuery.SqlCastExpression.Type.get -> LinqToDB.Common.DbDataType
LinqToDB.SqlQuery.SqlCastExpression.WithExpression(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.SqlCastExpression!
LinqToDB.SqlQuery.SqlCastExpression.WithToType(LinqToDB.Common.DbDataType toType) -> LinqToDB.SqlQuery.SqlCastExpression!
LinqToDB.SqlQuery.SqlCoalesceExpression
LinqToDB.SqlQuery.SqlCoalesceExpression.Expressions.get -> LinqToDB.SqlQuery.ISqlExpression![]!
LinqToDB.SqlQuery.SqlCoalesceExpression.Modify(params LinqToDB.SqlQuery.ISqlExpression![]! expressions) -> void
LinqToDB.SqlQuery.SqlCoalesceExpression.SqlCoalesceExpression(params LinqToDB.SqlQuery.ISqlExpression![]! expressions) -> void
LinqToDB.SqlQuery.SqlComment.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.SqlCompareToExpression
LinqToDB.SqlQuery.SqlCompareToExpression.Expression1.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlCompareToExpression.Expression2.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlCompareToExpression.Modify(LinqToDB.SqlQuery.ISqlExpression! expression1, LinqToDB.SqlQuery.ISqlExpression! expression2) -> void
LinqToDB.SqlQuery.SqlCompareToExpression.SqlCompareToExpression(LinqToDB.SqlQuery.ISqlExpression! expression1, LinqToDB.SqlQuery.ISqlExpression! expression2) -> void
LinqToDB.SqlQuery.SqlConditionalInsertClause.Modify(LinqToDB.SqlQuery.SqlInsertClause! insert, LinqToDB.SqlQuery.SqlSearchCondition? when) -> void
LinqToDB.SqlQuery.SqlConditionExpression
LinqToDB.SqlQuery.SqlConditionExpression.Condition.get -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlConditionExpression.FalseValue.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlConditionExpression.Modify(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.ISqlExpression! trueValue, LinqToDB.SqlQuery.ISqlExpression! falseValue) -> void
LinqToDB.SqlQuery.SqlConditionExpression.SqlConditionExpression(LinqToDB.SqlQuery.ISqlPredicate! condition, LinqToDB.SqlQuery.ISqlExpression! trueValue, LinqToDB.SqlQuery.ISqlExpression! falseValue) -> void
LinqToDB.SqlQuery.SqlConditionExpression.TrueValue.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlCreateTableStatement.Modify(LinqToDB.SqlQuery.SqlTable! table) -> void
LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.CteClause! cte, System.Type! entityType) -> void
LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.SqlCteTable! table, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlField!>! fields, LinqToDB.SqlQuery.CteClause? cte) -> void
LinqToDB.SqlQuery.SqlDataType.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlDropTableStatement.Modify(LinqToDB.SqlQuery.SqlTable! table) -> void
LinqToDB.SqlQuery.SqlExpression.CanBeNullNullable.get -> bool?
LinqToDB.SqlQuery.SqlExpression.NullabilityType.get -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.SqlExpression.SqlExpression(System.Type? systemType, string! expr, int precedence, LinqToDB.SqlQuery.SqlFlags flags, LinqToDB.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlExpressionBase
LinqToDB.SqlQuery.SqlExpressionBase.SqlExpressionBase() -> void
LinqToDB.SqlQuery.SqlField.SqlField() -> void
LinqToDB.SqlQuery.SqlField.SqlField(LinqToDB.Common.DbDataType dbDataType, string? name, bool canBeNull) -> void
LinqToDB.SqlQuery.SqlFromClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlFunction.CanBeNullNullable.get -> bool?
LinqToDB.SqlQuery.SqlFunction.FunctionFlags.get -> LinqToDB.SqlQuery.SqlFlags
LinqToDB.SqlQuery.SqlFunction.NullabilityType.get -> LinqToDB.SqlQuery.ParametersNullabilityType
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, bool isAggregate, bool isPure, int precedence, LinqToDB.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, bool isAggregate, bool isPure, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, bool isAggregate, int precedence, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, bool isAggregate, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(System.Type! systemType, string! name, bool isAggregate, bool isPure, int precedence, LinqToDB.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.Type.get -> LinqToDB.Common.DbDataType
LinqToDB.SqlQuery.SqlFunction.WithName(string! name) -> LinqToDB.SqlQuery.SqlFunction!
LinqToDB.SqlQuery.SqlFunction.WithParameters(LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.SqlFunction!
LinqToDB.SqlQuery.SqlGetValue
LinqToDB.SqlQuery.SqlGetValue.ColumnDescriptor.get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.SqlQuery.SqlGetValue.GetValueFunc.get -> System.Func<object!, object!>?
LinqToDB.SqlQuery.SqlGetValue.Sql.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlGetValue.SqlGetValue(LinqToDB.SqlQuery.ISqlExpression! sql, System.Type! valueType, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, System.Func<object!, object!>? getValueFunc) -> void
LinqToDB.SqlQuery.SqlGetValue.ValueType.get -> System.Type!
LinqToDB.SqlQuery.SqlGetValue.WithSql(LinqToDB.SqlQuery.ISqlExpression! sql) -> LinqToDB.SqlQuery.SqlGetValue!
LinqToDB.SqlQuery.SqlGroupByClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlGroupingSet.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlGroupingSet.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.SqlHavingClause
LinqToDB.SqlQuery.SqlHavingClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlHavingClause.IsEmpty.get -> bool
LinqToDB.SqlQuery.SqlHavingClause.SearchCondition.get -> LinqToDB.SqlQuery.SqlSearchCondition!
LinqToDB.SqlQuery.SqlInlinedBase
LinqToDB.SqlQuery.SqlInlinedBase.InlinedValue.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlInlinedBase.Modify(LinqToDB.SqlQuery.SqlParameter! parameter, LinqToDB.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.SqlQuery.SqlInlinedBase.Parameter.get -> LinqToDB.SqlQuery.SqlParameter!
LinqToDB.SqlQuery.SqlInlinedBase.SqlInlinedBase(LinqToDB.SqlQuery.SqlParameter! parameter, LinqToDB.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.SqlQuery.SqlInlinedSqlExpression
LinqToDB.SqlQuery.SqlInlinedSqlExpression.SqlInlinedSqlExpression(LinqToDB.SqlQuery.SqlParameter! parameter, LinqToDB.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.SqlQuery.SqlInlinedToSqlExpression
LinqToDB.SqlQuery.SqlInlinedToSqlExpression.SqlInlinedToSqlExpression(LinqToDB.SqlQuery.SqlParameter! parameter, LinqToDB.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.SqlQuery.SqlInsertClause.Items.set -> void
LinqToDB.SqlQuery.SqlInsertClause.Modify(LinqToDB.SqlQuery.SqlTable? into) -> void
LinqToDB.SqlQuery.SqlInsertStatement.SqlInsertStatement(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.SqlQuery.SqlJoinedTable.Cardinality.get -> LinqToDB.SqlQuery.SourceCardinality
LinqToDB.SqlQuery.SqlJoinedTable.Cardinality.set -> void
LinqToDB.SqlQuery.SqlMergeStatement.Modify(LinqToDB.SqlQuery.SqlTableSource! target, LinqToDB.SqlQuery.SqlTableLikeSource! source, LinqToDB.SqlQuery.SqlSearchCondition! on, LinqToDB.SqlQuery.SqlOutputClause? output) -> void
LinqToDB.SqlQuery.SqlMultiInsertStatement.Modify(LinqToDB.SqlQuery.SqlTableLikeSource! source) -> void
LinqToDB.SqlQuery.SqlNullabilityExpression
LinqToDB.SqlQuery.SqlNullabilityExpression.CanBeNull.get -> bool
LinqToDB.SqlQuery.SqlNullabilityExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlNullabilityExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.SqlNullabilityExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.SqlQuery.SqlNullabilityExpression.Modify(LinqToDB.SqlQuery.ISqlExpression! sqlExpression) -> void
LinqToDB.SqlQuery.SqlNullabilityExpression.Precedence.get -> int
LinqToDB.SqlQuery.SqlNullabilityExpression.SqlExpression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlNullabilityExpression.SqlNullabilityExpression(LinqToDB.SqlQuery.ISqlExpression! sqlExpression, bool isNullable) -> void
LinqToDB.SqlQuery.SqlNullabilityExpression.SystemType.get -> System.Type?
LinqToDB.SqlQuery.SqlObjectExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlObjectExpression.SqlObjectExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlGetValue![]! infoParameters) -> void
LinqToDB.SqlQuery.SqlOrderByClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr, bool isDescending, bool isPositioned) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.ExprAsc(LinqToDB.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.ExprDesc(LinqToDB.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field, bool isDescending, bool isPositioned) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.FieldAsc(LinqToDB.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByClause.FieldDesc(LinqToDB.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.SqlQuery.SqlOrderByClause!
LinqToDB.SqlQuery.SqlOrderByItem.IsPositioned.get -> bool
LinqToDB.SqlQuery.SqlOrderByItem.SqlOrderByItem(LinqToDB.SqlQuery.ISqlExpression! expression, bool isDescending, bool isPositioned) -> void
LinqToDB.SqlQuery.SqlOutputClause.Modify(LinqToDB.SqlQuery.SqlTable? insertedTable, LinqToDB.SqlQuery.SqlTable? deletedTable, LinqToDB.SqlQuery.SqlTable? outputTable) -> void
LinqToDB.SqlQuery.SqlOutputClause.OutputItems.set -> void
LinqToDB.SqlQuery.SqlParameter.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlParameter.NeedsCast.get -> bool
LinqToDB.SqlQuery.SqlParameter.NeedsCast.set -> void
LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.EvaluationContext! context, bool insideNot) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlPredicate.FalsePredicate
LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.FalsePredicate() -> void
LinqToDB.SqlQuery.SqlPredicate.FuncLike.Modify(LinqToDB.SqlQuery.SqlFunction! function) -> void
LinqToDB.SqlQuery.SqlPredicate.FuncLike.Update(LinqToDB.SqlQuery.SqlFunction! function) -> LinqToDB.SqlQuery.SqlPredicate.FuncLike!
LinqToDB.SqlQuery.SqlPredicate.InList.Modify(LinqToDB.SqlQuery.ISqlExpression! expr1) -> void
LinqToDB.SqlQuery.SqlPredicate.InSubQuery.DoNotConvert.get -> bool
LinqToDB.SqlQuery.SqlPredicate.InSubQuery.InSubQuery(LinqToDB.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.SqlQuery.SelectQuery! subQuery, bool doNotConvert) -> void
LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Modify(LinqToDB.SqlQuery.ISqlExpression! exp1, LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.SqlQuery.SqlPredicate.IsTrue.IsTrue(LinqToDB.SqlQuery.ISqlExpression! exp1, LinqToDB.SqlQuery.ISqlExpression! trueValue, LinqToDB.SqlQuery.ISqlExpression! falseValue, bool? withNull, bool isNot) -> void
LinqToDB.SqlQuery.SqlPredicate.IsTrue.Reduce(LinqToDB.SqlQuery.NullabilityContext! nullability, bool insideNot) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlPredicate.Not
LinqToDB.SqlQuery.SqlPredicate.Not.Modify(LinqToDB.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.SqlQuery.SqlPredicate.Not.Not(LinqToDB.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.SqlQuery.SqlPredicate.Not.Predicate.get -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlPredicate.SearchString.Modify(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.SqlQuery.ISqlExpression! caseSensitive) -> void
LinqToDB.SqlQuery.SqlPredicate.TruePredicate
LinqToDB.SqlQuery.SqlPredicate.TruePredicate.TruePredicate() -> void
LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector
LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.CorrectColumnNesting(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.HasSelectQuery.get -> bool
LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.SqlQueryColumnNestingCorrector() -> void
LinqToDB.SqlQuery.SqlQueryColumnUsageCollector
LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.CollectUsedColumns(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.SqlQueryColumnUsageCollector() -> void
LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.UsedColumns.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.SqlColumn!>!
LinqToDB.SqlQuery.SqlQueryExtension.Arguments.init -> void
LinqToDB.SqlQuery.SqlQueryExtension.BuilderType.init -> void
LinqToDB.SqlQuery.SqlQueryExtension.Configuration.init -> void
LinqToDB.SqlQuery.SqlQueryExtension.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.SqlQueryExtension.Scope.init -> void
LinqToDB.SqlQuery.SqlQueryExtension.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.SqlQueryOrderByOptimizer
LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.IsOptimized.get -> bool
LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.OptimizeOrderBy(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags) -> void
LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.SqlQueryOrderByOptimizer() -> void
LinqToDB.SqlQuery.SqlRowExpression
LinqToDB.SqlQuery.SqlRowExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlRowExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.SqlRowExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other) -> bool
LinqToDB.SqlQuery.SqlRowExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.SqlQuery.SqlRowExpression.Precedence.get -> int
LinqToDB.SqlQuery.SqlRowExpression.SqlRowExpression(LinqToDB.SqlQuery.ISqlExpression![]! values) -> void
LinqToDB.SqlQuery.SqlRowExpression.SystemType.get -> System.Type?
LinqToDB.SqlQuery.SqlRowExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.SqlRowExpression.Values.get -> LinqToDB.SqlQuery.ISqlExpression![]!
LinqToDB.SqlQuery.SqlSearchCondition.Add(LinqToDB.SqlQuery.ISqlPredicate! predicate) -> LinqToDB.SqlQuery.SqlSearchCondition!
LinqToDB.SqlQuery.SqlSearchCondition.AddRange(System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlPredicate!>! predicates) -> LinqToDB.SqlQuery.SqlSearchCondition!
LinqToDB.SqlQuery.SqlSearchCondition.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlSearchCondition.Deconstruct(out System.Collections.Generic.List<LinqToDB.SqlQuery.ISqlPredicate!>! predicates) -> void
LinqToDB.SqlQuery.SqlSearchCondition.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlSearchCondition.IsAnd.get -> bool
LinqToDB.SqlQuery.SqlSearchCondition.IsAnd.set -> void
LinqToDB.SqlQuery.SqlSearchCondition.IsFalse() -> bool
LinqToDB.SqlQuery.SqlSearchCondition.IsOr.get -> bool
LinqToDB.SqlQuery.SqlSearchCondition.IsOr.set -> void
LinqToDB.SqlQuery.SqlSearchCondition.IsTrue() -> bool
LinqToDB.SqlQuery.SqlSearchCondition.Predicates.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.ISqlPredicate!>!
LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr = false) -> void
LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, LinqToDB.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, LinqToDB.SqlQuery.ISqlPredicate! predicate1, LinqToDB.SqlQuery.ISqlPredicate! predicate2) -> void
LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlPredicate!>! predicates) -> void
LinqToDB.SqlQuery.SqlSelectClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlSelectStatement.SqlSelectStatement(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.SqlQuery.SqlSetOperator.Modify(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.CaseExpression(LinqToDB.SqlQuery.ISqlExpression! matchValue, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.MatchValue.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.MatchValue.set -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.Modify(LinqToDB.SqlQuery.ISqlExpression! matchValue, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.ResultExpression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.ResultExpression.set -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression.Update(LinqToDB.SqlQuery.ISqlExpression! matchValue, LinqToDB.SqlQuery.ISqlExpression! resultExpression) -> LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression!
LinqToDB.SqlQuery.SqlSimpleCaseExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>!
LinqToDB.SqlQuery.SqlSimpleCaseExpression.ElseExpression.get -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.SqlQuery.SqlSimpleCaseExpression.Modify(LinqToDB.SqlQuery.ISqlExpression! primaryExpression, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>! cases, LinqToDB.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.SqlQuery.SqlSimpleCaseExpression.PrimaryExpression.get -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlQuery.SqlSimpleCaseExpression.SqlSimpleCaseExpression(LinqToDB.Common.DbDataType dataType, LinqToDB.SqlQuery.ISqlExpression! primaryExpression, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>! cases, LinqToDB.SqlQuery.ISqlExpression? elseExpression) -> void
LinqToDB.SqlQuery.SqlSourceBase
LinqToDB.SqlQuery.SqlSourceBase.SourceID.get -> int
LinqToDB.SqlQuery.SqlSourceBase.SqlSourceBase() -> void
LinqToDB.SqlQuery.SqlSourceBase.SqlSourceBase(int sourceId) -> void
LinqToDB.SqlQuery.SqlTable.Fields.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlField!>!
LinqToDB.SqlQuery.SqlTableSource.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlTableSource.Modify(LinqToDB.SqlQuery.ISqlTableSource! source) -> void
LinqToDB.SqlQuery.SqlUpdateClause.HasComparison.get -> bool
LinqToDB.SqlQuery.SqlUpdateClause.HasComparison.set -> void
LinqToDB.SqlQuery.SqlUpdateClause.Items.set -> void
LinqToDB.SqlQuery.SqlUpdateClause.Keys.set -> void
LinqToDB.SqlQuery.SqlUpdateClause.Modify(LinqToDB.SqlQuery.SqlTable? table, LinqToDB.SqlQuery.SqlTableSource? tableSource) -> void
LinqToDB.SqlQuery.SqlUpdateClause.TableSource.get -> LinqToDB.SqlQuery.SqlTableSource?
LinqToDB.SqlQuery.SqlUpdateClause.TableSource.set -> void
LinqToDB.SqlQuery.SqlUpdateStatement.SqlUpdateStatement(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.SqlQuery.SqlValue.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlValuesTable.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlWhereClause.Cleanup() -> void
LinqToDB.SqlQuery.SqlWithClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
LinqToDB.SqlQuery.VisitMode
LinqToDB.SqlQuery.VisitMode.Modify = 1 -> LinqToDB.SqlQuery.VisitMode
LinqToDB.SqlQuery.VisitMode.ReadOnly = 0 -> LinqToDB.SqlQuery.VisitMode
LinqToDB.SqlQuery.VisitMode.Transform = 2 -> LinqToDB.SqlQuery.VisitMode
LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor
LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor.QueryElementReplacingVisitor() -> void
LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor.Replace(LinqToDB.SqlQuery.IQueryElement! element, System.Collections.Generic.IDictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! replacements, params LinqToDB.SqlQuery.IQueryElement![]! toIgnore) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor.SqlQueryActionVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor.Visit(LinqToDB.SqlQuery.IQueryElement! root, bool visitAll, System.Action<LinqToDB.SqlQuery.IQueryElement!>! visitAction) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.SqlQueryActionVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Visit(TContext context, LinqToDB.SqlQuery.IQueryElement! root, bool visitAll, System.Action<TContext, LinqToDB.SqlQuery.IQueryElement!>! visitAction) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor.Clone(LinqToDB.SqlQuery.IQueryElement! element, System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>? cloneFunc) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor.SqlQueryCloneVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.Clone(LinqToDB.SqlQuery.IQueryElement! element, TContext context, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! cloneFunc) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.SqlQueryCloneVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitorBase
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitorBase.PerformClone(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitorBase.RegisterReplacements(System.Collections.Generic.IReadOnlyDictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! replacements) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitorBase.SqlQueryCloneVisitorBase() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.ColumnExpression.get -> LinqToDB.SqlQuery.ISqlExpression?
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Context.get -> TContext
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Convert(LinqToDB.SqlQuery.IQueryElement! element, TContext context, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertFunc, bool withStack) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.SqlQueryConvertVisitor(bool allowMutation) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.AllowMutation.get -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.ParentElement.get -> LinqToDB.SqlQuery.IQueryElement?
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.PerformConvert(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.SqlQueryConvertVisitorBase(bool allowMutation, LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Stack.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.IQueryElement!>?
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Stack.set -> void
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.WithStack.get -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.WithStack.set -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Find(TContext context, LinqToDB.SqlQuery.IQueryElement! root, LinqToDB.SqlQuery.IQueryElement! skip, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.SqlQuery.IQueryElement?
LinqToDB.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.SqlQueryFindExceptVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor.Find(LinqToDB.SqlQuery.IQueryElement! root, System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.SqlQuery.IQueryElement?
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor.SqlQueryFindVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Find(TContext context, LinqToDB.SqlQuery.IQueryElement! root, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.SqlQuery.IQueryElement?
LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.SqlQueryFindVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryHelperVisitorBase
LinqToDB.SqlQuery.Visitors.SqlQueryHelperVisitorBase.SqlQueryHelperVisitorBase() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.CreateErrorMessage(bool sourceInQuery, LinqToDB.SqlQuery.IQueryElement! element) -> System.Exception!
LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.SqlQueryNestingValidationVisitor(bool isSubQuery, LinqToDB.SqlQuery.IQueryElement! forStatement) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor.SqlQueryParentFirstVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Visit(LinqToDB.SqlQuery.IQueryElement! root, bool visitAll, System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! action) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.SqlQueryParentFirstVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Visit(TContext context, LinqToDB.SqlQuery.IQueryElement! root, bool visitAll, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! action) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.Cleanup() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.ErrorMessage.get -> string?
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValid.get -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidQuery(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, bool forColumn, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidSubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery, out string? errorMessage) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.SetInvalid(string! errorMessage) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.SqlQueryValidatorVisitor() -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.AddReplacements(System.Collections.Generic.IReadOnlyDictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! replacements) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.GetReplacement(LinqToDB.SqlQuery.IQueryElement! element, out LinqToDB.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetReplacement(LinqToDB.SqlQuery.IQueryElement! element, out LinqToDB.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.IsReplaced(LinqToDB.SqlQuery.IQueryElement! element) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.RegisterReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.Version.get -> int
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.SetTransformationInfo(LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.SqlQueryVisitor(LinqToDB.SqlQuery.VisitMode visitMode, LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetReplacement(LinqToDB.SqlQuery.IQueryElement! element, out LinqToDB.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.IsReplaced(LinqToDB.SqlQuery.IQueryElement! element) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.RegisterReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> void
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.Version.get -> int
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.VisitorTransformationInfo() -> void
override LinqToDB.Common.SqlTextWriter.ToString() -> string!
override LinqToDB.DataProvider.Access.AccessODBCDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.EscapeLikeCharacters(LinqToDB.SqlQuery.ISqlExpression! expression, ref LinqToDB.SqlQuery.ISqlExpression? escape) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.EscapeLikePattern(string! str) -> string!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.ClickHouseDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeEscapeCharacter.get -> string!
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.DB2DataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.BuildSkipFirst(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.CreateSqlBuilder() -> LinqToDB.SqlProvider.ISqlBuilder!
override LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.LimitFormat(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.OffsetFirst.get -> bool
override LinqToDB.DataProvider.Firebird.Firebird3SqlBuilder.OffsetFormat(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.GetCaseSensitiveParameter(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> bool?
override LinqToDB.DataProvider.Firebird.Firebird3SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.DataProvider.Firebird.Firebird4SqlBuilder.BuildJoinType(LinqToDB.SqlQuery.SqlJoinedTable! join, LinqToDB.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.DataProvider.Firebird.Firebird4SqlBuilder.CreateSqlBuilder() -> LinqToDB.SqlProvider.ISqlBuilder!
override LinqToDB.DataProvider.Firebird.FirebirdDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildDataTypeFromDataType(LinqToDB.Common.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildOffsetLimit(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildParameter(LinqToDB.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildSkipFirst(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildTypedExpression(LinqToDB.Common.DbDataType dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeValueParameterSupport.get -> bool
override LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.VisitExprPredicate(LinqToDB.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
override LinqToDB.DataProvider.Firebird.Translation.Firebird5MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Firebird.Translation.FirebirdMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.IdentifierServiceSimple.IsFit(LinqToDB.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
override LinqToDB.DataProvider.Informix.InformixDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.MySql.MySqlDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.MySql.Translation.MySqlMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
override LinqToDB.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
override LinqToDB.DataProvider.Oracle.OracleDataProvider.CreateIdentifierService() -> LinqToDB.DataProvider.IIdentifierService!
override LinqToDB.DataProvider.Oracle.OracleDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlExpression(LinqToDB.SqlQuery.SqlExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Oracle.Translation.OracleMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildDataTypeFromDataType(LinqToDB.Common.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildTypedExpression(LinqToDB.Common.DbDataType dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
override LinqToDB.DataProvider.SapHana.SapHanaDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SapHana.Translation.SapHanaMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.SqlCeDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.SQLiteDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.BuildDataTypeFromDataType(LinqToDB.Common.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.IsNestedJoinParenthesisRequired.get -> bool
override LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor.ProcessConversion(LinqToDB.SqlQuery.SqlCastExpression! cast, out LinqToDB.SqlQuery.ISqlExpression! result) -> bool
override LinqToDB.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SqlServer.SqlServerDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.SybaseDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlCastExpression(LinqToDB.SqlQuery.SqlCastExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlInsertClause(LinqToDB.SqlQuery.SqlInsertClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlMergeOperationClause(LinqToDB.SqlQuery.SqlMergeOperationClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlOutputClause(LinqToDB.SqlQuery.SqlOutputClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlParameter(LinqToDB.SqlQuery.SqlParameter! sqlParameter) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlSelectClause(LinqToDB.SqlQuery.SqlSelectClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.WrapParametersVisitor.VisitSqlSetExpression(LinqToDB.SqlQuery.SqlSetExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.Expressions.ChangeTypeExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.ChangeTypeExpression.GetHashCode() -> int
override LinqToDB.Expressions.ChangeTypeExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.ChangeTypeExpression.ToString() -> string!
override LinqToDB.Expressions.ChangeTypeExpression.Type.get -> System.Type!
override LinqToDB.Expressions.DefaultValueExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.DefaultValueExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.DefaultValueExpression.GetHashCode() -> int
override LinqToDB.Expressions.ExpressionPrinter.ToString() -> string!
override LinqToDB.Expressions.ExpressionPrinter.Visit(System.Linq.Expressions.Expression? expression) -> System.Linq.Expressions.Expression?
override LinqToDB.Expressions.ExpressionPrinter.VisitBinary(System.Linq.Expressions.BinaryExpression! binaryExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitBlock(System.Linq.Expressions.BlockExpression! blockExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitConditional(System.Linq.Expressions.ConditionalExpression! conditionalExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitConstant(System.Linq.Expressions.ConstantExpression! constantExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitDefault(System.Linq.Expressions.DefaultExpression! defaultExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitExtension(System.Linq.Expressions.Expression! extensionExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitGoto(System.Linq.Expressions.GotoExpression! gotoExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitIndex(System.Linq.Expressions.IndexExpression! indexExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitInvocation(System.Linq.Expressions.InvocationExpression! invocationExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitLabel(System.Linq.Expressions.LabelExpression! labelExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitLambda<T>(System.Linq.Expressions.Expression<T>! lambdaExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitLoop(System.Linq.Expressions.LoopExpression! loopExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitMember(System.Linq.Expressions.MemberExpression! memberExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitMemberInit(System.Linq.Expressions.MemberInitExpression! memberInitExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression! methodCallExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitNew(System.Linq.Expressions.NewExpression! newExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitNewArray(System.Linq.Expressions.NewArrayExpression! newArrayExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitParameter(System.Linq.Expressions.ParameterExpression! parameterExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitSwitch(System.Linq.Expressions.SwitchExpression! switchExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitTry(System.Linq.Expressions.TryExpression! tryExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression! typeBinaryExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionPrinter.VisitUnary(System.Linq.Expressions.UnaryExpression! unaryExpression) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.ExpressionVisitorBase.Visit(System.Linq.Expressions.Expression? node) -> System.Linq.Expressions.Expression?
override LinqToDB.Expressions.PlaceholderExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.PlaceholderExpression.CanReduce.get -> bool
override LinqToDB.Expressions.PlaceholderExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.PlaceholderExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.PlaceholderExpression.ToString() -> string!
override LinqToDB.Expressions.PlaceholderExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.CanReduce.get -> bool
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.ToString() -> string!
override LinqToDB.Expressions.SqlDefaultIfEmptyExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlErrorExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlErrorExpression.CanReduce.get -> bool
override LinqToDB.Expressions.SqlErrorExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlErrorExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlErrorExpression.ToString() -> string!
override LinqToDB.Expressions.SqlErrorExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlGenericConstructorExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.ToString() -> string!
override LinqToDB.Expressions.SqlGenericConstructorExpression.CanReduce.get -> bool
override LinqToDB.Expressions.SqlGenericConstructorExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.SqlGenericConstructorExpression.GetHashCode() -> int
override LinqToDB.Expressions.SqlGenericConstructorExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.ToString() -> string!
override LinqToDB.Expressions.SqlGenericConstructorExpression.ToString() -> string!
override LinqToDB.Expressions.SqlGenericConstructorExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlGenericParamAccessExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlGenericParamAccessExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.SqlGenericParamAccessExpression.GetHashCode() -> int
override LinqToDB.Expressions.SqlGenericParamAccessExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlGenericParamAccessExpression.ToString() -> string!
override LinqToDB.Expressions.SqlGenericParamAccessExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlPathExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlPathExpression.CanReduce.get -> bool
override LinqToDB.Expressions.SqlPathExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.SqlPathExpression.GetHashCode() -> int
override LinqToDB.Expressions.SqlPathExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlPathExpression.ToString() -> string!
override LinqToDB.Expressions.SqlPathExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlPlaceholderExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.SqlPlaceholderExpression.GetHashCode() -> int
override LinqToDB.Expressions.SqlPlaceholderExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlPlaceholderExpression.ToString() -> string!
override LinqToDB.Expressions.SqlPlaceholderExpression.Type.get -> System.Type!
override LinqToDB.Expressions.SqlQueryRootExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.SqlQueryRootExpression.Equals(object? obj) -> bool
override LinqToDB.Expressions.SqlQueryRootExpression.GetHashCode() -> int
override LinqToDB.Expressions.SqlQueryRootExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.SqlQueryRootExpression.ToString() -> string!
override LinqToDB.Expressions.SqlQueryRootExpression.Type.get -> System.Type!
override LinqToDB.Expressions.TagExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.TagExpression.CanReduce.get -> bool
override LinqToDB.Expressions.TagExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.TagExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.TagExpression.ToString() -> string!
override LinqToDB.Expressions.TagExpression.Type.get -> System.Type!
override LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateOverrideHandler(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Equals(object? obj) -> bool
override LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.GetHashCode() -> int
override LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.ToString() -> string!
override LinqToDB.Mapping.AssociationDescriptor.ToString() -> string!
override LinqToDB.Mapping.SpecialPropertyInfo.Attributes.get -> System.Reflection.PropertyAttributes
override LinqToDB.Mapping.SpecialPropertyInfo.CanRead.get -> bool
override LinqToDB.Mapping.SpecialPropertyInfo.CanWrite.get -> bool
override LinqToDB.Mapping.SpecialPropertyInfo.DeclaringType.get -> System.Type!
override LinqToDB.Mapping.SpecialPropertyInfo.Equals(object? obj) -> bool
override LinqToDB.Mapping.SpecialPropertyInfo.GetAccessors(bool nonPublic) -> System.Reflection.MethodInfo![]!
override LinqToDB.Mapping.SpecialPropertyInfo.GetCustomAttributes(bool inherit) -> object![]!
override LinqToDB.Mapping.SpecialPropertyInfo.GetCustomAttributes(System.Type! attributeType, bool inherit) -> object![]!
override LinqToDB.Mapping.SpecialPropertyInfo.GetCustomAttributesData() -> System.Collections.Generic.IList<System.Reflection.CustomAttributeData!>!
override LinqToDB.Mapping.SpecialPropertyInfo.GetGetMethod(bool nonPublic) -> System.Reflection.MethodInfo!
override LinqToDB.Mapping.SpecialPropertyInfo.GetHashCode() -> int
override LinqToDB.Mapping.SpecialPropertyInfo.GetIndexParameters() -> System.Reflection.ParameterInfo![]!
override LinqToDB.Mapping.SpecialPropertyInfo.GetSetMethod(bool nonPublic) -> System.Reflection.MethodInfo!
override LinqToDB.Mapping.SpecialPropertyInfo.GetValue(object? obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder? binder, object?[]? index, System.Globalization.CultureInfo? culture) -> object!
override LinqToDB.Mapping.SpecialPropertyInfo.IsDefined(System.Type! attributeType, bool inherit) -> bool
override LinqToDB.Mapping.SpecialPropertyInfo.Name.get -> string!
override LinqToDB.Mapping.SpecialPropertyInfo.PropertyType.get -> System.Type!
override LinqToDB.Mapping.SpecialPropertyInfo.ReflectedType.get -> System.Type!
override LinqToDB.Mapping.SpecialPropertyInfo.SetValue(object? obj, object? value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder? binder, object?[]? index, System.Globalization.CultureInfo? culture) -> void
override LinqToDB.Reflection.VirtualPropertyInfoBase.MetadataToken.get -> int
override LinqToDB.Reflection.VirtualPropertyInfoBase.Module.get -> System.Reflection.Module!
override LinqToDB.Sql.ExtensionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.FunctionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.PropertyAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1>.GetHashCode() -> int
override LinqToDB.Sql.TableExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Cleanup() -> void
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitBetweenPredicate(LinqToDB.SqlQuery.SqlPredicate.Between! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitExprPredicate(LinqToDB.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitInListPredicate(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitInSubQueryPredicate(LinqToDB.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitIsNullPredicate(LinqToDB.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitNotPredicate(LinqToDB.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCastExpression(LinqToDB.SqlQuery.SqlCastExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCompareToExpression(LinqToDB.SqlQuery.SqlCompareToExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlConditionExpression(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlExpression(LinqToDB.SqlQuery.SqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlFunction(LinqToDB.SqlQuery.SqlFunction! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlGroupByItem(LinqToDB.SqlQuery.ISqlExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlInlinedSqlExpression(LinqToDB.SqlQuery.SqlInlinedSqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlInlinedToSqlExpression(LinqToDB.SqlQuery.SqlInlinedToSqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlOrderByItem(LinqToDB.SqlQuery.SqlOrderByItem! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlOutputClause(LinqToDB.SqlQuery.SqlOutputClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlSetExpression(LinqToDB.SqlQuery.SqlSetExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlValue(LinqToDB.SqlQuery.SqlValue! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlValuesTable(LinqToDB.SqlQuery.SqlValuesTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.Cleanup() -> void
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitCaseItem(LinqToDB.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitExprPredicate(LinqToDB.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitInListPredicate(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitInSubQueryPredicate(LinqToDB.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsDistinctPredicate(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsNullPredicate(LinqToDB.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsTruePredicate(LinqToDB.SqlQuery.SqlPredicate.IsTrue! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitNotPredicate(LinqToDB.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCastExpression(LinqToDB.SqlQuery.SqlCastExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlConditionExpression(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlFunction(LinqToDB.SqlQuery.SqlFunction! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlNullabilityExpression(LinqToDB.SqlQuery.SqlNullabilityExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlSearchCondition(LinqToDB.SqlQuery.SqlSearchCondition! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlWhereClause(LinqToDB.SqlQuery.SqlWhereClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.CteClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.CteClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.QueryElementCorrectVisitor.GetVisitMode(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.VisitMode
override LinqToDB.SqlQuery.QueryElementCorrectVisitor.NotifyReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.QueryElementCorrectVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.QueryElementTextWriter.ToString() -> string!
override LinqToDB.SqlQuery.SelectQuery.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SelectQuery.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SelectQuery.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SelectQuery.Precedence.get -> int
override LinqToDB.SqlQuery.SelectQuery.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SelectQuery.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.Cleanup() -> void
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.NotifyReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitCteClause(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitInSubQueryPredicate(LinqToDB.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlFromClause(LinqToDB.SqlQuery.SqlFromClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlJoinedTable(LinqToDB.SqlQuery.SqlJoinedTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlOrderByClause(LinqToDB.SqlQuery.SqlOrderByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlSetOperator(LinqToDB.SqlQuery.SqlSetOperator! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlUpdateStatement(LinqToDB.SqlQuery.SqlUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlAnchor.ToString() -> string!
override LinqToDB.SqlQuery.SqlBinaryExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlBinaryExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlBinaryExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlBinaryExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlBinaryExpression.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlBinaryExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCaseExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlCaseExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlCaseExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlCaseExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlCaseExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlCaseExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCastExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlCastExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlCastExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlCastExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlCastExpression.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlCastExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCoalesceExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlCoalesceExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlCoalesceExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlCoalesceExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlCoalesceExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlCoalesceExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlColumn.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlColumn.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlColumn.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlColumn.Precedence.get -> int
override LinqToDB.SqlQuery.SqlColumn.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlColumn.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCompareToExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlCompareToExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlCompareToExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlCompareToExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlCompareToExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlCompareToExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlConditionExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlConditionExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlConditionExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlConditionExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlConditionExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlConditionExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCreateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlCreateTableStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlCteTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>?
override LinqToDB.SqlQuery.SqlCteTable.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlDeleteStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlDropTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlDropTableStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlExpression.Equals(object? obj) -> bool
override LinqToDB.SqlQuery.SqlExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlField.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlField.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlField.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlField.Precedence.get -> int
override LinqToDB.SqlQuery.SqlField.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlField.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlFromClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlFromClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlFunction.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlFunction.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlFunction.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlFunction.Precedence.get -> int
override LinqToDB.SqlQuery.SqlFunction.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlFunction.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlGroupByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlGroupByClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlHavingClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlHavingClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlInlinedBase.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlInlinedBase.Precedence.get -> int
override LinqToDB.SqlQuery.SqlInlinedBase.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlInlinedSqlExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlInlinedSqlExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlInlinedSqlExpression.GetSqlExpression(LinqToDB.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.SqlInlinedSqlExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlInlinedToSqlExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlInlinedToSqlExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlInlinedToSqlExpression.GetSqlExpression(LinqToDB.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.SqlInlinedToSqlExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlInsertStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlJoinedTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlJoinedTable.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlMergeStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlMergeStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlMultiInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlMultiInsertStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlNullabilityExpression.GetHashCode() -> int
override LinqToDB.SqlQuery.SqlOrderByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlOrderByClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlOrderByItem.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlOrderByItem.ToString() -> string!
override LinqToDB.SqlQuery.SqlOrderByItem.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.Between.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.Between.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.Expr.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Expr.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.Expr.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.Equals(LinqToDB.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.FuncLike.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.FuncLike.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.FuncLike.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.InList.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.InList.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.IsNull.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.IsNull.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.IsTrue.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.IsTrue.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.Like.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.Like.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.Not.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Not.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlPredicate.Not.Equals(LinqToDB.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Not.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.Not.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.SearchString.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.SearchString.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlPredicate.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.Equals(LinqToDB.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.Cleanup() -> void
override LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.VisitSqlColumnReference(LinqToDB.SqlQuery.SqlColumn! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.VisitSqlFieldReference(LinqToDB.SqlQuery.SqlField! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnNestingCorrector.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.Cleanup() -> void
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlColumnReference(LinqToDB.SqlQuery.SqlColumn! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlGroupByClause(LinqToDB.SqlQuery.SqlGroupByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlOrderByClause(LinqToDB.SqlQuery.SqlOrderByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlSearchCondition(LinqToDB.SqlQuery.SqlSearchCondition! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.Cleanup() -> void
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitCteClause(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlGroupByClause(LinqToDB.SqlQuery.SqlGroupByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlJoinedTable(LinqToDB.SqlQuery.SqlJoinedTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlSetOperator(LinqToDB.SqlQuery.SqlSetOperator! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitSqlWhereClause(LinqToDB.SqlQuery.SqlWhereClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlRawSqlTable.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlSearchCondition.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlSearchCondition.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlSearchCondition.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlSearchCondition.Precedence.get -> int
override LinqToDB.SqlQuery.SqlSearchCondition.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlSearchCondition.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlSelectClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlSelectClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlSelectStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlSimpleCaseExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlStatementWithQueryBase.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlTable.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlTable.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlTable.Precedence.get -> int
override LinqToDB.SqlQuery.SqlTable.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlTable.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlTableLikeSource.All.get -> LinqToDB.SqlQuery.SqlField!
override LinqToDB.SqlQuery.SqlTableLikeSource.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlTableLikeSource.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlTableLikeSource.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlTableLikeSource.Equals(LinqToDB.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.SqlQuery.SqlTableLikeSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
override LinqToDB.SqlQuery.SqlTableLikeSource.Precedence.get -> int
override LinqToDB.SqlQuery.SqlTableLikeSource.Source.get -> LinqToDB.SqlQuery.ISqlTableSource!
override LinqToDB.SqlQuery.SqlTableLikeSource.SqlTableType.get -> LinqToDB.SqlQuery.SqlTableType
override LinqToDB.SqlQuery.SqlTableLikeSource.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlTableLikeSource.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlTruncateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlTruncateTableStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.SqlQuery.ISqlTableSource?
override LinqToDB.SqlQuery.SqlUpdateStatement.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlWhereClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlWhereClause.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.QueryElementReplacingVisitor.VisitCteClauseReference(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor.Cleanup() -> void
override LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor.ShouldReplace(LinqToDB.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.Cleanup() -> void
override LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.ShouldReplace(LinqToDB.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.SqlQuery.Visitors.SqlQueryCloneVisitorBase.ShouldReplace(LinqToDB.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Cleanup() -> void
override LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.ConvertElement(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryHelperVisitorBase.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryHelperVisitorBase.VisitSqlTable(LinqToDB.SqlQuery.SqlTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlColumnReference(LinqToDB.SqlQuery.SqlColumn! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlConditionalInsertClause(LinqToDB.SqlQuery.SqlConditionalInsertClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlDeleteStatement(LinqToDB.SqlQuery.SqlDeleteStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlFieldReference(LinqToDB.SqlQuery.SqlField! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlInsertStatement(LinqToDB.SqlQuery.SqlInsertStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlJoinedTable(LinqToDB.SqlQuery.SqlJoinedTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlMergeStatement(LinqToDB.SqlQuery.SqlMergeStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlMultiInsertStatement(LinqToDB.SqlQuery.SqlMultiInsertStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlOrderByItem(LinqToDB.SqlQuery.SqlOrderByItem! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlOutputClause(LinqToDB.SqlQuery.SqlOutputClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlUpdateStatement(LinqToDB.SqlQuery.SqlUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlWhereClause(LinqToDB.SqlQuery.SqlWhereClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlFromClause(LinqToDB.SqlQuery.SqlFromClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlJoinedTable(LinqToDB.SqlQuery.SqlJoinedTable! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlSearchCondition(LinqToDB.SqlQuery.SqlSearchCondition! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.GetVisitMode(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.VisitMode
override LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.NotifyReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
override LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitCteClauseReference(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
readonly LinqToDB.DataProvider.MultipleRowsHelper.ColumnTypes -> LinqToDB.Common.DbDataType[]!
static LinqToDB.AnalyticFunctions.Corr<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.Corr<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.CovarSamp<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.CovarSamp<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> double?
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double?
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> double?
static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal?
static LinqToDB.Common.TypeHelper.GetEnumerableElementType(System.Type! type) -> System.Type!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.DataExtensions.QueryFromExpression<TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TResult>!>!>! expression) -> System.Linq.IQueryable<TResult>!
static LinqToDB.DataExtensions.TableFromExpression<TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<LinqToDB.ITable<TResult>!>!>! expression) -> LinqToDB.ITable<TResult>!
static LinqToDB.DataOptionsExtensions.RemoveTranslator(this LinqToDB.DataOptions! options, LinqToDB.Linq.Translation.IMemberTranslator! translator) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Firebird.FirebirdVersion dialect = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Firebird.FirebirdVersion dialect = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMemberTranslator(this LinqToDB.DataOptions! options, LinqToDB.Linq.Translation.IMemberTranslator! translator) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMemberTranslator(this LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<LinqToDB.Linq.Translation.IMemberTranslator!>! translators) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.MySql.MySqlVersion dialect = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.MySql.MySqlVersion dialect = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.AccessLikeCharactersToEscape -> string![]!
static LinqToDB.DataProvider.AliasesHelper.PrepareQueryAndAliases(LinqToDB.DataProvider.IIdentifierService! identifierService, LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.AliasesContext? prevAliasContext, out LinqToDB.SqlQuery.AliasesContext! newAliasContext) -> void
static LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeFirebirdEscapeSymbols -> string![]!
static LinqToDB.DataProvider.Firebird.FirebirdTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Firebird.FirebirdTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.GetDataProvider(LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareNoWaitHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.GroupIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IndexMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MaxExecutionTimeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MrrHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoGroupIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIcpHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIndexMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoJoinIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMrrHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoOrderIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoRangeOptimizationHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoSemiJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoSkipScanHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.OrderIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ResourceGroupHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, string! value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SemiJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SetVarHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, string! value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SkipScanHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.GetDataProvider(LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Oracle.OracleHints.AllRowsHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.AppendHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.AppendValuesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CacheHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CacheInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusteringHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CursorSharingExactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DisableParallelDmlHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DrivingSiteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DrivingSiteInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.EnableParallelDmlHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FactInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FirstRowsHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FreshMaterializedViewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FreshMVHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FullHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FullInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.GroupingHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.HashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.HashInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexCombineHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexFastFullScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexFFSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryPruningHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryPruningInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.LeadingHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ModelMinAnalysisHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MonitorHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NativeFullOuterJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoAppendHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoCacheHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoCacheInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoClusteringHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoExpandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoExpandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoFactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoFactInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexFastFullScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexFFSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexSkipScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexSSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryPruningHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryPruningInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMonitorHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoNativeFullOuterJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoParallelInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQSkewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQSkewInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushSubQueriesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPxJoinFilterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPxJoinFilterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoQueryTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoStarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoStarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseBandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseCubeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseNestedLoopHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseNLHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoXmlIndexRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoXmlQueryRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.OrderedHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterNoneHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterRandomHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterSerialHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQSkewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQSkewInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushSubQueriesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PxJoinFilterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PxJoinFilterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.RewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.RewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.StarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.StarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseBandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseConcatHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseConcatHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseCubeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNestedLoopHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNestedLoopWithIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNLHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNLWithIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.OracleLikeCharactersToEscape -> string![]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.HanaLikeCharactersToEscape -> string![]!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithHoldLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithHoldLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithNoLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithNoLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithPagLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithPagLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithRowLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithRowLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithTabLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithTabLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithUpdLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithUpdLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithXLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithXLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.DataProvider.SqlProviderHelper.IsValidQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, bool forColumn, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHashHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHashHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinLoopHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinLoopHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinMergeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinMergeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinRemoteHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinRemoteHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionConcatUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionDisableExternalPushDown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionDisableScaleOutExecution<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionExpandViews<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionFast<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceExternalPushDown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceOrder<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceScaleOutExecution<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashGroup<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionIgnoreNonClusteredColumnStoreIndex<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionKeepFixedPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionKeepPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionLoopJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxDop<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxGrantPercent<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxRecursion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMergeJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMergeUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMinGrantPercent<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionNoPerformanceSpool<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionOptimizeForUnknown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionOrderGroup<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionQueryTraceOn<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionRecompile<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionRobustPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceScan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceScanInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceSeek<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceSeekInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithHoldLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithHoldLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoWait<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoWaitInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithPagLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithPagLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommitted<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadPast<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadPastInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadUncommitted<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadUncommittedInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRepeatableRead<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRepeatableReadInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRowLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRowLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSerializable<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSerializableInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSnapshot<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSnapshotInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockX<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockXInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithUpdLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithUpdLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithXLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithXLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerTools.AutoDetectProvider.set -> void
*REMOVED*static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource[]!>!
*REMOVED*static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TTarget[]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this LinqToDB.Linq.IUpdatable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput[]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget!>![]!>!
*REMOVED*static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget>![]!>!
static LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.Expressions.ExpressionEqualityComparer.Instance.get -> LinqToDB.Expressions.ExpressionEqualityComparer!
static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr) -> object?
static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr) -> T?
static LinqToDB.Expressions.ExpressionExtensions.Find(this System.Linq.Expressions.Expression? expr, System.Linq.Expressions.Expression! exprToFind, System.Collections.Generic.IEqualityComparer<System.Linq.Expressions.Expression!>! comparer) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, params System.Linq.Expressions.Expression![]! replacement) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! replacement) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.Replace(this System.Linq.Expressions.Expression! expression, System.Collections.Generic.IReadOnlyDictionary<System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!>! replaceMap) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionGenerator.NoOpTypeMapper -> LinqToDB.Expressions.TypeMapper!
static LinqToDB.Expressions.ExpressionPrinter.Print(System.Linq.Expressions.Expression! expression) -> string!
static LinqToDB.Expressions.ExpressionPrinter.PrintDebug(System.Linq.Expressions.Expression! expression) -> string!
static LinqToDB.Expressions.PlaceholderExpression.Closure(System.Linq.Expressions.Expression! innerExpression) -> LinqToDB.Expressions.PlaceholderExpression!
static LinqToDB.Expressions.SqlErrorExpression.CreateException(string! message) -> System.Exception!
static LinqToDB.Expressions.SqlErrorExpression.CreateException(System.Linq.Expressions.Expression? expression, string? message) -> System.Exception!
static LinqToDB.Expressions.SqlErrorExpression.EnsureError(object? context, System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.SqlErrorExpression!
static LinqToDB.Expressions.SqlErrorExpression.EnsureError(System.Linq.Expressions.Expression! expression, System.Type! resultType) -> LinqToDB.Expressions.SqlErrorExpression!
static LinqToDB.Expressions.SqlErrorExpression.PrepareExpressionString(System.Linq.Expressions.Expression? expression) -> string!
static LinqToDB.Expressions.SqlErrorExpression.ThrowError(System.Linq.Expressions.Expression! expression, string? message) -> void
static LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.AssignmentComparer.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>!
static LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment.EmptyCollection -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>!
static LinqToDB.Expressions.SqlGenericConstructorExpression.FindMember(System.Collections.Generic.IReadOnlyCollection<LinqToDB.Reflection.MemberAccessor!>! members, System.Reflection.ParameterInfo! parameter) -> System.Reflection.MemberInfo?
static LinqToDB.Expressions.SqlGenericConstructorExpression.FindMember(System.Type! inType, System.Reflection.ParameterInfo! parameter) -> System.Reflection.MemberInfo?
static LinqToDB.Expressions.SqlGenericConstructorExpression.operator !=(LinqToDB.Expressions.SqlGenericConstructorExpression? left, LinqToDB.Expressions.SqlGenericConstructorExpression? right) -> bool
static LinqToDB.Expressions.SqlGenericConstructorExpression.operator ==(LinqToDB.Expressions.SqlGenericConstructorExpression? left, LinqToDB.Expressions.SqlGenericConstructorExpression? right) -> bool
static LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.EmptyCollection -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>!
static LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter.ParameterComparer.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>!
static LinqToDB.Expressions.SqlGenericParamAccessExpression.operator !=(LinqToDB.Expressions.SqlGenericParamAccessExpression? left, LinqToDB.Expressions.SqlGenericParamAccessExpression? right) -> bool
static LinqToDB.Expressions.SqlGenericParamAccessExpression.operator ==(LinqToDB.Expressions.SqlGenericParamAccessExpression? left, LinqToDB.Expressions.SqlGenericParamAccessExpression? right) -> bool
static LinqToDB.Expressions.SqlPathExpression.operator !=(LinqToDB.Expressions.SqlPathExpression? left, LinqToDB.Expressions.SqlPathExpression? right) -> bool
static LinqToDB.Expressions.SqlPathExpression.operator ==(LinqToDB.Expressions.SqlPathExpression? left, LinqToDB.Expressions.SqlPathExpression? right) -> bool
static LinqToDB.Expressions.SqlQueryDependentAttributeHelper.GetQueryDependentAttributes(System.Reflection.MethodInfo! method) -> System.Collections.Generic.IList<LinqToDB.Expressions.SqlQueryDependentAttribute?>?
static LinqToDB.Expressions.SqlQueryRootExpression.Create(LinqToDB.IDataContext! dataContext) -> LinqToDB.Expressions.SqlQueryRootExpression!
static LinqToDB.Expressions.SqlQueryRootExpression.Create(LinqToDB.IDataContext! dataContext, System.Type! contextType) -> LinqToDB.Expressions.SqlQueryRootExpression!
static LinqToDB.Expressions.SqlQueryRootExpression.Create(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! contextType) -> LinqToDB.Expressions.SqlQueryRootExpression!
static LinqToDB.Expressions.SqlQueryRootExpression.operator !=(LinqToDB.Expressions.SqlQueryRootExpression? left, LinqToDB.Expressions.SqlQueryRootExpression? right) -> bool
static LinqToDB.Expressions.SqlQueryRootExpression.operator ==(LinqToDB.Expressions.SqlQueryRootExpression? left, LinqToDB.Expressions.SqlQueryRootExpression? right) -> bool
static LinqToDB.Extensions.ReflectionExtensions.GetGenericTypes(this System.Type! genericType, System.Type! type) -> System.Collections.Generic.IEnumerable<System.Type!>!
static LinqToDB.Extensions.ReflectionExtensions.IsEnumerableType(this System.Type! type, System.Type! elementType) -> bool
static LinqToDB.Infrastructure.ServiceProviderExtensions.GetRequiredService<T>(this System.IServiceProvider! provider) -> T!
static LinqToDB.Infrastructure.ServiceProviderExtensions.GetService<T>(this System.IServiceProvider! provider) -> T?
static LinqToDB.Infrastructure.TypeExtensions.ShortDisplayName(this System.Type! type) -> string!
static LinqToDB.Linq.Builder.EvaluationHelper.EvaluateExpression(System.Linq.Expressions.Expression? expression, LinqToDB.IDataContext! dataContext, object?[]? parameterValues) -> object?
static LinqToDB.Linq.Expressions.AccessRound(decimal? value, int? precision) -> decimal?
static LinqToDB.Linq.Expressions.AccessRound(double? value, int? precision) -> double?
static LinqToDB.Linq.Internals.ExposeQueryExpression(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Add(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Binary(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, string! operation, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Cast(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.Common.DbDataType toDbDataType, bool isMandatory = false) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, string! value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, string! value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, params LinqToDB.SqlQuery.ISqlExpression![]! expressions) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Condition(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlPredicate! condition, LinqToDB.SqlQuery.ISqlExpression! trueExpression, LinqToDB.SqlQuery.ISqlExpression! falseExpression) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Decrement(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Decrement<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Div(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Div<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.ExprPredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Fragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, int precedence, string! fragmentText, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Fragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! fragmentText, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.FuncLikePredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! function) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Function(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! functionName, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Greater(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.GreaterOrEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Increment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Increment<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Less(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.LessOrEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Mod(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Mod<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Multiply(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Multiply<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Multiply<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.NonPureFragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! fragmentText, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.NonPureFunction(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! functionName, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.SearchCondition(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, bool isOr = false) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Sub(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! x, LinqToDB.SqlQuery.ISqlExpression! y) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.TypeExpression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Value<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Value<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, T value) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.TranslationContextExtensions.CreatePlaceholder(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! sqlExpression, System.Linq.Expressions.Expression! basedOn) -> LinqToDB.Expressions.SqlPlaceholderExpression!
static LinqToDB.Linq.Translation.TranslationContextExtensions.GetDbDataType(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! sqlExpression) -> LinqToDB.Common.DbDataType
static LinqToDB.Linq.Translation.TranslationContextExtensions.TranslateToSqlExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! expression, out LinqToDB.SqlQuery.ISqlExpression? translated) -> bool
static LinqToDB.Linq.Translation.TranslationContextExtensions.TryEvaluate<T>(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! expression, out T result) -> bool
static LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.operator !=(LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement? left, LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement? right) -> bool
static LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.operator ==(LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement? left, LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement? right) -> bool
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, T6, T7, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, T6, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterConstructor<TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! constructorAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMember<T, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! memberAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMember<TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! memberAccessPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Action!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, T5, T6, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, T5, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! methodCallPattern, LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterReplacement<T, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! replacement) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterReplacement<T1, T2, T3, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! replacement) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterReplacement<T1, T2, TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! replacement) -> void
static LinqToDB.Linq.Translation.TranslationRegistrationExtensions.RegisterReplacement<TResult>(this LinqToDB.Linq.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<TResult>!>! replacement) -> void
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource, TOutput>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource[]!>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TTarget[]!>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<TTarget>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(LinqToDB.Linq.IUpdatable<T>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this LinqToDB.Linq.IUpdatable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget!>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<TTarget!>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<TTarget>!>!
static LinqToDB.Mapping.Nullability.TryAnalyzeMember(System.Reflection.MemberInfo! member, out bool isNullable) -> bool
*REMOVED*static readonly LinqToDB.Common.Array<T>.Empty -> T[]!
*REMOVED*LinqToDB.SqlQuery.SqlException.SqlException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*LinqToDB.Metadata.MetadataException.MetadataException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*LinqToDB.LinqToDBException.LinqToDBException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*LinqToDB.Linq.LinqException.LinqException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*LinqToDB.Data.RetryPolicy.RetryLimitExceededException.RetryLimitExceededException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*LinqToDB.Common.LinqToDBConvertException.LinqToDBConvertException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
*REMOVED*override LinqToDB.DataProvider.ClickHouse.ClickHouseDataProvider.CreateConnectionInternal(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.ODBC = 2 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.OleDb = 1 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect = 0 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.ClickHouseClient = 2 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.MySqlConnector = 3 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica = 1 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.DB2.DB2Version.AutoDetect = 0 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.DB2.DB2Version.LUW = 1 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.DB2.DB2Version.zOS = 2 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.Informix.InformixDataProvider.InformixDataProvider(string! name, LinqToDB.DataProvider.Informix.InformixProvider provider) -> void
LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.DB2 = 2 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.Informix = 1 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect = 0 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.MySqlConnector = 2 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.MySqlData = 1 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProviderAdapter.ProviderType.get -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Devart = 3 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Managed = 1 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Native = 2 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect = 0 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.ODBC = 2 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged = 1 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SQLite.SQLiteDataProvider.SQLiteDataProvider(string! name, LinqToDB.DataProvider.SQLite.SQLiteProvider provider) -> void
LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect = 0 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.Microsoft = 2 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.System = 1 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.Sybase.SybaseDataProvider.SybaseDataProvider(string! name, LinqToDB.DataProvider.Sybase.SybaseProvider provider) -> void
LinqToDB.DataProvider.Sybase.SybaseDataProvider.SybaseDataProvider(string! name, LinqToDB.DataProvider.Sybase.SybaseProviderAdapter! adapter) -> void
LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.DataAction = 2 -> LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.Unmanaged = 1 -> LinqToDB.DataProvider.Sybase.SybaseProvider
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Oracle.OracleVersion dialect = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion dialect = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePostgreSQL(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataProvider.Access.AccessTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Access.AccessTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.GetDataProvider(LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.DB2.DB2Tools.GetDataProvider(LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Informix.InformixProviderAdapter.GetInstance(LinqToDB.DataProvider.Informix.InformixProvider provider) -> LinqToDB.DataProvider.Informix.InformixProviderAdapter!
static LinqToDB.DataProvider.Informix.InformixTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Informix.InformixTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.GetDataProvider(LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.MySql.MySqlProviderAdapter.GetInstance(LinqToDB.DataProvider.MySql.MySqlProvider provider) -> LinqToDB.DataProvider.MySql.MySqlProviderAdapter!
static LinqToDB.DataProvider.MySql.MySqlTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.MySql.MySqlTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.GetDataProvider(LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SapHana.SapHanaTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SapHana.SapHanaTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.GetDataProvider(LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SapHana.SapHanaTools.ResolveSapHana(string! path, string? assemblyName = null) -> void
static LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.GetInstance(LinqToDB.DataProvider.SQLite.SQLiteProvider provider) -> LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter!
static LinqToDB.DataProvider.SQLite.SQLiteTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SQLite.SQLiteTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.ClearAllPools(LinqToDB.DataProvider.SQLite.SQLiteProvider? provider) -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.GetDataProvider(LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SQLite.SQLiteTools.ResolveSQLite(string! path, string? assemblyName = null) -> void
static LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.GetInstance(LinqToDB.DataProvider.Sybase.SybaseProvider provider) -> LinqToDB.DataProvider.Sybase.SybaseProviderAdapter!
static LinqToDB.DataProvider.Sybase.SybaseTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Sybase.SybaseTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.GetDataProvider(LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Sybase.SybaseTools.ResolveSybase(string! path, string? assemblyName = null) -> void
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.ResolveSybase(string! path) -> void
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.DetectedProviderName.get -> string!
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.GetInstance(string! name) -> LinqToDB.DataProvider.Sybase.SybaseProviderAdapter!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.ResolveSQLite(string! path) -> void
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.GetDataProvider(string? providerName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.DetectedProviderName.get -> string!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.ClearAllPools(string? provider = null) -> void
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter.GetInstance(string! name) -> LinqToDB.DataProvider.SQLite.SQLiteProviderAdapter!
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.ResolveSapHana(string! path) -> void
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.DetectedProviderName.get -> string!
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.GetDataProvider(LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.Managed, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.Managed) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.Managed) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.Managed) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.GetDataProvider(string? providerName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.DetectedProviderName.get -> string!
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlProviderAdapter.GetInstance(string! name) -> LinqToDB.DataProvider.MySql.MySqlProviderAdapter!
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.GetDataProvider(string? providerName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.Informix.InformixProviderAdapter.GetInstance(string! name) -> LinqToDB.DataProvider.Informix.InformixProviderAdapter!
*REMOVED*static LinqToDB.DataProvider.DB2.DB2Tools.GetDataProvider(LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.LUW) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.GetDataProvider(LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(string? providerName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion dialect, LinqToDB.DataProvider.Oracle.OracleProvider provider, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Oracle.OracleVersion dialect, LinqToDB.DataProvider.Oracle.OracleProvider provider, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.DB2.DB2Version version, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.DB2.DB2Version version, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseConnection.AseConnection() -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseDataProvider.SybaseDataProvider(string! name) -> void
*REMOVED*LinqToDB.DataProvider.SQLite.SQLiteDataProvider.SQLiteDataProvider(string! name, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
*REMOVED*LinqToDB.DataProvider.SQLite.SQLiteDataProvider.SQLiteDataProvider(string! name) -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaConnection.HanaConnection() -> void
*REMOVED*LinqToDB.DataProvider.Oracle.OracleProvider.Native = 1 -> LinqToDB.DataProvider.Oracle.OracleProvider
*REMOVED*LinqToDB.DataProvider.Oracle.OracleProvider.Managed = 0 -> LinqToDB.DataProvider.Oracle.OracleProvider
*REMOVED*LinqToDB.DataProvider.Oracle.OracleProvider.Devart = 2 -> LinqToDB.DataProvider.Oracle.OracleProvider
*REMOVED*LinqToDB.DataProvider.MySql.MySqlProviderAdapter.ProviderType.get -> LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider
*REMOVED*LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider.MySqlData = 0 -> LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider
*REMOVED*LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider.MySqlConnector = 1 -> LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider
*REMOVED*LinqToDB.DataProvider.MySql.MySqlProviderAdapter.MySqlProvider
*REMOVED*LinqToDB.DataProvider.MySql.MySqlDataProvider.MySqlDataProvider(string! name) -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxConnection.IfxConnection() -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixDataProvider.InformixDataProvider(string! providerName) -> void
*REMOVED*LinqToDB.DataProvider.DB2.DB2Version.zOS = 1 -> LinqToDB.DataProvider.DB2.DB2Version
*REMOVED*LinqToDB.DataProvider.DB2.DB2Version.LUW = 0 -> LinqToDB.DataProvider.DB2.DB2Version
*REMOVED*LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica = 0 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
*REMOVED*LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.MySqlConnector = 2 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
*REMOVED*LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.ClickHouseClient = 1 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.GetDataProvider() -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbConnection! connection) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(string! connectionString) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*LinqToDB.DataProvider.Firebird.FirebirdDataProvider.FirebirdDataProvider(string! name, LinqToDB.SqlProvider.ISqlOptimizer? sqlOptimizer) -> void
*REMOVED*LinqToDB.DataProvider.Firebird.FirebirdDataProvider.FirebirdDataProvider(LinqToDB.SqlProvider.ISqlOptimizer! sqlOptimizer) -> void
*REMOVED*LinqToDB.DataProvider.Firebird.FirebirdDataProvider.FirebirdDataProvider() -> void
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLiteOfficial(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLiteOfficial(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLiteMicrosoft(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSQLiteMicrosoft(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHanaODBC(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHanaODBC(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHanaNative(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseSapHanaNative(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Oracle.OracleProvider provider, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySqlData(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySqlData(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySqlConnector(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseMySqlConnector(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider, string! connectionString, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAccessOleDb(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAccessOleDb(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAccessOdbc(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseAccessOdbc(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.GetDataProvider(string? providerName = null, string? assemblyName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SqlServer.SqlServerTools.DetectServerVersion(LinqToDB.DataProvider.SqlServer.SqlServerProvider provider, string! connectionString) -> LinqToDB.DataProvider.SqlServer.SqlServerVersion?
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.AlwaysCheckDbNull.set -> void
*REMOVED*static LinqToDB.DataProvider.SQLite.SQLiteTools.AlwaysCheckDbNull.get -> bool
*REMOVED*static LinqToDB.DataProvider.SqlCe.SqlCeTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.SqlCe.SqlCeTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.GetDataProvider(string? providerName = null, string? assemblyName = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.NormalizeTimestampData.set -> void
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.NormalizeTimestampData.get -> bool
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.UseAlternativeBulkCopy.set -> void
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.UseAlternativeBulkCopy.get -> LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.DontEscapeLowercaseIdentifiers.set -> void
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.DontEscapeLowercaseIdentifiers.get -> bool
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.Oracle.OracleTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*const LinqToDB.ProviderName.MariaDB = "MariaDB" -> string!
*REMOVED*const LinqToDB.ProviderName.MySqlConnector = "MySqlConnector" -> string!
*REMOVED*const LinqToDB.ProviderName.MySqlOfficial = "MySql.Official" -> string!
*REMOVED*LinqToDB.DataProvider.DB2.DB2ProviderAdapter.CreateConnection.get -> System.Func<string!, LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Connection!>!
*REMOVED*LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.Dispose() -> void
*REMOVED*LinqToDB.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.Open() -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter.Create.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions, LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy!>!
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter.CreateColumnMapping.get -> System.Func<int, string!, LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping!>!
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.DB2BulkCopy.get -> LinqToDB.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter?
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.BulkCopyTimeout.get -> int
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.BulkCopyTimeout.set -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.ColumnMappings.get -> LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection!
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.ColumnMappings.set -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.DestinationTableName.get -> string?
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.DestinationTableName.set -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.IfxBulkCopy(LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxConnection! connection, LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions options) -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.IfxBulkCopy(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.IfxRowsCopied -> LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventHandler?
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.NotifyAfter.get -> int
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.NotifyAfter.set -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopy.WriteToServer(System.Data.IDataReader! dataReader) -> void
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.IfxConnection
*REMOVED*LinqToDB.DataProvider.Informix.InformixProviderAdapter.InformixBulkCopy.get -> LinqToDB.DataProvider.Informix.InformixProviderAdapter.BulkCopyAdapter?
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.CreateConnection(string! connectionString) -> LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection!
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.Dispose() -> void
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.NpgsqlConnection(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.NpgsqlConnection(string! connectionString) -> void
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.Open() -> void
*REMOVED*LinqToDB.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.PostgreSqlVersion.get -> System.Version!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.CreateBulkCopy.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions, System.Data.Common.DbTransaction?, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy!>!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.BatchSize.get -> int
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.BatchSize.set -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.BulkCopyTimeout.get -> int
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.BulkCopyTimeout.set -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.CanWriteToServerAsync.get -> bool
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.ColumnMappings.get -> LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.DestinationTableName.get -> string?
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.DestinationTableName.set -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.Dispose() -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.HanaBulkCopy(LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaConnection! connection, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions options, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaTransaction? transaction) -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.HanaBulkCopy(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.HanaRowsCopied -> LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventHandler?
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.NotifyAfter.get -> int
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.NotifyAfter.set -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.WriteToServer(System.Data.IDataReader! dataReader) -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopy.WriteToServerAsync(System.Data.IDataReader! dataReader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaConnection
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.CreateBulkCopy(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions options, System.Data.Common.DbTransaction? transaction) -> LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.CreateConnection(string! connectionString) -> LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.BatchSize.get -> int
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.BatchSize.set -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.BulkCopyTimeout.get -> int
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.BulkCopyTimeout.set -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.ColumnMappings.get -> LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.DestinationTableName.get -> string?
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.DestinationTableName.set -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.NotifyAfter.get -> int
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.NotifyAfter.set -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.SqlBulkCopy(LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection! connection, LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions options, LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlTransaction? transaction) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.SqlBulkCopy(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.SqlRowsCopied -> LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventHandler?
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.WriteToServer(System.Data.IDataReader! dataReader) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader! dataReader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.CreateCommand() -> System.Data.Common.DbCommand!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.Dispose() -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.Open() -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.ServerVersion.get -> string!
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.SqlConnection(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnection.SqlConnection(string! connectionString) -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.AseBulkCopy(LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseConnection! connection, LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions options, LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseTransaction? transaction) -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.AseBulkCopy(object! instance, System.Delegate![]! wrappers) -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.AseRowsCopied -> LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventHandler?
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.BatchSize.get -> int
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.BatchSize.set -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.BulkCopyTimeout.get -> int
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.BulkCopyTimeout.set -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.ColumnMappings.get -> LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection!
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.DestinationTableName.get -> string?
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.DestinationTableName.set -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.NotifyAfter.get -> int
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.NotifyAfter.set -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy.WriteToServer(System.Data.IDataReader! dataReader) -> void
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseConnection
*REMOVED*LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter.Create.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions, System.Data.Common.DbTransaction?, LinqToDB.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopy!>!
*REMOVED*LinqToDB.Expressions.TypeMapper.BuildFactory<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR!>!>! newFunc) -> System.Func<T, object!>!
*REMOVED*LinqToDB.Expressions.TypeMapper.BuildFactory<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR!>!>! newFunc) -> System.Func<T1, T2, T3, object!>!
*REMOVED*LinqToDB.Expressions.TypeMapper.BuildFactory<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR!>!>! newFunc) -> System.Func<T1, T2, object!>!
*REMOVED*LinqToDB.Expressions.TypeMapper.BuildFactory<TR>(System.Linq.Expressions.Expression<System.Func<TR!>!>! newFunc) -> System.Func<object!>!
*REMOVED*LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined, bool withNullable = true) -> void
*REMOVED*LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.SqlQuery.SqlDataType! dataType, bool withNullable = true) -> void
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.DB2.DB2Tools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.DB2.DB2Tools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbConnection! connection, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, string? providerName = null) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.Informix.InformixTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(string! connectionString, string? providerName = null) -> LinqToDB.Data.DataConnection!
static LinqToDB.Mapping.SpecialPropertyInfo.operator !=(LinqToDB.Mapping.SpecialPropertyInfo? a, LinqToDB.Mapping.SpecialPropertyInfo? b) -> bool
static LinqToDB.Mapping.SpecialPropertyInfo.operator ==(LinqToDB.Mapping.SpecialPropertyInfo? a, LinqToDB.Mapping.SpecialPropertyInfo? b) -> bool
static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, out System.Linq.Expressions.Expression? error) -> LinqToDB.SqlQuery.ISqlExpression?[]!
static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, bool ignoreGenericParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
static LinqToDB.Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext context, string! expression, System.Func<TContext, string!, string?, string?>! valueProvider, out System.Linq.Expressions.Expression? error) -> string!
static LinqToDB.Sql.ExpressionAttribute.ToParametersNullabilityType(LinqToDB.Sql.IsNullableType nullableType) -> LinqToDB.SqlQuery.ParametersNullabilityType
static LinqToDB.Sql.ExtensionAttribute.BuildSqlExpression(LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! root, System.Type! systemType, int precedence, LinqToDB.SqlQuery.SqlFlags flags, bool? canBeNull, LinqToDB.Sql.IsNullableType isNullable) -> System.Linq.Expressions.Expression!
static LinqToDB.Sql.ExtensionAttribute.ExcludeExtensionChain(LinqToDB.Mapping.MappingSchema! mapping, System.Linq.Expressions.Expression! expr, out bool isQueryable) -> System.Linq.Expressions.Expression!
static LinqToDB.Sql.ExtensionAttribute.GetExtensionAttributes(System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.MappingSchema! mapping, bool forFirstConfiguration = true) -> LinqToDB.Sql.ExtensionAttribute![]!
static LinqToDB.Sql.Ordinal<T>(T expression) -> T
static LinqToDB.SqlProvider.BasicSqlOptimizer.ApplyUpdateTableComparison(LinqToDB.SqlQuery.SelectQuery! updateQuery, LinqToDB.SqlQuery.SqlUpdateClause! updateClause, LinqToDB.SqlQuery.SqlTable! inQueryTable, LinqToDB.DataOptions! dataOptions) -> void
static LinqToDB.SqlProvider.BasicSqlOptimizer.ApplyUpdateTableComparison(LinqToDB.SqlQuery.SqlSearchCondition! searchCondition, LinqToDB.SqlQuery.SelectQuery! updateQuery, LinqToDB.SqlQuery.SqlUpdateClause! updateClause, LinqToDB.SqlQuery.SqlTable! inQueryTable, LinqToDB.DataOptions! dataOptions) -> void
static LinqToDB.SqlProvider.BasicSqlOptimizer.CloneTable(LinqToDB.SqlQuery.SqlTable! tableToClone, out System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! replaceTree) -> LinqToDB.SqlQuery.SqlTable!
static LinqToDB.SqlProvider.BasicSqlOptimizer.DetachUpdateTableFromUpdateQuery(LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions, bool moveToJoin, bool addNewSource, out LinqToDB.SqlQuery.SqlTableSource! newSource) -> LinqToDB.SqlQuery.SqlUpdateStatement!
static LinqToDB.SqlProvider.BasicSqlOptimizer.IsCompatibleForUpdate(LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.SqlQuery.SqlTable! updateTable, int level = 0) -> bool
static LinqToDB.SqlProvider.BasicSqlOptimizer.RemapCloned<TElement>(TElement! element, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>? mainTree, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>? innerTree = null, bool insideColumns = true) -> TElement!
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.GenerateEscapeReplacement(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ISqlExpression! character) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsDateDataOffsetType(LinqToDB.Common.DbDataType dataType) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsDateDataType(LinqToDB.Common.DbDataType dataType, string! typeName) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsDateTime2Type(LinqToDB.Common.DbDataType dataType, string! typeName) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsDateTimeType(LinqToDB.Common.DbDataType dataType, string! typeName) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsSmallDateTimeType(LinqToDB.Common.DbDataType dataType, string! typeName) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsTimeDataType(LinqToDB.Common.DbDataType dataType) -> bool
static LinqToDB.SqlProvider.SqlExpressionConvertVisitor.StandardLikeCharactersToEscape -> string![]!
static LinqToDB.SqlQuery.DebugStringExtensions.AppendElement<T>(this LinqToDB.SqlQuery.QueryElementTextWriter! writer, T? element) -> LinqToDB.SqlQuery.QueryElementTextWriter!
static LinqToDB.SqlQuery.DebugStringExtensions.AppendExtensions(this LinqToDB.SqlQuery.QueryElementTextWriter! writer, System.Collections.Generic.ICollection<LinqToDB.SqlQuery.SqlQueryExtension!>? extensions) -> LinqToDB.SqlQuery.QueryElementTextWriter!
static LinqToDB.SqlQuery.DebugStringExtensions.AppendTag(this LinqToDB.SqlQuery.QueryElementTextWriter! writer, LinqToDB.SqlQuery.SqlComment? comment) -> LinqToDB.SqlQuery.QueryElementTextWriter!
static LinqToDB.SqlQuery.NullabilityContext.GetContext(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> LinqToDB.SqlQuery.NullabilityContext!
static LinqToDB.SqlQuery.NullabilityContext.NonQuery.get -> LinqToDB.SqlQuery.NullabilityContext!
static LinqToDB.SqlQuery.PredicateExtensions.AddAnd(this LinqToDB.SqlQuery.SqlSearchCondition! search, System.Action<LinqToDB.SqlQuery.SqlSearchCondition!>! andInitializer) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddExists(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.SelectQuery! selectQuery, bool isNot = false) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddGreater(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddGreaterOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddIsNotNull(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddIsNull(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddIsNull(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr, bool isNot) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddLess(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddLessOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddNot(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddNotEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddNotExists(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddOr(this LinqToDB.SqlQuery.SqlSearchCondition! search, System.Action<LinqToDB.SqlQuery.SqlSearchCondition!>! orInitializer) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.MakeNot(this LinqToDB.SqlQuery.ISqlPredicate! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.SqlQuery.PredicateExtensions.MakeNot(this LinqToDB.SqlQuery.ISqlPredicate! predicate, bool isNot) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.SqlQuery.PseudoFunctions.MakeCast(LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.Common.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType = null) -> LinqToDB.SqlQuery.SqlCastExpression!
static LinqToDB.SqlQuery.PseudoFunctions.MakeMandatoryCast(LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.Common.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType = null) -> LinqToDB.SqlQuery.SqlCastExpression!
static LinqToDB.SqlQuery.QueryHelper.CalcCanBeNull(bool? canBeNull, LinqToDB.SqlQuery.ParametersNullabilityType isNullable, System.Collections.Generic.IEnumerable<bool>! nullInfo) -> bool
static LinqToDB.SqlQuery.QueryHelper.CollectDependencies(LinqToDB.SqlQuery.IQueryElement! root, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>! sources, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlExpression!>! found, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.IQueryElement!>? ignore = null, bool singleColumnLevel = false) -> void
static LinqToDB.SqlQuery.QueryHelper.ConcatSearchCondition(this LinqToDB.SqlQuery.SqlHavingClause! where, LinqToDB.SqlQuery.SqlSearchCondition! search) -> void
static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationFunction(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.SqlQuery.QueryHelper.ContainsWindowFunction(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.SqlQuery.QueryHelper.CorrectComparisonForJoin(LinqToDB.SqlQuery.SqlSearchCondition! sc) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.QueryHelper.CreateSqlValue(object? value, LinqToDB.Common.DbDataType dbDataType, params LinqToDB.SqlQuery.ISqlExpression![]! basedOn) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.QueryHelper.CreateSqlValue(object? value, LinqToDB.SqlQuery.SqlBinaryExpression! be, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.QueryHelper.DebugCheckNesting(LinqToDB.SqlQuery.SqlStatement! statement, bool isSubQuery) -> void
static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlHavingClause! whereClause) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlJoinedTable! joinedTable) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlWhereClause! whereClause) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.QueryHelper.EnumerateAccessibleTableSources(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
static LinqToDB.SqlQuery.QueryHelper.ExtractPredicate(LinqToDB.SqlQuery.ISqlPredicate! predicate, out LinqToDB.SqlQuery.ISqlPredicate! underlying, out bool isNot) -> void
static LinqToDB.SqlQuery.QueryHelper.ExtractSqlTable(LinqToDB.SqlQuery.ISqlExpression? expression) -> LinqToDB.SqlQuery.SqlTable?
static LinqToDB.SqlQuery.QueryHelper.GetBoolValue(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.EvaluationContext! evaluationContext) -> bool?
static LinqToDB.SqlQuery.QueryHelper.GetDbDataType(LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Common.DbDataType
static LinqToDB.SqlQuery.QueryHelper.GetInnerQuery(this LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SelectQuery!
static LinqToDB.SqlQuery.QueryHelper.HasElement(this LinqToDB.SqlQuery.IQueryElement! root, LinqToDB.SqlQuery.IQueryElement! element) -> bool
static LinqToDB.SqlQuery.QueryHelper.HasQueryParameter(this LinqToDB.SqlQuery.IQueryElement! root) -> bool
static LinqToDB.SqlQuery.QueryHelper.HasTable(LinqToDB.SqlQuery.IQueryElement! element, int sourceId) -> bool
static LinqToDB.SqlQuery.QueryHelper.HasTableInQuery(LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.SqlQuery.SqlTable! table) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsDependsOnOuterSources(LinqToDB.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.ISqlTableSource!>? currentSources = null) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsDependsOnSource(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.ISqlTableSource! onSource, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsDependsOnSources(LinqToDB.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.ISqlTableSource!>! onSources, System.Collections.Generic.IReadOnlyCollection<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsEqualTables(LinqToDB.SqlQuery.SqlTable? table1, LinqToDB.SqlQuery.SqlTable? table2, bool withExtensions = true) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsNullValue(this LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsSingleTableInQuery(LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.SqlQuery.SqlTable! table) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsTransitivePredicate(LinqToDB.SqlQuery.SqlExpression! sqlExpression) -> bool
static LinqToDB.SqlQuery.QueryHelper.MarkAsNonQueryParameters(LinqToDB.SqlQuery.IQueryElement! root) -> void
static LinqToDB.SqlQuery.QueryHelper.OptimizeSelectQuery(this LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.IQueryElement! root, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
static LinqToDB.SqlQuery.QueryHelper.SameWithoutNullablity(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> bool
static LinqToDB.SqlQuery.QueryHelper.ShouldCheckForNull(this LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
static LinqToDB.SqlQuery.QueryHelper.SimplifyColumnExpression(LinqToDB.SqlQuery.ISqlExpression? sqlExpression) -> LinqToDB.SqlQuery.ISqlExpression?
static LinqToDB.SqlQuery.QueryHelper.SuggestTableSourceAlias(LinqToDB.SqlQuery.SelectQuery! selectQuery, string! alias) -> string!
static LinqToDB.SqlQuery.QueryHelper.UnwrapCastAndNullability(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.QueryHelper.UnwrapNullablity(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<T>(this T! element, bool allowMutation, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.SqlQuery.QueryVisitorExtensions.FindExcept<TContext>(this LinqToDB.SqlQuery.IQueryElement? element, TContext context, LinqToDB.SqlQuery.IQueryElement! skip, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! find) -> LinqToDB.SqlQuery.IQueryElement?
static LinqToDB.SqlQuery.QueryVisitorExtensions.Replace<T>(this T! element, System.Collections.Generic.IDictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! replacements, params LinqToDB.SqlQuery.IQueryElement![]! toIgnore) -> T!
static LinqToDB.SqlQuery.SqlExtensions.HasSomeModifiers(this LinqToDB.SqlQuery.SqlSelectClause! select, bool ignoreSkip, bool ignoreTake) -> bool
static LinqToDB.SqlQuery.SqlNullabilityExpression.ApplyNullability(LinqToDB.SqlQuery.ISqlExpression! sqlExpression, bool canBeNull) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.SqlNullabilityExpression.ApplyNullability(LinqToDB.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.SqlQuery.SqlPredicate.ExprExpr.SwapOperator(LinqToDB.SqlQuery.SqlPredicate.Operator op) -> LinqToDB.SqlQuery.SqlPredicate.Operator
static LinqToDB.SqlQuery.SqlPredicate.MakeBool(bool isTrue) -> LinqToDB.SqlQuery.ISqlPredicate!
static readonly LinqToDB.Common.DbDataType.Undefined -> LinqToDB.Common.DbDataType
static readonly LinqToDB.Expressions.ExpressionConstants.DataContextParam -> System.Linq.Expressions.ParameterExpression!
static readonly LinqToDB.Expressions.ExpressionInstances.EmptyTypes -> System.Linq.Expressions.Expression!
static readonly LinqToDB.Reflection.MemberInfoEqualityComparer.Default -> LinqToDB.Reflection.MemberInfoEqualityComparer!
static readonly LinqToDB.Reflection.Methods.Enumerable.Single -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Enumerable.SingleOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Enumerable.SingleOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.LinqToDB.ElementAtLambda -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.LinqToDB.SkipLambda -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Queryable.AsQueryable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Queryable.Single -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Queryable.SingleOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Reflection.Methods.Queryable.SingleOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.SqlQuery.QueryElement.ReferenceComparer -> System.Collections.Generic.IEqualityComparer<LinqToDB.SqlQuery.IQueryElement!>!
static readonly LinqToDB.SqlQuery.SqlAliasPlaceholder.Instance -> LinqToDB.SqlQuery.SqlAliasPlaceholder!
static readonly LinqToDB.SqlQuery.SqlPredicate.False -> LinqToDB.SqlQuery.SqlPredicate.FalsePredicate!
static readonly LinqToDB.SqlQuery.SqlPredicate.True -> LinqToDB.SqlQuery.SqlPredicate.TruePredicate!
virtual LinqToDB.DataProvider.DataProviderBase.CreateIdentifierService() -> LinqToDB.DataProvider.IIdentifierService!
virtual LinqToDB.DataProvider.DataProviderBase.InitServiceProvider(LinqToDB.DataProvider.SimpleServiceProvider! serviceProvider) -> void
virtual LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.NullCharSize.get -> int
virtual LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.UnknownCharSize.get -> int
virtual LinqToDB.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.GetCaseSensitiveParameter(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> bool?
virtual LinqToDB.DataProvider.IdentifierServiceBase.CorrectAlias(string! alias) -> string!
virtual LinqToDB.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.ProcessConversion(LinqToDB.SqlQuery.SqlCastExpression! cast, out LinqToDB.SqlQuery.ISqlExpression! result) -> bool
virtual LinqToDB.Expressions.ExpressionPrinter.Append(string! value) -> LinqToDB.Expressions.ExpressionPrinter!
virtual LinqToDB.Expressions.ExpressionPrinter.AppendLine() -> LinqToDB.Expressions.ExpressionPrinter!
virtual LinqToDB.Expressions.ExpressionPrinter.AppendLine(string! value) -> System.Linq.Expressions.ExpressionVisitor!
virtual LinqToDB.Expressions.ExpressionPrinter.AppendLines(string! value, bool skipFinalNewline = false) -> LinqToDB.Expressions.ExpressionPrinter!
virtual LinqToDB.Expressions.ExpressionPrinter.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType expressionType) -> string!
virtual LinqToDB.Expressions.ExpressionPrinter.Indent() -> System.IDisposable!
virtual LinqToDB.Expressions.ExpressionPrinter.PrintExpression(System.Linq.Expressions.Expression! expression, int? characterLimit = null) -> string!
virtual LinqToDB.Expressions.ExpressionPrinter.PrintExpressionDebug(System.Linq.Expressions.Expression! expression) -> string!
virtual LinqToDB.Expressions.ExpressionPrinter.VisitCollection<T>(System.Collections.Generic.IReadOnlyCollection<T!>! items, System.Action<LinqToDB.Expressions.ExpressionPrinter!>? joinAction = null) -> void
virtual LinqToDB.Expressions.ExpressionVisitorBase.Cleanup() -> void
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitChangeTypeExpression(LinqToDB.Expressions.ChangeTypeExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitDefaultValueExpression(LinqToDB.Expressions.DefaultValueExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitPlaceholderExpression(LinqToDB.Expressions.PlaceholderExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitSqlDefaultIfEmptyExpression(LinqToDB.Expressions.SqlDefaultIfEmptyExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitSqlGenericConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitSqlPlaceholderExpression(LinqToDB.Expressions.SqlPlaceholderExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitSqlQueryRootExpression(LinqToDB.Expressions.SqlQueryRootExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitTagExpression(LinqToDB.Expressions.TagExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Expressions.SqlQueryDependentAttribute.PrepareForCache(System.Linq.Expressions.Expression! expression, LinqToDB.Expressions.IExpressionEvaluator! evaluator) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Interceptors.Internal.EntityBindingInterceptor.ConvertConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression! expression) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateMakeDateOnly(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Common.DbDataType resulType, LinqToDB.SqlQuery.ISqlExpression! year, LinqToDB.SqlQuery.ISqlExpression! month, LinqToDB.SqlQuery.ISqlExpression! day, LinqToDB.SqlQuery.ISqlExpression? hour, LinqToDB.SqlQuery.ISqlExpression? minute, LinqToDB.SqlQuery.ISqlExpression? second, LinqToDB.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestamp(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestampUtc(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestampUtc(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.DateFunctionsTranslatorBase.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MemberTranslatorBase.TranslateOverrideHandler(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.ConvertToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateConvertToBoolean(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateMemberExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateMethodCall(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertBigInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertBit(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertCharLength(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDecimalPrecision(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDecimalPrecisionScale(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDefaultChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDefaultDecimal(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDefaultNChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDefaultNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertDefaultVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertFloat(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertNChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertReal(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertSmallInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertTinyInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.SqlTypesTranslationDefault.ConvertVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.<Clone>$() -> LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement!
virtual LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.EqualityContract.get -> System.Type!
virtual LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.Equals(LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement? other) -> bool
virtual LinqToDB.Linq.Translation.TranslationRegistration.MemberReplacement.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Linq.Translation.TranslationRegistration.TranslateFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! member, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.TranslationRegistration.TranslateMemberAccessFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Linq.Translation.TranslationRegistration.TranslateMethodFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>.Invoke(TContext context, System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, bool? inlineParameters) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Sql.TableFunctionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildAnchor(LinqToDB.SqlQuery.SqlAnchor! anchor) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataTypeFromDataType(LinqToDB.Common.DbDataType type, bool forCreateTable, bool canBeNull) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeInto(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOn(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeStatement! mergeStatement) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDelete(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationInsert(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdate(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeSourceQuery(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlTableLikeSource! mergeSource) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeTerminator(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! caseExpression) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlCastExpression(LinqToDB.SqlQuery.SqlCastExpression! castExpression) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlConditionExpression(LinqToDB.SqlQuery.SqlConditionExpression! conditionExpression) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlRow(LinqToDB.SqlQuery.SqlRowExpression! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildTypedExpression(LinqToDB.Common.DbDataType dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.ShouldBuildWhere(LinqToDB.SqlQuery.SelectQuery! selectQuery, out LinqToDB.SqlQuery.SqlSearchCondition! condition) -> bool
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.BasicCorrectUpdate(LinqToDB.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions, bool wrapForOutput) -> LinqToDB.SqlQuery.SqlUpdateStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSkipTake(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionConvertVisitor!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.CreateOptimizerVisitor(bool allowModify) -> LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeInsert(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeSelect(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeUpdate(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.Convert(LinqToDB.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext, LinqToDB.SqlQuery.IQueryElement! element, bool visitQueries, bool isInsideNot) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertBetweenPredicate(LinqToDB.SqlQuery.SqlPredicate.Between! between) -> LinqToDB.SqlQuery.ISqlPredicate!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertRowInList(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlExpression(LinqToDB.SqlQuery.SqlExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.EscapeLikeCharacters(LinqToDB.SqlQuery.ISqlExpression! expression, ref LinqToDB.SqlQuery.ISqlExpression? escape) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.EscapeLikeCharacters(string! str, string! escape) -> string!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.EscapeLikePattern(string! str) -> string!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.GetMaxDisplaySize(LinqToDB.Common.DbDataType type) -> int?
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.GetMaxLength(LinqToDB.Common.DbDataType type) -> int?
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.GetMaxPrecision(LinqToDB.Common.DbDataType type) -> int?
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.GetMaxScale(LinqToDB.Common.DbDataType type) -> int?
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikeEscapeCharacter.get -> string!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikePatternParameterSupport.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikeValueParameterSupport.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.LikeWildcardCharacter.get -> string!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SupportsBooleanInColumn.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.Optimize(LinqToDB.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext, LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.IQueryElement! element, bool visitQueries, bool isInsideNot, bool reduceBinary) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.GetVisitMode(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.VisitMode
virtual LinqToDB.SqlQuery.QueryElementVisitor.NotifyReplaced(LinqToDB.SqlQuery.IQueryElement! newElement, LinqToDB.SqlQuery.IQueryElement! oldElement) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.ShouldReplace(LinqToDB.SqlQuery.IQueryElement! element) -> bool
virtual LinqToDB.SqlQuery.QueryElementVisitor.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitBetweenPredicate(LinqToDB.SqlQuery.SqlPredicate.Between! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitCaseItem(LinqToDB.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitCteClause(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitCteClauseReference(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitExprPredicate(LinqToDB.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitFalsePredicate(LinqToDB.SqlQuery.SqlPredicate.FalsePredicate! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitInListPredicate(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitInSubQueryPredicate(LinqToDB.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitIsDistinctPredicate(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitIsNullPredicate(LinqToDB.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitIsTruePredicate(LinqToDB.SqlQuery.SqlPredicate.IsTrue! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitLikePredicate(LinqToDB.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitNotPredicate(LinqToDB.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlAliasPlaceholder(LinqToDB.SqlQuery.SqlAliasPlaceholder! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlAnchor(LinqToDB.SqlQuery.SqlAnchor! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCastExpression(LinqToDB.SqlQuery.SqlCastExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCoalesceExpression(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlColumnExpression(LinqToDB.SqlQuery.SqlColumn! column, LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlColumnReference(LinqToDB.SqlQuery.SqlColumn! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlComment(LinqToDB.SqlQuery.SqlComment! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCompareToExpression(LinqToDB.SqlQuery.SqlCompareToExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlConditionalInsertClause(LinqToDB.SqlQuery.SqlConditionalInsertClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlConditionExpression(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCreateTableStatement(LinqToDB.SqlQuery.SqlCreateTableStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlCteTable(LinqToDB.SqlQuery.SqlCteTable! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlDataType(LinqToDB.SqlQuery.SqlDataType! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlDeleteStatement(LinqToDB.SqlQuery.SqlDeleteStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlDropTableStatement(LinqToDB.SqlQuery.SqlDropTableStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlExpression(LinqToDB.SqlQuery.SqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlFieldReference(LinqToDB.SqlQuery.SqlField! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlFromClause(LinqToDB.SqlQuery.SqlFromClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlFunction(LinqToDB.SqlQuery.SqlFunction! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlGroupByClause(LinqToDB.SqlQuery.SqlGroupByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlGroupByItem(LinqToDB.SqlQuery.ISqlExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlGroupingSet(LinqToDB.SqlQuery.SqlGroupingSet! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlHavingClause(LinqToDB.SqlQuery.SqlHavingClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlInlinedSqlExpression(LinqToDB.SqlQuery.SqlInlinedSqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlInlinedToSqlExpression(LinqToDB.SqlQuery.SqlInlinedToSqlExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlInsertClause(LinqToDB.SqlQuery.SqlInsertClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlInsertStatement(LinqToDB.SqlQuery.SqlInsertStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlJoinedTable(LinqToDB.SqlQuery.SqlJoinedTable! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlMergeOperationClause(LinqToDB.SqlQuery.SqlMergeOperationClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlMergeStatement(LinqToDB.SqlQuery.SqlMergeStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlMultiInsertStatement(LinqToDB.SqlQuery.SqlMultiInsertStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlNullabilityExpression(LinqToDB.SqlQuery.SqlNullabilityExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlObjectExpression(LinqToDB.SqlQuery.SqlObjectExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlOrderByClause(LinqToDB.SqlQuery.SqlOrderByClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlOrderByItem(LinqToDB.SqlQuery.SqlOrderByItem! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlOutputClause(LinqToDB.SqlQuery.SqlOutputClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlParameter(LinqToDB.SqlQuery.SqlParameter! sqlParameter) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlQueryExtension(LinqToDB.SqlQuery.SqlQueryExtension! extension) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlRawSqlTable(LinqToDB.SqlQuery.SqlRawSqlTable! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlRow(LinqToDB.SqlQuery.SqlRowExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlSearchCondition(LinqToDB.SqlQuery.SqlSearchCondition! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlSelectClause(LinqToDB.SqlQuery.SqlSelectClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlSelectStatement(LinqToDB.SqlQuery.SqlSelectStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlSetExpression(LinqToDB.SqlQuery.SqlSetExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlSetOperator(LinqToDB.SqlQuery.SqlSetOperator! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlTable(LinqToDB.SqlQuery.SqlTable! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlTableLikeSource(LinqToDB.SqlQuery.SqlTableLikeSource! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlTableSource(LinqToDB.SqlQuery.SqlTableSource! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlTruncateTableStatement(LinqToDB.SqlQuery.SqlTruncateTableStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlUpdateClause(LinqToDB.SqlQuery.SqlUpdateClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlUpdateStatement(LinqToDB.SqlQuery.SqlUpdateStatement! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlValue(LinqToDB.SqlQuery.SqlValue! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlValuesTable(LinqToDB.SqlQuery.SqlValuesTable! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlWhereClause(LinqToDB.SqlQuery.SqlWhereClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitSqlWithClause(LinqToDB.SqlQuery.SqlWithClause! element) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitTruePredicate(LinqToDB.SqlQuery.SqlPredicate.TruePredicate! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.SqlExpressionBase.Equals(LinqToDB.SqlQuery.ISqlExpression? other) -> bool
virtual LinqToDB.SqlQuery.SqlTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>?
virtual LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.Cleanup() -> void
virtual LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.ProcessElement(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1>.Equals(object other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3>(this LinqToDB.Sql.SqlRow<T1, T2, T3> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2>(this LinqToDB.Sql.SqlRow<T1, T2> thisRow, LinqToDB.Sql.SqlRow<T1, T2> other) -> bool
~static LinqToDB.Sql.Overlaps<T1>(this LinqToDB.Sql.SqlRow<T1> thisRow, LinqToDB.Sql.SqlRow<T1> other) -> bool
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>
~static LinqToDB.Sql.Row<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4>
~static LinqToDB.Sql.Row<T1, T2, T3>(T1 value1, T2 value2, T3 value3) -> LinqToDB.Sql.SqlRow<T1, T2, T3>
~static LinqToDB.Sql.Row<T1, T2>(T1 value1, T2 value2) -> LinqToDB.Sql.SqlRow<T1, T2>
~static LinqToDB.Sql.Row<T1>(T1 value1) -> LinqToDB.Sql.SqlRow<T1>
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator <(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator <=(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator >(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator >=(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator <(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator <=(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator >(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator >=(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static readonly LinqToDB.Sql.SqlRow.Types -> System.Type[]
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*abstract LinqToDB.Remote.RemoteDataContextBase.Clone() -> LinqToDB.IDataContext!
*REMOVED*abstract LinqToDB.Sql.SqlRow<T1, T2>.CompareTo(object? obj) -> int
*REMOVED*abstract LinqToDB.SqlQuery.ConditionBase<T1, T2>.GetNext() -> T2
*REMOVED*abstract LinqToDB.SqlQuery.ConditionBase<T1, T2>.Search.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.CanBeNull.get -> bool
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.All = "ALL" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.AsOf = "AS OF" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.Between = "BETWEEN" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.ContainedIn = "CONTAINED IN (" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.FromTo = "FROM" -> string!
*REMOVED*const LinqToDB.SqlQuery.PseudoFunctions.CONVERT = "$Convert$" -> string!
*REMOVED*LinqToDB.Async.IAsyncDbConnection.TryClone() -> System.Data.Common.DbConnection?
*REMOVED*LinqToDB.Common.Internal.IdentifierBuilder.AddRange(System.Collections.IEnumerable! items) -> LinqToDB.Common.Internal.IdentifierBuilder
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo? x, System.Reflection.MemberInfo? y) -> bool
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo! obj) -> int
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.MemberInfoEqualityComparer() -> void
*REMOVED*LinqToDB.Data.DataConnection.Clone() -> object!
*REMOVED*LinqToDB.DataContextOptions.DataContextOptions(int? CommandTimeout = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors = null) -> void
*REMOVED*LinqToDB.DataContextOptions.Deconstruct(out int? CommandTimeout, out System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable
*REMOVED*LinqToDB.IDataContext.Clone(bool forNestedQuery) -> LinqToDB.IDataContext!
*REMOVED*LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query! query, int queryNumber, System.Linq.Expressions.Expression! expression, object?[]? parameters, object?[]? preambles) -> LinqToDB.Linq.IQueryRunner!
*REMOVED*LinqToDB.IDataContext.UnwrapDataObjectInterceptor.get -> LinqToDB.Interceptors.IUnwrapDataObjectInterceptor?
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeCompiled(System.Linq.Expressions.Expression! expr) -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ClearVisitedCache() -> void
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExpandExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExpandExpressionTransformer(System.Linq.Expressions.Expression! expr) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExposeExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsDependsOnParameters() -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expr) -> bool
*REMOVED*LinqToDB.Linq.Builder.IToSqlConverter.ToSql(System.Linq.Expressions.Expression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.Expression -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.ExpressionsToReplace -> System.Collections.Generic.List<LinqToDB.Linq.Builder.SequenceConvertPath!>?
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.Parameter -> System.Linq.Expressions.ParameterExpression?
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.SequenceConvertInfo() -> void
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Expr -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Level -> int
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Path -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.SequenceConvertPath() -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.AppendMember(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.Clone(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.CompareLastMember(LinqToDB.Linq.Builder.SqlInfo! info) -> bool
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.CompareMembers(LinqToDB.Linq.Builder.SqlInfo! info) -> bool
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi, LinqToDB.SqlQuery.ISqlExpression! sql, int index) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Reflection.MemberInfo! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Reflection.MemberInfo![]! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithIndex(int index) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithMember(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithMembers(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithQuery(LinqToDB.SqlQuery.SelectQuery? query) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithSql(LinqToDB.SqlQuery.ISqlExpression! sql) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Sql.ExpressionAttribute.GetCanBeNull(LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> bool
*REMOVED*LinqToDB.Sql.ExtensionAttribute.BuildFunctionsChain<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expr, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam!>!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpression(System.Linq.Expressions.Expression! expr, bool unwrap, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ExtensionBuilder(TContext context, string? configuration, object? builderValue, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! extension, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter, System.Reflection.MemberInfo! member, System.Linq.Expressions.Expression![]! arguments) -> void
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(int index, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(string! argName, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.IGroupBy.Cube<T>(System.Linq.Expressions.Expression<System.Func<T>!>! cubeKey) -> T
*REMOVED*LinqToDB.Sql.IGroupBy.GroupingSets<T>(System.Linq.Expressions.Expression<System.Func<T>!>! setsExpression) -> T
*REMOVED*LinqToDB.Sql.IGroupBy.Rollup<T>(System.Linq.Expressions.Expression<System.Func<T>!>! rollupKey) -> T
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.GetExpression(int index, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.GetExpression(string! argName, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.SqlExtension.IsAggregate.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.IsPure.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.IsWindowFunction.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.SqlExtension(string! expr, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
*REMOVED*LinqToDB.Sql.SqlExtension.SqlExtension(System.Type? systemType, string! expr, int precedence, int chainPrecedence, bool isAggregate, bool isWindowFunction, bool isPure, bool isPredicate, bool? canBeNull, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
*REMOVED*LinqToDB.Sql.SqlID.ToSql(System.Linq.Expressions.Expression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.AlternativeGetSelectedColumns(LinqToDB.SqlQuery.SelectQuery! selectQuery, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>! columns) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlDataType! dataType) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildJoinTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlJoinedTable! join, ref int joinCounter) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, int startIndent = 0) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.SqlQuery.SqlDataType? dataType, object? value) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.FromClause = 6 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.GroupByClause = 8 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.HavingClause = 9 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.InsertClause = 5 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.OffsetLimit = 11 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.OrderByClause = 10 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.Output = 13 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.QueryExtensions = 14 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.Tag = 12 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.WhereClause = 7 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.AlternativeConvertToBoolean(LinqToDB.SqlQuery.SqlFunction! func, LinqToDB.DataOptions! dataOptions, int paramNumber) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.CheckAliases(LinqToDB.SqlQuery.SqlStatement! statement, int maxLen) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertBooleanExprToCase(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertCoalesceToBinaryFunc(LinqToDB.SqlQuery.SqlFunction! func, string! funcName, bool supportsParameters = true) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertFunctionParameters(LinqToDB.SqlQuery.SqlFunction! func, bool withParameters = false) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSearchStringPredicateViaLike(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectUpdateTable(LinqToDB.SqlQuery.SqlUpdateStatement! statement) -> LinqToDB.SqlQuery.SqlUpdateStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Dec(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.FindUpdateTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlTable! tableToFind) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.FloorBeforeConvert(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdate(LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlUpdateStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdatePostgreSqlite(LinqToDB.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetMainTableSource(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SqlTableSource?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Inc(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeAggregates(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, bool withConversion) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeJoins(LinqToDB.SqlQuery.SqlStatement! statement) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeRowExprExpr(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(LinqToDB.SqlQuery.SqlStatement! statement, bool supportsEmptyOrderBy, bool onlySubqueries) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RowComparisonFallback(LinqToDB.SqlQuery.SqlPredicate.Operator op, LinqToDB.SqlQuery.SqlRow! row1, LinqToDB.SqlQuery.SqlRow! row2, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RowIsNullFallback(LinqToDB.SqlQuery.SqlRow! row, bool isNot) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.RunOptimizationContext() -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.RunOptimizationContext(LinqToDB.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.SqlProvider.BasicSqlOptimizer! optimizer, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, bool register, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! func) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.ISqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlDataType! dataType) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.ISqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, int startIndent = 0) -> void
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.ConvertElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! context) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.ConvertSkipTake(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.Aliases.get -> LinqToDB.SqlQuery.AliasesContext!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.Context.get -> LinqToDB.SqlQuery.EvaluationContext!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.ConvertAll<T>(LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext context, T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, bool>! parentAction) -> T!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.IsOptimized(LinqToDB.SqlQuery.IQueryElement! element, out LinqToDB.SqlQuery.IQueryElement? newExpr) -> bool
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.SqlQuery.AliasesContext! aliases, bool isParameterOrderDependent, System.Func<LinqToDB.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.RegisterOptimized(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.IQueryElement! newExpr) -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctOrderBySupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctOrderBySupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsGroupByColumnRequred.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsGroupByColumnRequred.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsProjectionBoolSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsProjectionBoolSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsSybaseBuggyGroupBy.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsSybaseBuggyGroupBy.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSetTableAliasSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSetTableAliasSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.CanConvert(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.DataOptions! options, object? value) -> bool
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.Convert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlDataType? dataType, LinqToDB.DataOptions! options, object? value) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.SetConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.SqlQuery.SqlDataType!, LinqToDB.DataOptions!, object!>? converter) -> void
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.TryConvert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlDataType? dataType, LinqToDB.DataOptions! options, object? value) -> bool
*REMOVED*LinqToDB.SqlQuery.ClauseBase.End() -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.ClauseBase.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.ClauseBase(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.End() -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.From.get -> LinqToDB.SqlQuery.SqlFromClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.GroupBy.get -> LinqToDB.SqlQuery.SqlGroupByClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.OrderBy.get -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.Select.get -> LinqToDB.SqlQuery.SqlSelectClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.SelectQuery.get -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>.Clone<T>(T![]? elements) -> T![]?
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>.CloneVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.ConditionBase() -> void
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Exists(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Between(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.In(bool compareNullsAsValues, params object![]! exprs) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.InSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.IsNotNull.get -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.IsNull.get -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(LinqToDB.SqlQuery.ISqlExpression! expression) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.SqlValue? escape) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(string! expression) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(string! expression, LinqToDB.SqlQuery.SqlValue! escape) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotBetween(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotIn(bool compareNullsAsValues, params object![]! exprs) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotInSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.All(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Any(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Field(LinqToDB.SqlQuery.SqlField! field) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Some(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Value(object! value) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Exists(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.SetOr(bool value) -> T1!
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.AddVisited(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.IQueryElement? newElement) -> void
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.AllowMutation -> bool
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.Context -> TContext
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.CurrentElement -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.HasStack -> bool
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.ParentElement.get -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.RemoveVisited(LinqToDB.SqlQuery.IQueryElement! element) -> void
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.Stack.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.IQueryElement!>!
*REMOVED*LinqToDB.SqlQuery.CteClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.CteClause.Fields.get -> LinqToDB.SqlQuery.SqlField![]?
*REMOVED*LinqToDB.SqlQuery.CteClause.RegisterFieldMapping(int index, System.Func<LinqToDB.SqlQuery.SqlField!>! fieldFactory) -> LinqToDB.SqlQuery.SqlField!
*REMOVED*LinqToDB.SqlQuery.CteClause.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.CteClause.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.IQueryElement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.ISqlExpression.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.ISqlExpressionWalkable
*REMOVED*LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.ISqlPredicate.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension) -> void
*REMOVED*LinqToDB.SqlQuery.ISqlTableExtensionBuilder.Build(LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension, LinqToDB.SqlQuery.SqlTable! table, string! alias) -> void
*REMOVED*LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.JoinType.CrossApply = 3 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.Full = 6 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.OuterApply = 4 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.Right = 5 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.BetweenPredicate = 16 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Column = 24 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Comment = 59 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Condition = 26 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ConditionalInsertClause = 52 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.CreateTableStatement = 53 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.CteClause = 40 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.DeleteStatement = 49 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.DropTableStatement = 54 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ExprExprPredicate = 13 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ExprPredicate = 11 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.FromClause = 33 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.FuncLikePredicate = 22 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.GroupByClause = 35 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.GroupingSet = 58 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InListPredicate = 21 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertClause = 30 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertOrUpdateStatement = 47 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertStatement = 46 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InSubQueryPredicate = 20 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsDistinctPredicate = 18 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsNullPredicate = 17 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsTruePredicate = 19 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.JoinedTable = 28 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.LikePredicate = 14 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MergeOperationClause = 57 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MergeStatement = 50 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MultiInsertStatement = 51 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.NotExprPredicate = 12 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OrderByClause = 36 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OrderByItem = 37 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OutputClause = 44 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SearchCondition = 25 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SearchStringPredicate = 15 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SelectClause = 29 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SelectStatement = 45 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SetExpression = 32 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SetOperator = 38 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlAliasPlaceholder = 9 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlBinaryExpression = 5 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlCteTable = 41 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlDataType = 7 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlID = 60 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlObjectExpression = 4 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlQuery = 23 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlRawSqlTable = 42 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlRow = 10 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlTable = 8 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlTableLikeSource = 56 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlValue = 6 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlValuesTable = 43 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.TableSource = 27 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.TruncateTableStatement = 55 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.UpdateClause = 31 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.UpdateStatement = 48 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.WhereClause = 34 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.WithClause = 39 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.Find(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor(System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! find) -> void
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor(TContext context, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! find) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor(bool all, System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor(TContext context, bool all, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor(bool all, System.Action<LinqToDB.SqlQuery.IQueryElement!>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor(TContext context, bool all, System.Action<TContext, LinqToDB.SqlQuery.IQueryElement!>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> void
*REMOVED*LinqToDB.SqlQuery.SelectQuery.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SelectQuery.DebugSqlText.get -> string!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SelectQuery.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ParentSelect.get -> LinqToDB.SqlQuery.SelectQuery?
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ParentSelect.set -> void
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SelectQuery.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.SqlAliasPlaceholder() -> void
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2) -> void
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2, int precedence) -> void
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlText.get -> string!
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlColumn.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Equals(LinqToDB.SqlQuery.SqlColumn? other) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlColumn.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlComment.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlCondition
*REMOVED*LinqToDB.SqlQuery.SqlCondition.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Deconstruct(out bool isNot, out LinqToDB.SqlQuery.ISqlPredicate! predicate, out bool isOr) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Equals(LinqToDB.SqlQuery.SqlCondition! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsNot.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsNot.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsOr.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsOr.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Predicate.get -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Predicate.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.SqlCondition(bool isNot, LinqToDB.SqlQuery.ISqlPredicate! predicate) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.SqlCondition(bool isNot, LinqToDB.SqlQuery.ISqlPredicate! predicate, bool isOr) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.CteClause! cte, LinqToDB.Mapping.EntityDescriptor! entityDescriptor) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.SqlCteTable! table, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlField!>! fields, LinqToDB.SqlQuery.CteClause! cte) -> void
*REMOVED*LinqToDB.SqlQuery.SqlExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlExpression.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlExpression.SqlExpression(System.Type? systemType, string! expr, int precedence, LinqToDB.SqlQuery.SqlFlags flags, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlExpression.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlField.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlField.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlField.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlField.SqlField(System.Type! systemType, string? name, bool canBeNull) -> void
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next.And.get -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next.Or.get -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*LinqToDB.SqlQuery.SqlFunction.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlFunction.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlFunction.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlFunction.SqlFunction(System.Type! systemType, string! name, bool isAggregate, bool isPure, int precedence, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlFunction.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlGroupByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlGroupingSet.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlGroupingSet.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlInsertClause.DefaultItems.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlSetExpression!>!
*REMOVED*LinqToDB.SqlQuery.SqlInsertStatement.SqlInsertStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlJoinedTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlJoinedTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlObjectExpression.SqlObjectExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Linq.Builder.SqlInfo![]! infoParameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr, bool isDescending) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ExprAsc(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ExprDesc(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field, bool isDescending) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.FieldAsc(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.FieldDesc(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByItem.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlOrderByItem.SqlOrderByItem(LinqToDB.SqlQuery.ISqlExpression! expression, bool isDescending) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.InSubQuery.InSubQuery(LinqToDB.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.Reduce() -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.NotExpr
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.NotExpr.NotExpr(LinqToDB.SqlQuery.ISqlExpression! exp1, bool isNot, int precedence) -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.BuilderType.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Configuration.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Scope.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlRow
*REMOVED*LinqToDB.SqlQuery.SqlRow.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlRow.Equals(LinqToDB.SqlQuery.ISqlExpression! other) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlRow.SqlRow(LinqToDB.SqlQuery.ISqlExpression![]! values) -> void
*REMOVED*LinqToDB.SqlQuery.SqlRow.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlRow.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlRow.Values.get -> LinqToDB.SqlQuery.ISqlExpression![]!
*REMOVED*LinqToDB.SqlQuery.SqlRow.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Add(LinqToDB.SqlQuery.SqlCondition! condition) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Conditions.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Deconstruct(out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>! conditions) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.And.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.Or.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.ToExpr() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition() -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(LinqToDB.SqlQuery.SqlCondition! condition) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(LinqToDB.SqlQuery.SqlCondition! condition1, LinqToDB.SqlQuery.SqlCondition! condition2) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlCondition!>! list) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlSelectClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlSelectStatement.SqlSelectStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlTable.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlTable.Fields.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlField!>!
*REMOVED*LinqToDB.SqlQuery.SqlTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.Source.get -> LinqToDB.SqlQuery.ISqlTableSource!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.SourceID.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*LinqToDB.SqlQuery.SqlTableSource.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlTableSource.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlUpdateStatement.AfterSetAliases() -> void
*REMOVED*LinqToDB.SqlQuery.SqlUpdateStatement.SqlUpdateStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next.And.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next.Or.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SqlWithClause.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlWithClause.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.WalkOptions
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildTypedExpression(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeValueParameterSupport.get -> bool
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.OptimizeExpression(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! convertVisitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertPredicateImpl(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.SupportsNullInColumn.get -> bool
*REMOVED*override LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> IExecutionScope?
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.IsNestedJoinSupported.get -> bool
*REMOVED*override LinqToDB.Linq.Builder.SqlInfo.ToString() -> string!
*REMOVED*override LinqToDB.Sql.ExtensionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.Sql.FunctionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.Sql.PropertyAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.Sql.TableExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlColumn.GetHashCode() -> int
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlCteTable.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlField.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsNull.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsNull.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsTrue.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsTrue.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.NotExpr.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.NotExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlRawSqlTable.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlRawSqlTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.SqlQuery.SqlSearchCondition.GetNext() -> LinqToDB.SqlQuery.SqlSearchCondition.Next!
*REMOVED*override LinqToDB.SqlQuery.SqlSearchCondition.Search.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*override LinqToDB.SqlQuery.SqlSelectStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlSelectStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlStatementWithQueryBase.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlStatementWithQueryBase.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlTable.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*readonly LinqToDB.DataProvider.MultipleRowsHelper.ColumnTypes -> LinqToDB.SqlQuery.SqlDataType![]!
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Index -> int
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.MemberChain -> System.Reflection.MemberInfo![]!
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Query -> LinqToDB.SqlQuery.SelectQuery?
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Sql -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.DataOptions -> LinqToDB.DataOptions!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Func -> System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.MappingSchema -> LinqToDB.Mapping.MappingSchema!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.OptimizationContext -> LinqToDB.SqlProvider.OptimizationContext!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Optimizer -> LinqToDB.SqlProvider.BasicSqlOptimizer!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Register -> bool
*REMOVED*readonly LinqToDB.SqlQuery.QueryParentVisitor<TContext>.VisitedElements -> System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement?>!
*REMOVED*readonly LinqToDB.SqlQuery.QueryVisitor<TContext>.VisitedElements -> System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement?>!
*REMOVED*readonly LinqToDB.SqlQuery.WalkOptions.ProcessParent -> bool
*REMOVED*readonly LinqToDB.SqlQuery.WalkOptions.SkipColumnDeclaration -> bool
*REMOVED*static LinqToDB.AnalyticFunctions.Corr<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.Corr<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.CovarSamp<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.CovarSamp<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
*REMOVED*static LinqToDB.Common.Tools.CreateEmptyQuery(System.Type! elementType) -> System.Linq.IQueryable!
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeFirebirdEscapeSymbols -> string![]!
*REMOVED*static LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.OracleLikeCharactersToEscape -> string![]!
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr, LinqToDB.IDataContext? dataContext = null) -> object?
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr, LinqToDB.IDataContext? dataContext = null) -> T?
*REMOVED*static LinqToDB.Extensions.ReflectionExtensions.IsEnumerableTType(this System.Type! type, System.Type! elementType) -> bool
*REMOVED*static LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.AggregateExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*static LinqToDB.Linq.Expressions.AccessRound<T>(T value, int? precision) -> T
*REMOVED*static LinqToDB.Linq.Expressions.DateAdd(LinqToDB.Sql.DateParts part, int? number, int? days) -> System.DateTime?
*REMOVED*static LinqToDB.Linq.Expressions.MakeDateTime2(int? year, int? month, int? day) -> System.DateTime?
*REMOVED*static LinqToDB.Sql.Convert2<TTo, TFrom>(TTo to, TFrom from) -> TTo
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.CalcCanBeNull(LinqToDB.Sql.IsNullableType isNullable, System.Collections.Generic.IEnumerable<bool>! nullInfo) -> bool?
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<System.Linq.Expressions.Expression?>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression?>! converter) -> LinqToDB.SqlQuery.ISqlExpression![]!
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<System.Linq.Expressions.Expression?>! knownExpressions, bool ignoreGenericParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext context, string! expression, System.Func<TContext, string!, string?, string?>! valueProvider) -> string!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.BuildSqlExpression(LinqToDB.Sql.SqlExtension! root, System.Type? systemType, int precedence, LinqToDB.SqlQuery.SqlFlags flags, bool? canBeNull, LinqToDB.Sql.IsNullableType isNullable) -> LinqToDB.SqlQuery.SqlExpression!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.ExcludeExtensionChain(LinqToDB.Mapping.MappingSchema! mapping, System.Linq.Expressions.Expression! expr) -> System.Linq.Expressions.Expression!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.GetExtensionAttributes(System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.MappingSchema! mapping) -> LinqToDB.Sql.ExtensionAttribute![]!
*REMOVED*static LinqToDB.Sql.Overlaps<T1, T2, T3, T4>(this LinqToDB.Sql.SqlRow<T1, T2>! thisRow, LinqToDB.Sql.SqlRow<T3, T4>! other) -> bool
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, LinqToDB.Sql.SqlRow<T6, LinqToDB.Sql.SqlRow<T7, T8>!>!>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, LinqToDB.Sql.SqlRow<T6, T7>!>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, T6>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, T5>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, T4>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3>(T1 value1, T2 value2, T3 value3) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, T3>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2>(T1 value1, T2 value2) -> LinqToDB.Sql.SqlRow<T1, T2>!
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator <(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator <=(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator >(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator >=(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.CreateSqlValue(object? value, LinqToDB.Common.DbDataType dbDataType, params LinqToDB.SqlQuery.ISqlExpression![]! basedOn) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.CreateSqlValue(object? value, LinqToDB.SqlQuery.SqlBinaryExpression! be) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.GenerateEscapeReplacement(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ISqlExpression! character) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsAggregationFunction(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsBooleanParameter(LinqToDB.SqlQuery.ISqlExpression! expr, int count, int i) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateDataOffsetType(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateDataType(LinqToDB.SqlQuery.ISqlExpression! expr, string! dateName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateTime2Type(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateTimeType(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsSmallDateTimeType(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsTimeDataType(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.StandardLikeCharactersToEscape -> string![]!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.TryConvertToValue(LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.Join(this LinqToDB.SqlQuery.ISqlTableSource! table, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.Join(this LinqToDB.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.WeakJoin(this LinqToDB.SqlQuery.ISqlTableSource! table, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.WeakJoin(this LinqToDB.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.PseudoFunctions.MakeConvert(LinqToDB.SqlQuery.SqlDataType! toType, LinqToDB.SqlQuery.SqlDataType! fromType, LinqToDB.SqlQuery.ISqlExpression! value) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CollectDependencies(LinqToDB.SqlQuery.IQueryElement! root, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>! sources, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlExpression!>! found, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.IQueryElement!>? ignore = null) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationOrWindowFunctionDeep(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationOrWindowFunctionOneLevel(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsElement(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CorrectSearchConditionNesting(LinqToDB.SqlQuery.SelectQuery! sql, LinqToDB.SqlQuery.SqlCondition! condition, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlTableSource!>! forTableSources) -> LinqToDB.SqlQuery.SqlCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CountElements(LinqToDB.SqlQuery.ISqlExpression! expr) -> System.Collections.Generic.IDictionary<LinqToDB.SqlQuery.QueryElementType, int>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.DependencyCount(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! onElement, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> int
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlSearchCondition! searchCondition) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlWhereClause! whereClause) -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateInnerJoined(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateInnerJoined(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateJoins(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlJoinedTable!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelTables(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTable!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.FindJoin(this LinqToDB.SqlQuery.SelectQuery! query, System.Func<LinqToDB.SqlQuery.SqlJoinedTable!, bool>! match) -> LinqToDB.SqlQuery.SqlJoinedTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GenerateEquality(LinqToDB.SqlQuery.ISqlExpression! field1, LinqToDB.SqlQuery.ISqlExpression! field2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetBoolValue(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.EvaluationContext! context) -> bool?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetDbDataType(LinqToDB.SqlQuery.ISqlExpression? expr) -> LinqToDB.Common.DbDataType
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetDeleteTable(this LinqToDB.SqlQuery.SqlDeleteStatement! deleteStatement) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetExpressionType(this LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.Common.DbDataType
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUnderlyingExpression(LinqToDB.SqlQuery.ISqlExpression? expression) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUnderlyingExpressionValue(LinqToDB.SqlQuery.SqlExpression! sqlExpression, bool checkNullability) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUpdateTable(this LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.HasOuterReferences(System.Collections.Generic.ISet<LinqToDB.SqlQuery.ISqlTableSource!>! sources, LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.HasQueryParameters(LinqToDB.SqlQuery.ISqlExpression! expression) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsComplexExpression(this LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsDependsOn(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! onElement, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsDependsOn(LinqToDB.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlTableSource!>! onSources, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsEqualTables(LinqToDB.SqlQuery.SqlTable? table1, LinqToDB.SqlQuery.SqlTable? table2) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsTransitiveExpression(LinqToDB.SqlQuery.SqlExpression! sqlExpression, bool checkNullability) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.JoinRemoval<TContext>(TContext context, LinqToDB.SqlQuery.SqlStatement! statement, System.Func<TContext, LinqToDB.SqlQuery.SqlStatement!, LinqToDB.SqlQuery.SqlJoinedTable!, bool>! joinFunc) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.MoveSearchConditionsToJoin(LinqToDB.SqlQuery.SelectQuery! sql, LinqToDB.SqlQuery.SqlJoinedTable! joinedTable, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>? movedConditions) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.RemoveNotUnusedColumns(this LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.RootQuery(this LinqToDB.SqlQuery.SelectQuery! query) -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ShouldCheckForNull(this LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ToDebugString(this LinqToDB.SqlQuery.IQueryElement! expr) -> string!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.TransformInnerJoinsToWhere(this LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ValidateTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.ISqlTableSource! table) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Clone<T>(this T![]? elements, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! objectTree) -> T![]?
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<T>(this T! element, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, bool>! parentAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.SqlFromClause.Join.Next.implicit operator LinqToDB.SqlQuery.SqlFromClause.Join!(LinqToDB.SqlQuery.SqlFromClause.Join.Next! next) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.SqlStatement.PrepareQueryAndAliases(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.AliasesContext? prevAliasContext, out LinqToDB.SqlQuery.AliasesContext! newAliasContext) -> void
*REMOVED*static readonly LinqToDB.Common.MemberInfoEqualityComparer.Default -> LinqToDB.Common.MemberInfoEqualityComparer!
*REMOVED*static readonly LinqToDB.Reflection.Methods.Enumerable.AsQueryable -> System.Reflection.MethodInfo!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.Default -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.WithProcessParent -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.WithSkipColumnDeclaration -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*virtual LinqToDB.Async.AsyncDbConnection.TryClone() -> System.Data.Common.DbConnection?
*REMOVED*virtual LinqToDB.DataContext.CloneDataConnection(LinqToDB.Data.DataConnection! currentConnection, LinqToDB.DataOptions! options) -> LinqToDB.Data.DataConnection!
*REMOVED*virtual LinqToDB.Expressions.SqlQueryDependentAttribute.PrepareForCache(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*virtual LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*virtual LinqToDB.Sql.TableFunctionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeInto(LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOn(LinqToDB.SqlQuery.SqlMergeStatement! mergeStatement) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDelete(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationInsert(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdate(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeSourceQuery(LinqToDB.SqlQuery.SqlTableLikeSource! mergeSource) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeTerminator(LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlRow(LinqToDB.SqlQuery.SqlRow! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildTypedExpression(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildWhere(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.GetSelectedColumns(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.SupportsBooleanInColumn.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.SupportsNullInColumn.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.CanCompareSearchConditions.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertBetweenPredicate(LinqToDB.SqlQuery.SqlPredicate.Between! between) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertConversion(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertCountSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! context) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertInListPredicate(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlPredicate.InList! p, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertLikePredicate(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlPredicate.Like! predicate, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertPredicateImpl(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSkipTake(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikeCharacters(LinqToDB.SqlQuery.ISqlExpression! expression, ref LinqToDB.SqlQuery.ISqlExpression? escape) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikeCharacters(string! str, string! escape) -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikePattern(string! str) -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxDisplaySize(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxLength(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxPrecision(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxScale(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeEscapeCharacter.get -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeIsEscapeSupported.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikePatternParameterSupport.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeValueParameterSupport.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeWildcardCharacter.get -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! be, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeExpression(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! convertVisitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeFunction(LinqToDB.SqlQuery.SqlFunction! func, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizePredicate(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeQueryElement(LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor, LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeRowInList(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeUpdateSubqueries(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Equal.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Greater.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.GreaterOrEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Less.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.LessOrEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotGreater.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotLess.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Value(object! value) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Value(object! value) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*LinqToDB.SqlOptions.Pack() -> int
*REMOVED*LinqToDB.SqlOptions.Unpack(int n) -> LinqToDB.SqlOptions!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.IsTrue(LinqToDB.SqlQuery.ISqlExpression! exp1, LinqToDB.SqlQuery.ISqlExpression! trueValue, LinqToDB.SqlQuery.ISqlExpression! falseValue, bool? withNull, bool isNot, bool optimizeNull) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.OptimizeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.OptimizeNull.set -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationFunctionOneLevel(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
