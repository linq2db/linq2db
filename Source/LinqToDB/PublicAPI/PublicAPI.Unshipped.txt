#nullable enable
abstract LinqToDB.DataProvider.DataProviderFactoryBase.GetDataProvider(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> LinqToDB.DataProvider.IDataProvider!
abstract LinqToDB.SqlQuery.SqlPredicate.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
const LinqToDB.DataProvider.DataProviderFactoryBase.ASSEMBLY_NAME = "assemblyName" -> string!
const LinqToDB.DataProvider.DataProviderFactoryBase.VERSION = "version" -> string!
const LinqToDB.LinqToDBConstants.Copyright = "© 2011-2025 linq2db.com" -> string!
const LinqToDB.ProviderName.AccessAceOdbc = "Access.Ace.Odbc" -> string!
const LinqToDB.ProviderName.AccessAceOleDb = "Access.Ace.OleDb" -> string!
const LinqToDB.ProviderName.AccessJetOdbc = "Access.Jet.Odbc" -> string!
const LinqToDB.ProviderName.AccessJetOleDb = "Access.Jet.OleDb" -> string!
const LinqToDB.SqlQuery.PseudoFunctions.MERGE_ACTION = "$merge_action$" -> string!
LinqToDB.Async.IQueryProviderAsync.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Common.CompareNulls
LinqToDB.Common.CompareNulls.LikeClr = 0 -> LinqToDB.Common.CompareNulls
LinqToDB.Common.CompareNulls.LikeSql = 1 -> LinqToDB.Common.CompareNulls
LinqToDB.Common.CompareNulls.LikeSqlExceptParameters = 2 -> LinqToDB.Common.CompareNulls
LinqToDB.Common.Internal.ActivatorExt
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Add(TKey key, TValue value) -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Clear() -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Commit() -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Comparer.get -> System.Collections.Generic.IEqualityComparer<TKey>!
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue> item) -> bool
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.ContainsKey(TKey key) -> bool
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[]! array, int arrayIndex) -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Count.get -> int
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.GetEnumerator() -> System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>!
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.IsReadOnly.get -> bool
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Keys.get -> System.Collections.Generic.ICollection<TKey>!
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Remove(TKey key) -> bool
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Rollback() -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.SnapshotDictionary() -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.SnapshotDictionary(System.Collections.Generic.Dictionary<TKey, TValue>! dictionary) -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.SnapshotDictionary(System.Collections.Generic.IEqualityComparer<TKey>! comparer) -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.TakeSnapshot() -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.this[TKey key].get -> TValue
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.this[TKey key].set -> void
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.TryGetValue(TKey key, out TValue value) -> bool
LinqToDB.Common.Internal.SnapshotDictionary<TKey, TValue>.Values.get -> System.Collections.Generic.ICollection<TValue>!
LinqToDB.Data.DataConnection.WriteTraceLineConnection.get -> System.Action<string!, string!, System.Diagnostics.TraceLevel>!
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.DataType dataType, int size) -> void
LinqToDB.Data.QueryTraceOptions.Deconstruct(out System.Diagnostics.TraceLevel? TraceLevel, out System.Action<LinqToDB.Data.TraceInfo!>? OnTrace, out System.Action<string!, string!, System.Diagnostics.TraceLevel>? WriteTrace) -> void
LinqToDB.Data.QueryTraceOptions.QueryTraceOptions(System.Diagnostics.TraceLevel? TraceLevel = null, System.Action<LinqToDB.Data.TraceInfo!>? OnTrace = null, System.Action<string!, string!, System.Diagnostics.TraceLevel>? WriteTrace = null) -> void
LinqToDB.Data.QueryTraceOptions.WriteTrace.get -> System.Action<string!, string!, System.Diagnostics.TraceLevel>?
LinqToDB.DataProvider.Access.AccessDataProvider
LinqToDB.DataProvider.Access.AccessDataProvider.AccessDataProvider(string! name, LinqToDB.DataProvider.Access.AccessVersion version, LinqToDB.DataProvider.Access.AccessProvider provider) -> void
LinqToDB.DataProvider.Access.AccessProviderAdapter
LinqToDB.DataProvider.Access.AccessProviderAdapter.CommandType.get -> System.Type!
LinqToDB.DataProvider.Access.AccessProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.DataProvider.Access.AccessProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.Access.AccessProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.DataProvider.Access.AccessProviderAdapter.GetOdbcDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.DataProvider.Access.AccessProviderAdapter.GetOleDbDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.DataProvider.OleDbProviderAdapter.OleDbType>?
LinqToDB.DataProvider.Access.AccessProviderAdapter.GetOleDbSchemaTable.get -> System.Func<System.Data.Common.DbConnection!, System.Guid, object![]?, System.Data.DataTable!>?
LinqToDB.DataProvider.Access.AccessProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.DataProvider.Access.AccessProviderAdapter.SetOdbcDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.DataProvider.Access.AccessProviderAdapter.SetOleDbDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.DataProvider.OleDbProviderAdapter.OleDbType>?
LinqToDB.DataProvider.Access.AccessProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.Ace = 2 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.AutoDetect = 0 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.Jet = 1 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.Translation.AccessJetMemberTranslator
LinqToDB.DataProvider.Access.Translation.AccessJetMemberTranslator.AccessJetMemberTranslator() -> void
LinqToDB.DataProvider.DataProviderFactoryBase
LinqToDB.DataProvider.DataProviderFactoryBase.DataProviderFactoryBase() -> void
LinqToDB.DataProvider.DataProviderFactoryBase.GetAssemblyName(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> string?
LinqToDB.DataProvider.DataProviderFactoryBase.GetAttribute(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes, string! attributeName) -> string?
LinqToDB.DataProvider.DataProviderFactoryBase.GetVersion(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> string?
LinqToDB.DataProvider.IdentifiersHelper
LinqToDB.DataProvider.SapHana.SapHanaDataProvider.SapHanaDataProvider(string! name, LinqToDB.DataProvider.SapHana.SapHanaProvider provider) -> void
LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.CreateBulkCopyColumnMapping.get -> System.Func<int, string!, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping!>?
LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType>?
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator
LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.SqlCeMathMemberTranslator() -> void
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator
LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.SqlServerMathMemberTranslator() -> void
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator
LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.SybaseMathMemberTranslator() -> void
LinqToDB.Expressions.DefaultValueExpression.DefaultValueExpression(LinqToDB.Mapping.MappingSchema? mappingSchema, System.Type! type, bool isNull = false) -> void
LinqToDB.Expressions.DefaultValueExpression.IsNull.get -> bool
LinqToDB.Expressions.DefaultValueExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Expressions.Internal.ExpressionEvaluator
LinqToDB.Expressions.MarkerExpression
LinqToDB.Expressions.MarkerExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Expressions.MarkerExpression.MarkerExpression(System.Linq.Expressions.Expression! innerExpression, LinqToDB.Expressions.MarkerType markerType) -> void
LinqToDB.Expressions.MarkerExpression.MarkerType.get -> LinqToDB.Expressions.MarkerType
LinqToDB.Expressions.MarkerExpression.Update(System.Linq.Expressions.Expression! closureExpression) -> LinqToDB.Expressions.MarkerExpression!
LinqToDB.Expressions.MarkerType
LinqToDB.Expressions.MarkerType.PreferClientSide = 0 -> LinqToDB.Expressions.MarkerType
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType, bool isCritical) -> void
LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceAssignments(System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>! assignment) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceParameters(System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>! parameters) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
LinqToDB.Expressions.SqlPlaceholderExpression.History.get -> System.Collections.Generic.List<LinqToDB.Expressions.SqlPlaceholderExpression!>?
LinqToDB.Expressions.SqlPlaceholderExpression.Id.get -> int
LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query! query, LinqToDB.IDataContext! parametersContext, int queryNumber, LinqToDB.Linq.IQueryExpressions! expressions, object?[]? parameters, object?[]? preambles) -> LinqToDB.Linq.IQueryRunner!
LinqToDB.Infrastructure.IUniqueIdGenerator
LinqToDB.Infrastructure.IUniqueIdGenerator.GetNext() -> int
LinqToDB.Infrastructure.IUniqueIdGenerator<T>
LinqToDB.Infrastructure.UniqueIdGenerator<T>
LinqToDB.Infrastructure.UniqueIdGenerator<T>.GetNext() -> int
LinqToDB.Infrastructure.UniqueIdGenerator<T>.UniqueIdGenerator() -> void
LinqToDB.Interceptors.ExceptionEventData
LinqToDB.Interceptors.ExceptionEventData.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.ExceptionEventData.ExceptionEventData() -> void
LinqToDB.Interceptors.ExceptionInterceptor
LinqToDB.Interceptors.ExceptionInterceptor.ExceptionInterceptor() -> void
LinqToDB.Interceptors.IExceptionInterceptor
LinqToDB.Interceptors.IExceptionInterceptor.ProcessException(LinqToDB.Interceptors.ExceptionEventData eventData, System.Exception! exception) -> void
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.AssociationExpression = 2 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.ExposedQuery = 1 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.QueryFilter = 3 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForceDefaultIfEmpty = 2 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForceOuter = 16 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForceParameter = 1 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForExpanding = 64 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForExtension = 32 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForKeys = 8 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.FormatAsExpression = 256 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForMemberRoot = 128 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ForSetProjection = 4 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.None = 0 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildFlags.ResetPrevious = 512 -> LinqToDB.Linq.Builder.BuildFlags
LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.AggregationRoot = LinqToDB.Linq.Builder.BuildPurpose.Sql | LinqToDB.Linq.Builder.BuildPurpose.AssociationRoot -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.AssociationRoot = LinqToDB.Linq.Builder.BuildPurpose.Table | LinqToDB.Linq.Builder.BuildPurpose.Expand -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Expand = 4 -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Expression = LinqToDB.Linq.Builder.BuildPurpose.Sql | LinqToDB.Linq.Builder.BuildPurpose.Table -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Extract = LinqToDB.Linq.Builder.BuildPurpose.Sql | LinqToDB.Linq.Builder.BuildPurpose.SubQuery -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.None = 0 -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Root = LinqToDB.Linq.Builder.BuildPurpose.Sql | LinqToDB.Linq.Builder.BuildPurpose.Expand -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Sql = 1 -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.SubQuery = 8 -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Table = 2 -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.BuildPurpose.Traverse = LinqToDB.Linq.Builder.BuildPurpose.Table | LinqToDB.Linq.Builder.BuildPurpose.SubQuery -> LinqToDB.Linq.Builder.BuildPurpose
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeEvaluatedOnClient(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsImmutable(System.Linq.Expressions.Expression! expr, LinqToDB.Mapping.MappingSchema! mappingSchem) -> bool
LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Linq.Builder.ExpressionTreeOptimizerVisitor
LinqToDB.Linq.Builder.ExpressionTreeOptimizerVisitor.ExpressionTreeOptimizerVisitor() -> void
LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase
LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.CanBeEvaluated -> bool
LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.CanBeEvaluatedOnClientCheckVisitorBase() -> void
LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.InMethod -> bool
LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.OptimizationContext -> LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext!
LinqToDB.Linq.IExpressionQuery.GetSqlQueries(LinqToDB.Linq.SqlGenerationOptions? options) -> System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.QuerySql!>!
LinqToDB.Linq.Internal.RuntimeExpressionsContainer
LinqToDB.Linq.Internal.RuntimeExpressionsContainer.AddExpression(int expressionId, System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Linq.Internal.RuntimeExpressionsContainer.GetQueryExpression(int expressionId) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Internal.RuntimeExpressionsContainer.MainExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Internal.RuntimeExpressionsContainer.RuntimeExpressionsContainer(System.Linq.Expressions.Expression! mainExpression) -> void
LinqToDB.Linq.IQueryExpressions
LinqToDB.Linq.IQueryExpressions.GetQueryExpression(int expressionId) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.IQueryExpressions.MainExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Linq.IQueryRunner.Expressions.get -> LinqToDB.Linq.IQueryExpressions!
LinqToDB.Linq.IQueryRunner.GetSqlText() -> System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.QuerySql!>!
LinqToDB.Linq.Query.ErrorExpression.get -> LinqToDB.Expressions.SqlErrorExpression?
LinqToDB.Linq.Query.IsFinalized.get -> bool
LinqToDB.Linq.QueryDebugView
LinqToDB.Linq.QueryDebugView.QueryDebugView(System.Func<string!>! toExpressionString, System.Func<string!>! toQueryString, System.Func<string!>! toQueryStringNoParams) -> void
LinqToDB.Linq.QueryExpressionsExtensions
LinqToDB.Linq.QuerySql
LinqToDB.Linq.QuerySql.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Data.DataParameter!>!
LinqToDB.Linq.QuerySql.QuerySql(string! sql, System.Collections.Generic.IReadOnlyList<LinqToDB.Data.DataParameter!>! parameters) -> void
LinqToDB.Linq.QuerySql.Sql.get -> string!
LinqToDB.Linq.SqlGenerationOptions
LinqToDB.Linq.SqlGenerationOptions.InlineParameters.get -> bool?
LinqToDB.Linq.SqlGenerationOptions.InlineParameters.set -> void
LinqToDB.Linq.SqlGenerationOptions.MultiInsertMode.get -> LinqToDB.SqlQuery.MultiInsertType?
LinqToDB.Linq.SqlGenerationOptions.MultiInsertMode.set -> void
LinqToDB.Linq.SqlGenerationOptions.SqlGenerationOptions() -> void
LinqToDB.Linq.Translation.ITranslationContext.CanBeEvaluatedOnClient(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Linq.Translation.ITranslationContext.CreateErrorExpression(System.Linq.Expressions.Expression! basedOn, string? message = null, System.Type? type = null) -> LinqToDB.Expressions.SqlErrorExpression!
LinqToDB.Linq.Translation.ITranslationContext.MarkAsNonParameter(System.Linq.Expressions.Expression! expression, object? currentValue) -> void
LinqToDB.Linq.Translation.ITranslationContext.UsingColumnDescriptor(LinqToDB.Mapping.ColumnDescriptor? columnDescriptor) -> System.IDisposable!
LinqToDB.Linq.Translation.StringMemberTranslatorBase
LinqToDB.Linq.Translation.StringMemberTranslatorBase.StringMemberTranslatorBase() -> void
LinqToDB.LinqOptions.CompareNulls.get -> LinqToDB.Common.CompareNulls
LinqToDB.LinqOptions.CompareNulls.init -> void
LinqToDB.LinqOptions.Deconstruct(out bool PreloadGroups, out bool IgnoreEmptyUpdate, out bool GenerateExpressionTest, out bool TraceMapperExpression, out bool DoNotClearOrderBys, out bool OptimizeJoins, out LinqToDB.Common.CompareNulls CompareNulls, out bool GuardGrouping, out bool DisableQueryCache, out System.TimeSpan? CacheSlidingExpiration, out bool PreferApply, out bool KeepDistinctOrdered, out bool ParameterizeTakeSkip, out bool EnableContextSchemaEdit, out bool PreferExistsForScalar) -> void
LinqToDB.LinqOptions.LinqOptions(bool PreloadGroups = false, bool IgnoreEmptyUpdate = false, bool GenerateExpressionTest = false, bool TraceMapperExpression = false, bool DoNotClearOrderBys = false, bool OptimizeJoins = true, LinqToDB.Common.CompareNulls CompareNulls = LinqToDB.Common.CompareNulls.LikeClr, bool GuardGrouping = true, bool DisableQueryCache = false, System.TimeSpan? CacheSlidingExpiration = null, bool PreferApply = true, bool KeepDistinctOrdered = true, bool ParameterizeTakeSkip = true, bool EnableContextSchemaEdit = false, bool PreferExistsForScalar = false) -> void
LinqToDB.Mapping.AssociationDescriptor.AssociationDescriptor(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! type, System.Reflection.MemberInfo! memberInfo, string![]! thisKey, string![]! otherKey, string? expressionPredicate, System.Linq.Expressions.Expression? predicate, string? expressionQueryMethod, System.Linq.Expressions.Expression? expressionQuery, string? storage, string? associationSetterExpressionMethod, System.Linq.Expressions.Expression? associationSetterExpression, bool? canBeNull, string? aliasName) -> void
LinqToDB.Mapping.AssociationDescriptor.GetElementType() -> System.Type!
LinqToDB.Mapping.AssociationDescriptor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.ServerSideOnlyException
LinqToDB.ServerSideOnlyException.ServerSideOnlyException() -> void
LinqToDB.ServerSideOnlyException.ServerSideOnlyException(string! apiName) -> void
LinqToDB.Sql.SqlExtensionParam.ParamNumber.get -> int
LinqToDB.SqlProvider.BasicSqlOptimizer.ClearColumParametersVisitor
LinqToDB.SqlProvider.BasicSqlOptimizer.ClearColumParametersVisitor.ClearColumParametersVisitor() -> void
LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> bool
LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> bool
LinqToDB.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor! optimizerVisitor, LinqToDB.SqlProvider.SqlExpressionConvertVisitor! convertVisitor, bool isParameterOrderDepended, bool isAlreadyOptimizedAndConverted, System.Func<LinqToDB.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
LinqToDB.SqlProvider.OptimizationContext.OptimizeAndConvertAllForRemoting<T>(T! element, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext) -> T!
LinqToDB.SqlProvider.OptimizationContext.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesceToBinaryFunc(LinqToDB.SqlQuery.SqlCoalesceExpression! coalesce, string! funcName, bool supportsParameters = true) -> LinqToDB.SqlQuery.ISqlExpression!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertIsDistinctPredicate(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertToBooleanSearchCondition(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.SqlSearchCondition!
LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags!
LinqToDB.SqlProvider.SqlProviderFlags.DoesProviderTreatsEmptyStringAsNull.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.DoesProviderTreatsEmptyStringAsNull.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsDerivedTableTakeSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsDerivedTableTakeSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctFromSupported.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctFromSupported.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.IsSupportedSimpleCorrelatedSubqueries.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.IsSupportedSimpleCorrelatedSubqueries.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.OutputMergeUseSpecialTables.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.OutputMergeUseSpecialTables.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.SupportedCorrelatedSubqueriesLevel.get -> int?
LinqToDB.SqlProvider.SqlProviderFlags.SupportedCorrelatedSubqueriesLevel.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanType.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanType.set -> void
LinqToDB.SqlProvider.SqlProviderFlags.SupportsPredicatesComparison.get -> bool
LinqToDB.SqlProvider.SqlProviderFlags.SupportsPredicatesComparison.set -> void
LinqToDB.SqlQuery.EvaluationContext.Register(LinqToDB.SqlQuery.IQueryElement! expr, bool forServer, object? value) -> void
LinqToDB.SqlQuery.EvaluationContext.RegisterError(LinqToDB.SqlQuery.IQueryElement! expr, bool forServer) -> void
LinqToDB.SqlQuery.IQueryElement.DebugText.get -> string!
LinqToDB.SqlQuery.ISqlPredicate.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.NullabilityContext.WithTransformationInfo(LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> LinqToDB.SqlQuery.NullabilityContext!
LinqToDB.SqlQuery.QueryElement.UniqueId.get -> long
LinqToDB.SqlQuery.QueryElementTextWriter.DebugString.get -> string!
LinqToDB.SqlQuery.QueryElementType.ExistsPredicate = 26 -> LinqToDB.SqlQuery.QueryElementType
LinqToDB.SqlQuery.QueryElementVisitor.CopyFields(System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlField!>! fields) -> System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlField!>!
LinqToDB.SqlQuery.SqlAliasPlaceholder.DebugText.get -> string!
LinqToDB.SqlQuery.SqlColumn.Number.get -> int
LinqToDB.SqlQuery.SqlComment.DebugText.get -> string!
LinqToDB.SqlQuery.SqlConditionalInsertClause.DebugText.get -> string!
LinqToDB.SqlQuery.SqlDataType.DebugText.get -> string!
LinqToDB.SqlQuery.SqlFunction.SqlFunction(LinqToDB.Common.DbDataType dbDataType, string! name, LinqToDB.SqlQuery.ParametersNullabilityType parametersNullability, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlFunction.SqlFunction(System.Type! systemType, string! name, LinqToDB.SqlQuery.ParametersNullabilityType nullabilityType, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.SqlQuery.SqlGroupingSet.DebugText.get -> string!
LinqToDB.SqlQuery.SqlInsertClause.DebugText.get -> string!
LinqToDB.SqlQuery.SqlMergeOperationClause.DebugText.get -> string!
LinqToDB.SqlQuery.SqlObjectExpression.DebugText.get -> string!
LinqToDB.SqlQuery.SqlOutputClause.DebugText.get -> string!
LinqToDB.SqlQuery.SqlOutputClause.Modify(LinqToDB.SqlQuery.SqlTable? outputTable) -> void
LinqToDB.SqlQuery.SqlParameterValue.ClientValue.get -> object?
LinqToDB.SqlQuery.SqlParameterValue.SqlParameterValue(object? providerValue, object? clientValue, LinqToDB.Common.DbDataType dbDataType) -> void
LinqToDB.SqlQuery.SqlParameterValues.AddValue(LinqToDB.SqlQuery.SqlParameter! parameter, object? providerValue, object? clientValue, LinqToDB.Common.DbDataType dbDataType) -> void
LinqToDB.SqlQuery.SqlParameterValues.SetValue(LinqToDB.SqlQuery.SqlParameter! parameter, object? providerValue, object? clientValue) -> void
LinqToDB.SqlQuery.SqlPredicate.Exists
LinqToDB.SqlQuery.SqlPredicate.Exists.Deconstruct(out bool isNot, out LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.SqlQuery.SqlPredicate.Exists.Exists(bool isNot, LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.SqlQuery.SqlPredicate.Exists.IsNot.get -> bool
LinqToDB.SqlQuery.SqlPredicate.Exists.Modify(LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.SqlQuery.SqlPredicate.Exists.SubQuery.get -> LinqToDB.SqlQuery.SelectQuery!
LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.EvaluationContext! context, bool insideNot, LinqToDB.LinqOptions! options) -> LinqToDB.SqlQuery.ISqlPredicate!
LinqToDB.SqlQuery.SqlQueryExtension.DebugText.get -> string!
LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.NeedsNestingUpdate.get -> bool
LinqToDB.SqlQuery.SqlSearchCondition.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.SqlQuery.SqlSetExpression.DebugText.get -> string!
LinqToDB.SqlQuery.SqlSetOperator.DebugText.get -> string!
LinqToDB.SqlQuery.SqlTableSource.DebugText.get -> string!
LinqToDB.SqlQuery.SqlUpdateClause.DebugText.get -> string!
LinqToDB.SqlQuery.SqlValuesTable.DebugText.get -> string!
LinqToDB.SqlQuery.SqlValuesTable.Modify(LinqToDB.SqlQuery.ISqlExpression? source) -> void
LinqToDB.SqlQuery.SqlWithClause.DebugText.get -> string!
LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidQuery(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, int? columnSubqueryLevel, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.GetTransformationInfo() -> LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetOriginal(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetOriginal(LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
LinqToDB.Tools.ActivityBase.ActivityBase(LinqToDB.Tools.ActivityID activityID) -> void
LinqToDB.Tools.ActivityBase.ActivityID.get -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.Build = 10 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.BuildSequence = 11 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.BuildSequenceBuild = 13 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.BuildSequenceCanBuild = 12 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.ExceptionInterceptorProcessException = 94 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetQueryCreate = 9 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetQueryFind = 6 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetQueryFindExpose = 7 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetQueryFindFind = 8 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetQueryTotal = 5 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.GetSqlText = 95 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.Materialization = 96 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.None = 0 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.OnTraceInternal = 97 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.QueryProviderExecute = 2 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.QueryProviderExecuteT = 1 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.QueryProviderGetEnumerator = 4 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityID.QueryProviderGetEnumeratorT = 3 -> LinqToDB.Tools.ActivityID
LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.CommandText = 5 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.ConfigurationString = 1 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.DatabaseName = 4 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.DataProviderName = 2 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.DataSourceName = 3 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.ActivityTagID.None = 0 -> LinqToDB.Tools.ActivityTagID
LinqToDB.Tools.IActivity.AddQueryInfo(LinqToDB.Data.DataConnection? context, System.Data.Common.DbConnection? connection, System.Data.Common.DbCommand? command) -> LinqToDB.Tools.IActivity!
LinqToDB.Tools.IActivity.AddTag(LinqToDB.Tools.ActivityTagID key, object? value) -> LinqToDB.Tools.IActivity!
override LinqToDB.DataProvider.Access.AccessDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.DataProvider.Access.AccessDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.DataProvider.Access.AccessDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.DataProvider.Access.AccessDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.AccessDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlBuilder!
override LinqToDB.DataProvider.Access.AccessDataProvider.GetQueryParameterNormalizer() -> LinqToDB.DataProvider.IQueryParametersNormalizer!
override LinqToDB.DataProvider.Access.AccessDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.DataProvider.Access.AccessDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlOptimizer!
override LinqToDB.DataProvider.Access.AccessDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.Common.DbDataType dataType, object? value) -> void
override LinqToDB.DataProvider.Access.AccessDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.Common.DbDataType dataType) -> void
override LinqToDB.DataProvider.Access.AccessDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Access.Translation.AccessJetMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Access.Translation.AccessMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.DB2.DB2SqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.ConvertCastToPredicate(LinqToDB.SqlQuery.SqlCastExpression! castExpression) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Firebird.FirebirdDataProvider.CreateIdentifierService() -> LinqToDB.DataProvider.IIdentifierService!
override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertCaseItem(LinqToDB.SqlQuery.SqlCaseExpression.CaseItem! newElement) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertIsDistinctPredicateAsIntersect(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlCondition(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.VisitSqlSetExpression(LinqToDB.SqlQuery.SqlSetExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.VisitExprExprPredicate(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SapHana.SapHanaDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> IExecutionScope?
override LinqToDB.DataProvider.SapHana.SapHanaDataProvider.GetQueryParameterNormalizer() -> LinqToDB.DataProvider.IQueryParametersNormalizer!
override LinqToDB.DataProvider.SapHana.SapHanaDataProvider.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
override LinqToDB.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.BuildUpdateQuery(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.VisitExistsPredicate(LinqToDB.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
override LinqToDB.Expressions.MarkerExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.MarkerExpression.CanReduce.get -> bool
override LinqToDB.Expressions.MarkerExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Expressions.MarkerExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Expressions.MarkerExpression.ToString() -> string!
override LinqToDB.Expressions.MarkerExpression.Type.get -> System.Type!
override LinqToDB.Linq.Builder.ExpressionTreeOptimizerVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.ExpressionTreeOptimizerVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.Cleanup() -> void
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.Visit(System.Linq.Expressions.Expression? node) -> System.Linq.Expressions.Expression?
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitExtension(System.Linq.Expressions.Expression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitLambda<T>(System.Linq.Expressions.Expression<T>! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlGenericConstructorExpression(LinqToDB.Expressions.SqlGenericConstructorExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlPlaceholderExpression(LinqToDB.Expressions.SqlPlaceholderExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlQueryRootExpression(LinqToDB.Expressions.SqlQueryRootExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitCaseItem(LinqToDB.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitIsDistinctPredicate(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCoalesceExpression(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitExistsPredicate(LinqToDB.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCoalesceExpression(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.QueryElement.ToString() -> string!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitExistsPredicate(LinqToDB.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitSqlNullabilityExpression(LinqToDB.SqlQuery.SqlNullabilityExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlDataType.ToString() -> string!
override LinqToDB.SqlQuery.SqlGroupingSet.ToString() -> string!
override LinqToDB.SqlQuery.SqlInsertClause.ToString() -> string!
override LinqToDB.SqlQuery.SqlObjectExpression.ToString() -> string!
override LinqToDB.SqlQuery.SqlOutputClause.ToString() -> string!
override LinqToDB.SqlQuery.SqlParameter.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlParameter.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlParameter.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlParameter.Precedence.get -> int
override LinqToDB.SqlQuery.SqlParameter.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlParameter.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlPredicate.Between.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Exists.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Exists.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Exists.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlPredicate.Exists.Equals(LinqToDB.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Exists.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
override LinqToDB.SqlQuery.SqlPredicate.Expr.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.InList.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.IsNull.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.IsTrue.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Like.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.Not.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.SearchString.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.CanBeUnknown(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitCteClause(LinqToDB.SqlQuery.CteClause! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryColumnUsageCollector.VisitSqlFieldReference(LinqToDB.SqlQuery.SqlField! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitExistsPredicate(LinqToDB.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.SqlRowExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlRowExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlRowExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlRowExpression.Precedence.get -> int
override LinqToDB.SqlQuery.SqlRowExpression.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlRowExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlSelectClause.ToString() -> string!
override LinqToDB.SqlQuery.SqlSetExpression.ToString() -> string!
override LinqToDB.SqlQuery.SqlSetOperator.ToString() -> string!
override LinqToDB.SqlQuery.SqlStatement.ToString() -> string!
override LinqToDB.SqlQuery.SqlTableSource.ToString() -> string!
override LinqToDB.SqlQuery.SqlUpdateClause.ToString() -> string!
override LinqToDB.SqlQuery.SqlValue.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlValue.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlValue.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlValue.Precedence.get -> int
override LinqToDB.SqlQuery.SqlValue.SystemType.get -> System.Type?
override LinqToDB.SqlQuery.SqlValue.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlConditionExpression(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.IQueryElement!
override LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlFunction(LinqToDB.SqlQuery.SqlFunction! element) -> LinqToDB.SqlQuery.IQueryElement!
readonly LinqToDB.Linq.QueryInfo.UniqueId -> long
static LinqToDB.AsyncExtensions.ToLookupAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TElement>!>!
static LinqToDB.AsyncExtensions.ToLookupAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TElement>!>!
static LinqToDB.AsyncExtensions.ToLookupAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TSource>!>!
static LinqToDB.AsyncExtensions.ToLookupAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TSource>!>!
static LinqToDB.Common.Configuration.Linq.CompareNulls.get -> LinqToDB.Common.CompareNulls
static LinqToDB.Common.Configuration.Linq.CompareNulls.set -> void
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance(System.Type! type) -> object!
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance(System.Type! type, bool nonPublic) -> object!
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance(System.Type! type, params object?[]? args) -> object!
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance<T>() -> T
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance<T>(System.Type! type) -> T!
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance<T>(System.Type! type, bool nonPublic) -> T!
static LinqToDB.Common.Internal.ActivatorExt.CreateInstance<T>(System.Type! type, params object?[]? args) -> T!
static LinqToDB.Common.Internal.ActivatorExt.DynamicInvokeExt(this System.Delegate! method, params object?[]? args) -> object?
static LinqToDB.Common.Internal.ActivatorExt.DynamicInvokeExt<T>(this System.Delegate! method, params object?[]? args) -> T
static LinqToDB.Common.Internal.ActivatorExt.InvokeExt(this System.Reflection.ConstructorInfo! ctor, object?[]? parameters) -> object!
static LinqToDB.Common.Internal.ActivatorExt.InvokeExt(this System.Reflection.MethodBase! method, object? obj, object?[]? parameters) -> object?
static LinqToDB.Common.Internal.ActivatorExt.InvokeExt<T>(this System.Reflection.ConstructorInfo! ctor, object?[]? parameters) -> T!
static LinqToDB.Common.Internal.ActivatorExt.InvokeExt<T>(this System.Reflection.MethodBase! method, object? obj, object?[]? parameters) -> T
static LinqToDB.Data.DataConnection.WriteTraceLine -> System.Action<string!, string!, System.Diagnostics.TraceLevel>!
static LinqToDB.DataOptionsExtensions.UseCommandTimeout(this LinqToDB.DataOptions! options, int? commandTimeout) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCompareNulls(this LinqToDB.DataOptions! options, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTraceWith(this LinqToDB.DataOptions! options, System.Action<string!, string!, System.Diagnostics.TraceLevel>! write) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.WithCommandTimeout(this LinqToDB.DataContextOptions! options, int? commandTimeout) -> LinqToDB.DataContextOptions!
static LinqToDB.DataOptionsExtensions.WithCompareNulls(this LinqToDB.LinqOptions! options, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.LinqOptions!
static LinqToDB.DataProvider.Access.AccessTools.CreateDatabase(string! databaseName, bool deleteIfExists = false, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.Ace) -> void
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.DropDatabase(string! databaseName, string? extension = null) -> void
static LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.IdentifiersHelper.TruncateIdentifier(LinqToDB.DataProvider.IIdentifierService! identifierService, LinqToDB.DataProvider.IdentifierKind identifierKind, string! identifier) -> string!
static LinqToDB.DataProvider.SqlProviderHelper.IsValidQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, int? columnSubqueryLevel, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
static LinqToDB.Expressions.Internal.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr) -> object?
static LinqToDB.Expressions.Internal.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr) -> T?
static LinqToDB.Expressions.MarkerExpression.PreferClientSide(System.Linq.Expressions.Expression! innerExpression) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.SqlErrorExpression.EnsureError(System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.SqlErrorExpression!
static LinqToDB.Linq.Query<T>.GetQuery(LinqToDB.IDataContext! dataContext, ref LinqToDB.Linq.IQueryExpressions! expressions, out bool dependsOnParameters) -> LinqToDB.Linq.Query<T>!
static LinqToDB.Linq.QueryExpressionsExtensions.WithMainExpressions(this LinqToDB.Linq.IQueryExpressions! expressions, System.Linq.Expressions.Expression! mainExpression) -> LinqToDB.Linq.IQueryExpressions!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.EnsureType(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.Common.DbDataType dbDataType) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Equal(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Fragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, int precedence, string! fragmentText, bool? canBeNull, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Function(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! functionName, LinqToDB.SqlQuery.ParametersNullabilityType parametersNullability, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.Negate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dbDataType, LinqToDB.SqlQuery.ISqlExpression! v) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.NotEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlPredicate!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.NotNullFragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, int precedence, string! fragmentText, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.NotNullFragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Common.DbDataType dataType, string! fragmentText, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.SqlQuery.ISqlExpression!
static LinqToDB.Linq.Translation.TranslationContextExtensions.UsingTypeFromExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.SqlQuery.ISqlExpression? fromExpression) -> System.IDisposable?
static LinqToDB.Linq.Translation.TranslationContextExtensions.UsingTypeFromExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, params System.Linq.Expressions.Expression![]! fromExpressions) -> System.IDisposable?
static LinqToDB.LinqExtensions.SelectAsync<T>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<T>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this LinqToDB.Linq.IUpdatable<T>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this LinqToDB.Linq.IValueInsertable<T>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this System.Linq.IQueryable<T>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource, TTarget>(this LinqToDB.Linq.IMergeable<TSource, TTarget>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>! query, LinqToDB.Linq.SqlGenerationOptions? options = null) -> LinqToDB.Linq.QuerySql!
static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, bool forceInlineParameters, out System.Linq.Expressions.Expression? error) -> LinqToDB.SqlQuery.ISqlExpression?[]!
static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, bool ignoreGenericParameters, bool forceInlineParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
static LinqToDB.Sql.Power(decimal? x, decimal? y) -> decimal?
static LinqToDB.SqlQuery.PredicateExtensions.AddEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddGreater(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddGreaterOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddLess(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddLessOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.PredicateExtensions.AddNotEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.Common.CompareNulls compareNulls) -> LinqToDB.SqlQuery.SqlSearchCondition!
static LinqToDB.SqlQuery.QueryHelper.CanBeNullableOrUnknown(this LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext) -> bool
static LinqToDB.SqlQuery.QueryHelper.CollectParameters(LinqToDB.SqlQuery.IQueryElement! root, System.Collections.Generic.ICollection<LinqToDB.SqlQuery.SqlParameter!>! parameters) -> void
static LinqToDB.SqlQuery.QueryHelper.CollectParametersAndValues(LinqToDB.SqlQuery.IQueryElement! root, System.Collections.Generic.ICollection<LinqToDB.SqlQuery.SqlParameter!>! parameters, System.Collections.Generic.ICollection<LinqToDB.SqlQuery.SqlValue!>! values) -> void
static LinqToDB.SqlQuery.QueryHelper.GetDbDataTypeWithoutSchema(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.Common.DbDataType
static LinqToDB.SqlQuery.QueryHelper.IsAggregationQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> bool
static LinqToDB.SqlQuery.QueryHelper.IsBoolean(LinqToDB.SqlQuery.ISqlExpression! expr, bool includeFields = false) -> bool
static LinqToDB.SqlQuery.QueryHelper.NeedsEqualityWithNull(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.SqlPredicate.Operator op, LinqToDB.SqlQuery.ISqlExpression! expr2, LinqToDB.SqlQuery.NullabilityContext! nullabilityContext) -> bool
static LinqToDB.SqlQuery.QueryHelper.TryEvaluateExpressionForServer(this LinqToDB.SqlQuery.IQueryElement! expr, LinqToDB.SqlQuery.EvaluationContext! context, out object? result) -> bool
static LinqToDB.SqlQuery.SqlPredicate.False.get -> LinqToDB.SqlQuery.SqlPredicate.FalsePredicate!
static LinqToDB.SqlQuery.SqlPredicate.True.get -> LinqToDB.SqlQuery.SqlPredicate.TruePredicate!
static readonly LinqToDB.Expressions.ExpressionInstances.EmptyString -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Reflection.Methods.LinqToDB.Select -> System.Reflection.MethodInfo!
virtual LinqToDB.DataProvider.BasicBulkCopy.MaxMultipleRows.get -> int?
virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitMarkerExpression(LinqToDB.Expressions.MarkerExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Interceptors.ExceptionInterceptor.ProcessException(LinqToDB.Interceptors.ExceptionEventData eventData, System.Exception! exception) -> void
virtual LinqToDB.Linq.QueryDebugView.Expression.get -> string!
virtual LinqToDB.Linq.QueryDebugView.Query.get -> string!
virtual LinqToDB.Linq.QueryDebugView.QueryNoParams.get -> string!
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslateAbsMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslatePow(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! xValue, LinqToDB.SqlQuery.ISqlExpression! yValue) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.MathMemberTranslatorBase.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression? precision) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.ProviderMemberTranslatorDefault.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Linq.Translation.StringMemberTranslatorBase.TranslateReplace(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.SqlQuery.ISqlExpression! value, LinqToDB.SqlQuery.ISqlExpression! oldValue, LinqToDB.SqlQuery.ISqlExpression! newValue) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.Linq.Translation.StringMemberTranslatorBase.TranslateStringFormat(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, string! format, System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>! arguments, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.SqlQuery.ISqlExpression?
virtual LinqToDB.SchemaProvider.SchemaProviderBase.InitProvider(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlValue(LinqToDB.SqlQuery.SqlValue! value) -> void
virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.Common.DbDataType? dataType, object? value) -> void
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectOutputTables(LinqToDB.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FixSetOperationValues(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
virtual LinqToDB.SqlProvider.BasicSqlOptimizer.RequiresCastingParametersForSetOperations.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCaseItem(LinqToDB.SqlQuery.SqlCaseExpression.CaseItem! newElement) -> LinqToDB.SqlQuery.SqlCaseExpression.CaseItem!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCastToPredicate(LinqToDB.SqlQuery.SqlCastExpression! castExpression) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertIsDistinctPredicateAsIntersect(LinqToDB.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlCaseExpression(LinqToDB.SqlQuery.SqlCaseExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlCondition(LinqToDB.SqlQuery.SqlConditionExpression! element) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr, bool includeFields, bool forceConvert = false, bool withNull = true) -> LinqToDB.SqlQuery.ISqlExpression!
virtual LinqToDB.SqlQuery.QueryElement.DebugText.get -> string!
virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitExistsPredicate(LinqToDB.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.SqlQuery.IQueryElement!
virtual LinqToDB.SqlQuery.SqlStatement.DebugText.get -> string!
virtual LinqToDB.Tools.ActivityBase.AddQueryInfo(LinqToDB.Data.DataConnection? context, System.Data.Common.DbConnection? connection, System.Data.Common.DbCommand? command) -> LinqToDB.Tools.IActivity!
virtual LinqToDB.Tools.ActivityBase.AddTag(LinqToDB.Tools.ActivityTagID key, object? value) -> LinqToDB.Tools.IActivity!
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*abstract LinqToDB.Remote.RemoteDataContextBase.Clone() -> LinqToDB.IDataContext!
*REMOVED*abstract LinqToDB.Sql.SqlRow<T1, T2>.CompareTo(object? obj) -> int
*REMOVED*abstract LinqToDB.SqlQuery.ConditionBase<T1, T2>.GetNext() -> T2
*REMOVED*abstract LinqToDB.SqlQuery.ConditionBase<T1, T2>.Search.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.CanBeNull.get -> bool
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*abstract LinqToDB.SqlQuery.SqlPredicate.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*abstract LinqToDB.SqlQuery.SqlStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.All = "ALL" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.AsOf = "AS OF" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.Between = "BETWEEN" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.ContainedIn = "CONTAINED IN (" -> string!
*REMOVED*const LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable.FromTo = "FROM" -> string!
*REMOVED*const LinqToDB.SqlQuery.PseudoFunctions.CONVERT = "$Convert$" -> string!
*REMOVED*LinqToDB.Async.IAsyncDbConnection.TryClone() -> System.Data.Common.DbConnection?
*REMOVED*LinqToDB.Common.Internal.IdentifierBuilder.AddRange(System.Collections.IEnumerable! items) -> LinqToDB.Common.Internal.IdentifierBuilder
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo? x, System.Reflection.MemberInfo? y) -> bool
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo! obj) -> int
*REMOVED*LinqToDB.Common.MemberInfoEqualityComparer.MemberInfoEqualityComparer() -> void
*REMOVED*LinqToDB.Data.DataConnection.Clone() -> object!
*REMOVED*LinqToDB.DataContextOptions.DataContextOptions(int? CommandTimeout = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors = null) -> void
*REMOVED*LinqToDB.DataContextOptions.Deconstruct(out int? CommandTimeout, out System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors) -> void
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTable
*REMOVED*LinqToDB.IDataContext.Clone(bool forNestedQuery) -> LinqToDB.IDataContext!
*REMOVED*LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query! query, int queryNumber, System.Linq.Expressions.Expression! expression, object?[]? parameters, object?[]? preambles) -> LinqToDB.Linq.IQueryRunner!
*REMOVED*LinqToDB.IDataContext.UnwrapDataObjectInterceptor.get -> LinqToDB.Interceptors.IUnwrapDataObjectInterceptor?
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeCompiled(System.Linq.Expressions.Expression! expr) -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ClearVisitedCache() -> void
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExpandExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExpandExpressionTransformer(System.Linq.Expressions.Expression! expr) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExposeExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsDependsOnParameters() -> bool
*REMOVED*LinqToDB.Linq.Builder.IToSqlConverter.ToSql(System.Linq.Expressions.Expression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.Expression -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.ExpressionsToReplace -> System.Collections.Generic.List<LinqToDB.Linq.Builder.SequenceConvertPath!>?
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.Parameter -> System.Linq.Expressions.ParameterExpression?
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertInfo.SequenceConvertInfo() -> void
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Expr -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Level -> int
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.Path -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.SequenceConvertPath.SequenceConvertPath() -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.AppendMember(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.Clone(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.CompareLastMember(LinqToDB.Linq.Builder.SqlInfo! info) -> bool
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.CompareMembers(LinqToDB.Linq.Builder.SqlInfo! info) -> bool
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi, LinqToDB.SqlQuery.ISqlExpression! sql, int index) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Reflection.MemberInfo! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.SqlInfo(System.Reflection.MemberInfo![]! mi, LinqToDB.SqlQuery.ISqlExpression! sql, LinqToDB.SqlQuery.SelectQuery? query = null, int index = -1) -> void
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithIndex(int index) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithMember(System.Reflection.MemberInfo! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithMembers(System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo!>! mi) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithQuery(LinqToDB.SqlQuery.SelectQuery? query) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Linq.Builder.SqlInfo.WithSql(LinqToDB.SqlQuery.ISqlExpression! sql) -> LinqToDB.Linq.Builder.SqlInfo!
*REMOVED*LinqToDB.Sql.ExpressionAttribute.GetCanBeNull(LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> bool
*REMOVED*LinqToDB.Sql.ExtensionAttribute.BuildFunctionsChain<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expr, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam!>!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpression(System.Linq.Expressions.Expression! expr, bool unwrap, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ExtensionBuilder(TContext context, string? configuration, object? builderValue, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! extension, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter, System.Reflection.MemberInfo! member, System.Linq.Expressions.Expression![]! arguments) -> void
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(int index, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(string! argName, bool unwrap) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.IGroupBy.Cube<T>(System.Linq.Expressions.Expression<System.Func<T>!>! cubeKey) -> T
*REMOVED*LinqToDB.Sql.IGroupBy.GroupingSets<T>(System.Linq.Expressions.Expression<System.Func<T>!>! setsExpression) -> T
*REMOVED*LinqToDB.Sql.IGroupBy.Rollup<T>(System.Linq.Expressions.Expression<System.Func<T>!>! rollupKey) -> T
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression(int precedence) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.GetExpression(int index, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.ISqExtensionBuilder.GetExpression(string! argName, bool unwrap = false) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.Sql.SqlExtension.IsAggregate.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.IsPure.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.IsWindowFunction.set -> void
*REMOVED*LinqToDB.Sql.SqlExtension.SqlExtension(string! expr, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
*REMOVED*LinqToDB.Sql.SqlExtension.SqlExtension(System.Type? systemType, string! expr, int precedence, int chainPrecedence, bool isAggregate, bool isWindowFunction, bool isPure, bool isPredicate, bool? canBeNull, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
*REMOVED*LinqToDB.Sql.SqlID.ToSql(System.Linq.Expressions.Expression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.AlternativeGetSelectedColumns(LinqToDB.SqlQuery.SelectQuery! selectQuery, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>! columns) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlDataType! dataType) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildJoinTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlJoinedTable! join, ref int joinCounter) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, int startIndent = 0) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.SqlQuery.SqlDataType? dataType, object? value) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.FromClause = 6 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.GroupByClause = 8 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.HavingClause = 9 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.InsertClause = 5 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.OffsetLimit = 11 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.OrderByClause = 10 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.Output = 13 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.QueryExtensions = 14 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.Tag = 12 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.Step.WhereClause = 7 -> LinqToDB.SqlProvider.BasicSqlBuilder.Step
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Add<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.AlternativeConvertToBoolean(LinqToDB.SqlQuery.SqlFunction! func, LinqToDB.DataOptions! dataOptions, int paramNumber) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.CheckAliases(LinqToDB.SqlQuery.SqlStatement! statement, int maxLen) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertBooleanExprToCase(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertCoalesceToBinaryFunc(LinqToDB.SqlQuery.SqlFunction! func, string! funcName, bool supportsParameters = true) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertFunctionParameters(LinqToDB.SqlQuery.SqlFunction! func, bool withParameters = false) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSearchStringPredicateViaLike(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.CorrectUpdateTable(LinqToDB.SqlQuery.SqlUpdateStatement! statement) -> LinqToDB.SqlQuery.SqlUpdateStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Dec(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Div<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.FindUpdateTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SqlTable! tableToFind) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.FloorBeforeConvert(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdate(LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlUpdateStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdatePostgreSqlite(LinqToDB.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.GetMainTableSource(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SqlTableSource?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Inc(LinqToDB.SqlQuery.ISqlExpression! expr1) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Mul<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeAggregates(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, bool withConversion) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeJoins(LinqToDB.SqlQuery.SqlStatement! statement) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeRowExprExpr(LinqToDB.SqlQuery.SqlPredicate.ExprExpr! predicate, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber(LinqToDB.SqlQuery.SqlStatement! statement, bool supportsEmptyOrderBy, bool onlySubqueries) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RowComparisonFallback(LinqToDB.SqlQuery.SqlPredicate.Operator op, LinqToDB.SqlQuery.SqlRow! row1, LinqToDB.SqlQuery.SqlRow! row2, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RowIsNullFallback(LinqToDB.SqlQuery.SqlRow! row, bool isNot) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.RunOptimizationContext() -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.RunOptimizationContext(LinqToDB.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.SqlProvider.BasicSqlOptimizer! optimizer, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, bool register, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! func) -> void
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.Sub<T>(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.ISqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlDataType! dataType) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.ISqlBuilder.BuildSql(int commandNumber, LinqToDB.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, int startIndent = 0) -> void
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.ConvertElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! context) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.ConvertSkipTake(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.Aliases.get -> LinqToDB.SqlQuery.AliasesContext!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.Context.get -> LinqToDB.SqlQuery.EvaluationContext!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.ConvertAll<T>(LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext context, T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, bool>! parentAction) -> T!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.IsOptimized(LinqToDB.SqlQuery.IQueryElement! element, out LinqToDB.SqlQuery.IQueryElement? newExpr) -> bool
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.SqlQuery.AliasesContext! aliases, bool isParameterOrderDependent, System.Func<LinqToDB.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.RegisterOptimized(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.IQueryElement! newExpr) -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctOrderBySupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsDistinctOrderBySupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsGroupByColumnRequred.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsGroupByColumnRequred.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsProjectionBoolSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsProjectionBoolSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsSybaseBuggyGroupBy.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsSybaseBuggyGroupBy.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSetTableAliasSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsUpdateSetTableAliasSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.CanConvert(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.DataOptions! options, object? value) -> bool
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.Convert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlDataType? dataType, LinqToDB.DataOptions! options, object? value) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.SetConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.SqlQuery.SqlDataType!, LinqToDB.DataOptions!, object!>? converter) -> void
*REMOVED*LinqToDB.SqlProvider.ValueToSqlConverter.TryConvert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlDataType? dataType, LinqToDB.DataOptions! options, object? value) -> bool
*REMOVED*LinqToDB.SqlQuery.ClauseBase.End() -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.ClauseBase.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.ClauseBase(LinqToDB.SqlQuery.SelectQuery? selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.End() -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.From.get -> LinqToDB.SqlQuery.SqlFromClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.GroupBy.get -> LinqToDB.SqlQuery.SqlGroupByClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.OrderBy.get -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.Select.get -> LinqToDB.SqlQuery.SqlSelectClause!
*REMOVED*LinqToDB.SqlQuery.ClauseBase<T1, T2>.SelectQuery.get -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>.Clone<T>(T![]? elements) -> T![]?
*REMOVED*LinqToDB.SqlQuery.CloneVisitor<TContext>.CloneVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.ConditionBase() -> void
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Exists(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Between(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.In(bool compareNullsAsValues, params object![]! exprs) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.InSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.IsNotNull.get -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.IsNull.get -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(LinqToDB.SqlQuery.ISqlExpression! expression) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.SqlValue? escape) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(string! expression) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Like(string! expression, LinqToDB.SqlQuery.SqlValue! escape) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotBetween(LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotIn(bool compareNullsAsValues, params object![]! exprs) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotInSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.All(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Any(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Field(LinqToDB.SqlQuery.SqlField! field) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Some(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_.Value(object! value) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Exists(LinqToDB.SqlQuery.SelectQuery! subQuery) -> T2
*REMOVED*LinqToDB.SqlQuery.ConditionBase<T1, T2>.SetOr(bool value) -> T1!
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.AddVisited(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.IQueryElement? newElement) -> void
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.AllowMutation -> bool
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.Context -> TContext
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.CurrentElement -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.HasStack -> bool
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.ParentElement.get -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.RemoveVisited(LinqToDB.SqlQuery.IQueryElement! element) -> void
*REMOVED*LinqToDB.SqlQuery.ConvertVisitor<TContext>.Stack.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.IQueryElement!>!
*REMOVED*LinqToDB.SqlQuery.CteClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.CteClause.Fields.get -> LinqToDB.SqlQuery.SqlField![]?
*REMOVED*LinqToDB.SqlQuery.CteClause.RegisterFieldMapping(int index, System.Func<LinqToDB.SqlQuery.SqlField!>! fieldFactory) -> LinqToDB.SqlQuery.SqlField!
*REMOVED*LinqToDB.SqlQuery.CteClause.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.CteClause.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.IInvertibleElement.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.IQueryElement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.ISqlExpression.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.ISqlExpressionWalkable
*REMOVED*LinqToDB.SqlQuery.ISqlExpressionWalkable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.ISqlPredicate.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.ISqlQueryExtensionBuilder.Build(LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension) -> void
*REMOVED*LinqToDB.SqlQuery.ISqlTableExtensionBuilder.Build(LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.SqlQuery.SqlQueryExtension! sqlQueryExtension, LinqToDB.SqlQuery.SqlTable! table, string! alias) -> void
*REMOVED*LinqToDB.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.JoinType.CrossApply = 3 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.Full = 6 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.OuterApply = 4 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.JoinType.Right = 5 -> LinqToDB.SqlQuery.JoinType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.BetweenPredicate = 16 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Column = 24 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Comment = 59 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.Condition = 26 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ConditionalInsertClause = 52 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.CreateTableStatement = 53 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.CteClause = 40 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.DeleteStatement = 49 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.DropTableStatement = 54 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ExprExprPredicate = 13 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.ExprPredicate = 11 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.FromClause = 33 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.FuncLikePredicate = 22 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.GroupByClause = 35 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.GroupingSet = 58 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InListPredicate = 21 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertClause = 30 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertOrUpdateStatement = 47 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InsertStatement = 46 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.InSubQueryPredicate = 20 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsDistinctPredicate = 18 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsNullPredicate = 17 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.IsTruePredicate = 19 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.JoinedTable = 28 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.LikePredicate = 14 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MergeOperationClause = 57 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MergeStatement = 50 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.MultiInsertStatement = 51 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.NotExprPredicate = 12 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OrderByClause = 36 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OrderByItem = 37 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.OutputClause = 44 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SearchCondition = 25 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SearchStringPredicate = 15 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SelectClause = 29 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SelectStatement = 45 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SetExpression = 32 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SetOperator = 38 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlAliasPlaceholder = 9 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlBinaryExpression = 5 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlCteTable = 41 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlDataType = 7 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlID = 60 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlObjectExpression = 4 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlQuery = 23 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlRawSqlTable = 42 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlRow = 10 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlTable = 8 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlTableLikeSource = 56 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlValue = 6 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.SqlValuesTable = 43 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.TableSource = 27 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.TruncateTableStatement = 55 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.UpdateClause = 31 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.UpdateStatement = 48 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.WhereClause = 34 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryElementType.WithClause = 39 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.Find(LinqToDB.SqlQuery.IQueryElement? element) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor(System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! find) -> void
*REMOVED*LinqToDB.SqlQuery.QueryFindVisitor<TContext>.QueryFindVisitor(TContext context, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! find) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor(bool all, System.Func<LinqToDB.SqlQuery.IQueryElement!, bool>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.QueryParentVisitor(TContext context, bool all, System.Func<TContext, LinqToDB.SqlQuery.IQueryElement!, bool>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryParentVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor() -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor(bool all, System.Action<LinqToDB.SqlQuery.IQueryElement!>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.QueryVisitor(TContext context, bool all, System.Action<TContext, LinqToDB.SqlQuery.IQueryElement!>! visit) -> void
*REMOVED*LinqToDB.SqlQuery.QueryVisitor<TContext>.Visit(LinqToDB.SqlQuery.IQueryElement? element) -> void
*REMOVED*LinqToDB.SqlQuery.SelectQuery.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SelectQuery.DebugSqlText.get -> string!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SelectQuery.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Having.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ParentSelect.get -> LinqToDB.SqlQuery.SelectQuery?
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ParentSelect.set -> void
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SelectQuery.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SelectQuery.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SelectQuery.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.SqlAliasPlaceholder() -> void
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlAliasPlaceholder.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2) -> void
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.SqlQuery.ISqlExpression! expr2, int precedence) -> void
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SqlText.get -> string!
*REMOVED*LinqToDB.SqlQuery.SqlBinaryExpression.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlColumn.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Equals(LinqToDB.SqlQuery.SqlColumn? other) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlColumn.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlColumn.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlComment.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlCondition
*REMOVED*LinqToDB.SqlQuery.SqlCondition.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Deconstruct(out bool isNot, out LinqToDB.SqlQuery.ISqlPredicate! predicate, out bool isOr) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Equals(LinqToDB.SqlQuery.SqlCondition! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsNot.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsNot.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsOr.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlCondition.IsOr.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Predicate.get -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlCondition.Predicate.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.SqlCondition(bool isNot, LinqToDB.SqlQuery.ISqlPredicate! predicate) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCondition.SqlCondition(bool isNot, LinqToDB.SqlQuery.ISqlPredicate! predicate, bool isOr) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.CteClause! cte, LinqToDB.Mapping.EntityDescriptor! entityDescriptor) -> void
*REMOVED*LinqToDB.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.SqlQuery.SqlCteTable! table, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlField!>! fields, LinqToDB.SqlQuery.CteClause! cte) -> void
*REMOVED*LinqToDB.SqlQuery.SqlExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlExpression.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlExpression.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlExpression.SqlExpression(System.Type? systemType, string! expr, int precedence, LinqToDB.SqlQuery.SqlFlags flags, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlExpression.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlField.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlField.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlField.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlField.SqlField(System.Type! systemType, string? name, bool canBeNull) -> void
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next.And.get -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*LinqToDB.SqlQuery.SqlFromClause.Join.Next.Or.get -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*LinqToDB.SqlQuery.SqlFunction.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlFunction.Equals(LinqToDB.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlFunction.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlFunction.SqlFunction(System.Type! systemType, string! name, bool isAggregate, bool isPure, int precedence, params LinqToDB.SqlQuery.ISqlExpression![]! parameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlFunction.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlGroupByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlGroupingSet.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlGroupingSet.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlInsertClause.DefaultItems.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlSetExpression!>!
*REMOVED*LinqToDB.SqlQuery.SqlInsertStatement.SqlInsertStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlJoinedTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlJoinedTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlObjectExpression.SqlObjectExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Linq.Builder.SqlInfo![]! infoParameters) -> void
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Expr(LinqToDB.SqlQuery.ISqlExpression! expr, bool isDescending) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ExprAsc(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.ExprDesc(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.Field(LinqToDB.SqlQuery.SqlField! field, bool isDescending) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.FieldAsc(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByClause.FieldDesc(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.SqlOrderByClause!
*REMOVED*LinqToDB.SqlQuery.SqlOrderByItem.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlOrderByItem.SqlOrderByItem(LinqToDB.SqlQuery.ISqlExpression! expression, bool isDescending) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.InSubQuery.InSubQuery(LinqToDB.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.SqlQuery.SelectQuery! subQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.Reduce() -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.NotExpr
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.NotExpr.NotExpr(LinqToDB.SqlQuery.ISqlExpression! exp1, bool isNot, int precedence) -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.BuilderType.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Configuration.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Scope.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlQueryExtension.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlRow
*REMOVED*LinqToDB.SqlQuery.SqlRow.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlRow.Equals(LinqToDB.SqlQuery.ISqlExpression! other) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRow.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlRow.SqlRow(LinqToDB.SqlQuery.ISqlExpression![]! values) -> void
*REMOVED*LinqToDB.SqlQuery.SqlRow.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlRow.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlRow.Values.get -> LinqToDB.SqlQuery.ISqlExpression![]!
*REMOVED*LinqToDB.SqlQuery.SqlRow.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Add(LinqToDB.SqlQuery.SqlCondition! condition) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.CanInvert() -> bool
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Conditions.get -> System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Deconstruct(out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>! conditions) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.And.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.Or.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Next.ToExpr() -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition() -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(LinqToDB.SqlQuery.SqlCondition! condition) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(LinqToDB.SqlQuery.SqlCondition! condition1, LinqToDB.SqlQuery.SqlCondition! condition2) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SqlSearchCondition(System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlCondition!>! list) -> void
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.SystemType.get -> System.Type!
*REMOVED*LinqToDB.SqlQuery.SqlSelectClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlSelectStatement.SqlSelectStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlTable.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlTable.Fields.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.SqlQuery.SqlField!>!
*REMOVED*LinqToDB.SqlQuery.SqlTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.SqlQuery.ISqlExpression!>!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.Source.get -> LinqToDB.SqlQuery.ISqlTableSource!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.SourceID.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.SqlTableLikeSource.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*LinqToDB.SqlQuery.SqlTableSource.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlTableSource.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlQuery.SqlUpdateStatement.AfterSetAliases() -> void
*REMOVED*LinqToDB.SqlQuery.SqlUpdateStatement.SqlUpdateStatement(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next.And.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SqlWhereClause.Next.Or.get -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*LinqToDB.SqlQuery.SqlWithClause.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*LinqToDB.SqlQuery.SqlWithClause.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlQuery.WalkOptions
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.BuildTypedExpression(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeValueParameterSupport.get -> bool
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.OptimizeExpression(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! convertVisitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.ConvertPredicateImpl(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle12SqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.SupportsNullInColumn.get -> bool
*REMOVED*override LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> IExecutionScope?
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*override LinqToDB.DataProvider.SQLite.SQLiteSqlBuilder.IsNestedJoinSupported.get -> bool
*REMOVED*override LinqToDB.Linq.Builder.SqlInfo.ToString() -> string!
*REMOVED*override LinqToDB.Sql.ExtensionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.Sql.FunctionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.Sql.PropertyAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.Sql.TableExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlColumn.GetHashCode() -> int
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlCreateTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlCteTable.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlDeleteStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlDropTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlField.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertOrUpdateStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlInsertStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMergeStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlMultiInsertStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.BaseNotExpr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Expr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.CanBeNull.get -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsNull.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsNull.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsTrue.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsTrue.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.NotExpr.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.NotExpr.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.Invert() -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlRawSqlTable.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlRawSqlTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.SqlQuery.SqlSearchCondition.GetNext() -> LinqToDB.SqlQuery.SqlSearchCondition.Next!
*REMOVED*override LinqToDB.SqlQuery.SqlSearchCondition.Search.get -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*override LinqToDB.SqlQuery.SqlSelectStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlSelectStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlStatementWithQueryBase.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlStatementWithQueryBase.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlTable.ToString() -> string!
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.SqlQuery.SqlTruncateTableStatement.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.GetTableSource(LinqToDB.SqlQuery.ISqlTableSource! table) -> LinqToDB.SqlQuery.ISqlTableSource?
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*override LinqToDB.SqlQuery.SqlUpdateStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*readonly LinqToDB.DataProvider.MultipleRowsHelper.ColumnTypes -> LinqToDB.SqlQuery.SqlDataType![]!
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Index -> int
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.MemberChain -> System.Reflection.MemberInfo![]!
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Query -> LinqToDB.SqlQuery.SelectQuery?
*REMOVED*readonly LinqToDB.Linq.Builder.SqlInfo.Sql -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.DataOptions -> LinqToDB.DataOptions!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Func -> System.Func<LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.MappingSchema -> LinqToDB.Mapping.MappingSchema!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.OptimizationContext -> LinqToDB.SqlProvider.OptimizationContext!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Optimizer -> LinqToDB.SqlProvider.BasicSqlOptimizer!
*REMOVED*readonly LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext.Register -> bool
*REMOVED*readonly LinqToDB.SqlQuery.QueryParentVisitor<TContext>.VisitedElements -> System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement?>!
*REMOVED*readonly LinqToDB.SqlQuery.QueryVisitor<TContext>.VisitedElements -> System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement?>!
*REMOVED*readonly LinqToDB.SqlQuery.WalkOptions.ProcessParent -> bool
*REMOVED*readonly LinqToDB.SqlQuery.WalkOptions.SkipColumnDeclaration -> bool
*REMOVED*static LinqToDB.AnalyticFunctions.Corr<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.Corr<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.CovarSamp<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.CovarSamp<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> double
*REMOVED*static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
*REMOVED*static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
*REMOVED*static LinqToDB.Common.Tools.CreateEmptyQuery(System.Type! elementType) -> System.Linq.IQueryable!
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.LikeFirebirdEscapeSymbols -> string![]!
*REMOVED*static LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.OracleLikeCharactersToEscape -> string![]!
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr, LinqToDB.IDataContext? dataContext = null) -> object?
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr, LinqToDB.IDataContext? dataContext = null) -> T?
*REMOVED*static LinqToDB.Extensions.ReflectionExtensions.IsEnumerableTType(this System.Type! type, System.Type! elementType) -> bool
*REMOVED*static LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.AggregateExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*static LinqToDB.Linq.Expressions.AccessRound<T>(T value, int? precision) -> T
*REMOVED*static LinqToDB.Linq.Expressions.DateAdd(LinqToDB.Sql.DateParts part, int? number, int? days) -> System.DateTime?
*REMOVED*static LinqToDB.Linq.Expressions.MakeDateTime2(int? year, int? month, int? day) -> System.DateTime?
*REMOVED*static LinqToDB.Sql.Convert2<TTo, TFrom>(TTo to, TFrom from) -> TTo
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.CalcCanBeNull(LinqToDB.Sql.IsNullableType isNullable, System.Collections.Generic.IEnumerable<bool>! nullInfo) -> bool?
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<System.Linq.Expressions.Expression?>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression?>! converter) -> LinqToDB.SqlQuery.ISqlExpression![]!
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<System.Linq.Expressions.Expression?>! knownExpressions, bool ignoreGenericParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext context, string! expression, System.Func<TContext, string!, string?, string?>! valueProvider) -> string!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.BuildSqlExpression(LinqToDB.Sql.SqlExtension! root, System.Type? systemType, int precedence, LinqToDB.SqlQuery.SqlFlags flags, bool? canBeNull, LinqToDB.Sql.IsNullableType isNullable) -> LinqToDB.SqlQuery.SqlExpression!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.ExcludeExtensionChain(LinqToDB.Mapping.MappingSchema! mapping, System.Linq.Expressions.Expression! expr) -> System.Linq.Expressions.Expression!
*REMOVED*static LinqToDB.Sql.ExtensionAttribute.GetExtensionAttributes(System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.MappingSchema! mapping) -> LinqToDB.Sql.ExtensionAttribute![]!
*REMOVED*static LinqToDB.Sql.Overlaps<T1, T2, T3, T4>(this LinqToDB.Sql.SqlRow<T1, T2>! thisRow, LinqToDB.Sql.SqlRow<T3, T4>! other) -> bool
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, LinqToDB.Sql.SqlRow<T6, LinqToDB.Sql.SqlRow<T7, T8>!>!>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, LinqToDB.Sql.SqlRow<T6, T7>!>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, LinqToDB.Sql.SqlRow<T5, T6>!>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, LinqToDB.Sql.SqlRow<T4, T5>!>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, LinqToDB.Sql.SqlRow<T3, T4>!>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2, T3>(T1 value1, T2 value2, T3 value3) -> LinqToDB.Sql.SqlRow<T1, LinqToDB.Sql.SqlRow<T2, T3>!>!
*REMOVED*static LinqToDB.Sql.Row<T1, T2>(T1 value1, T2 value2) -> LinqToDB.Sql.SqlRow<T1, T2>!
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator <(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator <=(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator >(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.Sql.SqlRow<T1, T2>.operator >=(LinqToDB.Sql.SqlRow<T1, T2>! x, LinqToDB.Sql.SqlRow<T1, T2>! y) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.CreateSqlValue(object? value, LinqToDB.Common.DbDataType dbDataType, params LinqToDB.SqlQuery.ISqlExpression![]! basedOn) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.CreateSqlValue(object? value, LinqToDB.SqlQuery.SqlBinaryExpression! be) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.GenerateEscapeReplacement(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ISqlExpression! character) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsAggregationFunction(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsBooleanParameter(LinqToDB.SqlQuery.ISqlExpression! expr, int count, int i) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateDataOffsetType(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateDataType(LinqToDB.SqlQuery.ISqlExpression! expr, string! dateName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateTime2Type(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsDateTimeType(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsSmallDateTimeType(LinqToDB.SqlQuery.ISqlExpression! expr, string! typeName) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.IsTimeDataType(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.StandardLikeCharactersToEscape -> string![]!
*REMOVED*static LinqToDB.SqlProvider.BasicSqlOptimizer.TryConvertToValue(LinqToDB.SqlQuery.ISqlExpression! expr, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.Join(this LinqToDB.SqlQuery.ISqlTableSource! table, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.Join(this LinqToDB.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.WeakJoin(this LinqToDB.SqlQuery.ISqlTableSource! table, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.JoinExtensions.WeakJoin(this LinqToDB.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.PseudoFunctions.MakeConvert(LinqToDB.SqlQuery.SqlDataType! toType, LinqToDB.SqlQuery.SqlDataType! fromType, LinqToDB.SqlQuery.ISqlExpression! value) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CollectDependencies(LinqToDB.SqlQuery.IQueryElement! root, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>! sources, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlExpression!>! found, System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.IQueryElement!>? ignore = null) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationOrWindowFunctionDeep(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationOrWindowFunctionOneLevel(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsElement(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CorrectSearchConditionNesting(LinqToDB.SqlQuery.SelectQuery! sql, LinqToDB.SqlQuery.SqlCondition! condition, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlTableSource!>! forTableSources) -> LinqToDB.SqlQuery.SqlCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.CountElements(LinqToDB.SqlQuery.ISqlExpression! expr) -> System.Collections.Generic.IDictionary<LinqToDB.SqlQuery.QueryElementType, int>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.DependencyCount(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! onElement, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> int
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlSearchCondition! searchCondition) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.SqlQuery.SqlWhereClause! whereClause) -> LinqToDB.SqlQuery.SqlWhereClause!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateInnerJoined(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateInnerJoined(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateJoins(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlJoinedTable!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.ISqlTableSource!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.EnumerateLevelTables(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlTable!>!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.FindJoin(this LinqToDB.SqlQuery.SelectQuery! query, System.Func<LinqToDB.SqlQuery.SqlJoinedTable!, bool>! match) -> LinqToDB.SqlQuery.SqlJoinedTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GenerateEquality(LinqToDB.SqlQuery.ISqlExpression! field1, LinqToDB.SqlQuery.ISqlExpression! field2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlCondition!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetBoolValue(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.EvaluationContext! context) -> bool?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetDbDataType(LinqToDB.SqlQuery.ISqlExpression? expr) -> LinqToDB.Common.DbDataType
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetDeleteTable(this LinqToDB.SqlQuery.SqlDeleteStatement! deleteStatement) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetExpressionType(this LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.Common.DbDataType
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUnderlyingExpression(LinqToDB.SqlQuery.ISqlExpression? expression) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUnderlyingExpressionValue(LinqToDB.SqlQuery.SqlExpression! sqlExpression, bool checkNullability) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.GetUpdateTable(this LinqToDB.SqlQuery.SqlUpdateStatement! updateStatement) -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.HasOuterReferences(System.Collections.Generic.ISet<LinqToDB.SqlQuery.ISqlTableSource!>! sources, LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.HasQueryParameters(LinqToDB.SqlQuery.ISqlExpression! expression) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsComplexExpression(this LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsDependsOn(LinqToDB.SqlQuery.IQueryElement! testedRoot, LinqToDB.SqlQuery.IQueryElement! onElement, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsDependsOn(LinqToDB.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.ISqlTableSource!>! onSources, System.Collections.Generic.HashSet<LinqToDB.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsEqualTables(LinqToDB.SqlQuery.SqlTable? table1, LinqToDB.SqlQuery.SqlTable? table2) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.IsTransitiveExpression(LinqToDB.SqlQuery.SqlExpression! sqlExpression, bool checkNullability) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.JoinRemoval<TContext>(TContext context, LinqToDB.SqlQuery.SqlStatement! statement, System.Func<TContext, LinqToDB.SqlQuery.SqlStatement!, LinqToDB.SqlQuery.SqlJoinedTable!, bool>! joinFunc) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.MoveSearchConditionsToJoin(LinqToDB.SqlQuery.SelectQuery! sql, LinqToDB.SqlQuery.SqlJoinedTable! joinedTable, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlCondition!>? movedConditions) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.RemoveNotUnusedColumns(this LinqToDB.SqlQuery.SelectQuery! selectQuery) -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.RootQuery(this LinqToDB.SqlQuery.SelectQuery! query) -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ShouldCheckForNull(this LinqToDB.SqlQuery.ISqlExpression! expr) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ToDebugString(this LinqToDB.SqlQuery.IQueryElement! expr) -> string!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.TransformInnerJoinsToWhere(this LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.SelectQuery!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ValidateTable(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.ISqlTableSource! table) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Clone<T>(this T![]? elements, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! objectTree) -> T![]?
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<T>(this T! element, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<object?>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! convertAction, System.Func<LinqToDB.SqlQuery.ConvertVisitor<TContext>!, bool>! parentAction) -> T!
*REMOVED*static LinqToDB.SqlQuery.SqlFromClause.Join.Next.implicit operator LinqToDB.SqlQuery.SqlFromClause.Join!(LinqToDB.SqlQuery.SqlFromClause.Join.Next! next) -> LinqToDB.SqlQuery.SqlFromClause.Join!
*REMOVED*static LinqToDB.SqlQuery.SqlStatement.PrepareQueryAndAliases(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.AliasesContext? prevAliasContext, out LinqToDB.SqlQuery.AliasesContext! newAliasContext) -> void
*REMOVED*static readonly LinqToDB.Common.MemberInfoEqualityComparer.Default -> LinqToDB.Common.MemberInfoEqualityComparer!
*REMOVED*static readonly LinqToDB.Reflection.Methods.Enumerable.AsQueryable -> System.Reflection.MethodInfo!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.Default -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.WithProcessParent -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*static readonly LinqToDB.SqlQuery.WalkOptions.WithSkipColumnDeclaration -> LinqToDB.SqlQuery.WalkOptions!
*REMOVED*virtual LinqToDB.Async.AsyncDbConnection.TryClone() -> System.Data.Common.DbConnection?
*REMOVED*virtual LinqToDB.DataContext.CloneDataConnection(LinqToDB.Data.DataConnection! currentConnection, LinqToDB.DataOptions! options) -> LinqToDB.Data.DataConnection!
*REMOVED*virtual LinqToDB.Expressions.SqlQueryDependentAttribute.PrepareForCache(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*virtual LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*virtual LinqToDB.Sql.TableFunctionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Mapping.ColumnDescriptor?, LinqToDB.SqlQuery.ISqlExpression!>! converter) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildDataTypeFromDataType(LinqToDB.SqlQuery.SqlDataType! type, bool forCreateTable, bool canBeNull) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeInto(LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOn(LinqToDB.SqlQuery.SqlMergeStatement! mergeStatement) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDelete(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationInsert(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdate(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(LinqToDB.SqlQuery.SqlMergeOperationClause! operation) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeSourceQuery(LinqToDB.SqlQuery.SqlTableLikeSource! mergeSource) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildMergeTerminator(LinqToDB.SqlQuery.SqlMergeStatement! merge) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildSqlRow(LinqToDB.SqlQuery.SqlRow! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildTypedExpression(LinqToDB.SqlQuery.SqlDataType! dataType, LinqToDB.SqlQuery.ISqlExpression! value) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.BuildWhere(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.GetSelectedColumns(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.SqlQuery.SqlColumn!>!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.SupportsBooleanInColumn.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.SupportsNullInColumn.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlBuilder.WrapColumnExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.CanCompareSearchConditions.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertBetweenPredicate(LinqToDB.SqlQuery.SqlPredicate.Between! between) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertConversion(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertCountSubQuery(LinqToDB.SqlQuery.SelectQuery! subQuery) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertElement(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.IQueryElement? element, LinqToDB.SqlProvider.OptimizationContext! context) -> LinqToDB.SqlQuery.IQueryElement?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertExpressionImpl(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertInListPredicate(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlPredicate.InList! p, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertLikePredicate(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlQuery.SqlPredicate.Like! predicate, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertPredicateImpl(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSearchStringPredicate(LinqToDB.SqlQuery.SqlPredicate.SearchString! predicate, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.ConvertSkipTake(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.SqlQuery.ISqlExpression? skipExpr) -> void
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikeCharacters(LinqToDB.SqlQuery.ISqlExpression! expression, ref LinqToDB.SqlQuery.ISqlExpression? escape) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikeCharacters(string! str, string! escape) -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.EscapeLikePattern(string! str) -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FinalizeStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxDisplaySize(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxLength(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxPrecision(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.GetMaxScale(LinqToDB.SqlQuery.SqlDataType! type) -> int?
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeCharactersToEscape.get -> string![]!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeEscapeCharacter.get -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeIsEscapeSupported.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikePatternParameterSupport.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeValueParameterSupport.get -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.LikeWildcardCharacter.get -> string!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeBinaryExpression(LinqToDB.SqlQuery.SqlBinaryExpression! be, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeExpression(LinqToDB.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! convertVisitor) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeFunction(LinqToDB.SqlQuery.SqlFunction! func, LinqToDB.SqlQuery.EvaluationContext! context) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizePredicate(LinqToDB.SqlQuery.ISqlPredicate! predicate, LinqToDB.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeQueryElement(LinqToDB.SqlQuery.ConvertVisitor<LinqToDB.SqlProvider.BasicSqlOptimizer.RunOptimizationContext>! visitor, LinqToDB.SqlQuery.IQueryElement! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeRowInList(LinqToDB.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.OptimizeUpdateSubqueries(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.TransformStatement(LinqToDB.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SqlQuery.SqlStatement.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.ToString(System.Text.StringBuilder! sb, System.Collections.Generic.Dictionary<LinqToDB.SqlQuery.IQueryElement!, LinqToDB.SqlQuery.IQueryElement!>! dic) -> System.Text.StringBuilder!
*REMOVED*virtual LinqToDB.SqlQuery.SqlTable.Walk<TContext>(LinqToDB.SqlQuery.WalkOptions! options, TContext context, System.Func<TContext, LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!>! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Equal.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Greater.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.GreaterOrEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Less.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.LessOrEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotEqual.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotGreater.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.NotLess.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_.Op_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not.get -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Expr(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Field(LinqToDB.SqlQuery.SqlField! field) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Not_.Value(object! value) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.SubQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*~LinqToDB.SqlQuery.ConditionBase<T1, T2>.Value(object! value) -> LinqToDB.SqlQuery.ConditionBase<T1, T2>.Expr_!
*REMOVED*LinqToDB.SqlOptions.Pack() -> int
*REMOVED*LinqToDB.SqlOptions.Unpack(int n) -> LinqToDB.SqlOptions!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.IsTrue(LinqToDB.SqlQuery.ISqlExpression! exp1, LinqToDB.SqlQuery.ISqlExpression! trueValue, LinqToDB.SqlQuery.ISqlExpression! falseValue, bool? withNull, bool isNot, bool optimizeNull) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.OptimizeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.IsTrue.OptimizeNull.set -> void
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.ContainsAggregationFunctionOneLevel(LinqToDB.SqlQuery.IQueryElement! expr) -> bool
*REMOVED*virtual LinqToDB.SqlQuery.QueryElementVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*virtual LinqToDB.SqlProvider.SqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*virtual LinqToDB.SqlProvider.BasicSqlOptimizer.FixSetOperationNulls(LinqToDB.SqlQuery.SqlStatement! statement) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*virtual LinqToDB.SchemaProvider.SchemaProviderBase.InitProvider(LinqToDB.Data.DataConnection! dataConnection) -> void
*REMOVED*virtual LinqToDB.Expressions.ExpressionVisitorBase.VisitPlaceholderExpression(LinqToDB.Expressions.PlaceholderExpression! node) -> System.Linq.Expressions.Expression!
*REMOVED*static readonly LinqToDB.SqlQuery.SqlPredicate.True -> LinqToDB.SqlQuery.SqlPredicate.TruePredicate!
*REMOVED*static readonly LinqToDB.SqlQuery.SqlPredicate.False -> LinqToDB.SqlQuery.SqlPredicate.FalsePredicate!
*REMOVED*static LinqToDB.SqlQuery.SqlFunction.CreateSome(LinqToDB.SqlQuery.SelectQuery! subQuery) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.SqlFunction.CreateExists(LinqToDB.SqlQuery.SelectQuery! subQuery) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.SqlFunction.CreateAny(LinqToDB.SqlQuery.SelectQuery! subQuery) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.SqlFunction.CreateAll(LinqToDB.SqlQuery.SelectQuery! subQuery) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.TryConvertOrderedDistinctToGroupBy(LinqToDB.SqlQuery.SelectQuery! select, LinqToDB.SqlProvider.SqlProviderFlags! flags) -> bool
*REMOVED*static LinqToDB.SqlQuery.QueryHelper.DebugCheckNesting(LinqToDB.SqlQuery.SqlStatement! statement, bool isSubQuery) -> void
*REMOVED*static LinqToDB.SqlQuery.PseudoFunctions.MakeCoalesce(System.Type! systemType, params LinqToDB.SqlQuery.ISqlExpression![]! values) -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddNotEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddLessOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddLess(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddGreaterOrEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddGreater(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.SqlQuery.PredicateExtensions.AddEqual(this LinqToDB.SqlQuery.SqlSearchCondition! search, LinqToDB.SqlQuery.ISqlExpression! expr1, LinqToDB.SqlQuery.ISqlExpression! expr2, bool compareNullsAsValues) -> LinqToDB.SqlQuery.SqlSearchCondition!
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, bool ignoreGenericParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
*REMOVED*static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, out System.Linq.Expressions.Expression? error) -> LinqToDB.SqlQuery.ISqlExpression?[]!
*REMOVED*static LinqToDB.LinqExtensions.SelectAsync<T>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<T>!>! selector) -> System.Threading.Tasks.Task<T>!
*REMOVED*static LinqToDB.Linq.Translation.SqlExpressionFactoryExtensions.FuncLikePredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.SqlQuery.ISqlExpression! function) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*static LinqToDB.Linq.Query<T>.GetQuery(LinqToDB.IDataContext! dataContext, ref System.Linq.Expressions.Expression! expr, out bool dependsOnParameters) -> LinqToDB.Linq.Query<T>!
*REMOVED*static LinqToDB.Expressions.SqlErrorExpression.EnsureError(object? context, System.Linq.Expressions.Expression! expression) -> LinqToDB.Expressions.SqlErrorExpression!
*REMOVED*static LinqToDB.Expressions.PlaceholderExpression.Closure(System.Linq.Expressions.Expression! innerExpression) -> LinqToDB.Expressions.PlaceholderExpression!
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr) -> T?
*REMOVED*static LinqToDB.Expressions.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr) -> object?
*REMOVED*static LinqToDB.DataProvider.SqlProviderHelper.IsValidQuery(LinqToDB.SqlQuery.SelectQuery! selectQuery, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, bool forColumn, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, string? connectionString = null) -> LinqToDB.DataProvider.IDataProvider!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.DropDatabase(string! databaseName) -> void
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
*REMOVED*static LinqToDB.DataOptionsExtensions.UseTraceWith(this LinqToDB.DataOptions! options, System.Action<string?, string?, System.Diagnostics.TraceLevel>! write) -> LinqToDB.DataOptions!
*REMOVED*static LinqToDB.Data.DataConnection.WriteTraceLine -> System.Action<string?, string?, System.Diagnostics.TraceLevel>!
*REMOVED*override LinqToDB.SqlQuery.SqlQueryOrderByOptimizer.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.TruePredicate.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.SearchString.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Not.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Like.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsTrue.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsNull.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.IsDistinct.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InSubQuery.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.InList.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.Invert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.Equals(LinqToDB.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FuncLike.CanInvert(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.FalsePredicate.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.ExprExpr.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SqlPredicate.Between.WritePredicate(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> void
*REMOVED*override LinqToDB.SqlQuery.SelectQueryOptimizerVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor.VisitFuncLikePredicate(LinqToDB.SqlQuery.SqlPredicate.FuncLike! element) -> LinqToDB.SqlQuery.IQueryElement!
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.Type.get -> System.Type!
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.ToString() -> string!
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.Reduce() -> System.Linq.Expressions.Expression!
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.CanReduce.get -> bool
*REMOVED*override LinqToDB.Expressions.PlaceholderExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
*REMOVED*override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.Common.DbDataType dataType) -> void
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.Common.DbDataType dataType, object? value) -> void
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlOptimizer!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.GetQueryParameterNormalizer() -> LinqToDB.DataProvider.IQueryParametersNormalizer!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> IExecutionScope!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlBuilder!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
*REMOVED*override LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.ConvertParameterType(System.Type! type, LinqToDB.Common.DbDataType dataType) -> System.Type!
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.SqlQuery.ISqlExpression! expr) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.SqlQuery.SqlFunction! func) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.IQueryElement! element) -> bool
*REMOVED*override LinqToDB.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*override LinqToDB.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.SqlQuery.SqlCastExpression! cast) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.Common.DbDataType dataType) -> void
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlOptimizer!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlBuilder!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
*REMOVED*override LinqToDB.DataProvider.Access.AccessOleDbDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.Common.DbDataType dataType) -> void
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.Common.DbDataType dataType, object? value) -> void
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlOptimizer!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.GetQueryParameterNormalizer() -> LinqToDB.DataProvider.IQueryParametersNormalizer!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.SqlProvider.ISqlBuilder!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
*REMOVED*override LinqToDB.DataProvider.Access.AccessODBCDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
*REMOVED*LinqToDB.Tools.ActivityID.ReorderBuilders = 13 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.QueryProviderGetEnumeratorT = 2 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.QueryProviderGetEnumerator = 3 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.QueryProviderExecuteT = 0 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.QueryProviderExecute = 1 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.OnTraceInternal = 96 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.Materialization = 95 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetSqlText = 94 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetQueryTotal = 4 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetQueryFindFind = 7 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetQueryFindExpose = 6 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetQueryFind = 5 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.GetQueryCreate = 8 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.BuildSequenceCanBuild = 11 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.BuildSequenceBuild = 12 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.BuildSequence = 10 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityID.Build = 9 -> LinqToDB.Tools.ActivityID
*REMOVED*LinqToDB.Tools.ActivityBase.ActivityBase() -> void
*REMOVED*LinqToDB.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidQuery(LinqToDB.SqlQuery.IQueryElement! element, LinqToDB.SqlQuery.SelectQuery? parentQuery, LinqToDB.SqlQuery.SqlJoinedTable? fakeJoin, bool forColumn, LinqToDB.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlWithClause.WalkQueries<TContext>(TContext context, System.Func<TContext, LinqToDB.SqlQuery.SelectQuery!, LinqToDB.SqlQuery.SelectQuery!>! func) -> void
*REMOVED*LinqToDB.SqlQuery.SqlValue.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlValue.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlValue.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlValue.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlStatement.CollectParameters() -> LinqToDB.SqlQuery.SqlParameter![]!
*REMOVED*LinqToDB.SqlQuery.SqlSearchCondition.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.ToString(LinqToDB.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.SqlQuery.QueryElementTextWriter!
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.SystemType.get -> System.Type?
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.Equals(LinqToDB.SqlQuery.ISqlExpression! other) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlRowExpression.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.FuncLike.Update(LinqToDB.SqlQuery.SqlFunction! function) -> LinqToDB.SqlQuery.SqlPredicate.FuncLike!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.FuncLike.Modify(LinqToDB.SqlQuery.SqlFunction! function) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.FuncLike.Function.get -> LinqToDB.SqlQuery.SqlFunction!
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.FuncLike.FuncLike(LinqToDB.SqlQuery.SqlFunction! func) -> void
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.FuncLike
*REMOVED*LinqToDB.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.EvaluationContext! context, bool insideNot) -> LinqToDB.SqlQuery.ISqlPredicate!
*REMOVED*LinqToDB.SqlQuery.SqlParameterValues.SetValue(LinqToDB.SqlQuery.SqlParameter! parameter, object? value) -> void
*REMOVED*LinqToDB.SqlQuery.SqlParameterValues.AddValue(LinqToDB.SqlQuery.SqlParameter! parameter, object? providerValue, LinqToDB.Common.DbDataType dbDataType) -> void
*REMOVED*LinqToDB.SqlQuery.SqlParameterValue.SqlParameterValue(object? providerValue, LinqToDB.Common.DbDataType dbDataType) -> void
*REMOVED*LinqToDB.SqlQuery.SqlParameter.Precedence.get -> int
*REMOVED*LinqToDB.SqlQuery.SqlParameter.Equals(LinqToDB.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.SqlQuery.ISqlExpression!, LinqToDB.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlParameter.ElementType.get -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.SqlParameter.CanBeNullable(LinqToDB.SqlQuery.NullabilityContext! nullability) -> bool
*REMOVED*LinqToDB.SqlQuery.SqlParameter.CanBeNull.get -> bool
*REMOVED*LinqToDB.SqlQuery.SqlOutputClause.Modify(LinqToDB.SqlQuery.SqlTable? insertedTable, LinqToDB.SqlQuery.SqlTable? deletedTable, LinqToDB.SqlQuery.SqlTable? outputTable) -> void
*REMOVED*LinqToDB.SqlQuery.SqlOutputClause.InsertedTable.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlOutputClause.InsertedTable.get -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*LinqToDB.SqlQuery.SqlOutputClause.DeletedTable.set -> void
*REMOVED*LinqToDB.SqlQuery.SqlOutputClause.DeletedTable.get -> LinqToDB.SqlQuery.SqlTable?
*REMOVED*LinqToDB.SqlQuery.QueryElementType.FuncLikePredicate = 26 -> LinqToDB.SqlQuery.QueryElementType
*REMOVED*LinqToDB.SqlQuery.EvaluationContext.RegisterError(LinqToDB.SqlQuery.IQueryElement! expr) -> void
*REMOVED*LinqToDB.SqlQuery.EvaluationContext.Register(LinqToDB.SqlQuery.IQueryElement! expr, object? value) -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanComparison.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.SupportsBooleanComparison.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsOrderByAggregateFunctionsSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsOrderByAggregateFunctionsSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceSupported.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceSupported.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.DoesNotSupportCorrelatedSubquery.set -> void
*REMOVED*LinqToDB.SqlProvider.SqlProviderFlags.DoesNotSupportCorrelatedSubquery.get -> bool
*REMOVED*LinqToDB.SqlProvider.SqlExpressionConvertVisitor.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags?
*REMOVED*LinqToDB.SqlProvider.SqlExpressionConvertVisitor.IsForPredicate -> LinqToDB.SqlQuery.ISqlExpression?
*REMOVED*LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertToBooleanSearchCondition(LinqToDB.SqlQuery.ISqlExpression! expression) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesceToBinaryFunc(LinqToDB.SqlQuery.SqlFunction! func, string! funcName, bool supportsParameters = true) -> LinqToDB.SqlQuery.ISqlExpression!
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.SqlProviderFlags.get -> LinqToDB.SqlProvider.SqlProviderFlags?
*REMOVED*LinqToDB.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.DataOptions! dataOptions, LinqToDB.SqlProvider.SqlProviderFlags? sqlProviderFlags, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.SqlProvider.SqlExpressionOptimizerVisitor! optimizerVisitor, LinqToDB.SqlProvider.SqlExpressionConvertVisitor! convertVisitor, bool isParameterOrderDepended, bool isAlreadyOptimizedAndConverted, System.Func<LinqToDB.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
*REMOVED*LinqToDB.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.ReplaceDistinctOrderByWithRowNumber(LinqToDB.SqlQuery.SqlStatement! statement, System.Func<LinqToDB.SqlQuery.SelectQuery!, bool>! queryFilter) -> LinqToDB.SqlQuery.SqlStatement!
*REMOVED*LinqToDB.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.SqlQuery.NullabilityContext! nullability, LinqToDB.SqlQuery.SqlStatement! statement) -> bool
*REMOVED*LinqToDB.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.Common.DbDataType? dataType, object? value) -> void
*REMOVED*LinqToDB.Mapping.AssociationDescriptor.GetElementType(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.Type!
*REMOVED*LinqToDB.Mapping.AssociationDescriptor.AssociationDescriptor(System.Type! type, System.Reflection.MemberInfo! memberInfo, string![]! thisKey, string![]! otherKey, string? expressionPredicate, System.Linq.Expressions.Expression? predicate, string? expressionQueryMethod, System.Linq.Expressions.Expression? expressionQuery, string? storage, string? associationSetterExpressionMethod, System.Linq.Expressions.Expression? associationSetterExpression, bool? canBeNull, string? aliasName) -> void
*REMOVED*LinqToDB.LinqOptions.LinqOptions(bool PreloadGroups = false, bool IgnoreEmptyUpdate = false, bool GenerateExpressionTest = false, bool TraceMapperExpression = false, bool DoNotClearOrderBys = false, bool OptimizeJoins = true, bool CompareNullsAsValues = true, bool GuardGrouping = true, bool DisableQueryCache = false, System.TimeSpan? CacheSlidingExpiration = null, bool PreferApply = true, bool KeepDistinctOrdered = true, bool ParameterizeTakeSkip = true, bool EnableContextSchemaEdit = false, bool PreferExistsForScalar = false) -> void
*REMOVED*LinqToDB.LinqOptions.Deconstruct(out bool PreloadGroups, out bool IgnoreEmptyUpdate, out bool GenerateExpressionTest, out bool TraceMapperExpression, out bool DoNotClearOrderBys, out bool OptimizeJoins, out bool CompareNullsAsValues, out bool GuardGrouping, out bool DisableQueryCache, out System.TimeSpan? CacheSlidingExpiration, out bool PreferApply, out bool KeepDistinctOrdered, out bool ParameterizeTakeSkip, out bool EnableContextSchemaEdit, out bool PreferExistsForScalar) -> void
*REMOVED*LinqToDB.LinqOptions.CompareNullsAsValues.init -> void
*REMOVED*LinqToDB.LinqOptions.CompareNullsAsValues.get -> bool
*REMOVED*LinqToDB.Linq.Translation.ITranslationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
*REMOVED*LinqToDB.Linq.Translation.ITranslationContext.IsPreferServerSide(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
*REMOVED*LinqToDB.Linq.Translation.ITranslationContext.CreateErrorExpression(System.Linq.Expressions.Expression! basedOn, string! message) -> LinqToDB.Expressions.SqlErrorExpression!
*REMOVED*LinqToDB.Linq.Translation.ITranslationContext.CanBeCompiled(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> bool
*REMOVED*LinqToDB.Linq.Query.SetDynamicAccessors(System.Collections.Generic.List<(System.Linq.Expressions.Expression! used, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.IDataContext!, LinqToDB.Mapping.MappingSchema!, System.Linq.Expressions.Expression!>! accessorFunc)>? dynamicAccessors) -> void
*REMOVED*LinqToDB.Linq.Query.GetExpression() -> System.Linq.Expressions.Expression?
*REMOVED*LinqToDB.Linq.IQueryRunner.GetSqlText() -> string!
*REMOVED*LinqToDB.Linq.IQueryRunner.Expression.get -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.IExpressionQuery.SqlText.get -> string!
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Table = 0 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.SubQuery = 6 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Root = 7 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Object = 2 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.GroupJoin = 3 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Field = 4 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Expression = 5 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor.Association = 1 -> LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.RequestFor
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.OptimizeExpressionTreeTransformer(System.Linq.Expressions.Expression! expr, bool inProjection) -> LinqToDB.Expressions.TransformInfo
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.OptimizeExpressionTree(System.Linq.Expressions.Expression! expression, bool inProjection) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expr, bool inProjection) -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ExpandQueryableMethods(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ConvertMethodExpression(System.Type! type, System.Reflection.MemberInfo! mi, out string? alias) -> System.Linq.Expressions.LambdaExpression?
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.ConvertMethod(System.Linq.Expressions.MethodCallExpression! pi, System.Linq.Expressions.LambdaExpression! lambda) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeConstant(System.Linq.Expressions.Expression! expr) -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.CanBeCompiled(System.Linq.Expressions.Expression! expr, bool inProjection) -> bool
*REMOVED*LinqToDB.Linq.Builder.ExpressionTreeOptimizationContext.AggregateExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Linq.Builder.ConvertFlags.Key = 1 -> LinqToDB.Linq.Builder.ConvertFlags
*REMOVED*LinqToDB.Linq.Builder.ConvertFlags.Field = 0 -> LinqToDB.Linq.Builder.ConvertFlags
*REMOVED*LinqToDB.Linq.Builder.ConvertFlags.All = 2 -> LinqToDB.Linq.Builder.ConvertFlags
*REMOVED*LinqToDB.Linq.Builder.ConvertFlags
*REMOVED*LinqToDB.Linq.AccessorMember.AccessorMember(System.Reflection.MemberInfo! memberInfo, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>? arguments) -> void
*REMOVED*LinqToDB.Linq.AccessorMember.AccessorMember(System.Reflection.MemberInfo! memberInfo) -> void
*REMOVED*LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.QueryFilter = 2 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
*REMOVED*LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.AssociationExpression = 1 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
*REMOVED*LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query! query, LinqToDB.IDataContext! parametersContext, int queryNumber, System.Linq.Expressions.Expression! expression, object?[]? parameters, object?[]? preambles) -> LinqToDB.Linq.IQueryRunner!
*REMOVED*LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceParameters(System.Collections.Generic.List<LinqToDB.Expressions.SqlGenericConstructorExpression.Parameter!>! parameters) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
*REMOVED*LinqToDB.Expressions.SqlGenericConstructorExpression.ReplaceAssignments(System.Collections.Generic.List<LinqToDB.Expressions.SqlGenericConstructorExpression.Assignment!>! assignment) -> LinqToDB.Expressions.SqlGenericConstructorExpression!
*REMOVED*LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(object? buildContext, System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType, bool isCritical) -> void
*REMOVED*LinqToDB.Expressions.SqlErrorExpression.SqlErrorExpression(object? buildContext, System.Linq.Expressions.Expression! expression) -> void
*REMOVED*LinqToDB.Expressions.SqlErrorExpression.BuildContext.get -> object?
*REMOVED*LinqToDB.Expressions.PlaceholderType.Converted = 1 -> LinqToDB.Expressions.PlaceholderType
*REMOVED*LinqToDB.Expressions.PlaceholderType.Closure = 0 -> LinqToDB.Expressions.PlaceholderType
*REMOVED*LinqToDB.Expressions.PlaceholderType
*REMOVED*LinqToDB.Expressions.PlaceholderExpression.Update(System.Linq.Expressions.Expression! closureExpression) -> LinqToDB.Expressions.PlaceholderExpression!
*REMOVED*LinqToDB.Expressions.PlaceholderExpression.PlaceholderType.get -> LinqToDB.Expressions.PlaceholderType
*REMOVED*LinqToDB.Expressions.PlaceholderExpression.PlaceholderExpression(System.Linq.Expressions.Expression! innerExpression, LinqToDB.Expressions.PlaceholderType placeholderType) -> void
*REMOVED*LinqToDB.Expressions.PlaceholderExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
*REMOVED*LinqToDB.Expressions.PlaceholderExpression
*REMOVED*LinqToDB.Expressions.ExpressionEvaluator
*REMOVED*LinqToDB.Expressions.DefaultValueExpression.DefaultValueExpression(LinqToDB.Mapping.MappingSchema? mappingSchema, System.Type! type) -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType>!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.CreateBulkCopyColumnMapping.get -> System.Func<int, string!, LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping!>!
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider.SapHanaOdbcDataProvider() -> void
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaOdbcDataProvider
*REMOVED*LinqToDB.DataProvider.SapHana.SapHanaDataProvider.SapHanaDataProvider() -> void
*REMOVED*LinqToDB.DataProvider.Access.AccessOleDbDataProvider.AccessOleDbDataProvider() -> void
*REMOVED*LinqToDB.DataProvider.Access.AccessOleDbDataProvider
*REMOVED*LinqToDB.DataProvider.Access.AccessODBCDataProvider.AccessODBCDataProvider() -> void
*REMOVED*LinqToDB.DataProvider.Access.AccessODBCDataProvider
*REMOVED*LinqToDB.Data.QueryTraceOptions.WriteTrace.get -> System.Action<string?, string?, System.Diagnostics.TraceLevel>?
*REMOVED*LinqToDB.Data.QueryTraceOptions.QueryTraceOptions(System.Diagnostics.TraceLevel? TraceLevel = null, System.Action<LinqToDB.Data.TraceInfo!>? OnTrace = null, System.Action<string?, string?, System.Diagnostics.TraceLevel>? WriteTrace = null) -> void
*REMOVED*LinqToDB.Data.QueryTraceOptions.Deconstruct(out System.Diagnostics.TraceLevel? TraceLevel, out System.Action<LinqToDB.Data.TraceInfo!>? OnTrace, out System.Action<string?, string?, System.Diagnostics.TraceLevel>? WriteTrace) -> void
*REMOVED*LinqToDB.Data.DataConnection.WriteTraceLineConnection.get -> System.Action<string?, string?, System.Diagnostics.TraceLevel>!
*REMOVED*const LinqToDB.SqlQuery.PseudoFunctions.COALESCE = "$Coalesce$" -> string!
*REMOVED*const LinqToDB.LinqToDBConstants.Copyright = "© 2011-2024 linq2db.com" -> string!
*REMOVED*const LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.ProviderFactoryName = "Sap.Data.Hana" -> string!
*REMOVED*const LinqToDB.DataProvider.SapHana.SapHanaProviderAdapter.ClientNamespace = "Sap.Data.Hana" -> string!
*REMOVED*LinqToDB.DataProvider.ClickHouse.ClickHouseConfiguration
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseConfiguration.UseStandardCompatibleAggregates.set -> void
*REMOVED*static LinqToDB.DataProvider.ClickHouse.ClickHouseConfiguration.UseStandardCompatibleAggregates.get -> bool
*REMOVED*LinqToDB.Remote.RemoteDataContextBase.Configuration.set -> void
*REMOVED*LinqToDB.Remote.RemoteDataContextBase.Configuration.get -> string?
*REMOVED*LinqToDB.Reflection.MemberAccessor.SetterExpression.get -> System.Linq.Expressions.LambdaExpression!
*REMOVED*LinqToDB.Reflection.MemberAccessor.Setter.get -> System.Action<object!, object?>?
*REMOVED*LinqToDB.Reflection.MemberAccessor.GetterExpression.get -> System.Linq.Expressions.LambdaExpression!
*REMOVED*LinqToDB.Reflection.MemberAccessor.Getter.get -> System.Func<object!, object?>?
*REMOVED*LinqToDB.DataProvider.SqlServer.SqlServerConfiguration
*REMOVED*LinqToDB.DataProvider.SqlCe.SqlCeConfiguration
*REMOVED*LinqToDB.DataProvider.Informix.InformixConfiguration
*REMOVED*LinqToDB.DataProvider.Firebird.FirebirdConfiguration
*REMOVED*static LinqToDB.DataProvider.SqlServer.SqlServerTools.DefaultBulkCopyType.set -> void
*REMOVED*static LinqToDB.DataProvider.SqlServer.SqlServerTools.DefaultBulkCopyType.get -> LinqToDB.Data.BulkCopyType
*REMOVED*static LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.GenerateScopeIdentity.set -> void
*REMOVED*static LinqToDB.DataProvider.SqlServer.SqlServerConfiguration.GenerateScopeIdentity.get -> bool
*REMOVED*static LinqToDB.DataProvider.SqlCe.SqlCeConfiguration.InlineFunctionParameters.set -> void
*REMOVED*static LinqToDB.DataProvider.SqlCe.SqlCeConfiguration.InlineFunctionParameters.get -> bool
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.IdentifierQuoteMode.set -> void
*REMOVED*static LinqToDB.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.IdentifierQuoteMode.get -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
*REMOVED*static LinqToDB.DataProvider.Informix.InformixConfiguration.ExplicitFractionalSecondsSeparator.set -> void
*REMOVED*static LinqToDB.DataProvider.Informix.InformixConfiguration.ExplicitFractionalSecondsSeparator.get -> bool
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IsLiteralEncodingSupported.set -> void
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IsLiteralEncodingSupported.get -> bool
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IdentifierQuoteMode.set -> void
*REMOVED*static LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IdentifierQuoteMode.get -> LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode

