#nullable enable
abstract LinqToDB.Data.RetryPolicy.RetryPolicyBase.ShouldRetryOn(System.Exception! exception) -> bool
abstract LinqToDB.Internal.Common.ValueComparer.Equals(object? x, object? y) -> bool
abstract LinqToDB.Internal.Common.ValueComparer.GetHashCode(object? obj) -> int
abstract LinqToDB.Internal.Common.ValueComparer.Type.get -> System.Type!
abstract LinqToDB.Internal.DataProvider.BulkCopyReader.Current.get -> object!
abstract LinqToDB.Internal.DataProvider.BulkCopyReader.MoveNext() -> bool
abstract LinqToDB.Internal.DataProvider.BulkCopyReader.MoveNextAsync() -> System.Threading.Tasks.ValueTask<bool>
abstract LinqToDB.Internal.DataProvider.DataProviderBase.ConnectionNamespace.get -> string?
abstract LinqToDB.Internal.DataProvider.DataProviderBase.CreateConnectionInternal(string! connectionString) -> System.Data.Common.DbConnection!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.DataReaderType.get -> System.Type!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
abstract LinqToDB.Internal.DataProvider.DataProviderBase.SupportedTableOptions.get -> LinqToDB.TableOptions
abstract LinqToDB.Internal.DataProvider.DataProviderFactoryBase.GetDataProvider(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> LinqToDB.DataProvider.IDataProvider!
abstract LinqToDB.Internal.DataProvider.DataProviderOptions<T>.CreateID(LinqToDB.Internal.Common.IdentifierBuilder builder) -> LinqToDB.Internal.Common.IdentifierBuilder
abstract LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.Version.get -> LinqToDB.DataProvider.DB2.DB2Version
abstract LinqToDB.Internal.DataProvider.IdentifierServiceBase.IsFit(LinqToDB.Internal.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
abstract LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.IsPackageProceduresSupported.get -> bool
abstract LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.CreateConnection(TProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
abstract LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
abstract LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.DetectServerVersion(System.Data.Common.DbConnection! connection) -> TVersion?
abstract LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, TProvider provider, TVersion version) -> LinqToDB.DataProvider.IDataProvider!
abstract LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
abstract LinqToDB.Internal.Options.OptionsContainer<T>.Clone() -> T!
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProviderSpecificTypeNamespace() -> string?
abstract LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
abstract LinqToDB.Internal.SqlProvider.BasicSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
abstract LinqToDB.Internal.SqlQuery.QueryElement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
abstract LinqToDB.Internal.SqlQuery.QueryElement.GetElementHashCode() -> int
abstract LinqToDB.Internal.SqlQuery.QueryElement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
abstract LinqToDB.Internal.SqlQuery.SqlExpressionBase.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
abstract LinqToDB.Internal.SqlQuery.SqlExpressionBase.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
abstract LinqToDB.Internal.SqlQuery.SqlExpressionBase.Precedence.get -> int
abstract LinqToDB.Internal.SqlQuery.SqlExpressionBase.SystemType.get -> System.Type?
abstract LinqToDB.Internal.SqlQuery.SqlInlinedBase.GetSqlExpression(LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
abstract LinqToDB.Internal.SqlQuery.SqlPredicate.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
abstract LinqToDB.Internal.SqlQuery.SqlPredicate.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
abstract LinqToDB.Internal.SqlQuery.SqlPredicate.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
abstract LinqToDB.Internal.SqlQuery.SqlPredicate.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
abstract LinqToDB.Internal.SqlQuery.SqlPredicate.WritePredicate(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> void
abstract LinqToDB.Internal.SqlQuery.SqlSourceBase.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
abstract LinqToDB.Internal.SqlQuery.SqlSourceBase.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
abstract LinqToDB.Internal.SqlQuery.SqlSourceBase.Source.get -> LinqToDB.Internal.SqlQuery.ISqlTableSource!
abstract LinqToDB.Internal.SqlQuery.SqlSourceBase.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
abstract LinqToDB.Internal.SqlQuery.SqlStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
abstract LinqToDB.Internal.SqlQuery.SqlStatement.IsParameterDependent.get -> bool
abstract LinqToDB.Internal.SqlQuery.SqlStatement.IsParameterDependent.set -> void
abstract LinqToDB.Internal.SqlQuery.SqlStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
abstract LinqToDB.Internal.SqlQuery.SqlStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
abstract LinqToDB.Internal.SqlQuery.SqlStatement.SelectQuery.set -> void
abstract LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.ConvertElement(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
abstract LinqToDB.Mapping.MappingAttribute.GetObjectID() -> string!
abstract LinqToDB.Mapping.OptimisticLockPropertyBaseAttribute.GetNextValue(LinqToDB.Mapping.ColumnDescriptor! column, System.Linq.Expressions.ParameterExpression! record) -> System.Linq.Expressions.LambdaExpression?
abstract LinqToDB.Mapping.SkipBaseAttribute.Affects.get -> LinqToDB.Mapping.SkipModification
abstract LinqToDB.Mapping.SkipBaseAttribute.ShouldSkip(object! obj, LinqToDB.Mapping.EntityDescriptor! entityDescriptor, LinqToDB.Mapping.ColumnDescriptor! columnDescriptor) -> bool
abstract LinqToDB.Metrics.ActivityBase.Dispose() -> void
abstract LinqToDB.Reflection.TypeAccessor.Type.get -> System.Type!
abstract LinqToDB.Remote.RemoteDataContextBase.ContextIDPrefix.get -> string!
abstract LinqToDB.Remote.RemoteDataContextBase.GetClient() -> LinqToDB.Remote.ILinqService!
const LinqToDB.AnalyticFunctions.FunctionToken = "function" -> string!
const LinqToDB.DataProvider.Access.AccessHints.Query.WithOwnerAccessOption = "WITH OWNERACCESS OPTION" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.All = "ALL" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AllAnti = "ALL ANTI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AllAny = "ALL ANY" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AllAsOf = "ALL ASOF" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AllOuter = "ALL OUTER" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AllSemi = "ALL SEMI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.Anti = "ANTI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.Any = "ANY" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.AsOf = "ASOF" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.Global = "GLOBAL" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.GlobalAnti = "GLOBAL ANTI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.GlobalAny = "GLOBAL ANY" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.GlobalAsOf = "GLOBAL ASOF" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.GlobalOuter = "GLOBAL OUTER" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.GlobalSemi = "GLOBAL SEMI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.Outer = "OUTER" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join.Semi = "SEMI" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Query.Settings = "SETTINGS" -> string!
const LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Table.Final = "FINAL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.BatchedKeyAccess = "BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.Bka = "BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.BlockNestedLoop = "BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.Bnl = "BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.DerivedConditionPushDown = "DERIVED_CONDITION_PUSHDOWN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.HashJoin = "HASH_JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.JoinFixedOrder = "JOIN_FIXED_ORDER" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.JoinOrder = "JOIN_ORDER" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.JoinPrefix = "JOIN_PREFIX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.JoinSuffix = "JOIN_SUFFIX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.Merge = "MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoBatchedKeyAccess = "NO_BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoBka = "NO_BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoBlockNestedLoop = "NO_BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoBnl = "NO_BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoDerivedConditionPushDown = "NO_DERIVED_CONDITION_PUSHDOWN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoHashJoin = "NO_HASH_JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoMerge = "NO_MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.NoSemiJoin = "NO_SEMIJOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.ResourceGroup = "RESOURCE_GROUP" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.SemiJoin = "SEMIJOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Query.SetVar = "SET_VAR" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.SubQuery.ForShare = "FOR SHARE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.SubQuery.ForUpdate = "FOR UPDATE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.SubQuery.LockInShareMode = "LOCK IN SHARE MODE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.SubQuery.NoWait = "NOWAIT" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.SubQuery.SkipLocked = "SKIP LOCKED" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.BatchedKeyAccess = "BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.Bka = "BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.BlockNestedLoop = "BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.Bnl = "BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.DerivedConditionPushDown = "DERIVED_CONDITION_PUSHDOWN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceIndex = "FORCE INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceIndexForGroupBy = "FORCE INDEX FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceIndexForJoin = "FORCE INDEX FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceIndexForOrderBy = "FORCE INDEX FOR ORDER BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceKey = "FORCE KEY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceKeyForGroupBy = "FORCE KEY FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceKeyForJoin = "FORCE KEY FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.ForceKeyForOrderBy = "FORCE KEY FOR ORDER BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.GroupIndex = "GROUP_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.HashJoin = "HASH_JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreIndex = "IGNORE INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreIndexForGroupBy = "IGNORE INDEX FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreIndexForJoin = "IGNORE INDEX FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreIndexForOrderBy = "IGNORE INDEX FOR ORDER BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreKey = "IGNORE KEY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreKeyForGroupBy = "IGNORE KEY FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreKeyForJoin = "IGNORE KEY FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IgnoreKeyForOrderBy = "IGNORE KEY FOR ORDER BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.Index = "INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.IndexMerge = "INDEX_MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.JoinFixedOrder = "JOIN_FIXED_ORDER" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.JoinIndex = "JOIN_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.JoinOrder = "JOIN_ORDER" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.JoinPrefix = "JOIN_PREFIX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.JoinSuffix = "JOIN_SUFFIX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.Merge = "MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.Mrr = "MRR" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoBatchedKeyAccess = "NO_BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoBka = "NO_BKA" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoBlockNestedLoop = "NO_BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoBnl = "NO_BNL" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoDerivedConditionPushDown = "NO_DERIVED_CONDITION_PUSHDOWN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoGroupIndex = "NO_GROUP_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoHashJoin = "NO_HASH_JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoIcp = "NO_ICP" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoIndex = "NO_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoIndexMerge = "NO_INDEX_MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoJoinIndex = "NO_JOIN_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoMerge = "NO_MERGE" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoMrr = "NO_MRR" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoOrderIndex = "NO_ORDER_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoRangeOptimization = "NO_RANGE_OPTIMIZATION" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.NoSkipScan = "NO_SKIP_SCAN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.OrderIndex = "ORDER_INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.SkipScan = "SKIP_SCAN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseIndex = "USE INDEX" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseIndexForGroupBy = "USE INDEX FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseIndexForJoin = "USE INDEX FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseIndexForOrderBy = "USE INDEX FOR ORDER BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseKey = "USE KEY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseKeyForGroupBy = "USE KEY FOR GROUP BY" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseKeyForJoin = "USE KEY FOR JOIN" -> string!
const LinqToDB.DataProvider.MySql.MySqlHints.Table.UseKeyForOrderBy = "USE KEY FOR ORDER BY" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.AllRows = "ALL_ROWS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Append = "APPEND" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.AppendValues = "APPEND_VALUES" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Cache = "CACHE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Cluster = "CLUSTER" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Clustering = "CLUSTERING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.CursorSharingExact = "CURSOR_SHARING_EXACT" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.DisableParallelDml = "DISABLE_PARALLEL_DML" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.DrivingSite = "DRIVING_SITE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.DynamicSampling = "DYNAMIC_SAMPLING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.EnableParallelDml = "ENABLE_PARALLEL_DML" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Fact = "FACT" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.FreshMaterializedView = "FRESH_MV" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.FreshMV = "FRESH_MV" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Full = "FULL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Grouping = "GROUPING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Hash = "HASH" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Index = "INDEX" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexAsc = "INDEX_ASC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexCombine = "INDEX_COMBINE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexDesc = "INDEX_DESC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexFastFullScan = "INDEX_FFS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexFFS = "INDEX_FFS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexJoin = "INDEX_JOIN" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSkipScan = "INDEX_SS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSkipScanAsc = "INDEX_SS_ASC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSkipScanDesc = "INDEX_SS_DESC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSS = "INDEX_SS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSSAsc = "INDEX_SS_ASC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.IndexSSDesc = "INDEX_SS_DESC" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.InMemory = "NMEMORY" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.InMemoryPruning = "INMEMORY_PRUNING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Leading = "LEADING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Merge = "MERGE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.ModelMinAnalysis = "MODEL_MIN_ANALYSIS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Monitor = "MONITOR" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NativeFullOuterJoin = "NATIVE_FULL_OUTER_JOIN" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoAppend = "NOAPPEND" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoCache = "NOCACHE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoClustering = "NO_CLUSTERING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoExpand = "NO_EXPAND" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoFact = "NO_FACT" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoIndex = "NO_INDEX" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoIndexFastFullScan = "NO_INDEX_FFS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoIndexFFS = "NO_INDEX_FFS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoIndexSkipScan = "NO_INDEX_SS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoIndexSS = "NO_INDEX_SS" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoInMemory = "NO_INMEMORY" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoInMemoryPruning = "NO_INMEMORY_PRUNING" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoMerge = "NO_MERGE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoMonitor = "NO_MONITOR" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoNativeFullOuterJoin = "NO_NATIVE_FULL_OUTER_JOIN" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoParallel = "NO_PARALLEL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoParallelIndex = "NO_PARALLEL_INDEX" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoPQConcurrentUnion = "NO_PQ_CONCURRENT_UNION" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoPQSkew = "NO_PQ_SKEW" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoPushPredicate = "PUSH_PRED" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoPushSubQueries = "NO_PUSH_SUBQ" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoPxJoinFilter = "NO_PX_JOIN_FILTER" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoQueryTransformation = "NO_QUERY_TRANSFORMATION" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoRewrite = "NO_REWRITE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoStarTransformation = "NO_STAR_TRANSFORMATION" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUnnest = "NO_UNNEST" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseBand = "NO_USE_BAND" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseCube = "NO_USE_CUBE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseHash = "NO_USE_HASH" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseMerge = "NO_USE_MERGE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseNestedLoop = "NO_USE_NL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoUseNL = "NO_USE_NL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoXmlIndexRewrite = "NO_XMLINDEX_REWRITE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.NoXmlQueryRewrite = "NO_XML_QUERY_REWRITE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.OptParam = "OPT_PARAM" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Ordered = "ORDERED" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Parallel = "PARALLEL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.ParallelIndex = "PARALLEL_INDEX" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQConcurrentUnion = "PQ_CONCURRENT_UNION" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQDistribute = "PQ_DISTRIBUTE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQFilterHash = "PQ_FILTER(HASH)" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQFilterNone = "PQ_FILTER(NONE)" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQFilterRandom = "PQ_FILTER(RANDOM)" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQFilterSerial = "PQ_FILTER(SERIAL)" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PQSkew = "PQ_SKEW" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PushPredicate = "PUSH_PRED" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PushSubQueries = "PUSH_SUBQ" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.PxJoinFilter = "PX_JOIN_FILTER" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Rewrite = "REWRITE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.StarTransformation = "STAR_TRANSFORMATION" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.Unnest = "UNNEST" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseBand = "USE_BAND" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseConcat = "USE_CONCAT" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseCube = "USE_CUBE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseHash = "USE_HASH" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseMerge = "USE_MERGE" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseNestedLoop = "USE_NL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseNestedLoopWithIndex = "USE_NL_WITH_INDEX" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseNL = "USE_NL" -> string!
const LinqToDB.DataProvider.Oracle.OracleHints.Hint.UseNLWithIndex = "USE_NL_WITH_INDEX" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShare = "FOR KEY SHARE" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdate = "FOR NO KEY UPDATE" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShare = "FOR SHARE" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdate = "FOR UPDATE" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.NoWait = "NOWAIT" -> string!
const LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.SkipLocked = "SKIP LOCKED" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.HoldLock = "HoldLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.Index = "Index" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.NoLock = "NoLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.PagLock = "PagLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.RowLock = "RowLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.TabLock = "TabLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.UpdLock = "UpdLock" -> string!
const LinqToDB.DataProvider.SqlCe.SqlCeHints.Table.XLock = "XLock" -> string!
const LinqToDB.DataProvider.SQLite.SQLiteHints.Hint.NotIndexed = "NOT INDEXED" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Join.Hash = "HASH" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Join.Loop = "LOOP" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Join.Merge = "MERGE" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Join.Remote = "REMOTE" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ConcatUnion = "CONCAT UNION" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.DisableExternalPushDown = "DISABLE EXTERNALPUSHDOWN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.DisableScaleOutExecution = "DISABLE SCALEOUTEXECUTION" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ExpandViews = "EXPAND VIEWS" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ForceExternalPushDown = "FORCE EXTERNALPUSHDOWN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ForceOrder = "FORCE ORDER" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ForceScaleOutExecution = "FORCE SCALEOUTEXECUTION" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.HashGroup = "HASH GROUP" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.HashJoin = "HASH JOIN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.HashUnion = "HASH UNION" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.IgnoreNonClusteredColumnStoreIndex = "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.KeepFixedPlan = "KEEPFIXED PLAN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.KeepPlan = "KEEP PLAN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.LoopJoin = "LOOP JOIN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MergeJoin = "MERGE JOIN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MergeUnion = "MERGE UNION" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.NoPerformanceSpool = "NO_PERFORMANCE_SPOOL" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.OptimizeForUnknown = "OPTIMIZE FOR UNKNOWN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.OrderGroup = "ORDER GROUP" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ParameterizationForced = "PARAMETERIZATION FORCED" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.ParameterizationSimple = "PARAMETERIZATION SIMPLE" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.Recompile = "RECOMPILE" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.RobustPlan = "ROBUST PLAN" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ForceScan = "ForceScan" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ForceSeek = "ForceSeek" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.HoldLock = "HoldLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.Index = "Index" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.NoLock = "NoLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.NoWait = "NoWait" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.PagLock = "PagLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ReadCommitted = "ReadCommitted" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ReadCommittedLock = "ReadCommittedLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ReadPast = "ReadPast" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.ReadUncommitted = "ReadUncommitted" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.RepeatableRead = "RepeatableRead" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.RowLock = "RowLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.Serializable = "Serializable" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.Snapshot = "Snapshot" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.TabLock = "TabLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.TabLockX = "TabLockX" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.UpdLock = "UpdLock" -> string!
const LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.XLock = "XLock" -> string!
const LinqToDB.Internal.Common.ErrorHelper.ClickHouse.Error_CorrelatedDelete = "Feature not supported by database: Correlated DELETE" -> string!
const LinqToDB.Internal.Common.ErrorHelper.ClickHouse.Error_CorrelatedUpdate = "Feature not supported by database: Correlated UPDATE" -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Correlated_Subqueries = "Provider does not support correlated subqueries." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Correlated_Subqueries_Level = "Provider does not support correlated subqueries in more than {0} level." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_GroupGuard = "You should explicitly specify selected fields for server-side GroupBy() call or add AsEnumerable() call before GroupBy() to perform client-side grouping.\r\nSet Configuration.Linq.GuardGrouping = false to disable this check.\r\nAdditionally this guard exception can be disabled by extension GroupBy(...).DisableGuard().\r\nNOTE! By disabling this guard you accept Eager Loading for grouping query." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Join_ParentReference_Condition = "Provider does not support subqueries with JOIN which has reference to parent table in condition." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Join_Without_Condition = "Provider does not support JOIN without condition." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_MutiTable_Insert = "Provider does not support multi-table insert." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_OrderByRequiredForIndexing = "For retrieving index of row, specify OrderBy part" -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_OrderBy_in_Derived = "Provider does not support ORDER BY in derived table." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_OrderBy_in_Subquery = "Provider does not support ORDER BY in subquery." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_OUTER_Joins = "Provider does not support CROSS/OUTER/LATERAL joins." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_RowNumber = "Provider does not support ROW_NUMBER function." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Skip_in_Subquery = "Provider does not support Skip value in subquery." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_SqlRow_in_Update = "Provider does not support SqlRow on the left-hand side of an UPDATE SET." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_SqlRow_in_Update_Value = "Provider does not support SqlRow literal on the right-hand side of an UPDATE SET." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Subquery_in_Column = "Provider does not support columns with subqueries." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Take_in_Correlated_Subquery = "Provider does not support Take value in correlated subquery." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Take_in_Derived = "Provider does not support Take value in derived table." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_Take_in_Subquery = "Provider does not support Take value in subquery." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Error_WindowFunctionsInSearchCondition = "Window functions cannot be used in search condition." -> string!
const LinqToDB.Internal.Common.ErrorHelper.MySql.Error_SkipInUpdate = "Feature not supported by database: Skip in UPDATE." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Sybase.Error_DeleteWithSkip = "Feature not supported by database: DELETE statement with the Skip." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Sybase.Error_DeleteWithTopOrderBy = "Feature not supported by database: DELETE statement with the TOP + ORDER BY clause." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Sybase.Error_JoinToDerivedTableWithTakeInvalid = "Feature not supported by database: database has issue with JOIN to limited recordset." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Sybase.Error_UpdateWithSkip = "Feature not supported by database: UPDATE statement with the Skip." -> string!
const LinqToDB.Internal.Common.ErrorHelper.Sybase.Error_UpdateWithTopOrderBy = "Feature not supported by database: UPDATE statement with the TOP + ORDER BY clause." -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.DriverAssemblyName = "ClickHouse.Driver" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.DriverClientNamespace = "ClickHouse.Driver.ADO" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.DriverProviderFactoryName = "ClickHouse.Driver" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.DriverProviderTypesNamespace = "ClickHouse.Driver.Numerics" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaAssemblyName = "Octonica.ClickHouseClient" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaClientNamespace = "Octonica.ClickHouseClient" -> string!
const LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaProviderFactoryName = "Octonica.ClickHouseClient" -> string!
const LinqToDB.Internal.DataProvider.DataProviderFactoryBase.ASSEMBLY_NAME = "assemblyName" -> string!
const LinqToDB.Internal.DataProvider.DataProviderFactoryBase.VERSION = "version" -> string!
const LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.CoreClientNamespace = "IBM.Data.DB2.Core" -> string!
const LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.NetFxClientNamespace = "IBM.Data.DB2" -> string!
const LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.ProviderFactoryName = "IBM.Data.DB2" -> string!
const LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.TypesNamespace = "IBM.Data.DB2Types" -> string!
const LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.GetProviderSpecificValueReaderMethod = "GetProviderSpecificValue" -> string!
const LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.AssemblyName = "FirebirdSql.Data.FirebirdClient" -> string!
const LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.ClientNamespace = "FirebirdSql.Data.FirebirdClient" -> string!
const LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.TypesNamespace = "FirebirdSql.Data.Types" -> string!
const LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxAssemblyName = "IBM.Data.Informix" -> string!
const LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxClientNamespace = "IBM.Data.Informix" -> string!
const LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxProviderFactoryName = "IBM.Data.Informix" -> string!
const LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxTypesNamespace = "IBM.Data.Informix" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlConnectorAssemblyName = "MySqlConnector" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlConnectorNamespace = "MySqlConnector" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlConnectorTypesNamespace = "MySqlConnector" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDataAssemblyName = "MySql.Data" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDataClientNamespace = "MySql.Data.MySqlClient" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDataTypesNamespace = "MySql.Data.Types" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.OldMySqlConnectorNamespace = "MySql.Data.MySqlClient" -> string!
const LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.OldMySqlConnectorTypesNamespace = "MySql.Data.Types" -> string!
const LinqToDB.Internal.DataProvider.OdbcProviderAdapter.AssemblyName = "System.Data.Odbc" -> string!
const LinqToDB.Internal.DataProvider.OdbcProviderAdapter.ClientNamespace = "System.Data.Odbc" -> string!
const LinqToDB.Internal.DataProvider.OleDbProviderAdapter.AssemblyName = "System.Data.OleDb" -> string!
const LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ClientNamespace = "System.Data.OleDb" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.DevartAssemblyName = "Devart.Data.Oracle" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.DevartClientNamespace = "Devart.Data.Oracle" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.DevartFactoryName = "Devart.Data.Oracle" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.DevartTypesNamespace = "Devart.Data.Oracle" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ManagedAssemblyName = "Oracle.ManagedDataAccess" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ManagedClientNamespace = "Oracle.ManagedDataAccess.Client" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ManagedTypesNamespace = "Oracle.ManagedDataAccess.Types" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.NativeAssemblyName = "Oracle.DataAccess" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.NativeClientNamespace = "Oracle.DataAccess.Client" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.NativeProviderFactoryName = "Oracle.DataAccess.Client" -> string!
const LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.NativeTypesNamespace = "Oracle.DataAccess.Types" -> string!
const LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.AssemblyName = "Npgsql" -> string!
const LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ClientNamespace = "Npgsql" -> string!
const LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.TypesNamespace = "NpgsqlTypes" -> string!
const LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.UnmanagedClientNamespace = "Sap.Data.Hana" -> string!
const LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.AssemblyName = "System.Data.SqlServerCe" -> string!
const LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.ClientNamespace = "System.Data.SqlServerCe" -> string!
const LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.ProviderFactoryName = "System.Data.SqlServerCe.4.0" -> string!
const LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.MicrosoftDataSQLiteAssemblyName = "Microsoft.Data.Sqlite" -> string!
const LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.MicrosoftDataSQLiteClientNamespace = "Microsoft.Data.Sqlite" -> string!
const LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.SystemDataSQLiteAssemblyName = "System.Data.SQLite" -> string!
const LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.SystemDataSQLiteClientNamespace = "System.Data.SQLite" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.MicrosoftAssemblyName = "Microsoft.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.MicrosoftClientNamespace = "Microsoft.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.MicrosoftProviderFactoryName = "Microsoft.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SystemAssemblyName = "System.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SystemClientNamespace = "System.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SystemProviderFactoryName = "System.Data.SqlClient" -> string!
const LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.ManagedAssemblyName = "AdoNetCore.AseClient" -> string!
const LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.ManagedClientNamespace = "AdoNetCore.AseClient" -> string!
const LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.NativeAssemblyName = "Sybase.AdoNet45.AseClient" -> string!
const LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.NativeClientNamespace = "Sybase.Data.AseClient" -> string!
const LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.NativeProviderFactoryName = "Sybase.Data.AseClient" -> string!
const LinqToDB.Internal.Expressions.ChangeTypeExpression.ChangeTypeType = (System.Linq.Expressions.ExpressionType)1000 -> System.Linq.Expressions.ExpressionType
const LinqToDB.Internal.SqlQuery.PseudoFunctions.CONVERT_FORMAT = "$Convert_Format$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.LENGTH = "$Length$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.MERGE_ACTION = "$merge_action$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.REMOVE_CONVERT = "$Convert_Remover$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.REPLACE = "$Replace$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.TO_LOWER = "$ToLower$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.TO_UPPER = "$ToUpper$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.TRY_CONVERT = "$TryConvert$" -> string!
const LinqToDB.Internal.SqlQuery.PseudoFunctions.TRY_CONVERT_OR_DEFAULT = "$TryConvertOrDefault$" -> string!
const LinqToDB.ProviderName.Access = "Access" -> string!
const LinqToDB.ProviderName.AccessAceOdbc = "Access.Ace.Odbc" -> string!
const LinqToDB.ProviderName.AccessAceOleDb = "Access.Ace.OleDb" -> string!
const LinqToDB.ProviderName.AccessJetOdbc = "Access.Jet.Odbc" -> string!
const LinqToDB.ProviderName.AccessJetOleDb = "Access.Jet.OleDb" -> string!
const LinqToDB.ProviderName.AccessOdbc = "Access.Odbc" -> string!
const LinqToDB.ProviderName.ClickHouse = "ClickHouse" -> string!
const LinqToDB.ProviderName.ClickHouseDriver = "ClickHouse.Driver" -> string!
const LinqToDB.ProviderName.ClickHouseMySql = "ClickHouse.MySql" -> string!
const LinqToDB.ProviderName.ClickHouseOctonica = "ClickHouse.Octonica" -> string!
const LinqToDB.ProviderName.DB2 = "DB2" -> string!
const LinqToDB.ProviderName.DB2LUW = "DB2.LUW" -> string!
const LinqToDB.ProviderName.DB2zOS = "DB2.z/OS" -> string!
const LinqToDB.ProviderName.Firebird = "Firebird" -> string!
const LinqToDB.ProviderName.Firebird25 = "Firebird.2.5" -> string!
const LinqToDB.ProviderName.Firebird3 = "Firebird.3" -> string!
const LinqToDB.ProviderName.Firebird4 = "Firebird.4" -> string!
const LinqToDB.ProviderName.Firebird5 = "Firebird.5" -> string!
const LinqToDB.ProviderName.Informix = "Informix" -> string!
const LinqToDB.ProviderName.InformixDB2 = "Informix.DB2" -> string!
const LinqToDB.ProviderName.MariaDB10 = "MariaDB.10" -> string!
const LinqToDB.ProviderName.MariaDB10MySqlConnector = "MariaDB.10.MySqlConnector" -> string!
const LinqToDB.ProviderName.MariaDB10MySqlData = "MariaDB.10.MySql.Data" -> string!
const LinqToDB.ProviderName.MySql = "MySql" -> string!
const LinqToDB.ProviderName.MySql57 = "MySql.5.7" -> string!
const LinqToDB.ProviderName.MySql57MySqlConnector = "MySql.5.7.MySqlConnector" -> string!
const LinqToDB.ProviderName.MySql57MySqlData = "MySql.5.7.MySql.Data" -> string!
const LinqToDB.ProviderName.MySql80 = "MySql.8.0" -> string!
const LinqToDB.ProviderName.MySql80MySqlConnector = "MySql.8.0.MySqlConnector" -> string!
const LinqToDB.ProviderName.MySql80MySqlData = "MySql.8.0.MySql.Data" -> string!
const LinqToDB.ProviderName.Oracle = "Oracle" -> string!
const LinqToDB.ProviderName.Oracle11Devart = "Oracle.11.Devart" -> string!
const LinqToDB.ProviderName.Oracle11Managed = "Oracle.11.Managed" -> string!
const LinqToDB.ProviderName.Oracle11Native = "Oracle.11.Native" -> string!
const LinqToDB.ProviderName.OracleDevart = "Oracle.Devart" -> string!
const LinqToDB.ProviderName.OracleManaged = "Oracle.Managed" -> string!
const LinqToDB.ProviderName.OracleNative = "Oracle.Native" -> string!
const LinqToDB.ProviderName.PostgreSQL = "PostgreSQL" -> string!
const LinqToDB.ProviderName.PostgreSQL15 = "PostgreSQL.15" -> string!
const LinqToDB.ProviderName.PostgreSQL18 = "PostgreSQL.18" -> string!
const LinqToDB.ProviderName.PostgreSQL92 = "PostgreSQL.9.2" -> string!
const LinqToDB.ProviderName.PostgreSQL93 = "PostgreSQL.9.3" -> string!
const LinqToDB.ProviderName.PostgreSQL95 = "PostgreSQL.9.5" -> string!
const LinqToDB.ProviderName.SapHana = "SapHana" -> string!
const LinqToDB.ProviderName.SapHanaNative = "SapHana.Native" -> string!
const LinqToDB.ProviderName.SapHanaOdbc = "SapHana.Odbc" -> string!
const LinqToDB.ProviderName.SqlCe = "SqlCe" -> string!
const LinqToDB.ProviderName.SQLite = "SQLite" -> string!
const LinqToDB.ProviderName.SQLiteClassic = "SQLite.Classic" -> string!
const LinqToDB.ProviderName.SQLiteMS = "SQLite.MS" -> string!
const LinqToDB.ProviderName.SqlServer = "SqlServer" -> string!
const LinqToDB.ProviderName.SqlServer2005 = "SqlServer.2005" -> string!
const LinqToDB.ProviderName.SqlServer2008 = "SqlServer.2008" -> string!
const LinqToDB.ProviderName.SqlServer2012 = "SqlServer.2012" -> string!
const LinqToDB.ProviderName.SqlServer2014 = "SqlServer.2014" -> string!
const LinqToDB.ProviderName.SqlServer2016 = "SqlServer.2016" -> string!
const LinqToDB.ProviderName.SqlServer2017 = "SqlServer.2017" -> string!
const LinqToDB.ProviderName.SqlServer2019 = "SqlServer.2019" -> string!
const LinqToDB.ProviderName.SqlServer2022 = "SqlServer.2022" -> string!
const LinqToDB.ProviderName.SqlServer2025 = "SqlServer.2025" -> string!
const LinqToDB.ProviderName.Sybase = "Sybase" -> string!
const LinqToDB.ProviderName.SybaseManaged = "Sybase.Managed" -> string!
const LinqToDB.Sql.SqlRow.MaxMemberCount = 10 -> int
const LinqToDB.SqlQuery.Precedence.Additive = 60 -> int
const LinqToDB.SqlQuery.Precedence.Bitwise = 40 -> int
const LinqToDB.SqlQuery.Precedence.Comparison = 50 -> int
const LinqToDB.SqlQuery.Precedence.Concatenate = 5 -> int
const LinqToDB.SqlQuery.Precedence.LogicalConjunction = 20 -> int
const LinqToDB.SqlQuery.Precedence.LogicalDisjunction = 10 -> int
const LinqToDB.SqlQuery.Precedence.LogicalNegation = 30 -> int
const LinqToDB.SqlQuery.Precedence.Multiplicative = 80 -> int
const LinqToDB.SqlQuery.Precedence.Primary = 100 -> int
const LinqToDB.SqlQuery.Precedence.Subtraction = 70 -> int
const LinqToDB.SqlQuery.Precedence.Unary = 90 -> int
const LinqToDB.SqlQuery.Precedence.Unknown = 0 -> int
LinqToDB.AnalyticFunctions
LinqToDB.AnalyticFunctions.IAggregateFunction<TR>
LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<TR>
LinqToDB.AnalyticFunctions.IAnalyticFunction<TR>
LinqToDB.AnalyticFunctions.IAnalyticFunction<TR>.Over() -> LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause<TR>!
LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR>
LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR>.Over() -> LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder<TR>!
LinqToDB.AnalyticFunctions.IAndExpected<TR>
LinqToDB.AnalyticFunctions.IAndExpected<TR>.And.get -> LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>!
LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR>
LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR>.CurrentRow.get -> LinqToDB.AnalyticFunctions.IAndExpected<TR>!
LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR>.UnboundedPreceding.get -> LinqToDB.AnalyticFunctions.IAndExpected<TR>!
LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR>.ValuePreceding<T>(T value) -> LinqToDB.AnalyticFunctions.IAndExpected<TR>!
LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>
LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>.Between.get -> LinqToDB.AnalyticFunctions.IBetweenStartExpected<TR>!
LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>.CurrentRow.get -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>.UnboundedPreceding.get -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>.ValuePreceding<T>(T value) -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>
LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>.OrderBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>.OrderBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>.OrderByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>.OrderByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR>
LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR>.OrderBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>!
LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR>.OrderByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>!
LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>
LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>.OrderBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>.OrderByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<TR>
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<TR>.WithinGroup.get -> LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>!
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR>
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR>.WithinGroup.get -> LinqToDB.AnalyticFunctions.INeedsOrderByOnly<TR>!
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<TR>
LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<TR>.WithinGroup.get -> LinqToDB.AnalyticFunctions.INeedSingleOrderByAndMaybeOverWithPartition<TR>!
LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>
LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>.ThenBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>.ThenBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>.ThenByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>.ThenByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedAcceptOverReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>
LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>.ThenBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>.ThenBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>.ThenByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>.ThenByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.Range.get -> LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.Rows.get -> LinqToDB.AnalyticFunctions.IBoundaryExpected<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.ThenBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.ThenBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.ThenByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>.ThenByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>
LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>.PartitionBy(params object?[]! expressions) -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder<TR>
LinqToDB.AnalyticFunctions.IOverMayHavePartitionAndOrder<TR>.PartitionBy(params object?[]! expressions) -> LinqToDB.AnalyticFunctions.IPartitionedMayHaveOrder<TR>!
LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded<TR>
LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded<TR>.Over() -> LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>!
LinqToDB.AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR>
LinqToDB.AnalyticFunctions.IPartitionedMayHaveOrder<TR>
LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause<TR>
LinqToDB.AnalyticFunctions.IReadyForFullAnalyticClause<TR>.PartitionBy(params object?[]! expressions) -> LinqToDB.AnalyticFunctions.IPartitionDefinedReadyForSortingWithWindow<TR>!
LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow<TR>
LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderBy<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey expr) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IReadyForSortingWithWindow<TR>.OrderByDesc<TKey>(TKey expr, LinqToDB.Sql.NullsPosition nulls) -> LinqToDB.AnalyticFunctions.IOrderedReadyToWindowing<TR>!
LinqToDB.AnalyticFunctions.IReadyToFunction<TR>
LinqToDB.AnalyticFunctions.IReadyToFunction<TR>.ToValue() -> TR
LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>
LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<TR>.Over() -> LinqToDB.AnalyticFunctions.IOverMayHavePartition<TR>!
LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>
LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>.CurrentRow.get -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>.UnboundedFollowing.get -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>.ValueFollowing<T>(T value) -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.AnalyticFunctions.ISecondBoundaryExpected<TR>.ValuePreceding<T>(T value) -> LinqToDB.AnalyticFunctions.IReadyToFunction<TR>!
LinqToDB.Async.AsyncExtensions
LinqToDB.Common.Array<T>
LinqToDB.Common.Compilation
LinqToDB.Common.Configuration
LinqToDB.Common.Configuration.BulkCopy
LinqToDB.Common.Configuration.Connection
LinqToDB.Common.Configuration.Data
LinqToDB.Common.Configuration.DataContext
LinqToDB.Common.Configuration.Linq
LinqToDB.Common.Configuration.LinqService
LinqToDB.Common.Configuration.QueryTrace
LinqToDB.Common.Configuration.RetryPolicy
LinqToDB.Common.Configuration.Sql
LinqToDB.Common.Configuration.SqlServer
LinqToDB.Common.Convert<TFrom, TTo>
LinqToDB.Common.Converter
LinqToDB.Common.ConvertTo<TTo>
LinqToDB.Common.LinqToDBConvertException
LinqToDB.Common.LinqToDBConvertException.ColumnName.get -> string?
LinqToDB.Common.LinqToDBConvertException.LinqToDBConvertException() -> void
LinqToDB.Common.LinqToDBConvertException.LinqToDBConvertException(string! message) -> void
LinqToDB.Common.LinqToDBConvertException.LinqToDBConvertException(string! message, System.Exception! innerException) -> void
LinqToDB.Common.LinqToDBConvertException.LinqToDBConvertException(System.Exception! innerException) -> void
LinqToDB.Common.Option<T>
LinqToDB.Common.Option<T>.HasValue.get -> bool
LinqToDB.Common.Option<T>.Option() -> void
LinqToDB.Common.Option<T>.Value.get -> T
LinqToDB.CompareNulls
LinqToDB.CompareNulls.LikeClr = 0 -> LinqToDB.CompareNulls
LinqToDB.CompareNulls.LikeSql = 1 -> LinqToDB.CompareNulls
LinqToDB.CompareNulls.LikeSqlExceptParameters = 2 -> LinqToDB.CompareNulls
LinqToDB.CompiledQuery
LinqToDB.CompiledQuery.CompiledQuery(System.Linq.Expressions.LambdaExpression! query) -> void
LinqToDB.CompiledQuery.Invoke<TDC, T1, T2, T3, T4, T5, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) -> TResult
LinqToDB.CompiledQuery.Invoke<TDC, T1, T2, T3, T4, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3, T4 arg4) -> TResult
LinqToDB.CompiledQuery.Invoke<TDC, T1, T2, T3, TResult>(TDC dataContext, T1 arg1, T2 arg2, T3 arg3) -> TResult
LinqToDB.CompiledQuery.Invoke<TDC, T1, T2, TResult>(TDC dataContext, T1 arg1, T2 arg2) -> TResult
LinqToDB.CompiledQuery.Invoke<TDC, T1, TResult>(TDC dataContext, T1 arg1) -> TResult
LinqToDB.CompiledQuery.Invoke<TDC, TResult>(TDC dataContext) -> TResult
LinqToDB.Concurrency.ConcurrencyExtensions
LinqToDB.Configuration.ConnectionStringSettings
LinqToDB.Configuration.ConnectionStringSettings.ConnectionString.get -> string!
LinqToDB.Configuration.ConnectionStringSettings.ConnectionStringSettings(string! name, string! connectionString, string! providerName) -> void
LinqToDB.Configuration.ConnectionStringSettings.IsGlobal.get -> bool
LinqToDB.Configuration.ConnectionStringSettings.Name.get -> string!
LinqToDB.Configuration.ConnectionStringSettings.ProviderName.get -> string!
LinqToDB.Configuration.IConnectionStringSettings
LinqToDB.Configuration.IConnectionStringSettings.ConnectionString.get -> string!
LinqToDB.Configuration.IConnectionStringSettings.IsGlobal.get -> bool
LinqToDB.Configuration.IConnectionStringSettings.Name.get -> string!
LinqToDB.Configuration.IConnectionStringSettings.ProviderName.get -> string?
LinqToDB.Configuration.IDataProviderSettings
LinqToDB.Configuration.IDataProviderSettings.Attributes.get -> System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>!
LinqToDB.Configuration.IDataProviderSettings.Default.get -> bool
LinqToDB.Configuration.IDataProviderSettings.Name.get -> string?
LinqToDB.Configuration.IDataProviderSettings.TypeName.get -> string!
LinqToDB.Configuration.ILinqToDBSettings
LinqToDB.Configuration.ILinqToDBSettings.ConnectionStrings.get -> System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings!>!
LinqToDB.Configuration.ILinqToDBSettings.DataProviders.get -> System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IDataProviderSettings!>!
LinqToDB.Configuration.ILinqToDBSettings.DefaultConfiguration.get -> string?
LinqToDB.Configuration.ILinqToDBSettings.DefaultDataProvider.get -> string?
LinqToDB.Configuration.LinqToDBSettings
LinqToDB.Configuration.LinqToDBSettings.ConnectionStrings.get -> System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings!>!
LinqToDB.Configuration.LinqToDBSettings.DataProviders.get -> System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IDataProviderSettings!>!
LinqToDB.Configuration.LinqToDBSettings.DefaultConfiguration.get -> string!
LinqToDB.Configuration.LinqToDBSettings.DefaultDataProvider.get -> string!
LinqToDB.Configuration.LinqToDBSettings.LinqToDBSettings(string! connectionName, string! providerName, string! connectionString) -> void
LinqToDB.Configuration.NamedValue
LinqToDB.Configuration.NamedValue.Name.get -> string!
LinqToDB.Configuration.NamedValue.Name.set -> void
LinqToDB.Configuration.NamedValue.NamedValue() -> void
LinqToDB.Configuration.NamedValue.Value.get -> string!
LinqToDB.Configuration.NamedValue.Value.set -> void
LinqToDB.Data.BulkCopyOptions
LinqToDB.Data.BulkCopyOptions.<Clone>$() -> LinqToDB.Data.BulkCopyOptions!
LinqToDB.Data.BulkCopyOptions.BulkCopyOptions() -> void
LinqToDB.Data.BulkCopyOptions.BulkCopyOptions(int? MaxBatchSize = null, int? BulkCopyTimeout = null, LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.Default, bool? CheckConstraints = null, bool? KeepIdentity = null, bool? TableLock = null, bool? KeepNulls = null, bool? FireTriggers = null, bool? UseInternalTransaction = null, string? ServerName = null, string? DatabaseName = null, string? SchemaName = null, string? TableName = null, LinqToDB.TableOptions TableOptions = LinqToDB.TableOptions.NotSet, int NotifyAfter = 0, System.Action<LinqToDB.Data.BulkCopyRowsCopied!>? RowsCopiedCallback = null, bool UseParameters = false, int? MaxParametersForBatch = null, int? MaxDegreeOfParallelism = null, bool WithoutSession = false) -> void
LinqToDB.Data.BulkCopyOptions.BulkCopyTimeout.get -> int?
LinqToDB.Data.BulkCopyOptions.BulkCopyTimeout.init -> void
LinqToDB.Data.BulkCopyOptions.BulkCopyType.get -> LinqToDB.Data.BulkCopyType
LinqToDB.Data.BulkCopyOptions.BulkCopyType.init -> void
LinqToDB.Data.BulkCopyOptions.CheckConstraints.get -> bool?
LinqToDB.Data.BulkCopyOptions.CheckConstraints.init -> void
LinqToDB.Data.BulkCopyOptions.DatabaseName.get -> string?
LinqToDB.Data.BulkCopyOptions.DatabaseName.init -> void
LinqToDB.Data.BulkCopyOptions.Deconstruct(out int? MaxBatchSize, out int? BulkCopyTimeout, out LinqToDB.Data.BulkCopyType BulkCopyType, out bool? CheckConstraints, out bool? KeepIdentity, out bool? TableLock, out bool? KeepNulls, out bool? FireTriggers, out bool? UseInternalTransaction, out string? ServerName, out string? DatabaseName, out string? SchemaName, out string? TableName, out LinqToDB.TableOptions TableOptions, out int NotifyAfter, out System.Action<LinqToDB.Data.BulkCopyRowsCopied!>? RowsCopiedCallback, out bool UseParameters, out int? MaxParametersForBatch, out int? MaxDegreeOfParallelism, out bool WithoutSession) -> void
LinqToDB.Data.BulkCopyOptions.Equals(LinqToDB.Data.BulkCopyOptions? other) -> bool
LinqToDB.Data.BulkCopyOptions.FireTriggers.get -> bool?
LinqToDB.Data.BulkCopyOptions.FireTriggers.init -> void
LinqToDB.Data.BulkCopyOptions.KeepIdentity.get -> bool?
LinqToDB.Data.BulkCopyOptions.KeepIdentity.init -> void
LinqToDB.Data.BulkCopyOptions.KeepNulls.get -> bool?
LinqToDB.Data.BulkCopyOptions.KeepNulls.init -> void
LinqToDB.Data.BulkCopyOptions.MaxBatchSize.get -> int?
LinqToDB.Data.BulkCopyOptions.MaxBatchSize.init -> void
LinqToDB.Data.BulkCopyOptions.MaxDegreeOfParallelism.get -> int?
LinqToDB.Data.BulkCopyOptions.MaxDegreeOfParallelism.init -> void
LinqToDB.Data.BulkCopyOptions.MaxParametersForBatch.get -> int?
LinqToDB.Data.BulkCopyOptions.MaxParametersForBatch.init -> void
LinqToDB.Data.BulkCopyOptions.NotifyAfter.get -> int
LinqToDB.Data.BulkCopyOptions.NotifyAfter.init -> void
LinqToDB.Data.BulkCopyOptions.RowsCopiedCallback.get -> System.Action<LinqToDB.Data.BulkCopyRowsCopied!>?
LinqToDB.Data.BulkCopyOptions.RowsCopiedCallback.init -> void
LinqToDB.Data.BulkCopyOptions.SchemaName.get -> string?
LinqToDB.Data.BulkCopyOptions.SchemaName.init -> void
LinqToDB.Data.BulkCopyOptions.ServerName.get -> string?
LinqToDB.Data.BulkCopyOptions.ServerName.init -> void
LinqToDB.Data.BulkCopyOptions.TableLock.get -> bool?
LinqToDB.Data.BulkCopyOptions.TableLock.init -> void
LinqToDB.Data.BulkCopyOptions.TableName.get -> string?
LinqToDB.Data.BulkCopyOptions.TableName.init -> void
LinqToDB.Data.BulkCopyOptions.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Data.BulkCopyOptions.TableOptions.init -> void
LinqToDB.Data.BulkCopyOptions.UseInternalTransaction.get -> bool?
LinqToDB.Data.BulkCopyOptions.UseInternalTransaction.init -> void
LinqToDB.Data.BulkCopyOptions.UseParameters.get -> bool
LinqToDB.Data.BulkCopyOptions.UseParameters.init -> void
LinqToDB.Data.BulkCopyOptions.WithoutSession.get -> bool
LinqToDB.Data.BulkCopyOptions.WithoutSession.init -> void
LinqToDB.Data.BulkCopyRowsCopied
LinqToDB.Data.BulkCopyRowsCopied.Abort.get -> bool
LinqToDB.Data.BulkCopyRowsCopied.Abort.set -> void
LinqToDB.Data.BulkCopyRowsCopied.BulkCopyRowsCopied() -> void
LinqToDB.Data.BulkCopyRowsCopied.RowsCopied.get -> long
LinqToDB.Data.BulkCopyRowsCopied.RowsCopied.set -> void
LinqToDB.Data.BulkCopyRowsCopied.StartTime.get -> System.DateTime
LinqToDB.Data.BulkCopyType
LinqToDB.Data.BulkCopyType.Default = 0 -> LinqToDB.Data.BulkCopyType
LinqToDB.Data.BulkCopyType.MultipleRows = 2 -> LinqToDB.Data.BulkCopyType
LinqToDB.Data.BulkCopyType.ProviderSpecific = 3 -> LinqToDB.Data.BulkCopyType
LinqToDB.Data.BulkCopyType.RowByRow = 1 -> LinqToDB.Data.BulkCopyType
LinqToDB.Data.CommandInfo
LinqToDB.Data.CommandInfo.CommandBehavior -> System.Data.CommandBehavior
LinqToDB.Data.CommandInfo.CommandInfo(LinqToDB.Data.DataConnection! dataConnection, string! commandText) -> void
LinqToDB.Data.CommandInfo.CommandInfo(LinqToDB.Data.DataConnection! dataConnection, string! commandText, LinqToDB.Data.DataParameter! parameter) -> void
LinqToDB.Data.CommandInfo.CommandInfo(LinqToDB.Data.DataConnection! dataConnection, string! commandText, object? parameters) -> void
LinqToDB.Data.CommandInfo.CommandInfo(LinqToDB.Data.DataConnection! dataConnection, string! commandText, params LinqToDB.Data.DataParameter![]! parameters) -> void
LinqToDB.Data.CommandInfo.CommandText -> string!
LinqToDB.Data.CommandInfo.CommandType -> System.Data.CommandType
LinqToDB.Data.CommandInfo.DataConnection -> LinqToDB.Data.DataConnection!
LinqToDB.Data.CommandInfo.Execute() -> int
LinqToDB.Data.CommandInfo.Execute<T>() -> T
LinqToDB.Data.CommandInfo.ExecuteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
LinqToDB.Data.CommandInfo.ExecuteAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
LinqToDB.Data.CommandInfo.ExecuteProc() -> int
LinqToDB.Data.CommandInfo.ExecuteProc<T>() -> T
LinqToDB.Data.CommandInfo.ExecuteProcAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
LinqToDB.Data.CommandInfo.ExecuteProcAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
LinqToDB.Data.CommandInfo.ExecuteReader() -> LinqToDB.Data.DataReader!
LinqToDB.Data.CommandInfo.ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.DataReaderAsync!>!
LinqToDB.Data.CommandInfo.ExecuteReaderProc() -> LinqToDB.Data.DataReader!
LinqToDB.Data.CommandInfo.ExecuteReaderProcAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.DataReaderAsync!>!
LinqToDB.Data.CommandInfo.Parameters -> LinqToDB.Data.DataParameter![]?
LinqToDB.Data.CommandInfo.Query<T>() -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.Query<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.Query<T>(T template) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
LinqToDB.Data.CommandInfo.QueryAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
LinqToDB.Data.CommandInfo.QueryForEachAsync<T>(System.Action<T>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.CommandInfo.QueryForEachAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Action<T>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.CommandInfo.QueryMultiple<T>() -> T!
LinqToDB.Data.CommandInfo.QueryMultipleAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T!>!
LinqToDB.Data.CommandInfo.QueryProc<T>() -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryProc<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryProc<T>(T template) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryProcAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
LinqToDB.Data.CommandInfo.QueryProcAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
LinqToDB.Data.CommandInfo.QueryProcAsync<T>(T template, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
LinqToDB.Data.CommandInfo.QueryProcMultiple<T>() -> T!
LinqToDB.Data.CommandInfo.QueryProcMultipleAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T!>!
LinqToDB.Data.CommandInfo.QueryToArrayAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.CommandInfo.QueryToArrayAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.CommandInfo.QueryToAsyncEnumerable<T>() -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryToAsyncEnumerable<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.CommandInfo.QueryToListAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.CommandInfo.QueryToListAsync<T>(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.ConnectionOptions
LinqToDB.Data.ConnectionOptions.<Clone>$() -> LinqToDB.Data.ConnectionOptions!
LinqToDB.Data.ConnectionOptions.ConfigurationString.get -> string?
LinqToDB.Data.ConnectionOptions.ConfigurationString.init -> void
LinqToDB.Data.ConnectionOptions.ConnectionFactory.get -> System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>?
LinqToDB.Data.ConnectionOptions.ConnectionFactory.init -> void
LinqToDB.Data.ConnectionOptions.ConnectionInterceptor.get -> LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor?
LinqToDB.Data.ConnectionOptions.ConnectionInterceptor.init -> void
LinqToDB.Data.ConnectionOptions.ConnectionOptions() -> void
LinqToDB.Data.ConnectionOptions.ConnectionOptions(string? ConfigurationString = null, string? ConnectionString = null, LinqToDB.DataProvider.IDataProvider? DataProvider = null, string? ProviderName = null, LinqToDB.Mapping.MappingSchema? MappingSchema = null, System.Data.Common.DbConnection? DbConnection = null, System.Data.Common.DbTransaction? DbTransaction = null, bool? DisposeConnection = null, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>? ConnectionFactory = null, System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider!>? DataProviderFactory = null, LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor? ConnectionInterceptor = null, System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>? OnEntityDescriptorCreated = null) -> void
LinqToDB.Data.ConnectionOptions.ConnectionString.get -> string?
LinqToDB.Data.ConnectionOptions.ConnectionString.init -> void
LinqToDB.Data.ConnectionOptions.DataProvider.get -> LinqToDB.DataProvider.IDataProvider?
LinqToDB.Data.ConnectionOptions.DataProvider.init -> void
LinqToDB.Data.ConnectionOptions.DataProviderFactory.get -> System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider!>?
LinqToDB.Data.ConnectionOptions.DataProviderFactory.init -> void
LinqToDB.Data.ConnectionOptions.DbConnection.get -> System.Data.Common.DbConnection?
LinqToDB.Data.ConnectionOptions.DbConnection.init -> void
LinqToDB.Data.ConnectionOptions.DbTransaction.get -> System.Data.Common.DbTransaction?
LinqToDB.Data.ConnectionOptions.DbTransaction.init -> void
LinqToDB.Data.ConnectionOptions.Deconstruct(out string? ConfigurationString, out string? ConnectionString, out LinqToDB.DataProvider.IDataProvider? DataProvider, out string? ProviderName, out LinqToDB.Mapping.MappingSchema? MappingSchema, out System.Data.Common.DbConnection? DbConnection, out System.Data.Common.DbTransaction? DbTransaction, out bool? DisposeConnection, out System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>? ConnectionFactory, out System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider!>? DataProviderFactory, out LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor? ConnectionInterceptor, out System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>? OnEntityDescriptorCreated) -> void
LinqToDB.Data.ConnectionOptions.DisposeConnection.get -> bool?
LinqToDB.Data.ConnectionOptions.DisposeConnection.init -> void
LinqToDB.Data.ConnectionOptions.Equals(LinqToDB.Data.ConnectionOptions? other) -> bool
LinqToDB.Data.ConnectionOptions.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Data.ConnectionOptions.MappingSchema.init -> void
LinqToDB.Data.ConnectionOptions.OnEntityDescriptorCreated.get -> System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>?
LinqToDB.Data.ConnectionOptions.OnEntityDescriptorCreated.init -> void
LinqToDB.Data.ConnectionOptions.ProviderName.get -> string?
LinqToDB.Data.ConnectionOptions.ProviderName.init -> void
LinqToDB.Data.DataConnection
LinqToDB.Data.DataConnection.AddInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.Data.DataConnection.AddMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.CheckAndThrowOnDisposed() -> void
LinqToDB.Data.DataConnection.CommandTimeout.get -> int
LinqToDB.Data.DataConnection.CommandTimeout.set -> void
LinqToDB.Data.DataConnection.ConfigurationString.get -> string?
LinqToDB.Data.DataConnection.Connection.get -> System.Data.Common.DbConnection!
LinqToDB.Data.DataConnection.ConnectionString.get -> string?
LinqToDB.Data.DataConnection.CreateCommand() -> System.Data.Common.DbCommand!
LinqToDB.Data.DataConnection.DataConnection() -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataOptions! options) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, bool disposeConnection) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, bool disposeConnection, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbTransaction! transaction) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbTransaction! transaction, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbTransaction! transaction, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbTransaction! transaction, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.DataProvider.IDataProvider! dataProvider, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(string! providerName, string! connectionString) -> void
LinqToDB.Data.DataConnection.DataConnection(string! providerName, string! connectionString, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(string! providerName, string! connectionString, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(string! providerName, string! connectionString, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(string? configurationString) -> void
LinqToDB.Data.DataConnection.DataConnection(string? configurationString, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Data.DataConnection.DataConnection(string? configurationString, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(string? configurationString, System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataConnection(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> void
LinqToDB.Data.DataConnection.DataProvider.get -> LinqToDB.DataProvider.IDataProvider!
LinqToDB.Data.DataConnection.Dispose() -> void
LinqToDB.Data.DataConnection.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Data.DataConnection.DisposeCommand() -> void
LinqToDB.Data.DataConnection.Disposed.get -> bool
LinqToDB.Data.DataConnection.EnsureConnectionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataConnection.InlineParameters.get -> bool
LinqToDB.Data.DataConnection.InlineParameters.set -> void
LinqToDB.Data.DataConnection.IsMarsEnabled.get -> bool
LinqToDB.Data.DataConnection.IsMarsEnabled.set -> void
LinqToDB.Data.DataConnection.LastQuery.get -> string?
LinqToDB.Data.DataConnection.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Data.DataConnection.NextQueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.Data.DataConnection.OnRemoveInterceptor.get -> System.Action<LinqToDB.Interceptors.IInterceptor!>?
LinqToDB.Data.DataConnection.OnRemoveInterceptor.set -> void
LinqToDB.Data.DataConnection.OnTraceConnection.get -> System.Action<LinqToDB.Data.TraceInfo!>!
LinqToDB.Data.DataConnection.OnTraceConnection.set -> void
LinqToDB.Data.DataConnection.OpenDbConnection() -> System.Data.Common.DbConnection!
LinqToDB.Data.DataConnection.OpenDbConnectionAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Data.Common.DbConnection!>!
LinqToDB.Data.DataConnection.Options.get -> LinqToDB.DataOptions!
LinqToDB.Data.DataConnection.QueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.Data.DataConnection.RemoveInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.Data.DataConnection.ResetCommandTimeout() -> void
LinqToDB.Data.DataConnection.ResetCommandTimeoutAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Data.DataConnection.RetryPolicy.get -> LinqToDB.Data.RetryPolicy.IRetryPolicy?
LinqToDB.Data.DataConnection.RetryPolicy.set -> void
LinqToDB.Data.DataConnection.Tag.get -> string?
LinqToDB.Data.DataConnection.Tag.set -> void
LinqToDB.Data.DataConnection.ThrowOnDisposed.get -> bool?
LinqToDB.Data.DataConnection.ThrowOnDisposed.set -> void
LinqToDB.Data.DataConnection.TraceSwitchConnection.get -> System.Diagnostics.TraceSwitch!
LinqToDB.Data.DataConnection.TraceSwitchConnection.set -> void
LinqToDB.Data.DataConnection.Transaction.get -> System.Data.Common.DbTransaction?
LinqToDB.Data.DataConnection.TryGetDbConnection() -> System.Data.Common.DbConnection?
LinqToDB.Data.DataConnection.UseMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.IDisposable?
LinqToDB.Data.DataConnection.UseOptions(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> System.IDisposable?
LinqToDB.Data.DataConnection.WriteTraceLineConnection.get -> System.Action<string!, string!, System.Diagnostics.TraceLevel>!
LinqToDB.Data.DataConnection.WriteTraceLineConnection.set -> void
LinqToDB.Data.DataConnectionExtensions
LinqToDB.Data.DataConnectionTransaction
LinqToDB.Data.DataConnectionTransaction.Commit() -> void
LinqToDB.Data.DataConnectionTransaction.CommitAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataConnectionTransaction.DataConnection.get -> LinqToDB.Data.DataConnection!
LinqToDB.Data.DataConnectionTransaction.DataConnectionTransaction(LinqToDB.Data.DataConnection! dataConnection) -> void
LinqToDB.Data.DataConnectionTransaction.Dispose() -> void
LinqToDB.Data.DataConnectionTransaction.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Data.DataConnectionTransaction.Rollback() -> void
LinqToDB.Data.DataConnectionTransaction.RollbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataParameter
LinqToDB.Data.DataParameter.DataParameter() -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value) -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.DataType dataType) -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.DataType dataType, int size) -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.DataType dataType, string? dbType) -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, LinqToDB.DbDataType dbDataType) -> void
LinqToDB.Data.DataParameter.DataParameter(string? name, object? value, string! dbType) -> void
LinqToDB.Data.DataParameter.DataType.get -> LinqToDB.DataType
LinqToDB.Data.DataParameter.DataType.set -> void
LinqToDB.Data.DataParameter.DbDataType.get -> LinqToDB.DbDataType
LinqToDB.Data.DataParameter.DbDataType.set -> void
LinqToDB.Data.DataParameter.DbType.get -> string?
LinqToDB.Data.DataParameter.DbType.set -> void
LinqToDB.Data.DataParameter.Direction.get -> System.Data.ParameterDirection?
LinqToDB.Data.DataParameter.Direction.set -> void
LinqToDB.Data.DataParameter.IsArray.get -> bool
LinqToDB.Data.DataParameter.IsArray.set -> void
LinqToDB.Data.DataParameter.Name.get -> string?
LinqToDB.Data.DataParameter.Name.set -> void
LinqToDB.Data.DataParameter.Output.get -> System.Data.Common.DbParameter?
LinqToDB.Data.DataParameter.Precision.get -> int?
LinqToDB.Data.DataParameter.Precision.set -> void
LinqToDB.Data.DataParameter.Scale.get -> int?
LinqToDB.Data.DataParameter.Scale.set -> void
LinqToDB.Data.DataParameter.Size.get -> int?
LinqToDB.Data.DataParameter.Size.set -> void
LinqToDB.Data.DataParameter.Value.get -> object?
LinqToDB.Data.DataParameter.Value.set -> void
LinqToDB.Data.DataReader
LinqToDB.Data.DataReader.CommandInfo.get -> LinqToDB.Data.CommandInfo?
LinqToDB.Data.DataReader.DataReader(LinqToDB.Data.CommandInfo! commandInfo, LinqToDB.Data.DataReaderWrapper! dataReader) -> void
LinqToDB.Data.DataReader.Dispose() -> void
LinqToDB.Data.DataReader.Execute<T>() -> T
LinqToDB.Data.DataReader.Query<T>() -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.DataReader.Query<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.DataReader.Query<T>(T template) -> System.Collections.Generic.IEnumerable<T>!
LinqToDB.Data.DataReader.Reader.get -> System.Data.Common.DbDataReader?
LinqToDB.Data.DataReaderAsync
LinqToDB.Data.DataReaderAsync.CommandInfo.get -> LinqToDB.Data.CommandInfo?
LinqToDB.Data.DataReaderAsync.DataReaderAsync(LinqToDB.Data.CommandInfo! commandInfo, LinqToDB.Data.DataReaderWrapper! dataReader) -> void
LinqToDB.Data.DataReaderAsync.Dispose() -> void
LinqToDB.Data.DataReaderAsync.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Data.DataReaderAsync.ExecuteForEachAsync<T>() -> System.Threading.Tasks.Task<T>!
LinqToDB.Data.DataReaderAsync.ExecuteForEachAsync<T>(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(System.Action<T>! action) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(System.Action<T>! action, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Action<T>! action) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Action<T>! action, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(T template, System.Action<T>! action) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryForEachAsync<T>(T template, System.Action<T>! action, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>() -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>(T template) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToArrayAsync<T>(T template, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>() -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataReaderAsync.QueryToAsyncEnumerable<T>(T template) -> System.Collections.Generic.IAsyncEnumerable<T>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>() -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>(System.Func<System.Data.Common.DbDataReader!, T>! objectReader, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>(T template) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.QueryToListAsync<T>(T template, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
LinqToDB.Data.DataReaderAsync.Reader.get -> System.Data.Common.DbDataReader?
LinqToDB.Data.DataReaderWrapper
LinqToDB.Data.DataReaderWrapper.DataReader.get -> System.Data.Common.DbDataReader?
LinqToDB.Data.DataReaderWrapper.DataReaderWrapper(System.Data.Common.DbDataReader! dataReader) -> void
LinqToDB.Data.DataReaderWrapper.Dispose() -> void
LinqToDB.Data.DataReaderWrapper.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Data.LegacyMergeExtensions
LinqToDB.Data.QueryTraceOptions
LinqToDB.Data.QueryTraceOptions.<Clone>$() -> LinqToDB.Data.QueryTraceOptions!
LinqToDB.Data.QueryTraceOptions.Deconstruct(out System.Diagnostics.TraceLevel? TraceLevel, out System.Action<LinqToDB.Data.TraceInfo!>? OnTrace, out System.Action<string!, string!, System.Diagnostics.TraceLevel>? WriteTrace, out System.Diagnostics.TraceSwitch? TraceSwitch) -> void
LinqToDB.Data.QueryTraceOptions.Equals(LinqToDB.Data.QueryTraceOptions? other) -> bool
LinqToDB.Data.QueryTraceOptions.OnTrace.get -> System.Action<LinqToDB.Data.TraceInfo!>?
LinqToDB.Data.QueryTraceOptions.OnTrace.init -> void
LinqToDB.Data.QueryTraceOptions.QueryTraceOptions() -> void
LinqToDB.Data.QueryTraceOptions.QueryTraceOptions(System.Diagnostics.TraceLevel? TraceLevel = null, System.Action<LinqToDB.Data.TraceInfo!>? OnTrace = null, System.Action<string!, string!, System.Diagnostics.TraceLevel>? WriteTrace = null, System.Diagnostics.TraceSwitch? TraceSwitch = null) -> void
LinqToDB.Data.QueryTraceOptions.TraceLevel.get -> System.Diagnostics.TraceLevel?
LinqToDB.Data.QueryTraceOptions.TraceLevel.init -> void
LinqToDB.Data.QueryTraceOptions.TraceSwitch.get -> System.Diagnostics.TraceSwitch?
LinqToDB.Data.QueryTraceOptions.TraceSwitch.init -> void
LinqToDB.Data.QueryTraceOptions.WriteTrace.get -> System.Action<string!, string!, System.Diagnostics.TraceLevel>?
LinqToDB.Data.QueryTraceOptions.WriteTrace.init -> void
LinqToDB.Data.RetryPolicy.IRetryPolicy
LinqToDB.Data.RetryPolicy.IRetryPolicy.Execute(System.Action! operation) -> void
LinqToDB.Data.RetryPolicy.IRetryPolicy.Execute<TResult>(System.Func<TResult>! operation) -> TResult
LinqToDB.Data.RetryPolicy.IRetryPolicy.ExecuteAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! operation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.RetryPolicy.IRetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! operation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
LinqToDB.Data.RetryPolicy.RetryLimitExceededException
LinqToDB.Data.RetryPolicy.RetryLimitExceededException.RetryLimitExceededException() -> void
LinqToDB.Data.RetryPolicy.RetryLimitExceededException.RetryLimitExceededException(System.Exception! innerException) -> void
LinqToDB.Data.RetryPolicy.RetryPolicyBase
LinqToDB.Data.RetryPolicy.RetryPolicyBase.Coefficient.get -> System.TimeSpan
LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExecuteAsync(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task!>! operation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExponentialBase.get -> double
LinqToDB.Data.RetryPolicy.RetryPolicyBase.RandomFactor.get -> double
LinqToDB.Data.RetryPolicy.RetryPolicyBase.RetryPolicyBase(int maxRetryCount, System.TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, System.TimeSpan coefficient) -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.<Clone>$() -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Coefficient.get -> System.TimeSpan
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Coefficient.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Deconstruct(out LinqToDB.Data.RetryPolicy.IRetryPolicy? RetryPolicy, out System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>? Factory, out int MaxRetryCount, out System.TimeSpan MaxDelay, out double RandomFactor, out double ExponentialBase, out System.TimeSpan Coefficient) -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Equals(LinqToDB.Data.RetryPolicy.RetryPolicyOptions? other) -> bool
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.ExponentialBase.get -> double
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.ExponentialBase.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Factory.get -> System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>?
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Factory.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.MaxDelay.get -> System.TimeSpan
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.MaxDelay.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.MaxRetryCount.get -> int
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.MaxRetryCount.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RandomFactor.get -> double
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RandomFactor.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RetryPolicy.get -> LinqToDB.Data.RetryPolicy.IRetryPolicy?
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RetryPolicy.init -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RetryPolicyOptions() -> void
LinqToDB.Data.RetryPolicy.RetryPolicyOptions.RetryPolicyOptions(LinqToDB.Data.RetryPolicy.IRetryPolicy? RetryPolicy = null, System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>? Factory = null, int MaxRetryCount = 0, System.TimeSpan MaxDelay = default(System.TimeSpan), double RandomFactor = 0, double ExponentialBase = 0, System.TimeSpan Coefficient = default(System.TimeSpan)) -> void
LinqToDB.Data.TraceInfo
LinqToDB.Data.TraceInfo.Command.get -> System.Data.Common.DbCommand?
LinqToDB.Data.TraceInfo.Command.set -> void
LinqToDB.Data.TraceInfo.CommandText.get -> string?
LinqToDB.Data.TraceInfo.CommandText.set -> void
LinqToDB.Data.TraceInfo.DataConnection.get -> LinqToDB.Data.DataConnection!
LinqToDB.Data.TraceInfo.Exception.get -> System.Exception?
LinqToDB.Data.TraceInfo.Exception.set -> void
LinqToDB.Data.TraceInfo.ExecutionTime.get -> System.TimeSpan?
LinqToDB.Data.TraceInfo.ExecutionTime.set -> void
LinqToDB.Data.TraceInfo.IsAsync.get -> bool
LinqToDB.Data.TraceInfo.MapperExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Data.TraceInfo.MapperExpression.set -> void
LinqToDB.Data.TraceInfo.Operation.get -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceInfo.RecordsAffected.get -> int?
LinqToDB.Data.TraceInfo.RecordsAffected.set -> void
LinqToDB.Data.TraceInfo.SqlText.get -> string!
LinqToDB.Data.TraceInfo.StartTime.get -> System.DateTime?
LinqToDB.Data.TraceInfo.StartTime.set -> void
LinqToDB.Data.TraceInfo.TraceInfo(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.TraceInfoStep traceInfoStep, LinqToDB.Data.TraceOperation operation, bool isAsync) -> void
LinqToDB.Data.TraceInfo.TraceInfoStep.get -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfo.TraceLevel.get -> System.Diagnostics.TraceLevel
LinqToDB.Data.TraceInfo.TraceLevel.set -> void
LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfoStep.AfterExecute = 1 -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfoStep.BeforeExecute = 0 -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfoStep.Completed = 4 -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfoStep.Error = 2 -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceInfoStep.MapperCreated = 3 -> LinqToDB.Data.TraceInfoStep
LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.BeginTransaction = 7 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.BuildMapping = 5 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.BulkCopy = 3 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.CommitTransaction = 8 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.DisposeQuery = 6 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.DisposeTransaction = 10 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.ExecuteNonQuery = 0 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.ExecuteReader = 1 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.ExecuteScalar = 2 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.Open = 4 -> LinqToDB.Data.TraceOperation
LinqToDB.Data.TraceOperation.RollbackTransaction = 9 -> LinqToDB.Data.TraceOperation
LinqToDB.DataContext
LinqToDB.DataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.DataContext.AddMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.DataContext.CloseAfterUse.get -> bool
LinqToDB.DataContext.CloseAfterUse.set -> void
LinqToDB.DataContext.CommandTimeout.get -> int
LinqToDB.DataContext.CommandTimeout.set -> void
LinqToDB.DataContext.ConfigurationString.get -> string?
LinqToDB.DataContext.ConnectionString.get -> string?
LinqToDB.DataContext.ContextName.get -> string!
LinqToDB.DataContext.DataContext() -> void
LinqToDB.DataContext.DataContext(LinqToDB.DataOptions! options) -> void
LinqToDB.DataContext.DataContext(LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString) -> void
LinqToDB.DataContext.DataContext(string! providerName, string! connectionString) -> void
LinqToDB.DataContext.DataContext(string? configurationString) -> void
LinqToDB.DataContext.DataProvider.get -> LinqToDB.DataProvider.IDataProvider!
LinqToDB.DataContext.Dispose() -> void
LinqToDB.DataContext.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.DataContext.InlineParameters.get -> bool
LinqToDB.DataContext.InlineParameters.set -> void
LinqToDB.DataContext.IsMarsEnabled.get -> bool
LinqToDB.DataContext.IsMarsEnabled.set -> void
LinqToDB.DataContext.KeepConnectionAlive.get -> bool
LinqToDB.DataContext.KeepConnectionAlive.set -> void
LinqToDB.DataContext.LastQuery.get -> string?
LinqToDB.DataContext.LastQuery.set -> void
LinqToDB.DataContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.DataContext.NextQueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.DataContext.OnTraceConnection.get -> System.Action<LinqToDB.Data.TraceInfo!>?
LinqToDB.DataContext.OnTraceConnection.set -> void
LinqToDB.DataContext.Options.get -> LinqToDB.DataOptions!
LinqToDB.DataContext.QueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.DataContext.RemoveInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.DataContext.ResetCommandTimeout() -> void
LinqToDB.DataContext.ResetCommandTimeoutAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.DataContext.SetKeepConnectionAlive(bool keepAlive) -> void
LinqToDB.DataContext.SetKeepConnectionAliveAsync(bool keepAlive) -> System.Threading.Tasks.Task!
LinqToDB.DataContext.UseMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.IDisposable?
LinqToDB.DataContext.UseOptions(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> System.IDisposable?
LinqToDB.DataContextOptions
LinqToDB.DataContextOptions.<Clone>$() -> LinqToDB.DataContextOptions!
LinqToDB.DataContextOptions.CommandTimeout.get -> int?
LinqToDB.DataContextOptions.CommandTimeout.init -> void
LinqToDB.DataContextOptions.DataContextOptions() -> void
LinqToDB.DataContextOptions.DataContextOptions(int? CommandTimeout = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors = null, System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>? MemberTranslators = null) -> void
LinqToDB.DataContextOptions.Deconstruct(out int? CommandTimeout, out System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>? Interceptors, out System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>? MemberTranslators) -> void
LinqToDB.DataContextOptions.Equals(LinqToDB.DataContextOptions? other) -> bool
LinqToDB.DataContextOptions.Interceptors.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Interceptors.IInterceptor!>?
LinqToDB.DataContextOptions.Interceptors.init -> void
LinqToDB.DataContextOptions.MemberTranslators.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Linq.Translation.IMemberTranslator!>?
LinqToDB.DataContextOptions.MemberTranslators.init -> void
LinqToDB.DataContextTransaction
LinqToDB.DataContextTransaction.BeginTransaction() -> void
LinqToDB.DataContextTransaction.BeginTransaction(System.Data.IsolationLevel level) -> void
LinqToDB.DataContextTransaction.BeginTransactionAsync(System.Data.IsolationLevel level, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.DataContextTransaction.BeginTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.DataContextTransaction.CommitTransaction() -> void
LinqToDB.DataContextTransaction.CommitTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.DataContextTransaction.DataContext.get -> LinqToDB.DataContext!
LinqToDB.DataContextTransaction.DataContext.set -> void
LinqToDB.DataContextTransaction.DataContextTransaction(LinqToDB.DataContext! dataContext) -> void
LinqToDB.DataContextTransaction.Dispose() -> void
LinqToDB.DataContextTransaction.RollbackTransaction() -> void
LinqToDB.DataContextTransaction.RollbackTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.DataExtensions
LinqToDB.DataOptions
LinqToDB.DataOptions.Apply(LinqToDB.Data.DataConnection! dataConnection) -> void
LinqToDB.DataOptions.Apply(LinqToDB.DataContext! dataContext) -> void
LinqToDB.DataOptions.Apply(LinqToDB.Remote.RemoteDataContextBase! dataContext) -> void
LinqToDB.DataOptions.BulkCopyOptions.get -> LinqToDB.Data.BulkCopyOptions!
LinqToDB.DataOptions.ConnectionOptions.get -> LinqToDB.Data.ConnectionOptions!
LinqToDB.DataOptions.DataContextOptions.get -> LinqToDB.DataContextOptions!
LinqToDB.DataOptions.DataOptions() -> void
LinqToDB.DataOptions.DataOptions(LinqToDB.Data.ConnectionOptions! connectionOptions) -> void
LinqToDB.DataOptions.Equals(LinqToDB.DataOptions? other) -> bool
LinqToDB.DataOptions.LinqOptions.get -> LinqToDB.LinqOptions!
LinqToDB.DataOptions.Reapply(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.DataOptions! previousOptions) -> System.Action?
LinqToDB.DataOptions.Reapply(LinqToDB.DataContext! dataContext, LinqToDB.DataOptions! previousOptions) -> System.Action?
LinqToDB.DataOptions.Reapply(LinqToDB.Remote.RemoteDataContextBase! dataContext, LinqToDB.DataOptions! previousOptions) -> System.Action?
LinqToDB.DataOptions.RetryPolicyOptions.get -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
LinqToDB.DataOptions.SqlOptions.get -> LinqToDB.SqlOptions!
LinqToDB.DataOptions<T>
LinqToDB.DataOptions<T>.DataOptions(LinqToDB.DataOptions! options) -> void
LinqToDB.DataOptions<T>.Options.get -> LinqToDB.DataOptions!
LinqToDB.DataOptionsExtensions
LinqToDB.DataProvider.Access.AccessHints
LinqToDB.DataProvider.Access.AccessHints.Query
LinqToDB.DataProvider.Access.AccessOptions
LinqToDB.DataProvider.Access.AccessOptions.AccessOptions() -> void
LinqToDB.DataProvider.Access.AccessOptions.AccessOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows) -> void
LinqToDB.DataProvider.Access.AccessOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.DataProvider.Access.AccessOptions.Equals(LinqToDB.DataProvider.Access.AccessOptions? other) -> bool
LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.ODBC = 2 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessProvider.OleDb = 1 -> LinqToDB.DataProvider.Access.AccessProvider
LinqToDB.DataProvider.Access.AccessSpecificExtensions
LinqToDB.DataProvider.Access.AccessTools
LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.Ace = 2 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.AutoDetect = 0 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.AccessVersion.Jet = 1 -> LinqToDB.DataProvider.Access.AccessVersion
LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>
LinqToDB.DataProvider.Access.IAccessSpecificTable<TSource>
LinqToDB.DataProvider.ClickHouse.ClickHouseHints
LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Join
LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Query
LinqToDB.DataProvider.ClickHouse.ClickHouseHints.Table
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.ClickHouseOptions() -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.ClickHouseOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.ProviderSpecific, bool UseStandardCompatibleAggregates = false) -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool UseStandardCompatibleAggregates) -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.Equals(LinqToDB.DataProvider.ClickHouse.ClickHouseOptions? other) -> bool
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.UseStandardCompatibleAggregates.get -> bool
LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.UseStandardCompatibleAggregates.init -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect = 0 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.ClickHouseDriver = 2 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.MySqlConnector = 3 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.Octonica = 1 -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy
LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.ClickHouseRetryPolicy() -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.ClickHouseRetryPolicy(int maxRetryCount) -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.ClickHouseRetryPolicy(int maxRetryCount, System.TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, System.TimeSpan coefficient, System.Collections.Generic.ICollection<int>? errorNumbersToAdd) -> void
LinqToDB.DataProvider.ClickHouse.ClickHouseSpecificExtensions
LinqToDB.DataProvider.ClickHouse.ClickHouseTools
LinqToDB.DataProvider.ClickHouse.ClickHouseTransientExceptionDetector
LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>
LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>
LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode
LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.Auto = 2 -> LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode
LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.None = 0 -> LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode
LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.Quote = 1 -> LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode
LinqToDB.DataProvider.DB2.DB2Options
LinqToDB.DataProvider.DB2.DB2Options.DB2Options() -> void
LinqToDB.DataProvider.DB2.DB2Options.DB2Options(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode IdentifierQuoteMode = LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode.Auto) -> void
LinqToDB.DataProvider.DB2.DB2Options.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode IdentifierQuoteMode) -> void
LinqToDB.DataProvider.DB2.DB2Options.Equals(LinqToDB.DataProvider.DB2.DB2Options? other) -> bool
LinqToDB.DataProvider.DB2.DB2Options.IdentifierQuoteMode.get -> LinqToDB.DataProvider.DB2.DB2IdentifierQuoteMode
LinqToDB.DataProvider.DB2.DB2Options.IdentifierQuoteMode.init -> void
LinqToDB.DataProvider.DB2.DB2Tools
LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.DB2.DB2Version.AutoDetect = 0 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.DB2.DB2Version.LUW = 1 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.DB2.DB2Version.zOS = 2 -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.DataProvider.Firebird.FirebirdExtensions
LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode
LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Auto = 2 -> LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode
LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.None = 0 -> LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode
LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Quote = 1 -> LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode
LinqToDB.DataProvider.Firebird.FirebirdOptions
LinqToDB.DataProvider.Firebird.FirebirdOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode IdentifierQuoteMode, out bool IsLiteralEncodingSupported) -> void
LinqToDB.DataProvider.Firebird.FirebirdOptions.Equals(LinqToDB.DataProvider.Firebird.FirebirdOptions? other) -> bool
LinqToDB.DataProvider.Firebird.FirebirdOptions.FirebirdOptions() -> void
LinqToDB.DataProvider.Firebird.FirebirdOptions.FirebirdOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode IdentifierQuoteMode = LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Auto, bool IsLiteralEncodingSupported = true) -> void
LinqToDB.DataProvider.Firebird.FirebirdOptions.IdentifierQuoteMode.get -> LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode
LinqToDB.DataProvider.Firebird.FirebirdOptions.IdentifierQuoteMode.init -> void
LinqToDB.DataProvider.Firebird.FirebirdOptions.IsLiteralEncodingSupported.get -> bool
LinqToDB.DataProvider.Firebird.FirebirdOptions.IsLiteralEncodingSupported.init -> void
LinqToDB.DataProvider.Firebird.FirebirdTools
LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect = 0 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v25 = 1 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v3 = 2 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v4 = 3 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.FirebirdVersion.v5 = 4 -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.DataProvider.Firebird.IFirebirdExtensions
LinqToDB.DataProvider.IDataProvider
LinqToDB.DataProvider.IDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.DataProvider.IDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.DataProvider.IDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.DataProvider.IDataProvider.ConnectionNamespace.get -> string?
LinqToDB.DataProvider.IDataProvider.ConvertParameterType(System.Type! type, LinqToDB.DbDataType dataType) -> System.Type!
LinqToDB.DataProvider.IDataProvider.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.DataProvider.IDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
LinqToDB.DataProvider.IDataProvider.DataReaderType.get -> System.Type!
LinqToDB.DataProvider.IDataProvider.DisposeCommand(System.Data.Common.DbCommand! command) -> void
LinqToDB.DataProvider.IDataProvider.DisposeCommandAsync(System.Data.Common.DbCommand! command) -> System.Threading.Tasks.ValueTask
LinqToDB.DataProvider.IDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> LinqToDB.Internal.DataProvider.IExecutionScope?
LinqToDB.DataProvider.IDataProvider.GetCommandBehavior(System.Data.CommandBehavior commandBehavior) -> System.Data.CommandBehavior
LinqToDB.DataProvider.IDataProvider.GetConnectionInfo(LinqToDB.Data.DataConnection! dataConnection, string! parameterName) -> object?
LinqToDB.DataProvider.IDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
LinqToDB.DataProvider.IDataProvider.GetReaderExpression(System.Data.Common.DbDataReader! reader, int idx, System.Linq.Expressions.Expression! readerExpression, System.Type! toType) -> System.Linq.Expressions.Expression!
LinqToDB.DataProvider.IDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
LinqToDB.DataProvider.IDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
LinqToDB.DataProvider.IDataProvider.ID.get -> int
LinqToDB.DataProvider.IDataProvider.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
LinqToDB.DataProvider.IDataProvider.InitContext(LinqToDB.IDataContext! dataContext) -> void
LinqToDB.DataProvider.IDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
LinqToDB.DataProvider.IDataProvider.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.DataProvider.IDataProvider.Name.get -> string!
LinqToDB.DataProvider.IDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
LinqToDB.DataProvider.IDataProvider.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.DataProvider.IDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
LinqToDB.DataProvider.IDataProvider.TransactionsSupported.get -> bool
LinqToDB.DataProvider.IDataProviderFactory
LinqToDB.DataProvider.IDataProviderFactory.GetDataProvider(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> LinqToDB.DataProvider.IDataProvider!
LinqToDB.DataProvider.Informix.InformixOptions
LinqToDB.DataProvider.Informix.InformixOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool ExplicitFractionalSecondsSeparator) -> void
LinqToDB.DataProvider.Informix.InformixOptions.Equals(LinqToDB.DataProvider.Informix.InformixOptions? other) -> bool
LinqToDB.DataProvider.Informix.InformixOptions.ExplicitFractionalSecondsSeparator.get -> bool
LinqToDB.DataProvider.Informix.InformixOptions.ExplicitFractionalSecondsSeparator.init -> void
LinqToDB.DataProvider.Informix.InformixOptions.InformixOptions() -> void
LinqToDB.DataProvider.Informix.InformixOptions.InformixOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.ProviderSpecific, bool ExplicitFractionalSecondsSeparator = true) -> void
LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.DB2 = 2 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixProvider.Informix = 1 -> LinqToDB.DataProvider.Informix.InformixProvider
LinqToDB.DataProvider.Informix.InformixTools
LinqToDB.DataProvider.MySql.IMySqlExtensions
LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>
LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>
LinqToDB.DataProvider.MySql.MySqlExtensions
LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier
LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.Boolean = 1 -> LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier
LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.NaturalLanguage = 0 -> LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier
LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier.WithQueryExpansion = 2 -> LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier
LinqToDB.DataProvider.MySql.MySqlHints
LinqToDB.DataProvider.MySql.MySqlHints.Query
LinqToDB.DataProvider.MySql.MySqlHints.SubQuery
LinqToDB.DataProvider.MySql.MySqlHints.Table
LinqToDB.DataProvider.MySql.MySqlOptions
LinqToDB.DataProvider.MySql.MySqlOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.DataProvider.MySql.MySqlOptions.Equals(LinqToDB.DataProvider.MySql.MySqlOptions? other) -> bool
LinqToDB.DataProvider.MySql.MySqlOptions.MySqlOptions() -> void
LinqToDB.DataProvider.MySql.MySqlOptions.MySqlOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows) -> void
LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect = 0 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.MySqlConnector = 2 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlProvider.MySqlData = 1 -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.DataProvider.MySql.MySqlSpecificExtensions
LinqToDB.DataProvider.MySql.MySqlTools
LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect = 0 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MariaDB10 = 3 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MySql57 = 1 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.MySql.MySqlVersion.MySql80 = 2 -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertAll = 0 -> LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertDual = 2 -> LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertInto = 1 -> LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>
LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>
LinqToDB.DataProvider.Oracle.OracleHints
LinqToDB.DataProvider.Oracle.OracleHints.Hint
LinqToDB.DataProvider.Oracle.OracleOptions
LinqToDB.DataProvider.Oracle.OracleOptions.AlternativeBulkCopy.get -> LinqToDB.DataProvider.Oracle.AlternativeBulkCopy
LinqToDB.DataProvider.Oracle.OracleOptions.AlternativeBulkCopy.init -> void
LinqToDB.DataProvider.Oracle.OracleOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out LinqToDB.DataProvider.Oracle.AlternativeBulkCopy AlternativeBulkCopy, out bool DontEscapeLowercaseIdentifiers) -> void
LinqToDB.DataProvider.Oracle.OracleOptions.DontEscapeLowercaseIdentifiers.get -> bool
LinqToDB.DataProvider.Oracle.OracleOptions.DontEscapeLowercaseIdentifiers.init -> void
LinqToDB.DataProvider.Oracle.OracleOptions.Equals(LinqToDB.DataProvider.Oracle.OracleOptions? other) -> bool
LinqToDB.DataProvider.Oracle.OracleOptions.OracleOptions() -> void
LinqToDB.DataProvider.Oracle.OracleOptions.OracleOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, LinqToDB.DataProvider.Oracle.AlternativeBulkCopy AlternativeBulkCopy = LinqToDB.DataProvider.Oracle.AlternativeBulkCopy.InsertAll, bool DontEscapeLowercaseIdentifiers = false) -> void
LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Devart = 3 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Managed = 1 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleProvider.Native = 2 -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.DataProvider.Oracle.OracleSpecificExtensions
LinqToDB.DataProvider.Oracle.OracleTools
LinqToDB.DataProvider.Oracle.OracleVersion
LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect = 0 -> LinqToDB.DataProvider.Oracle.OracleVersion
LinqToDB.DataProvider.Oracle.OracleVersion.v11 = 11 -> LinqToDB.DataProvider.Oracle.OracleVersion
LinqToDB.DataProvider.Oracle.OracleVersion.v12 = 12 -> LinqToDB.DataProvider.Oracle.OracleVersion
LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions
LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>
LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificTable<TSource>
LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions
LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Ordinality<T>
LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Ordinality<T>.Index -> long
LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Ordinality<T>.Ordinality() -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Ordinality<T>.Value -> T
LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints
LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.Auto = 3 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.Needed = 2 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.None = 0 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.Quote = 1 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool NormalizeTimestampData, out LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode IdentifierQuoteMode) -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.Equals(LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions? other) -> bool
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.IdentifierQuoteMode.get -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.IdentifierQuoteMode.init -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.NormalizeTimestampData.get -> bool
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.NormalizeTimestampData.init -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.PostgreSQLOptions() -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.PostgreSQLOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, bool NormalizeTimestampData = true, LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode IdentifierQuoteMode = LinqToDB.DataProvider.PostgreSQL.PostgreSQLIdentifierQuoteMode.Auto) -> void
LinqToDB.DataProvider.PostgreSQL.PostgreSQLSpecificExtensions
LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect = 0 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v15 = 4 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v18 = 5 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v92 = 1 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v93 = 2 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.v95 = 3 -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute
LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.CalculationViewInputParametersExpressionAttribute() -> void
LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions
LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.GetHanaSchemaOptions() -> void
LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.GetStoredProcedureParameters -> System.Func<LinqToDB.SchemaProvider.ProcedureSchema!, LinqToDB.Data.DataParameter![]?>!
LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions.ThrowExceptionIfCalculationViewsNotAuthorized -> bool
LinqToDB.DataProvider.SapHana.SapHanaOptions
LinqToDB.DataProvider.SapHana.SapHanaOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.DataProvider.SapHana.SapHanaOptions.Equals(LinqToDB.DataProvider.SapHana.SapHanaOptions? other) -> bool
LinqToDB.DataProvider.SapHana.SapHanaOptions.SapHanaOptions() -> void
LinqToDB.DataProvider.SapHana.SapHanaOptions.SapHanaOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows) -> void
LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect = 0 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.ODBC = 2 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaProvider.Unmanaged = 1 -> LinqToDB.DataProvider.SapHana.SapHanaProvider
LinqToDB.DataProvider.SapHana.SapHanaTools
LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema
LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.Parameters.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ParameterSchema!>?
LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.Parameters.set -> void
LinqToDB.DataProvider.SapHana.ViewWithParametersTableSchema.ViewWithParametersTableSchema() -> void
LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>
LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>
LinqToDB.DataProvider.SqlCe.SqlCeHints
LinqToDB.DataProvider.SqlCe.SqlCeHints.Table
LinqToDB.DataProvider.SqlCe.SqlCeOptions
LinqToDB.DataProvider.SqlCe.SqlCeOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool InlineFunctionParameters) -> void
LinqToDB.DataProvider.SqlCe.SqlCeOptions.Equals(LinqToDB.DataProvider.SqlCe.SqlCeOptions? other) -> bool
LinqToDB.DataProvider.SqlCe.SqlCeOptions.InlineFunctionParameters.get -> bool
LinqToDB.DataProvider.SqlCe.SqlCeOptions.InlineFunctionParameters.init -> void
LinqToDB.DataProvider.SqlCe.SqlCeOptions.SqlCeOptions() -> void
LinqToDB.DataProvider.SqlCe.SqlCeOptions.SqlCeOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, bool InlineFunctionParameters = false) -> void
LinqToDB.DataProvider.SqlCe.SqlCeSpecificExtensions
LinqToDB.DataProvider.SqlCe.SqlCeTools
LinqToDB.DataProvider.SQLite.ISQLiteExtensions
LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>
LinqToDB.DataProvider.SQLite.SQLiteExtensions
LinqToDB.DataProvider.SQLite.SQLiteHints
LinqToDB.DataProvider.SQLite.SQLiteHints.Hint
LinqToDB.DataProvider.SQLite.SQLiteOptions
LinqToDB.DataProvider.SQLite.SQLiteOptions.AlwaysCheckDbNull.get -> bool
LinqToDB.DataProvider.SQLite.SQLiteOptions.AlwaysCheckDbNull.init -> void
LinqToDB.DataProvider.SQLite.SQLiteOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool AlwaysCheckDbNull) -> void
LinqToDB.DataProvider.SQLite.SQLiteOptions.Equals(LinqToDB.DataProvider.SQLite.SQLiteOptions? other) -> bool
LinqToDB.DataProvider.SQLite.SQLiteOptions.SQLiteOptions() -> void
LinqToDB.DataProvider.SQLite.SQLiteOptions.SQLiteOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows, bool AlwaysCheckDbNull = true) -> void
LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect = 0 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.Microsoft = 2 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteProvider.System = 1 -> LinqToDB.DataProvider.SQLite.SQLiteProvider
LinqToDB.DataProvider.SQLite.SQLiteSpecificExtensions
LinqToDB.DataProvider.SQLite.SQLiteTools
LinqToDB.DataProvider.SqlServer.ISqlServerExtensions
LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>
LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>
LinqToDB.DataProvider.SqlServer.SqlFn
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.AllowsNull = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.ColumnId = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.FullTextTypeColumn = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.GeneratedAlwaysType = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsColumnSet = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsComputed = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsCursorType = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsDeterministic = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsFulltextIndexed = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsHidden = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsIdentity = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsIdNotForRepl = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsIndexable = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsOutParam = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsPrecise = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsRowGuidCol = 15 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsSparse = 16 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsSystemVerified = 17 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.IsXmlIndexable = 18 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.Precision = 19 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.Scale = 20 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.StatisticalSemantics = 24 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.SystemDataAccess = 21 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.UserDataAccess = 22 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName.UsesAnsiTrim = 23 -> LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Auth_Scheme = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Client_Net_Address = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Local_Net_Address = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Local_TCP_Port = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Net_Transport = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Physical_Net_Transport = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName.Protocol_Type = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Collation = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.ComparisonStyle = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Edition = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAnsiNullDefault = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAnsiNullsEnabled = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAnsiPaddingEnabled = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAnsiWarningsEnabled = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsArithmeticAbortEnabled = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAutoClose = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAutoCreateStatistics = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAutoCreateStatisticsIncremental = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAutoShrink = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsAutoUpdateStatistics = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsClone = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsCloseCursorsOnCommitEnabled = 19 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsFulltextEnabled = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsInStandBy = 15 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsLocalCursorsDefault = 16 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsMemoryOptimizedElevateToSnapshotEnabled = 24 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsMergePublished = 17 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsNullConcat = 18 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsNumericRoundAbortEnabled = 26 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsParameterizationForced = 31 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsPublished = 20 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsQuotedIdentifiersEnabled = 29 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsRecursiveTriggersEnabled = 21 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsSubscribed = 22 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsSyncWithBackup = 23 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsTornPageDetectionEnabled = 34 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsVerifiedClone = 25 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.IsXTPSupported = 27 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.LastGoodCheckDbTime = 28 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.LCID = 30 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.MaxSizeInBytes = 32 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Recovery = 33 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.ServiceObjective = 35 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.ServiceObjectiveId = 36 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.SQLSortOrder = 37 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Status = 38 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Updateability = 39 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.UserAccess = 40 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName.Version = 41 -> LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Day = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.DayOfYear = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Hour = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Microsecond = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Millisecond = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Minute = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Month = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Nanosecond = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Quarter = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Second = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Week = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.WeekDay = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.DateParts.Year = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.DateParts
LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName.IsDefault = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName.IsReadOnly = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName.IsUserDefinedFG = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName.AccountType = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName.BlobTier = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName.IsInferredTier = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName.IsPageBlob = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName.IsLogFile = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName.IsPrimaryFile = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName.IsReadOnly = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName.SpaceUsed = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.AccentSensitivity = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.ImportStatus = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.IndexSize = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.ItemCount = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.LogSize = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.MergeStatus = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.PopulateCompletionAge = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.PopulateStatus = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName.UniqueKeyCount = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.ConnectTimeout = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.DataTimeout = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.IsFulltextInstalled = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.LoadOSResources = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.ResourceUsage = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName.VerifySignature = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName.ColumnId = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName.IsDescending = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IndexDepth = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IndexFillFactor = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IndexID = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsAutoStatistics = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsClustered = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsColumnstore = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsDisabled = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsFulltextKey = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsHypothetical = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsOptimizedForSequentialKey = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsPadIndex = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsPageLockDisallowed = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsRowLockDisallowed = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsStatistics = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName.IsUnique = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.JsonData() -> void
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.JsonData(LinqToDB.DataProvider.SqlServer.SqlFn.JsonData! original) -> void
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Key.get -> string?
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Key.set -> void
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Type.get -> int?
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Type.set -> void
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Value.get -> string?
LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Value.set -> void
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.BaseType = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.Cardinality = 107 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsClustKey = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsColumn = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsDeleteCascade = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsDisabled = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsNonclustKey = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsNotRepl = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsNotTrusted = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.CnstIsUpdateCascade = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsAfterTrigger = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsAnsiNullsOn = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsDeleteTrigger = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsFirstDeleteTrigger = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsFirstInsertTrigger = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsFirstUpdateTrigger = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsInsertTrigger = 15 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsInsteadOfTrigger = 16 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsLastDeleteTrigger = 17 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsLastInsertTrigger = 18 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsLastUpdateTrigger = 19 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsQuotedIdentOn = 20 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsStartup = 21 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsTriggerDisabled = 22 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsTriggerNotForRepl = 23 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsUpdateTrigger = 24 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.ExecIsWithNativeCompilation = 29 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.HasAfterTrigger = 25 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.HasDeleteTrigger = 26 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.HasInsertTrigger = 27 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.HasInsteadOfTrigger = 28 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.HasUpdateTrigger = 30 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsAnsiNullsOn = 31 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsCheckCnst = 32 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsConstraint = 33 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsDefault = 34 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsDefaultCnst = 35 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsDeterministic = 36 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsEncrypted = 37 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsExecuted = 38 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsExtendedProc = 39 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsForeignKey = 40 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsIndexable = 42 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsIndexed = 41 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsInlineFunction = 43 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsMSShipped = 44 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsPrecise = 45 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsPrimaryKey = 46 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsProcedure = 47 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsQueue = 49 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsQuotedIdentOn = 48 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsReplProc = 50 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsRule = 51 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsScalarFunction = 52 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsSchemaBound = 53 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsSystemTable = 54 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsSystemVerified = 55 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsTable = 56 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsTableFunction = 57 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsTrigger = 58 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsUniqueCnst = 59 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsUserTable = 60 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.IsView = 61 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.OwnerId = 62 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.SchemaId = 63 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.SystemDataAccess = 64 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableDeleteTrigger = 65 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableDeleteTriggerCount = 66 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFullTextBackgroundUpdateIndexOn = 69 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextCatalogId = 68 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFullTextChangeTrackingOn = 74 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextDocsProcessed = 79 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextFailCount = 70 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextItemCount = 71 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextKeyColumn = 72 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFullTextMergeStatus = 67 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextPendingChanges = 84 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFulltextPopulateStatus = 89 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableFullTextSemanticExtraction = 94 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasActiveFulltextIndex = 99 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasCheckCnst = 73 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasClustIndex = 75 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasColumnSet = 106 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasDefaultCnst = 76 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasDeleteTrigger = 77 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasForeignKey = 78 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasForeignRef = 80 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasIdentity = 81 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasIndex = 82 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasInsertTrigger = 83 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasNonclustIndex = 85 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasPrimaryKey = 86 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasRowGuidCol = 87 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasTextImage = 88 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasTimestamp = 90 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasUniqueCnst = 91 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasUpdateTrigger = 92 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableHasVarDecimalStorageFormat = 104 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableInsertTrigger = 93 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableInsertTriggerCount = 96 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableIsFake = 95 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableIsLockedOnBulkLoad = 97 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableIsMemoryOptimized = 98 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableIsPinned = 100 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableTemporalType = 108 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableTextInRowLimit = 101 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableUpdateTrigger = 102 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.TableUpdateTriggerCount = 103 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName.UserDataAccess = 105 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsClustKey = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsColumn = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsDeleteCascade = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsDisabled = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsNonclustKey = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsNotRepl = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsNotTrusted = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.CnstIsUpdateCascade = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsAfterTrigger = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsAnsiNullsOn = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsDeleteTrigger = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsFirstDeleteTrigger = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsFirstInsertTrigger = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsFirstUpdateTrigger = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsInsertTrigger = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsInsteadOfTrigger = 15 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsLastDeleteTrigger = 16 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsLastInsertTrigger = 17 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsLastUpdateTrigger = 18 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsQuotedIdentOn = 19 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsStartup = 20 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsTriggerDisabled = 21 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsTriggerNotForRepl = 22 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsUpdateTrigger = 23 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.ExecIsWithNativeCompilation = 24 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.HasAfterTrigger = 25 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.HasDeleteTrigger = 26 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.HasInsertTrigger = 27 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.HasInsteadOfTrigger = 28 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.HasUpdateTrigger = 29 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsAnsiNullsOn = 30 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsCheckCnst = 31 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsConstraint = 32 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsDefault = 33 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsDefaultCnst = 34 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsDeterministic = 35 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsEncrypted = 36 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsExecuted = 37 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsExtendedProc = 38 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsForeignKey = 39 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsIndexable = 41 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsIndexed = 40 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsInlineFunction = 42 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsMSShipped = 43 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsPrimaryKey = 44 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsProcedure = 45 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsQueue = 47 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsQuotedIdentOn = 46 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsReplProc = 48 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsRule = 49 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsScalarFunction = 50 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsSchemaBound = 51 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsSystemTable = 52 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsSystemVerified = 53 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsTable = 54 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsTableFunction = 55 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsTrigger = 56 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsUniqueCnst = 57 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsUserTable = 58 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.IsView = 59 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.OwnerId = 60 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.SchemaId = 61 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableDeleteTrigger = 62 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableDeleteTriggerCount = 63 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFullTextBackgroundUpdateIndexOn = 64 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextCatalogId = 66 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextChangeTrackingOn = 74 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextDocsProcessed = 69 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextFailCount = 67 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextItemCount = 68 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextKeyColumn = 70 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFullTextMergeStatus = 65 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextPendingChanges = 79 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableFulltextPopulateStatus = 84 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasActiveFulltextIndex = 89 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasCheckCnst = 71 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasClustIndex = 72 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasColumnSet = 101 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasDefaultCnst = 73 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasDeleteTrigger = 75 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasForeignKey = 76 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasForeignRef = 77 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasIdentity = 78 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasIndex = 80 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasInsertTrigger = 81 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasNonclustIndex = 82 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasPrimaryKey = 83 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasRowGuidCol = 85 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasTextImage = 86 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasTimestamp = 87 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasUniqueCnst = 88 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasUpdateTrigger = 90 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableHasVarDecimalStorageFormat = 94 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableInsertTrigger = 91 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableInsertTriggerCount = 92 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableIsFake = 93 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableIsLockedOnBulkLoad = 95 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableIsMemoryOptimized = 96 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableIsPinned = 97 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableTemporalType = 102 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableTextInRowLimit = 98 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableUpdateTrigger = 99 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName.TableUpdateTriggerCount = 100 -> LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.BuildClrVersion = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.Collation = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.CollationID = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ComparisonStyle = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ComputerNamePhysicalNetBIOS = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.Edition = 5 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.EditionID = 6 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.EngineEdition = 7 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.FilestreamConfiguredLevel = 8 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.FilestreamEffectiveLevel = 9 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.FilestreamShareName = 10 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.HadrManagerStatus = 11 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.InstanceDefaultBackupPath = 14 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.InstanceDefaultDataPath = 12 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.InstanceDefaultLogPath = 13 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.InstanceName = 15 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsAdvancedAnalyticsInstalled = 19 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsBigDataCluster = 16 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsClustered = 17 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsExternalAuthenticationOnly = 24 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsFullTextInstalled = 18 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsHadrEnabled = 20 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsIntegratedSecurityOnly = 29 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsLocalDB = 21 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsPolyBaseInstalled = 22 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsSingleUser = 23 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsTempDbMetadataMemoryOptimized = 34 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.IsXTPSupported = 25 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.LCID = 26 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.LicenseType = 27 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.MachineName = 28 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.NumLicenses = 30 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProcessID = 31 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductBuild = 32 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductBuildType = 33 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductLevel = 35 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductMajorVersion = 36 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductMinorVersion = 37 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductUpdateLevel = 38 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductUpdateReference = 39 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ProductVersion = 40 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ResourceLastUpdateDateTime = 44 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ResourceVersion = 41 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.ServerName = 42 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.SqlCharSet = 43 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.SqlCharSetName = 45 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.SqlSortOrder = 46 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName.SqlSortOrderName = 47 -> LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName.AllowsNull = 0 -> LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName.OwnerId = 1 -> LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName.Precision = 2 -> LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName.Scale = 3 -> LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName.UsesAnsiTrim = 4 -> LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName
LinqToDB.DataProvider.SqlServer.SqlServerExtensions
LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>
LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>.FreeTextKey() -> void
LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>.Key -> TKey
LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>.Rank -> int
LinqToDB.DataProvider.SqlServer.SqlServerHints
LinqToDB.DataProvider.SqlServer.SqlServerHints.Join
LinqToDB.DataProvider.SqlServer.SqlServerHints.Query
LinqToDB.DataProvider.SqlServer.SqlServerHints.Table
LinqToDB.DataProvider.SqlServer.SqlServerOptions
LinqToDB.DataProvider.SqlServer.SqlServerOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType, out bool GenerateScopeIdentity) -> void
LinqToDB.DataProvider.SqlServer.SqlServerOptions.Equals(LinqToDB.DataProvider.SqlServer.SqlServerOptions? other) -> bool
LinqToDB.DataProvider.SqlServer.SqlServerOptions.GenerateScopeIdentity.get -> bool
LinqToDB.DataProvider.SqlServer.SqlServerOptions.GenerateScopeIdentity.init -> void
LinqToDB.DataProvider.SqlServer.SqlServerOptions.SqlServerOptions() -> void
LinqToDB.DataProvider.SqlServer.SqlServerOptions.SqlServerOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.ProviderSpecific, bool GenerateScopeIdentity = true) -> void
LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect = 0 -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.DataProvider.SqlServer.SqlServerProvider.MicrosoftDataSqlClient = 2 -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.DataProvider.SqlServer.SqlServerProvider.SystemDataSqlClient = 1 -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy
LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.SqlServerRetryPolicy() -> void
LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.SqlServerRetryPolicy(int maxRetryCount) -> void
LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.SqlServerRetryPolicy(int maxRetryCount, System.TimeSpan maxRetryDelay, double randomFactor, double exponentialBase, System.TimeSpan coefficient, System.Collections.Generic.ICollection<int>? errorNumbersToAdd) -> void
LinqToDB.DataProvider.SqlServer.SqlServerSpecificExtensions
LinqToDB.DataProvider.SqlServer.SqlServerTools
LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector
LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect = 0 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2005 = 1 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2008 = 2 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2012 = 3 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2014 = 4 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2016 = 5 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2017 = 6 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2019 = 7 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2022 = 8 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlServerVersion.v2025 = 9 -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.DataProvider.SqlServer.SqlType
LinqToDB.DataProvider.SqlServer.SqlType.SqlType(string! dataType) -> void
LinqToDB.DataProvider.SqlServer.SqlType<T>
LinqToDB.DataProvider.SqlServer.SqlType<T>.SqlType(string! dataType) -> void
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.GetObjectID() -> string!
LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.SystemDataSqlServerAttributeReader(System.Type! sqlMethodAttribute, System.Type! sqlUserDefinedTypeAttribute) -> void
LinqToDB.DataProvider.Sybase.SybaseOptions
LinqToDB.DataProvider.Sybase.SybaseOptions.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.DataProvider.Sybase.SybaseOptions.Equals(LinqToDB.DataProvider.Sybase.SybaseOptions? other) -> bool
LinqToDB.DataProvider.Sybase.SybaseOptions.SybaseOptions() -> void
LinqToDB.DataProvider.Sybase.SybaseOptions.SybaseOptions(LinqToDB.Data.BulkCopyType BulkCopyType = LinqToDB.Data.BulkCopyType.MultipleRows) -> void
LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect = 0 -> LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.DataAction = 2 -> LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseProvider.Unmanaged = 1 -> LinqToDB.DataProvider.Sybase.SybaseProvider
LinqToDB.DataProvider.Sybase.SybaseTools
LinqToDB.DataType
LinqToDB.DataType.Array = -2147483648 -> LinqToDB.DataType
LinqToDB.DataType.BFile = 51 -> LinqToDB.DataType
LinqToDB.DataType.Binary = 7 -> LinqToDB.DataType
LinqToDB.DataType.BinaryJson = 43 -> LinqToDB.DataType
LinqToDB.DataType.BitArray = 39 -> LinqToDB.DataType
LinqToDB.DataType.Blob = 9 -> LinqToDB.DataType
LinqToDB.DataType.Boolean = 11 -> LinqToDB.DataType
LinqToDB.DataType.Byte = 17 -> LinqToDB.DataType
LinqToDB.DataType.Char = 1 -> LinqToDB.DataType
LinqToDB.DataType.Cursor = 41 -> LinqToDB.DataType
LinqToDB.DataType.Date = 26 -> LinqToDB.DataType
LinqToDB.DataType.Date32 = 27 -> LinqToDB.DataType
LinqToDB.DataType.DateTime = 29 -> LinqToDB.DataType
LinqToDB.DataType.DateTime2 = 30 -> LinqToDB.DataType
LinqToDB.DataType.DateTime64 = 33 -> LinqToDB.DataType
LinqToDB.DataType.DateTimeOffset = 32 -> LinqToDB.DataType
LinqToDB.DataType.DecFloat = 52 -> LinqToDB.DataType
LinqToDB.DataType.Decimal = 23 -> LinqToDB.DataType
LinqToDB.DataType.Decimal128 = 71 -> LinqToDB.DataType
LinqToDB.DataType.Decimal256 = 72 -> LinqToDB.DataType
LinqToDB.DataType.Decimal32 = 69 -> LinqToDB.DataType
LinqToDB.DataType.Decimal64 = 70 -> LinqToDB.DataType
LinqToDB.DataType.Dictionary = 40 -> LinqToDB.DataType
LinqToDB.DataType.Double = 22 -> LinqToDB.DataType
LinqToDB.DataType.Enum = 48 -> LinqToDB.DataType
LinqToDB.DataType.Enum16 = 50 -> LinqToDB.DataType
LinqToDB.DataType.Enum8 = 49 -> LinqToDB.DataType
LinqToDB.DataType.Guid = 12 -> LinqToDB.DataType
LinqToDB.DataType.Image = 10 -> LinqToDB.DataType
LinqToDB.DataType.Int128 = 55 -> LinqToDB.DataType
LinqToDB.DataType.Int16 = 14 -> LinqToDB.DataType
LinqToDB.DataType.Int256 = 57 -> LinqToDB.DataType
LinqToDB.DataType.Int32 = 15 -> LinqToDB.DataType
LinqToDB.DataType.Int64 = 16 -> LinqToDB.DataType
LinqToDB.DataType.Interval = 47 -> LinqToDB.DataType
LinqToDB.DataType.IntervalDay = 64 -> LinqToDB.DataType
LinqToDB.DataType.IntervalHour = 63 -> LinqToDB.DataType
LinqToDB.DataType.IntervalMinute = 62 -> LinqToDB.DataType
LinqToDB.DataType.IntervalMonth = 66 -> LinqToDB.DataType
LinqToDB.DataType.IntervalQuarter = 67 -> LinqToDB.DataType
LinqToDB.DataType.IntervalSecond = 61 -> LinqToDB.DataType
LinqToDB.DataType.IntervalWeek = 65 -> LinqToDB.DataType
LinqToDB.DataType.IntervalYear = 68 -> LinqToDB.DataType
LinqToDB.DataType.IPv4 = 59 -> LinqToDB.DataType
LinqToDB.DataType.IPv6 = 60 -> LinqToDB.DataType
LinqToDB.DataType.Json = 42 -> LinqToDB.DataType
LinqToDB.DataType.Long = 45 -> LinqToDB.DataType
LinqToDB.DataType.LongRaw = 46 -> LinqToDB.DataType
LinqToDB.DataType.Money = 24 -> LinqToDB.DataType
LinqToDB.DataType.NChar = 4 -> LinqToDB.DataType
LinqToDB.DataType.NText = 6 -> LinqToDB.DataType
LinqToDB.DataType.NVarChar = 5 -> LinqToDB.DataType
LinqToDB.DataType.SByte = 13 -> LinqToDB.DataType
LinqToDB.DataType.Single = 21 -> LinqToDB.DataType
LinqToDB.DataType.SmallDateTime = 31 -> LinqToDB.DataType
LinqToDB.DataType.SmallDecFloat = 53 -> LinqToDB.DataType
LinqToDB.DataType.SmallMoney = 25 -> LinqToDB.DataType
LinqToDB.DataType.Structured = 44 -> LinqToDB.DataType
LinqToDB.DataType.Text = 3 -> LinqToDB.DataType
LinqToDB.DataType.Time = 28 -> LinqToDB.DataType
LinqToDB.DataType.Timestamp = 34 -> LinqToDB.DataType
LinqToDB.DataType.TimeTZ = 54 -> LinqToDB.DataType
LinqToDB.DataType.Udt = 38 -> LinqToDB.DataType
LinqToDB.DataType.UInt128 = 56 -> LinqToDB.DataType
LinqToDB.DataType.UInt16 = 18 -> LinqToDB.DataType
LinqToDB.DataType.UInt256 = 58 -> LinqToDB.DataType
LinqToDB.DataType.UInt32 = 19 -> LinqToDB.DataType
LinqToDB.DataType.UInt64 = 20 -> LinqToDB.DataType
LinqToDB.DataType.Undefined = 0 -> LinqToDB.DataType
LinqToDB.DataType.VarBinary = 8 -> LinqToDB.DataType
LinqToDB.DataType.VarChar = 2 -> LinqToDB.DataType
LinqToDB.DataType.Variant = 36 -> LinqToDB.DataType
LinqToDB.DataType.VarNumeric = 37 -> LinqToDB.DataType
LinqToDB.DataType.Xml = 35 -> LinqToDB.DataType
LinqToDB.DbDataType
LinqToDB.DbDataType.DataType.get -> LinqToDB.DataType
LinqToDB.DbDataType.DbDataType() -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType) -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType, LinqToDB.DataType dataType) -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType, LinqToDB.DataType dataType, string? dbType) -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType, LinqToDB.DataType dataType, string? dbType, int? length) -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType, LinqToDB.DataType dataType, string? dbType, int? length, int? precision, int? scale) -> void
LinqToDB.DbDataType.DbDataType(System.Type! systemType, string! dbType) -> void
LinqToDB.DbDataType.DbType.get -> string?
LinqToDB.DbDataType.Equals(LinqToDB.DbDataType other) -> bool
LinqToDB.DbDataType.EqualsDbOnly(LinqToDB.DbDataType other) -> bool
LinqToDB.DbDataType.Length.get -> int?
LinqToDB.DbDataType.Precision.get -> int?
LinqToDB.DbDataType.Scale.get -> int?
LinqToDB.DbDataType.SystemType.get -> System.Type!
LinqToDB.DbDataType.WithDataType(LinqToDB.DataType dataType) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithDbType(string? dbName) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithLength(int? length) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithoutSystemType(LinqToDB.DbDataType from) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithoutSystemType(LinqToDB.Mapping.ColumnDescriptor! from) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithPrecision(int? precision) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithPrecisionScale(int? precision, int? scale) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithScale(int? scale) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithSetValues(LinqToDB.DbDataType from) -> LinqToDB.DbDataType
LinqToDB.DbDataType.WithSystemType(System.Type! systemType) -> LinqToDB.DbDataType
LinqToDB.ExpressionMethodAttribute
LinqToDB.ExpressionMethodAttribute.Alias.get -> string?
LinqToDB.ExpressionMethodAttribute.Alias.set -> void
LinqToDB.ExpressionMethodAttribute.Expression.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.ExpressionMethodAttribute.Expression.set -> void
LinqToDB.ExpressionMethodAttribute.ExpressionMethodAttribute(string! methodName) -> void
LinqToDB.ExpressionMethodAttribute.ExpressionMethodAttribute(string? configuration, string! methodName) -> void
LinqToDB.ExpressionMethodAttribute.ExpressionMethodAttribute(System.Linq.Expressions.LambdaExpression! expression) -> void
LinqToDB.ExpressionMethodAttribute.IsColumn.get -> bool
LinqToDB.ExpressionMethodAttribute.IsColumn.set -> void
LinqToDB.ExpressionMethodAttribute.MethodName.get -> string?
LinqToDB.ExpressionMethodAttribute.MethodName.set -> void
LinqToDB.Expressions.ExpressionExtensions
LinqToDB.Expressions.IExpressionEvaluator
LinqToDB.Expressions.IExpressionEvaluator.CanBeEvaluated(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Expressions.IExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Expressions.MemberHelper
LinqToDB.Expressions.MemberHelper.MemberInfoWithType
LinqToDB.Expressions.MemberHelper.MemberInfoWithType.Equals(LinqToDB.Expressions.MemberHelper.MemberInfoWithType other) -> bool
LinqToDB.Expressions.MemberHelper.MemberInfoWithType.MemberInfo -> System.Reflection.MemberInfo!
LinqToDB.Expressions.MemberHelper.MemberInfoWithType.MemberInfoWithType() -> void
LinqToDB.Expressions.MemberHelper.MemberInfoWithType.MemberInfoWithType(System.Type? type, System.Reflection.MemberInfo! memberInfo) -> void
LinqToDB.Expressions.MemberHelper.MemberInfoWithType.Type -> System.Type?
LinqToDB.ExprParameterAttribute
LinqToDB.ExprParameterAttribute.DoNotParameterize.get -> bool
LinqToDB.ExprParameterAttribute.DoNotParameterize.set -> void
LinqToDB.ExprParameterAttribute.ExprParameterAttribute() -> void
LinqToDB.ExprParameterAttribute.ExprParameterAttribute(string! name) -> void
LinqToDB.ExprParameterAttribute.Name.get -> string?
LinqToDB.ExprParameterAttribute.Name.set -> void
LinqToDB.ExprParameterAttribute.ParameterKind.get -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterAttribute.ParameterKind.set -> void
LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Default = 0 -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Sequence = 1 -> LinqToDB.ExprParameterKind
LinqToDB.ExprParameterKind.Values = 2 -> LinqToDB.ExprParameterKind
LinqToDB.ExtensionBuilderExtensions
LinqToDB.Extensions.AttributesExtensions
LinqToDB.IDataContext
LinqToDB.IDataContext.AddInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.IDataContext.AddMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.IDataContext.Close() -> void
LinqToDB.IDataContext.CloseAfterUse.get -> bool
LinqToDB.IDataContext.CloseAfterUse.set -> void
LinqToDB.IDataContext.CloseAsync() -> System.Threading.Tasks.Task!
LinqToDB.IDataContext.ConfigurationString.get -> string?
LinqToDB.IDataContext.ContextName.get -> string!
LinqToDB.IDataContext.CreateSqlBuilder.get -> System.Func<LinqToDB.Internal.SqlProvider.ISqlBuilder!>!
LinqToDB.IDataContext.DataReaderType.get -> System.Type!
LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Internal.Linq.Query! query, LinqToDB.IDataContext! parametersContext, int queryNumber, LinqToDB.Internal.Linq.IQueryExpressions! expressions, object?[]? parameters, object?[]? preambles) -> LinqToDB.Internal.Linq.IQueryRunner!
LinqToDB.IDataContext.GetReaderExpression(System.Data.Common.DbDataReader! reader, int idx, System.Linq.Expressions.Expression! readerExpression, System.Type! toType) -> System.Linq.Expressions.Expression!
LinqToDB.IDataContext.GetSqlOptimizer.get -> System.Func<LinqToDB.DataOptions!, LinqToDB.Internal.SqlProvider.ISqlOptimizer!>!
LinqToDB.IDataContext.InlineParameters.get -> bool
LinqToDB.IDataContext.InlineParameters.set -> void
LinqToDB.IDataContext.IsDBNullAllowed(System.Data.Common.DbDataReader! reader, int idx) -> bool?
LinqToDB.IDataContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.IDataContext.NextQueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.IDataContext.Options.get -> LinqToDB.DataOptions!
LinqToDB.IDataContext.QueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.IDataContext.RemoveInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.IDataContext.SetMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.IDataContext.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.IDataContext.SupportedTableOptions.get -> LinqToDB.TableOptions
LinqToDB.IDataContext.UseMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.IDisposable?
LinqToDB.IDataContext.UseOptions(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> System.IDisposable?
LinqToDB.IExtensionsAdapter
LinqToDB.IExtensionsAdapter.AllAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.IExtensionsAdapter.AnyAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.IExtensionsAdapter.AnyAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.IExtensionsAdapter.AsAsyncEnumerable<TSource>(System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync(System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.ContainsAsync<TSource>(System.Linq.IQueryable<TSource>! source, TSource item, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.IExtensionsAdapter.CountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.IExtensionsAdapter.CountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.IExtensionsAdapter.FirstAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.IExtensionsAdapter.FirstAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.IExtensionsAdapter.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.ForEachAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task!
LinqToDB.IExtensionsAdapter.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.IExtensionsAdapter.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.IExtensionsAdapter.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TResult?>!
LinqToDB.IExtensionsAdapter.MaxAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TResult?>!
LinqToDB.IExtensionsAdapter.MinAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.SingleAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.IExtensionsAdapter.SingleAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.IExtensionsAdapter.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int?>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.IExtensionsAdapter.SumAsync(System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long?>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int?>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.IExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long?>!
LinqToDB.IExtensionsAdapter.ToArrayAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource[]!>!
LinqToDB.IExtensionsAdapter.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
LinqToDB.IExtensionsAdapter.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
LinqToDB.IExtensionsAdapter.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
LinqToDB.IExtensionsAdapter.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
LinqToDB.IExtensionsAdapter.ToListAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>!>!
LinqToDB.ILoadWithQueryable<TEntity, TProperty>
LinqToDB.InsertColumnFilter<T>
LinqToDB.InsertOrUpdateColumnFilter<T>
LinqToDB.Interceptors.CommandEventData
LinqToDB.Interceptors.CommandEventData.CommandEventData() -> void
LinqToDB.Interceptors.CommandEventData.DataConnection.get -> LinqToDB.Data.DataConnection!
LinqToDB.Interceptors.CommandInterceptor
LinqToDB.Interceptors.CommandInterceptor.CommandInterceptor() -> void
LinqToDB.Interceptors.ConnectionEventData
LinqToDB.Interceptors.ConnectionEventData.ConnectionEventData() -> void
LinqToDB.Interceptors.ConnectionEventData.DataConnection.get -> LinqToDB.Data.DataConnection?
LinqToDB.Interceptors.ConnectionInterceptor
LinqToDB.Interceptors.ConnectionInterceptor.ConnectionInterceptor() -> void
LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor
LinqToDB.Interceptors.DataContextEventData
LinqToDB.Interceptors.DataContextEventData.Context.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.DataContextEventData.DataContextEventData() -> void
LinqToDB.Interceptors.DataContextInterceptor
LinqToDB.Interceptors.DataContextInterceptor.DataContextInterceptor() -> void
LinqToDB.Interceptors.EntityCreatedEventData
LinqToDB.Interceptors.EntityCreatedEventData.Context.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.EntityCreatedEventData.DatabaseName.get -> string?
LinqToDB.Interceptors.EntityCreatedEventData.EntityCreatedEventData() -> void
LinqToDB.Interceptors.EntityCreatedEventData.SchemaName.get -> string?
LinqToDB.Interceptors.EntityCreatedEventData.ServerName.get -> string?
LinqToDB.Interceptors.EntityCreatedEventData.TableName.get -> string?
LinqToDB.Interceptors.EntityCreatedEventData.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Interceptors.EntityServiceInterceptor
LinqToDB.Interceptors.EntityServiceInterceptor.EntityServiceInterceptor() -> void
LinqToDB.Interceptors.ExceptionEventData
LinqToDB.Interceptors.ExceptionEventData.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.ExceptionEventData.ExceptionEventData() -> void
LinqToDB.Interceptors.ExceptionInterceptor
LinqToDB.Interceptors.ExceptionInterceptor.ExceptionInterceptor() -> void
LinqToDB.Interceptors.ICommandInterceptor
LinqToDB.Interceptors.ICommandInterceptor.AfterExecuteReader(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, System.Data.Common.DbDataReader! dataReader) -> void
LinqToDB.Interceptors.ICommandInterceptor.BeforeReaderDispose(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand? command, System.Data.Common.DbDataReader! dataReader) -> void
LinqToDB.Interceptors.ICommandInterceptor.BeforeReaderDisposeAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand? command, System.Data.Common.DbDataReader! dataReader) -> System.Threading.Tasks.Task!
LinqToDB.Interceptors.ICommandInterceptor.CommandInitialized(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command) -> System.Data.Common.DbCommand!
LinqToDB.Interceptors.ICommandInterceptor.ExecuteNonQuery(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<int> result) -> LinqToDB.Common.Option<int>
LinqToDB.Interceptors.ICommandInterceptor.ExecuteNonQueryAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<int> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<int>>!
LinqToDB.Interceptors.ICommandInterceptor.ExecuteReader(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, LinqToDB.Common.Option<System.Data.Common.DbDataReader!> result) -> LinqToDB.Common.Option<System.Data.Common.DbDataReader!>
LinqToDB.Interceptors.ICommandInterceptor.ExecuteReaderAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, LinqToDB.Common.Option<System.Data.Common.DbDataReader!> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<System.Data.Common.DbDataReader!>>!
LinqToDB.Interceptors.ICommandInterceptor.ExecuteScalar(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<object?> result) -> LinqToDB.Common.Option<object?>
LinqToDB.Interceptors.ICommandInterceptor.ExecuteScalarAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<object?> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<object?>>!
LinqToDB.Interceptors.IConnectionInterceptor
LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpened(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpenedAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpening(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
LinqToDB.Interceptors.IConnectionInterceptor.ConnectionOpeningAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Interceptors.IDataContextInterceptor
LinqToDB.Interceptors.IDataContextInterceptor.OnClosed(LinqToDB.Interceptors.DataContextEventData eventData) -> void
LinqToDB.Interceptors.IDataContextInterceptor.OnClosedAsync(LinqToDB.Interceptors.DataContextEventData eventData) -> System.Threading.Tasks.Task!
LinqToDB.Interceptors.IDataContextInterceptor.OnClosing(LinqToDB.Interceptors.DataContextEventData eventData) -> void
LinqToDB.Interceptors.IDataContextInterceptor.OnClosingAsync(LinqToDB.Interceptors.DataContextEventData eventData) -> System.Threading.Tasks.Task!
LinqToDB.Interceptors.IEntityServiceInterceptor
LinqToDB.Interceptors.IEntityServiceInterceptor.EntityCreated(LinqToDB.Interceptors.EntityCreatedEventData eventData, object! entity) -> object!
LinqToDB.Interceptors.IExceptionInterceptor
LinqToDB.Interceptors.IExceptionInterceptor.ProcessException(LinqToDB.Interceptors.ExceptionEventData eventData, System.Exception! exception) -> void
LinqToDB.Interceptors.IInterceptor
LinqToDB.Interceptors.InterceptorExtensions
LinqToDB.Interceptors.IQueryExpressionInterceptor
LinqToDB.Interceptors.IQueryExpressionInterceptor.ProcessExpression(System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs! args) -> System.Linq.Expressions.Expression!
LinqToDB.Interceptors.IUnwrapDataObjectInterceptor
LinqToDB.Interceptors.IUnwrapDataObjectInterceptor.UnwrapCommand(LinqToDB.IDataContext! dataContext, System.Data.Common.DbCommand! command) -> System.Data.Common.DbCommand!
LinqToDB.Interceptors.IUnwrapDataObjectInterceptor.UnwrapConnection(LinqToDB.IDataContext! dataContext, System.Data.Common.DbConnection! connection) -> System.Data.Common.DbConnection!
LinqToDB.Interceptors.IUnwrapDataObjectInterceptor.UnwrapDataReader(LinqToDB.IDataContext! dataContext, System.Data.Common.DbDataReader! dataReader) -> System.Data.Common.DbDataReader!
LinqToDB.Interceptors.IUnwrapDataObjectInterceptor.UnwrapTransaction(LinqToDB.IDataContext! dataContext, System.Data.Common.DbTransaction! transaction) -> System.Data.Common.DbTransaction!
LinqToDB.Interceptors.QueryExpressionArgs
LinqToDB.Interceptors.QueryExpressionArgs.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Interceptors.QueryExpressionArgs.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.AssociationExpression = 2 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.ExposedQuery = 1 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.Query = 0 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind.QueryFilter = 3 -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.Kind.get -> LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind
LinqToDB.Interceptors.QueryExpressionArgs.QueryExpressionArgs(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs.ExpressionKind kind) -> void
LinqToDB.Interceptors.UnwrapDataObjectInterceptor
LinqToDB.Interceptors.UnwrapDataObjectInterceptor.UnwrapDataObjectInterceptor() -> void
LinqToDB.Internal.Async.IQueryProviderAsync
LinqToDB.Internal.Async.IQueryProviderAsync.ExecuteAsync<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
LinqToDB.Internal.Async.IQueryProviderAsync.ExecuteAsyncEnumerable<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<TResult>!>!
LinqToDB.Internal.Async.IQueryProviderAsync.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Common.ActivatorExt
LinqToDB.Internal.Common.EnumerableHelper
LinqToDB.Internal.Common.ErrorHelper
LinqToDB.Internal.Common.ErrorHelper.ClickHouse
LinqToDB.Internal.Common.ErrorHelper.MySql
LinqToDB.Internal.Common.ErrorHelper.Sybase
LinqToDB.Internal.Common.IConfigurationID
LinqToDB.Internal.Common.IConfigurationID.ConfigurationID.get -> int
LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(bool data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(int? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(LinqToDB.Internal.Common.IConfigurationID? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(object? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(string! format, object? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(string? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(System.Delegate? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.Add(System.Type? data) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.AddRange(System.Collections.IEnumerable? items) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.AddTypes(System.Collections.IEnumerable? items) -> LinqToDB.Internal.Common.IdentifierBuilder
LinqToDB.Internal.Common.IdentifierBuilder.CreateID() -> int
LinqToDB.Internal.Common.IdentifierBuilder.Dispose() -> void
LinqToDB.Internal.Common.IdentifierBuilder.IdentifierBuilder() -> void
LinqToDB.Internal.Common.IdentifierBuilder.IdentifierBuilder(object? data) -> void
LinqToDB.Internal.Common.SqlTextWriter
LinqToDB.Internal.Common.SqlTextWriter.Append(byte value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(char value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(char value, int repeatCount) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(decimal value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(double value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(float value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(int value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(long value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(object? value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(sbyte value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(short value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(string? value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(System.Text.StringBuilder? value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(uint value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(ulong value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Append(ushort value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendFormat(string! format, object! arg0) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendFormat(string! format, params object![]! args) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendIdentCheck(string! str) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendIndent() -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendIndentIfNeeded() -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendLine() -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendLine(char value) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.AppendLine(string! str) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.Clear() -> void
LinqToDB.Internal.Common.SqlTextWriter.DecrementIndent() -> int
LinqToDB.Internal.Common.SqlTextWriter.IncrementIndent() -> int
LinqToDB.Internal.Common.SqlTextWriter.Indent() -> LinqToDB.Internal.Common.SqlTextWriter.IndentScope
LinqToDB.Internal.Common.SqlTextWriter.IndentScope
LinqToDB.Internal.Common.SqlTextWriter.IndentScope.Dispose() -> void
LinqToDB.Internal.Common.SqlTextWriter.IndentScope.IndentScope() -> void
LinqToDB.Internal.Common.SqlTextWriter.IndentScope.IndentScope(LinqToDB.Internal.Common.SqlTextWriter! writer) -> void
LinqToDB.Internal.Common.SqlTextWriter.Length.get -> int
LinqToDB.Internal.Common.SqlTextWriter.Length.set -> void
LinqToDB.Internal.Common.SqlTextWriter.Replace(string! oldValue, string! newValue, int startIndex, int count) -> LinqToDB.Internal.Common.SqlTextWriter!
LinqToDB.Internal.Common.SqlTextWriter.SqlTextWriter() -> void
LinqToDB.Internal.Common.SqlTextWriter.SqlTextWriter(int capacity) -> void
LinqToDB.Internal.Common.SqlTextWriter.SqlTextWriter(System.Text.StringBuilder! stringBuilder) -> void
LinqToDB.Internal.Common.SqlTextWriter.StringBuilder.get -> System.Text.StringBuilder!
LinqToDB.Internal.Common.SqlTextWriter.ToString(int startIndex, int length) -> string!
LinqToDB.Internal.Common.Tools
LinqToDB.Internal.Common.TypeHelper
LinqToDB.Internal.Common.Utils
LinqToDB.Internal.Common.Utils.ObjectReferenceEqualityComparer<T>
LinqToDB.Internal.Common.Utils.ObjectReferenceEqualityComparer<T>.Equals(T? x, T? y) -> bool
LinqToDB.Internal.Common.Utils.ObjectReferenceEqualityComparer<T>.GetHashCode(T obj) -> int
LinqToDB.Internal.Common.Utils.ObjectReferenceEqualityComparer<T>.ObjectReferenceEqualityComparer() -> void
LinqToDB.Internal.Common.ValueComparer
LinqToDB.Internal.Common.ValueComparer.ValueComparer(System.Linq.Expressions.LambdaExpression! equalsExpression, System.Linq.Expressions.LambdaExpression! hashCodeExpression) -> void
LinqToDB.Internal.Common.ValueComparer<T>
LinqToDB.Internal.Common.ValueComparer<T>.ValueComparer(bool favorStructuralComparisons) -> void
LinqToDB.Internal.Common.ValueComparer<T>.ValueComparer(System.Linq.Expressions.Expression<System.Func<T, T, bool>!>! equalsExpression, System.Linq.Expressions.Expression<System.Func<T, int>!>! hashCodeExpression) -> void
LinqToDB.Internal.Conversion.ConvertBuilder
LinqToDB.Internal.DataProvider.Access.AccessBulkCopy
LinqToDB.Internal.DataProvider.Access.AccessBulkCopy.AccessBulkCopy() -> void
LinqToDB.Internal.DataProvider.Access.AccessDataProvider
LinqToDB.Internal.DataProvider.Access.AccessDataProvider.AccessDataProvider(string! name, LinqToDB.DataProvider.Access.AccessVersion version, LinqToDB.DataProvider.Access.AccessProvider provider) -> void
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.AceOdbcDbMappingSchema
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.AceOdbcDbMappingSchema.AceOdbcDbMappingSchema() -> void
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.AceOleDbMappingSchema
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.AceOleDbMappingSchema.AceOleDbMappingSchema() -> void
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.JetOdbcDbMappingSchema
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.JetOdbcDbMappingSchema.JetOdbcDbMappingSchema() -> void
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.JetOleDbMappingSchema
LinqToDB.Internal.DataProvider.Access.AccessMappingSchema.JetOleDbMappingSchema.JetOleDbMappingSchema() -> void
LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider
LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.AccessODBCSchemaProvider() -> void
LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder
LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.AccessODBCSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider
LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.AccessOleDbSchemaProvider(LinqToDB.Internal.DataProvider.Access.AccessDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Access.AccessOleDbSqlBuilder
LinqToDB.Internal.DataProvider.Access.AccessOleDbSqlBuilder.AccessOleDbSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.GetOdbcDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.GetOleDbDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType>?
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.GetOleDbSchemaTable.get -> System.Func<System.Data.Common.DbConnection!, System.Guid, object![]?, System.Data.DataTable!>?
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.SetOdbcDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.SetOleDbDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType>?
LinqToDB.Internal.DataProvider.Access.AccessProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Access.AccessProviderDetector
LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.AccessProviderDetector() -> void
LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase
LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase.AccessSchemaProviderBase() -> void
LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase
LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.AccessSqlBuilderBase(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.AccessSqlBuilderBase(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.AccessSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Access.AccessSqlOptimizer
LinqToDB.Internal.DataProvider.Access.AccessSqlOptimizer.AccessSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator.AccessJetMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator.AccessJetStringMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator.AccessJetStringMemberTranslator.AccessJetStringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.AccessMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.MathMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.MathMemberTranslator.MathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.AliasesHelper
LinqToDB.Internal.DataProvider.BasicBulkCopy
LinqToDB.Internal.DataProvider.BasicBulkCopy.BasicBulkCopy() -> void
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1Async(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1Async<T>(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1Async<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy1Async<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string! from) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, string! from) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2Async(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2Async<T>(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.Generic.IAsyncEnumerable<T>! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2Async<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy2Async<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy3(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string! from) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy3Async(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy3Async<T>(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.Generic.IAsyncEnumerable<T>! source, string! from, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderConnections
LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderConnections.DataConnection -> LinqToDB.Data.DataConnection!
LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderConnections.ProviderConnection -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderConnections.ProviderConnections() -> void
LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderConnections.ProviderTransaction -> System.Data.Common.DbTransaction?
LinqToDB.Internal.DataProvider.BasicBulkCopy.RowByRowCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! dataOptions, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
LinqToDB.Internal.DataProvider.BasicBulkCopy.TraceAction(LinqToDB.Data.DataConnection! dataConnection, System.Func<string!>! commandText, System.Func<int>! action) -> void
LinqToDB.Internal.DataProvider.BasicBulkCopy.TraceActionAsync(LinqToDB.Data.DataConnection! dataConnection, System.Func<string!>! commandText, System.Func<System.Threading.Tasks.Task<int>!>! action) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.BulkCopyReader
LinqToDB.Internal.DataProvider.BulkCopyReader.BulkCopyReader(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.List<LinqToDB.Mapping.ColumnDescriptor!>! columns) -> void
LinqToDB.Internal.DataProvider.BulkCopyReader.Count -> int
LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter
LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Parameter() -> void
LinqToDB.Internal.DataProvider.BulkCopyReader<T>
LinqToDB.Internal.DataProvider.BulkCopyReader<T>.BulkCopyReader(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.List<LinqToDB.Mapping.ColumnDescriptor!>! columns, System.Collections.Generic.IAsyncEnumerable<T>! collection, System.Threading.CancellationToken cancellationToken) -> void
LinqToDB.Internal.DataProvider.BulkCopyReader<T>.BulkCopyReader(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.List<LinqToDB.Mapping.ColumnDescriptor!>! columns, System.Collections.Generic.IEnumerable<T>! collection) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.ClickHouseBulkCopy(LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.ClickHouseDataProvider(string! name, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.Provider.get -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.ClientMappingSchema
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.ClientMappingSchema.ClientMappingSchema() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.MySqlMappingSchema
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.MySqlMappingSchema.MySqlMappingSchema() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.OctonicaMappingSchema
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseMappingSchema.OctonicaMappingSchema.OctonicaMappingSchema() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.ClientDecimalToStringConverter.get -> System.Func<object!, string!>?
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.ClientDecimalType.get -> System.Type?
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.HasFaultyClientDecimalType.get -> bool
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnSettings
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnSettings.ClickHouseColumnSettings(object! instance) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnSettings.ClickHouseColumnSettings(System.Type! columnType) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.ClickHouseColumnWriter(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.ConfigureColumn(int ordinal, LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnSettings! columnSettings) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.Dispose() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.EndWrite() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.EndWriteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.WriteTable(System.Collections.Generic.IReadOnlyList<object!>! columns, int rowCount) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.OctonicaWrappers.ClickHouseColumnWriter.WriteTableAsync(System.Collections.Generic.IReadOnlyList<object!>! columns, int rowCount, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.TransactionType.get -> System.Type?
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector.ClickHouseProviderDetector() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.ClickHouseSchemaProvider() -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.ClickHouseSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ClickHouseSqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions! providerOptions) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer.ClickHouseSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.DataOptions! dataOptions) -> void
LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer.ProviderOptions.get -> LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.ClickHouseMemberTranslator() -> void
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.MathMemberTranslator
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.MathMemberTranslator.MathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>.DatabaseSpecificQueryable(System.Linq.IQueryable<TSource>! queryable) -> void
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>.ElementType.get -> System.Type!
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TSource>!
LinqToDB.Internal.DataProvider.DatabaseSpecificQueryable<TSource>.Provider.get -> System.Linq.IQueryProvider!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.CreateQuery(System.Linq.Expressions.Expression! expression) -> System.Linq.IQueryable!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.CreateQuery<TElement>(System.Linq.Expressions.Expression! expression) -> System.Linq.IQueryable<TElement>!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.DatabaseName.get -> string?
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.DatabaseSpecificTable(LinqToDB.ITable<TSource>! table) -> void
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.ElementType.get -> System.Type!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.Execute(System.Linq.Expressions.Expression! expression) -> object!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.Execute<TResult>(System.Linq.Expressions.Expression! expression) -> TResult
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.ExecuteAsync<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.ExecuteAsyncEnumerable<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<TResult>!>!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.GetEnumerator() -> System.Collections.Generic.IEnumerator<TSource>!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.Provider.get -> System.Linq.IQueryProvider!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.SchemaName.get -> string?
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.ServerName.get -> string?
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.TableID.get -> string?
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.TableName.get -> string!
LinqToDB.Internal.DataProvider.DatabaseSpecificTable<TSource>.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Internal.DataProvider.DataProviderBase
LinqToDB.Internal.DataProvider.DataProviderBase.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.DataProviderBase.DataProviderBase(string! name, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.FindExpression(LinqToDB.Internal.DataProvider.ReaderInfo info, out System.Linq.Expressions.Expression? expr) -> bool
LinqToDB.Internal.DataProvider.DataProviderBase.ID.get -> int
LinqToDB.Internal.DataProvider.DataProviderBase.Name.get -> string!
LinqToDB.Internal.DataProvider.DataProviderBase.SetCharField(string! dataTypeName, System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, string!>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetCharFieldToType<T>(string! dataTypeName, System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, string!>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetField<TP, T>(string! dataTypeName, System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetField<TP, T>(string! dataTypeName, System.Type! fieldType, System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetField<TP, T>(System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetProviderField<TP, T, TS>(System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetProviderField<TP, T>(System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetProviderField<TP, T>(System.Type! providerFieldType, System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetToType<TP, T, TF>(string! dataTypeName, System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SetToType<TP, T, TF>(System.Linq.Expressions.Expression<System.Func<TP, int, T>!>! expr) -> void
LinqToDB.Internal.DataProvider.DataProviderBase.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.DataProvider.DataProviderExtensions
LinqToDB.Internal.DataProvider.DataProviderFactoryBase
LinqToDB.Internal.DataProvider.DataProviderFactoryBase.DataProviderFactoryBase() -> void
LinqToDB.Internal.DataProvider.DataProviderFactoryBase.GetAssemblyName(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> string?
LinqToDB.Internal.DataProvider.DataProviderFactoryBase.GetAttribute(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes, string! attributeName) -> string?
LinqToDB.Internal.DataProvider.DataProviderFactoryBase.GetVersion(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.NamedValue!>! attributes) -> string?
LinqToDB.Internal.DataProvider.DataProviderOptions<T>
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.BulkCopyType.get -> LinqToDB.Data.BulkCopyType
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.BulkCopyType.init -> void
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.DataProviderOptions() -> void
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.DataProviderOptions(LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.DataProviderOptions(LinqToDB.Internal.DataProvider.DataProviderOptions<T!>! original) -> void
LinqToDB.Internal.DataProvider.DataProviderOptions<T>.Deconstruct(out LinqToDB.Data.BulkCopyType BulkCopyType) -> void
LinqToDB.Internal.DataProvider.DataTools
LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy
LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.DB2BulkCopy(LinqToDB.Internal.DataProvider.DB2.DB2DataProvider! provider) -> void
LinqToDB.Internal.DataProvider.DB2.DB2BulkCopyShared
LinqToDB.Internal.DataProvider.DB2.DB2DataProvider
LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.DB2DataProvider(string! name, LinqToDB.DataProvider.DB2.DB2Version version) -> void
LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.Version.get -> LinqToDB.DataProvider.DB2.DB2Version
LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider
LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.DB2LUWSchemaProvider(LinqToDB.Internal.DataProvider.DB2.DB2DataProvider! provider) -> void
LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.DefaultSchema.get -> string?
LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetSchemaFilter(string! schemaNameField) -> string!
LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder
LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.DB2LUWSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.DB2.DB2MappingSchema
LinqToDB.Internal.DataProvider.DB2.DB2MappingSchema.DB2LUWMappingSchema
LinqToDB.Internal.DataProvider.DB2.DB2MappingSchema.DB2LUWMappingSchema.DB2LUWMappingSchema() -> void
LinqToDB.Internal.DataProvider.DB2.DB2MappingSchema.DB2zOSMappingSchema
LinqToDB.Internal.DataProvider.DB2.DB2MappingSchema.DB2zOSMappingSchema.DB2zOSMappingSchema() -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopy.get -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter.Create.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy!>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter.CreateColumnMapping.get -> System.Func<int, string!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping!>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.ConnectionWrapper.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection!>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BinaryType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BlobType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.BulkCopyTimeout.get -> int
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.BulkCopyTimeout.set -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.ColumnMappings.get -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.ColumnMappings.set -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.DB2BulkCopy(LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection! connection, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions options) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.DB2BulkCopy(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.DB2RowsCopied -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventHandler?
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.DestinationTableName.get -> string?
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.DestinationTableName.set -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.Dispose() -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.NotifyAfter.get -> int
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.NotifyAfter.set -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopy.WriteToServer(System.Data.IDataReader! dataReader) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping.DB2BulkCopyColumnMapping(int source, string! destination) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping.DB2BulkCopyColumnMapping(object! instance) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection.Add(LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping! bulkCopyColumnMapping) -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMapping!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyColumnMappingCollection.DB2BulkCopyColumnMappingCollection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.KeepIdentity = 1 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.TableLock = 2 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions.Truncate = 4 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2BulkCopyOptions
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ClobType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.DB2Connection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.DB2Connection(string! connectionString) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Connection.eServerType.get -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2DateTimeType.get -> System.Type?
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2DateType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2DecimalFloatType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2DecimalType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2DoubleType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Int16Type.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Int32Type.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Int64Type.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Real370Type.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RealType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowIdType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.Abort.get -> bool
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.Abort.set -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.DB2RowsCopiedEventArgs(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs.RowsCopied.get -> int
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventHandler
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_390 = 2 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_400 = 4 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_IDS = 16 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_UNKNOWN = 0 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_UW = 1 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_VM = 24 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_VM_VSE = 8 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes.DB2_VSE = 40 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2ServerTypes
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2StringType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2TimeSpanType.get -> System.Type?
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2TimeStampType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2TimeType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.BigInt = 3 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.BigSerial = 30 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Binary = 15 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.BinaryXml = 31 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Blob = 22 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Boolean = 1015 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Byte = 40 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Char = 12 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Char1 = 1001 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Clob = 21 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Cursor = 33 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Datalink = 24 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Date = 9 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.DateTime = 38 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.DbClob = 23 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Decimal = 7 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.DecimalFloat = 28 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Double = 5 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.DynArray = 29 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Float = 6 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Graphic = 18 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Int8 = 35 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Integer = 2 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.IntervalDayFraction = 1005 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.IntervalYearMonth = 1004 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Invalid = 0 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.List = 1010 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.LongVarBinary = 17 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.LongVarChar = 14 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.LongVarGraphic = 20 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Money = 37 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.MultiSet = 1009 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.NChar = 1006 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Null = 1003 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Numeric = 8 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.NVarChar = 1007 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Other = 1016 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Real = 4 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Real370 = 27 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Row = 1011 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.RowId = 25 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Serial = 34 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Serial8 = 36 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Set = 1008 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.SmallFloat = 1002 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.SmallInt = 1 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.SmartLobLocator = 1014 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.SQLUDTFixed = 1013 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.SQLUDTVar = 1012 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Text = 39 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Time = 10 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Timestamp = 11 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.TimeStampWithTimeZone = 32 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.VarBinary = 16 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.VarChar = 13 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.VarGraphic = 19 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type.Xml = 26 -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2XmlType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2BinaryReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2BlobReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2ClobReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2DateReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2DateTimeReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2DecimalFloatReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2DecimalReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2DoubleReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2Int16ReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2Int32ReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2Int64ReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2Real370ReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2RealReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2RowIdReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2StringReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2TimeReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2TimeStampReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDB2XmlReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.IsDB2BinaryNull.get -> System.Func<object!, bool>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.ProviderTypesNamespace.get -> string!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type>!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector
LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.DB2ProviderDetector() -> void
LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.Provider
LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase
LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.DB2SqlBuilderBase(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.DB2SqlBuilderBase(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.DB2SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.DB2.DB2SqlOptimizer
LinqToDB.Internal.DataProvider.DB2.DB2SqlOptimizer.DB2SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider
LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.DB2zOSSchemaProvider(LinqToDB.Internal.DataProvider.DB2.DB2DataProvider! provider) -> void
LinqToDB.Internal.DataProvider.DB2.DB2zOSSqlBuilder
LinqToDB.Internal.DataProvider.DB2.DB2zOSSqlBuilder.DB2zOSSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.DB2MathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MemberTranslator() -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.Adapter.get -> TProviderMappings
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.DynamicDataProviderBase(string! name, LinqToDB.Mapping.MappingSchema! mappingSchema, TProviderMappings providerMappings) -> void
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetField(System.Type! fieldType, string! dataTypeName, string! methodName, bool throwException = true, System.Type? dataReaderType = null) -> bool
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetGetFieldValueReader(System.Type! toType, System.Type! fieldType, System.Type? dataReaderType = null, string? typeName = null) -> bool
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetProviderField(System.Type! fieldType, string! methodName, System.Type? dataReaderType = null) -> void
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetProviderField(System.Type! toType, System.Type! fieldType, string! methodName, bool throwException = true, System.Type? dataReaderType = null, string? typeName = null) -> bool
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetProviderField<TField>(string! methodName, System.Type? dataReaderType = null) -> void
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetProviderField<TTo, TField>(string! methodName, bool throwException = true, System.Type? dataReaderType = null) -> bool
LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.SetToTypeField(System.Type! toType, string! methodName, System.Type? dataReaderType = null) -> void
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.Firebird3SqlBuilder(LinqToDB.DataProvider.IDataProvider! provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.Firebird3SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.Firebird3SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlOptimizer
LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlOptimizer.Firebird3SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Firebird.Firebird4SqlBuilder
LinqToDB.Internal.DataProvider.Firebird.Firebird4SqlBuilder.Firebird4SqlBuilder(LinqToDB.DataProvider.IDataProvider! provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy
LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.FirebirdBulkCopy(LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider! dataProvider) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider
LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.FirebirdDataProvider(string! name, LinqToDB.DataProvider.Firebird.FirebirdVersion version) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.Version.get -> LinqToDB.DataProvider.Firebird.FirebirdVersion
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird25MappingSchema
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird25MappingSchema.Firebird25MappingSchema() -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird3MappingSchema
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird3MappingSchema.Firebird3MappingSchema() -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird4MappingSchema
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird4MappingSchema.Firebird4MappingSchema() -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird5MappingSchema
LinqToDB.Internal.DataProvider.Firebird.FirebirdMappingSchema.Firebird5MappingSchema.Firebird5MappingSchema() -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.ClearAllPools.get -> System.Action!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Array = 0 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.BigInt = 1 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Binary = 2 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Boolean = 3 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Char = 4 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Date = 5 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Dec16 = 21 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Dec34 = 22 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Decimal = 6 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Double = 7 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Float = 8 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Guid = 9 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Int128 = 23 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Integer = 10 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Numeric = 11 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.SmallInt = 12 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Text = 13 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.Time = 14 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.TimeStamp = 15 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.TimeStampTZ = 17 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.TimeStampTZEx = 18 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.TimeTZ = 19 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.TimeTZEx = 20 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType.VarChar = 16 -> LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDecFloatType.get -> System.Type?
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbZonedDateTimeType.get -> System.Type?
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbZonedTimeType.get -> System.Type?
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType>!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.IsDateOnlySupported.get -> bool
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.ProviderTypesNamespace.get -> string?
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.FbDbType>!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.FirebirdProviderDetector() -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.Provider
LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider
LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.FirebirdSchemaProvider(LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.FirebirdSqlBuilder(LinqToDB.DataProvider.IDataProvider! provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.FirebirdSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.FirebirdSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer
LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.FirebirdSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator.Firebird5DateFunctionsTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator.Firebird5DateFunctionsTranslator.Firebird5DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator.Firebird5MemberTranslator() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.FirebirdDateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Alias = 13 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Database = 11 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.DataType = 17 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Field = 1 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.ForeignKey = 3 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Function = 9 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Index = 2 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Keyword = 16 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Other = 18 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Parameter = 14 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.PrimaryKey = 4 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Schema = 12 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Sequence = 6 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.StoredProcedure = 8 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Table = 0 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Trigger = 7 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.UniqueKey = 5 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.Variable = 15 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierKind.View = 10 -> LinqToDB.Internal.DataProvider.IdentifierKind
LinqToDB.Internal.DataProvider.IdentifierServiceBase
LinqToDB.Internal.DataProvider.IdentifierServiceBase.IdentifierServiceBase() -> void
LinqToDB.Internal.DataProvider.IdentifierServiceSimple
LinqToDB.Internal.DataProvider.IdentifierServiceSimple.IdentifierServiceSimple(int maxLength) -> void
LinqToDB.Internal.DataProvider.IdentifierServiceSimple.MaxLength.get -> int
LinqToDB.Internal.DataProvider.IdentifiersHelper
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.IDynamicProviderAdapter.TransactionType.get -> System.Type?
LinqToDB.Internal.DataProvider.IExecutionScope
LinqToDB.Internal.DataProvider.IIdentifierService
LinqToDB.Internal.DataProvider.IIdentifierService.CorrectAlias(string! alias) -> string!
LinqToDB.Internal.DataProvider.IIdentifierService.IsFit(LinqToDB.Internal.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy
LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.InformixBulkCopy(LinqToDB.Internal.DataProvider.Informix.InformixDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Informix.InformixDataProvider
LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.InformixDataProvider(string! name, LinqToDB.DataProvider.Informix.InformixProvider provider) -> void
LinqToDB.Internal.DataProvider.Informix.InformixMappingSchema
LinqToDB.Internal.DataProvider.Informix.InformixMappingSchema.DB2MappingSchema
LinqToDB.Internal.DataProvider.Informix.InformixMappingSchema.DB2MappingSchema.DB2MappingSchema() -> void
LinqToDB.Internal.DataProvider.Informix.InformixMappingSchema.IfxMappingSchema
LinqToDB.Internal.DataProvider.Informix.InformixMappingSchema.IfxMappingSchema.IfxMappingSchema() -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.BlobType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.ClobType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.DateTimeType.get -> System.Type?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.DB2BulkCopy.get -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.DecimalType.get -> System.Type?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetBigIntReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetDateTimeReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetDB2Type.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type>?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetDecimalReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetIfxType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType>?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetTimeSpanReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping.IfxBulkCopyColumnMapping(int source, string! destination) -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping.IfxBulkCopyColumnMapping(object! instance) -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection.Add(LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping! bulkCopyColumnMapping) -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMapping!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyColumnMappingCollection.IfxBulkCopyColumnMappingCollection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.KeepIdentity = 1 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.TableLock = 2 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions.Truncate = 4 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxBulkCopyOptions
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.Abort.get -> bool
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.Abort.set -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.IfxRowsCopiedEventArgs(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs.RowsCopied.get -> int
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventHandler
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.BigInt = 203 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.BigSerial = 230 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Binary = 215 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Blob = 110 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Boolean = 126 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Byte = 11 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Char = 0 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Char1 = 1001 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Clob = 111 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Datalink = 224 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Date = 7 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.DateTime = 10 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.DbClob = 223 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Decimal = 5 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.DecimalFloat = 228 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Double = 205 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.DynArray = 229 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Float = 3 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Graphic = 218 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Int8 = 17 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Integer = 2 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.IntervalDayFraction = 1499 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.IntervalYearMonth = 1400 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Invalid = 200 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.List = 21 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.LongVarBinary = 217 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.LongVarChar = 101 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.LongVarGraphic = 220 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.LVarChar = 101 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Money = 8 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.MultiSet = 20 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.NChar = 15 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Null = 9 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Numeric = 208 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.NVarChar = 16 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Other = 99 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Real = 4 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Real370 = 227 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Row = 22 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.RowId = 225 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Serial = 6 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Serial8 = 18 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Set = 19 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.SmallFloat = 4 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.SmallInt = 1 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.SmartLOBLocator = 112 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.SQLUDTFixed = 41 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.SQLUDTVar = 40 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Text = 12 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Time = 210 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Timestamp = 211 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.VarBinary = 216 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.VarChar = 13 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.VarGraphic = 219 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType.Xml = 226 -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IsIDSProvider.get -> bool
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.ProviderTypesNamespace.get -> string!
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.SetDB2Type.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2Type>?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.SetIfxType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxType>?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.TimeSpanFactory.get -> System.Func<System.TimeSpan, object!>?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.TimeSpanType.get -> System.Type?
LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector
LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector.InformixProviderDetector() -> void
LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider
LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.InformixSchemaProvider(LinqToDB.Internal.DataProvider.Informix.InformixDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder
LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.InformixSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.InformixSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer
LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.InformixSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.InformixMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.IQueryParametersNormalizer
LinqToDB.Internal.DataProvider.IQueryParametersNormalizer.Normalize(string? originalName) -> string?
LinqToDB.Internal.DataProvider.MultipleRowsHelper
LinqToDB.Internal.DataProvider.MultipleRowsHelper.BatchSize -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.CurrentCount -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.Execute() -> bool
LinqToDB.Internal.DataProvider.MultipleRowsHelper.ExecuteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
LinqToDB.Internal.DataProvider.MultipleRowsHelper.HeaderSize -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.LastRowParameterIndex -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.LastRowStringIndex -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.MultipleRowsHelper(LinqToDB.IDataContext! dataConnection, LinqToDB.DataOptions! options, System.Type! entityType) -> void
LinqToDB.Internal.DataProvider.MultipleRowsHelper.ParameterIndex -> int
LinqToDB.Internal.DataProvider.MultipleRowsHelper.SetHeader() -> void
LinqToDB.Internal.DataProvider.MultipleRowsHelper.SuppressCloseAfterUse.get -> bool
LinqToDB.Internal.DataProvider.MultipleRowsHelper.SuppressCloseAfterUse.set -> void
LinqToDB.Internal.DataProvider.MultipleRowsHelper.TableName -> string?
LinqToDB.Internal.DataProvider.MultipleRowsHelper<T>
LinqToDB.Internal.DataProvider.MultipleRowsHelper<T>.MultipleRowsHelper(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options) -> void
LinqToDB.Internal.DataProvider.MySql.MySql57SqlBuilder
LinqToDB.Internal.DataProvider.MySql.MySql57SqlBuilder.MySql57SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.MySql.MySql80SqlBuilder
LinqToDB.Internal.DataProvider.MySql.MySql80SqlBuilder.MySql80SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy
LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MySqlBulkCopy(LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider
LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.MySqlDataProvider(string! name, LinqToDB.DataProvider.MySql.MySqlVersion version, LinqToDB.DataProvider.MySql.MySqlProvider provider) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.Provider.get -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.Version.get -> LinqToDB.DataProvider.MySql.MySqlVersion
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MariaDB10MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MariaDB10MappingSchema.MariaDB10MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySql57MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySql57MappingSchema.MySql57MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySql80MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySql80MappingSchema.MySql80MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnector57MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnector57MappingSchema.MySqlConnector57MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnector80MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnector80MappingSchema.MySqlConnector80MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnectorMariaDB10MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlConnectorMariaDB10MappingSchema.MySqlConnectorMariaDB10MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlData57MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlData57MappingSchema.MySqlData57MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlData80MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlData80MappingSchema.MySqlData80MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlDataMariaDB10MappingSchema
LinqToDB.Internal.DataProvider.MySql.MySqlMappingSchema.MySqlDataMariaDB10MappingSchema.MySqlDataMariaDB10MappingSchema() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.BulkCopy.get -> LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.BulkCopyAdapter?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.BulkCopyAdapter
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetDateOnlyMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetDateTimeOffsetMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, object!>!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetMySqlDateTimeMethodName.get -> string!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetMySqlDecimalMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetSByteMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetTimeOnlyMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetTimeSpanMethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetUInt16MethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetUInt32MethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetUInt64MethodName.get -> string?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.IsDateOnlySupported.get -> bool
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDateTimeType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDecimalGetter.get -> System.Func<object!, string!>?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlDecimalType.get -> System.Type?
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.MySqlGeometryType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.ProviderType.get -> LinqToDB.DataProvider.MySql.MySqlProvider
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.ProviderTypesNamespace.get -> string!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector
LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.MySqlProviderDetector() -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider
LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.MySqlSchemaProvider(LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder
LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.HintBuilder.get -> System.Text.StringBuilder?
LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.HintBuilder.set -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.MySqlSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.MySqlSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.MySqlSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.MySql.MySqlSqlOptimizer
LinqToDB.Internal.DataProvider.MySql.MySqlSqlOptimizer.MySqlSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.MySqlMemberTranslator() -> void
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.NoopQueryParametersNormalizer
LinqToDB.Internal.DataProvider.NoopQueryParametersNormalizer.Normalize(string? originalName) -> string?
LinqToDB.Internal.DataProvider.OdbcProviderAdapter
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.BigInt = 1 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Binary = 2 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Bit = 3 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Char = 4 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Date = 23 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.DateTime = 5 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Decimal = 6 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Double = 8 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Image = 9 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Int = 10 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.NChar = 11 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.NText = 12 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Numeric = 7 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.NVarChar = 13 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Real = 14 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.SmallDateTime = 16 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.SmallInt = 17 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Text = 18 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Time = 24 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.Timestamp = 19 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.TinyInt = 20 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.UniqueIdentifier = 15 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.VarBinary = 21 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType.VarChar = 22 -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>!
LinqToDB.Internal.DataProvider.OdbcProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.CacheDeferred = 1024 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsBookmark = 1 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsCollection = 32768 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsDefaultStream = 16384 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsFixedLength = 16 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsLong = 128 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsNullable = 32 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsRow = 262144 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsRowId = 256 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsRowset = 131072 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsRowUrl = 8192 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsRowVer = 512 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.IsStream = 65536 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.MayBeNull = 64 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.MayDefer = 2 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.Reserved = 4096 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.RowSpecificColumn = 524288 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.ScaleIsNegative = 2048 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.Write = 4 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags.WriteUnknown = 8 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ColumnFlags
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType>!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.GetOleDbSchemaTable.get -> System.Func<System.Data.Common.DbConnection!, System.Guid, object![]?, System.Data.DataTable!>!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.BigInt = 20 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Binary = 128 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Boolean = 11 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.BSTR = 8 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Char = 129 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Currency = 6 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Date = 7 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.DBDate = 133 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.DBTime = 134 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.DBTimeStamp = 135 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Decimal = 14 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Double = 5 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Empty = 0 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Error = 10 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Filetime = 64 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Guid = 72 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.IDispatch = 9 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Integer = 3 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.IUnknown = 13 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.LongVarBinary = 205 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.LongVarChar = 201 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.LongVarWChar = 203 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Numeric = 131 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.PropVariant = 138 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Single = 4 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.SmallInt = 2 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.TinyInt = 16 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.UnsignedBigInt = 21 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.UnsignedInt = 19 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.UnsignedSmallInt = 18 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.UnsignedTinyInt = 17 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.VarBinary = 204 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.VarChar = 200 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.Variant = 12 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.VarNumeric = 139 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.VarWChar = 202 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType.WChar = 130 -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OleDbProviderAdapter.OleDbType>!
LinqToDB.Internal.DataProvider.OleDbProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.Oracle11ParametersNormalizer
LinqToDB.Internal.DataProvider.Oracle.Oracle11ParametersNormalizer.Oracle11ParametersNormalizer() -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlBuilder
LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlBuilder.Oracle11SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer
LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer.Oracle11SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer.ReplaceTakeSkipWithRowNum(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.DataProvider.Oracle.Oracle122ParametersNormalizer
LinqToDB.Internal.DataProvider.Oracle.Oracle122ParametersNormalizer.Oracle122ParametersNormalizer() -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.Oracle12SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor.Oracle12SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlOptimizer
LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlOptimizer.Oracle12SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy
LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.OracleBulkCopy(LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider! provider, LinqToDB.DataProvider.Oracle.AlternativeBulkCopy useAlternativeBulkCopy) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider
LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.OracleDataProvider(string! name, LinqToDB.DataProvider.Oracle.OracleProvider provider, LinqToDB.DataProvider.Oracle.OracleVersion version) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.Provider.get -> LinqToDB.DataProvider.Oracle.OracleProvider
LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.Version.get -> LinqToDB.DataProvider.Oracle.OracleVersion
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Devart11MappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Devart11MappingSchema.Devart11MappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.DevartMappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.DevartMappingSchema.DevartMappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Managed11MappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Managed11MappingSchema.Managed11MappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema.ManagedMappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Native11MappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.Native11MappingSchema.Native11MappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema
LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema.NativeMappingSchema() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BindingByNameEnabled.get -> bool
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.DisableIndexes = 1 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.DisableTriggers = 2 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.KeepConstraints = 4 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.KeepExternalForeignKeys = 8 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.KeepPrimaryKeys = 16 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.KeepSelfReferencedForeignKeys = 32 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.NoLogging = 64 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.UseArrayBinding = 128 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions.UseInternalTransaction = 256 -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.BulkCopyOptions
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.CreateOracleTimeStampTZ(System.DateTimeOffset dto, string! offset) -> object!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ExecuteArray.get -> System.Func<System.Data.Common.DbCommand!, int, int>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.GetDatabaseName.get -> System.Func<System.Data.Common.DbConnection!, string!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.GetHostName.get -> System.Func<System.Data.Common.DbConnection!, string!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleBFileType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleBinaryType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleBlobType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleClobType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleDateType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleDecimalType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleIntervalDSType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleIntervalYMType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleRefCursorType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleStringType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleTimeStampLTZType.get -> System.Type?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleTimeStampType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleTimeStampTZType.get -> System.Type?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.OracleXmlTypeType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ProviderTypesNamespace.get -> string!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadDateTimeOffsetFromOracleTimeStamp.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, System.DateTimeOffset>!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadDateTimeOffsetFromOracleTimeStampTZ.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, System.DateTimeOffset>!>!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadOracleDecimalToDecimal.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, decimal>!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadOracleDecimalToDecimalAdv.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, decimal>!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadOracleDecimalToInt.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, int>!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.ReadOracleDecimalToLong.get -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, long>!>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.SetArrayBindCount.get -> System.Action<System.Data.Common.DbCommand!, int>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.SetBindByName.get -> System.Action<System.Data.Common.DbCommand!, bool>!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.SetInitialLONGFetchSize.get -> System.Action<System.Data.Common.DbCommand!, int>?
LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector
LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector.OracleProviderDetector() -> void
LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider
LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.OracleSchemaProvider(LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase
LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMultiInsertClause(LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement! statement) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.HintBuilder -> System.Text.StringBuilder?
LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.OracleSqlBuilderBase(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.OracleSqlBuilderBase(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.OracleSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.OracleMathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ApplyDbTypeFlags(LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType type, bool isArray, bool isRange, bool isMultiRange, bool convertAlways) -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.BeginBinaryImport.get -> System.Func<System.Data.Common.DbConnection!, string!, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter!>!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.BeginBinaryImportAsync.get -> System.Func<System.Data.Common.DbConnection!, string!, System.Threading.CancellationToken, System.Threading.Tasks.Task<LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter!>!>?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ConnectionWrapper.get -> System.Func<System.Data.Common.DbConnection!, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection!>!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.GetDateReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType>!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.GetIntervalReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.GetTimeStampReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.IsDbTypeSupported(LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType type) -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Cancel() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Complete() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Complete5() -> ulong
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.CompleteAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<ulong>
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Dispose() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.HasComplete.get -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.HasComplete5.get -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.NpgsqlBinaryImporter(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.StartRow() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.StartRowAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.SupportsAsync.get -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Write<T>(T value, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.Write<T>(T value, string! dataTypeName) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.WriteAsync<T>(T value, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType npgsqlDbType, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBinaryImporter.WriteAsync<T>(T value, string! dataTypeName, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlBoxType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlCidrType.get -> System.Type?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlCircleType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.NpgsqlConnection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.NpgsqlConnection(string! connectionString) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlConnection.PostgreSqlVersion.get -> System.Version!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDateTimeType.get -> System.Type?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDateType.get -> System.Type?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Abstime = 33 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Array = -2147483648 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Bigint = 1 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.BigIntMultirange = 536870913 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.BigIntRange = 1073741825 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Bit = 25 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Boolean = 2 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Box = 3 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Bytea = 4 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Char = 6 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Cid = 43 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Cidr = 44 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Circle = 5 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Citext = 51 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Date = 7 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.DateMultirange = 536870919 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.DateRange = 1073741831 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Double = 8 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Geography = 55 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Geometry = 50 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Hstore = 37 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Inet = 24 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Int2Vector = 52 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Integer = 9 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.IntegerMultirange = 536870921 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.IntegerRange = 1073741833 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.InternalChar = 38 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Interval = 30 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Json = 35 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Jsonb = 36 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.JsonPath = 57 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Line = 10 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.LQuery = 61 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.LSeg = 11 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.LTree = 60 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.LTxtQuery = 62 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.MacAddr = 34 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.MacAddr8 = 54 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Money = 12 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Multirange = 536870912 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Name = 32 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Numeric = 13 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.NumericMultirange = 536870925 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.NumericRange = 1073741837 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Oid = 41 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Oidvector = 29 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Path = 14 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.PgLsn = 59 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Point = 15 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Polygon = 16 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Range = 1073741824 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Real = 17 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Refcursor = 23 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Regconfig = 56 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Regtype = 49 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Smallint = 18 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Text = 19 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Tid = 53 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Time = 20 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Timestamp = 21 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampMultirange = 536870933 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampRange = 1073741845 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTZ = 26 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTz = 26 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTzMultirange = 536870938 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimestampTzRange = 1073741850 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimeTZ = 31 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TimeTz = 31 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TsQuery = 46 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.TsVector = 45 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Unknown = 40 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Uuid = 27 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Varbit = 39 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Varchar = 22 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Xid = 42 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Xid8 = 64 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType.Xml = 28 -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlInetType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlIntervalReader.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlIntervalType.get -> System.Type?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlLineType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlLSegType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlPathType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlPointType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlPolygonType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlRangeTType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlTimeSpanType.get -> System.Type?
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.ProviderTypesNamespace.get -> string!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.NpgsqlDbType>!
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.SupportsBigInteger.get -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.PostgreSQLBulkCopy(LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider! dataProvider) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.HasMacAddr8.get -> bool
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.PostgreSQLDataProvider(LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.PostgreSQLDataProvider(string! name, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.Version.get -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL15MappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL15MappingSchema.PostgreSQL15MappingSchema() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL18MappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL18MappingSchema.PostgreSQL18MappingSchema() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL92MappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL92MappingSchema.PostgreSQL92MappingSchema() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL93MappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL93MappingSchema.PostgreSQL93MappingSchema() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL95MappingSchema
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLMappingSchema.PostgreSQL95MappingSchema.PostgreSQL95MappingSchema() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.PostgreSQLProviderDetector() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.Provider
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.PostgreSQLSchemaProvider(LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSql15Builder
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSql15Builder.PostgreSQLSql15Builder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.PostgreSQLSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.PostgreSQLSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.PostgreSQLSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlOptimizer
LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlOptimizer.PostgreSQLSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.MathMemberTranslator
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.MathMemberTranslator.MathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.PostgreSQLMemberTranslator() -> void
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.AutoDetectProvider.get -> bool
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.AutoDetectProvider.set -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.AutoDetectVersion.get -> TVersion
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.AutoDetectVersion.set -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.CreateOptions(LinqToDB.DataOptions! options, TVersion dialect, TProvider provider) -> LinqToDB.DataOptions!
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.DefaultVersion.get -> TVersion
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.DefaultVersion.set -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.DetectServerVersion(LinqToDB.Data.ConnectionOptions! options, TProvider provider) -> TVersion?
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.ProviderDetectorBase() -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.ProviderDetectorBase(TVersion autoDetectVersion, TVersion defaultVersion) -> void
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.TryGetCachedServerVersion(string! connectionString, out TVersion? version) -> bool
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider>
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider>.NoDialect
LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider>.ProviderDetectorBase() -> void
LinqToDB.Internal.DataProvider.ReaderInfo
LinqToDB.Internal.DataProvider.ReaderInfo.DataReaderType.get -> System.Type?
LinqToDB.Internal.DataProvider.ReaderInfo.DataReaderType.init -> void
LinqToDB.Internal.DataProvider.ReaderInfo.DataTypeName.get -> string?
LinqToDB.Internal.DataProvider.ReaderInfo.DataTypeName.init -> void
LinqToDB.Internal.DataProvider.ReaderInfo.Equals(LinqToDB.Internal.DataProvider.ReaderInfo other) -> bool
LinqToDB.Internal.DataProvider.ReaderInfo.FieldType.get -> System.Type?
LinqToDB.Internal.DataProvider.ReaderInfo.FieldType.init -> void
LinqToDB.Internal.DataProvider.ReaderInfo.ProviderFieldType.get -> System.Type?
LinqToDB.Internal.DataProvider.ReaderInfo.ProviderFieldType.init -> void
LinqToDB.Internal.DataProvider.ReaderInfo.ReaderInfo() -> void
LinqToDB.Internal.DataProvider.ReaderInfo.ToType.get -> System.Type?
LinqToDB.Internal.DataProvider.ReaderInfo.ToType.init -> void
LinqToDB.Internal.DataProvider.ReservedWords
LinqToDB.Internal.DataProvider.SapHana.SapHanaBulkCopy
LinqToDB.Internal.DataProvider.SapHana.SapHanaBulkCopy.SapHanaBulkCopy(LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider
LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.SapHanaDataProvider(string! name, LinqToDB.DataProvider.SapHana.SapHanaProvider provider) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaMappingSchema
LinqToDB.Internal.DataProvider.SapHana.SapHanaMappingSchema.NativeMappingSchema
LinqToDB.Internal.DataProvider.SapHana.SapHanaMappingSchema.NativeMappingSchema.NativeMappingSchema() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaMappingSchema.OdbcMappingSchema
LinqToDB.Internal.DataProvider.SapHana.SapHanaMappingSchema.OdbcMappingSchema.OdbcMappingSchema() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSchemaProvider
LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSchemaProvider.SapHanaOdbcSchemaProvider() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSqlBuilder
LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSqlBuilder.SapHanaOdbcSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.CreateBulkCopyColumnMapping.get -> System.Func<int, string!, LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping!>?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetDateTimeOffsetMethod.get -> string?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType>?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetHanaDecimalMethod.get -> string?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetOdbcDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetRealVectorMethod.get -> string?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.GetTimeSpanMethod.get -> string?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping.HanaBulkCopyColumnMapping(int source, string! destination) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping.HanaBulkCopyColumnMapping(object! instance) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection.Add(LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping! bulkCopyColumnMapping) -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMapping!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyColumnMappingCollection.HanaBulkCopyColumnMappingCollection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.KeepIdentity = 1 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.TableLock = 2 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions.UseInternalTransaction = 4 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaBulkCopyOptions
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.AlphaNum = 1 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.BigInt = 2 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Blob = 3 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Boolean = 4 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Clob = 5 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Date = 6 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Decimal = 7 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Double = 8 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Integer = 9 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.NClob = 10 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.NVarChar = 11 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Real = 12 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.RealVector = 13 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.SecondDate = 14 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.ShortText = 15 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.SmallDecimal = 16 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.SmallInt = 17 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.TableType = 24 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Text = 18 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.Time = 19 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.TimeStamp = 20 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.TinyInt = 21 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.VarBinary = 22 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType.VarChar = 23 -> LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDecimalType.get -> System.Type?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.Abort.get -> bool
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.Abort.set -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.HanaRowsCopiedEventArgs(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs.RowsCopied.get -> long
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventHandler
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaTransaction
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaTransaction.HanaTransaction() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaDbType>?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.SetOdbcDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.OdbcProviderAdapter.OdbcType>?
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderDetector
LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderDetector.SapHanaProviderDetector() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.DefaultSchema.get -> string!
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.HanaSchemaOptions.get -> LinqToDB.DataProvider.SapHana.GetHanaSchemaOptions?
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.HasAccessForCalculationViews.get -> bool
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.SapHanaSchemaProvider() -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.SchemasFilter.get -> string?
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.SapHanaSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.SapHanaSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.SapHanaSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlOptimizer
LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlOptimizer.SapHanaSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.SapHanaMathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.SimpleServiceProvider
LinqToDB.Internal.DataProvider.SimpleServiceProvider.AddService<T>(T! service) -> void
LinqToDB.Internal.DataProvider.SimpleServiceProvider.GetService(System.Type! serviceType) -> object?
LinqToDB.Internal.DataProvider.SimpleServiceProvider.SimpleServiceProvider() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeBulkCopy
LinqToDB.Internal.DataProvider.SqlCe.SqlCeBulkCopy.SqlCeBulkCopy() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider
LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.SqlCeDataProvider() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.SqlCeDataProvider(string! name, LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeMappingSchema
LinqToDB.Internal.DataProvider.SqlCe.SqlCeMappingSchema.SqlCeMappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.CreateSqlCeEngine.get -> System.Func<string!, LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine!>!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, System.Data.SqlDbType>!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.GetDecimalExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, System.Data.SqlDbType>!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.CreateDatabase() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.Dispose() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.SqlCeEngine(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.SqlCeEngine.SqlCeEngine(string! connectionString) -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.SqlCeSchemaProvider() -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.SqlCeSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.SqlCeSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer
LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer.SqlCeSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.SqlCeMathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy
LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.SQLiteBulkCopy() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider
LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.SQLiteDataProvider(string! name, LinqToDB.DataProvider.SQLite.SQLiteProvider provider) -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteMappingSchema
LinqToDB.Internal.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema
LinqToDB.Internal.DataProvider.SQLite.SQLiteMappingSchema.ClassicMappingSchema.ClassicMappingSchema() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema
LinqToDB.Internal.DataProvider.SQLite.SQLiteMappingSchema.MicrosoftMappingSchema.MicrosoftMappingSchema() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.ClearAllPools.get -> System.Action?
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector
LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector.SQLiteProviderDetector() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider
LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.SQLiteSchemaProvider() -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.SQLiteSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.SQLiteSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlOptimizer
LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlOptimizer.SQLiteSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.SQLiteMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder.SqlServer2005SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.SqlServer2005SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlOptimizer.SqlServer2005SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.SqlServer2008SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor.SqlServer2008SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlOptimizer.SqlServer2008SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.SqlServer2012SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.SqlServer2012SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor.SqlServer2012SqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer.AddOrderByForSkip(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer.SqlServer2012SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer.SqlServer2012SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.DataProvider.SqlServer.SqlServerVersion version) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlBuilder.SqlServer2014SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlBuilder.SqlServer2014SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlOptimizer.SqlServer2014SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.SqlServer2016SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.SqlServer2016SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlOptimizer.SqlServer2016SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlBuilder.SqlServer2017SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlBuilder.SqlServer2017SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlOptimizer.SqlServer2017SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlBuilder.SqlServer2019SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlBuilder.SqlServer2019SqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlOptimizer.SqlServer2019SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlOptimizer.SqlServer2019SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.DataProvider.SqlServer.SqlServerVersion version) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlBuilder.SqlServer2022SqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlOptimizer.SqlServer2022SqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy
LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.SqlServerBulkCopy(LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.AddUdtType(System.Type! type, string! udtName) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.AddUdtType(System.Type! type, string! udtName, object? defaultValue, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.AddUdtType<T>(string! udtName, T defaultValue, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.Provider.get -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.SqlServerDataProvider(string! name, LinqToDB.DataProvider.SqlServer.SqlServerVersion version) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.SqlServerDataProvider(string! name, LinqToDB.DataProvider.SqlServer.SqlServerVersion version, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.Version.get -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchema.SqlServer2005MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchemaMicrosoft.SqlServer2005MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchemaSystem.SqlServer2005MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchema.SqlServer2008MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchemaMicrosoft.SqlServer2008MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchemaSystem.SqlServer2008MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchema.SqlServer2012MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchemaMicrosoft.SqlServer2012MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchemaSystem.SqlServer2012MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchema.SqlServer2014MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchemaMicrosoft.SqlServer2014MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchemaSystem.SqlServer2014MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchema.SqlServer2016MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchemaMicrosoft.SqlServer2016MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchemaSystem.SqlServer2016MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchema.SqlServer2017MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchemaMicrosoft.SqlServer2017MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchemaSystem.SqlServer2017MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchema.SqlServer2019MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchemaMicrosoft.SqlServer2019MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchemaSystem.SqlServer2019MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchema.SqlServer2022MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchemaMicrosoft.SqlServer2022MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchemaSystem.SqlServer2022MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchema
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchema.SqlServer2025MappingSchema() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchemaMicrosoft
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchemaMicrosoft.SqlServer2025MappingSchemaMicrosoft() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchemaSystem
LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchemaSystem.SqlServer2025MappingSchemaSystem() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.CreateBulkCopyColumnMapping(int source, string! destination) -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.CreateConnectionStringBuilder(string! connectionString) -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetDateTimeOffsetReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, System.Data.SqlDbType>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetSqlJsonReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetSqlVectorReaderMethod.get -> string?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetSqlXmlReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetTimeSpanReaderMethod.get -> string!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetTypeName.get -> System.Func<System.Data.Common.DbParameter!, string!>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetUdtTypeName.get -> System.Func<System.Data.Common.DbParameter!, string!>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.JsonDbType.get -> System.Data.SqlDbType
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.JsonDocumentToStringConverter.get -> System.Func<object!, string?>?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.JsonDocumentType.get -> System.Type?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.Provider.get -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, System.Data.SqlDbType>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SetTypeName.get -> System.Action<System.Data.Common.DbParameter!, string!>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SetUdtTypeName.get -> System.Action<System.Data.Common.DbParameter!, string!>!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(int source, string! destination) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(object! instance) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection.Add(LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping! bulkCopyColumnMapping) -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMapping!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyColumnMappingCollection.SqlBulkCopyColumnMappingCollection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.AllowEncryptedValueModifications = 64 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.CheckConstraints = 2 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.FireTriggers = 16 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.KeepIdentity = 1 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.KeepNulls = 8 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.TableLock = 4 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions.UseInternalTransaction = 32 -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlBulkCopyOptions
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.MultipleActiveResultSets.get -> bool
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.MultipleActiveResultSets.set -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.SqlConnectionStringBuilder(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlConnectionStringBuilder.SqlConnectionStringBuilder(string! connectionString) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlDataRecordType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlExceptionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlJsonType.get -> System.Type?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.Abort.get -> bool
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.Abort.set -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.RowsCopied.get -> long
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs.SqlRowsCopiedEventArgs(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventHandler
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlTransaction
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlTransaction.SqlTransaction() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlVectorType.get -> System.Type?
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.VectorDbType.get -> System.Data.SqlDbType
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector
LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.SqlServerProviderDetector() -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.SqlServerSchemaProvider(LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildIdentityInsert(LinqToDB.Internal.SqlQuery.SqlTableSource! table, bool enable) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.SqlServerSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.SqlServerSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.SqlServerSqlExpressionConvertVisitor(bool allowModify, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlServerVersion) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.ReplaceSkipWithRowNumber(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.SqlServerSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.DataProvider.SqlServer.SqlServerVersion sqlVersion) -> void
LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.WrapRootTakeSkipOrderBy(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.DateFunctionsTranslator2005
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.DateFunctionsTranslator2005.DateFunctionsTranslator2005() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.SqlServer2005MemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.SqlTypes2005Translation
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.SqlTypes2005Translation.SqlTypes2005Translation() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator.SqlServer2012DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012MemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.SqlServer2022MathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.SqlServerDateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.SqlServerMathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMemberTranslator() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.StringMemberTranslator
LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.StringMemberTranslator.StringMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy
LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.SybaseBulkCopy(LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider! provider) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider
LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.SybaseDataProvider(string! name, LinqToDB.DataProvider.Sybase.SybaseProvider provider) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.SybaseDataProvider(string! name, LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter! adapter) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseMappingSchema
LinqToDB.Internal.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema
LinqToDB.Internal.DataProvider.Sybase.SybaseMappingSchema.ManagedMappingSchema.ManagedMappingSchema() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema
LinqToDB.Internal.DataProvider.Sybase.SybaseMappingSchema.NativeMappingSchema.NativeMappingSchema() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseParametersNormalizer
LinqToDB.Internal.DataProvider.Sybase.SybaseParametersNormalizer.SybaseParametersNormalizer() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping.AseBulkCopyColumnMapping(object! instance) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping.AseBulkCopyColumnMapping(string! source, string! destination) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection.Add(LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping! bulkCopyColumnMapping) -> int
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMappingCollection.AseBulkCopyColumnMappingCollection(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.CheckConstraints = 1 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.Default = 0 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.EnableBulkLoad_0 = 64 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.EnableBulkLoad_1 = 128 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.EnableBulkLoad_2 = 256 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.FireTriggers = 2 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.KeepIdentity = 4 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.KeepNulls = 8 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.TableLock = 16 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions.UseInternalTransaction = 32 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyOptions
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.BigDateTime = 93 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.BigInt = -5 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Binary = -2 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Bit = -7 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Char = 1 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Date = 91 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.DateTime = 93 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Decimal = 3 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Double = 8 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Image = -4 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Integer = 4 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Money = -200 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.NChar = -204 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Numeric = 2 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.NVarChar = -205 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Real = 7 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.SmallDateTime = -202 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.SmallInt = 5 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.SmallMoney = -201 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Text = -1 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Time = 92 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.TimeStamp = -203 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.TinyInt = -6 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.UniChar = -8 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Unitext = -10 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.UniVarChar = -9 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.UnsignedBigInt = -208 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.UnsignedInt = -207 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.UnsignedSmallInt = -206 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.Unsupported = 0 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.VarBinary = -3 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType.VarChar = 12 -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.Abort.get -> bool
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.Abort.set -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.AseRowsCopiedEventArgs(object! instance, System.Delegate![]! wrappers) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.RowCopied.get -> int
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs.RowCopied.set -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventHandler
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseTransaction
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseTransaction.AseTransaction() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.BulkCopy.get -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter?
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.BulkCopyAdapter.CreateColumnMapping.get -> System.Func<string!, string!, LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseBulkCopyColumnMapping!>!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.CommandType.get -> System.Type!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.ConnectionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.CreateConnection(string! connectionString) -> System.Data.Common.DbConnection!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.DataReaderType.get -> System.Type!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.GetDbType.get -> System.Func<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType>!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.ParameterType.get -> System.Type!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.SetDbType.get -> System.Action<System.Data.Common.DbParameter!, LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseDbType>!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.TransactionType.get -> System.Type!
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector
LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector.SybaseProviderDetector() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider
LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.SybaseSchemaProvider() -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.SybaseSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.SybaseSqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlOptimizer
LinqToDB.Internal.DataProvider.Sybase.SybaseSqlOptimizer.SybaseSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.DateFunctionsTranslator() -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.GuidMemberTranslator
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.GuidMemberTranslator.GuidMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SqlTypesTranslation
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SqlTypesTranslation.SqlTypesTranslation() -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.SybaseMathMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseStingMemberTranslator
LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseStingMemberTranslator.SybaseStingMemberTranslator() -> void
LinqToDB.Internal.DataProvider.TableSpecHintExtensionBuilder
LinqToDB.Internal.DataProvider.TableSpecHintExtensionBuilder.TableSpecHintExtensionBuilder() -> void
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.Add(LinqToDB.Linq.Translation.IMemberTranslator! memberTranslator) -> void
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.CombinedMemberTranslator() -> void
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.CombinedMemberTranslator(System.Collections.Generic.IEnumerable<LinqToDB.Linq.Translation.IMemberTranslator!>! translators) -> void
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.Translators.get -> System.Collections.Generic.List<LinqToDB.Linq.Translation.IMemberTranslator!>!
LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator.Translators.set -> void
LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase
LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.DateFunctionsTranslatorBase() -> void
LinqToDB.Internal.DataProvider.Translation.GuidMemberTranslatorBase
LinqToDB.Internal.DataProvider.Translation.GuidMemberTranslatorBase.GuidMemberTranslatorBase() -> void
LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase
LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.MathMemberTranslatorBase() -> void
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.CombinedMemberTranslator -> LinqToDB.Internal.DataProvider.Translation.CombinedMemberTranslator!
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.MemberTranslatorBase() -> void
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.Registration -> LinqToDB.Internal.DataProvider.Translation.TranslationRegistration!
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.TranslateNoRequiredExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression? objExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags, bool skipIfParameter = true) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression?
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ProcessConvertToBoolean(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ProcessGetValueOrDefault(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ProcessSqlConvert(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ProcessToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, out System.Linq.Expressions.Expression? translated) -> bool
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ProviderMemberTranslatorDefault() -> void
LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateNoRequiredObjectExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression? objExpression) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression?
LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions
LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault
LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.MakeSqlTypeExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! basedOn, System.Func<LinqToDB.DbDataType, LinqToDB.DbDataType>? correctFunc = null) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.MakeSqlTypeExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! basedOn, System.Type! type, System.Func<LinqToDB.DbDataType, LinqToDB.DbDataType>? correctFunc = null) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.SqlTypesTranslationDefault() -> void
LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase
LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.StringMemberTranslatorBase() -> void
LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.GetMemberReplacementInfo(LinqToDB.Expressions.MemberHelper.MemberInfoWithType memberInfoWithType) -> LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement?
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.GetTranslation(LinqToDB.Expressions.MemberHelper.MemberInfoWithType memberInfoWithType) -> LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc?
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Deconstruct(out System.Linq.Expressions.LambdaExpression! Pattern, out System.Linq.Expressions.LambdaExpression! Replacement) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.MemberReplacement(LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement! original) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.MemberReplacement(System.Linq.Expressions.LambdaExpression! Pattern, System.Linq.Expressions.LambdaExpression! Replacement) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Pattern.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Pattern.init -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Replacement.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Replacement.init -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.ProvideReplacement(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression?
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.RegisterConstructorInternal(System.Linq.Expressions.LambdaExpression! memberAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.RegisterMemberInternal(System.Linq.Expressions.LambdaExpression! memberAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.RegisterMemberReplacement(System.Linq.Expressions.LambdaExpression! pattern, System.Linq.Expressions.LambdaExpression! replacement) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.RegisterMethodInternal(System.Linq.Expressions.LambdaExpression! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch) -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMemberAccessFunc
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc
LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslationRegistration() -> void
LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions
LinqToDB.Internal.DataProvider.UniqueParametersNormalizer
LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.Normalize(string? originalName) -> string?
LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.UniqueParametersNormalizer() -> void
LinqToDB.Internal.DataProvider.WrapParametersVisitor
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InBinary = 128 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InFunctionParameters = 256 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InInsertOrUpdate = 16 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InInsertValue = 4 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InMerge = 64 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InOutput = 32 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InSelect = 1 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.InUpdateSet = 2 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags.None = 0 -> LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapParameters(LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapFlags wrapFlags) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.DataProvider.WrapParametersVisitor.WrapParametersVisitor(LinqToDB.Internal.SqlQuery.Visitors.VisitMode visitMode) -> void
LinqToDB.Internal.Expressions.ChangeTypeExpression
LinqToDB.Internal.Expressions.ChangeTypeExpression.ChangeTypeExpression(System.Linq.Expressions.Expression! expression, System.Type! type) -> void
LinqToDB.Internal.Expressions.ChangeTypeExpression.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ChangeTypeExpression.Update(System.Linq.Expressions.Expression! expression) -> LinqToDB.Internal.Expressions.ChangeTypeExpression!
LinqToDB.Internal.Expressions.ConstantPlaceholderExpression
LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.ConstantPlaceholderExpression(System.Type! constantType) -> void
LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.ConstantType.get -> System.Type!
LinqToDB.Internal.Expressions.DefaultValueExpression
LinqToDB.Internal.Expressions.DefaultValueExpression.DefaultValueExpression(LinqToDB.Mapping.MappingSchema? mappingSchema, System.Type! type, bool isNull = false) -> void
LinqToDB.Internal.Expressions.DefaultValueExpression.IsNull.get -> bool
LinqToDB.Internal.Expressions.DefaultValueExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Internal.Expressions.ExpressionConstants
LinqToDB.Internal.Expressions.ExpressionEqualityComparer
LinqToDB.Internal.Expressions.ExpressionEqualityComparer.Equals(System.Linq.Expressions.Expression? x, System.Linq.Expressions.Expression? y) -> bool
LinqToDB.Internal.Expressions.ExpressionEqualityComparer.GetHashCode(System.Linq.Expressions.Expression? obj) -> int
LinqToDB.Internal.Expressions.ExpressionEvaluator
LinqToDB.Internal.Expressions.ExpressionGenerator
LinqToDB.Internal.Expressions.ExpressionGenerator.AddExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.AddVariable(System.Linq.Expressions.ParameterExpression! variable) -> System.Linq.Expressions.ParameterExpression!
LinqToDB.Internal.Expressions.ExpressionGenerator.Assign(System.Linq.Expressions.Expression! left, System.Linq.Expressions.Expression! right) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.AssignToVariable(System.Linq.Expressions.Expression! expression, string? name = null) -> System.Linq.Expressions.ParameterExpression!
LinqToDB.Internal.Expressions.ExpressionGenerator.Build() -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.Condition(System.Linq.Expressions.Expression! test, System.Linq.Expressions.Expression! ifTrue, System.Linq.Expressions.Expression! ifFalse) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.DeclareVariable(System.Type! type, string? name = null) -> System.Linq.Expressions.ParameterExpression!
LinqToDB.Internal.Expressions.ExpressionGenerator.ExpressionGenerator() -> void
LinqToDB.Internal.Expressions.ExpressionGenerator.ExpressionGenerator(LinqToDB.Internal.Expressions.Types.TypeMapper! mapper) -> void
LinqToDB.Internal.Expressions.ExpressionGenerator.IfThen(System.Linq.Expressions.Expression! test, System.Linq.Expressions.Expression! ifTrue) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.IfThenElse(System.Linq.Expressions.Expression! test, System.Linq.Expressions.Expression! ifTrue, System.Linq.Expressions.Expression! ifFalse) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction(System.Linq.Expressions.Expression<System.Action!>! action) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction<T1, T2, T3, T4, T5>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4, T5>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4, System.Linq.Expressions.Expression! p5) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction<T1, T2, T3, T4>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction<T1, T2, T3>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction<T1, T2>(System.Linq.Expressions.Expression<System.Action<T1, T2>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapAction<T>(System.Linq.Expressions.Expression<System.Action<T>!>! action, System.Linq.Expressions.Expression! p) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! func, System.Linq.Expressions.Expression! p) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4, System.Linq.Expressions.Expression! p5) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MapExpression<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! func) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.MemberAccess<T>(System.Linq.Expressions.Expression<System.Func<T, object!>!>! memberExpression, System.Linq.Expressions.Expression! obj) -> System.Linq.Expressions.MemberExpression!
LinqToDB.Internal.Expressions.ExpressionGenerator.ResultExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.Throw(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionGenerator.TryCatch(System.Linq.Expressions.Expression! body, params System.Linq.Expressions.CatchBlock![]! catchBlocks) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.ExpressionHelper
LinqToDB.Internal.Expressions.ExpressionInstances
LinqToDB.Internal.Expressions.ExpressionPrinter
LinqToDB.Internal.Expressions.ExpressionPrinter.Append(string! value) -> LinqToDB.Internal.Expressions.ExpressionPrinter!
LinqToDB.Internal.Expressions.ExpressionPrinter.AppendLine() -> LinqToDB.Internal.Expressions.ExpressionPrinter!
LinqToDB.Internal.Expressions.ExpressionPrinter.AppendLine(string! value) -> System.Linq.Expressions.ExpressionVisitor!
LinqToDB.Internal.Expressions.ExpressionPrinter.AppendLines(string! value) -> LinqToDB.Internal.Expressions.ExpressionPrinter!
LinqToDB.Internal.Expressions.ExpressionPrinter.ExpressionPrinter() -> void
LinqToDB.Internal.Expressions.ExpressionPrinter.GenerateBinaryOperator(System.Linq.Expressions.ExpressionType expressionType) -> string!
LinqToDB.Internal.Expressions.ExpressionPrinter.Indent() -> System.IDisposable!
LinqToDB.Internal.Expressions.ExpressionPrinter.PrintExpression(System.Linq.Expressions.Expression! expression, int? characterLimit = null) -> string!
LinqToDB.Internal.Expressions.ExpressionPrinter.PrintExpressionDebug(System.Linq.Expressions.Expression! expression) -> string!
LinqToDB.Internal.Expressions.ExpressionPrinter.VisitCollection<T>(System.Collections.Generic.IReadOnlyCollection<T!>! items, System.Action<LinqToDB.Internal.Expressions.ExpressionPrinter!>? joinAction = null) -> void
LinqToDB.Internal.Expressions.ExpressionVisitorBase
LinqToDB.Internal.Expressions.ExpressionVisitorBase.ExpressionVisitorBase() -> void
LinqToDB.Internal.Expressions.MarkerExpression
LinqToDB.Internal.Expressions.MarkerExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.MarkerExpression.MarkerExpression(System.Linq.Expressions.Expression! innerExpression, LinqToDB.Internal.Expressions.MarkerType markerType) -> void
LinqToDB.Internal.Expressions.MarkerExpression.MarkerType.get -> LinqToDB.Internal.Expressions.MarkerType
LinqToDB.Internal.Expressions.MarkerExpression.Update(System.Linq.Expressions.Expression! closureExpression) -> LinqToDB.Internal.Expressions.MarkerExpression!
LinqToDB.Internal.Expressions.MarkerType
LinqToDB.Internal.Expressions.MarkerType.None = 0 -> LinqToDB.Internal.Expressions.MarkerType
LinqToDB.Internal.Expressions.MarkerType.PreferClientSide = 1 -> LinqToDB.Internal.Expressions.MarkerType
LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression
LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.NotNullExpressions.get -> System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>!
LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.SqlDefaultIfEmptyExpression(System.Linq.Expressions.Expression! innerExpression, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! notNullExpressions) -> void
LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.Update(System.Linq.Expressions.Expression! innerExpression, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! notNullExpressions) -> LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression!
LinqToDB.Internal.Expressions.SqlErrorExpression
LinqToDB.Internal.Expressions.SqlErrorExpression.CreateException() -> System.Exception!
LinqToDB.Internal.Expressions.SqlErrorExpression.Expression.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.Expressions.SqlErrorExpression.IsCritical.get -> bool
LinqToDB.Internal.Expressions.SqlErrorExpression.Message.get -> string?
LinqToDB.Internal.Expressions.SqlErrorExpression.ResultType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlErrorExpression.SqlErrorExpression(string! message, System.Type! resultType) -> void
LinqToDB.Internal.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Internal.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType) -> void
LinqToDB.Internal.Expressions.SqlErrorExpression.SqlErrorExpression(System.Linq.Expressions.Expression? expression, string? message, System.Type! resultType, bool isCritical) -> void
LinqToDB.Internal.Expressions.SqlErrorExpression.WithType(System.Type! type) -> LinqToDB.Internal.Expressions.SqlErrorExpression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.AppendAssignment(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment! assignment) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.Assignment(System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.Expression! expression, bool isMandatory, bool isLoaded) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.IsLoaded.get -> bool
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.IsMandatory.get -> bool
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.MemberInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.WithExpression(System.Linq.Expressions.Expression! expression) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.WithMember(System.Reflection.MemberInfo! member) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignments.get -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!>!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ConstructionRoot.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Constructor.get -> System.Reflection.ConstructorInfo?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ConstructorMethod.get -> System.Reflection.MethodInfo?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ConstructType.get -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.Auto = 1 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.Full = 2 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.Incompatible = 0 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.Keys = 3 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.MemberInit = 5 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.MethodCall = 6 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType.New = 4 -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Equals(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression? other) -> bool
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.NewExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ObjectType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.MemberInfo.get -> System.Reflection.MemberInfo?
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.Parameter(System.Linq.Expressions.Expression! expression, System.Reflection.ParameterInfo! parameterInfo, System.Reflection.MemberInfo? memberInfo) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.ParameterInfo.get -> System.Reflection.ParameterInfo!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.ParameterType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.WithExpression(System.Linq.Expressions.Expression! expression) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameters.get -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!>!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ReplaceAssignments(System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!>! assignment) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ReplaceParameters(System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!>! parameters) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression! basedOn) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CreateType createType, System.Type! objectType, System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!>? parameters, System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!>? assignments, LinqToDB.Mapping.MappingSchema? mappingSchema, System.Linq.Expressions.Expression? constructionRoot) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.MemberInitExpression! memberInitExpression) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.MethodCallExpression! methodCall) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Linq.Expressions.NewExpression! newExpression) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.SqlGenericConstructorExpression(System.Type! objectType, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.MemberBinding!>! bindings) -> void
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.WithConstructionRoot(System.Linq.Expressions.Expression! constructionRoot) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.WithMappingSchema(LinqToDB.Mapping.MappingSchema? mappingSchema) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.Constructor.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.Equals(LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression? other) -> bool
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.ParameterInfo.get -> System.Reflection.ParameterInfo!
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.ParamIndex.get -> int
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.ParamType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.SqlGenericParamAccessExpression(System.Linq.Expressions.Expression! constructor, System.Reflection.ParameterInfo! parameterInfo) -> void
LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.Update(System.Linq.Expressions.Expression! constructor) -> LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression!
LinqToDB.Internal.Expressions.SqlPathExpression
LinqToDB.Internal.Expressions.SqlPathExpression.Equals(LinqToDB.Internal.Expressions.SqlPathExpression? other) -> bool
LinqToDB.Internal.Expressions.SqlPathExpression.Path.get -> System.Linq.Expressions.Expression![]!
LinqToDB.Internal.Expressions.SqlPathExpression.Path.set -> void
LinqToDB.Internal.Expressions.SqlPathExpression.SqlPathExpression(System.Linq.Expressions.Expression![]! path, System.Type! type) -> void
LinqToDB.Internal.Expressions.SqlPathExpression.Update(System.Linq.Expressions.Expression![]! path) -> LinqToDB.Internal.Expressions.SqlPathExpression!
LinqToDB.Internal.Expressions.SqlPathExpression.WithType(System.Type! type) -> LinqToDB.Internal.Expressions.SqlPathExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Alias.get -> string?
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Alias.set -> void
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.ConvertType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Equals(LinqToDB.Internal.Expressions.SqlPlaceholderExpression! other) -> bool
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Index.get -> int?
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.MakeNotNullable() -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.MakeNullable() -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Path.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Sql.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.SqlPlaceholderExpression(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! sql, System.Linq.Expressions.Expression! path, System.Type? convertType = null, string? alias = null, int? index = null, System.Linq.Expressions.Expression? trackingPath = null) -> void
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.TrackingPath.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithAlias(string? alias) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithPath(System.Linq.Expressions.Expression! path) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithSelectQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithSql(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithTrackingPath(System.Linq.Expressions.Expression! trackingPath) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlPlaceholderExpression.WithType(System.Type! type) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Internal.Expressions.SqlQueryRootExpression
LinqToDB.Internal.Expressions.SqlQueryRootExpression.ContextType.get -> System.Type!
LinqToDB.Internal.Expressions.SqlQueryRootExpression.Equals(LinqToDB.Internal.Expressions.SqlQueryRootExpression? other) -> bool
LinqToDB.Internal.Expressions.SqlQueryRootExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.Expressions.SqlQueryRootExpression.SqlQueryRootExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! contextType) -> void
LinqToDB.Internal.Expressions.TagExpression
LinqToDB.Internal.Expressions.TagExpression.InnerExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.TagExpression.Tag.get -> object!
LinqToDB.Internal.Expressions.TagExpression.TagExpression(System.Linq.Expressions.Expression! innerExpression, object! tag) -> void
LinqToDB.Internal.Expressions.TagExpression.Update(System.Linq.Expressions.Expression! innerExpression, object! tag) -> LinqToDB.Internal.Expressions.TagExpression!
LinqToDB.Internal.Expressions.TransformInfo
LinqToDB.Internal.Expressions.TransformInfo.Continue -> bool
LinqToDB.Internal.Expressions.TransformInfo.Expression -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.TransformInfo.Stop -> bool
LinqToDB.Internal.Expressions.TransformInfo.TransformInfo() -> void
LinqToDB.Internal.Expressions.TransformInfo.TransformInfo(System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Internal.Expressions.TransformInfo.TransformInfo(System.Linq.Expressions.Expression! expression, bool stop) -> void
LinqToDB.Internal.Expressions.TransformInfo.TransformInfo(System.Linq.Expressions.Expression! expression, bool stop, bool continue) -> void
LinqToDB.Internal.Expressions.Types.CustomMapperAttribute
LinqToDB.Internal.Expressions.Types.CustomMapperAttribute.CustomMapperAttribute(System.Type! mapper) -> void
LinqToDB.Internal.Expressions.Types.ICustomMapper
LinqToDB.Internal.Expressions.Types.ICustomMapper.CanMap(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Internal.Expressions.Types.ICustomMapper.Map(LinqToDB.Internal.Expressions.Types.TypeMapper! mapper, System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction<T1, T2, T3, T4, T5>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action<T1, T2, T3, T4, T5>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction<T1, T2, T3, T4>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action<T1, T2, T3, T4>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction<T1, T2, T3>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action<T1, T2, T3>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction<T1, T2>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action<T1, T2>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildAction<T>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Action<T>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFactory<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! newFunc) -> System.Func<T, object!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFactory<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! newFunc) -> System.Func<T1, T2, T3, object!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFactory<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! newFunc) -> System.Func<T1, T2, object!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFactory<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! newFunc) -> System.Func<object!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, T3, T4, T5, T6, T7, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, T3, T4, T5, T6, T7, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, T3, T4, T5, T6, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, T3, T4, T5, T6, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, T3, T4, T5, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, T3, T4, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, T3, T4, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, T3, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, T3, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<T1, T2, TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<T1, T2, TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildFunc<TR>(System.Linq.Expressions.LambdaExpression! lambda) -> System.Func<TR>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildTypedFactory<T, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! newFunc) -> System.Func<T, TRes>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildTypedFactory<T1, T2, T3, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! newFunc) -> System.Func<T1, T2, T3, TRes>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildTypedFactory<T1, T2, TR, TRes>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! newFunc) -> System.Func<T1, T2, TRes>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildTypedFactory<TR, TRes>(System.Linq.Expressions.Expression<System.Func<TR>!>! newFunc) -> System.Func<TRes>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR!>!>! newFunc) -> System.Func<T, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T1, T2, T3, T4, T5, T6, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TR!>!>! newFunc) -> System.Func<T1, T2, T3, T4, T5, T6, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR!>!>! newFunc) -> System.Func<T1, T2, T3, T4, T5, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR!>!>! newFunc) -> System.Func<T1, T2, T3, T4, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR!>!>! newFunc) -> System.Func<T1, T2, T3, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR!>!>! newFunc) -> System.Func<T1, T2, TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.BuildWrappedFactory<TR>(System.Linq.Expressions.Expression<System.Func<TR!>!>! newFunc) -> System.Func<TR!>!
LinqToDB.Internal.Expressions.Types.TypeMapper.FinalizeMappings() -> void
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction(System.Linq.Expressions.Expression<System.Action!>! action) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction<T1, T2, T3, T4, T5>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4, T5>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4, System.Linq.Expressions.Expression! p5) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction<T1, T2, T3, T4>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction<T1, T2, T3>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction<T1, T2>(System.Linq.Expressions.Expression<System.Action<T1, T2>!>! action, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapAction<T>(System.Linq.Expressions.Expression<System.Action<T>!>! action, System.Linq.Expressions.Expression! p) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda(System.Linq.Expressions.Expression<System.Action!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda<T1, T2, T3, T4, T5>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4, T5>!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda<T1, T2, T3, T4>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3, T4>!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda<T1, T2, T3>(System.Linq.Expressions.Expression<System.Action<T1, T2, T3>!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda<T1, T2>(System.Linq.Expressions.Expression<System.Action<T1, T2>!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapActionLambda<T>(System.Linq.Expressions.Expression<System.Action<T>!>! action) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! func, System.Linq.Expressions.Expression! p) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4, System.Linq.Expressions.Expression! p5) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3, System.Linq.Expressions.Expression! p4) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2, System.Linq.Expressions.Expression! p3) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! func, System.Linq.Expressions.Expression! p1, System.Linq.Expressions.Expression! p2) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapExpression<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! func) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T, TR>(System.Linq.Expressions.Expression<System.Func<T, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, T3, T4, T5, T6, T7, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, T3, T4, T5, T6, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MapLambda<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Internal.Expressions.Types.TypeMapper.MemberBuilder<T, TV>
LinqToDB.Internal.Expressions.Types.TypeMapper.MemberBuilder<T, TV>.BuildGetter<TBase>() -> System.Func<TBase, TV>!
LinqToDB.Internal.Expressions.Types.TypeMapper.MemberBuilder<T, TV>.BuildSetter<TBase>() -> System.Action<TBase, TV>!
LinqToDB.Internal.Expressions.Types.TypeMapper.RegisterTypeWrapper(System.Type! wrapperType, System.Type! originalType) -> void
LinqToDB.Internal.Expressions.Types.TypeMapper.RegisterTypeWrapper<TWrapper>(System.Type! originalType) -> void
LinqToDB.Internal.Expressions.Types.TypeMapper.Type<T>() -> LinqToDB.Internal.Expressions.Types.TypeMapper.TypeBuilder<T>!
LinqToDB.Internal.Expressions.Types.TypeMapper.TypeBuilder<T>
LinqToDB.Internal.Expressions.Types.TypeMapper.TypeBuilder<T>.Member<TV>(System.Linq.Expressions.Expression<System.Func<T, TV>!>! memberExpression) -> LinqToDB.Internal.Expressions.Types.TypeMapper.MemberBuilder<T, TV>!
LinqToDB.Internal.Expressions.Types.TypeMapper.TypeMapper() -> void
LinqToDB.Internal.Expressions.Types.TypeMapper.Wrap<TR>(object? instance) -> TR?
LinqToDB.Internal.Expressions.Types.TypeMapper.WrapTask<TR>(System.Threading.Tasks.Task! instanceTask) -> System.Threading.Tasks.Task<TR?>!
LinqToDB.Internal.Expressions.Types.TypeWrapper
LinqToDB.Internal.Expressions.Types.TypeWrapper.CompiledWrappers.get -> System.Delegate![]!
LinqToDB.Internal.Expressions.Types.TypeWrapper.instance_.get -> object!
LinqToDB.Internal.Expressions.Types.TypeWrapper.TypeWrapper() -> void
LinqToDB.Internal.Expressions.Types.TypeWrapper.TypeWrapper(object! instance, System.Delegate![]? wrappers) -> void
LinqToDB.Internal.Expressions.Types.TypeWrapperNameAttribute
LinqToDB.Internal.Expressions.Types.TypeWrapperNameAttribute.TypeWrapperNameAttribute(string! name) -> void
LinqToDB.Internal.Expressions.Types.ValueTaskToTaskMapper
LinqToDB.Internal.Expressions.Types.ValueTaskToTaskMapper.ValueTaskToTaskMapper() -> void
LinqToDB.Internal.Expressions.Types.WrapperAttribute
LinqToDB.Internal.Expressions.Types.WrapperAttribute.TypeName.get -> string?
LinqToDB.Internal.Expressions.Types.WrapperAttribute.WrapperAttribute() -> void
LinqToDB.Internal.Expressions.Types.WrapperAttribute.WrapperAttribute(string! typeName) -> void
LinqToDB.Internal.Extensions.ReflectionExtensions
LinqToDB.Internal.Extensions.TypeExtensions
LinqToDB.Internal.Infrastructure.IInfrastructure<T>
LinqToDB.Internal.Infrastructure.IInfrastructure<T>.Instance.get -> T
LinqToDB.Internal.Interceptors.EntityBindingInterceptor
LinqToDB.Internal.Interceptors.EntityBindingInterceptor.EntityBindingInterceptor() -> void
LinqToDB.Internal.Interceptors.IEntityBindingInterceptor
LinqToDB.Internal.Interceptors.IEntityBindingInterceptor.ConvertConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression! expression) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
LinqToDB.Internal.Linq.Builder.EvaluationHelper
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.CanBeEvaluatedOnClient(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.ExpressionTreeOptimizationContext(LinqToDB.IDataContext! dataContext) -> void
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.IsImmutable(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.IsServerSideOnly(System.Linq.Expressions.Expression! expr) -> bool
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext.PreferServerSide(System.Linq.Expressions.Expression! expr, bool enforceServerSide) -> bool
LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase
LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.CanBeEvaluated -> bool
LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.CanBeEvaluatedOnClientCheckVisitorBase() -> void
LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.InMethod -> bool
LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.OptimizationContext -> LinqToDB.Internal.Linq.Builder.ExpressionTreeOptimizationContext!
LinqToDB.Internal.Linq.ColumnReaderAttribute
LinqToDB.Internal.Linq.ColumnReaderAttribute.ColumnReaderAttribute(int indexParameterIndex) -> void
LinqToDB.Internal.Linq.ColumnReaderAttribute.IndexParameterIndex.get -> int
LinqToDB.Internal.Linq.IDataReaderAsync
LinqToDB.Internal.Linq.IDataReaderAsync.DataReader.get -> System.Data.Common.DbDataReader!
LinqToDB.Internal.Linq.IDataReaderAsync.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
LinqToDB.Internal.Linq.IExpressionPreprocessor
LinqToDB.Internal.Linq.IExpressionPreprocessor.ProcessExpression(System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.IExpressionQuery
LinqToDB.Internal.Linq.IExpressionQuery.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Internal.Linq.IExpressionQuery.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.IExpressionQuery.GetSqlQueries(LinqToDB.SqlGenerationOptions? options) -> System.Collections.Generic.IReadOnlyList<LinqToDB.QuerySql!>!
LinqToDB.Internal.Linq.IExpressionQuery<T>
LinqToDB.Internal.Linq.IExpressionQuery<T>.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.Internals
LinqToDB.Internal.Linq.IQueryExpressions
LinqToDB.Internal.Linq.IQueryExpressions.GetQueryExpression(int expressionId) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.IQueryExpressions.MainExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.IQueryRunner
LinqToDB.Internal.Linq.IQueryRunner.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Internal.Linq.IQueryRunner.ExecuteNonQuery() -> int
LinqToDB.Internal.Linq.IQueryRunner.ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
LinqToDB.Internal.Linq.IQueryRunner.ExecuteReader() -> LinqToDB.Data.DataReaderWrapper!
LinqToDB.Internal.Linq.IQueryRunner.ExecuteReaderAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Internal.Linq.IDataReaderAsync!>!
LinqToDB.Internal.Linq.IQueryRunner.ExecuteScalar() -> object?
LinqToDB.Internal.Linq.IQueryRunner.ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<object?>!
LinqToDB.Internal.Linq.IQueryRunner.Expressions.get -> LinqToDB.Internal.Linq.IQueryExpressions!
LinqToDB.Internal.Linq.IQueryRunner.GetSqlText() -> System.Collections.Generic.IReadOnlyList<LinqToDB.QuerySql!>!
LinqToDB.Internal.Linq.IQueryRunner.MapperExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Internal.Linq.IQueryRunner.MapperExpression.set -> void
LinqToDB.Internal.Linq.IQueryRunner.Parameters.get -> object?[]?
LinqToDB.Internal.Linq.IQueryRunner.Preambles.get -> object?[]?
LinqToDB.Internal.Linq.IQueryRunner.QueryNumber.get -> int
LinqToDB.Internal.Linq.IQueryRunner.QueryNumber.set -> void
LinqToDB.Internal.Linq.IQueryRunner.RowsCount.get -> int
LinqToDB.Internal.Linq.IQueryRunner.RowsCount.set -> void
LinqToDB.Internal.Linq.ITableMutable<T>
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeDatabaseName(string? databaseName) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeSchemaName(string? schemaName) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeServerName(string? serverName) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeTableDescriptor(LinqToDB.Mapping.EntityDescriptor! tableDescriptor) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeTableID(string? tableID) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeTableName(string! tableName) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.ITableMutable<T>.ChangeTableOptions(LinqToDB.TableOptions options) -> LinqToDB.ITable<T>!
LinqToDB.Internal.Linq.MethodHelper
LinqToDB.Internal.Linq.Query
LinqToDB.Internal.Linq.Query.ErrorExpression.get -> LinqToDB.Internal.Expressions.SqlErrorExpression?
LinqToDB.Internal.Linq.Query.GetQueries() -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.Linq.QueryInfo!>!
LinqToDB.Internal.Linq.Query.IsFinalized.get -> bool
LinqToDB.Internal.Linq.Query<T>
LinqToDB.Internal.Linq.QueryDebugView
LinqToDB.Internal.Linq.QueryDebugView.Expression.get -> string!
LinqToDB.Internal.Linq.QueryDebugView.Query.get -> string!
LinqToDB.Internal.Linq.QueryDebugView.QueryDebugView(System.Func<string!>! toExpressionString, System.Func<string!>! toQueryString, System.Func<string!>! toQueryStringNoParams) -> void
LinqToDB.Internal.Linq.QueryDebugView.QueryNoParams.get -> string!
LinqToDB.Internal.Linq.QueryInfo
LinqToDB.Internal.Linq.QueryInfo.Aliases.get -> LinqToDB.Internal.SqlQuery.AliasesContext?
LinqToDB.Internal.Linq.QueryInfo.Aliases.set -> void
LinqToDB.Internal.Linq.QueryInfo.Context.get -> object?
LinqToDB.Internal.Linq.QueryInfo.Context.set -> void
LinqToDB.Internal.Linq.QueryInfo.DataOptions.get -> LinqToDB.DataOptions?
LinqToDB.Internal.Linq.QueryInfo.DataOptions.set -> void
LinqToDB.Internal.Linq.QueryInfo.IsContinuousRun.get -> bool
LinqToDB.Internal.Linq.QueryInfo.IsContinuousRun.set -> void
LinqToDB.Internal.Linq.QueryInfo.QueryInfo() -> void
LinqToDB.Internal.Linq.QueryInfo.Statement.get -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.Linq.QueryInfo.Statement.set -> void
LinqToDB.Internal.Linq.RuntimeExpressionsContainer
LinqToDB.Internal.Linq.RuntimeExpressionsContainer.AddExpression(int expressionId, System.Linq.Expressions.Expression! expression) -> void
LinqToDB.Internal.Linq.RuntimeExpressionsContainer.GetQueryExpression(int expressionId) -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.RuntimeExpressionsContainer.MainExpression.get -> System.Linq.Expressions.Expression!
LinqToDB.Internal.Linq.RuntimeExpressionsContainer.RuntimeExpressionsContainer(System.Linq.Expressions.Expression! mainExpression) -> void
LinqToDB.Internal.Logging.LoggingExtensions
LinqToDB.Internal.Mapping.DynamicColumnInfo
LinqToDB.Internal.Mapping.DynamicColumnInfo.DynamicColumnInfo(System.Type! declaringType, System.Type! columnType, string! memberName) -> void
LinqToDB.Internal.Mapping.DynamicColumnInfo.Equals(LinqToDB.Internal.Mapping.DynamicColumnInfo? other) -> bool
LinqToDB.Internal.Mapping.LockedMappingSchema
LinqToDB.Internal.Mapping.LockedMappingSchema.LockedMappingSchema(string! configuration, params LinqToDB.Mapping.MappingSchema![]! schemas) -> void
LinqToDB.Internal.Mapping.Nullability
LinqToDB.Internal.Mapping.VirtualPropertyInfoBase
LinqToDB.Internal.Mapping.VirtualPropertyInfoBase.VirtualPropertyInfoBase() -> void
LinqToDB.Internal.Options.IOptionSet
LinqToDB.Internal.Options.IOptionSet.Default.get -> LinqToDB.Internal.Options.IOptionSet!
LinqToDB.Internal.Options.OptionsContainer<T>
LinqToDB.Internal.Options.OptionsContainer<T>.Apply<TA>(TA obj) -> void
LinqToDB.Internal.Options.OptionsContainer<T>.FindOrDefault<TSet>(TSet! defaultOptions) -> TSet!
LinqToDB.Internal.Options.OptionsContainer<T>.OptionsContainer() -> void
LinqToDB.Internal.Options.OptionsContainer<T>.OptionsContainer(LinqToDB.Internal.Options.OptionsContainer<T!>! options) -> void
LinqToDB.Internal.Options.OptionsContainer<T>.Reapply<TA>(TA obj, LinqToDB.Internal.Options.OptionsContainer<T!>! previousContainer) -> System.Action?
LinqToDB.Internal.Options.OptionsContainer<T>.WithOptions<TSet>(System.Func<TSet!, TSet!>! optionSetter) -> T!
LinqToDB.Internal.Reflection.MemberInfoEqualityComparer
LinqToDB.Internal.Reflection.MemberInfoEqualityComparer.Equals(System.Reflection.MemberInfo? x, System.Reflection.MemberInfo? y) -> bool
LinqToDB.Internal.Reflection.MemberInfoEqualityComparer.GetHashCode(System.Reflection.MemberInfo! obj) -> int
LinqToDB.Internal.Reflection.MemberInfoEqualityComparer.MemberInfoEqualityComparer() -> void
LinqToDB.Internal.Reflection.Methods
LinqToDB.Internal.Reflection.Methods.ADONet
LinqToDB.Internal.Reflection.Methods.Enumerable
LinqToDB.Internal.Reflection.Methods.LinqToDB
LinqToDB.Internal.Reflection.Methods.LinqToDB.ColumnReader
LinqToDB.Internal.Reflection.Methods.LinqToDB.DataParameter
LinqToDB.Internal.Reflection.Methods.LinqToDB.Delete
LinqToDB.Internal.Reflection.Methods.LinqToDB.GroupBy
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromDataContext
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable
LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable
LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge
LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert
LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlExt
LinqToDB.Internal.Reflection.Methods.LinqToDB.Table
LinqToDB.Internal.Reflection.Methods.LinqToDB.Tools
LinqToDB.Internal.Reflection.Methods.LinqToDB.Update
LinqToDB.Internal.Reflection.Methods.Queryable
LinqToDB.Internal.Reflection.Methods.System
LinqToDB.Internal.SchemaProvider.ColumnInfo
LinqToDB.Internal.SchemaProvider.ColumnInfo.ColumnInfo() -> void
LinqToDB.Internal.SchemaProvider.ColumnInfo.ColumnType -> string?
LinqToDB.Internal.SchemaProvider.ColumnInfo.DataType -> string?
LinqToDB.Internal.SchemaProvider.ColumnInfo.Description -> string?
LinqToDB.Internal.SchemaProvider.ColumnInfo.IsIdentity -> bool
LinqToDB.Internal.SchemaProvider.ColumnInfo.IsNullable -> bool
LinqToDB.Internal.SchemaProvider.ColumnInfo.Length -> int?
LinqToDB.Internal.SchemaProvider.ColumnInfo.Name -> string!
LinqToDB.Internal.SchemaProvider.ColumnInfo.Ordinal -> int
LinqToDB.Internal.SchemaProvider.ColumnInfo.Precision -> int?
LinqToDB.Internal.SchemaProvider.ColumnInfo.Scale -> int?
LinqToDB.Internal.SchemaProvider.ColumnInfo.SkipOnInsert -> bool
LinqToDB.Internal.SchemaProvider.ColumnInfo.SkipOnUpdate -> bool
LinqToDB.Internal.SchemaProvider.ColumnInfo.TableID -> string!
LinqToDB.Internal.SchemaProvider.ColumnInfo.Type -> LinqToDB.DataType?
LinqToDB.Internal.SchemaProvider.DataTypeInfo
LinqToDB.Internal.SchemaProvider.DataTypeInfo.CreateFormat -> string?
LinqToDB.Internal.SchemaProvider.DataTypeInfo.CreateParameters -> string?
LinqToDB.Internal.SchemaProvider.DataTypeInfo.DataType -> string!
LinqToDB.Internal.SchemaProvider.DataTypeInfo.DataTypeInfo() -> void
LinqToDB.Internal.SchemaProvider.DataTypeInfo.ProviderDbType -> int
LinqToDB.Internal.SchemaProvider.DataTypeInfo.ProviderSpecific -> bool
LinqToDB.Internal.SchemaProvider.DataTypeInfo.TypeName -> string!
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.ForeignKeyInfo() -> void
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.Name -> string!
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.Ordinal -> int
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.OtherColumn -> string!
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.OtherTableID -> string!
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.ThisColumn -> string!
LinqToDB.Internal.SchemaProvider.ForeignKeyInfo.ThisTableID -> string!
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo.ColumnName -> string!
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo.Ordinal -> int
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo.PrimaryKeyInfo() -> void
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo.PrimaryKeyName -> string?
LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo.TableID -> string!
LinqToDB.Internal.SchemaProvider.ProcedureInfo
LinqToDB.Internal.SchemaProvider.ProcedureInfo.CatalogName -> string?
LinqToDB.Internal.SchemaProvider.ProcedureInfo.Description -> string?
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsAggregateFunction -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsDefaultSchema -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsFunction -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsResultDynamic -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsTableFunction -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.IsWindowFunction -> bool
LinqToDB.Internal.SchemaProvider.ProcedureInfo.PackageName -> string?
LinqToDB.Internal.SchemaProvider.ProcedureInfo.ProcedureDefinition -> string?
LinqToDB.Internal.SchemaProvider.ProcedureInfo.ProcedureID -> string!
LinqToDB.Internal.SchemaProvider.ProcedureInfo.ProcedureInfo() -> void
LinqToDB.Internal.SchemaProvider.ProcedureInfo.ProcedureName -> string!
LinqToDB.Internal.SchemaProvider.ProcedureInfo.SchemaName -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.DataType -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.DataTypeExact -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.Description -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.IsIn -> bool
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.IsNullable -> bool
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.IsOut -> bool
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.IsResult -> bool
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.Length -> int?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.Ordinal -> int
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.ParameterName -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.Precision -> int?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.ProcedureID -> string!
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.ProcedureParameterInfo() -> void
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.Scale -> int?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.UDTCatalog -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.UDTName -> string?
LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo.UDTSchema -> string?
LinqToDB.Internal.SchemaProvider.SchemaProviderBase
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.BuildSchemaFilter(LinqToDB.SchemaProvider.GetSchemaOptions? options, string! defaultSchema, System.Action<System.Text.StringBuilder!, string!>! stringLiteralBuilder) -> string?
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.DataTypesSchema -> System.Data.DataTable!
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ExcludedCatalogs -> System.Collections.Generic.HashSet<string?>!
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ExcludedSchemas -> System.Collections.Generic.HashSet<string?>!
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GenerateChar1AsString -> bool
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDataTypeByProviderDbType(int typeId, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> LinqToDB.Internal.SchemaProvider.DataTypeInfo?
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.IncludedCatalogs -> System.Collections.Generic.HashSet<string?>!
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.IncludedSchemas -> System.Collections.Generic.HashSet<string?>!
LinqToDB.Internal.SchemaProvider.SchemaProviderBase.SchemaProviderBase() -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.AliasesContext.get -> LinqToDB.Internal.SqlQuery.AliasesContext!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.AliasesContext.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.AppendIndent() -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ApplyQueryHints(string! sqlText, System.Collections.Generic.IReadOnlyCollection<string!>! queryHints) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BasicSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BasicSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.DbDataType dataType) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDeleteQuery2(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDropTableStatementIfExists(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildEmptyValues(LinqToDB.Internal.SqlQuery.SqlValuesTable! valuesTable) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpression(int precedence, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound = true) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpressionContext -> object?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertOrUpdateQueryAsOnConflictUpdateOrNothing(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertOrUpdateQueryAsUpdateInsert(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertQuery2(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildIsDistinctPredicateFallback(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildJoinTable(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlTableSource! tableSource, LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, ref int joinCounter) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildPredicate(int parentPrecedence, int precedence, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildQueryExtensions(System.Text.StringBuilder! sb, System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>! sqlQueryExtensions, string? prefix, string! delimiter, string? suffix, LinqToDB.Sql.QueryExtensionScope scope) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSql(int commandNumber, LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.Internal.SqlQuery.AliasesContext! aliases, LinqToDB.Internal.SqlQuery.NullabilityContext? nullabilityContext, int startIndent = 0) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlConditionExpressionAsFunction(string! funcName, LinqToDB.Internal.SqlQuery.SqlConditionExpression! conditionExpression) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlForUnion() -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlID(LinqToDB.Sql.SqlID id) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildStep -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTableExtensions(System.Text.StringBuilder! sb, LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias, string? prefix, string! delimiter, string? suffix) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTableExtensions(System.Text.StringBuilder! sb, LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias, string? prefix, string! delimiter, string? suffix, System.Func<LinqToDB.Internal.SqlQuery.SqlQueryExtension!, bool>! tableExtensionFilter) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTableName(LinqToDB.Internal.SqlQuery.SqlTableSource! ts, bool buildName, bool buildAlias) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildValues(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ConvertCaseToConditions(LinqToDB.Internal.SqlQuery.SqlCaseExpression! caseExpression, int start) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ConvertElement<T>(T? element) -> T?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ConvertInline(string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.DataProvider -> LinqToDB.DataProvider.IDataProvider?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetSequenceNameAttribute(LinqToDB.Internal.SqlQuery.SqlTable! table, bool throwException) -> LinqToDB.Mapping.SequenceNameAttribute?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetTableAlias(LinqToDB.Internal.SqlQuery.ISqlTableSource! table) -> string?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetTempAliases(int n, string! defaultAlias) -> string![]!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Indent -> int
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.NeedSkip(LinqToDB.Internal.SqlQuery.ISqlExpression? takeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression? skipExpression) -> bool
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.NeedTake(LinqToDB.Internal.SqlQuery.ISqlExpression? takeExpression) -> bool
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.NullabilityContext.get -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.NullabilityContext.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OptimizationContext.get -> LinqToDB.Internal.SqlProvider.OptimizationContext!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OptimizationContext.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Optimize(LinqToDB.Internal.SqlQuery.IQueryElement? element, bool reducePredicates) -> LinqToDB.Internal.SqlQuery.IQueryElement?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.PrepareSearchCondition(LinqToDB.Internal.SqlQuery.SqlSearchCondition! searchCondition) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.QueryName.get -> string?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.QueryName.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.RemoveAlias(string! alias) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.RemoveInlineComma() -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SkipAlias -> bool
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SqlOptimizer -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Statement -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.AlterDeleteClause = 3 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.DeleteClause = 2 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.FromClause = 8 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.GroupByClause = 10 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.HavingClause = 11 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.InsertClause = 6 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.MergeInsertClause = 7 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.MergeUpdateClause = 5 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.OffsetLimit = 13 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.OrderByClause = 12 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.Output = 15 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.QueryExtensions = 16 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.SelectClause = 1 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.Tag = 14 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.TypedExpression = 17 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.UpdateClause = 4 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.WhereClause = 9 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step.WithClause = 0 -> LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Step
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.StringBuilder.get -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.StringBuilder.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TableIDs.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.Internal.SqlProvider.TableIDInfo!>?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TableIDs.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TablePath.get -> string?
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TablePath.set -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ValueToSqlConverter.get -> LinqToDB.Mapping.ValueToSqlConverter!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.WithStringBuilder<TContext>(System.Action<TContext>! func, TContext context) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.WithStringBuilderBuildExpression(int precedence, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder.WithStringBuilderBuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> string!
LinqToDB.Internal.SqlProvider.BasicSqlBuilder<T>
LinqToDB.Internal.SqlProvider.BasicSqlBuilder<T>.BasicSqlBuilder(LinqToDB.DataProvider.IDataProvider? provider, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.ISqlOptimizer! sqlOptimizer, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder<T>.BasicSqlBuilder(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! parentBuilder) -> void
LinqToDB.Internal.SqlProvider.BasicSqlBuilder<T>.ProviderOptions.get -> T!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.BasicSqlOptimizer(LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags) -> void
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ClearColumParametersVisitor
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ClearColumParametersVisitor.ClearColumParametersVisitor() -> void
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectMultiTableQueries(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectSetters(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>! setters, LinqToDB.Internal.SqlQuery.SelectQuery! query) -> void
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectUpdateSetters(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! updateStatement) -> void
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectUpdateTable(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! statement, bool leaveUpdateTableInQuery, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlUpdateStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.GetAlternativeDelete(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> LinqToDB.Internal.SqlQuery.SqlDeleteStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdate(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlUpdateStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.GetAlternativeUpdatePostgreSqlite(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.IsParameterDependent(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> bool
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.NeedsEnvelopingForUpdate(LinqToDB.Internal.SqlQuery.SelectQuery! query) -> bool
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.OptimizeQueries(LinqToDB.Internal.SqlQuery.IQueryElement! startFrom, LinqToDB.Internal.SqlQuery.IQueryElement! root, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.RemoveUpdateTableIfPossible(LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Internal.SqlQuery.SqlTable! table, out LinqToDB.Internal.SqlQuery.SqlTableSource? source) -> bool
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ReplaceTakeSkipWithRowNumber<TContext>(TContext context, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Func<TContext, LinqToDB.Internal.SqlQuery.SelectQuery!, bool>! predicate, bool supportsEmptyOrderBy) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.SeparateDistinctFromPagination(LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Func<LinqToDB.Internal.SqlQuery.SelectQuery!, bool>! queryFilter) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.ExceptionToErrorMessage = 14 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.ExceptionToErrorNumber = 13 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToCommandParameter = 1 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToDatabase = 6 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToPackage = 8 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToProcedure = 9 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryField = 3 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryFieldAlias = 4 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryParameter = 0 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryTable = 10 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryTableAlias = 11 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToSchema = 7 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToServer = 5 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.NameToSprocParameter = 2 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.SequenceName = 15 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.SprocParameterToName = 12 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ConvertType.TriggerName = 16 -> LinqToDB.Internal.SqlProvider.ConvertType
LinqToDB.Internal.SqlProvider.ISqlBuilder
LinqToDB.Internal.SqlProvider.ISqlBuilder.ApplyQueryHints(string! sqlText, System.Collections.Generic.IReadOnlyCollection<string!>! queryHints) -> string!
LinqToDB.Internal.SqlProvider.ISqlBuilder.BuildDataType(System.Text.StringBuilder! sb, LinqToDB.DbDataType dataType) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.ISqlBuilder.BuildExpression(System.Text.StringBuilder! sb, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool buildTableName, object? context = null) -> void
LinqToDB.Internal.SqlProvider.ISqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType = LinqToDB.Internal.SqlProvider.ConvertType.NameToQueryTable, bool escape = true, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, bool withoutSuffix = false) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.ISqlBuilder.BuildSql(int commandNumber, LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.Internal.SqlQuery.AliasesContext! aliases, LinqToDB.Internal.SqlQuery.NullabilityContext? nullabilityContext, int startIndent = 0) -> void
LinqToDB.Internal.SqlProvider.ISqlBuilder.BuildSqlID(LinqToDB.Sql.SqlID id) -> string?
LinqToDB.Internal.SqlProvider.ISqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
LinqToDB.Internal.SqlProvider.ISqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.ISqlBuilder.ConvertInline(string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> string!
LinqToDB.Internal.SqlProvider.ISqlBuilder.GetIdentityExpression(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlProvider.ISqlBuilder.GetMaxValueSql(LinqToDB.Mapping.EntityDescriptor! entity, LinqToDB.Mapping.ColumnDescriptor! column) -> string!
LinqToDB.Internal.SqlProvider.ISqlBuilder.GetReserveSequenceValuesSql(int count, string! sequenceName) -> string!
LinqToDB.Internal.SqlProvider.ISqlBuilder.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.ISqlBuilder.Name.get -> string!
LinqToDB.Internal.SqlProvider.ISqlBuilder.PrintParameters(LinqToDB.IDataContext! dataContext, System.Text.StringBuilder! sb, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter!>? parameters) -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.ISqlBuilder.QueryName.get -> string?
LinqToDB.Internal.SqlProvider.ISqlBuilder.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.SqlProvider.ISqlBuilder.StringBuilder.get -> System.Text.StringBuilder!
LinqToDB.Internal.SqlProvider.ISqlBuilder.TableIDs.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.Internal.SqlProvider.TableIDInfo!>?
LinqToDB.Internal.SqlProvider.ISqlBuilder.TablePath.get -> string?
LinqToDB.Internal.SqlProvider.ISqlOptimizer
LinqToDB.Internal.SqlProvider.ISqlOptimizer.ConvertSkipTake(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.Internal.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.Internal.SqlQuery.ISqlExpression? skipExpr) -> void
LinqToDB.Internal.SqlProvider.ISqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
LinqToDB.Internal.SqlProvider.ISqlOptimizer.CreateOptimizerVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor!
LinqToDB.Internal.SqlProvider.ISqlOptimizer.CreateSqlExpressionFactory(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
LinqToDB.Internal.SqlProvider.ISqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Internal.SqlProvider.ISqlOptimizer.IsParameterDependent(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> bool
LinqToDB.Internal.SqlProvider.OptimizationContext
LinqToDB.Internal.SqlProvider.OptimizationContext.AddParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> LinqToDB.Internal.SqlQuery.SqlParameter!
LinqToDB.Internal.SqlProvider.OptimizationContext.ClearParameters() -> void
LinqToDB.Internal.SqlProvider.OptimizationContext.ConvertVisitor.get -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
LinqToDB.Internal.SqlProvider.OptimizationContext.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Internal.SqlProvider.OptimizationContext.EvaluationContext.get -> LinqToDB.Internal.SqlQuery.EvaluationContext!
LinqToDB.Internal.SqlProvider.OptimizationContext.Factory.get -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
LinqToDB.Internal.SqlProvider.OptimizationContext.GetParameters() -> System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlParameter!>!
LinqToDB.Internal.SqlProvider.OptimizationContext.HasParameters() -> bool
LinqToDB.Internal.SqlProvider.OptimizationContext.IsAlreadyOptimizedAndConverted.get -> bool
LinqToDB.Internal.SqlProvider.OptimizationContext.IsParameterOrderDependent.get -> bool
LinqToDB.Internal.SqlProvider.OptimizationContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.OptimizationContext.OptimizationContext(LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlProvider.SqlProviderFlags! sqlProviderFlags, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor! optimizerVisitor, LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor! convertVisitor, LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, bool isParameterOrderDepended, bool isAlreadyOptimizedAndConverted, System.Func<LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!>! parametersNormalizerFactory) -> void
LinqToDB.Internal.SqlProvider.OptimizationContext.Optimize<T>(T? element, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool reducePredicates) -> T?
LinqToDB.Internal.SqlProvider.OptimizationContext.OptimizeAndConvert<T>(T? element, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext) -> T?
LinqToDB.Internal.SqlProvider.OptimizationContext.OptimizeAndConvertAll<T>(T! element, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext) -> T!
LinqToDB.Internal.SqlProvider.OptimizationContext.OptimizerVisitor.get -> LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor!
LinqToDB.Internal.SqlProvider.OptimizationContext.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.SqlProvider.OptimizationContext.SuggestDynamicParameter(LinqToDB.DbDataType dbDataType, object? value) -> LinqToDB.Internal.SqlQuery.SqlParameter!
LinqToDB.Internal.SqlProvider.OptimizationContext.TransformationInfo.get -> LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.Internal.SqlProvider.OptimizationContext.TransformationInfoConvert.get -> LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.Between = 16 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.CompareToSelect = 32 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.Comparisons = 4 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.Equality = 2 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.In = 64 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.IsNull = 1 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.None = 0 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.Overlaps = 8 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.Update = 128 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.RowFeature.UpdateLiteral = 256 -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Add(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Add(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Add<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertBooleanToCase(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, LinqToDB.DbDataType toType) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesceToBinaryFunc(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! coalesce, string! funcName, bool supportsParameters = true) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertRowExprExpr(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSearchStringPredicateViaLike(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertToBooleanSearchCondition(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Dec(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Div(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Div(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Div<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.EvaluationContext.get -> LinqToDB.Internal.SqlQuery.EvaluationContext!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Factory.get -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.FloorBeforeConvert(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Inc(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsInsidePredicate.get -> bool
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Mul(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Mul(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Mul<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.NullabilityContext -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.OptimizationContext -> LinqToDB.Internal.SqlProvider.OptimizationContext!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Optimize(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.RowComparisonFallback(LinqToDB.Internal.SqlQuery.SqlPredicate.Operator op, LinqToDB.Internal.SqlQuery.SqlRowExpression! row1, LinqToDB.Internal.SqlQuery.SqlRowExpression! row2, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.RowIsNullFallback(LinqToDB.Internal.SqlQuery.SqlRowExpression! row, bool isNot) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.SqlExpressionConvertVisitor(bool allowModify) -> void
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Sub(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Sub(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Sub<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.TryConvertToValue(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitQueries -> bool
LinqToDB.Internal.SqlProvider.SqlExpressionFactory
LinqToDB.Internal.SqlProvider.SqlExpressionFactory.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Internal.SqlProvider.SqlExpressionFactory.GetDbDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.DbDataType
LinqToDB.Internal.SqlProvider.SqlExpressionFactory.GetDbDataType(System.Type! type) -> LinqToDB.DbDataType
LinqToDB.Internal.SqlProvider.SqlExpressionFactory.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.SqlExpressionFactory.SqlExpressionFactory(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> void
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.CanBeEvaluateNoParameters(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.EvaluationContext.get -> LinqToDB.Internal.SqlQuery.EvaluationContext!
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.OptimizeSimilarForSearch(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate, LinqToDB.Internal.SqlQuery.SqlSearchCondition! searchCondition, out LinqToDB.Internal.SqlQuery.ISqlPredicate! newCondition, out LinqToDB.Internal.SqlQuery.ISqlPredicate? newPredicate) -> bool
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.OptimizeSimilarForSinglePredicate(LinqToDB.Internal.SqlQuery.SqlSearchCondition! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.SqlExpressionOptimizerVisitor(bool allowModify) -> void
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.TryEvaluate(LinqToDB.Internal.SqlQuery.IQueryElement! expr, out object? result) -> bool
LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.TryEvaluateNoParameters(LinqToDB.Internal.SqlQuery.IQueryElement! expr, out object? result) -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsOuterExpressionInAggregate.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsOuterExpressionInAggregate.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameter.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameter.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameterIfSkip.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.AcceptsTakeAsParameterIfSkip.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.CanCombineParameters.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.CanCombineParameters.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.CustomFlags.get -> System.Collections.Generic.List<string!>!
LinqToDB.Internal.SqlProvider.SqlProviderFlags.CustomFlags.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.DefaultMultiQueryIsolationLevel.get -> System.Data.IsolationLevel
LinqToDB.Internal.SqlProvider.SqlProviderFlags.DefaultMultiQueryIsolationLevel.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.DoesProviderTreatsEmptyStringAsNull.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.DoesProviderTreatsEmptyStringAsNull.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.GetAcceptsTakeAsParameterFlag(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.GetIsSkipSupportedFlag(LinqToDB.Internal.SqlQuery.ISqlExpression? takeExpression) -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.GetIsTakeHintsSupported(LinqToDB.TakeHints hints) -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAccessBuggyLeftJoinConstantNullability.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAccessBuggyLeftJoinConstantNullability.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAggregationDistinctSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAggregationDistinctSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAllSetOperationsSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsAllSetOperationsSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsApplyJoinSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsApplyJoinSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsColumnSubqueryShouldNotContainParentIsNotNull.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsColumnSubqueryShouldNotContainParentIsNotNull.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceAndTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsColumnSubqueryWithParentReferenceAndTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCommonTableExpressionsSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCommonTableExpressionsSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCorrelatedSubQueryTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCorrelatedSubQueryTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCountDistinctSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCountDistinctSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCountSubQuerySupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCountSubQuerySupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCrossApplyJoinSupportsCondition.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCrossApplyJoinSupportsCondition.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCrossJoinSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCrossJoinSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCTESupportsOrdering.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsCTESupportsOrdering.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDerivedTableOrderBySupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDerivedTableOrderBySupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDerivedTableTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDerivedTableTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDistinctFromSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDistinctFromSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDistinctSetOperationsSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsDistinctSetOperationsSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsExistsPreferableForContains.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsExistsPreferableForContains.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsIdentityParameterRequired.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsIdentityParameterRequired.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsInsertOrUpdateSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsInsertOrUpdateSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsJoinDerivedTableWithTakeInvalid.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsJoinDerivedTableWithTakeInvalid.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsMultiTablesSupportsJoins.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsMultiTablesSupportsJoins.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsNamingQueryBlockSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsNamingQueryBlockSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsNestedJoinsSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsNestedJoinsSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOrderByAggregateFunctionSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOrderByAggregateFunctionSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOuterApplyJoinSupportsCondition.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOuterApplyJoinSupportsCondition.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOuterJoinSupportsInnerJoin.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsOuterJoinSupportsInnerJoin.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsParameterOrderDependent.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsParameterOrderDependent.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsRecursiveCTEJoinWithConditionSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsRecursiveCTEJoinWithConditionSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsRowNumberWithoutOrderBySupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsRowNumberWithoutOrderBySupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSkipSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSkipSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSkipSupportedIfTake.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSkipSupportedIfTake.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryColumnSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryColumnSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryOrderBySupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryOrderBySupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQuerySkipSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQuerySkipSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubQueryTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubqueryWithParentReferenceInJoinConditionSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSubqueryWithParentReferenceInJoinConditionSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSupportedSimpleCorrelatedSubqueries.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSupportedSimpleCorrelatedSubqueries.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSupportsJoinWithoutCondition.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsSupportsJoinWithoutCondition.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateFromSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateFromSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateSkipTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateSkipTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateTakeSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsUpdateTakeSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsWindowFunctionsSupported.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.IsWindowFunctionsSupported.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.MaxInListValuesCount.get -> int
LinqToDB.Internal.SqlProvider.SqlProviderFlags.MaxInListValuesCount.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputDeleteUseSpecialTable.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputDeleteUseSpecialTable.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputInsertUseSpecialTable.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputInsertUseSpecialTable.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputMergeUseSpecialTables.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputMergeUseSpecialTables.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputUpdateUseSpecialTables.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.OutputUpdateUseSpecialTables.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.RowConstructorSupport.get -> LinqToDB.Internal.SqlProvider.RowFeature
LinqToDB.Internal.SqlProvider.SqlProviderFlags.RowConstructorSupport.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SqlProviderFlags() -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportedCorrelatedSubqueriesLevel.get -> int?
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportedCorrelatedSubqueriesLevel.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportsBooleanType.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportsBooleanType.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportsPredicatesComparison.get -> bool
LinqToDB.Internal.SqlProvider.SqlProviderFlags.SupportsPredicatesComparison.set -> void
LinqToDB.Internal.SqlProvider.SqlProviderFlags.TakeHintsSupported.get -> LinqToDB.TakeHints?
LinqToDB.Internal.SqlProvider.SqlProviderFlags.TakeHintsSupported.set -> void
LinqToDB.Internal.SqlProvider.TableIDInfo
LinqToDB.Internal.SqlProvider.TableIDInfo.<Clone>$() -> LinqToDB.Internal.SqlProvider.TableIDInfo!
LinqToDB.Internal.SqlProvider.TableIDInfo.Deconstruct(out string! TableAlias, out string! TableName, out string! TableSpec) -> void
LinqToDB.Internal.SqlProvider.TableIDInfo.Equals(LinqToDB.Internal.SqlProvider.TableIDInfo? other) -> bool
LinqToDB.Internal.SqlProvider.TableIDInfo.TableAlias.get -> string!
LinqToDB.Internal.SqlProvider.TableIDInfo.TableAlias.init -> void
LinqToDB.Internal.SqlProvider.TableIDInfo.TableIDInfo(string! TableAlias, string! TableName, string! TableSpec) -> void
LinqToDB.Internal.SqlProvider.TableIDInfo.TableName.get -> string!
LinqToDB.Internal.SqlProvider.TableIDInfo.TableName.init -> void
LinqToDB.Internal.SqlProvider.TableIDInfo.TableSpec.get -> string!
LinqToDB.Internal.SqlProvider.TableIDInfo.TableSpec.init -> void
LinqToDB.Internal.SqlProvider.TableOptionsExtensions
LinqToDB.Internal.SqlQuery.AliasesContext
LinqToDB.Internal.SqlQuery.AliasesContext.AliasesContext() -> void
LinqToDB.Internal.SqlQuery.AliasesContext.GetAliased() -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.IQueryElement!>!
LinqToDB.Internal.SqlQuery.AliasesContext.GetUsedTableAliases() -> System.Collections.Generic.HashSet<string!>!
LinqToDB.Internal.SqlQuery.AliasesContext.IsAliased(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
LinqToDB.Internal.SqlQuery.AliasesContext.RegisterAliased(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> void
LinqToDB.Internal.SqlQuery.AliasesContext.RegisterAliased(System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.IQueryElement!>! elements) -> void
LinqToDB.Internal.SqlQuery.ClauseBase
LinqToDB.Internal.SqlQuery.ClauseBase.ClauseBase(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.ClauseBase.From.get -> LinqToDB.Internal.SqlQuery.SqlFromClause!
LinqToDB.Internal.SqlQuery.ClauseBase.GroupBy.get -> LinqToDB.Internal.SqlQuery.SqlGroupByClause!
LinqToDB.Internal.SqlQuery.ClauseBase.Having.get -> LinqToDB.Internal.SqlQuery.SqlHavingClause!
LinqToDB.Internal.SqlQuery.ClauseBase.OrderBy.get -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.ClauseBase.Select.get -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.ClauseBase.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.ClauseBase.Where.get -> LinqToDB.Internal.SqlQuery.SqlWhereClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.ClauseBase(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.From.get -> LinqToDB.Internal.SqlQuery.SqlFromClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.GroupBy.get -> LinqToDB.Internal.SqlQuery.SqlGroupByClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.Having.get -> LinqToDB.Internal.SqlQuery.SqlHavingClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.OrderBy.get -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.Select.get -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.ClauseBase<T1>.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.CteClause
LinqToDB.Internal.SqlQuery.CteClause.Body.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
LinqToDB.Internal.SqlQuery.CteClause.Body.set -> void
LinqToDB.Internal.SqlQuery.CteClause.CteClause(LinqToDB.Internal.SqlQuery.SelectQuery? body, System.Type! objectType, bool isRecursive, string? name) -> void
LinqToDB.Internal.SqlQuery.CteClause.CteID.get -> int
LinqToDB.Internal.SqlQuery.CteClause.Fields.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.CteClause.IsRecursive.get -> bool
LinqToDB.Internal.SqlQuery.CteClause.IsRecursive.set -> void
LinqToDB.Internal.SqlQuery.CteClause.Name.get -> string?
LinqToDB.Internal.SqlQuery.CteClause.Name.set -> void
LinqToDB.Internal.SqlQuery.CteClause.ObjectType.get -> System.Type!
LinqToDB.Internal.SqlQuery.CteClause.ObjectType.set -> void
LinqToDB.Internal.SqlQuery.DebugStringExtensions
LinqToDB.Internal.SqlQuery.EvaluationContext
LinqToDB.Internal.SqlQuery.EvaluationContext.EvaluationContext(LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues? parameterValues = null) -> void
LinqToDB.Internal.SqlQuery.EvaluationContext.IsParametersInitialized.get -> bool
LinqToDB.Internal.SqlQuery.EvaluationContext.ParameterValues.get -> LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues?
LinqToDB.Internal.SqlQuery.EvaluationContext.Register(LinqToDB.Internal.SqlQuery.IQueryElement! expr, bool forServer, object? value) -> void
LinqToDB.Internal.SqlQuery.EvaluationContext.RegisterError(LinqToDB.Internal.SqlQuery.IQueryElement! expr, bool forServer) -> void
LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.GroupingType.Cube = 3 -> LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.GroupingType.Default = 0 -> LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.GroupingType.GroupBySets = 1 -> LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.GroupingType.Rollup = 2 -> LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.IQueryElement
LinqToDB.Internal.SqlQuery.IQueryElement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.IQueryElement.GetElementHashCode() -> int
LinqToDB.Internal.SqlQuery.IQueryElement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.IQueryExtension
LinqToDB.Internal.SqlQuery.IQueryExtension.Accept(LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor! visitor) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues
LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues.TryGetValue(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, out LinqToDB.Internal.SqlQuery.SqlParameterValue? value) -> bool
LinqToDB.Internal.SqlQuery.ISimilarityMerger
LinqToDB.Internal.SqlQuery.ISimilarityMerger.GetSimilarityCodes(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> System.Collections.Generic.IEnumerable<int>!
LinqToDB.Internal.SqlQuery.ISimilarityMerger.TryMerge(LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool isNestedPredicate, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate1, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate2, bool isLogicalOr, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedPredicate) -> bool
LinqToDB.Internal.SqlQuery.ISimilarityMerger.TryMerge(LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool isNestedPredicate, LinqToDB.Internal.SqlQuery.ISqlPredicate! single, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicateFromList, bool isLogicalOr, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedSinglePredicate, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedListPredicate) -> bool
LinqToDB.Internal.SqlQuery.ISqlExpression
LinqToDB.Internal.SqlQuery.ISqlExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.Internal.SqlQuery.ISqlExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.Internal.SqlQuery.ISqlExpression.Precedence.get -> int
LinqToDB.Internal.SqlQuery.ISqlExpression.SystemType.get -> System.Type?
LinqToDB.Internal.SqlQuery.ISqlExpressionEqualityComparer
LinqToDB.Internal.SqlQuery.ISqlExtensionBuilder
LinqToDB.Internal.SqlQuery.ISqlPredicate
LinqToDB.Internal.SqlQuery.ISqlPredicate.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
LinqToDB.Internal.SqlQuery.ISqlPredicate.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.Internal.SqlQuery.ISqlPredicate.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.Internal.SqlQuery.ISqlPredicate.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.ISqlPredicate.Precedence.get -> int
LinqToDB.Internal.SqlQuery.ISqlQueryExtensionBuilder
LinqToDB.Internal.SqlQuery.ISqlQueryExtensionBuilder.Build(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.Internal.SqlQuery.SqlQueryExtension! sqlQueryExtension) -> void
LinqToDB.Internal.SqlQuery.ISqlTableExtensionBuilder
LinqToDB.Internal.SqlQuery.ISqlTableExtensionBuilder.Build(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, System.Text.StringBuilder! stringBuilder, LinqToDB.Internal.SqlQuery.SqlQueryExtension! sqlQueryExtension, LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
LinqToDB.Internal.SqlQuery.ISqlTableSource
LinqToDB.Internal.SqlQuery.ISqlTableSource.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
LinqToDB.Internal.SqlQuery.ISqlTableSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>?
LinqToDB.Internal.SqlQuery.ISqlTableSource.SourceID.get -> int
LinqToDB.Internal.SqlQuery.ISqlTableSource.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.JoinExtensions
LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Auto = 0 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Cross = 3 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.CrossApply = 4 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Full = 7 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.FullApply = 9 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Inner = 1 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Left = 2 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.OuterApply = 5 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.Right = 6 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.JoinType.RightApply = 8 -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.NullabilityContext
LinqToDB.Internal.SqlQuery.NullabilityContext.CanBeNull(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> bool
LinqToDB.Internal.SqlQuery.NullabilityContext.CanBeNullSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! source) -> bool?
LinqToDB.Internal.SqlQuery.NullabilityContext.IsEmpty.get -> bool
LinqToDB.Internal.SqlQuery.NullabilityContext.JoinSource.get -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
LinqToDB.Internal.SqlQuery.NullabilityContext.NullabilityContext(LinqToDB.Internal.SqlQuery.NullabilityContext! parentContext, System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! nullabilityOverrides) -> void
LinqToDB.Internal.SqlQuery.NullabilityContext.NullabilityContext(LinqToDB.Internal.SqlQuery.SelectQuery! inQuery) -> void
LinqToDB.Internal.SqlQuery.NullabilityContext.Queries.get -> LinqToDB.Internal.SqlQuery.SelectQuery![]!
LinqToDB.Internal.SqlQuery.NullabilityContext.WithJoinSource(LinqToDB.Internal.SqlQuery.ISqlTableSource? joinSource) -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlQuery.NullabilityContext.WithQuery(LinqToDB.Internal.SqlQuery.SelectQuery! inQuery) -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlQuery.NullabilityContext.WithTransformationInfo(LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.IfAllParametersNullable = 8 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.IfAnyParameterNullable = 3 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.NotNullable = 2 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.Nullable = 1 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.SameAsFirstParameter = 4 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.SameAsLastParameter = 7 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.SameAsSecondParameter = 5 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.SameAsThirdParameter = 6 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.ParametersNullabilityType.Undefined = 0 -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.PredicateExtensions
LinqToDB.Internal.SqlQuery.PseudoFunctions
LinqToDB.Internal.SqlQuery.QueryElement
LinqToDB.Internal.SqlQuery.QueryElement.QueryElement() -> void
LinqToDB.Internal.SqlQuery.QueryElementTextWriter
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AddVisited(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(byte value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(char value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(char value, int repeatCount) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(decimal value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(double value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(float value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(int value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(long value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(object? value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(sbyte value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(short value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(string? value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(System.Text.StringBuilder? value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(uint value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(ulong value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Append(ushort value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendFormat(string! format, object! arg0) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendFormat(string! format, params object![]! args) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendIdentCheck(string! str) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendLine() -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendLine(char value) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.AppendLine(string! str) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Indent() -> int
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.IndentScope() -> LinqToDB.Internal.Common.SqlTextWriter.IndentScope
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Length.get -> int
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Length.set -> void
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Nullability.get -> LinqToDB.Internal.SqlQuery.NullabilityContext!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.QueryElementTextWriter() -> void
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.QueryElementTextWriter(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> void
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.RemoveVisited(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> void
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.Replace(string! oldValue, string! newValue, int startIndex, int count) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.ToString(int startIndex, int length) -> string!
LinqToDB.Internal.SqlQuery.QueryElementTextWriter.UnIndent() -> int
LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.BetweenPredicate = 20 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.Column = 28 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.Comment = 63 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.CompareTo = 73 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.ConditionalInsertClause = 56 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.CreateTableStatement = 57 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.CteClause = 44 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.DeleteStatement = 53 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.DropTableStatement = 58 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.ExistsPredicate = 26 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.ExprExprPredicate = 17 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.ExprPredicate = 16 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.FalsePredicate = 15 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.FromClause = 36 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.GroupByClause = 39 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.GroupingSet = 62 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.HavingClause = 38 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.InListPredicate = 25 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.InsertClause = 33 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.InsertOrUpdateStatement = 51 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.InsertStatement = 50 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.InSubQueryPredicate = 24 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.IsDistinctPredicate = 22 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.IsNullPredicate = 21 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.IsTruePredicate = 23 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.JoinedTable = 31 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.LikePredicate = 18 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.MergeOperationClause = 61 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.MergeStatement = 54 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.MultiInsertStatement = 55 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.NotPredicate = 13 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.OrderByClause = 40 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.OrderByItem = 41 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.OutputClause = 48 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SearchCondition = 29 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SearchStringPredicate = 19 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SelectClause = 32 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SelectStatement = 49 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SetExpression = 35 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SetOperator = 42 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlAliasPlaceholder = 11 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlAnchor = 5 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlBinaryExpression = 7 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlCase = 71 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlCast = 68 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlCoalesce = 69 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlCondition = 70 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlCteTable = 45 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlDataType = 9 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlExpression = 3 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlExtension = 64 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlField = 0 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlFragment = 74 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlFunction = 1 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlInlinedExpression = 65 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlInlinedToSqlExpression = 66 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlNullabilityExpression = 4 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlObjectExpression = 6 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlParameter = 2 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlQuery = 27 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlQueryExtension = 67 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlRawSqlTable = 46 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlRow = 12 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlSimpleCase = 72 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlTable = 10 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlTableLikeSource = 60 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlValue = 8 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.SqlValuesTable = 47 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.TableSource = 30 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.TruePredicate = 14 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.TruncateTableStatement = 59 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.UpdateClause = 34 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.UpdateStatement = 52 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.WhereClause = 37 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryElementType.WithClause = 43 -> LinqToDB.Internal.SqlQuery.QueryElementType
LinqToDB.Internal.SqlQuery.QueryHelper
LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.CreateTable = 5 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.Delete = 1 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.DropTable = 6 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.Insert = 3 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.InsertOrUpdate = 4 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.Merge = 8 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.MultiInsert = 9 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.Select = 0 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.TruncateTable = 7 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryType.Update = 2 -> LinqToDB.Internal.SqlQuery.QueryType
LinqToDB.Internal.SqlQuery.QueryVisitorExtensions
LinqToDB.Internal.SqlQuery.SelectQuery
LinqToDB.Internal.SqlQuery.SelectQuery.AddUnion(LinqToDB.Internal.SqlQuery.SelectQuery! union, bool isAll) -> void
LinqToDB.Internal.SqlQuery.SelectQuery.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
LinqToDB.Internal.SqlQuery.SelectQuery.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SelectQuery.CloneQuery() -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.SelectQuery.DoNotRemove.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.DoNotRemove.set -> void
LinqToDB.Internal.SqlQuery.SelectQuery.DoNotSetAliases.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.DoNotSetAliases.set -> void
LinqToDB.Internal.SqlQuery.SelectQuery.ForEachTable<TContext>(TContext context, System.Action<TContext, LinqToDB.Internal.SqlQuery.SqlTableSource!>! action, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.SelectQuery!>! visitedQueries) -> void
LinqToDB.Internal.SqlQuery.SelectQuery.From.get -> LinqToDB.Internal.SqlQuery.SqlFromClause!
LinqToDB.Internal.SqlQuery.SelectQuery.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>?
LinqToDB.Internal.SqlQuery.SelectQuery.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
LinqToDB.Internal.SqlQuery.SelectQuery.GroupBy.get -> LinqToDB.Internal.SqlQuery.SqlGroupByClause!
LinqToDB.Internal.SqlQuery.SelectQuery.HasSetOperators.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.HasUniqueKeys.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.Having.get -> LinqToDB.Internal.SqlQuery.SqlHavingClause!
LinqToDB.Internal.SqlQuery.SelectQuery.IsLimited.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.IsParameterDependent.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.IsParameterDependent.set -> void
LinqToDB.Internal.SqlQuery.SelectQuery.IsSimple.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.IsSimpleButWhere.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.IsSimpleOrSet.get -> bool
LinqToDB.Internal.SqlQuery.SelectQuery.OrderBy.get -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SelectQuery.Properties.get -> System.Collections.Generic.List<object!>!
LinqToDB.Internal.SqlQuery.SelectQuery.QueryName.get -> string?
LinqToDB.Internal.SqlQuery.SelectQuery.QueryName.set -> void
LinqToDB.Internal.SqlQuery.SelectQuery.Select.get -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SelectQuery.SelectQuery() -> void
LinqToDB.Internal.SqlQuery.SelectQuery.SetOperators.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetOperator!>!
LinqToDB.Internal.SqlQuery.SelectQuery.SourceID.get -> int
LinqToDB.Internal.SqlQuery.SelectQuery.SqlQueryExtensions.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>?
LinqToDB.Internal.SqlQuery.SelectQuery.SqlQueryExtensions.set -> void
LinqToDB.Internal.SqlQuery.SelectQuery.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SelectQuery.SqlText.get -> string!
LinqToDB.Internal.SqlQuery.SelectQuery.UniqueKeys.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression![]!>!
LinqToDB.Internal.SqlQuery.SelectQuery.Where.get -> LinqToDB.Internal.SqlQuery.SqlWhereClause!
LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.Except = 2 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.ExceptAll = 3 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.Intersect = 4 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.IntersectAll = 5 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.Union = 0 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SetOperation.UnionAll = 1 -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SimilarityMerger
LinqToDB.Internal.SqlQuery.SimilarityMerger.GetSimilarityCodes(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> System.Collections.Generic.IEnumerable<int>!
LinqToDB.Internal.SqlQuery.SimilarityMerger.SimilarityMerger() -> void
LinqToDB.Internal.SqlQuery.SimilarityMerger.TryMerge(LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool isNestedPredicate, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate1, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate2, bool isLogicalOr, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedPredicate) -> bool
LinqToDB.Internal.SqlQuery.SimilarityMerger.TryMerge(LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool isNestedPredicate, LinqToDB.Internal.SqlQuery.ISqlPredicate! single, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicateFromList, bool isLogicalOr, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedSinglePredicate, out LinqToDB.Internal.SqlQuery.ISqlPredicate? mergedListPredicate) -> bool
LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.Many = 4 -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.One = 2 -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.OneOrMany = LinqToDB.Internal.SqlQuery.SourceCardinality.One | LinqToDB.Internal.SqlQuery.SourceCardinality.Many -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.Unknown = 0 -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.Zero = 1 -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.ZeroOrMany = LinqToDB.Internal.SqlQuery.SourceCardinality.Zero | LinqToDB.Internal.SqlQuery.SourceCardinality.Many -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SourceCardinality.ZeroOrOne = LinqToDB.Internal.SqlQuery.SourceCardinality.Zero | LinqToDB.Internal.SqlQuery.SourceCardinality.One -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder
LinqToDB.Internal.SqlQuery.SqlAnchor
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKind.get -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.Deleted = 0 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.Inserted = 1 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.TableAsSelfColumn = 4 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.TableAsSelfColumnOrField = 5 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.TableName = 3 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum.TableSource = 2 -> LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum
LinqToDB.Internal.SqlQuery.SqlAnchor.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> void
LinqToDB.Internal.SqlQuery.SqlAnchor.SqlAnchor(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.Internal.SqlQuery.SqlAnchor.AnchorKindEnum anchorKind) -> void
LinqToDB.Internal.SqlQuery.SqlAnchor.SqlExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlBinaryExpression
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Deconstruct(out LinqToDB.DbDataType type, out LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, out string! operation, out LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> void
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Deconstruct(out LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, out string! operation, out LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> void
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Expr1.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Operation.get -> string!
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, int precedence = 0) -> void
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.SqlBinaryExpression(System.Type! systemType, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, int precedence = 0) -> void
LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlCaseExpression
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.CaseItem(LinqToDB.Internal.SqlQuery.ISqlPredicate! condition, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.Condition.get -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.Condition.set -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.Modify(LinqToDB.Internal.SqlQuery.ISqlPredicate! condition, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.ResultExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.ResultExpression.set -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem.Update(LinqToDB.Internal.SqlQuery.ISqlPredicate! condition, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
LinqToDB.Internal.SqlQuery.SqlCaseExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!>!
LinqToDB.Internal.SqlQuery.SqlCaseExpression.ElseExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlCaseExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.Modify(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!>! cases, LinqToDB.Internal.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.SqlCaseExpression(LinqToDB.DbDataType dataType, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!>! cases, LinqToDB.Internal.SqlQuery.ISqlExpression? elseExpression) -> void
LinqToDB.Internal.SqlQuery.SqlCaseExpression.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlCastExpression
LinqToDB.Internal.SqlQuery.SqlCastExpression.Expression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlCastExpression.FromType.get -> LinqToDB.SqlQuery.SqlDataType?
LinqToDB.Internal.SqlQuery.SqlCastExpression.IsMandatory.get -> bool
LinqToDB.Internal.SqlQuery.SqlCastExpression.MakeMandatory() -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
LinqToDB.Internal.SqlQuery.SqlCastExpression.Modify(LinqToDB.DbDataType toType, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.SqlQuery.SqlDataType? fromType) -> void
LinqToDB.Internal.SqlQuery.SqlCastExpression.SqlCastExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType, bool isMandatory = false) -> void
LinqToDB.Internal.SqlQuery.SqlCastExpression.ToType.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlCastExpression.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlCastExpression.WithExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
LinqToDB.Internal.SqlQuery.SqlCastExpression.WithToType(LinqToDB.DbDataType toType) -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
LinqToDB.Internal.SqlQuery.SqlCoalesceExpression
LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.Expressions.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]!
LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.Modify(params LinqToDB.Internal.SqlQuery.ISqlExpression![]! expressions) -> void
LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.SqlCoalesceExpression(params LinqToDB.Internal.SqlQuery.ISqlExpression![]! expressions) -> void
LinqToDB.Internal.SqlQuery.SqlColumn
LinqToDB.Internal.SqlQuery.SqlColumn.Alias.get -> string?
LinqToDB.Internal.SqlQuery.SqlColumn.Alias.set -> void
LinqToDB.Internal.SqlQuery.SqlColumn.Expression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlColumn.Expression.set -> void
LinqToDB.Internal.SqlQuery.SqlColumn.Parent.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
LinqToDB.Internal.SqlQuery.SqlColumn.Parent.set -> void
LinqToDB.Internal.SqlQuery.SqlColumn.SqlColumn(LinqToDB.Internal.SqlQuery.SelectQuery! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> void
LinqToDB.Internal.SqlQuery.SqlColumn.SqlColumn(LinqToDB.Internal.SqlQuery.SelectQuery? parent, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, string? alias) -> void
LinqToDB.Internal.SqlQuery.SqlColumn.UnderlyingExpression() -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlComment
LinqToDB.Internal.SqlQuery.SqlComment.Lines.get -> System.Collections.Generic.List<string!>!
LinqToDB.Internal.SqlQuery.SqlComment.SqlComment() -> void
LinqToDB.Internal.SqlQuery.SqlCompareToExpression
LinqToDB.Internal.SqlQuery.SqlCompareToExpression.Expression1.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlCompareToExpression.Expression2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlCompareToExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! expression1, LinqToDB.Internal.SqlQuery.ISqlExpression! expression2) -> void
LinqToDB.Internal.SqlQuery.SqlCompareToExpression.SqlCompareToExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expression1, LinqToDB.Internal.SqlQuery.ISqlExpression! expression2) -> void
LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause
LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.Insert.get -> LinqToDB.Internal.SqlQuery.SqlInsertClause!
LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.Modify(LinqToDB.Internal.SqlQuery.SqlInsertClause! insert, LinqToDB.Internal.SqlQuery.SqlSearchCondition? when) -> void
LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.SqlConditionalInsertClause(LinqToDB.Internal.SqlQuery.SqlInsertClause! insert, LinqToDB.Internal.SqlQuery.SqlSearchCondition? when) -> void
LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.When.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition?
LinqToDB.Internal.SqlQuery.SqlConditionExpression
LinqToDB.Internal.SqlQuery.SqlConditionExpression.Condition.get -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlConditionExpression.FalseValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlConditionExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate, LinqToDB.Internal.SqlQuery.ISqlExpression! trueValue, LinqToDB.Internal.SqlQuery.ISqlExpression! falseValue) -> void
LinqToDB.Internal.SqlQuery.SqlConditionExpression.SqlConditionExpression(LinqToDB.Internal.SqlQuery.ISqlPredicate! condition, LinqToDB.Internal.SqlQuery.ISqlExpression! trueValue, LinqToDB.Internal.SqlQuery.ISqlExpression! falseValue) -> void
LinqToDB.Internal.SqlQuery.SqlConditionExpression.TrueValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.DefaultNullable.get -> LinqToDB.SqlQuery.DefaultNullable
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.DefaultNullable.set -> void
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.Modify(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.SqlCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlTable! sqlTable) -> void
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.StatementFooter.get -> string?
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.StatementFooter.set -> void
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.StatementHeader.get -> string?
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.StatementHeader.set -> void
LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.Table.get -> LinqToDB.Internal.SqlQuery.SqlTable!
LinqToDB.Internal.SqlQuery.SqlCteTable
LinqToDB.Internal.SqlQuery.SqlCteTable.Cte.get -> LinqToDB.Internal.SqlQuery.CteClause?
LinqToDB.Internal.SqlQuery.SqlCteTable.Cte.set -> void
LinqToDB.Internal.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.Internal.SqlQuery.CteClause! cte, System.Type! entityType) -> void
LinqToDB.Internal.SqlQuery.SqlCteTable.SqlCteTable(LinqToDB.Internal.SqlQuery.SqlCteTable! table, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlField!>! fields, LinqToDB.Internal.SqlQuery.CteClause? cte) -> void
LinqToDB.Internal.SqlQuery.SqlCteTable.SqlText.get -> string!
LinqToDB.Internal.SqlQuery.SqlDeleteStatement
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Output.get -> LinqToDB.Internal.SqlQuery.SqlOutputClause?
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Output.set -> void
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.SqlDeleteStatement() -> void
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.SqlDeleteStatement(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Table.get -> LinqToDB.Internal.SqlQuery.SqlTable?
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Table.set -> void
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Top.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlDeleteStatement.Top.set -> void
LinqToDB.Internal.SqlQuery.SqlDropTableStatement
LinqToDB.Internal.SqlQuery.SqlDropTableStatement.Modify(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
LinqToDB.Internal.SqlQuery.SqlDropTableStatement.SqlDropTableStatement(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
LinqToDB.Internal.SqlQuery.SqlDropTableStatement.Table.get -> LinqToDB.Internal.SqlQuery.SqlTable!
LinqToDB.Internal.SqlQuery.SqlException
LinqToDB.Internal.SqlQuery.SqlException.SqlException() -> void
LinqToDB.Internal.SqlQuery.SqlException.SqlException(string! message) -> void
LinqToDB.Internal.SqlQuery.SqlException.SqlException(string! message, params object?[]! args) -> void
LinqToDB.Internal.SqlQuery.SqlException.SqlException(string! message, System.Exception! innerException) -> void
LinqToDB.Internal.SqlQuery.SqlException.SqlException(System.Exception! innerException) -> void
LinqToDB.Internal.SqlQuery.SqlExpression
LinqToDB.Internal.SqlQuery.SqlExpression.Expr.get -> string!
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, int precedence, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpression.SqlExpression(LinqToDB.DbDataType type, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlExpressionBase
LinqToDB.Internal.SqlQuery.SqlExpressionBase.SqlExpressionBase() -> void
LinqToDB.Internal.SqlQuery.SqlExtensions
LinqToDB.Internal.SqlQuery.SqlField
LinqToDB.Internal.SqlQuery.SqlField.Alias.get -> string?
LinqToDB.Internal.SqlQuery.SqlField.Alias.set -> void
LinqToDB.Internal.SqlQuery.SqlField.Assign(LinqToDB.Internal.SqlQuery.SqlField! source) -> void
LinqToDB.Internal.SqlQuery.SqlField.BasedOn.get -> LinqToDB.Internal.SqlQuery.SqlField?
LinqToDB.Internal.SqlQuery.SqlField.BasedOn.set -> void
LinqToDB.Internal.SqlQuery.SqlField.CanBeNull.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.CanBeNull.set -> void
LinqToDB.Internal.SqlQuery.SqlField.ColumnDescriptor.get -> LinqToDB.Mapping.ColumnDescriptor!
LinqToDB.Internal.SqlQuery.SqlField.ColumnDescriptor.set -> void
LinqToDB.Internal.SqlQuery.SqlField.CreateFormat.get -> string?
LinqToDB.Internal.SqlQuery.SqlField.CreateFormat.set -> void
LinqToDB.Internal.SqlQuery.SqlField.CreateOrder.get -> int?
LinqToDB.Internal.SqlQuery.SqlField.CreateOrder.set -> void
LinqToDB.Internal.SqlQuery.SqlField.IsDynamic.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.IsDynamic.set -> void
LinqToDB.Internal.SqlQuery.SqlField.IsIdentity.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.IsIdentity.set -> void
LinqToDB.Internal.SqlQuery.SqlField.IsInsertable.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.IsInsertable.set -> void
LinqToDB.Internal.SqlQuery.SqlField.IsPrimaryKey.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.IsPrimaryKey.set -> void
LinqToDB.Internal.SqlQuery.SqlField.IsUpdatable.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.IsUpdatable.set -> void
LinqToDB.Internal.SqlQuery.SqlField.Name.get -> string!
LinqToDB.Internal.SqlQuery.SqlField.Name.set -> void
LinqToDB.Internal.SqlQuery.SqlField.PhysicalName.get -> string!
LinqToDB.Internal.SqlQuery.SqlField.PhysicalName.set -> void
LinqToDB.Internal.SqlQuery.SqlField.PrimaryKeyOrder.get -> int
LinqToDB.Internal.SqlQuery.SqlField.PrimaryKeyOrder.set -> void
LinqToDB.Internal.SqlQuery.SqlField.SkipOnEntityFetch.get -> bool
LinqToDB.Internal.SqlQuery.SqlField.SkipOnEntityFetch.set -> void
LinqToDB.Internal.SqlQuery.SqlField.SqlField(LinqToDB.DbDataType dbDataType, string? name, bool canBeNull) -> void
LinqToDB.Internal.SqlQuery.SqlField.SqlField(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! name) -> void
LinqToDB.Internal.SqlQuery.SqlField.SqlField(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
LinqToDB.Internal.SqlQuery.SqlField.SqlField(LinqToDB.Mapping.ColumnDescriptor! column) -> void
LinqToDB.Internal.SqlQuery.SqlField.SqlField(string! name, string! physicalName) -> void
LinqToDB.Internal.SqlQuery.SqlField.Table.get -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
LinqToDB.Internal.SqlQuery.SqlField.Table.set -> void
LinqToDB.Internal.SqlQuery.SqlField.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlField.Type.set -> void
LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFlags.IsAggregate = 1 -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFlags.IsPredicate = 8 -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFlags.IsPure = 4 -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFlags.IsWindowFunction = 16 -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFlags.None = 0 -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlFragment
LinqToDB.Internal.SqlQuery.SqlFragment.Expr.get -> string!
LinqToDB.Internal.SqlQuery.SqlFragment.Parameters.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]!
LinqToDB.Internal.SqlQuery.SqlFragment.SqlFragment(string! expr, int precedence, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFragment.SqlFragment(string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFromClause
LinqToDB.Internal.SqlQuery.SqlFromClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlFromClause.FindTableSource(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
LinqToDB.Internal.SqlQuery.SqlFromClause.IsChild(LinqToDB.Internal.SqlQuery.ISqlTableSource! table) -> bool
LinqToDB.Internal.SqlQuery.SqlFromClause.Join
LinqToDB.Internal.SqlQuery.SqlFromClause.Join.JoinedTable.get -> LinqToDB.Internal.SqlQuery.SqlJoinedTable!
LinqToDB.Internal.SqlQuery.SqlFromClause.Table(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause!
LinqToDB.Internal.SqlQuery.SqlFromClause.Table(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause!
LinqToDB.Internal.SqlQuery.SqlFromClause.Tables.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlTableSource!>!
LinqToDB.Internal.SqlQuery.SqlFromClause.this[LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias].get -> LinqToDB.Internal.SqlQuery.SqlTableSource?
LinqToDB.Internal.SqlQuery.SqlFromClause.this[LinqToDB.Internal.SqlQuery.ISqlTableSource! table].get -> LinqToDB.Internal.SqlQuery.SqlTableSource?
LinqToDB.Internal.SqlQuery.SqlFunction
LinqToDB.Internal.SqlQuery.SqlFunction.DoNotOptimize.get -> bool
LinqToDB.Internal.SqlQuery.SqlFunction.DoNotOptimize.set -> void
LinqToDB.Internal.SqlQuery.SqlFunction.Name.get -> string!
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, bool isAggregate, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, bool isAggregate, LinqToDB.Internal.SqlQuery.ParametersNullabilityType parametersNullability, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, bool isAggregate, LinqToDB.Internal.SqlQuery.ParametersNullabilityType parametersNullability, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, LinqToDB.Internal.SqlQuery.ParametersNullabilityType parametersNullability, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, LinqToDB.Internal.SqlQuery.ParametersNullabilityType parametersNullability, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, LinqToDB.Internal.SqlQuery.SqlFlags flags, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, LinqToDB.Internal.SqlQuery.SqlFlags flags, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlFunction.SqlFunction(LinqToDB.DbDataType type, string! name, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlGetValue
LinqToDB.Internal.SqlQuery.SqlGetValue.ColumnDescriptor.get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Internal.SqlQuery.SqlGetValue.GetValueFunc.get -> System.Func<object!, object!>?
LinqToDB.Internal.SqlQuery.SqlGetValue.Sql.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlGetValue.SqlGetValue(LinqToDB.Internal.SqlQuery.ISqlExpression! sql, System.Type! valueType, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, System.Func<object!, object!>? getValueFunc) -> void
LinqToDB.Internal.SqlQuery.SqlGetValue.ValueType.get -> System.Type!
LinqToDB.Internal.SqlQuery.SqlGetValue.WithSql(LinqToDB.Internal.SqlQuery.ISqlExpression! sql) -> LinqToDB.Internal.SqlQuery.SqlGetValue!
LinqToDB.Internal.SqlQuery.SqlGroupByClause
LinqToDB.Internal.SqlQuery.SqlGroupByClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlGroupByClause.EnumItems() -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
LinqToDB.Internal.SqlQuery.SqlGroupByClause.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlGroupByClause!
LinqToDB.Internal.SqlQuery.SqlGroupByClause.Field(LinqToDB.Internal.SqlQuery.SqlField! field) -> LinqToDB.Internal.SqlQuery.SqlGroupByClause!
LinqToDB.Internal.SqlQuery.SqlGroupByClause.GroupingType.get -> LinqToDB.Internal.SqlQuery.GroupingType
LinqToDB.Internal.SqlQuery.SqlGroupByClause.GroupingType.set -> void
LinqToDB.Internal.SqlQuery.SqlGroupByClause.IsEmpty.get -> bool
LinqToDB.Internal.SqlQuery.SqlGroupByClause.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
LinqToDB.Internal.SqlQuery.SqlGroupingSet
LinqToDB.Internal.SqlQuery.SqlGroupingSet.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
LinqToDB.Internal.SqlQuery.SqlGroupingSet.SqlGroupingSet() -> void
LinqToDB.Internal.SqlQuery.SqlHavingClause
LinqToDB.Internal.SqlQuery.SqlHavingClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlHavingClause.IsEmpty.get -> bool
LinqToDB.Internal.SqlQuery.SqlHavingClause.SearchCondition.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlInlinedBase
LinqToDB.Internal.SqlQuery.SqlInlinedBase.InlinedValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlInlinedBase.Modify(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, LinqToDB.Internal.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.Internal.SqlQuery.SqlInlinedBase.Parameter.get -> LinqToDB.Internal.SqlQuery.SqlParameter!
LinqToDB.Internal.SqlQuery.SqlInlinedBase.SqlInlinedBase(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, LinqToDB.Internal.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression
LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.SqlInlinedSqlExpression(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, LinqToDB.Internal.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression
LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.SqlInlinedToSqlExpression(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, LinqToDB.Internal.SqlQuery.ISqlExpression! inlinedValue) -> void
LinqToDB.Internal.SqlQuery.SqlInsertClause
LinqToDB.Internal.SqlQuery.SqlInsertClause.Into.get -> LinqToDB.Internal.SqlQuery.SqlTable?
LinqToDB.Internal.SqlQuery.SqlInsertClause.Into.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertClause.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>!
LinqToDB.Internal.SqlQuery.SqlInsertClause.Items.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertClause.Modify(LinqToDB.Internal.SqlQuery.SqlTable? into) -> void
LinqToDB.Internal.SqlQuery.SqlInsertClause.SqlInsertClause() -> void
LinqToDB.Internal.SqlQuery.SqlInsertClause.WithIdentity.get -> bool
LinqToDB.Internal.SqlQuery.SqlInsertClause.WithIdentity.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.Insert.get -> LinqToDB.Internal.SqlQuery.SqlInsertClause!
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.Insert.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.SqlInsertOrUpdateStatement(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.Update.get -> LinqToDB.Internal.SqlQuery.SqlUpdateClause!
LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.Update.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertStatement
LinqToDB.Internal.SqlQuery.SqlInsertStatement.Insert.get -> LinqToDB.Internal.SqlQuery.SqlInsertClause!
LinqToDB.Internal.SqlQuery.SqlInsertStatement.Insert.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertStatement.Output.get -> LinqToDB.Internal.SqlQuery.SqlOutputClause?
LinqToDB.Internal.SqlQuery.SqlInsertStatement.Output.set -> void
LinqToDB.Internal.SqlQuery.SqlInsertStatement.SqlInsertStatement() -> void
LinqToDB.Internal.SqlQuery.SqlInsertStatement.SqlInsertStatement(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable
LinqToDB.Internal.SqlQuery.SqlJoinedTable.Cardinality.get -> LinqToDB.Internal.SqlQuery.SourceCardinality
LinqToDB.Internal.SqlQuery.SqlJoinedTable.Cardinality.set -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.Condition.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlJoinedTable.IsSubqueryExpression.get -> bool
LinqToDB.Internal.SqlQuery.SqlJoinedTable.IsSubqueryExpression.set -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.IsWeak.get -> bool
LinqToDB.Internal.SqlQuery.SqlJoinedTable.IsWeak.set -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.JoinType.get -> LinqToDB.Internal.SqlQuery.JoinType
LinqToDB.Internal.SqlQuery.SqlJoinedTable.JoinType.set -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.SqlJoinedTable(LinqToDB.Internal.SqlQuery.JoinType joinType, LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, bool isWeak) -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.SqlJoinedTable(LinqToDB.Internal.SqlQuery.JoinType joinType, LinqToDB.Internal.SqlQuery.SqlTableSource! table, bool isWeak) -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.SqlJoinedTable(LinqToDB.Internal.SqlQuery.JoinType joinType, LinqToDB.Internal.SqlQuery.SqlTableSource! table, bool isWeak, LinqToDB.Internal.SqlQuery.SqlSearchCondition! searchCondition) -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.SqlQueryExtensions.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>?
LinqToDB.Internal.SqlQuery.SqlJoinedTable.SqlQueryExtensions.set -> void
LinqToDB.Internal.SqlQuery.SqlJoinedTable.Table.get -> LinqToDB.Internal.SqlQuery.SqlTableSource!
LinqToDB.Internal.SqlQuery.SqlJoinedTable.Table.set -> void
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>!
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.OperationType.get -> LinqToDB.MergeOperationType
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.SqlMergeOperationClause(LinqToDB.MergeOperationType type) -> void
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.Where.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition?
LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.WhereDelete.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition?
LinqToDB.Internal.SqlQuery.SqlMergeStatement
LinqToDB.Internal.SqlQuery.SqlMergeStatement.HasIdentityInsert.get -> bool
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Hint.get -> string?
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Modify(LinqToDB.Internal.SqlQuery.SqlTableSource! target, LinqToDB.Internal.SqlQuery.SqlTableLikeSource! source, LinqToDB.Internal.SqlQuery.SqlSearchCondition! on, LinqToDB.Internal.SqlQuery.SqlOutputClause? output) -> void
LinqToDB.Internal.SqlQuery.SqlMergeStatement.On.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Operations.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlMergeOperationClause!>!
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Output.get -> LinqToDB.Internal.SqlQuery.SqlOutputClause?
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Output.set -> void
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Source.get -> LinqToDB.Internal.SqlQuery.SqlTableLikeSource!
LinqToDB.Internal.SqlQuery.SqlMergeStatement.SqlMergeStatement(LinqToDB.Internal.SqlQuery.SqlTable! target) -> void
LinqToDB.Internal.SqlQuery.SqlMergeStatement.Target.get -> LinqToDB.Internal.SqlQuery.SqlTableSource!
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.Add(LinqToDB.Internal.SqlQuery.SqlSearchCondition? when, LinqToDB.Internal.SqlQuery.SqlInsertClause! insert) -> void
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.Inserts.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause!>!
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.InsertType.get -> LinqToDB.SqlQuery.MultiInsertType
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.Modify(LinqToDB.Internal.SqlQuery.SqlTableLikeSource! source) -> void
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.Source.get -> LinqToDB.Internal.SqlQuery.SqlTableLikeSource!
LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.SqlMultiInsertStatement(LinqToDB.Internal.SqlQuery.SqlTableLikeSource! source) -> void
LinqToDB.Internal.SqlQuery.SqlNullabilityExpression
LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.CanBeNull.get -> bool
LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression) -> void
LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.SqlExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.SqlNullabilityExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, bool isNullable) -> void
LinqToDB.Internal.SqlQuery.SqlObjectExpression
LinqToDB.Internal.SqlQuery.SqlObjectExpression.GetSqlValue(object! obj, int index) -> LinqToDB.Internal.SqlQuery.SqlValue!
LinqToDB.Internal.SqlQuery.SqlObjectExpression.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Internal.SqlQuery.SqlObjectExpression.SqlObjectExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlGetValue![]! infoParameters) -> void
LinqToDB.Internal.SqlQuery.SqlObjectNameComparer
LinqToDB.Internal.SqlQuery.SqlOrderByClause
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isDescending, bool isPositioned) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.ExprAsc(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.ExprDesc(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Field(LinqToDB.Internal.SqlQuery.SqlField! field, bool isDescending, bool isPositioned) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Field(LinqToDB.Internal.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.FieldAsc(LinqToDB.Internal.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.FieldDesc(LinqToDB.Internal.SqlQuery.SqlField! field, bool isPositioned = false) -> LinqToDB.Internal.SqlQuery.SqlOrderByClause!
LinqToDB.Internal.SqlQuery.SqlOrderByClause.IsEmpty.get -> bool
LinqToDB.Internal.SqlQuery.SqlOrderByClause.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlOrderByItem!>!
LinqToDB.Internal.SqlQuery.SqlOrderByItem
LinqToDB.Internal.SqlQuery.SqlOrderByItem.Expression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlOrderByItem.IsDescending.get -> bool
LinqToDB.Internal.SqlQuery.SqlOrderByItem.IsPositioned.get -> bool
LinqToDB.Internal.SqlQuery.SqlOrderByItem.SqlOrderByItem(LinqToDB.Internal.SqlQuery.ISqlExpression! expression, bool isDescending, bool isPositioned) -> void
LinqToDB.Internal.SqlQuery.SqlOutputClause
LinqToDB.Internal.SqlQuery.SqlOutputClause.HasOutput.get -> bool
LinqToDB.Internal.SqlQuery.SqlOutputClause.HasOutputItems.get -> bool
LinqToDB.Internal.SqlQuery.SqlOutputClause.Modify(LinqToDB.Internal.SqlQuery.SqlTable? outputTable) -> void
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputColumns.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>?
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputColumns.set -> void
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputItems.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>!
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputItems.set -> void
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputTable.get -> LinqToDB.Internal.SqlQuery.SqlTable?
LinqToDB.Internal.SqlQuery.SqlOutputClause.OutputTable.set -> void
LinqToDB.Internal.SqlQuery.SqlOutputClause.SqlOutputClause() -> void
LinqToDB.Internal.SqlQuery.SqlParameter
LinqToDB.Internal.SqlQuery.SqlParameter.AccessorId.get -> int?
LinqToDB.Internal.SqlQuery.SqlParameter.CorrectParameterValue(object? rawValue) -> object?
LinqToDB.Internal.SqlQuery.SqlParameter.IsQueryParameter.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameter.IsQueryParameter.set -> void
LinqToDB.Internal.SqlQuery.SqlParameter.Name.get -> string?
LinqToDB.Internal.SqlQuery.SqlParameter.Name.set -> void
LinqToDB.Internal.SqlQuery.SqlParameter.NeedsCast.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameter.NeedsCast.set -> void
LinqToDB.Internal.SqlQuery.SqlParameter.SqlParameter(LinqToDB.DbDataType type, string? name, object? value) -> void
LinqToDB.Internal.SqlQuery.SqlParameter.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlParameter.Type.set -> void
LinqToDB.Internal.SqlQuery.SqlParameter.Value.get -> object?
LinqToDB.Internal.SqlQuery.SqlParameter.ValueConverter.get -> System.Func<object?, object?>?
LinqToDB.Internal.SqlQuery.SqlParameter.ValueConverter.set -> void
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.CanBeNull.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.CanBeNull.set -> void
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.CanBeNullNullable.get -> bool?
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.ExprOrName.get -> string!
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.Flags.get -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.IsAggregate.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.IsPredicate.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.IsPure.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.IsWindowFunction.get -> bool
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.NullabilityType.get -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.Parameters.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]!
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.SqlParameterizedExpressionBase(LinqToDB.DbDataType type, string! exprOrName, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, LinqToDB.Internal.SqlQuery.ParametersNullabilityType nullabilityType, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.Type.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlParameterValue
LinqToDB.Internal.SqlQuery.SqlParameterValue.ClientValue.get -> object?
LinqToDB.Internal.SqlQuery.SqlParameterValue.DbDataType.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlParameterValue.ProviderValue.get -> object?
LinqToDB.Internal.SqlQuery.SqlParameterValue.SqlParameterValue(object? providerValue, object? clientValue, LinqToDB.DbDataType dbDataType) -> void
LinqToDB.Internal.SqlQuery.SqlParameterValues
LinqToDB.Internal.SqlQuery.SqlParameterValues.AddValue(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, object? providerValue, object? clientValue, LinqToDB.DbDataType dbDataType) -> void
LinqToDB.Internal.SqlQuery.SqlParameterValues.SetValue(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, object? providerValue, object? clientValue) -> void
LinqToDB.Internal.SqlQuery.SqlParameterValues.SqlParameterValues() -> void
LinqToDB.Internal.SqlQuery.SqlParameterValues.TryGetValue(LinqToDB.Internal.SqlQuery.SqlParameter! parameter, out LinqToDB.Internal.SqlQuery.SqlParameterValue? value) -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate
LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr
LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr.BaseNotExpr(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, int precedence) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr.IsNot.get -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate.Between
LinqToDB.Internal.SqlQuery.SqlPredicate.Between.Between(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.Internal.SqlQuery.ISqlExpression! exp2, LinqToDB.Internal.SqlQuery.ISqlExpression! exp3) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Between.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.Between.Expr3.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.Deconstruct(out bool isNot, out LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.Exists(bool isNot, LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.IsNot.get -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.Modify(LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.SubQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.SqlPredicate.Expr
LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, int precedence) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Expr1.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Expr1.set -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Deconstruct(out LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, out LinqToDB.Internal.SqlQuery.SqlPredicate.Operator operator, out LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, out bool? unknownAsValue) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.ExprExpr(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, LinqToDB.Internal.SqlQuery.SqlPredicate.Operator op, LinqToDB.Internal.SqlQuery.ISqlExpression! exp2, bool? unknownAsValue, bool notNullableExpr1 = false, bool notNullableExpr2 = false) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.NotNullableExpr1.get -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.NotNullableExpr2.get -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Operator.get -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Reduce(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.EvaluationContext! context, bool isInsidePredicate, LinqToDB.LinqOptions! options) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.UnknownAsValue.get -> bool?
LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate
LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.FalsePredicate() -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InList
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.InList(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool? withNull, bool isNot) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.InList(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool? withNull, bool isNot, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.InList(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool? withNull, bool isNot, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlExpression!>? values) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.Values.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
LinqToDB.Internal.SqlQuery.SqlPredicate.InList.WithNull.get -> bool?
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.Deconstruct(out LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, out bool isNot, out LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.DoNotConvert.get -> bool
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.InSubQuery(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.Internal.SqlQuery.SelectQuery! subQuery, bool doNotConvert) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.SubQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct
LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.IsDistinct(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.Internal.SqlQuery.ISqlExpression! exp2) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull
LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull.IsNull(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.FalseValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.FalseValue.set -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.IsTrue(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, LinqToDB.Internal.SqlQuery.ISqlExpression! trueValue, LinqToDB.Internal.SqlQuery.ISqlExpression! falseValue, bool? withNull, bool isNot) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.Reduce(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool isInsidePredicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.TrueValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.TrueValue.set -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.WithNull.get -> bool?
LinqToDB.Internal.SqlQuery.SqlPredicate.Like
LinqToDB.Internal.SqlQuery.SqlPredicate.Like.Escape.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlPredicate.Like.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.Like.FunctionName.get -> string?
LinqToDB.Internal.SqlQuery.SqlPredicate.Like.Like(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.Internal.SqlQuery.ISqlExpression! exp2, LinqToDB.Internal.SqlQuery.ISqlExpression? escape, string? functionName = null) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Not
LinqToDB.Internal.SqlQuery.SqlPredicate.Not.Modify(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Not.Not(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.Not.Predicate.get -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.Equal = 0 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.Greater = 2 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.GreaterOrEqual = 3 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.Less = 5 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.LessOrEqual = 6 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.NotEqual = 1 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.NotGreater = 4 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.NotLess = 7 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Operator.Overlaps = 8 -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
LinqToDB.Internal.SqlQuery.SqlPredicate.Precedence.get -> int
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.CaseSensitive.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.Expr2.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.Kind.get -> LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.Internal.SqlQuery.ISqlExpression! caseSensitive) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind.Contains = 2 -> LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind.EndsWith = 1 -> LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind.StartsWith = 0 -> LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind
LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchString(LinqToDB.Internal.SqlQuery.ISqlExpression! exp1, bool isNot, LinqToDB.Internal.SqlQuery.ISqlExpression! exp2, LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.SearchKind searchKind, LinqToDB.Internal.SqlQuery.ISqlExpression! caseSensitive) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.SqlPredicate(int precedence) -> void
LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate
LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.TruePredicate() -> void
LinqToDB.Internal.SqlQuery.SqlQueryExtension
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Arguments.get -> System.Collections.Generic.Dictionary<string!, LinqToDB.Internal.SqlQuery.ISqlExpression!>!
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Arguments.init -> void
LinqToDB.Internal.SqlQuery.SqlQueryExtension.BuilderType.get -> System.Type?
LinqToDB.Internal.SqlQuery.SqlQueryExtension.BuilderType.init -> void
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Configuration.get -> string?
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Configuration.init -> void
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Scope.get -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Internal.SqlQuery.SqlQueryExtension.Scope.init -> void
LinqToDB.Internal.SqlQuery.SqlQueryExtension.SqlQueryExtension() -> void
LinqToDB.Internal.SqlQuery.SqlRawSqlTable
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.IsScalar.get -> bool
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.Parameters.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]!
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.SQL.get -> string!
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.SqlRawSqlTable(LinqToDB.Internal.SqlQuery.SqlRawSqlTable! table, LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.SqlRawSqlTable(LinqToDB.Mapping.EntityDescriptor! endtityDescriptor, string! sql, bool isScalar, LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> void
LinqToDB.Internal.SqlQuery.SqlRawSqlTable.SqlText.get -> string!
LinqToDB.Internal.SqlQuery.SqlRowExpression
LinqToDB.Internal.SqlQuery.SqlRowExpression.SqlRowExpression(LinqToDB.Internal.SqlQuery.ISqlExpression![]! values) -> void
LinqToDB.Internal.SqlQuery.SqlRowExpression.Values.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]!
LinqToDB.Internal.SqlQuery.SqlSearchCondition
LinqToDB.Internal.SqlQuery.SqlSearchCondition.Add(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlSearchCondition.AddRange(System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlPredicate!>! predicates) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlSearchCondition.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.CanReturnUnknown.get -> bool?
LinqToDB.Internal.SqlQuery.SqlSearchCondition.Deconstruct(out System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlPredicate!>! predicates) -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsAnd.get -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsAnd.set -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsFalse() -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsOr.get -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsOr.set -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.IsTrue() -> bool
LinqToDB.Internal.SqlQuery.SqlSearchCondition.Predicates.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlPredicate!>!
LinqToDB.Internal.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr = false, bool? canBeUnknown = null) -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, bool? canBeUnknown, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, bool? canBeUnknown, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate1, LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate2) -> void
LinqToDB.Internal.SqlQuery.SqlSearchCondition.SqlSearchCondition(bool isOr, bool? canBeUnknown, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlPredicate!>! predicates) -> void
LinqToDB.Internal.SqlQuery.SqlSelectClause
LinqToDB.Internal.SqlQuery.SqlSelectClause.Add(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> int
LinqToDB.Internal.SqlQuery.SqlSelectClause.Add(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias) -> int
LinqToDB.Internal.SqlQuery.SqlSelectClause.AddColumn(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlColumn!
LinqToDB.Internal.SqlQuery.SqlSelectClause.AddNew(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias = null) -> int
LinqToDB.Internal.SqlQuery.SqlSelectClause.AddNewColumn(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlColumn!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlSelectClause.Columns.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlColumn!>!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr(LinqToDB.DbDataType type, string! alias, string! expr, int priority, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! values) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr(LinqToDB.DbDataType type, string! expr, int priority, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! values) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr(LinqToDB.DbDataType type, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! values) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string! alias) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr<T>(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, int priority) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Expr<T>(string! alias, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, int priority) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.ExprNew(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Field(LinqToDB.Internal.SqlQuery.SqlField! field) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Field(LinqToDB.Internal.SqlQuery.SqlField! field, string! alias) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.HasModifier.get -> bool
LinqToDB.Internal.SqlQuery.SqlSelectClause.IsDistinct.get -> bool
LinqToDB.Internal.SqlQuery.SqlSelectClause.IsDistinct.set -> void
LinqToDB.Internal.SqlQuery.SqlSelectClause.OptimizeDistinct.get -> bool
LinqToDB.Internal.SqlQuery.SqlSelectClause.OptimizeDistinct.set -> void
LinqToDB.Internal.SqlQuery.SqlSelectClause.Skip(int value) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Skip(LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.SkipValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlSelectClause.SkipValue.set -> void
LinqToDB.Internal.SqlQuery.SqlSelectClause.SubQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, string! alias) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.SubQuery(LinqToDB.Internal.SqlQuery.SelectQuery! subQuery) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Take(int value, LinqToDB.TakeHints? hints) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.Take(LinqToDB.Internal.SqlQuery.ISqlExpression? value, LinqToDB.TakeHints? hints) -> LinqToDB.Internal.SqlQuery.SqlSelectClause!
LinqToDB.Internal.SqlQuery.SqlSelectClause.TakeHints.get -> LinqToDB.TakeHints?
LinqToDB.Internal.SqlQuery.SqlSelectClause.TakeValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlSelectStatement
LinqToDB.Internal.SqlQuery.SqlSelectStatement.SqlSelectStatement() -> void
LinqToDB.Internal.SqlQuery.SqlSelectStatement.SqlSelectStatement(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlSetExpression
LinqToDB.Internal.SqlQuery.SqlSetExpression.Column.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlSetExpression.Column.set -> void
LinqToDB.Internal.SqlQuery.SqlSetExpression.Expression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlSetExpression.Expression.set -> void
LinqToDB.Internal.SqlQuery.SqlSetExpression.SqlSetExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! column, LinqToDB.Internal.SqlQuery.ISqlExpression? expression) -> void
LinqToDB.Internal.SqlQuery.SqlSetOperator
LinqToDB.Internal.SqlQuery.SqlSetOperator.Modify(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlSetOperator.Operation.get -> LinqToDB.Internal.SqlQuery.SetOperation
LinqToDB.Internal.SqlQuery.SqlSetOperator.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Internal.SqlQuery.SqlSetOperator.SqlSetOperator(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SetOperation operation) -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.CaseExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! matchValue, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.MatchValue.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.MatchValue.set -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! matchValue, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.ResultExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.ResultExpression.set -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression.Update(LinqToDB.Internal.SqlQuery.ISqlExpression! matchValue, LinqToDB.Internal.SqlQuery.ISqlExpression! resultExpression) -> LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression!
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.Cases.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>!
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.ElseExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression! primaryExpression, System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>! cases, LinqToDB.Internal.SqlQuery.ISqlExpression? resultExpression) -> void
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.PrimaryExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.SqlSimpleCaseExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! primaryExpression, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CaseExpression!>! cases, LinqToDB.Internal.SqlQuery.ISqlExpression? elseExpression) -> void
LinqToDB.Internal.SqlQuery.SqlSourceBase
LinqToDB.Internal.SqlQuery.SqlSourceBase.SourceID.get -> int
LinqToDB.Internal.SqlQuery.SqlSourceBase.SqlSourceBase() -> void
LinqToDB.Internal.SqlQuery.SqlSourceBase.SqlSourceBase(int sourceId) -> void
LinqToDB.Internal.SqlQuery.SqlStatement
LinqToDB.Internal.SqlQuery.SqlStatement.DebugSqlText.get -> string!
LinqToDB.Internal.SqlQuery.SqlStatement.ParentStatement.get -> LinqToDB.Internal.SqlQuery.SqlStatement?
LinqToDB.Internal.SqlQuery.SqlStatement.ParentStatement.set -> void
LinqToDB.Internal.SqlQuery.SqlStatement.SqlQueryExtensions.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>?
LinqToDB.Internal.SqlQuery.SqlStatement.SqlQueryExtensions.set -> void
LinqToDB.Internal.SqlQuery.SqlStatement.SqlStatement() -> void
LinqToDB.Internal.SqlQuery.SqlStatement.SqlText.get -> string!
LinqToDB.Internal.SqlQuery.SqlStatement.Tag.get -> LinqToDB.Internal.SqlQuery.SqlComment?
LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase
LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.SqlStatementWithQueryBase(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.With.get -> LinqToDB.Internal.SqlQuery.SqlWithClause?
LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.With.set -> void
LinqToDB.Internal.SqlQuery.SqlTable
LinqToDB.Internal.SqlQuery.SqlTable.Add(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
LinqToDB.Internal.SqlQuery.SqlTable.AddRange(System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlField!>! collection) -> void
LinqToDB.Internal.SqlQuery.SqlTable.Alias.get -> string?
LinqToDB.Internal.SqlQuery.SqlTable.Alias.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
LinqToDB.Internal.SqlQuery.SqlTable.CanBeNull.get -> bool
LinqToDB.Internal.SqlQuery.SqlTable.CanBeNull.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.Expression.get -> string?
LinqToDB.Internal.SqlQuery.SqlTable.Expression.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.Fields.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.SqlTable.FindFieldByMemberName(string! memberName) -> LinqToDB.Internal.SqlQuery.SqlField?
LinqToDB.Internal.SqlQuery.SqlTable.GetIdentityField() -> LinqToDB.Internal.SqlQuery.SqlField?
LinqToDB.Internal.SqlQuery.SqlTable.IdentityFields.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.SqlTable.ObjectType.get -> System.Type!
LinqToDB.Internal.SqlQuery.SqlTable.ObjectType.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.ResetKeys() -> void
LinqToDB.Internal.SqlQuery.SqlTable.SequenceAttributes.get -> LinqToDB.Mapping.SequenceNameAttribute![]?
LinqToDB.Internal.SqlQuery.SqlTable.SequenceAttributes.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.SourceID.get -> int
LinqToDB.Internal.SqlQuery.SqlTable.SqlQueryExtensions.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>?
LinqToDB.Internal.SqlQuery.SqlTable.SqlQueryExtensions.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.SqlTable(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
LinqToDB.Internal.SqlQuery.SqlTable.SqlTable(LinqToDB.Internal.SqlQuery.SqlTable! table, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlField!>! fields, LinqToDB.Internal.SqlQuery.ISqlExpression![]! tableArguments) -> void
LinqToDB.Internal.SqlQuery.SqlTable.SqlTable(LinqToDB.Mapping.EntityDescriptor! entityDescriptor, string? physicalName = null) -> void
LinqToDB.Internal.SqlQuery.SqlTable.SqlTable(System.Type! objectType, int? sourceId, LinqToDB.SqlQuery.SqlObjectName tableName) -> void
LinqToDB.Internal.SqlQuery.SqlTable.TableArguments.get -> LinqToDB.Internal.SqlQuery.ISqlExpression![]?
LinqToDB.Internal.SqlQuery.SqlTable.TableArguments.set -> void
LinqToDB.Internal.SqlQuery.SqlTable.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Internal.SqlQuery.SqlTable.TableOptions.set -> void
LinqToDB.Internal.SqlQuery.SqlTableLikeSource
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.AddField(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.IsParameterDependent.get -> bool
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.IsParameterDependent.set -> void
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.Name.get -> string!
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SourceEnumerable.get -> LinqToDB.Internal.SqlQuery.SqlValuesTable?
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SourceFields.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SourceQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SqlTableLikeSource() -> void
LinqToDB.Internal.SqlQuery.SqlTableSource
LinqToDB.Internal.SqlQuery.SqlTableSource.Alias.get -> string?
LinqToDB.Internal.SqlQuery.SqlTableSource.Alias.set -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
LinqToDB.Internal.SqlQuery.SqlTableSource.Deconstruct(out LinqToDB.Internal.SqlQuery.ISqlTableSource! source) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.ForEach<TContext>(TContext context, System.Action<TContext, LinqToDB.Internal.SqlQuery.SqlTableSource!>! action, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.SelectQuery!>! visitedQueries) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.GetJoinNumber() -> int
LinqToDB.Internal.SqlQuery.SqlTableSource.GetTables() -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlTableSource!>!
LinqToDB.Internal.SqlQuery.SqlTableSource.HasUniqueKeys.get -> bool
LinqToDB.Internal.SqlQuery.SqlTableSource.Joins.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlJoinedTable!>!
LinqToDB.Internal.SqlQuery.SqlTableSource.Modify(LinqToDB.Internal.SqlQuery.ISqlTableSource! source) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.Source.get -> LinqToDB.Internal.SqlQuery.ISqlTableSource!
LinqToDB.Internal.SqlQuery.SqlTableSource.Source.set -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.SourceID.get -> int
LinqToDB.Internal.SqlQuery.SqlTableSource.SqlTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! source, string? alias) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.SqlTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! source, string? alias, params LinqToDB.Internal.SqlQuery.SqlJoinedTable![]? joins) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.SqlTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! source, string? alias, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlJoinedTable!>! joins, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlExpression![]!>? uniqueKeys) -> void
LinqToDB.Internal.SqlQuery.SqlTableSource.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableSource.this[LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias].get -> LinqToDB.Internal.SqlQuery.SqlTableSource?
LinqToDB.Internal.SqlQuery.SqlTableSource.this[LinqToDB.Internal.SqlQuery.ISqlTableSource! table].get -> LinqToDB.Internal.SqlQuery.SqlTableSource?
LinqToDB.Internal.SqlQuery.SqlTableSource.UniqueKeys.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression![]!>!
LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.Cte = 4 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.Expression = 3 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.Function = 2 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.MergeSource = 6 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.RawSql = 5 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.SystemTable = 1 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.Table = 0 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTableType.Values = 7 -> LinqToDB.Internal.SqlQuery.SqlTableType
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.ResetIdentity.get -> bool
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.ResetIdentity.set -> void
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.SqlTruncateTableStatement() -> void
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.Table.get -> LinqToDB.Internal.SqlQuery.SqlTable?
LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.Table.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause
LinqToDB.Internal.SqlQuery.SqlUpdateClause.HasComparison.get -> bool
LinqToDB.Internal.SqlQuery.SqlUpdateClause.HasComparison.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Items.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>!
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Items.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Keys.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlSetExpression!>!
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Keys.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Modify(LinqToDB.Internal.SqlQuery.SqlTable? table, LinqToDB.Internal.SqlQuery.SqlTableSource? tableSource) -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.SqlUpdateClause() -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Table.get -> LinqToDB.Internal.SqlQuery.SqlTable?
LinqToDB.Internal.SqlQuery.SqlUpdateClause.Table.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateClause.TableSource.get -> LinqToDB.Internal.SqlQuery.SqlTableSource?
LinqToDB.Internal.SqlQuery.SqlUpdateClause.TableSource.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateStatement
LinqToDB.Internal.SqlQuery.SqlUpdateStatement.Output.get -> LinqToDB.Internal.SqlQuery.SqlOutputClause?
LinqToDB.Internal.SqlQuery.SqlUpdateStatement.Output.set -> void
LinqToDB.Internal.SqlQuery.SqlUpdateStatement.SqlUpdateStatement(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
LinqToDB.Internal.SqlQuery.SqlUpdateStatement.Update.get -> LinqToDB.Internal.SqlQuery.SqlUpdateClause!
LinqToDB.Internal.SqlQuery.SqlUpdateStatement.Update.set -> void
LinqToDB.Internal.SqlQuery.SqlValue
LinqToDB.Internal.SqlQuery.SqlValue.Deconstruct(out object? value) -> void
LinqToDB.Internal.SqlQuery.SqlValue.SqlValue(LinqToDB.DbDataType valueType, object? value) -> void
LinqToDB.Internal.SqlQuery.SqlValue.SqlValue(object! value) -> void
LinqToDB.Internal.SqlQuery.SqlValue.SqlValue(System.Type! systemType, object? value) -> void
LinqToDB.Internal.SqlQuery.SqlValue.Value.get -> object?
LinqToDB.Internal.SqlQuery.SqlValue.ValueType.get -> LinqToDB.DbDataType
LinqToDB.Internal.SqlQuery.SqlValue.ValueType.set -> void
LinqToDB.Internal.SqlQuery.SqlValuesTable
LinqToDB.Internal.SqlQuery.SqlValuesTable.AddField(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
LinqToDB.Internal.SqlQuery.SqlValuesTable.Fields.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.SqlValuesTable.Modify(LinqToDB.Internal.SqlQuery.ISqlExpression? source) -> void
LinqToDB.Internal.SqlQuery.SqlValuesTable.RemoveField(int fieldIndex) -> void
LinqToDB.Internal.SqlQuery.SqlValuesTable.SourceID.get -> int
LinqToDB.Internal.SqlQuery.SqlWhereClause
LinqToDB.Internal.SqlQuery.SqlWhereClause.Cleanup() -> void
LinqToDB.Internal.SqlQuery.SqlWhereClause.IsEmpty.get -> bool
LinqToDB.Internal.SqlQuery.SqlWhereClause.SearchCondition.get -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
LinqToDB.Internal.SqlQuery.SqlWithClause
LinqToDB.Internal.SqlQuery.SqlWithClause.Clauses.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.CteClause!>!
LinqToDB.Internal.SqlQuery.SqlWithClause.Clauses.set -> void
LinqToDB.Internal.SqlQuery.SqlWithClause.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
LinqToDB.Internal.SqlQuery.SqlWithClause.SqlWithClause() -> void
LinqToDB.Internal.SqlQuery.Visitors.QueryElementCorrectVisitor
LinqToDB.Internal.SqlQuery.Visitors.QueryElementCorrectVisitor.QueryElementCorrectVisitor(LinqToDB.Internal.SqlQuery.Visitors.VisitMode visitMode, LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor! visitor, LinqToDB.Internal.SqlQuery.IQueryElement! toReplace, LinqToDB.Internal.SqlQuery.IQueryElement! replaceBy) -> void
LinqToDB.Internal.SqlQuery.Visitors.QueryElementReplacingVisitor
LinqToDB.Internal.SqlQuery.Visitors.QueryElementReplacingVisitor.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.QueryElementReplacingVisitor.QueryElementReplacingVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.QueryElementReplacingVisitor.Replace(LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Collections.Generic.IDictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! replacements, params LinqToDB.Internal.SqlQuery.IQueryElement![]! toIgnore) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.CopyFields(System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlField!>! fields) -> System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SqlField!>!
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.CreateInvalidVisitModeException(string? methodName = null) -> System.Exception!
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.QueryElementVisitor(LinqToDB.Internal.SqlQuery.Visitors.VisitMode visitMode) -> void
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitElements<T>(System.Collections.Generic.List<T!>? list1, LinqToDB.Internal.SqlQuery.Visitors.VisitMode mode) -> System.Collections.Generic.List<T!>?
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitElements<T>(System.Collections.Generic.List<T!>? list1, LinqToDB.Internal.SqlQuery.Visitors.VisitMode mode, System.Func<T!, T!>! transformFunc) -> System.Collections.Generic.List<T!>?
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitElements<T>(T![]? arr1, LinqToDB.Internal.SqlQuery.Visitors.VisitMode mode) -> T![]?
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitListOfArrays<T>(System.Collections.Generic.List<T![]!>? list1, LinqToDB.Internal.SqlQuery.Visitors.VisitMode mode) -> System.Collections.Generic.List<T![]!>?
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitListOfLists<T>(System.Collections.Generic.List<System.Collections.Generic.List<T!>!>? list1, LinqToDB.Internal.SqlQuery.Visitors.VisitMode mode) -> System.Collections.Generic.List<System.Collections.Generic.List<T!>!>?
LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitMode.get -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
LinqToDB.Internal.SqlQuery.Visitors.SelectQueryOptimizerVisitor
LinqToDB.Internal.SqlQuery.Visitors.SelectQueryOptimizerVisitor.Optimize(LinqToDB.Internal.SqlQuery.IQueryElement! root, LinqToDB.Internal.SqlQuery.IQueryElement! rootElement, LinqToDB.Internal.SqlProvider.SqlProviderFlags! providerFlags, bool removeWeakJoins, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext, params LinqToDB.Internal.SqlQuery.IQueryElement![]! dependencies) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SelectQueryOptimizerVisitor.SelectQueryOptimizerVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor.SqlQueryActionVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement! root, bool visitAll, System.Action<LinqToDB.Internal.SqlQuery.IQueryElement!>! visitAction) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.SqlQueryActionVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Visit(TContext context, LinqToDB.Internal.SqlQuery.IQueryElement! root, bool visitAll, System.Action<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!>! visitAction) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor.Clone(LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>? cloneFunc) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor.SqlQueryCloneVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.Clone(LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! cloneFunc) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.SqlQueryCloneVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitorBase
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitorBase.PerformClone(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitorBase.RegisterReplacements(System.Collections.Generic.IReadOnlyDictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! replacements) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitorBase.SqlQueryCloneVisitorBase() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnNestingCorrector
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnNestingCorrector.CorrectColumnNesting(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnNestingCorrector.HasSelectQuery.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnNestingCorrector.SqlQueryColumnNestingCorrector() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnUsageCollector
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnUsageCollector.CollectUsedColumns(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnUsageCollector.SqlQueryColumnUsageCollector() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnUsageCollector.UsedColumns.get -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.SqlColumn!>!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.ColumnExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Context.get -> TContext
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Convert(LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertFunc, bool withStack) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.SqlQueryConvertVisitor(bool allowMutation) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.AllowMutation.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.ParentElement.get -> LinqToDB.Internal.SqlQuery.IQueryElement?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.PerformConvert(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.SqlQueryConvertVisitorBase(bool allowMutation, LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Stack.get -> System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.IQueryElement!>?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Stack.set -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.WithStack.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.WithStack.set -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Find(TContext context, LinqToDB.Internal.SqlQuery.IQueryElement! root, LinqToDB.Internal.SqlQuery.IQueryElement! skip, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.Internal.SqlQuery.IQueryElement?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.SqlQueryFindExceptVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor.Find(LinqToDB.Internal.SqlQuery.IQueryElement! root, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.Internal.SqlQuery.IQueryElement?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor.SqlQueryFindVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Find(TContext context, LinqToDB.Internal.SqlQuery.IQueryElement! root, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! findFunc) -> LinqToDB.Internal.SqlQuery.IQueryElement?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.SqlQueryFindVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryHelperVisitorBase
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryHelperVisitorBase.SqlQueryHelperVisitorBase() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.SqlQueryNestingValidationVisitor(bool isSubQuery, LinqToDB.Internal.SqlQuery.IQueryElement! forStatement) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer.IsOptimized.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer.NeedsNestingUpdate.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer.OptimizeOrderBy(LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.Internal.SqlProvider.SqlProviderFlags! providerFlags) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer.SqlQueryOrderByOptimizer() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor.SqlQueryParentFirstVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement! root, bool visitAll, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.SqlQueryParentFirstVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Visit(TContext context, LinqToDB.Internal.SqlQuery.IQueryElement! root, bool visitAll, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.Cleanup() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.ErrorMessage.get -> string?
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValid.get -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidQuery(LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.Internal.SqlQuery.SelectQuery? parentQuery, LinqToDB.Internal.SqlQuery.SqlJoinedTable? fakeJoin, int? columnSubqueryLevel, LinqToDB.Internal.SqlProvider.SqlProviderFlags! providerFlags, out string? errorMessage) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.IsValidSubQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, out string? errorMessage) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.SetInvalid(string! errorMessage) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.SqlQueryValidatorVisitor() -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.AddReplacements(System.Collections.Generic.IReadOnlyDictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! replacements) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.GetReplacement(LinqToDB.Internal.SqlQuery.IQueryElement! element, out LinqToDB.Internal.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.GetTransformationInfo() -> LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetOriginal(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetReplacement(LinqToDB.Internal.SqlQuery.IQueryElement! element, out LinqToDB.Internal.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.IsReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.RegisterReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo.Version.get -> int
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.SetTransformationInfo(LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.SqlQueryVisitor(LinqToDB.Internal.SqlQuery.Visitors.VisitMode visitMode, LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetOriginal(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetReplacement(LinqToDB.Internal.SqlQuery.IQueryElement! element, out LinqToDB.Internal.SqlQuery.IQueryElement? replacement) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.GetReplacements(System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! objectTree) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.IsReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.RegisterReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> void
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.Version.get -> int
LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitorTransformationInfo.VisitorTransformationInfo() -> void
LinqToDB.Internal.SqlQuery.Visitors.VisitMode
LinqToDB.Internal.SqlQuery.Visitors.VisitMode.Modify = 1 -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
LinqToDB.Internal.SqlQuery.Visitors.VisitMode.ReadOnly = 0 -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
LinqToDB.Internal.SqlQuery.Visitors.VisitMode.Transform = 2 -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
LinqToDB.ITable<T>
LinqToDB.ITable<T>.DatabaseName.get -> string?
LinqToDB.ITable<T>.SchemaName.get -> string?
LinqToDB.ITable<T>.ServerName.get -> string?
LinqToDB.ITable<T>.TableID.get -> string?
LinqToDB.ITable<T>.TableName.get -> string!
LinqToDB.ITable<T>.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.KeepConnectionAliveScope
LinqToDB.KeepConnectionAliveScope.Dispose() -> void
LinqToDB.KeepConnectionAliveScope.DisposeAsync() -> System.Threading.Tasks.ValueTask
LinqToDB.KeepConnectionAliveScope.KeepConnectionAliveScope(LinqToDB.DataContext! dataContext) -> void
LinqToDB.Linq.Expressions
LinqToDB.Linq.Expressions.LazyExpressionInfo
LinqToDB.Linq.Expressions.LazyExpressionInfo.GetExpression(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Linq.Expressions.LazyExpressionInfo.Lambda -> System.Func<System.Linq.Expressions.LambdaExpression!>?
LinqToDB.Linq.Expressions.LazyExpressionInfo.LazyExpressionInfo() -> void
LinqToDB.Linq.Expressions.LazyExpressionInfo.SetExpression(System.Linq.Expressions.LambdaExpression! expression) -> void
LinqToDB.Linq.IExpressionInfo
LinqToDB.Linq.IExpressionInfo.GetExpression(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Linq.IMergeable<TTarget, TSource>
LinqToDB.Linq.IMergeableOn<TTarget, TSource>
LinqToDB.Linq.IMergeableSource<TTarget, TSource>
LinqToDB.Linq.IMergeableUsing<TTarget>
LinqToDB.Linq.ISelectInsertable<TSource, TTarget>
LinqToDB.Linq.IUpdatable<T>
LinqToDB.Linq.IValueInsertable<T>
LinqToDB.Linq.LinqException
LinqToDB.Linq.LinqException.LinqException() -> void
LinqToDB.Linq.LinqException.LinqException(string! message) -> void
LinqToDB.Linq.LinqException.LinqException(string! message, params object?[]! args) -> void
LinqToDB.Linq.LinqException.LinqException(string! message, System.Exception! innerException) -> void
LinqToDB.Linq.LinqException.LinqException(System.Exception! innerException) -> void
LinqToDB.Linq.NoLinqCache
LinqToDB.Linq.Tools
LinqToDB.Linq.Translation.IMemberTranslator
LinqToDB.Linq.Translation.IMemberTranslator.Translate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
LinqToDB.Linq.Translation.ISqlExpressionFactory
LinqToDB.Linq.Translation.ISqlExpressionFactory.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Linq.Translation.ISqlExpressionFactory.GetDbDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.DbDataType
LinqToDB.Linq.Translation.ISqlExpressionFactory.GetDbDataType(System.Type! type) -> LinqToDB.DbDataType
LinqToDB.Linq.Translation.ITranslationContext
LinqToDB.Linq.Translation.ITranslationContext.CanBeEvaluated(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Linq.Translation.ITranslationContext.CanBeEvaluatedOnClient(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.Linq.Translation.ITranslationContext.CreateErrorExpression(System.Linq.Expressions.Expression! basedOn, string? message = null, System.Type? type = null) -> LinqToDB.Internal.Expressions.SqlErrorExpression!
LinqToDB.Linq.Translation.ITranslationContext.CreatePlaceholder(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, System.Linq.Expressions.Expression! basedOn) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
LinqToDB.Linq.Translation.ITranslationContext.CurrentAlias.get -> string?
LinqToDB.Linq.Translation.ITranslationContext.CurrentColumnDescriptor.get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Linq.Translation.ITranslationContext.CurrentSelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Linq.Translation.ITranslationContext.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Linq.Translation.ITranslationContext.Evaluate(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Linq.Translation.ITranslationContext.ExpressionFactory.get -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
LinqToDB.Linq.Translation.ITranslationContext.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Linq.Translation.ITranslationContext.MarkAsNonParameter(System.Linq.Expressions.Expression! expression, object? currentValue) -> void
LinqToDB.Linq.Translation.ITranslationContext.Translate(System.Linq.Expressions.Expression! expression, LinqToDB.Linq.Translation.TranslationFlags translationFlags = LinqToDB.Linq.Translation.TranslationFlags.Sql) -> System.Linq.Expressions.Expression!
LinqToDB.Linq.Translation.ITranslationContext.TryEvaluate(LinqToDB.Internal.SqlQuery.ISqlExpression! expression, out object? result) -> bool
LinqToDB.Linq.Translation.ITranslationContext.UsingColumnDescriptor(LinqToDB.Mapping.ColumnDescriptor? columnDescriptor) -> System.IDisposable!
LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.Expression = 1 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.None = 0 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.Linq.Translation.TranslationFlags.Sql = 2 -> LinqToDB.Linq.Translation.TranslationFlags
LinqToDB.LinqExtensions
LinqToDB.LinqOptions
LinqToDB.LinqOptions.<Clone>$() -> LinqToDB.LinqOptions!
LinqToDB.LinqOptions.CacheSlidingExpiration.get -> System.TimeSpan?
LinqToDB.LinqOptions.CacheSlidingExpiration.init -> void
LinqToDB.LinqOptions.CacheSlidingExpirationOrDefault.get -> System.TimeSpan
LinqToDB.LinqOptions.CompareNulls.get -> LinqToDB.CompareNulls
LinqToDB.LinqOptions.CompareNulls.init -> void
LinqToDB.LinqOptions.Deconstruct(out bool PreloadGroups, out bool IgnoreEmptyUpdate, out bool GenerateExpressionTest, out bool TraceMapperExpression, out bool DoNotClearOrderBys, out bool OptimizeJoins, out LinqToDB.CompareNulls CompareNulls, out bool GuardGrouping, out bool DisableQueryCache, out System.TimeSpan? CacheSlidingExpiration, out bool PreferApply, out bool KeepDistinctOrdered, out bool ParameterizeTakeSkip, out bool EnableContextSchemaEdit, out bool PreferExistsForScalar) -> void
LinqToDB.LinqOptions.DisableQueryCache.get -> bool
LinqToDB.LinqOptions.DisableQueryCache.init -> void
LinqToDB.LinqOptions.DoNotClearOrderBys.get -> bool
LinqToDB.LinqOptions.DoNotClearOrderBys.init -> void
LinqToDB.LinqOptions.EnableContextSchemaEdit.get -> bool
LinqToDB.LinqOptions.EnableContextSchemaEdit.init -> void
LinqToDB.LinqOptions.Equals(LinqToDB.LinqOptions? other) -> bool
LinqToDB.LinqOptions.GenerateExpressionTest.get -> bool
LinqToDB.LinqOptions.GenerateExpressionTest.init -> void
LinqToDB.LinqOptions.GuardGrouping.get -> bool
LinqToDB.LinqOptions.GuardGrouping.init -> void
LinqToDB.LinqOptions.IgnoreEmptyUpdate.get -> bool
LinqToDB.LinqOptions.IgnoreEmptyUpdate.init -> void
LinqToDB.LinqOptions.KeepDistinctOrdered.get -> bool
LinqToDB.LinqOptions.KeepDistinctOrdered.init -> void
LinqToDB.LinqOptions.LinqOptions() -> void
LinqToDB.LinqOptions.LinqOptions(bool PreloadGroups = false, bool IgnoreEmptyUpdate = false, bool GenerateExpressionTest = false, bool TraceMapperExpression = false, bool DoNotClearOrderBys = false, bool OptimizeJoins = true, LinqToDB.CompareNulls CompareNulls = LinqToDB.CompareNulls.LikeClr, bool GuardGrouping = true, bool DisableQueryCache = false, System.TimeSpan? CacheSlidingExpiration = null, bool PreferApply = true, bool KeepDistinctOrdered = true, bool ParameterizeTakeSkip = true, bool EnableContextSchemaEdit = false, bool PreferExistsForScalar = false) -> void
LinqToDB.LinqOptions.OptimizeJoins.get -> bool
LinqToDB.LinqOptions.OptimizeJoins.init -> void
LinqToDB.LinqOptions.ParameterizeTakeSkip.get -> bool
LinqToDB.LinqOptions.ParameterizeTakeSkip.init -> void
LinqToDB.LinqOptions.PreferApply.get -> bool
LinqToDB.LinqOptions.PreferApply.init -> void
LinqToDB.LinqOptions.PreferExistsForScalar.get -> bool
LinqToDB.LinqOptions.PreferExistsForScalar.init -> void
LinqToDB.LinqOptions.PreloadGroups.get -> bool
LinqToDB.LinqOptions.PreloadGroups.init -> void
LinqToDB.LinqOptions.TraceMapperExpression.get -> bool
LinqToDB.LinqOptions.TraceMapperExpression.init -> void
LinqToDB.LinqToDBException
LinqToDB.LinqToDBException.LinqToDBException() -> void
LinqToDB.LinqToDBException.LinqToDBException(string! message) -> void
LinqToDB.LinqToDBException.LinqToDBException(string! message, System.Exception! innerException) -> void
LinqToDB.LinqToDBException.LinqToDBException(System.Exception! innerException) -> void
LinqToDB.Mapping.AssociationAttribute
LinqToDB.Mapping.AssociationAttribute.AliasName.get -> string?
LinqToDB.Mapping.AssociationAttribute.AliasName.set -> void
LinqToDB.Mapping.AssociationAttribute.AssociationAttribute() -> void
LinqToDB.Mapping.AssociationAttribute.AssociationSetterExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationAttribute.AssociationSetterExpression.set -> void
LinqToDB.Mapping.AssociationAttribute.AssociationSetterExpressionMethod.get -> string?
LinqToDB.Mapping.AssociationAttribute.AssociationSetterExpressionMethod.set -> void
LinqToDB.Mapping.AssociationAttribute.CanBeNull.get -> bool
LinqToDB.Mapping.AssociationAttribute.CanBeNull.set -> void
LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate.get -> string?
LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate.set -> void
LinqToDB.Mapping.AssociationAttribute.GetOtherKeys() -> string![]!
LinqToDB.Mapping.AssociationAttribute.GetThisKeys() -> string![]!
LinqToDB.Mapping.AssociationAttribute.OtherKey.get -> string?
LinqToDB.Mapping.AssociationAttribute.OtherKey.set -> void
LinqToDB.Mapping.AssociationAttribute.Predicate.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationAttribute.Predicate.set -> void
LinqToDB.Mapping.AssociationAttribute.QueryExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationAttribute.QueryExpression.set -> void
LinqToDB.Mapping.AssociationAttribute.QueryExpressionMethod.get -> string?
LinqToDB.Mapping.AssociationAttribute.QueryExpressionMethod.set -> void
LinqToDB.Mapping.AssociationAttribute.Storage.get -> string?
LinqToDB.Mapping.AssociationAttribute.Storage.set -> void
LinqToDB.Mapping.AssociationAttribute.ThisKey.get -> string?
LinqToDB.Mapping.AssociationAttribute.ThisKey.set -> void
LinqToDB.Mapping.AssociationDescriptor
LinqToDB.Mapping.AssociationDescriptor.AliasName.get -> string?
LinqToDB.Mapping.AssociationDescriptor.AssociationDescriptor(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! type, System.Reflection.MemberInfo! memberInfo, string![]! thisKey, string![]! otherKey, string? expressionPredicate, System.Linq.Expressions.Expression? predicate, string? expressionQueryMethod, System.Linq.Expressions.Expression? expressionQuery, string? storage, string? associationSetterExpressionMethod, System.Linq.Expressions.Expression? associationSetterExpression, bool? canBeNull, string? aliasName) -> void
LinqToDB.Mapping.AssociationDescriptor.AssociationSetterExpression.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationDescriptor.AssociationSetterExpressionMethod.get -> string?
LinqToDB.Mapping.AssociationDescriptor.CanBeNull.get -> bool
LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate.get -> string?
LinqToDB.Mapping.AssociationDescriptor.ExpressionQuery.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationDescriptor.ExpressionQueryMethod.get -> string?
LinqToDB.Mapping.AssociationDescriptor.GenerateAlias() -> string!
LinqToDB.Mapping.AssociationDescriptor.GetElementType() -> System.Type!
LinqToDB.Mapping.AssociationDescriptor.GetParentElementType() -> System.Type!
LinqToDB.Mapping.AssociationDescriptor.GetPredicate(System.Type! parentType, System.Type! objectType) -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.AssociationDescriptor.GetQueryMethod(System.Type! parentType, System.Type! objectType) -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.AssociationDescriptor.HasQueryMethod() -> bool
LinqToDB.Mapping.AssociationDescriptor.IsList.get -> bool
LinqToDB.Mapping.AssociationDescriptor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.AssociationDescriptor.MemberInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Mapping.AssociationDescriptor.OtherKey.get -> string![]!
LinqToDB.Mapping.AssociationDescriptor.Predicate.get -> System.Linq.Expressions.Expression?
LinqToDB.Mapping.AssociationDescriptor.Storage.get -> string?
LinqToDB.Mapping.AssociationDescriptor.ThisKey.get -> string![]!
LinqToDB.Mapping.ColumnAliasAttribute
LinqToDB.Mapping.ColumnAliasAttribute.ColumnAliasAttribute() -> void
LinqToDB.Mapping.ColumnAliasAttribute.ColumnAliasAttribute(string! memberName) -> void
LinqToDB.Mapping.ColumnAliasAttribute.MemberName.get -> string?
LinqToDB.Mapping.ColumnAliasAttribute.MemberName.set -> void
LinqToDB.Mapping.ColumnAttribute
LinqToDB.Mapping.ColumnAttribute.CanBeNull.get -> bool
LinqToDB.Mapping.ColumnAttribute.CanBeNull.set -> void
LinqToDB.Mapping.ColumnAttribute.ColumnAttribute() -> void
LinqToDB.Mapping.ColumnAttribute.ColumnAttribute(string! columnName) -> void
LinqToDB.Mapping.ColumnAttribute.ColumnAttribute(string! columnName, string! memberName) -> void
LinqToDB.Mapping.ColumnAttribute.CreateFormat.get -> string?
LinqToDB.Mapping.ColumnAttribute.CreateFormat.set -> void
LinqToDB.Mapping.ColumnAttribute.DataType.get -> LinqToDB.DataType
LinqToDB.Mapping.ColumnAttribute.DataType.set -> void
LinqToDB.Mapping.ColumnAttribute.DbType.get -> string?
LinqToDB.Mapping.ColumnAttribute.DbType.set -> void
LinqToDB.Mapping.ColumnAttribute.IsColumn.get -> bool
LinqToDB.Mapping.ColumnAttribute.IsColumn.set -> void
LinqToDB.Mapping.ColumnAttribute.IsDiscriminator.get -> bool
LinqToDB.Mapping.ColumnAttribute.IsDiscriminator.set -> void
LinqToDB.Mapping.ColumnAttribute.IsIdentity.get -> bool
LinqToDB.Mapping.ColumnAttribute.IsIdentity.set -> void
LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey.get -> bool
LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey.set -> void
LinqToDB.Mapping.ColumnAttribute.Length.get -> int
LinqToDB.Mapping.ColumnAttribute.Length.set -> void
LinqToDB.Mapping.ColumnAttribute.MemberName.get -> string?
LinqToDB.Mapping.ColumnAttribute.MemberName.set -> void
LinqToDB.Mapping.ColumnAttribute.Name.get -> string?
LinqToDB.Mapping.ColumnAttribute.Name.set -> void
LinqToDB.Mapping.ColumnAttribute.Order.get -> int
LinqToDB.Mapping.ColumnAttribute.Order.set -> void
LinqToDB.Mapping.ColumnAttribute.Precision.get -> int
LinqToDB.Mapping.ColumnAttribute.Precision.set -> void
LinqToDB.Mapping.ColumnAttribute.PrimaryKeyOrder.get -> int
LinqToDB.Mapping.ColumnAttribute.PrimaryKeyOrder.set -> void
LinqToDB.Mapping.ColumnAttribute.Scale.get -> int
LinqToDB.Mapping.ColumnAttribute.Scale.set -> void
LinqToDB.Mapping.ColumnAttribute.SkipOnEntityFetch.get -> bool
LinqToDB.Mapping.ColumnAttribute.SkipOnEntityFetch.set -> void
LinqToDB.Mapping.ColumnAttribute.SkipOnInsert.get -> bool
LinqToDB.Mapping.ColumnAttribute.SkipOnInsert.set -> void
LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate.get -> bool
LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate.set -> void
LinqToDB.Mapping.ColumnAttribute.Storage.get -> string?
LinqToDB.Mapping.ColumnAttribute.Storage.set -> void
LinqToDB.Mapping.ColumnDescriptor
LinqToDB.Mapping.ColumnDescriptor.ApplyConversions(System.Linq.Expressions.Expression! getterExpr, LinqToDB.DbDataType dbDataType, bool includingEnum) -> System.Linq.Expressions.Expression!
LinqToDB.Mapping.ColumnDescriptor.CanBeNull.get -> bool
LinqToDB.Mapping.ColumnDescriptor.ColumnDescriptor(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Mapping.EntityDescriptor! entityDescriptor, LinqToDB.Mapping.ColumnAttribute? columnAttribute, LinqToDB.Reflection.MemberAccessor! memberAccessor, bool hasInheritanceMapping) -> void
LinqToDB.Mapping.ColumnDescriptor.ColumnName.get -> string!
LinqToDB.Mapping.ColumnDescriptor.CreateFormat.get -> string?
LinqToDB.Mapping.ColumnDescriptor.DataType.get -> LinqToDB.DataType
LinqToDB.Mapping.ColumnDescriptor.DbType.get -> string?
LinqToDB.Mapping.ColumnDescriptor.EntityDescriptor.get -> LinqToDB.Mapping.EntityDescriptor!
LinqToDB.Mapping.ColumnDescriptor.GetConvertedDbDataType() -> LinqToDB.DbDataType
LinqToDB.Mapping.ColumnDescriptor.GetDbDataType(bool completeDataType) -> LinqToDB.DbDataType
LinqToDB.Mapping.ColumnDescriptor.GetDbParamLambda() -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ColumnDescriptor.GetDbValueLambda() -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ColumnDescriptor.GetDefaultDbParamExpression() -> System.Linq.Expressions.Expression!
LinqToDB.Mapping.ColumnDescriptor.GetDefaultDbValueExpression() -> System.Linq.Expressions.Expression!
LinqToDB.Mapping.ColumnDescriptor.GetOriginalValueLambda() -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ColumnDescriptor.HasInheritanceMapping.get -> bool
LinqToDB.Mapping.ColumnDescriptor.HasValuesToSkipOnInsert.get -> bool
LinqToDB.Mapping.ColumnDescriptor.HasValuesToSkipOnUpdate.get -> bool
LinqToDB.Mapping.ColumnDescriptor.IsDiscriminator.get -> bool
LinqToDB.Mapping.ColumnDescriptor.IsIdentity.get -> bool
LinqToDB.Mapping.ColumnDescriptor.IsPrimaryKey.get -> bool
LinqToDB.Mapping.ColumnDescriptor.Length.get -> int?
LinqToDB.Mapping.ColumnDescriptor.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.ColumnDescriptor.MemberAccessor.get -> LinqToDB.Reflection.MemberAccessor!
LinqToDB.Mapping.ColumnDescriptor.MemberInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Mapping.ColumnDescriptor.MemberName.get -> string!
LinqToDB.Mapping.ColumnDescriptor.MemberType.get -> System.Type!
LinqToDB.Mapping.ColumnDescriptor.Order.get -> int?
LinqToDB.Mapping.ColumnDescriptor.Precision.get -> int?
LinqToDB.Mapping.ColumnDescriptor.PrimaryKeyOrder.get -> int
LinqToDB.Mapping.ColumnDescriptor.Scale.get -> int?
LinqToDB.Mapping.ColumnDescriptor.SequenceName.get -> LinqToDB.Mapping.SequenceNameAttribute?
LinqToDB.Mapping.ColumnDescriptor.SkipModificationFlags.get -> LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.ColumnDescriptor.SkipOnEntityFetch.get -> bool
LinqToDB.Mapping.ColumnDescriptor.SkipOnInsert.get -> bool
LinqToDB.Mapping.ColumnDescriptor.SkipOnUpdate.get -> bool
LinqToDB.Mapping.ColumnDescriptor.Storage.get -> string?
LinqToDB.Mapping.ColumnDescriptor.StorageInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Mapping.ColumnDescriptor.StorageType.get -> System.Type!
LinqToDB.Mapping.ColumnDescriptor.ValueConverter.get -> LinqToDB.Mapping.IValueConverter?
LinqToDB.Mapping.ConversionType
LinqToDB.Mapping.ConversionType.Common = 0 -> LinqToDB.Mapping.ConversionType
LinqToDB.Mapping.ConversionType.FromDatabase = 2 -> LinqToDB.Mapping.ConversionType
LinqToDB.Mapping.ConversionType.ToDatabase = 1 -> LinqToDB.Mapping.ConversionType
LinqToDB.Mapping.DataTypeAttribute
LinqToDB.Mapping.DataTypeAttribute.DataType.get -> LinqToDB.DataType?
LinqToDB.Mapping.DataTypeAttribute.DataType.set -> void
LinqToDB.Mapping.DataTypeAttribute.DataTypeAttribute(LinqToDB.DataType dataType) -> void
LinqToDB.Mapping.DataTypeAttribute.DataTypeAttribute(LinqToDB.DataType dataType, string! dbType) -> void
LinqToDB.Mapping.DataTypeAttribute.DataTypeAttribute(string! dbType) -> void
LinqToDB.Mapping.DataTypeAttribute.DbType.get -> string?
LinqToDB.Mapping.DataTypeAttribute.DbType.set -> void
LinqToDB.Mapping.DefaultValue
LinqToDB.Mapping.DefaultValue<T>
LinqToDB.Mapping.DynamicColumnAccessorAttribute
LinqToDB.Mapping.DynamicColumnAccessorAttribute.DynamicColumnAccessorAttribute() -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpression.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpression.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpressionMethod.get -> string?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterExpressionMethod.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterMethod.get -> string?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetterMethod.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpression.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpression.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpressionMethod.get -> string?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterExpressionMethod.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterMethod.get -> string?
LinqToDB.Mapping.DynamicColumnAccessorAttribute.SetterMethod.set -> void
LinqToDB.Mapping.DynamicColumnAccessorAttribute.Validate() -> void
LinqToDB.Mapping.DynamicColumnsStoreAttribute
LinqToDB.Mapping.DynamicColumnsStoreAttribute.DynamicColumnsStoreAttribute() -> void
LinqToDB.Mapping.EntityDescriptor
LinqToDB.Mapping.EntityDescriptor.Aliases.get -> System.Collections.Generic.IReadOnlyDictionary<string!, string!>?
LinqToDB.Mapping.EntityDescriptor.Associations.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Mapping.AssociationDescriptor!>!
LinqToDB.Mapping.EntityDescriptor.CalculatedMembers.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Reflection.MemberAccessor!>?
LinqToDB.Mapping.EntityDescriptor.Columns.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Mapping.ColumnDescriptor!>!
LinqToDB.Mapping.EntityDescriptor.DatabaseName.get -> string?
LinqToDB.Mapping.EntityDescriptor.DatabaseName.set -> void
LinqToDB.Mapping.EntityDescriptor.DynamicColumnsStore.get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Mapping.EntityDescriptor.EntityDescriptor(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! type, System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>? onEntityDescriptorCreated) -> void
LinqToDB.Mapping.EntityDescriptor.FindAssociationDescriptor(System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.AssociationDescriptor?
LinqToDB.Mapping.EntityDescriptor.FindColumnDescriptor(System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Mapping.EntityDescriptor.HasCalculatedMembers.get -> bool
LinqToDB.Mapping.EntityDescriptor.InheritanceMapping.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Mapping.InheritanceMapping!>!
LinqToDB.Mapping.EntityDescriptor.InheritanceRoot.get -> LinqToDB.Mapping.EntityDescriptor?
LinqToDB.Mapping.EntityDescriptor.IsColumnAttributeRequired.get -> bool
LinqToDB.Mapping.EntityDescriptor.Name.get -> LinqToDB.SqlQuery.SqlObjectName
LinqToDB.Mapping.EntityDescriptor.ObjectType.get -> System.Type!
LinqToDB.Mapping.EntityDescriptor.QueryFilterFunc.get -> System.Delegate?
LinqToDB.Mapping.EntityDescriptor.QueryFilterLambda.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.EntityDescriptor.SchemaName.get -> string?
LinqToDB.Mapping.EntityDescriptor.SchemaName.set -> void
LinqToDB.Mapping.EntityDescriptor.ServerName.get -> string?
LinqToDB.Mapping.EntityDescriptor.ServerName.set -> void
LinqToDB.Mapping.EntityDescriptor.SkipModificationFlags.get -> LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.EntityDescriptor.TableName.get -> string!
LinqToDB.Mapping.EntityDescriptor.TableName.set -> void
LinqToDB.Mapping.EntityDescriptor.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Mapping.EntityDescriptor.this[string! memberName].get -> LinqToDB.Mapping.ColumnDescriptor?
LinqToDB.Mapping.EntityDescriptor.TypeAccessor.get -> LinqToDB.Reflection.TypeAccessor!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, LinqToDB.IDataContext!, System.Linq.IQueryable<TOther>!>!>! queryExpression, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TOther, bool>!>! predicate, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, TOther>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, LinqToDB.IDataContext!, System.Linq.IQueryable<TOther>!>!>! queryExpression, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TOther>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, TOther>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TOther, bool>!>! predicate, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TOther>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TPropElement, TThisKey, TOtherKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TPropElement>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TThisKey>!>! thisKey, System.Linq.Expressions.Expression<System.Func<TPropElement, TOtherKey>!>! otherKey, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TPropElement>!>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Association<TProperty, TThisKey, TOtherKey>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TThisKey>!>! thisKey, System.Linq.Expressions.Expression<System.Func<TProperty, TOtherKey>!>! otherKey, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Build() -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Configuration.get -> string?
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.DynamicColumnsStore(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.DynamicPropertyAccessors(System.Linq.Expressions.Expression<System.Func<TEntity, string!, object?, object?>!>! getter, System.Linq.Expressions.Expression<System.Action<TEntity, string!, object?>!>! setter) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Entity<TE>(string? configuration = null) -> LinqToDB.Mapping.EntityMappingBuilder<TE>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.EntityMappingBuilder(LinqToDB.Mapping.FluentMappingBuilder! builder, string? configuration) -> void
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasAttribute(LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasAttribute(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasAttribute(System.Linq.Expressions.LambdaExpression! func, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasAttribute(System.Reflection.MemberInfo! memberInfo, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasColumn(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func, int order = -1) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasDatabaseName(string! databaseName) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasIdentity<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! func) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasIsTemporary(bool isTemporary = true) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasPrimaryKey<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! func, int order = -1) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasQueryFilter(System.Func<System.Linq.IQueryable<TEntity>!, LinqToDB.IDataContext!, System.Linq.IQueryable<TEntity>!>! filterFunc) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasQueryFilter(System.Linq.Expressions.Expression<System.Func<TEntity, bool>!>! filter) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasQueryFilter(System.Linq.Expressions.Expression<System.Func<TEntity, LinqToDB.IDataContext!, bool>!>! filter) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasQueryFilter<TDataContext>(System.Func<System.Linq.IQueryable<TEntity>!, TDataContext, System.Linq.IQueryable<TEntity>!>! filterFunc) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasQueryFilter<TDataContext>(System.Linq.Expressions.Expression<System.Func<TEntity, TDataContext, bool>!>! filter) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasSchemaName(string! schemaName) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasServerName(string! serverName) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasSkipValuesOnInsert(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func, params object?[]! values) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasSkipValuesOnUpdate(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func, params object?[]! values) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasTableName(string! tableName) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.HasTableOptions(LinqToDB.TableOptions tableOptions) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Ignore(System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! func, int order = -1) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Inheritance<TS>(System.Linq.Expressions.Expression<System.Func<TEntity, TS>!>! key, TS value, System.Type! type, bool isDefault = false) -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.IsColumnNotRequired() -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.IsColumnRequired() -> LinqToDB.Mapping.EntityMappingBuilder<TEntity>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Member<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! func) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.EntityMappingBuilder<TEntity>.Property<TProperty>(System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! func) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.FluentMappingBuilder
LinqToDB.Mapping.FluentMappingBuilder.Build() -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.Entity<T>(string? configuration = null) -> LinqToDB.Mapping.EntityMappingBuilder<T>!
LinqToDB.Mapping.FluentMappingBuilder.FluentMappingBuilder() -> void
LinqToDB.Mapping.FluentMappingBuilder.FluentMappingBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Linq.Expressions.LambdaExpression! func, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Reflection.MemberInfo! memberInfo, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Type! type, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.HasAttribute<T>(LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.HasAttribute<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func, LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.FluentMappingBuilder.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.IColumnChangeDescriptor
LinqToDB.Mapping.IColumnChangeDescriptor.ColumnName.get -> string!
LinqToDB.Mapping.IColumnChangeDescriptor.ColumnName.set -> void
LinqToDB.Mapping.IColumnChangeDescriptor.MemberName.get -> string!
LinqToDB.Mapping.IdentityAttribute
LinqToDB.Mapping.IdentityAttribute.IdentityAttribute() -> void
LinqToDB.Mapping.IdentityAttribute.IdentityAttribute(string? configuration) -> void
LinqToDB.Mapping.IEntityChangeDescriptor
LinqToDB.Mapping.IEntityChangeDescriptor.Columns.get -> System.Collections.Generic.IEnumerable<LinqToDB.Mapping.IColumnChangeDescriptor!>!
LinqToDB.Mapping.IEntityChangeDescriptor.DatabaseName.get -> string?
LinqToDB.Mapping.IEntityChangeDescriptor.DatabaseName.set -> void
LinqToDB.Mapping.IEntityChangeDescriptor.SchemaName.get -> string?
LinqToDB.Mapping.IEntityChangeDescriptor.SchemaName.set -> void
LinqToDB.Mapping.IEntityChangeDescriptor.ServerName.get -> string?
LinqToDB.Mapping.IEntityChangeDescriptor.ServerName.set -> void
LinqToDB.Mapping.IEntityChangeDescriptor.TableName.get -> string!
LinqToDB.Mapping.IEntityChangeDescriptor.TableName.set -> void
LinqToDB.Mapping.IEntityChangeDescriptor.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Mapping.IEntityChangeDescriptor.TableOptions.set -> void
LinqToDB.Mapping.IEntityChangeDescriptor.TypeAccessor.get -> LinqToDB.Reflection.TypeAccessor!
LinqToDB.Mapping.IGenericInfoProvider
LinqToDB.Mapping.IGenericInfoProvider.SetInfo(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Mapping.InheritanceMapping
LinqToDB.Mapping.InheritanceMapping.Code -> object?
LinqToDB.Mapping.InheritanceMapping.Discriminator -> LinqToDB.Mapping.ColumnDescriptor!
LinqToDB.Mapping.InheritanceMapping.DiscriminatorName.get -> string!
LinqToDB.Mapping.InheritanceMapping.InheritanceMapping() -> void
LinqToDB.Mapping.InheritanceMapping.IsDefault -> bool
LinqToDB.Mapping.InheritanceMapping.Type -> System.Type!
LinqToDB.Mapping.InheritanceMappingAttribute
LinqToDB.Mapping.InheritanceMappingAttribute.Code.get -> object?
LinqToDB.Mapping.InheritanceMappingAttribute.Code.set -> void
LinqToDB.Mapping.InheritanceMappingAttribute.InheritanceMappingAttribute() -> void
LinqToDB.Mapping.InheritanceMappingAttribute.IsDefault.get -> bool
LinqToDB.Mapping.InheritanceMappingAttribute.IsDefault.set -> void
LinqToDB.Mapping.InheritanceMappingAttribute.Type.get -> System.Type!
LinqToDB.Mapping.InheritanceMappingAttribute.Type.set -> void
LinqToDB.Mapping.IsQueryableAttribute
LinqToDB.Mapping.IsQueryableAttribute.IsQueryableAttribute() -> void
LinqToDB.Mapping.IToSqlConverter
LinqToDB.Mapping.IToSqlConverter.ToSql(object! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Mapping.IValueConverter
LinqToDB.Mapping.IValueConverter.FromProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.IValueConverter.HandlesNulls.get -> bool
LinqToDB.Mapping.IValueConverter.ToProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.MappingAttribute
LinqToDB.Mapping.MappingAttribute.Configuration.get -> string?
LinqToDB.Mapping.MappingAttribute.Configuration.set -> void
LinqToDB.Mapping.MappingAttribute.MappingAttribute() -> void
LinqToDB.Mapping.MappingSchema
LinqToDB.Mapping.MappingSchema.AddMetadataReader(LinqToDB.Metadata.IMetadataReader! reader) -> void
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, LinqToDB.SqlQuery.SqlDataType! dataType) -> void
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, object? defaultValue, bool canBeNull, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type! type, object? defaultValue, LinqToDB.DataType dataType = LinqToDB.DataType.Undefined) -> void
LinqToDB.Mapping.MappingSchema.ChangeType(object? value, System.Type! conversionType) -> object?
LinqToDB.Mapping.MappingSchema.ChangeTypeTo<T>(object? value) -> T
LinqToDB.Mapping.MappingSchema.ColumnNameComparer.get -> System.StringComparer!
LinqToDB.Mapping.MappingSchema.ColumnNameComparer.set -> void
LinqToDB.Mapping.MappingSchema.ConfigurationList.get -> string![]!
LinqToDB.Mapping.MappingSchema.DisplayID.get -> string!
LinqToDB.Mapping.MappingSchema.EnumToValue(System.Enum! value) -> object?
LinqToDB.Mapping.MappingSchema.Equals(LinqToDB.Mapping.MappingSchema? other) -> bool
LinqToDB.Mapping.MappingSchema.GenerateConvertedValueExpression(object? value, System.Type! type) -> System.Linq.Expressions.Expression!
LinqToDB.Mapping.MappingSchema.GenerateSafeConvert(System.Type! fromType, System.Type! type) -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.MappingSchema.GetAttribute<T>(System.Type! type) -> T?
LinqToDB.Mapping.MappingSchema.GetAttribute<T>(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> T?
LinqToDB.Mapping.MappingSchema.GetAttributes<T>(System.Type! type) -> T![]!
LinqToDB.Mapping.MappingSchema.GetAttributes<T>(System.Type! type, System.Reflection.MemberInfo! memberInfo, bool forFirstConfiguration = false) -> T![]!
LinqToDB.Mapping.MappingSchema.GetCanBeNull(System.Type! type) -> bool
LinqToDB.Mapping.MappingSchema.GetConverter<TFrom, TTo>(LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> System.Func<TFrom, TTo>?
LinqToDB.Mapping.MappingSchema.GetConvertExpression(LinqToDB.DbDataType from, LinqToDB.DbDataType to, bool checkNull = true, bool createDefault = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.MappingSchema.GetConvertExpression(System.Type! from, System.Type! to, bool checkNull = true, bool createDefault = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.MappingSchema.GetConvertExpression<TFrom, TTo>(bool checkNull = true, bool createDefault = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>?
LinqToDB.Mapping.MappingSchema.GetDataType(System.Type! type) -> LinqToDB.SqlQuery.SqlDataType!
LinqToDB.Mapping.MappingSchema.GetDbDataType(System.Type! type) -> LinqToDB.DbDataType
LinqToDB.Mapping.MappingSchema.GetDefaultFromEnumType(System.Type! enumType) -> System.Type?
LinqToDB.Mapping.MappingSchema.GetDefaultValue(System.Type! type) -> object?
LinqToDB.Mapping.MappingSchema.GetDefinedTypes() -> System.Collections.Generic.IEnumerable<System.Type!>!
LinqToDB.Mapping.MappingSchema.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Mapping.MappingSchema.GetEntityDescriptor(System.Type! type, System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>? onEntityDescriptorCreated = null) -> LinqToDB.Mapping.EntityDescriptor!
LinqToDB.Mapping.MappingSchema.GetUnderlyingDataType(System.Type! type, out bool canBeNull) -> LinqToDB.SqlQuery.SqlDataType!
LinqToDB.Mapping.MappingSchema.HasAttribute<T>(System.Type! type) -> bool
LinqToDB.Mapping.MappingSchema.HasAttribute<T>(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> bool
LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider(params System.Type![]! types) -> bool
LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider<T>() -> void
LinqToDB.Mapping.MappingSchema.IsScalarType(System.Type! type) -> bool
LinqToDB.Mapping.MappingSchema.MappingSchema() -> void
LinqToDB.Mapping.MappingSchema.MappingSchema(params LinqToDB.Mapping.MappingSchema![]! schemas) -> void
LinqToDB.Mapping.MappingSchema.MappingSchema(string? configuration) -> void
LinqToDB.Mapping.MappingSchema.MappingSchema(string? configuration, params LinqToDB.Mapping.MappingSchema![]? schemas) -> void
LinqToDB.Mapping.MappingSchema.SetCanBeNull(System.Type! type, bool value) -> void
LinqToDB.Mapping.MappingSchema.SetConverter<TFrom, TTo>(System.Func<TFrom, TTo>! func, LinqToDB.DbDataType from, LinqToDB.DbDataType to, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetConverter<TFrom, TTo>(System.Func<TFrom, TTo>! func, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetConvertExpression(LinqToDB.DbDataType fromType, LinqToDB.DbDataType toType, System.Linq.Expressions.LambdaExpression! expr, bool addNullCheck = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetConvertExpression(System.Type! fromType, System.Type! toType, System.Linq.Expressions.LambdaExpression! expr, bool addNullCheck = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetConvertExpression<TFrom, TTo>(System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>! checkNullExpr, System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>! expr, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetConvertExpression<TFrom, TTo>(System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>! expr, bool addNullCheck = true, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetCultureInfo(System.Globalization.CultureInfo! info) -> void
LinqToDB.Mapping.MappingSchema.SetDataType(System.Type! type, LinqToDB.DataType dataType) -> void
LinqToDB.Mapping.MappingSchema.SetDataType(System.Type! type, LinqToDB.SqlQuery.SqlDataType! dataType) -> void
LinqToDB.Mapping.MappingSchema.SetDefaultFromEnumType(System.Type! enumType, System.Type! defaultFromType) -> void
LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type! type, object? value) -> void
LinqToDB.Mapping.MappingSchema.SetGenericConvertProvider(System.Type! type) -> void
LinqToDB.Mapping.MappingSchema.SetScalarType(System.Type! type, bool isScalarType = true) -> void
LinqToDB.Mapping.MappingSchema.SetValueToSqlConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.SqlQuery.SqlDataType!, LinqToDB.DataOptions!, object!>! converter) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.SetValueToSqlConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.SqlQuery.SqlDataType!, object!>! converter) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Mapping.MappingSchema.ValueToSqlConverter.get -> LinqToDB.Mapping.ValueToSqlConverter!
LinqToDB.Mapping.MapValue
LinqToDB.Mapping.MapValue.MapValue(object! origValue, params LinqToDB.Mapping.MapValueAttribute![]! mapValues) -> void
LinqToDB.Mapping.MapValue.MapValues.get -> LinqToDB.Mapping.MapValueAttribute![]!
LinqToDB.Mapping.MapValue.OrigValue.get -> object!
LinqToDB.Mapping.MapValueAttribute
LinqToDB.Mapping.MapValueAttribute.IsDefault.get -> bool
LinqToDB.Mapping.MapValueAttribute.IsDefault.set -> void
LinqToDB.Mapping.MapValueAttribute.MapValueAttribute() -> void
LinqToDB.Mapping.MapValueAttribute.MapValueAttribute(object! value, bool isDefault) -> void
LinqToDB.Mapping.MapValueAttribute.MapValueAttribute(object? value) -> void
LinqToDB.Mapping.MapValueAttribute.MapValueAttribute(string! configuration, object! value) -> void
LinqToDB.Mapping.MapValueAttribute.MapValueAttribute(string! configuration, object? value, bool isDefault) -> void
LinqToDB.Mapping.MapValueAttribute.Value.get -> object?
LinqToDB.Mapping.MapValueAttribute.Value.set -> void
LinqToDB.Mapping.NotColumnAttribute
LinqToDB.Mapping.NotColumnAttribute.NotColumnAttribute() -> void
LinqToDB.Mapping.NotNullAttribute
LinqToDB.Mapping.NotNullAttribute.NotNullAttribute() -> void
LinqToDB.Mapping.NotNullAttribute.NotNullAttribute(string! configuration) -> void
LinqToDB.Mapping.NullableAttribute
LinqToDB.Mapping.NullableAttribute.CanBeNull.get -> bool
LinqToDB.Mapping.NullableAttribute.CanBeNull.set -> void
LinqToDB.Mapping.NullableAttribute.NullableAttribute() -> void
LinqToDB.Mapping.NullableAttribute.NullableAttribute(bool isNullable) -> void
LinqToDB.Mapping.NullableAttribute.NullableAttribute(string! configuration, bool isNullable) -> void
LinqToDB.Mapping.OptimisticLockPropertyAttribute
LinqToDB.Mapping.OptimisticLockPropertyAttribute.Behavior.get -> LinqToDB.Mapping.VersionBehavior
LinqToDB.Mapping.OptimisticLockPropertyAttribute.OptimisticLockPropertyAttribute(LinqToDB.Mapping.VersionBehavior behavior) -> void
LinqToDB.Mapping.OptimisticLockPropertyBaseAttribute
LinqToDB.Mapping.OptimisticLockPropertyBaseAttribute.OptimisticLockPropertyBaseAttribute() -> void
LinqToDB.Mapping.PrimaryKeyAttribute
LinqToDB.Mapping.PrimaryKeyAttribute.Order.get -> int
LinqToDB.Mapping.PrimaryKeyAttribute.Order.set -> void
LinqToDB.Mapping.PrimaryKeyAttribute.PrimaryKeyAttribute() -> void
LinqToDB.Mapping.PrimaryKeyAttribute.PrimaryKeyAttribute(int order) -> void
LinqToDB.Mapping.PrimaryKeyAttribute.PrimaryKeyAttribute(string? configuration, int order) -> void
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TOther, TThisKey, TOtherKey>(System.Linq.Expressions.Expression<System.Func<TEntity, TOther>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TThisKey>!>! thisKey, System.Linq.Expressions.Expression<System.Func<TOther, TOtherKey>!>! otherKey, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TOther>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, LinqToDB.IDataContext!, System.Linq.IQueryable<TOther>!>!>! queryExpression, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TOther, bool>!>! predicate, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TOther>!>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, TOther>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, LinqToDB.IDataContext!, System.Linq.IQueryable<TOther>!>!>! queryExpression, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TOther>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TOther>(System.Linq.Expressions.Expression<System.Func<TEntity, TOther>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TOther, bool>!>! predicate, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TOther>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Association<TPropElement, TThisKey, TOtherKey>(System.Linq.Expressions.Expression<System.Func<TEntity, System.Collections.Generic.IEnumerable<TPropElement>!>!>! prop, System.Linq.Expressions.Expression<System.Func<TEntity, TThisKey>!>! thisKey, System.Linq.Expressions.Expression<System.Func<TPropElement, TOtherKey>!>! otherKey, bool? canBeNull = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, System.Collections.Generic.IEnumerable<TPropElement>!>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Build() -> LinqToDB.Mapping.FluentMappingBuilder!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Entity<TE>(string? configuration = null) -> LinqToDB.Mapping.EntityMappingBuilder<TE>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasAttribute(LinqToDB.Mapping.MappingAttribute! attribute) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasColumnName(string! columnName) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasConversion<TProvider>(System.Linq.Expressions.Expression<System.Func<TProperty, TProvider>!>! toProvider, System.Linq.Expressions.Expression<System.Func<TProvider, TProperty>!>! toModel, bool handlesNulls = false) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasConversionFunc<TProvider>(System.Func<TProperty, TProvider>! toProvider, System.Func<TProvider, TProperty>! toModel, bool handlesNulls = false) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasCreateFormat(string! format) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasDataType(LinqToDB.DataType dataType) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasDbType(string! dbType) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasLength(int length) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasOrder(int order) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasPrecision(int precision) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasScale(int scale) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasSkipOnInsert(bool skipOnInsert = true) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasSkipOnUpdate(bool skipOnUpdate = true) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.HasStorage(string! storage) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsAlias(string! aliasMember) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsAlias(System.Linq.Expressions.Expression<System.Func<TEntity, object!>!>! aliasMember) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsColumn() -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsDiscriminator(bool isDiscriminator = true) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsExpression<TR>(System.Linq.Expressions.Expression<System.Func<TEntity, TR>!>! expression, bool isColumn = false, string? alias = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsIdentity() -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsNotColumn() -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsNotNull() -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsNullable(bool isNullable = true) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.IsPrimaryKey(int order = -1) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Member<TMember>(System.Linq.Expressions.Expression<System.Func<TEntity, TMember>!>! func) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TMember>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.Property<TMember>(System.Linq.Expressions.Expression<System.Func<TEntity, TMember>!>! func) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TMember>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.PropertyMappingBuilder(LinqToDB.Mapping.EntityMappingBuilder<TEntity>! entity, System.Linq.Expressions.Expression<System.Func<TEntity, TProperty>!>! memberGetter) -> void
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.SkipOnEntityFetch(bool skipOnEntityFetch = true) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>.UseSequence(string! sequenceName, string? schema = null, string? configuration = null) -> LinqToDB.Mapping.PropertyMappingBuilder<TEntity, TProperty>!
LinqToDB.Mapping.QueryFilterAttribute
LinqToDB.Mapping.QueryFilterAttribute.FilterFunc.get -> System.Delegate?
LinqToDB.Mapping.QueryFilterAttribute.FilterFunc.set -> void
LinqToDB.Mapping.QueryFilterAttribute.FilterLambda.get -> System.Linq.Expressions.LambdaExpression?
LinqToDB.Mapping.QueryFilterAttribute.FilterLambda.set -> void
LinqToDB.Mapping.QueryFilterAttribute.QueryFilterAttribute() -> void
LinqToDB.Mapping.ResultSetIndexAttribute
LinqToDB.Mapping.ResultSetIndexAttribute.Index.get -> int
LinqToDB.Mapping.ResultSetIndexAttribute.ResultSetIndexAttribute(int index) -> void
LinqToDB.Mapping.ScalarTypeAttribute
LinqToDB.Mapping.ScalarTypeAttribute.IsScalar.get -> bool
LinqToDB.Mapping.ScalarTypeAttribute.IsScalar.set -> void
LinqToDB.Mapping.ScalarTypeAttribute.ScalarTypeAttribute() -> void
LinqToDB.Mapping.ScalarTypeAttribute.ScalarTypeAttribute(bool isScalar) -> void
LinqToDB.Mapping.ScalarTypeAttribute.ScalarTypeAttribute(string! configuration) -> void
LinqToDB.Mapping.ScalarTypeAttribute.ScalarTypeAttribute(string! configuration, bool isScalar) -> void
LinqToDB.Mapping.SequenceNameAttribute
LinqToDB.Mapping.SequenceNameAttribute.Schema.get -> string?
LinqToDB.Mapping.SequenceNameAttribute.Schema.set -> void
LinqToDB.Mapping.SequenceNameAttribute.SequenceName.get -> string!
LinqToDB.Mapping.SequenceNameAttribute.SequenceName.set -> void
LinqToDB.Mapping.SequenceNameAttribute.SequenceNameAttribute(string! sequenceName) -> void
LinqToDB.Mapping.SequenceNameAttribute.SequenceNameAttribute(string? configuration, string! sequenceName) -> void
LinqToDB.Mapping.SkipBaseAttribute
LinqToDB.Mapping.SkipBaseAttribute.SkipBaseAttribute() -> void
LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.SkipModification.Insert = 1 -> LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.SkipModification.None = 0 -> LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.SkipModification.Update = 2 -> LinqToDB.Mapping.SkipModification
LinqToDB.Mapping.SkipValuesByListAttribute
LinqToDB.Mapping.SkipValuesByListAttribute.SkipValuesByListAttribute(System.Collections.Generic.IEnumerable<object?>! values) -> void
LinqToDB.Mapping.SkipValuesByListAttribute.Values.get -> System.Collections.Generic.HashSet<object?>!
LinqToDB.Mapping.SkipValuesByListAttribute.Values.set -> void
LinqToDB.Mapping.SkipValuesOnInsertAttribute
LinqToDB.Mapping.SkipValuesOnInsertAttribute.SkipValuesOnInsertAttribute(params object?[]? values) -> void
LinqToDB.Mapping.SkipValuesOnUpdateAttribute
LinqToDB.Mapping.SkipValuesOnUpdateAttribute.SkipValuesOnUpdateAttribute(params object?[]? values) -> void
LinqToDB.Mapping.SqlQueryDependentAttribute
LinqToDB.Mapping.SqlQueryDependentAttribute.SqlQueryDependentAttribute() -> void
LinqToDB.Mapping.SqlQueryDependentParamsAttribute
LinqToDB.Mapping.SqlQueryDependentParamsAttribute.SqlQueryDependentParamsAttribute() -> void
LinqToDB.Mapping.TableAttribute
LinqToDB.Mapping.TableAttribute.Database.get -> string?
LinqToDB.Mapping.TableAttribute.Database.set -> void
LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired.get -> bool
LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired.set -> void
LinqToDB.Mapping.TableAttribute.IsTemporary.get -> bool
LinqToDB.Mapping.TableAttribute.IsTemporary.set -> void
LinqToDB.Mapping.TableAttribute.IsView.get -> bool
LinqToDB.Mapping.TableAttribute.IsView.set -> void
LinqToDB.Mapping.TableAttribute.Name.get -> string?
LinqToDB.Mapping.TableAttribute.Name.set -> void
LinqToDB.Mapping.TableAttribute.Schema.get -> string?
LinqToDB.Mapping.TableAttribute.Schema.set -> void
LinqToDB.Mapping.TableAttribute.Server.get -> string?
LinqToDB.Mapping.TableAttribute.Server.set -> void
LinqToDB.Mapping.TableAttribute.TableAttribute() -> void
LinqToDB.Mapping.TableAttribute.TableAttribute(string! tableName) -> void
LinqToDB.Mapping.TableAttribute.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.Mapping.TableAttribute.TableOptions.set -> void
LinqToDB.Mapping.ValueConverter<TModel, TProvider>
LinqToDB.Mapping.ValueConverter<TModel, TProvider>.FromProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ValueConverter<TModel, TProvider>.HandlesNulls.get -> bool
LinqToDB.Mapping.ValueConverter<TModel, TProvider>.ToProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ValueConverter<TModel, TProvider>.ValueConverter(System.Linq.Expressions.Expression<System.Func<TModel, TProvider>!>! convertToProviderExpression, System.Linq.Expressions.Expression<System.Func<TProvider, TModel>!>! convertFromProviderExpression, bool handlesNulls) -> void
LinqToDB.Mapping.ValueConverterAttribute
LinqToDB.Mapping.ValueConverterAttribute.ConverterType.get -> System.Type?
LinqToDB.Mapping.ValueConverterAttribute.ConverterType.set -> void
LinqToDB.Mapping.ValueConverterAttribute.ValueConverter.get -> LinqToDB.Mapping.IValueConverter?
LinqToDB.Mapping.ValueConverterAttribute.ValueConverter.set -> void
LinqToDB.Mapping.ValueConverterAttribute.ValueConverterAttribute() -> void
LinqToDB.Mapping.ValueConverterFunc<TModel, TProvider>
LinqToDB.Mapping.ValueConverterFunc<TModel, TProvider>.FromProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ValueConverterFunc<TModel, TProvider>.HandlesNulls.get -> bool
LinqToDB.Mapping.ValueConverterFunc<TModel, TProvider>.ToProviderExpression.get -> System.Linq.Expressions.LambdaExpression!
LinqToDB.Mapping.ValueConverterFunc<TModel, TProvider>.ValueConverterFunc(System.Func<TModel, TProvider>! convertToProviderFunc, System.Func<TProvider, TModel>! convertFromProviderFunc, bool handlesNulls) -> void
LinqToDB.Mapping.ValueToSqlConverter
LinqToDB.Mapping.ValueToSqlConverter.CanConvert(LinqToDB.DbDataType dataType, LinqToDB.DataOptions! options, object? value) -> bool
LinqToDB.Mapping.ValueToSqlConverter.CanConvert(System.Type! type) -> bool
LinqToDB.Mapping.ValueToSqlConverter.Convert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! options, object? value) -> System.Text.StringBuilder!
LinqToDB.Mapping.ValueToSqlConverter.Convert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DbDataType? dataType, LinqToDB.DataOptions! options, object? value) -> System.Text.StringBuilder!
LinqToDB.Mapping.ValueToSqlConverter.Equals(LinqToDB.Mapping.ValueToSqlConverter? other) -> bool
LinqToDB.Mapping.ValueToSqlConverter.SetConverter(System.Type! type, System.Action<System.Text.StringBuilder!, LinqToDB.DbDataType, LinqToDB.DataOptions!, object!>? converter) -> void
LinqToDB.Mapping.ValueToSqlConverter.TryConvert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! options, object? value) -> bool
LinqToDB.Mapping.ValueToSqlConverter.TryConvert(System.Text.StringBuilder! stringBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DbDataType? dataType, LinqToDB.DataOptions! options, object? value) -> bool
LinqToDB.Mapping.ValueToSqlConverter.ValueToSqlConverter() -> void
LinqToDB.Mapping.ValueToSqlConverter.ValueToSqlConverter(params LinqToDB.Mapping.ValueToSqlConverter![]? converters) -> void
LinqToDB.Mapping.VersionBehavior
LinqToDB.Mapping.VersionBehavior.Auto = 0 -> LinqToDB.Mapping.VersionBehavior
LinqToDB.Mapping.VersionBehavior.AutoIncrement = 1 -> LinqToDB.Mapping.VersionBehavior
LinqToDB.Mapping.VersionBehavior.Guid = 2 -> LinqToDB.Mapping.VersionBehavior
LinqToDB.MergeDefinition<TTarget, TSource>
LinqToDB.MergeDefinition<TTarget, TSource>.AddOnKey<TKey>(System.Linq.Expressions.Expression<System.Func<TTarget, TKey>!>! targetKey, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! sourceKey) -> LinqToDB.MergeDefinition<TTarget, TSource>!
LinqToDB.MergeDefinition<TTarget, TSource>.AddOnPredicate(System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! matchPredicate) -> LinqToDB.MergeDefinition<TTarget, TSource>!
LinqToDB.MergeDefinition<TTarget, TSource>.AddOperation(LinqToDB.MergeDefinition<TTarget, TSource>.Operation! operation) -> LinqToDB.MergeDefinition<TTarget, TSource>!
LinqToDB.MergeDefinition<TTarget, TSource>.AddSource<TNewSource>(System.Collections.Generic.IEnumerable<TNewSource!>! source) -> LinqToDB.MergeDefinition<TTarget, TNewSource!>!
LinqToDB.MergeDefinition<TTarget, TSource>.AddSource<TNewSource>(System.Linq.IQueryable<TNewSource!>! source) -> LinqToDB.MergeDefinition<TTarget, TNewSource!>!
LinqToDB.MergeDefinition<TTarget, TSource>.EnumerableSource.get -> System.Collections.Generic.IEnumerable<TSource>?
LinqToDB.MergeDefinition<TTarget, TSource>.Hint.get -> string?
LinqToDB.MergeDefinition<TTarget, TSource>.KeyType.get -> System.Type?
LinqToDB.MergeDefinition<TTarget, TSource>.MatchPredicate.get -> System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.MergeDefinition(LinqToDB.ITable<TTarget>! target) -> void
LinqToDB.MergeDefinition<TTarget, TSource>.MergeDefinition(LinqToDB.ITable<TTarget>! target, string! hint) -> void
LinqToDB.MergeDefinition<TTarget, TSource>.MergeDefinition(LinqToDB.ITable<TTarget>! target, System.Linq.IQueryable<TSource>! source) -> void
LinqToDB.MergeDefinition<TTarget, TSource>.MergeDefinition(LinqToDB.ITable<TTarget>! target, System.Linq.IQueryable<TSource>! source, string! hint) -> void
LinqToDB.MergeDefinition<TTarget, TSource>.Operation
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.BySourcePredicate.get -> System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.CreateExpression.get -> System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.HasCondition.get -> bool
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.MatchedPredicate.get -> System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.MatchedPredicate2.get -> System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.NotMatchedPredicate.get -> System.Linq.Expressions.Expression<System.Func<TSource, bool>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.Type.get -> LinqToDB.MergeOperationType
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.UpdateBySourceExpression.get -> System.Linq.Expressions.Expression<System.Func<TTarget, TTarget>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operation.UpdateExpression.get -> System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>?
LinqToDB.MergeDefinition<TTarget, TSource>.Operations.get -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation![]?
LinqToDB.MergeDefinition<TTarget, TSource>.QueryableSource.get -> System.Linq.IQueryable<TSource>?
LinqToDB.MergeDefinition<TTarget, TSource>.SourceKey.get -> System.Linq.Expressions.Expression?
LinqToDB.MergeDefinition<TTarget, TSource>.Target.get -> LinqToDB.ITable<TTarget>!
LinqToDB.MergeDefinition<TTarget, TSource>.TargetKey.get -> System.Linq.Expressions.Expression?
LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.Delete = 3 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.DeleteBySource = 6 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.Insert = 1 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.None = 0 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.Update = 2 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.UpdateBySource = 5 -> LinqToDB.MergeOperationType
LinqToDB.MergeOperationType.UpdateWithDelete = 4 -> LinqToDB.MergeOperationType
LinqToDB.Metadata.AttributeReader
LinqToDB.Metadata.AttributeReader.AttributeReader() -> void
LinqToDB.Metadata.AttributeReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.AttributeReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.AttributeReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.AttributeReader.GetObjectID() -> string!
LinqToDB.Metadata.FluentMetadataReader
LinqToDB.Metadata.FluentMetadataReader.FluentMetadataReader(System.Collections.Generic.IReadOnlyDictionary<System.Type!, System.Collections.Generic.List<LinqToDB.Mapping.MappingAttribute!>!>! typeAttributes, System.Collections.Generic.IReadOnlyDictionary<System.Reflection.MemberInfo!, System.Collections.Generic.List<LinqToDB.Mapping.MappingAttribute!>!>! memberAttributes, System.Collections.Generic.IReadOnlyList<System.Reflection.MemberInfo!>! orderedMembers) -> void
LinqToDB.Metadata.FluentMetadataReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.FluentMetadataReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.FluentMetadataReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.FluentMetadataReader.GetObjectID() -> string!
LinqToDB.Metadata.FluentMetadataReader.GetRegisteredTypes() -> System.Collections.Generic.IEnumerable<System.Type!>!
LinqToDB.Metadata.IMetadataReader
LinqToDB.Metadata.IMetadataReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.IMetadataReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.IMetadataReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.IMetadataReader.GetObjectID() -> string!
LinqToDB.Metadata.MetadataException
LinqToDB.Metadata.MetadataException.MetadataException() -> void
LinqToDB.Metadata.MetadataException.MetadataException(string! message) -> void
LinqToDB.Metadata.MetadataException.MetadataException(string! message, System.Exception! innerException) -> void
LinqToDB.Metadata.MetadataException.MetadataException(System.Exception! innerException) -> void
LinqToDB.Metadata.MetadataReader
LinqToDB.Metadata.MetadataReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.MetadataReader.GetObjectID() -> string!
LinqToDB.Metadata.MetadataReader.GetRegisteredTypes() -> System.Collections.Generic.IReadOnlyList<System.Type!>!
LinqToDB.Metadata.MetadataReader.MetadataReader(params LinqToDB.Metadata.IMetadataReader![]! readers) -> void
LinqToDB.Metadata.MetadataReader.Readers.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Metadata.IMetadataReader!>!
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.GetObjectID() -> string!
LinqToDB.Metadata.SystemComponentModelDataAnnotationsSchemaAttributeReader.SystemComponentModelDataAnnotationsSchemaAttributeReader() -> void
LinqToDB.Metadata.XmlAttributeReader
LinqToDB.Metadata.XmlAttributeReader.GetAttributes(System.Type! type) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.XmlAttributeReader.GetAttributes(System.Type! type, System.Reflection.MemberInfo! memberInfo) -> LinqToDB.Mapping.MappingAttribute![]!
LinqToDB.Metadata.XmlAttributeReader.GetDynamicColumns(System.Type! type) -> System.Reflection.MemberInfo![]!
LinqToDB.Metadata.XmlAttributeReader.GetObjectID() -> string!
LinqToDB.Metadata.XmlAttributeReader.XmlAttributeReader(string! xmlFile) -> void
LinqToDB.Metadata.XmlAttributeReader.XmlAttributeReader(string! xmlFile, System.Reflection.Assembly! assembly) -> void
LinqToDB.Metadata.XmlAttributeReader.XmlAttributeReader(System.IO.Stream! xmlDocStream) -> void
LinqToDB.Metrics.ActivityBase
LinqToDB.Metrics.ActivityBase.ActivityBase(LinqToDB.Metrics.ActivityID activityID) -> void
LinqToDB.Metrics.ActivityBase.ActivityID.get -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.Build = 10 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BuildQuery = 14 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BuildSequence = 11 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BuildSequenceBuild = 13 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BuildSequenceCanBuild = 12 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BuildSql = 45 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BulkCopy = 43 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.BulkCopyAsync = 44 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteNonQuery = 69 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteNonQueryAsync = 70 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteReader = 67 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteReaderAsync = 68 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteScalar = 65 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandExecuteScalarAsync = 66 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInfoExecute = 46 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInfoExecuteAsync = 49 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInfoExecuteAsyncT = 50 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInfoExecuteCustom = 48 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInfoExecuteT = 47 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorAfterExecuteReader = 78 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorBeforeReaderDispose = 79 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorBeforeReaderDisposeAsync = 80 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorCommandInitialized = 71 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteNonQuery = 74 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteNonQueryAsync = 75 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteReader = 76 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteReaderAsync = 77 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteScalar = 72 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CommandInterceptorExecuteScalarAsync = 73 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionBeginTransaction = 57 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionBeginTransactionAsync = 58 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionClose = 53 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionCloseAsync = 54 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionDispose = 55 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionDisposeAsync = 56 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionInterceptorConnectionOpened = 83 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionInterceptorConnectionOpenedAsync = 84 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionInterceptorConnectionOpening = 81 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionInterceptorConnectionOpeningAsync = 82 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionOpen = 51 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ConnectionOpenAsync = 52 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CreateTable = 29 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.CreateTableAsync = 30 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DataContextInterceptorOnClosed = 87 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DataContextInterceptorOnClosedAsync = 88 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DataContextInterceptorOnClosing = 85 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DataContextInterceptorOnClosingAsync = 86 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DeleteObject = 33 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DeleteObjectAsync = 34 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DropTable = 31 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.DropTableAsync = 32 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.EntityServiceInterceptorEntityCreated = 89 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExceptionInterceptorProcessException = 94 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteElement = 19 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteElementAsync = 20 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteNonQuery = 23 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteNonQuery2 = 25 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteNonQuery2Async = 26 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteNonQueryAsync = 24 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteQuery = 17 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteQueryAsync = 18 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteScalar = 21 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteScalarAlternative = 27 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteScalarAlternativeAsync = 28 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.ExecuteScalarAsync = 22 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.FinalizeQuery = 15 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetIEnumerable = 16 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetQueryCreate = 9 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetQueryFind = 6 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetQueryFindExpose = 7 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetQueryFindFind = 8 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetQueryTotal = 5 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.GetSqlText = 95 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertObject = 35 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertObjectAsync = 36 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertOrReplaceObject = 37 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertOrReplaceObjectAsync = 38 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertWithIdentityObject = 39 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.InsertWithIdentityObjectAsync = 40 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.Materialization = 96 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.None = 0 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.OnTraceInternal = 97 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.QueryProviderExecute = 2 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.QueryProviderExecuteT = 1 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.QueryProviderGetEnumerator = 4 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.QueryProviderGetEnumeratorT = 3 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionCommit = 59 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionCommitAsync = 60 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionDispose = 63 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionDisposeAsync = 64 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionRollback = 61 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.TransactionRollbackAsync = 62 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UnwrapDataObjectInterceptorUnwrapCommand = 92 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UnwrapDataObjectInterceptorUnwrapConnection = 90 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UnwrapDataObjectInterceptorUnwrapDataReader = 93 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UnwrapDataObjectInterceptorUnwrapTransaction = 91 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UpdateObject = 41 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityID.UpdateObjectAsync = 42 -> LinqToDB.Metrics.ActivityID
LinqToDB.Metrics.ActivityService
LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.CommandText = 5 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.ConfigurationString = 1 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.DatabaseName = 4 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.DataProviderName = 2 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.DataSourceName = 3 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.ActivityTagID.None = 0 -> LinqToDB.Metrics.ActivityTagID
LinqToDB.Metrics.IActivity
LinqToDB.Metrics.IActivity.AddQueryInfo(LinqToDB.Data.DataConnection? context, System.Data.Common.DbConnection? connection, System.Data.Common.DbCommand? command) -> LinqToDB.Metrics.IActivity!
LinqToDB.Metrics.IActivity.AddTag(LinqToDB.Metrics.ActivityTagID key, object? value) -> LinqToDB.Metrics.IActivity!
LinqToDB.MultiInsertExtensions
LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>
LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>
LinqToDB.MultiInsertExtensions.IMultiInsertSource<TSource>
LinqToDB.MultiInsertExtensions.IMultiInsertWhen<TSource>
LinqToDB.ProviderName
LinqToDB.QuerySql
LinqToDB.QuerySql.Parameters.get -> System.Collections.Generic.IReadOnlyList<LinqToDB.Data.DataParameter!>!
LinqToDB.QuerySql.QuerySql(string! sql, System.Collections.Generic.IReadOnlyList<LinqToDB.Data.DataParameter!>! parameters) -> void
LinqToDB.QuerySql.Sql.get -> string!
LinqToDB.RawSqlString
LinqToDB.RawSqlString.Format.get -> string!
LinqToDB.RawSqlString.RawSqlString() -> void
LinqToDB.RawSqlString.RawSqlString(string! s) -> void
LinqToDB.Reflection.IObjectFactory
LinqToDB.Reflection.IObjectFactory.CreateInstance(LinqToDB.Reflection.TypeAccessor! typeAccessor) -> object!
LinqToDB.Reflection.MemberAccessor
LinqToDB.Reflection.MemberAccessor.GetGetterExpression(System.Linq.Expressions.Expression! instance) -> System.Linq.Expressions.Expression!
LinqToDB.Reflection.MemberAccessor.GetSetterExpression(System.Linq.Expressions.Expression! instance, System.Linq.Expressions.Expression! value) -> System.Linq.Expressions.Expression!
LinqToDB.Reflection.MemberAccessor.HasGetter.get -> bool
LinqToDB.Reflection.MemberAccessor.HasSetter.get -> bool
LinqToDB.Reflection.MemberAccessor.IsComplex.get -> bool
LinqToDB.Reflection.MemberAccessor.MemberAccessor(LinqToDB.Reflection.TypeAccessor! typeAccessor, System.Reflection.MemberInfo! memberInfo, LinqToDB.Mapping.EntityDescriptor? ed) -> void
LinqToDB.Reflection.MemberAccessor.MemberInfo.get -> System.Reflection.MemberInfo!
LinqToDB.Reflection.MemberAccessor.Name.get -> string!
LinqToDB.Reflection.MemberAccessor.Type.get -> System.Type!
LinqToDB.Reflection.MemberAccessor.TypeAccessor.get -> LinqToDB.Reflection.TypeAccessor!
LinqToDB.Reflection.ObjectFactory<T>
LinqToDB.Reflection.ObjectFactoryAttribute
LinqToDB.Reflection.ObjectFactoryAttribute.ObjectFactory.get -> LinqToDB.Reflection.IObjectFactory!
LinqToDB.Reflection.ObjectFactoryAttribute.ObjectFactoryAttribute(System.Type! type) -> void
LinqToDB.Reflection.TypeAccessor
LinqToDB.Reflection.TypeAccessor.AddMember(LinqToDB.Reflection.MemberAccessor! member) -> void
LinqToDB.Reflection.TypeAccessor.CreateInstanceEx() -> object!
LinqToDB.Reflection.TypeAccessor.GetMemberByName(string! memberName) -> LinqToDB.Reflection.MemberAccessor?
LinqToDB.Reflection.TypeAccessor.Members.get -> System.Collections.Generic.List<LinqToDB.Reflection.MemberAccessor!>!
LinqToDB.Reflection.TypeAccessor.ObjectFactory.get -> LinqToDB.Reflection.IObjectFactory?
LinqToDB.Reflection.TypeAccessor.ObjectFactory.set -> void
LinqToDB.Reflection.TypeAccessor.this[int index].get -> LinqToDB.Reflection.MemberAccessor!
LinqToDB.Reflection.TypeAccessor.this[string! memberName].get -> LinqToDB.Reflection.MemberAccessor!
LinqToDB.Reflection.TypeAccessor.TypeAccessor() -> void
LinqToDB.Reflection.TypeAccessor<T>
LinqToDB.Reflection.TypeAccessor<T>.Create() -> T
LinqToDB.Remote.DataContextFactory<TContext>
LinqToDB.Remote.DataContextFactory<TContext>.CreateDataContext(string? configuration) -> TContext
LinqToDB.Remote.DataContextFactory<TContext>.DataContextFactory(System.Func<string?, TContext>! factory) -> void
LinqToDB.Remote.IDataContextFactory<TContext>
LinqToDB.Remote.IDataContextFactory<TContext>.CreateDataContext(string? configuration = null) -> TContext
LinqToDB.Remote.ILinqService
LinqToDB.Remote.ILinqService.ExecuteBatch(string? configuration, string! queryData) -> int
LinqToDB.Remote.ILinqService.ExecuteBatchAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
LinqToDB.Remote.ILinqService.ExecuteNonQuery(string? configuration, string! queryData) -> int
LinqToDB.Remote.ILinqService.ExecuteNonQueryAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
LinqToDB.Remote.ILinqService.ExecuteReader(string? configuration, string! queryData) -> string!
LinqToDB.Remote.ILinqService.ExecuteReaderAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string!>!
LinqToDB.Remote.ILinqService.ExecuteScalar(string? configuration, string! queryData) -> string?
LinqToDB.Remote.ILinqService.ExecuteScalarAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<string?>!
LinqToDB.Remote.ILinqService.GetInfo(string? configuration) -> LinqToDB.Remote.LinqServiceInfo!
LinqToDB.Remote.ILinqService.GetInfoAsync(string? configuration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Remote.LinqServiceInfo!>!
LinqToDB.Remote.ILinqService.RemoteClientTag.get -> string?
LinqToDB.Remote.ILinqService.RemoteClientTag.set -> void
LinqToDB.Remote.ILinqService<T>
LinqToDB.Remote.LinqService
LinqToDB.Remote.LinqService.AllowUpdates.get -> bool
LinqToDB.Remote.LinqService.AllowUpdates.set -> void
LinqToDB.Remote.LinqService.ExecuteBatch(string? configuration, string! queryData) -> int
LinqToDB.Remote.LinqService.ExecuteBatchAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
LinqToDB.Remote.LinqService.ExecuteNonQuery(string? configuration, string! queryData) -> int
LinqToDB.Remote.LinqService.ExecuteNonQueryAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
LinqToDB.Remote.LinqService.ExecuteReader(string? configuration, string! queryData) -> string!
LinqToDB.Remote.LinqService.ExecuteReaderAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string!>!
LinqToDB.Remote.LinqService.ExecuteScalar(string? configuration, string! queryData) -> string?
LinqToDB.Remote.LinqService.ExecuteScalarAsync(string? configuration, string! queryData, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<string?>!
LinqToDB.Remote.LinqService.LinqService() -> void
LinqToDB.Remote.LinqService.LinqService(LinqToDB.Mapping.MappingSchema? mappingSchema) -> void
LinqToDB.Remote.LinqService.MappingSchema.get -> LinqToDB.Mapping.MappingSchema?
LinqToDB.Remote.LinqService.MappingSchema.set -> void
LinqToDB.Remote.LinqService.RemoteClientTag.get -> string?
LinqToDB.Remote.LinqService.RemoteClientTag.set -> void
LinqToDB.Remote.LinqService<T>
LinqToDB.Remote.LinqService<T>.LinqService(LinqToDB.Remote.IDataContextFactory<T>! dataContextFactory) -> void
LinqToDB.Remote.LinqServiceInfo
LinqToDB.Remote.LinqServiceInfo.LinqServiceInfo() -> void
LinqToDB.Remote.LinqServiceInfo.MappingSchemaType.get -> string!
LinqToDB.Remote.LinqServiceInfo.MappingSchemaType.set -> void
LinqToDB.Remote.LinqServiceInfo.MethodCallTranslatorType.get -> string!
LinqToDB.Remote.LinqServiceInfo.MethodCallTranslatorType.set -> void
LinqToDB.Remote.LinqServiceInfo.SqlBuilderType.get -> string!
LinqToDB.Remote.LinqServiceInfo.SqlBuilderType.set -> void
LinqToDB.Remote.LinqServiceInfo.SqlOptimizerType.get -> string!
LinqToDB.Remote.LinqServiceInfo.SqlOptimizerType.set -> void
LinqToDB.Remote.LinqServiceInfo.SqlProviderFlags.get -> LinqToDB.Internal.SqlProvider.SqlProviderFlags!
LinqToDB.Remote.LinqServiceInfo.SqlProviderFlags.set -> void
LinqToDB.Remote.LinqServiceInfo.SupportedTableOptions.get -> LinqToDB.TableOptions
LinqToDB.Remote.LinqServiceInfo.SupportedTableOptions.set -> void
LinqToDB.Remote.LinqServiceQuery
LinqToDB.Remote.LinqServiceQuery.DataOptions.get -> LinqToDB.DataOptions!
LinqToDB.Remote.LinqServiceQuery.DataOptions.set -> void
LinqToDB.Remote.LinqServiceQuery.LinqServiceQuery() -> void
LinqToDB.Remote.LinqServiceQuery.QueryHints.get -> System.Collections.Generic.IReadOnlyCollection<string!>?
LinqToDB.Remote.LinqServiceQuery.QueryHints.set -> void
LinqToDB.Remote.LinqServiceQuery.Statement.get -> LinqToDB.Internal.SqlQuery.SqlStatement!
LinqToDB.Remote.LinqServiceQuery.Statement.set -> void
LinqToDB.Remote.LinqServiceResult
LinqToDB.Remote.LinqServiceResult.Data.get -> System.Collections.Generic.List<string![]!>!
LinqToDB.Remote.LinqServiceResult.Data.set -> void
LinqToDB.Remote.LinqServiceResult.FieldCount.get -> int
LinqToDB.Remote.LinqServiceResult.FieldCount.set -> void
LinqToDB.Remote.LinqServiceResult.FieldNames.get -> string![]!
LinqToDB.Remote.LinqServiceResult.FieldNames.set -> void
LinqToDB.Remote.LinqServiceResult.FieldTypes.get -> System.Type![]!
LinqToDB.Remote.LinqServiceResult.FieldTypes.set -> void
LinqToDB.Remote.LinqServiceResult.LinqServiceResult() -> void
LinqToDB.Remote.LinqServiceResult.QueryID.get -> System.Guid
LinqToDB.Remote.LinqServiceResult.QueryID.set -> void
LinqToDB.Remote.LinqServiceResult.RowCount.get -> int
LinqToDB.Remote.LinqServiceResult.RowCount.set -> void
LinqToDB.Remote.RemoteDataContextBase
LinqToDB.Remote.RemoteDataContextBase.AddInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.Remote.RemoteDataContextBase.AddMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> void
LinqToDB.Remote.RemoteDataContextBase.BeginBatch() -> void
LinqToDB.Remote.RemoteDataContextBase.CloseAfterUse.get -> bool
LinqToDB.Remote.RemoteDataContextBase.CloseAfterUse.set -> void
LinqToDB.Remote.RemoteDataContextBase.CommitBatch() -> void
LinqToDB.Remote.RemoteDataContextBase.CommitBatchAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
LinqToDB.Remote.RemoteDataContextBase.ConfigurationString.get -> string?
LinqToDB.Remote.RemoteDataContextBase.ConfigurationString.set -> void
LinqToDB.Remote.RemoteDataContextBase.ConfigureAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
LinqToDB.Remote.RemoteDataContextBase.Disposed.get -> bool
LinqToDB.Remote.RemoteDataContextBase.GetSqlOptimizer.get -> System.Func<LinqToDB.DataOptions!, LinqToDB.Internal.SqlProvider.ISqlOptimizer!>!
LinqToDB.Remote.RemoteDataContextBase.InitServiceProvider(LinqToDB.Internal.DataProvider.SimpleServiceProvider! serviceProvider) -> void
LinqToDB.Remote.RemoteDataContextBase.InlineParameters.get -> bool
LinqToDB.Remote.RemoteDataContextBase.InlineParameters.set -> void
LinqToDB.Remote.RemoteDataContextBase.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Remote.RemoteDataContextBase.MappingSchema.set -> void
LinqToDB.Remote.RemoteDataContextBase.NextQueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.Remote.RemoteDataContextBase.Options.get -> LinqToDB.DataOptions!
LinqToDB.Remote.RemoteDataContextBase.QueryHints.get -> System.Collections.Generic.List<string!>!
LinqToDB.Remote.RemoteDataContextBase.RemoteDataContextBase(LinqToDB.DataOptions! options) -> void
LinqToDB.Remote.RemoteDataContextBase.RemoveInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> void
LinqToDB.Remote.RemoteDataContextBase.ThrowOnDisposed() -> void
LinqToDB.Remote.RemoteDataContextBase.UseMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> System.IDisposable?
LinqToDB.Remote.RemoteDataContextBase.UseOptions(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> System.IDisposable?
LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.AssociationType.Auto = 0 -> LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.AssociationType.ManyToOne = 3 -> LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.AssociationType.OneToMany = 2 -> LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.AssociationType.OneToOne = 1 -> LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.ColumnSchema
LinqToDB.SchemaProvider.ColumnSchema.ColumnName.get -> string!
LinqToDB.SchemaProvider.ColumnSchema.ColumnName.set -> void
LinqToDB.SchemaProvider.ColumnSchema.ColumnSchema() -> void
LinqToDB.SchemaProvider.ColumnSchema.ColumnType.get -> string?
LinqToDB.SchemaProvider.ColumnSchema.ColumnType.set -> void
LinqToDB.SchemaProvider.ColumnSchema.DataType.get -> LinqToDB.DataType
LinqToDB.SchemaProvider.ColumnSchema.DataType.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Description.get -> string?
LinqToDB.SchemaProvider.ColumnSchema.Description.set -> void
LinqToDB.SchemaProvider.ColumnSchema.IsIdentity.get -> bool
LinqToDB.SchemaProvider.ColumnSchema.IsIdentity.set -> void
LinqToDB.SchemaProvider.ColumnSchema.IsNullable.get -> bool
LinqToDB.SchemaProvider.ColumnSchema.IsNullable.set -> void
LinqToDB.SchemaProvider.ColumnSchema.IsPrimaryKey.get -> bool
LinqToDB.SchemaProvider.ColumnSchema.IsPrimaryKey.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Length.get -> int?
LinqToDB.SchemaProvider.ColumnSchema.Length.set -> void
LinqToDB.SchemaProvider.ColumnSchema.MemberName.get -> string!
LinqToDB.SchemaProvider.ColumnSchema.MemberName.set -> void
LinqToDB.SchemaProvider.ColumnSchema.MemberType.get -> string!
LinqToDB.SchemaProvider.ColumnSchema.MemberType.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Ordinal.get -> int?
LinqToDB.SchemaProvider.ColumnSchema.Ordinal.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Precision.get -> int?
LinqToDB.SchemaProvider.ColumnSchema.Precision.set -> void
LinqToDB.SchemaProvider.ColumnSchema.PrimaryKeyOrder.get -> int
LinqToDB.SchemaProvider.ColumnSchema.PrimaryKeyOrder.set -> void
LinqToDB.SchemaProvider.ColumnSchema.ProviderSpecificType.get -> string?
LinqToDB.SchemaProvider.ColumnSchema.ProviderSpecificType.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Scale.get -> int?
LinqToDB.SchemaProvider.ColumnSchema.Scale.set -> void
LinqToDB.SchemaProvider.ColumnSchema.SkipOnInsert.get -> bool
LinqToDB.SchemaProvider.ColumnSchema.SkipOnInsert.set -> void
LinqToDB.SchemaProvider.ColumnSchema.SkipOnUpdate.get -> bool
LinqToDB.SchemaProvider.ColumnSchema.SkipOnUpdate.set -> void
LinqToDB.SchemaProvider.ColumnSchema.SystemType.get -> System.Type?
LinqToDB.SchemaProvider.ColumnSchema.SystemType.set -> void
LinqToDB.SchemaProvider.ColumnSchema.Table -> LinqToDB.SchemaProvider.TableSchema!
LinqToDB.SchemaProvider.DatabaseSchema
LinqToDB.SchemaProvider.DatabaseSchema.Database.get -> string!
LinqToDB.SchemaProvider.DatabaseSchema.Database.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.DatabaseSchema() -> void
LinqToDB.SchemaProvider.DatabaseSchema.DataSource.get -> string!
LinqToDB.SchemaProvider.DatabaseSchema.DataSource.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.DataTypesSchema.get -> System.Data.DataTable?
LinqToDB.SchemaProvider.DatabaseSchema.DataTypesSchema.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.Procedures.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureSchema!>!
LinqToDB.SchemaProvider.DatabaseSchema.Procedures.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.ProviderSpecificTypeNamespace.get -> string?
LinqToDB.SchemaProvider.DatabaseSchema.ProviderSpecificTypeNamespace.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.ServerVersion.get -> string!
LinqToDB.SchemaProvider.DatabaseSchema.ServerVersion.set -> void
LinqToDB.SchemaProvider.DatabaseSchema.Tables.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>!
LinqToDB.SchemaProvider.DatabaseSchema.Tables.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema
LinqToDB.SchemaProvider.ForeignKeySchema.AssociationType.get -> LinqToDB.SchemaProvider.AssociationType
LinqToDB.SchemaProvider.ForeignKeySchema.AssociationType.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.BackReference.get -> LinqToDB.SchemaProvider.ForeignKeySchema?
LinqToDB.SchemaProvider.ForeignKeySchema.BackReference.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.CanBeNull.get -> bool
LinqToDB.SchemaProvider.ForeignKeySchema.CanBeNull.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.ForeignKeySchema() -> void
LinqToDB.SchemaProvider.ForeignKeySchema.KeyName.get -> string!
LinqToDB.SchemaProvider.ForeignKeySchema.KeyName.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.MemberName.get -> string!
LinqToDB.SchemaProvider.ForeignKeySchema.MemberName.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.OtherColumns.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
LinqToDB.SchemaProvider.ForeignKeySchema.OtherColumns.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.OtherTable.get -> LinqToDB.SchemaProvider.TableSchema!
LinqToDB.SchemaProvider.ForeignKeySchema.OtherTable.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.ThisColumns.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
LinqToDB.SchemaProvider.ForeignKeySchema.ThisColumns.set -> void
LinqToDB.SchemaProvider.ForeignKeySchema.ThisTable.get -> LinqToDB.SchemaProvider.TableSchema?
LinqToDB.SchemaProvider.ForeignKeySchema.ThisTable.set -> void
LinqToDB.SchemaProvider.GetSchemaOptions
LinqToDB.SchemaProvider.GetSchemaOptions.DefaultSchema -> string?
LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedCatalogs -> string?[]?
LinqToDB.SchemaProvider.GetSchemaOptions.ExcludedSchemas -> string?[]?
LinqToDB.SchemaProvider.GetSchemaOptions.GenerateChar1AsString -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.GetAssociationMemberName -> System.Func<LinqToDB.SchemaProvider.ForeignKeySchema!, string!>?
LinqToDB.SchemaProvider.GetSchemaOptions.GetForeignKeys -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.GetProcedures -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.GetSchemaOptions() -> void
LinqToDB.SchemaProvider.GetSchemaOptions.GetTables -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.IgnoreSystemHistoryTables -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.IncludedCatalogs -> string?[]?
LinqToDB.SchemaProvider.GetSchemaOptions.IncludedSchemas -> string?[]?
LinqToDB.SchemaProvider.GetSchemaOptions.LoadProcedure -> System.Func<LinqToDB.SchemaProvider.ProcedureSchema!, bool>!
LinqToDB.SchemaProvider.GetSchemaOptions.LoadTable -> System.Func<LinqToDB.SchemaProvider.LoadTableData, bool>?
LinqToDB.SchemaProvider.GetSchemaOptions.PreferProviderSpecificTypes -> bool
LinqToDB.SchemaProvider.GetSchemaOptions.ProcedureLoadingProgress -> System.Action<int, int>!
LinqToDB.SchemaProvider.GetSchemaOptions.StringComparer -> System.StringComparer!
LinqToDB.SchemaProvider.GetSchemaOptions.UseSchemaOnly -> bool
LinqToDB.SchemaProvider.ISchemaProvider
LinqToDB.SchemaProvider.ISchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
LinqToDB.SchemaProvider.LoadTableData
LinqToDB.SchemaProvider.LoadTableData.Database.get -> string?
LinqToDB.SchemaProvider.LoadTableData.IsDefaultSchema.get -> bool
LinqToDB.SchemaProvider.LoadTableData.IsSystem.get -> bool
LinqToDB.SchemaProvider.LoadTableData.IsView.get -> bool
LinqToDB.SchemaProvider.LoadTableData.LoadTableData() -> void
LinqToDB.SchemaProvider.LoadTableData.Name.get -> string!
LinqToDB.SchemaProvider.LoadTableData.Schema.get -> string?
LinqToDB.SchemaProvider.ParameterSchema
LinqToDB.SchemaProvider.ParameterSchema.DataType.get -> LinqToDB.DataType
LinqToDB.SchemaProvider.ParameterSchema.DataType.set -> void
LinqToDB.SchemaProvider.ParameterSchema.Description.get -> string?
LinqToDB.SchemaProvider.ParameterSchema.Description.set -> void
LinqToDB.SchemaProvider.ParameterSchema.IsIn.get -> bool
LinqToDB.SchemaProvider.ParameterSchema.IsIn.set -> void
LinqToDB.SchemaProvider.ParameterSchema.IsNullable.get -> bool
LinqToDB.SchemaProvider.ParameterSchema.IsNullable.set -> void
LinqToDB.SchemaProvider.ParameterSchema.IsOut.get -> bool
LinqToDB.SchemaProvider.ParameterSchema.IsOut.set -> void
LinqToDB.SchemaProvider.ParameterSchema.IsResult.get -> bool
LinqToDB.SchemaProvider.ParameterSchema.IsResult.set -> void
LinqToDB.SchemaProvider.ParameterSchema.ParameterName.get -> string!
LinqToDB.SchemaProvider.ParameterSchema.ParameterName.set -> void
LinqToDB.SchemaProvider.ParameterSchema.ParameterSchema() -> void
LinqToDB.SchemaProvider.ParameterSchema.ParameterType.get -> string!
LinqToDB.SchemaProvider.ParameterSchema.ParameterType.set -> void
LinqToDB.SchemaProvider.ParameterSchema.ProviderSpecificType.get -> string?
LinqToDB.SchemaProvider.ParameterSchema.ProviderSpecificType.set -> void
LinqToDB.SchemaProvider.ParameterSchema.SchemaName.get -> string?
LinqToDB.SchemaProvider.ParameterSchema.SchemaName.set -> void
LinqToDB.SchemaProvider.ParameterSchema.SchemaType.get -> string?
LinqToDB.SchemaProvider.ParameterSchema.SchemaType.set -> void
LinqToDB.SchemaProvider.ParameterSchema.Size.get -> int?
LinqToDB.SchemaProvider.ParameterSchema.Size.set -> void
LinqToDB.SchemaProvider.ParameterSchema.SystemType.get -> System.Type?
LinqToDB.SchemaProvider.ParameterSchema.SystemType.set -> void
LinqToDB.SchemaProvider.ProcedureSchema
LinqToDB.SchemaProvider.ProcedureSchema.CatalogName.get -> string?
LinqToDB.SchemaProvider.ProcedureSchema.CatalogName.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.Description.get -> string?
LinqToDB.SchemaProvider.ProcedureSchema.Description.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsAggregateFunction.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsAggregateFunction.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsDefaultSchema.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsDefaultSchema.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsFunction.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsFunction.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsLoaded.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsLoaded.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsResultDynamic.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsResultDynamic.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.IsTableFunction.get -> bool
LinqToDB.SchemaProvider.ProcedureSchema.IsTableFunction.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.MemberName.get -> string!
LinqToDB.SchemaProvider.ProcedureSchema.MemberName.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.PackageName.get -> string?
LinqToDB.SchemaProvider.ProcedureSchema.PackageName.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.Parameters.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ParameterSchema!>!
LinqToDB.SchemaProvider.ProcedureSchema.Parameters.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.ProcedureName.get -> string!
LinqToDB.SchemaProvider.ProcedureSchema.ProcedureName.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.ProcedureSchema() -> void
LinqToDB.SchemaProvider.ProcedureSchema.ResultException.get -> System.Exception?
LinqToDB.SchemaProvider.ProcedureSchema.ResultException.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.ResultTable.get -> LinqToDB.SchemaProvider.TableSchema?
LinqToDB.SchemaProvider.ProcedureSchema.ResultTable.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.SchemaName.get -> string?
LinqToDB.SchemaProvider.ProcedureSchema.SchemaName.set -> void
LinqToDB.SchemaProvider.ProcedureSchema.SimilarTables.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>?
LinqToDB.SchemaProvider.ProcedureSchema.SimilarTables.set -> void
LinqToDB.SchemaProvider.TableInfo
LinqToDB.SchemaProvider.TableInfo.CatalogName -> string?
LinqToDB.SchemaProvider.TableInfo.Description -> string?
LinqToDB.SchemaProvider.TableInfo.IsDefaultSchema -> bool
LinqToDB.SchemaProvider.TableInfo.IsProviderSpecific -> bool
LinqToDB.SchemaProvider.TableInfo.IsView -> bool
LinqToDB.SchemaProvider.TableInfo.SchemaName -> string?
LinqToDB.SchemaProvider.TableInfo.TableID -> string!
LinqToDB.SchemaProvider.TableInfo.TableInfo() -> void
LinqToDB.SchemaProvider.TableInfo.TableName -> string!
LinqToDB.SchemaProvider.TableSchema
LinqToDB.SchemaProvider.TableSchema.CatalogName.get -> string?
LinqToDB.SchemaProvider.TableSchema.CatalogName.set -> void
LinqToDB.SchemaProvider.TableSchema.Columns.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
LinqToDB.SchemaProvider.TableSchema.Columns.set -> void
LinqToDB.SchemaProvider.TableSchema.Description.get -> string?
LinqToDB.SchemaProvider.TableSchema.Description.set -> void
LinqToDB.SchemaProvider.TableSchema.ForeignKeys.get -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ForeignKeySchema!>!
LinqToDB.SchemaProvider.TableSchema.ForeignKeys.set -> void
LinqToDB.SchemaProvider.TableSchema.GroupName.get -> string?
LinqToDB.SchemaProvider.TableSchema.GroupName.set -> void
LinqToDB.SchemaProvider.TableSchema.ID.get -> string?
LinqToDB.SchemaProvider.TableSchema.ID.set -> void
LinqToDB.SchemaProvider.TableSchema.IsDefaultSchema.get -> bool
LinqToDB.SchemaProvider.TableSchema.IsDefaultSchema.set -> void
LinqToDB.SchemaProvider.TableSchema.IsProcedureResult.get -> bool
LinqToDB.SchemaProvider.TableSchema.IsProcedureResult.set -> void
LinqToDB.SchemaProvider.TableSchema.IsProviderSpecific.get -> bool
LinqToDB.SchemaProvider.TableSchema.IsProviderSpecific.set -> void
LinqToDB.SchemaProvider.TableSchema.IsView.get -> bool
LinqToDB.SchemaProvider.TableSchema.IsView.set -> void
LinqToDB.SchemaProvider.TableSchema.SchemaName.get -> string?
LinqToDB.SchemaProvider.TableSchema.SchemaName.set -> void
LinqToDB.SchemaProvider.TableSchema.TableName.get -> string?
LinqToDB.SchemaProvider.TableSchema.TableName.set -> void
LinqToDB.SchemaProvider.TableSchema.TableSchema() -> void
LinqToDB.SchemaProvider.TableSchema.TypeName.get -> string!
LinqToDB.SchemaProvider.TableSchema.TypeName.set -> void
LinqToDB.ServerSideOnlyException
LinqToDB.ServerSideOnlyException.ServerSideOnlyException() -> void
LinqToDB.ServerSideOnlyException.ServerSideOnlyException(string! apiName) -> void
LinqToDB.Sql
LinqToDB.Sql.AggregateFunctionNotOrderedImpl<T, TR>
LinqToDB.Sql.AggregateFunctionNotOrderedImpl<T, TR>.AggregateFunctionNotOrderedImpl(System.Linq.IQueryable<TR>! query) -> void
LinqToDB.Sql.AggregateFunctionNotOrderedImpl<T, TR>.Query.get -> System.Linq.IQueryable!
LinqToDB.Sql.AggregateModifier
LinqToDB.Sql.AggregateModifier.All = 2 -> LinqToDB.Sql.AggregateModifier
LinqToDB.Sql.AggregateModifier.Distinct = 1 -> LinqToDB.Sql.AggregateModifier
LinqToDB.Sql.AggregateModifier.None = 0 -> LinqToDB.Sql.AggregateModifier
LinqToDB.Sql.ConvertTo<TTo>
LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Day = 4 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.DayOfYear = 3 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Hour = 7 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Millisecond = 10 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Minute = 8 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Month = 2 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Quarter = 1 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Second = 9 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Week = 5 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.WeekDay = 6 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.DateParts.Year = 0 -> LinqToDB.Sql.DateParts
LinqToDB.Sql.EnumAttribute
LinqToDB.Sql.EnumAttribute.EnumAttribute() -> void
LinqToDB.Sql.ExpressionAttribute
LinqToDB.Sql.ExpressionAttribute.ArgIndices.get -> int[]?
LinqToDB.Sql.ExpressionAttribute.ArgIndices.set -> void
LinqToDB.Sql.ExpressionAttribute.CanBeNull.get -> bool
LinqToDB.Sql.ExpressionAttribute.CanBeNull.set -> void
LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>
LinqToDB.Sql.ExpressionAttribute.ExpectExpression.get -> bool
LinqToDB.Sql.ExpressionAttribute.ExpectExpression.set -> void
LinqToDB.Sql.ExpressionAttribute.Expression.get -> string?
LinqToDB.Sql.ExpressionAttribute.Expression.set -> void
LinqToDB.Sql.ExpressionAttribute.ExpressionAttribute(string! configuration, string! expression) -> void
LinqToDB.Sql.ExpressionAttribute.ExpressionAttribute(string! configuration, string! expression, params int[]! argIndices) -> void
LinqToDB.Sql.ExpressionAttribute.ExpressionAttribute(string! expression, params int[]! argIndices) -> void
LinqToDB.Sql.ExpressionAttribute.ExpressionAttribute(string? expression) -> void
LinqToDB.Sql.ExpressionAttribute.IgnoreGenericParameters.get -> bool
LinqToDB.Sql.ExpressionAttribute.IgnoreGenericParameters.set -> void
LinqToDB.Sql.ExpressionAttribute.InlineParameters.get -> bool
LinqToDB.Sql.ExpressionAttribute.InlineParameters.set -> void
LinqToDB.Sql.ExpressionAttribute.IsAggregate.get -> bool
LinqToDB.Sql.ExpressionAttribute.IsAggregate.set -> void
LinqToDB.Sql.ExpressionAttribute.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.ExpressionAttribute.IsNullable.set -> void
LinqToDB.Sql.ExpressionAttribute.IsPredicate.get -> bool
LinqToDB.Sql.ExpressionAttribute.IsPredicate.set -> void
LinqToDB.Sql.ExpressionAttribute.IsPure.get -> bool
LinqToDB.Sql.ExpressionAttribute.IsPure.set -> void
LinqToDB.Sql.ExpressionAttribute.IsWindowFunction.get -> bool
LinqToDB.Sql.ExpressionAttribute.IsWindowFunction.set -> void
LinqToDB.Sql.ExpressionAttribute.Precedence.get -> int
LinqToDB.Sql.ExpressionAttribute.Precedence.set -> void
LinqToDB.Sql.ExpressionAttribute.PreferServerSide.get -> bool
LinqToDB.Sql.ExpressionAttribute.PreferServerSide.set -> void
LinqToDB.Sql.ExpressionAttribute.ServerSideOnly.get -> bool
LinqToDB.Sql.ExpressionAttribute.ServerSideOnly.set -> void
LinqToDB.Sql.ExpressionAttribute.СonfiguredCanBeNull.get -> bool?
LinqToDB.Sql.ExtensionAttribute
LinqToDB.Sql.ExtensionAttribute.BuilderType.get -> System.Type?
LinqToDB.Sql.ExtensionAttribute.BuilderType.set -> void
LinqToDB.Sql.ExtensionAttribute.BuilderValue.get -> object?
LinqToDB.Sql.ExtensionAttribute.BuilderValue.set -> void
LinqToDB.Sql.ExtensionAttribute.BuildFunctionsChain<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.Internal.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expr, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, out System.Linq.Expressions.Expression? error) -> System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam!>?
LinqToDB.Sql.ExtensionAttribute.ChainPrecedence.get -> int
LinqToDB.Sql.ExtensionAttribute.ChainPrecedence.set -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionAttribute(string! configuration, string! expression) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionAttribute(string! configuration, System.Type! builderType) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionAttribute(string! expression) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionAttribute(System.Type! builderType) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.AddParameter(string! name, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Sql.SqlExtensionParam!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Arguments.get -> System.Linq.Expressions.Expression![]!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.BuilderValue.get -> object?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.CanBeNull.get -> bool?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Configuration.get -> string?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpression(System.Linq.Expressions.Expression! expr, bool unwrap, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, bool? inlineParameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression() -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ConvertToSqlExpression(int precedence) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.EvaluateExpression(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Evaluator.get -> LinqToDB.Expressions.IExpressionEvaluator!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Expression.get -> string!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Expression.set -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Extension.get -> LinqToDB.Sql.SqlExtension!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ExtensionBuilder(TContext context, LinqToDB.Expressions.IExpressionEvaluator! evaluator, string? configuration, object? builderValue, LinqToDB.IDataContext! dataContext, LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! extension, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, System.Reflection.MemberInfo! member, System.Linq.Expressions.Expression![]! arguments, LinqToDB.Sql.IsNullableType isNullable, bool? canBeNull) -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(int index, bool unwrap, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetExpression(string! argName, bool unwrap, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetObjectValue(int index) -> object!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetObjectValue(string! argName) -> object!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetValue<T>(int index) -> T
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.GetValue<T>(string! argName) -> T
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsConvertible.get -> bool
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsConvertible.set -> void
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Mapping.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Member.get -> System.Reflection.MemberInfo!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Method.get -> System.Reflection.MethodInfo?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.Query.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ResultExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ExtensionAttribute.ExtensionBuilder<TContext>.ResultExpression.set -> void
LinqToDB.Sql.ExtensionAttribute.TokenName.get -> string?
LinqToDB.Sql.ExtensionAttribute.TokenName.set -> void
LinqToDB.Sql.From
LinqToDB.Sql.From.First = 1 -> LinqToDB.Sql.From
LinqToDB.Sql.From.Last = 2 -> LinqToDB.Sql.From
LinqToDB.Sql.From.None = 0 -> LinqToDB.Sql.From
LinqToDB.Sql.FunctionAttribute
LinqToDB.Sql.FunctionAttribute.FunctionAttribute() -> void
LinqToDB.Sql.FunctionAttribute.FunctionAttribute(string! configuration, string! name) -> void
LinqToDB.Sql.FunctionAttribute.FunctionAttribute(string! configuration, string! name, params int[]! argIndices) -> void
LinqToDB.Sql.FunctionAttribute.FunctionAttribute(string! name) -> void
LinqToDB.Sql.FunctionAttribute.FunctionAttribute(string! name, params int[]! argIndices) -> void
LinqToDB.Sql.FunctionAttribute.Name.get -> string?
LinqToDB.Sql.FunctionAttribute.Name.set -> void
LinqToDB.Sql.IAggregateFunction<T, TR>
LinqToDB.Sql.IAggregateFunctionNotOrdered<T, TR>
LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>
LinqToDB.Sql.IExtensionCallBuilder
LinqToDB.Sql.IExtensionCallBuilder.Build(LinqToDB.Sql.ISqExtensionBuilder! builder) -> void
LinqToDB.Sql.IGroupBy
LinqToDB.Sql.IGroupBy.Cube<T>(T cubeKey) -> T
LinqToDB.Sql.IGroupBy.GroupingSets<T>(T setsExpression) -> T
LinqToDB.Sql.IGroupBy.None.get -> bool
LinqToDB.Sql.IGroupBy.Rollup<T>(T rollupKey) -> T
LinqToDB.Sql.IQueryableContainer
LinqToDB.Sql.IQueryableContainer.Query.get -> System.Linq.IQueryable!
LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.IfAllParametersNullable = 8 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.IfAnyParameterNullable = 3 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.NotNullable = 2 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.Nullable = 1 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.SameAsFirstParameter = 4 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.SameAsLastParameter = 7 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.SameAsSecondParameter = 5 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.SameAsThirdParameter = 6 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.IsNullableType.Undefined = 0 -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.ISqExtensionBuilder
LinqToDB.Sql.ISqExtensionBuilder.AddParameter(string! name, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Sql.SqlExtensionParam!
LinqToDB.Sql.ISqExtensionBuilder.Arguments.get -> System.Linq.Expressions.Expression![]!
LinqToDB.Sql.ISqExtensionBuilder.BuilderValue.get -> object?
LinqToDB.Sql.ISqExtensionBuilder.CanBeNull.get -> bool?
LinqToDB.Sql.ISqExtensionBuilder.Configuration.get -> string?
LinqToDB.Sql.ISqExtensionBuilder.ConvertExpressionToSql(System.Linq.Expressions.Expression! expression, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression() -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.ConvertToSqlExpression(int precedence) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.Sql.ISqExtensionBuilder.EvaluateExpression(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.Sql.ISqExtensionBuilder.Expression.get -> string!
LinqToDB.Sql.ISqExtensionBuilder.Expression.set -> void
LinqToDB.Sql.ISqExtensionBuilder.Extension.get -> LinqToDB.Sql.SqlExtension!
LinqToDB.Sql.ISqExtensionBuilder.GetExpression(int index, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.GetExpression(string! argName, bool unwrap = false, bool? inlineParameters = null) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.GetObjectValue(int index) -> object!
LinqToDB.Sql.ISqExtensionBuilder.GetObjectValue(string! argName) -> object!
LinqToDB.Sql.ISqExtensionBuilder.GetValue<T>(int index) -> T
LinqToDB.Sql.ISqExtensionBuilder.GetValue<T>(string! argName) -> T
LinqToDB.Sql.ISqExtensionBuilder.IsConvertible.get -> bool
LinqToDB.Sql.ISqExtensionBuilder.IsConvertible.set -> void
LinqToDB.Sql.ISqExtensionBuilder.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.ISqExtensionBuilder.Mapping.get -> LinqToDB.Mapping.MappingSchema!
LinqToDB.Sql.ISqExtensionBuilder.Member.get -> System.Reflection.MemberInfo!
LinqToDB.Sql.ISqExtensionBuilder.Query.get -> LinqToDB.Internal.SqlQuery.SelectQuery!
LinqToDB.Sql.ISqExtensionBuilder.ResultExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.ISqExtensionBuilder.ResultExpression.set -> void
LinqToDB.Sql.ISqlExtension
LinqToDB.Sql.Nulls
LinqToDB.Sql.Nulls.Ignore = 2 -> LinqToDB.Sql.Nulls
LinqToDB.Sql.Nulls.None = 0 -> LinqToDB.Sql.Nulls
LinqToDB.Sql.Nulls.Respect = 1 -> LinqToDB.Sql.Nulls
LinqToDB.Sql.NullsPosition
LinqToDB.Sql.NullsPosition.First = 1 -> LinqToDB.Sql.NullsPosition
LinqToDB.Sql.NullsPosition.Last = 2 -> LinqToDB.Sql.NullsPosition
LinqToDB.Sql.NullsPosition.None = 0 -> LinqToDB.Sql.NullsPosition
LinqToDB.Sql.PropertyAttribute
LinqToDB.Sql.PropertyAttribute.Name.get -> string?
LinqToDB.Sql.PropertyAttribute.Name.set -> void
LinqToDB.Sql.PropertyAttribute.PropertyAttribute() -> void
LinqToDB.Sql.PropertyAttribute.PropertyAttribute(string! configuration, string! name) -> void
LinqToDB.Sql.PropertyAttribute.PropertyAttribute(string! name) -> void
LinqToDB.Sql.QueryExtensionAttribute
LinqToDB.Sql.QueryExtensionAttribute.ExtensionArguments.get -> string![]?
LinqToDB.Sql.QueryExtensionAttribute.ExtensionArguments.set -> void
LinqToDB.Sql.QueryExtensionAttribute.ExtensionBuilderType.get -> System.Type?
LinqToDB.Sql.QueryExtensionAttribute.ExtensionBuilderType.set -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType) -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType, params string![]! extensionArguments) -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(string? configuration, LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType) -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(string? configuration, LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType, params string![]! extensionArguments) -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(string? configuration, LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType, string! extensionArgument) -> void
LinqToDB.Sql.QueryExtensionAttribute.QueryExtensionAttribute(string? configuration, LinqToDB.Sql.QueryExtensionScope scope, System.Type! extensionBuilderType, string! extensionArgument0, string! extensionArgument1) -> void
LinqToDB.Sql.QueryExtensionAttribute.Scope.get -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.IndexHint = 3 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.JoinHint = 4 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.None = 0 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.QueryHint = 6 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.SubQueryHint = 5 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.TableHint = 1 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.TableNameHint = 7 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.QueryExtensionScope.TablesInScopeHint = 2 -> LinqToDB.Sql.QueryExtensionScope
LinqToDB.Sql.SqlExtension
LinqToDB.Sql.SqlExtension.AddParameter(LinqToDB.Sql.SqlExtensionParam! param) -> LinqToDB.Sql.SqlExtensionParam!
LinqToDB.Sql.SqlExtension.AddParameter(string! name, LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression) -> LinqToDB.Sql.SqlExtensionParam!
LinqToDB.Sql.SqlExtension.CanBeNull.get -> bool?
LinqToDB.Sql.SqlExtension.CanBeNull.set -> void
LinqToDB.Sql.SqlExtension.ChainPrecedence.get -> int
LinqToDB.Sql.SqlExtension.ChainPrecedence.set -> void
LinqToDB.Sql.SqlExtension.Expr.get -> string!
LinqToDB.Sql.SqlExtension.Expr.set -> void
LinqToDB.Sql.SqlExtension.Flags.get -> LinqToDB.Internal.SqlQuery.SqlFlags
LinqToDB.Sql.SqlExtension.Flags.set -> void
LinqToDB.Sql.SqlExtension.GetParameters() -> LinqToDB.Sql.SqlExtensionParam![]!
LinqToDB.Sql.SqlExtension.GetParametersByName(string! name) -> System.Collections.Generic.IEnumerable<LinqToDB.Sql.SqlExtensionParam!>!
LinqToDB.Sql.SqlExtension.IsAggregate.get -> bool
LinqToDB.Sql.SqlExtension.IsNullable.get -> LinqToDB.Sql.IsNullableType
LinqToDB.Sql.SqlExtension.IsNullable.set -> void
LinqToDB.Sql.SqlExtension.IsPredicate.get -> bool
LinqToDB.Sql.SqlExtension.IsPure.get -> bool
LinqToDB.Sql.SqlExtension.IsWindowFunction.get -> bool
LinqToDB.Sql.SqlExtension.NamedParameters.get -> System.Collections.Generic.Dictionary<string!, System.Collections.Generic.List<LinqToDB.Sql.SqlExtensionParam!>!>!
LinqToDB.Sql.SqlExtension.Precedence.get -> int
LinqToDB.Sql.SqlExtension.Precedence.set -> void
LinqToDB.Sql.SqlExtension.SqlExtension(System.Type? systemType, string! expr, int precedence, int chainPrecedence, bool isAggregate, bool isWindowFunction, bool isPure, bool isPredicate, LinqToDB.Sql.IsNullableType isNullable, bool? canBeNull, params LinqToDB.Sql.SqlExtensionParam![]! parameters) -> void
LinqToDB.Sql.SqlExtension.SystemType.get -> System.Type?
LinqToDB.Sql.SqlExtension.SystemType.set -> void
LinqToDB.Sql.SqlExtensionParam
LinqToDB.Sql.SqlExtensionParam.Expression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.SqlExtensionParam.Expression.set -> void
LinqToDB.Sql.SqlExtensionParam.Extension.get -> LinqToDB.Sql.SqlExtension?
LinqToDB.Sql.SqlExtensionParam.Extension.set -> void
LinqToDB.Sql.SqlExtensionParam.Name.get -> string?
LinqToDB.Sql.SqlExtensionParam.Name.set -> void
LinqToDB.Sql.SqlExtensionParam.SqlExtensionParam(string? name, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> void
LinqToDB.Sql.SqlExtensionParam.SqlExtensionParam(string? name, LinqToDB.Sql.SqlExtension! extension) -> void
LinqToDB.Sql.SqlExtensionParam.ToDebugString() -> string!
LinqToDB.Sql.SqlID
LinqToDB.Sql.SqlID.Equals(LinqToDB.Sql.SqlID other) -> bool
LinqToDB.Sql.SqlID.ID.get -> string!
LinqToDB.Sql.SqlID.SqlID() -> void
LinqToDB.Sql.SqlID.SqlID(LinqToDB.Sql.SqlIDType type, string! id) -> void
LinqToDB.Sql.SqlID.ToSql(object! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
LinqToDB.Sql.SqlID.Type.get -> LinqToDB.Sql.SqlIDType
LinqToDB.Sql.SqlIDType
LinqToDB.Sql.SqlIDType.TableAlias = 0 -> LinqToDB.Sql.SqlIDType
LinqToDB.Sql.SqlIDType.TableName = 1 -> LinqToDB.Sql.SqlIDType
LinqToDB.Sql.SqlIDType.TableSpec = 2 -> LinqToDB.Sql.SqlIDType
LinqToDB.Sql.SqlQueryExtensionData
LinqToDB.Sql.SqlQueryExtensionData.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.Sql.SqlQueryExtensionData.Name.get -> string!
LinqToDB.Sql.SqlQueryExtensionData.Parameter.get -> System.Reflection.ParameterInfo!
LinqToDB.Sql.SqlQueryExtensionData.ParamsIndex.get -> int
LinqToDB.Sql.SqlQueryExtensionData.SqlExpression.get -> LinqToDB.Internal.SqlQuery.ISqlExpression?
LinqToDB.Sql.SqlQueryExtensionData.SqlExpression.set -> void
LinqToDB.Sql.SqlQueryExtensionData.SqlQueryExtensionData(string! name, System.Linq.Expressions.Expression! expr, System.Reflection.ParameterInfo! parameter, int paramsIndex = -1) -> void
LinqToDB.Sql.SqlQueryExtensionData.ToDebugString() -> string!
LinqToDB.Sql.SqlRow
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value10.get -> T10
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Value9.get -> T9
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Value9.get -> T9
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Value8.get -> T8
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Value7.get -> T7
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Value6.get -> T6
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Value5.get -> T5
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.SqlRow(T1 value1, T2 value2, T3 value3, T4 value4) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Value4.get -> T4
LinqToDB.Sql.SqlRow<T1, T2, T3>
LinqToDB.Sql.SqlRow<T1, T2, T3>.SqlRow(T1 value1, T2 value2, T3 value3) -> void
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1, T2, T3>.Value3.get -> T3
LinqToDB.Sql.SqlRow<T1, T2>
LinqToDB.Sql.SqlRow<T1, T2>.SqlRow(T1 value1, T2 value2) -> void
LinqToDB.Sql.SqlRow<T1, T2>.Value1.get -> T1
LinqToDB.Sql.SqlRow<T1, T2>.Value2.get -> T2
LinqToDB.Sql.SqlRow<T1>
LinqToDB.Sql.SqlRow<T1>.SqlRow(T1 value1) -> void
LinqToDB.Sql.SqlRow<T1>.Value1.get -> T1
LinqToDB.Sql.TableExpressionAttribute
LinqToDB.Sql.TableExpressionAttribute.Expression.get -> string?
LinqToDB.Sql.TableExpressionAttribute.Expression.set -> void
LinqToDB.Sql.TableExpressionAttribute.Name.get -> string?
LinqToDB.Sql.TableExpressionAttribute.TableExpressionAttribute(string! expression) -> void
LinqToDB.Sql.TableExpressionAttribute.TableExpressionAttribute(string! expression, params int[]! argIndices) -> void
LinqToDB.Sql.TableExpressionAttribute.TableExpressionAttribute(string! sqlProvider, string! expression) -> void
LinqToDB.Sql.TableExpressionAttribute.TableExpressionAttribute(string! sqlProvider, string! expression, params int[]! argIndices) -> void
LinqToDB.Sql.TableFunctionAttribute
LinqToDB.Sql.TableFunctionAttribute.ArgIndices.get -> int[]?
LinqToDB.Sql.TableFunctionAttribute.ArgIndices.set -> void
LinqToDB.Sql.TableFunctionAttribute.Database.get -> string?
LinqToDB.Sql.TableFunctionAttribute.Database.set -> void
LinqToDB.Sql.TableFunctionAttribute.Name.get -> string?
LinqToDB.Sql.TableFunctionAttribute.Name.set -> void
LinqToDB.Sql.TableFunctionAttribute.Package.get -> string?
LinqToDB.Sql.TableFunctionAttribute.Package.set -> void
LinqToDB.Sql.TableFunctionAttribute.Schema.get -> string?
LinqToDB.Sql.TableFunctionAttribute.Schema.set -> void
LinqToDB.Sql.TableFunctionAttribute.Server.get -> string?
LinqToDB.Sql.TableFunctionAttribute.Server.set -> void
LinqToDB.Sql.TableFunctionAttribute.TableFunctionAttribute() -> void
LinqToDB.Sql.TableFunctionAttribute.TableFunctionAttribute(string! configuration, string! name) -> void
LinqToDB.Sql.TableFunctionAttribute.TableFunctionAttribute(string! configuration, string! name, params int[]! argIndices) -> void
LinqToDB.Sql.TableFunctionAttribute.TableFunctionAttribute(string! name) -> void
LinqToDB.Sql.TableFunctionAttribute.TableFunctionAttribute(string! name, params int[]! argIndices) -> void
LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.DatabaseName = 2 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.Full = LinqToDB.Sql.TableQualification.TableName | LinqToDB.Sql.TableQualification.DatabaseName | LinqToDB.Sql.TableQualification.SchemaName | LinqToDB.Sql.TableQualification.ServerName | LinqToDB.Sql.TableQualification.TableOptions -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.None = 0 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.SchemaName = 4 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.ServerName = 8 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.TableName = 1 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.TableQualification.TableOptions = 16 -> LinqToDB.Sql.TableQualification
LinqToDB.Sql.Types
LinqToDB.SqlExtensions
LinqToDB.SqlGenerationOptions
LinqToDB.SqlGenerationOptions.InlineParameters.get -> bool?
LinqToDB.SqlGenerationOptions.InlineParameters.set -> void
LinqToDB.SqlGenerationOptions.MultiInsertMode.get -> LinqToDB.SqlQuery.MultiInsertType?
LinqToDB.SqlGenerationOptions.MultiInsertMode.set -> void
LinqToDB.SqlGenerationOptions.SqlGenerationOptions() -> void
LinqToDB.SqlJoinType
LinqToDB.SqlJoinType.Full = 3 -> LinqToDB.SqlJoinType
LinqToDB.SqlJoinType.Inner = 0 -> LinqToDB.SqlJoinType
LinqToDB.SqlJoinType.Left = 1 -> LinqToDB.SqlJoinType
LinqToDB.SqlJoinType.Right = 2 -> LinqToDB.SqlJoinType
LinqToDB.SqlOptions
LinqToDB.SqlOptions.<Clone>$() -> LinqToDB.SqlOptions!
LinqToDB.SqlOptions.Deconstruct(out bool EnableConstantExpressionInOrderBy, out bool GenerateFinalAliases) -> void
LinqToDB.SqlOptions.EnableConstantExpressionInOrderBy.get -> bool
LinqToDB.SqlOptions.EnableConstantExpressionInOrderBy.init -> void
LinqToDB.SqlOptions.Equals(LinqToDB.SqlOptions? other) -> bool
LinqToDB.SqlOptions.GenerateFinalAliases.get -> bool
LinqToDB.SqlOptions.GenerateFinalAliases.init -> void
LinqToDB.SqlOptions.SqlOptions() -> void
LinqToDB.SqlOptions.SqlOptions(bool EnableConstantExpressionInOrderBy = false, bool GenerateFinalAliases = false) -> void
LinqToDB.SqlQuery.DefaultNullable
LinqToDB.SqlQuery.DefaultNullable.None = 0 -> LinqToDB.SqlQuery.DefaultNullable
LinqToDB.SqlQuery.DefaultNullable.NotNull = 2 -> LinqToDB.SqlQuery.DefaultNullable
LinqToDB.SqlQuery.DefaultNullable.Null = 1 -> LinqToDB.SqlQuery.DefaultNullable
LinqToDB.SqlQuery.MultiInsertType
LinqToDB.SqlQuery.MultiInsertType.All = 1 -> LinqToDB.SqlQuery.MultiInsertType
LinqToDB.SqlQuery.MultiInsertType.First = 2 -> LinqToDB.SqlQuery.MultiInsertType
LinqToDB.SqlQuery.MultiInsertType.Unconditional = 0 -> LinqToDB.SqlQuery.MultiInsertType
LinqToDB.SqlQuery.Precedence
LinqToDB.SqlQuery.Precedence.Precedence() -> void
LinqToDB.SqlQuery.SqlDataType
LinqToDB.SqlQuery.SqlDataType.Equals(LinqToDB.SqlQuery.SqlDataType? other) -> bool
LinqToDB.SqlQuery.SqlDataType.IsCharDataType.get -> bool
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType, int? length) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType, System.Type! type) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType, System.Type! type, int length) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType, System.Type! type, int precision, int scale) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DataType dataType, System.Type! type, string! dbType) -> void
LinqToDB.SqlQuery.SqlDataType.SqlDataType(LinqToDB.DbDataType dataType) -> void
LinqToDB.SqlQuery.SqlDataType.Type.get -> LinqToDB.DbDataType
LinqToDB.SqlQuery.SqlObjectName
LinqToDB.SqlQuery.SqlObjectName.Database.get -> string?
LinqToDB.SqlQuery.SqlObjectName.Database.init -> void
LinqToDB.SqlQuery.SqlObjectName.Deconstruct(out string! Name, out string? Server, out string? Database, out string? Schema, out string? Package) -> void
LinqToDB.SqlQuery.SqlObjectName.Equals(LinqToDB.SqlQuery.SqlObjectName other) -> bool
LinqToDB.SqlQuery.SqlObjectName.Name.get -> string!
LinqToDB.SqlQuery.SqlObjectName.Name.init -> void
LinqToDB.SqlQuery.SqlObjectName.Package.get -> string?
LinqToDB.SqlQuery.SqlObjectName.Package.init -> void
LinqToDB.SqlQuery.SqlObjectName.Schema.get -> string?
LinqToDB.SqlQuery.SqlObjectName.Schema.init -> void
LinqToDB.SqlQuery.SqlObjectName.Server.get -> string?
LinqToDB.SqlQuery.SqlObjectName.Server.init -> void
LinqToDB.SqlQuery.SqlObjectName.SqlObjectName() -> void
LinqToDB.SqlQuery.SqlObjectName.SqlObjectName(string! Name, string? Server = null, string? Database = null, string? Schema = null, string? Package = null) -> void
LinqToDB.StringAggregateExtensions
LinqToDB.TableExtensions
LinqToDB.TableOptions
LinqToDB.TableOptions.CheckExistence = LinqToDB.TableOptions.CreateIfNotExists | LinqToDB.TableOptions.DropIfExists -> LinqToDB.TableOptions
LinqToDB.TableOptions.CreateIfNotExists = 2 -> LinqToDB.TableOptions
LinqToDB.TableOptions.DropIfExists = 4 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsGlobalTemporaryData = 128 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsGlobalTemporaryStructure = 32 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsLocalTemporaryData = 64 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsLocalTemporaryStructure = 16 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsTemporary = 8 -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsTemporaryOptionSet = LinqToDB.TableOptions.IsTemporary | LinqToDB.TableOptions.IsLocalTemporaryStructure | LinqToDB.TableOptions.IsGlobalTemporaryStructure | LinqToDB.TableOptions.IsLocalTemporaryData | LinqToDB.TableOptions.IsGlobalTemporaryData | LinqToDB.TableOptions.IsTransactionTemporaryData -> LinqToDB.TableOptions
LinqToDB.TableOptions.IsTransactionTemporaryData = 256 -> LinqToDB.TableOptions
LinqToDB.TableOptions.None = 1 -> LinqToDB.TableOptions
LinqToDB.TableOptions.NotSet = 0 -> LinqToDB.TableOptions
LinqToDB.TakeHints
LinqToDB.TakeHints.Percent = 1 -> LinqToDB.TakeHints
LinqToDB.TakeHints.WithTies = 2 -> LinqToDB.TakeHints
LinqToDB.TempTable<T>
LinqToDB.TempTable<T>.Copy(System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null) -> long
LinqToDB.TempTable<T>.CopyAsync(System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
LinqToDB.TempTable<T>.DatabaseName.get -> string?
LinqToDB.TempTable<T>.DataContext.get -> LinqToDB.IDataContext!
LinqToDB.TempTable<T>.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.TempTable<T>.Insert(System.Linq.IQueryable<T>! items) -> long
LinqToDB.TempTable<T>.InsertAsync(System.Linq.IQueryable<T>! items, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
LinqToDB.TempTable<T>.SchemaName.get -> string?
LinqToDB.TempTable<T>.ServerName.get -> string?
LinqToDB.TempTable<T>.TableID.get -> string?
LinqToDB.TempTable<T>.TableName.get -> string!
LinqToDB.TempTable<T>.TableOptions.get -> LinqToDB.TableOptions
LinqToDB.TempTable<T>.TempTable(LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
LinqToDB.TempTable<T>.TempTable(LinqToDB.IDataContext! db, string? tableName, System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
LinqToDB.TempTable<T>.TempTable(LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T>! items, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
LinqToDB.TempTable<T>.TempTable(LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
LinqToDB.TempTable<T>.TempTable(LinqToDB.IDataContext! db, System.Linq.IQueryable<T>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
LinqToDB.TempTable<T>.TotalCopied -> long
LinqToDB.Tools.DataExtensions
LinqToDB.UpdateColumnFilter<T>
LinqToDB.UpdateOutput<T>
LinqToDB.UpdateOutput<T>.Deleted.get -> T
LinqToDB.UpdateOutput<T>.Deleted.set -> void
LinqToDB.UpdateOutput<T>.Inserted.get -> T
LinqToDB.UpdateOutput<T>.Inserted.set -> void
LinqToDB.UpdateOutput<T>.UpdateOutput() -> void
override LinqToDB.Data.BulkCopyOptions.Equals(object? obj) -> bool
override LinqToDB.Data.BulkCopyOptions.GetHashCode() -> int
override LinqToDB.Data.BulkCopyOptions.ToString() -> string!
override LinqToDB.Data.ConnectionOptions.Equals(object? obj) -> bool
override LinqToDB.Data.ConnectionOptions.GetHashCode() -> int
override LinqToDB.Data.ConnectionOptions.ToString() -> string!
override LinqToDB.Data.QueryTraceOptions.Equals(object? obj) -> bool
override LinqToDB.Data.QueryTraceOptions.GetHashCode() -> int
override LinqToDB.Data.QueryTraceOptions.ToString() -> string!
override LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Equals(object? obj) -> bool
override LinqToDB.Data.RetryPolicy.RetryPolicyOptions.GetHashCode() -> int
override LinqToDB.Data.RetryPolicy.RetryPolicyOptions.ToString() -> string!
override LinqToDB.DataContextOptions.Equals(object? obj) -> bool
override LinqToDB.DataContextOptions.GetHashCode() -> int
override LinqToDB.DataContextOptions.ToString() -> string!
override LinqToDB.DataOptions.Equals(object? obj) -> bool
override LinqToDB.DataOptions.Find<TSet>() -> TSet?
override LinqToDB.DataOptions.GetHashCode() -> int
override LinqToDB.DataOptions.OptionSets.get -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.Options.IOptionSet!>!
override LinqToDB.DataOptions.WithOptions(LinqToDB.Internal.Options.IOptionSet! options) -> LinqToDB.DataOptions!
override LinqToDB.DataProvider.Access.AccessOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.Access.AccessOptions.GetHashCode() -> int
override LinqToDB.DataProvider.Access.AccessOptions.ToString() -> string!
override LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.GetHashCode() -> int
override LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.ToString() -> string!
override LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.GetNextDelay(System.Exception! lastException) -> System.TimeSpan?
override LinqToDB.DataProvider.ClickHouse.ClickHouseRetryPolicy.ShouldRetryOn(System.Exception! exception) -> bool
override LinqToDB.DataProvider.DB2.DB2Options.Equals(object? obj) -> bool
override LinqToDB.DataProvider.DB2.DB2Options.GetHashCode() -> int
override LinqToDB.DataProvider.DB2.DB2Options.ToString() -> string!
override LinqToDB.DataProvider.Firebird.FirebirdOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.Firebird.FirebirdOptions.GetHashCode() -> int
override LinqToDB.DataProvider.Firebird.FirebirdOptions.ToString() -> string!
override LinqToDB.DataProvider.Informix.InformixOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.Informix.InformixOptions.GetHashCode() -> int
override LinqToDB.DataProvider.Informix.InformixOptions.ToString() -> string!
override LinqToDB.DataProvider.MySql.MySqlOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.MySql.MySqlOptions.GetHashCode() -> int
override LinqToDB.DataProvider.MySql.MySqlOptions.ToString() -> string!
override LinqToDB.DataProvider.Oracle.OracleOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.Oracle.OracleOptions.GetHashCode() -> int
override LinqToDB.DataProvider.Oracle.OracleOptions.ToString() -> string!
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.GetHashCode() -> int
override LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.ToString() -> string!
override LinqToDB.DataProvider.SapHana.CalculationViewInputParametersExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
override LinqToDB.DataProvider.SapHana.SapHanaOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.SapHana.SapHanaOptions.GetHashCode() -> int
override LinqToDB.DataProvider.SapHana.SapHanaOptions.ToString() -> string!
override LinqToDB.DataProvider.SqlCe.SqlCeOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.SqlCe.SqlCeOptions.GetHashCode() -> int
override LinqToDB.DataProvider.SqlCe.SqlCeOptions.ToString() -> string!
override LinqToDB.DataProvider.SQLite.SQLiteOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.SQLite.SQLiteOptions.GetHashCode() -> int
override LinqToDB.DataProvider.SQLite.SQLiteOptions.ToString() -> string!
override LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Equals(object? obj) -> bool
override LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.GetHashCode() -> int
override LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.ToString() -> string!
override LinqToDB.DataProvider.SqlServer.SqlServerOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.SqlServer.SqlServerOptions.GetHashCode() -> int
override LinqToDB.DataProvider.SqlServer.SqlServerOptions.ToString() -> string!
override LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.GetNextDelay(System.Exception! lastException) -> System.TimeSpan?
override LinqToDB.DataProvider.SqlServer.SqlServerRetryPolicy.ShouldRetryOn(System.Exception! exception) -> bool
override LinqToDB.DataProvider.SqlServer.SqlType.ToString() -> string!
override LinqToDB.DataProvider.Sybase.SybaseOptions.Equals(object? obj) -> bool
override LinqToDB.DataProvider.Sybase.SybaseOptions.GetHashCode() -> int
override LinqToDB.DataProvider.Sybase.SybaseOptions.ToString() -> string!
override LinqToDB.DbDataType.Equals(object? obj) -> bool
override LinqToDB.DbDataType.GetHashCode() -> int
override LinqToDB.DbDataType.ToString() -> string!
override LinqToDB.ExpressionMethodAttribute.GetObjectID() -> string!
override LinqToDB.Expressions.MemberHelper.MemberInfoWithType.Equals(object? obj) -> bool
override LinqToDB.Expressions.MemberHelper.MemberInfoWithType.GetHashCode() -> int
override LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor.ConnectionOpened(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
override LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor.ConnectionOpenedAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor.ConnectionOpening(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
override LinqToDB.Interceptors.ConnectionOptionsConnectionInterceptor.ConnectionOpeningAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
override LinqToDB.Internal.Common.SqlTextWriter.ToString() -> string!
override LinqToDB.Internal.Common.ValueComparer<T>.Equals(object? x, object? y) -> bool
override LinqToDB.Internal.Common.ValueComparer<T>.GetHashCode(object? obj) -> int
override LinqToDB.Internal.Common.ValueComparer<T>.Type.get -> System.Type!
override LinqToDB.Internal.DataProvider.Access.AccessBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.Access.AccessBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.Access.AccessDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.Access.AccessODBCSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.BuildValue(LinqToDB.DbDataType? dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Access.AccessODBCSqlBuilder.TryConvertParameterToSql(LinqToDB.Internal.SqlQuery.SqlParameterValue! paramValue) -> bool
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetProcedureSchemaExecutesProcedure.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessOleDbSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.CreateConnection(LinqToDB.DataProvider.Access.AccessProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.Access.AccessVersion?
override LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.Access.AccessProvider provider, LinqToDB.DataProvider.Access.AccessVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.Access.AccessSchemaProviderBase.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! expr) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildColumnExpression(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias, ref bool addAlias) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildCreateTableIdentityAttribute2(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! caseExpression) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildSqlComment(System.Text.StringBuilder! sb, LinqToDB.Internal.SqlQuery.SqlComment! comment) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! conditionExpression) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildSubQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildUpdateClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.BuildValue(LinqToDB.DbDataType? dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.IsNestedJoinSupported.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.ParenthesizeJoin(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlJoinedTable!>! joins) -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.StartStatementQueryExtensions(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.TryConvertParameterToSql(LinqToDB.Internal.SqlQuery.SqlParameterValue! paramValue) -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlBuilderBase.WrapJoinCondition.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.EscapeLikeCharacters(LinqToDB.Internal.SqlQuery.ISqlExpression! expression, ref LinqToDB.Internal.SqlQuery.ISqlExpression? escape) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.EscapeLikePattern(string! str) -> string!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.Access.AccessSqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
override LinqToDB.Internal.DataProvider.Access.AccessSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Access.AccessSqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Access.AccessSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator.AccessJetStringMemberTranslator.TranslateReplace(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! oldValue, LinqToDB.Internal.SqlQuery.ISqlExpression! newValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessJetMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.MathMemberTranslator.TranslatePow(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.MathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Access.Translation.AccessMemberTranslator.StringMemberTranslator.TranslateLPad(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression! paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.BulkCopyReader.Close() -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Depth.get -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.FieldCount.get -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetBoolean(int ordinal) -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetByte(int ordinal) -> byte
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetBytes(int ordinal, long dataOffset, byte[]? buffer, int bufferOffset, int length) -> long
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetChar(int ordinal) -> char
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetChars(int ordinal, long dataOffset, char[]? buffer, int bufferOffset, int length) -> long
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetDataTypeName(int ordinal) -> string!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetDateTime(int ordinal) -> System.DateTime
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetDecimal(int ordinal) -> decimal
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetDouble(int ordinal) -> double
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetEnumerator() -> System.Collections.IEnumerator!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetFieldType(int ordinal) -> System.Type!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetFloat(int ordinal) -> float
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetGuid(int ordinal) -> System.Guid
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetInt16(int ordinal) -> short
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetInt32(int ordinal) -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetInt64(int ordinal) -> long
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetName(int ordinal) -> string!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetOrdinal(string! name) -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetSchemaTable() -> System.Data.DataTable!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetString(int ordinal) -> string!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetValue(int ordinal) -> object!
override LinqToDB.Internal.DataProvider.BulkCopyReader.GetValues(object?[]! values) -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.HasRows.get -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.IsClosed.get -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.IsDBNull(int ordinal) -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.NextResult() -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.DbType.get -> System.Data.DbType
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.DbType.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Direction.get -> System.Data.ParameterDirection
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Direction.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.IsNullable.get -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.IsNullable.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.ParameterName.get -> string!
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.ParameterName.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.ResetDbType() -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Size.get -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Size.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceColumn.get -> string!
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceColumn.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceColumnNullMapping.get -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceColumnNullMapping.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceVersion.get -> System.Data.DataRowVersion
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.SourceVersion.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Value.get -> object?
override LinqToDB.Internal.DataProvider.BulkCopyReader.Parameter.Value.set -> void
override LinqToDB.Internal.DataProvider.BulkCopyReader.Read() -> bool
override LinqToDB.Internal.DataProvider.BulkCopyReader.ReadAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<bool>!
override LinqToDB.Internal.DataProvider.BulkCopyReader.RecordsAffected.get -> int
override LinqToDB.Internal.DataProvider.BulkCopyReader.this[int i].get -> object!
override LinqToDB.Internal.DataProvider.BulkCopyReader.this[string! name].get -> object!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector.CreateConnection(LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider, LinqToDB.Internal.DataProvider.ProviderDetectorBase<LinqToDB.DataProvider.ClickHouse.ClickHouseProvider>.NoDialect version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDataSourceName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDataType(string? typeName, LinqToDB.DataType? dataType, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> LinqToDB.Internal.SchemaProvider.DataTypeInfo?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildAlterDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildColumnExpression(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias, ref bool addAlias) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildCreateTableNullAttribute(LinqToDB.Internal.SqlQuery.SqlField! field, LinqToDB.SqlQuery.DefaultNullable defaultNullable) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildCteBody(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildDeleteFromClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildDeleteQuery(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildFieldTableAlias(LinqToDB.Internal.SqlQuery.SqlField! field) -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildFromExtensions(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildInsertQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildOffsetLimit(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildSetOperation(LinqToDB.Internal.SqlQuery.SetOperation operation, System.Text.StringBuilder! sb) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildUpdateQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildUpdateTableName(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.BuildUpdateWhereClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.CanSkipRootAliases(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.IsCteColumnListSupported.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.IsRecursiveCteKeywordRequired.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.MergeSqlBuilderData(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! sqlBuilder) -> void
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.UpdateKeyword.get -> string!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlBuilder.UpdateSetKeyword.get -> string!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeEscapeCharacter.get -> string!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer.FinalizeStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseSqlOptimizer.FinalizeUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.MathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.ClickHouse.Translation.ClickHouseMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DataProviderOptions<T>.Equals(object? obj) -> bool
override LinqToDB.Internal.DataProvider.DataProviderOptions<T>.GetHashCode() -> int
override LinqToDB.Internal.DataProvider.DataProviderOptions<T>.ToString() -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2BulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2DataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetDataSourceName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSchemaProvider.InitProvider(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.GetPhysicalTableName(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, bool ignoreTableExpression = false, string? defaultDatabaseName = null, bool withoutSuffix = false) -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2LUWSqlBuilder.Version.get -> LinqToDB.DataProvider.DB2.DB2Version
override LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.CreateConnection(LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.Provider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.DB2.DB2Version?
override LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.Internal.DataProvider.DB2.DB2ProviderDetector.Provider provider, LinqToDB.DataProvider.DB2.DB2Version version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildCreateTableIdentityAttribute1(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildCreateTableNullAttribute(LinqToDB.Internal.SqlQuery.SqlField! field, LinqToDB.SqlQuery.DefaultNullable defaultNullable) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildEmptyInsert(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildSql(int commandNumber, LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, int indent, bool skipAlias, LinqToDB.Internal.SqlQuery.NullabilityContext? nullabilityContext) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.BuildTruncateTableStatement(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.CteFirst.get -> bool
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.OffsetFirst.get -> bool
override LinqToDB.Internal.DataProvider.DB2.DB2SqlBuilderBase.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.Internal.DataProvider.DB2.DB2SqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlOptimizer.FinalizeStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.DB2.DB2SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.DB2.DB2zOSSqlBuilder.Version.get -> LinqToDB.DataProvider.DB2.DB2Version
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.DB2MathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertDefaultChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertDefaultNChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertDefaultNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DB2.Translation.DB2MemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.ConnectionNamespace.get -> string?
override LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.CreateConnectionInternal(string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.DataReaderType.get -> System.Type!
override LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.TransactionsSupported.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.BuildSkipFirst(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.OffsetFirst.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.ConvertCastToPredicate(LinqToDB.Internal.SqlQuery.SqlCastExpression! castExpression) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlExpressionConvertVisitor.GetCaseSensitiveParameter(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> bool?
override LinqToDB.Internal.DataProvider.Firebird.Firebird3SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Firebird.Firebird4SqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Firebird.Firebird4SqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.Firebird.Firebird4SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.CastAllRowsParametersOnUnionAll.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.CastFirstRowLiteralOnUnionAll.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.CastFirstRowParametersOnUnionAll.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.CastLiteral(LinqToDB.Mapping.ColumnDescriptor! column) -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MaxMultipleRows.get -> int?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.CreateIdentifierService() -> LinqToDB.Internal.DataProvider.IIdentifierService!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.CreateConnection(LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.Provider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.Firebird.FirebirdVersion?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.Internal.DataProvider.Firebird.FirebirdProviderDetector.Provider provider, LinqToDB.DataProvider.Firebird.FirebirdVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSchemaProvider.LoadProcedureTableSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options, LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText, System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>! tables) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildCreateTableNullAttribute(LinqToDB.Internal.SqlQuery.SqlField! field, LinqToDB.SqlQuery.DefaultNullable defaultNullable) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildDeleteQuery(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildOffsetLimit(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildSkipFirst(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.CteFirst.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.FakeTable.get -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.GetIdentityExpression(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.GetPhysicalTableName(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, bool ignoreTableExpression = false, string? defaultDatabaseName = null, bool withoutSuffix = false) -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.IsRecursiveCteKeywordRequired.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.SkipFirst.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.SkipFormat.get -> string!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeValueParameterSupport.get -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.VisitExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.FinalizeStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.IsParameterDependedElement(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
override LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.Translation.Firebird5MemberTranslator.Firebird5DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.FirebirdDateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Firebird.Translation.FirebirdMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.IdentifierServiceSimple.IsFit(LinqToDB.Internal.DataProvider.IdentifierKind identifierKind, string! identifier, out int? sizeDecrement) -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> LinqToDB.Internal.DataProvider.IExecutionScope!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector.CreateConnection(LinqToDB.DataProvider.Informix.InformixProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.Informix.InformixProvider provider, LinqToDB.Internal.DataProvider.ProviderDetectorBase<LinqToDB.DataProvider.Informix.InformixProvider>.NoDialect version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.Informix.InformixSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildCreateTableFieldType(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildMergeInto(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildSql(int commandNumber, LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, int indent, bool skipAlias, LinqToDB.Internal.SqlQuery.NullabilityContext? nullabilityContext) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildSqlRow(LinqToDB.Internal.SqlQuery.SqlRowExpression! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.FakeTable.get -> string!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.IsReserved(string! word) -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlBuilder.SkipFormat.get -> string!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertCaseItem(LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem! newElement) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertIsDistinctPredicateAsIntersect(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlCondition(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.VisitExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.VisitInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.VisitInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.VisitSqlSetExpression(LinqToDB.Internal.SqlQuery.SqlSetExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.FinalizeStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.FixSetOperationValues(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.IsParameterDependedElement(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
override LinqToDB.Internal.DataProvider.Informix.InformixSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation.ConvertBit(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Informix.Translation.InformixMemberTranslator.SqlTypesTranslation.ConvertTinyInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.MySql57SqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.MySql.MySql57SqlBuilder.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.MySql.MySql57SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySql80SqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.MySql.MySql80SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySql80SqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.CreateConnection(LinqToDB.DataProvider.MySql.MySqlProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.MySql.MySqlVersion?
override LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.MySql.MySqlProvider provider, LinqToDB.DataProvider.MySql.MySqlVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.BuildProcedureParameter(LinqToDB.SchemaProvider.ParameterSchema! p) -> LinqToDB.Data.DataParameter!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.ForeignKeyColumnComparison(string! column) -> System.StringComparison
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProcedureSchemaExecutesProcedure.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.MySql.MySqlSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildCreateTableIdentityAttribute1(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildEmptyInsert(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool buildTableName, bool checkParentheses, string? alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildFromClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildGroupByBody(LinqToDB.Internal.SqlQuery.GroupingType groupingType, System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>! items) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildInsertQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildOffsetLimit(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildSql() -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildSubQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.BuildUpdateClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.CanSkipRootAliases(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.FinalizeBuildQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.IsNestedJoinParenthesisRequired.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.IsRecursiveCteKeywordRequired.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.StartStatementQueryExtensions(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.MySql.MySqlSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertBit(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertDefaultChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertDefaultNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertFloat(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertReal(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertTinyInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.SqlTypesTranslation.ConvertVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.MySql.Translation.MySqlMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Oracle11ParametersNormalizer.MaxLength.get -> int
override LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlBuilder.GetPhysicalTableName(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, bool ignoreTableExpression = false, string? defaultDatabaseName = null, bool withoutSuffix = false) -> string!
override LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer.IsParameterDependedElement(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
override LinqToDB.Internal.DataProvider.Oracle.Oracle11SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Oracle.Oracle122ParametersNormalizer.IsReserved(string! name) -> bool
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.CanSkipRootAliases(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.OffsetFirst.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlBuilder.ShouldBuildWhere(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, out LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Oracle.Oracle12SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.ClearCommandParameters(System.Data.Common.DbCommand! command) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.ConvertParameterType(System.Type! type, LinqToDB.DbDataType dataType) -> System.Type!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.CreateIdentifierService() -> LinqToDB.Internal.DataProvider.IIdentifierService!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.Oracle.OracleMappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector.CreateConnection(LinqToDB.DataProvider.Oracle.OracleProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.Oracle.OracleVersion?
override LinqToDB.Internal.DataProvider.Oracle.OracleProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.Oracle.OracleProvider provider, LinqToDB.DataProvider.Oracle.OracleVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetDataSourceName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProcedureSchemaExecutesProcedure.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.Oracle.OracleSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildDeleteQuery(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildEmptyInsert(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool buildTableName, bool checkParentheses, string? alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! expr) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMergeInto(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMergeOperationInsert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMergeOperationUpdate(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMergeOperationUpdateWithDelete(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildMultiInsertQuery(LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement! statement) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildObjectNameSuffix(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, bool escape) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildSetOperation(LinqToDB.Internal.SqlQuery.SetOperation operation, System.Text.StringBuilder! sb) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.CteFirst.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.FakeTable.get -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.FakeTableSchema.get -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.FinalizeBuildQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.GetIdentityExpression(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.GetReserveSequenceValuesSql(int count, string! sequenceName) -> string!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.IsEmptyValuesSourceSupported.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.ShouldBuildWhere(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, out LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.StartStatementQueryExtensions(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlExpression(LinqToDB.Internal.SqlQuery.SqlExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.OracleMathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.SqlTypesTranslation.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Oracle.Translation.OracleMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.NormalizeTypeName(string? typeName) -> string?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.CreateConnection(LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.Provider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLProviderDetector.Provider provider, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetDataType(string? typeName, LinqToDB.DataType? dataType, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> LinqToDB.Internal.SchemaProvider.DataTypeInfo?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSql15Builder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSql15Builder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildCreateTableFieldType(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildSql() -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildSubQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildTruncateTableStatement(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.GetIdentityExpression(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.GetReserveSequenceValuesSql(int count, string! sequenceName) -> string!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.IsRecursiveCteKeywordRequired.get -> bool
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.VisitExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.MathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertDefaultNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.PostgreSQL.Translation.PostgreSQLMemberTranslator.SqlTypesTranslation.ConvertTinyInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider>.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider>.NoDialect?
override LinqToDB.Internal.DataProvider.ReaderInfo.GetHashCode() -> int
override LinqToDB.Internal.DataProvider.SapHana.SapHanaBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.ConvertParameterType(System.Type! type, LinqToDB.DbDataType dataType) -> System.Type!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> LinqToDB.Internal.DataProvider.IExecutionScope?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaOdbcSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.SapHana.SapHanaProvider provider, LinqToDB.Internal.DataProvider.ProviderDetectorBase<LinqToDB.DataProvider.SapHana.SapHanaProvider>.NoDialect version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProcedureSchemaExecutesProcedure.get -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProviderSpecificTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSchemaProvider.LoadProcedureTableSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options, LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText, System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>! tables) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildCreateTableIdentityAttribute1(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildFromClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.FakeTable.get -> string!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.IsNestedJoinParenthesisRequired.get -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SapHana.SapHanaSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SapHanaMathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertBit(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.SqlTypesTranslation.ConvertTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SapHana.Translation.SapHanaMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildCreateTableIdentityAttribute2(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.CanSkipRootAliases(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.OffsetFirst.get -> bool
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.RequiresConstantColumnAliases.get -> bool
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer.FinalizeUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer.FixEmptySelect(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.SqlCe.SqlCeSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlCeMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.SqlTypesTranslation.ConvertVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.StringMemberTranslator.TranslateLPad(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression! paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.NormalizeTypeName(string? typeName) -> string?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector.CreateConnection(LinqToDB.DataProvider.SQLite.SQLiteProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.SQLite.SQLiteProvider provider, LinqToDB.Internal.DataProvider.ProviderDetectorBase<LinqToDB.DataProvider.SQLite.SQLiteProvider>.NoDialect version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildCreateTableIdentityAttribute2(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildSqlValuesTable(LinqToDB.Internal.SqlQuery.SqlValuesTable! valuesTable, string! alias, out bool aliasBuilt) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildUpdateQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.BuildUpdateTableName(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.IsNestedJoinParenthesisRequired.get -> bool
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlOptimizer.RequiresCastingParametersForSetOperations.get -> bool
override LinqToDB.Internal.DataProvider.SQLite.SQLiteSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SQLite.Translation.SQLiteMemberTranslator.StringMemberTranslator.TranslateLPad(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression! paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildMergeInto(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.BuildMergeTerminator(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlExpressionConvertVisitor.ProcessConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast, out LinqToDB.Internal.SqlQuery.ISqlExpression! result) -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2008SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildMergeInto(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildMergeTerminator(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.BuildSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! conditionExpression) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.OffsetFirst.get -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2012SqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2014SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2016SqlBuilder.TryConvertParameterToSql(LinqToDB.Internal.SqlQuery.SqlParameterValue! paramValue) -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2017SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2019SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServer2022SqlBuilder.Name.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.GetConnectionInfo(LinqToDB.Data.DataConnection! dataConnection, string! parameterName) -> object?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2005MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2008MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2012MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2014MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2016MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2017MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2019MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2022MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.SqlServer2025MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerMappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.CreateConnection(LinqToDB.DataProvider.SqlServer.SqlServerProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.DetectServerVersion(System.Data.Common.DbConnection! connection) -> LinqToDB.DataProvider.SqlServer.SqlServerVersion?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider, LinqToDB.DataProvider.SqlServer.SqlServerVersion version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.BuildProcedureParameter(LinqToDB.SchemaProvider.ParameterSchema! p) -> LinqToDB.Data.DataParameter!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetProviderSpecificType(string? dataType) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetProviderSpecificTypeNamespace() -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSchemaProvider.InitProvider(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildCreateTableIdentityAttribute2(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildInsertQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildOutputSubclause(LinqToDB.Internal.SqlQuery.SqlOutputClause? output) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildOutputSubclause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildTableNameExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildUpdateClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.BuildUpdateTableName(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.DeletedOutputTable.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.GetTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.GetUdtTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.InsertedOutputTable.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlBuilder.OutputKeyword.get -> string!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.FinalizeUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.DateFunctionsTranslator2005.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2005MemberTranslator.SqlTypes2005Translation.ConvertDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2012MemberTranslator.SqlServer2012DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServer2022MemberTranslator.SqlServer2022MathMemberTranslator.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.StringMemberTranslator.TranslateLPad(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression! paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.MaxParameters.get -> int
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.MaxSqlLength.get -> int
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.ConvertParameterType(System.Type! type, LinqToDB.DbDataType dataType) -> System.Type!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.CreateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.CreateSqlBuilder(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.GetSchemaProvider() -> LinqToDB.SchemaProvider.ISchemaProvider!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.GetSqlOptimizer(LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlProvider.ISqlOptimizer!
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseDataProvider.SupportedTableOptions.get -> LinqToDB.TableOptions
override LinqToDB.Internal.DataProvider.Sybase.SybaseParametersNormalizer.MaxLength.get -> int
override LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector.CreateConnection(LinqToDB.DataProvider.Sybase.SybaseProvider provider, string! connectionString) -> System.Data.Common.DbConnection!
override LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector.DetectProvider(LinqToDB.Data.ConnectionOptions! options) -> LinqToDB.DataProvider.IDataProvider?
override LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector.GetDataProvider(LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.Sybase.SybaseProvider provider, LinqToDB.Internal.DataProvider.ProviderDetectorBase<LinqToDB.DataProvider.Sybase.SybaseProvider>.NoDialect version) -> LinqToDB.DataProvider.IDataProvider!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetColumns(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ColumnInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetDataType(string? dataType, string? columnType, int? length, int? precision, int? scale) -> LinqToDB.DataType
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetForeignKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.ForeignKeyInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetPrimaryKeys(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.SchemaProvider.TableSchema!>! tables, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SchemaProvider.PrimaryKeyInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetProviderSpecificTypeNamespace() -> string?
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.GetTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableInfo!>!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSchemaProvider.InitProvider(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildColumnExpression(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias, ref bool addAlias) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildCreateTableIdentityAttribute1(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildCreateTableNullAttribute(LinqToDB.Internal.SqlQuery.SqlField! field, LinqToDB.SqlQuery.DefaultNullable defaultNullable) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildEmptyInsert(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildMergeTerminator(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.BuildUpdateTableName(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.CreateSqlBuilder() -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.IsValuesSyntaxSupported.get -> bool
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlBuilder.SupportsColumnAliasesInSource.get -> bool
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.VisitExistsPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlOptimizer.FinalizeUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Sybase.SybaseSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateDateMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.GuidMemberTranslator.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SqlTypesTranslation.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SqlTypesTranslation.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.SybaseMathMemberTranslator.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
override LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateOverrideHandler(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Equals(object? obj) -> bool
override LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.GetHashCode() -> int
override LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.ToString() -> string!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlCastExpression(LinqToDB.Internal.SqlQuery.SqlCastExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlCoalesceExpression(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlInsertClause(LinqToDB.Internal.SqlQuery.SqlInsertClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlMergeOperationClause(LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlOutputClause(LinqToDB.Internal.SqlQuery.SqlOutputClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlParameter(LinqToDB.Internal.SqlQuery.SqlParameter! sqlParameter) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlSelectClause(LinqToDB.Internal.SqlQuery.SqlSelectClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.DataProvider.WrapParametersVisitor.VisitSqlSetExpression(LinqToDB.Internal.SqlQuery.SqlSetExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.Expressions.ChangeTypeExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.ChangeTypeExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.ChangeTypeExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.ChangeTypeExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.ChangeTypeExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.ConstantPlaceholderExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.DefaultValueExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.DefaultValueExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.DefaultValueExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.DefaultValueExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.DefaultValueExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.DefaultValueExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.DefaultValueExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.ExpressionPrinter.ToString() -> string!
override LinqToDB.Internal.Expressions.ExpressionPrinter.Visit(System.Linq.Expressions.Expression? expression) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.Expressions.ExpressionVisitorBase.Visit(System.Linq.Expressions.Expression? node) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.Expressions.MarkerExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.MarkerExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.MarkerExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.MarkerExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.MarkerExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlErrorExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.SqlErrorExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlErrorExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.SqlErrorExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlErrorExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlPathExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.SqlPathExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.SqlPathExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.SqlPathExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlPathExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlPathExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.SqlPlaceholderExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.SqlPlaceholderExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlPlaceholderExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlPlaceholderExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.Accept(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.GetHashCode() -> int
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.Type.get -> System.Type!
override LinqToDB.Internal.Expressions.SqlQueryRootExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor! visitor) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.TagExpression.CanReduce.get -> bool
override LinqToDB.Internal.Expressions.TagExpression.NodeType.get -> System.Linq.Expressions.ExpressionType
override LinqToDB.Internal.Expressions.TagExpression.Reduce() -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Expressions.TagExpression.ToString() -> string!
override LinqToDB.Internal.Expressions.TagExpression.Type.get -> System.Type!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.Cleanup() -> void
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.Visit(System.Linq.Expressions.Expression? node) -> System.Linq.Expressions.Expression?
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitDefault(System.Linq.Expressions.DefaultExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitExtension(System.Linq.Expressions.Expression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitLambda<T>(System.Linq.Expressions.Expression<T>! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitMethodCall(System.Linq.Expressions.MethodCallExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitParameter(System.Linq.Expressions.ParameterExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlGenericConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlPlaceholderExpression(LinqToDB.Internal.Expressions.SqlPlaceholderExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Linq.Builder.Visitors.CanBeEvaluatedOnClientCheckVisitorBase.VisitSqlQueryRootExpression(LinqToDB.Internal.Expressions.SqlQueryRootExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.Attributes.get -> System.Reflection.PropertyAttributes
override LinqToDB.Internal.Mapping.DynamicColumnInfo.CanRead.get -> bool
override LinqToDB.Internal.Mapping.DynamicColumnInfo.CanWrite.get -> bool
override LinqToDB.Internal.Mapping.DynamicColumnInfo.DeclaringType.get -> System.Type!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.Equals(object? obj) -> bool
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetAccessors(bool nonPublic) -> System.Reflection.MethodInfo![]!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetCustomAttributes(bool inherit) -> object![]!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetCustomAttributes(System.Type! attributeType, bool inherit) -> object![]!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetCustomAttributesData() -> System.Collections.Generic.IList<System.Reflection.CustomAttributeData!>!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetGetMethod(bool nonPublic) -> System.Reflection.MethodInfo!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetHashCode() -> int
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetIndexParameters() -> System.Reflection.ParameterInfo![]!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetSetMethod(bool nonPublic) -> System.Reflection.MethodInfo!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.GetValue(object? obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder? binder, object?[]? index, System.Globalization.CultureInfo? culture) -> object!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.IsDefined(System.Type! attributeType, bool inherit) -> bool
override LinqToDB.Internal.Mapping.DynamicColumnInfo.Name.get -> string!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.PropertyType.get -> System.Type!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.ReflectedType.get -> System.Type!
override LinqToDB.Internal.Mapping.DynamicColumnInfo.SetValue(object? obj, object? value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder? binder, object?[]? index, System.Globalization.CultureInfo? culture) -> void
override LinqToDB.Internal.Mapping.LockedMappingSchema.GenerateID() -> int
override LinqToDB.Internal.Mapping.LockedMappingSchema.IsLockable.get -> bool
override LinqToDB.Internal.Mapping.LockedMappingSchema.IsLocked.get -> bool
override LinqToDB.Internal.Mapping.VirtualPropertyInfoBase.MetadataToken.get -> int
override LinqToDB.Internal.Mapping.VirtualPropertyInfoBase.Module.get -> System.Reflection.Module!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Cleanup() -> void
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitBetweenPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Between! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitCaseItem(LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitIsNullPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitNotPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCastExpression(LinqToDB.Internal.SqlQuery.SqlCastExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCoalesceExpression(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlColumnReference(LinqToDB.Internal.SqlQuery.SqlColumn! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlCompareToExpression(LinqToDB.Internal.SqlQuery.SqlCompareToExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlExpression(LinqToDB.Internal.SqlQuery.SqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlFieldReference(LinqToDB.Internal.SqlQuery.SqlField! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlGroupByItem(LinqToDB.Internal.SqlQuery.ISqlExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlInlinedSqlExpression(LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlInlinedToSqlExpression(LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlJoinedTable(LinqToDB.Internal.SqlQuery.SqlJoinedTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlOrderByItem(LinqToDB.Internal.SqlQuery.SqlOrderByItem! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlOutputClause(LinqToDB.Internal.SqlQuery.SqlOutputClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlSetExpression(LinqToDB.Internal.SqlQuery.SqlSetExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.VisitSqlValue(LinqToDB.Internal.SqlQuery.SqlValue! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.Cleanup() -> void
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitCaseItem(LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitExistsPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsNullPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitIsTruePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitNotPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCastExpression(LinqToDB.Internal.SqlQuery.SqlCastExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlCoalesceExpression(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlJoinedTable(LinqToDB.Internal.SqlQuery.SqlJoinedTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlNullabilityExpression(LinqToDB.Internal.SqlQuery.SqlNullabilityExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlSearchCondition(LinqToDB.Internal.SqlQuery.SqlSearchCondition! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlTableSource(LinqToDB.Internal.SqlQuery.SqlTableSource! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.VisitSqlWhereClause(LinqToDB.Internal.SqlQuery.SqlWhereClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlProvider.SqlProviderFlags.Equals(object? obj) -> bool
override LinqToDB.Internal.SqlProvider.SqlProviderFlags.GetHashCode() -> int
override LinqToDB.Internal.SqlProvider.TableIDInfo.Equals(object? obj) -> bool
override LinqToDB.Internal.SqlProvider.TableIDInfo.GetHashCode() -> int
override LinqToDB.Internal.SqlProvider.TableIDInfo.ToString() -> string!
override LinqToDB.Internal.SqlQuery.CteClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.CteClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.CteClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.QueryElementTextWriter.ToString() -> string!
override LinqToDB.Internal.SqlQuery.SelectQuery.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SelectQuery.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SelectQuery.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SelectQuery.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SelectQuery.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SelectQuery.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SelectQuery.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlAnchor.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlAnchor.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlAnchor.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlAnchor.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlAnchor.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlAnchor.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlAnchor.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.GetHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlBinaryExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlCaseExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCastExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlCastExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCastExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlCastExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlCastExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlCastExpression.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlCastExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlCoalesceExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlColumn.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlColumn.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlColumn.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlColumn.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlColumn.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlColumn.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlColumn.ToString() -> string!
override LinqToDB.Internal.SqlQuery.SqlColumn.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlComment.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlComment.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlComment.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlCompareToExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlConditionExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlCreateTableStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlCteTable.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlCteTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>?
override LinqToDB.Internal.SqlQuery.SqlCteTable.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
override LinqToDB.Internal.SqlQuery.SqlCteTable.TableName.get -> LinqToDB.SqlQuery.SqlObjectName
override LinqToDB.Internal.SqlQuery.SqlCteTable.TableName.set -> void
override LinqToDB.Internal.SqlQuery.SqlCteTable.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlDeleteStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlDropTableStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlExpression.Equals(object? obj) -> bool
override LinqToDB.Internal.SqlQuery.SqlExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlField.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlField.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlField.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlField.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlField.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlField.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlField.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlFragment.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlFragment.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlFragment.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlFragment.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlFragment.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlFragment.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlFragment.ToString() -> string!
override LinqToDB.Internal.SqlQuery.SqlFragment.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlFromClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlFromClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlFromClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlFunction.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlFunction.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlFunction.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlFunction.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlGroupByClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlGroupByClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlGroupByClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlGroupingSet.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlHavingClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlHavingClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlHavingClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlInlinedBase.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlInlinedBase.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlInlinedBase.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.GetSqlExpression(LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.GetSqlExpression(LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlInsertClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlInsertClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlInsertClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlInsertStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlInsertStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlInsertStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlInsertStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlInsertStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlJoinedTable.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlJoinedTable.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlJoinedTable.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlMergeOperationClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlMergeStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.GetHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlObjectExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlOrderByClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlOrderByClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlOrderByClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlOrderByItem.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlOrderByItem.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlOrderByItem.ToString() -> string!
override LinqToDB.Internal.SqlQuery.SqlOrderByItem.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlOutputClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlOutputClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlOutputClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlParameter.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlParameter.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlParameter.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlParameter.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlParameter.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlParameter.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlParameter.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlParameterizedExpressionBase.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.BaseNotExpr.WritePredicate(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.Internal.SqlQuery.SqlPredicate.Between.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Between.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.Between.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Between.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.Between.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.Exists.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.Expr.WritePredicate(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> void
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.InList.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.InList.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.InList.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.InList.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.InList.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.Like.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Like.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.Like.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Like.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.Like.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.Not.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlPredicate.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.CanBeUnknown(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, bool withoutUnknownErased) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.CanInvert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.Equals(LinqToDB.Internal.SqlQuery.ISqlPredicate! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate.Invert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
override LinqToDB.Internal.SqlQuery.SqlQueryExtension.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlQueryExtension.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlQueryExtension.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlRawSqlTable.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlRawSqlTable.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlRowExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlRowExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlRowExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlRowExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlRowExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlRowExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlRowExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlSearchCondition.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSelectClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSelectClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlSelectClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSelectStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSelectStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlSelectStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSetExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSetExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlSetExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSetOperator.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSetOperator.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlSetOperator.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlSimpleCaseExpression.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlStatementWithQueryBase.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlTable.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlTable.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlTable.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlTable.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlTable.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlTable.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlTable.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.All.get -> LinqToDB.Internal.SqlQuery.SqlField!
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.Source.get -> LinqToDB.Internal.SqlQuery.ISqlTableSource!
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlTableLikeSource.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlTableSource.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableSource.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlTableSource.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableSource.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlTableSource.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlTableSource.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlTableSource.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlTableSource.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.IsParameterDependent.get -> bool
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.IsParameterDependent.set -> void
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.SelectQuery.get -> LinqToDB.Internal.SqlQuery.SelectQuery?
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.SelectQuery.set -> void
override LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlUpdateClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlUpdateClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlUpdateClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.GetTableSource(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, out bool noAlias) -> LinqToDB.Internal.SqlQuery.ISqlTableSource?
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.IsDependedOn(LinqToDB.Internal.SqlQuery.SqlTable! table) -> bool
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.QueryType.get -> LinqToDB.Internal.SqlQuery.QueryType
override LinqToDB.Internal.SqlQuery.SqlUpdateStatement.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlValue.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlValue.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlValue.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlValue.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlValue.GetHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlValue.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlValue.SystemType.get -> System.Type?
override LinqToDB.Internal.SqlQuery.SqlValue.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlValuesTable.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.Internal.SqlQuery.SqlValuesTable.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlValuesTable.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.Internal.SqlQuery.SqlValuesTable.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.Internal.SqlQuery.SqlValuesTable.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlValuesTable.Precedence.get -> int
override LinqToDB.Internal.SqlQuery.SqlValuesTable.SystemType.get -> System.Type!
override LinqToDB.Internal.SqlQuery.SqlValuesTable.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlWhereClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlWhereClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlWhereClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.SqlWithClause.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.Internal.SqlQuery.SqlWithClause.GetElementHashCode() -> int
override LinqToDB.Internal.SqlQuery.SqlWithClause.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.Internal.SqlQuery.Visitors.QueryElementCorrectVisitor.GetVisitMode(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
override LinqToDB.Internal.SqlQuery.Visitors.QueryElementCorrectVisitor.NotifyReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.QueryElementCorrectVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.QueryElementReplacingVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SelectQueryOptimizerVisitor.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SelectQueryOptimizerVisitor.NotifyReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryActionVisitor<TContext>.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor.ShouldReplace(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitor<TContext>.ShouldReplace(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryCloneVisitorBase.ShouldReplace(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnNestingCorrector.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryColumnUsageCollector.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.ConvertElement(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitorBase.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindExceptVisitor<TContext>.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryFindVisitor<TContext>.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryHelperVisitorBase.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryHelperVisitorBase.VisitSqlTable(LinqToDB.Internal.SqlQuery.SqlTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlColumnReference(LinqToDB.Internal.SqlQuery.SqlColumn! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlConditionalInsertClause(LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlDeleteStatement(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlFieldReference(LinqToDB.Internal.SqlQuery.SqlField! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlInsertStatement(LinqToDB.Internal.SqlQuery.SqlInsertStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlJoinedTable(LinqToDB.Internal.SqlQuery.SqlJoinedTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlMultiInsertStatement(LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlOrderByItem(LinqToDB.Internal.SqlQuery.SqlOrderByItem! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlOutputClause(LinqToDB.Internal.SqlQuery.SqlOutputClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlTableSource(LinqToDB.Internal.SqlQuery.SqlTableSource! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlUpdateStatement(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryNestingValidationVisitor.VisitSqlWhereClause(LinqToDB.Internal.SqlQuery.SqlWhereClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryOrderByOptimizer.Cleanup() -> void
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryParentFirstVisitor<TContext>.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlFromClause(LinqToDB.Internal.SqlQuery.SqlFromClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlJoinedTable(LinqToDB.Internal.SqlQuery.SqlJoinedTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlSearchCondition(LinqToDB.Internal.SqlQuery.SqlSearchCondition! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryValidatorVisitor.VisitSqlTableSource(LinqToDB.Internal.SqlQuery.SqlTableSource! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.GetVisitMode(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.NotifyReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
override LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.VisitCteClauseReference(LinqToDB.Internal.SqlQuery.CteClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
override LinqToDB.LinqOptions.Equals(object? obj) -> bool
override LinqToDB.LinqOptions.GetHashCode() -> int
override LinqToDB.LinqOptions.ToString() -> string!
override LinqToDB.Mapping.AssociationAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.AssociationDescriptor.ToString() -> string!
override LinqToDB.Mapping.ColumnAliasAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.ColumnAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.DataTypeAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.DynamicColumnAccessorAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.DynamicColumnsStoreAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.IdentityAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.InheritanceMappingAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.MappingSchema.Equals(object? obj) -> bool
override LinqToDB.Mapping.MappingSchema.GetHashCode() -> int
override LinqToDB.Mapping.MapValueAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.NullableAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.OptimisticLockPropertyAttribute.GetNextValue(LinqToDB.Mapping.ColumnDescriptor! column, System.Linq.Expressions.ParameterExpression! record) -> System.Linq.Expressions.LambdaExpression?
override LinqToDB.Mapping.OptimisticLockPropertyAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.OptimisticLockPropertyBaseAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.PrimaryKeyAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.QueryFilterAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.ScalarTypeAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.SequenceNameAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.SkipBaseAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.SkipValuesByListAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.SkipValuesByListAttribute.ShouldSkip(object! obj, LinqToDB.Mapping.EntityDescriptor! entityDescriptor, LinqToDB.Mapping.ColumnDescriptor! columnDescriptor) -> bool
override LinqToDB.Mapping.SkipValuesOnInsertAttribute.Affects.get -> LinqToDB.Mapping.SkipModification
override LinqToDB.Mapping.SkipValuesOnUpdateAttribute.Affects.get -> LinqToDB.Mapping.SkipModification
override LinqToDB.Mapping.SqlQueryDependentParamsAttribute.ExpressionsEqual<TContext>(TContext context, System.Linq.Expressions.Expression! expr1, System.Linq.Expressions.Expression! expr2, System.Func<TContext, System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!, bool>! comparer) -> bool
override LinqToDB.Mapping.SqlQueryDependentParamsAttribute.SplitExpression(System.Linq.Expressions.Expression! expression) -> System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression!>!
override LinqToDB.Mapping.TableAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.ValueConverterAttribute.GetObjectID() -> string!
override LinqToDB.Mapping.ValueToSqlConverter.Equals(object? obj) -> bool
override LinqToDB.Mapping.ValueToSqlConverter.GetHashCode() -> int
override LinqToDB.Reflection.TypeAccessor<T>.CreateInstance() -> object!
override LinqToDB.Reflection.TypeAccessor<T>.Type.get -> System.Type!
override LinqToDB.Remote.LinqService<T>.CreateDataContext(string? configuration) -> LinqToDB.Data.DataConnection!
override LinqToDB.Sql.EnumAttribute.GetObjectID() -> string!
override LinqToDB.Sql.ExpressionAttribute.GetObjectID() -> string!
override LinqToDB.Sql.ExtensionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.Internal.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.ExtensionAttribute.GetObjectID() -> string!
override LinqToDB.Sql.FunctionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.Internal.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.FunctionAttribute.GetObjectID() -> string!
override LinqToDB.Sql.PropertyAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.Internal.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
override LinqToDB.Sql.PropertyAttribute.GetObjectID() -> string!
override LinqToDB.Sql.QueryExtensionAttribute.GetObjectID() -> string!
override LinqToDB.Sql.SqlID.Equals(object? obj) -> bool
override LinqToDB.Sql.SqlID.GetHashCode() -> int
override LinqToDB.Sql.SqlID.ToString() -> string!
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2, T3>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1, T2>.GetHashCode() -> int
override LinqToDB.Sql.SqlRow<T1>.GetHashCode() -> int
override LinqToDB.Sql.TableExpressionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
override LinqToDB.Sql.TableFunctionAttribute.GetObjectID() -> string!
override LinqToDB.SqlOptions.Equals(object? obj) -> bool
override LinqToDB.SqlOptions.GetHashCode() -> int
override LinqToDB.SqlOptions.ToString() -> string!
override LinqToDB.SqlQuery.SqlDataType.CanBeNullable(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
override LinqToDB.SqlQuery.SqlDataType.ElementType.get -> LinqToDB.Internal.SqlQuery.QueryElementType
override LinqToDB.SqlQuery.SqlDataType.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression! other, System.Func<LinqToDB.Internal.SqlQuery.ISqlExpression!, LinqToDB.Internal.SqlQuery.ISqlExpression!, bool>! comparer) -> bool
override LinqToDB.SqlQuery.SqlDataType.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
override LinqToDB.SqlQuery.SqlDataType.Equals(object? obj) -> bool
override LinqToDB.SqlQuery.SqlDataType.GetElementHashCode() -> int
override LinqToDB.SqlQuery.SqlDataType.GetHashCode() -> int
override LinqToDB.SqlQuery.SqlDataType.Precedence.get -> int
override LinqToDB.SqlQuery.SqlDataType.SystemType.get -> System.Type!
override LinqToDB.SqlQuery.SqlDataType.ToString(LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
override LinqToDB.SqlQuery.SqlObjectName.GetHashCode() -> int
override LinqToDB.SqlQuery.SqlObjectName.ToString() -> string!
override sealed LinqToDB.DataProvider.Access.AccessOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.Access.AccessOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.DB2.DB2Options.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.DB2.DB2Options!>? other) -> bool
override sealed LinqToDB.DataProvider.Firebird.FirebirdOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.Firebird.FirebirdOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.Informix.InformixOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.Informix.InformixOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.MySql.MySqlOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.MySql.MySqlOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.Oracle.OracleOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.Oracle.OracleOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.SapHana.SapHanaOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.SapHana.SapHanaOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.SqlCe.SqlCeOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.SqlCe.SqlCeOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.SQLite.SQLiteOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.SQLite.SQLiteOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.SqlServer.SqlServerOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.SqlServer.SqlServerOptions!>? other) -> bool
override sealed LinqToDB.DataProvider.Sybase.SybaseOptions.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<LinqToDB.DataProvider.Sybase.SybaseOptions!>? other) -> bool
override sealed LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.IsReserved(string! word) -> bool
override sealed LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.IsReserved(string! word) -> bool
override sealed LinqToDB.Internal.DataProvider.PostgreSQL.PostgreSQLSqlBuilder.IsReserved(string! word) -> bool
readonly LinqToDB.Internal.DataProvider.DataProviderBase.ReaderExpressions -> System.Collections.Concurrent.ConcurrentDictionary<LinqToDB.Internal.DataProvider.ReaderInfo, System.Linq.Expressions.Expression!>!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.Columns -> LinqToDB.Mapping.ColumnDescriptor![]!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.ColumnTypes -> LinqToDB.DbDataType[]!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.DataConnection -> LinqToDB.Data.DataConnection!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.Descriptor -> LinqToDB.Mapping.EntityDescriptor!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.MappingSchema -> LinqToDB.Mapping.MappingSchema!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.Options -> LinqToDB.DataOptions!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.OriginalContext -> LinqToDB.IDataContext!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.ParameterName -> string!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.Parameters -> System.Collections.Generic.List<LinqToDB.Data.DataParameter!>!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.RowsCopied -> LinqToDB.Data.BulkCopyRowsCopied!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.SqlBuilder -> LinqToDB.Internal.SqlProvider.ISqlBuilder!
readonly LinqToDB.Internal.DataProvider.MultipleRowsHelper.StringBuilder -> System.Text.StringBuilder!
readonly LinqToDB.Internal.DataProvider.SqlServer.SqlServerSqlOptimizer.SQLVersion -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
static LinqToDB.AnalyticFunctions.Average<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Average<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Average<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double
static LinqToDB.AnalyticFunctions.Average<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double
static LinqToDB.AnalyticFunctions.Corr<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Corr<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.Corr<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.Count(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<int>!
static LinqToDB.AnalyticFunctions.Count(this LinqToDB.Sql.ISqlExtension? ext, object? expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<int>!
static LinqToDB.AnalyticFunctions.Count<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<int>!
static LinqToDB.AnalyticFunctions.CountExt<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> int
static LinqToDB.AnalyticFunctions.CountExt<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> int
static LinqToDB.AnalyticFunctions.CountExt<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> int
static LinqToDB.AnalyticFunctions.CountExt<TEntity>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, object?>! expr) -> int
static LinqToDB.AnalyticFunctions.CovarPop<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr1, T expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.CovarPop<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal
static LinqToDB.AnalyticFunctions.CovarPop<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal
static LinqToDB.AnalyticFunctions.CovarSamp<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr1, T expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.CovarSamp<T>(this System.Collections.Generic.IEnumerable<T>! source, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<T, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.CovarSamp<TEntity>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr1, System.Linq.Expressions.Expression<System.Func<TEntity, object?>!>! expr2) -> decimal?
static LinqToDB.AnalyticFunctions.CumeDist<TR>(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<TR>!
static LinqToDB.AnalyticFunctions.CumeDist<TR>(this LinqToDB.Sql.ISqlExtension? ext, params object?[]! expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<TR>!
static LinqToDB.AnalyticFunctions.DenseRank(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<long>!
static LinqToDB.AnalyticFunctions.DenseRank(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long>!
static LinqToDB.AnalyticFunctions.Filter<T>(this LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>! func, bool filter) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.FirstValue<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.KeepFirst<TR>(this LinqToDB.AnalyticFunctions.IAggregateFunction<TR>! ext) -> LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>!
static LinqToDB.AnalyticFunctions.KeepLast<TR>(this LinqToDB.AnalyticFunctions.IAggregateFunction<TR>! ext) -> LinqToDB.AnalyticFunctions.INeedOrderByAndMaybeOverWithPartition<TR>!
static LinqToDB.AnalyticFunctions.Lag<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lag<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, int offset) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lag<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, int offset, T default) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lag<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lag<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls, int offset, T default) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.LastValue<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Lead<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lead<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, int offset) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lead<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, int offset, T default) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lead<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.Lead<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.Nulls nulls, int offset, T default) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.ListAgg<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string!>!
static LinqToDB.AnalyticFunctions.ListAgg<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, string! delimiter) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderAndMaybePartition<string!>!
static LinqToDB.AnalyticFunctions.LongCount(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<long>!
static LinqToDB.AnalyticFunctions.LongCount(this LinqToDB.Sql.ISqlExtension? ext, object? expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<long>!
static LinqToDB.AnalyticFunctions.LongCount<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<long>!
static LinqToDB.AnalyticFunctions.LongCountExt<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> long
static LinqToDB.AnalyticFunctions.LongCountExt<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> long
static LinqToDB.AnalyticFunctions.LongCountExt<TEntity>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, object?>! expr) -> long
static LinqToDB.AnalyticFunctions.Max<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Max<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Max<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> TV
static LinqToDB.AnalyticFunctions.Max<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier) -> TV
static LinqToDB.AnalyticFunctions.Median<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IReadyToFunctionOrOverWithPartition<T>!
static LinqToDB.AnalyticFunctions.Median<TEntity, T>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, T>! expr) -> long
static LinqToDB.AnalyticFunctions.Median<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> long
static LinqToDB.AnalyticFunctions.Min<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Min<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Min<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> TV
static LinqToDB.AnalyticFunctions.Min<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier) -> TV
static LinqToDB.AnalyticFunctions.NthValue<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, long n) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.NthValue<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, long n, LinqToDB.Sql.From from, LinqToDB.Sql.Nulls nulls) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.NTile<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.PercentileCont<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T>!
static LinqToDB.AnalyticFunctions.PercentileDisc<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithSingleOrderAndMaybePartition<T>!
static LinqToDB.AnalyticFunctions.PercentRank<T>(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T>!
static LinqToDB.AnalyticFunctions.PercentRank<T>(this LinqToDB.Sql.ISqlExtension? ext, params object?[]! expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<T>!
static LinqToDB.AnalyticFunctions.Rank(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<long>!
static LinqToDB.AnalyticFunctions.Rank(this LinqToDB.Sql.ISqlExtension? ext, params object?[]! expr) -> LinqToDB.AnalyticFunctions.INeedsWithinGroupWithOrderOnly<long>!
static LinqToDB.AnalyticFunctions.RatioToReport<TR>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IOverWithPartitionNeeded<TR>!
static LinqToDB.AnalyticFunctions.RegrAvgX<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrAvgY<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrCount(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<long>!
static LinqToDB.AnalyticFunctions.RegrIntercept<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrR2<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrSlope<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrSXX<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrSXY<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RegrSYY<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr1, object? expr2) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.RowNumber(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<long>!
static LinqToDB.AnalyticFunctions.StdDev<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.StdDev<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> double?
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> double?
static LinqToDB.AnalyticFunctions.StdDev<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> double?
static LinqToDB.AnalyticFunctions.StdDevPop<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.StdDevPop<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
static LinqToDB.AnalyticFunctions.StdDevPop<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
static LinqToDB.AnalyticFunctions.StdDevSamp<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.StdDevSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.Sum<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Sum<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Variance<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Variance<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.Variance<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> TV
static LinqToDB.AnalyticFunctions.Variance<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> TV
static LinqToDB.AnalyticFunctions.Variance<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier = LinqToDB.Sql.AggregateModifier.None) -> TV
static LinqToDB.AnalyticFunctions.VarPop<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.VarPop<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal
static LinqToDB.AnalyticFunctions.VarPop<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal
static LinqToDB.AnalyticFunctions.VarSamp<T>(this LinqToDB.Sql.ISqlExtension? ext, object? expr) -> LinqToDB.AnalyticFunctions.IAggregateFunctionSelfContained<T>!
static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr) -> decimal?
static LinqToDB.AnalyticFunctions.VarSamp<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> decimal?
static LinqToDB.Async.AsyncExtensions.AllAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.Async.AsyncExtensions.AnyAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.Async.AsyncExtensions.AnyAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.Async.AsyncExtensions.AsAsyncEnumerable<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.AverageAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.ContainsAsync<TSource>(this System.Linq.IQueryable<TSource>! source, TSource item, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.Async.AsyncExtensions.CountAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Async.AsyncExtensions.CountAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Async.AsyncExtensions.FirstAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.Async.AsyncExtensions.FirstAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.Async.AsyncExtensions.FirstOrDefaultAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.FirstOrDefaultAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.ForEachAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.Async.AsyncExtensions.ForEachUntilAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, bool>! func, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.Async.AsyncExtensions.LongCountAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.Async.AsyncExtensions.LongCountAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.Async.AsyncExtensions.MaxAsync<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult?>!
static LinqToDB.Async.AsyncExtensions.MaxAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.MinAsync<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult?>!
static LinqToDB.Async.AsyncExtensions.MinAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.SingleAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.Async.AsyncExtensions.SingleAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.Async.AsyncExtensions.SingleOrDefaultAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.SingleOrDefaultAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.Async.AsyncExtensions.SumAsync(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.Async.AsyncExtensions.SumAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.Async.AsyncExtensions.ToArrayAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource[]!>!
static LinqToDB.Async.AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.Async.AsyncExtensions.ToDictionaryAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.Async.AsyncExtensions.ToDictionaryAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
static LinqToDB.Async.AsyncExtensions.ToDictionaryAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
static LinqToDB.Async.AsyncExtensions.ToListAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>!>!
static LinqToDB.Async.AsyncExtensions.ToLookupAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TElement>!>!
static LinqToDB.Async.AsyncExtensions.ToLookupAsync<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TElement>!>!
static LinqToDB.Async.AsyncExtensions.ToLookupAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TSource>!>!
static LinqToDB.Async.AsyncExtensions.ToLookupAsync<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Linq.ILookup<TKey, TSource>!>!
static LinqToDB.Common.Compilation.CompileExpression(this System.Linq.Expressions.LambdaExpression! expression) -> System.Delegate!
static LinqToDB.Common.Compilation.CompileExpression<TDelegate>(this System.Linq.Expressions.Expression<TDelegate!>! expression) -> TDelegate!
static LinqToDB.Common.Compilation.SetExpressionCompiler(System.Func<System.Linq.Expressions.LambdaExpression!, System.Delegate?>? compiler) -> void
static LinqToDB.Common.Configuration.BulkCopy.Options.get -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.Common.Configuration.BulkCopy.Options.set -> void
static LinqToDB.Common.Configuration.Connection.Options.get -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.Common.Configuration.Connection.Options.set -> void
static LinqToDB.Common.Configuration.ContinueOnCapturedContext -> bool
static LinqToDB.Common.Configuration.Data.BulkCopyUseConnectionCommandTimeout -> bool
static LinqToDB.Common.Configuration.Data.ThrowOnDisposed -> bool
static LinqToDB.Common.Configuration.DataContext.Options.get -> LinqToDB.DataContextOptions!
static LinqToDB.Common.Configuration.DataContext.Options.set -> void
static LinqToDB.Common.Configuration.IsStructIsScalarType -> bool
static LinqToDB.Common.Configuration.Linq.CacheSlidingExpiration.get -> System.TimeSpan
static LinqToDB.Common.Configuration.Linq.CacheSlidingExpiration.set -> void
static LinqToDB.Common.Configuration.Linq.CompareNulls.get -> LinqToDB.CompareNulls
static LinqToDB.Common.Configuration.Linq.CompareNulls.set -> void
static LinqToDB.Common.Configuration.Linq.CompareNullsAsValues.get -> bool
static LinqToDB.Common.Configuration.Linq.CompareNullsAsValues.set -> void
static LinqToDB.Common.Configuration.Linq.DisableQueryCache.get -> bool
static LinqToDB.Common.Configuration.Linq.DisableQueryCache.set -> void
static LinqToDB.Common.Configuration.Linq.DoNotClearOrderBys.get -> bool
static LinqToDB.Common.Configuration.Linq.DoNotClearOrderBys.set -> void
static LinqToDB.Common.Configuration.Linq.EnableContextSchemaEdit.get -> bool
static LinqToDB.Common.Configuration.Linq.EnableContextSchemaEdit.set -> void
static LinqToDB.Common.Configuration.Linq.GenerateExpressionTest.get -> bool
static LinqToDB.Common.Configuration.Linq.GenerateExpressionTest.set -> void
static LinqToDB.Common.Configuration.Linq.GuardGrouping.get -> bool
static LinqToDB.Common.Configuration.Linq.GuardGrouping.set -> void
static LinqToDB.Common.Configuration.Linq.IgnoreEmptyUpdate.get -> bool
static LinqToDB.Common.Configuration.Linq.IgnoreEmptyUpdate.set -> void
static LinqToDB.Common.Configuration.Linq.KeepDistinctOrdered.get -> bool
static LinqToDB.Common.Configuration.Linq.KeepDistinctOrdered.set -> void
static LinqToDB.Common.Configuration.Linq.OptimizeJoins.get -> bool
static LinqToDB.Common.Configuration.Linq.OptimizeJoins.set -> void
static LinqToDB.Common.Configuration.Linq.Options.get -> LinqToDB.LinqOptions!
static LinqToDB.Common.Configuration.Linq.Options.set -> void
static LinqToDB.Common.Configuration.Linq.ParameterizeTakeSkip.get -> bool
static LinqToDB.Common.Configuration.Linq.ParameterizeTakeSkip.set -> void
static LinqToDB.Common.Configuration.Linq.PreferApply.get -> bool
static LinqToDB.Common.Configuration.Linq.PreferApply.set -> void
static LinqToDB.Common.Configuration.Linq.PreloadGroups.get -> bool
static LinqToDB.Common.Configuration.Linq.PreloadGroups.set -> void
static LinqToDB.Common.Configuration.Linq.TraceMapperExpression.get -> bool
static LinqToDB.Common.Configuration.Linq.TraceMapperExpression.set -> void
static LinqToDB.Common.Configuration.LinqService.SerializeAssemblyQualifiedName -> bool
static LinqToDB.Common.Configuration.LinqService.ThrowUnresolvedTypeException -> bool
static LinqToDB.Common.Configuration.MaxArrayParameterLengthLogging.get -> int
static LinqToDB.Common.Configuration.MaxArrayParameterLengthLogging.set -> void
static LinqToDB.Common.Configuration.MaxBinaryParameterLengthLogging.get -> int
static LinqToDB.Common.Configuration.MaxBinaryParameterLengthLogging.set -> void
static LinqToDB.Common.Configuration.MaxStringParameterLengthLogging.get -> int
static LinqToDB.Common.Configuration.MaxStringParameterLengthLogging.set -> void
static LinqToDB.Common.Configuration.OptimizeForSequentialAccess -> bool
static LinqToDB.Common.Configuration.QueryTrace.Options.get -> LinqToDB.Data.QueryTraceOptions!
static LinqToDB.Common.Configuration.QueryTrace.Options.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.DefaultCoefficient.get -> System.TimeSpan
static LinqToDB.Common.Configuration.RetryPolicy.DefaultCoefficient.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.DefaultExponentialBase.get -> double
static LinqToDB.Common.Configuration.RetryPolicy.DefaultExponentialBase.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxDelay.get -> System.TimeSpan
static LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxDelay.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxRetryCount.get -> int
static LinqToDB.Common.Configuration.RetryPolicy.DefaultMaxRetryCount.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.DefaultRandomFactor.get -> double
static LinqToDB.Common.Configuration.RetryPolicy.DefaultRandomFactor.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.Factory.get -> System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>?
static LinqToDB.Common.Configuration.RetryPolicy.Factory.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.Options.get -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.Common.Configuration.RetryPolicy.Options.set -> void
static LinqToDB.Common.Configuration.RetryPolicy.UseDefaultPolicy.get -> bool
static LinqToDB.Common.Configuration.RetryPolicy.UseDefaultPolicy.set -> void
static LinqToDB.Common.Configuration.Sql.AssociationAlias.get -> string?
static LinqToDB.Common.Configuration.Sql.AssociationAlias.set -> void
static LinqToDB.Common.Configuration.Sql.EnableConstantExpressionInOrderBy.get -> bool
static LinqToDB.Common.Configuration.Sql.EnableConstantExpressionInOrderBy.set -> void
static LinqToDB.Common.Configuration.Sql.GenerateFinalAliases.get -> bool
static LinqToDB.Common.Configuration.Sql.GenerateFinalAliases.set -> void
static LinqToDB.Common.Configuration.Sql.Options.get -> LinqToDB.SqlOptions!
static LinqToDB.Common.Configuration.Sql.Options.set -> void
static LinqToDB.Common.Configuration.SqlServer.UseSchemaOnlyToGetSchema -> bool
static LinqToDB.Common.Configuration.TraceMaterializationActivity.get -> bool
static LinqToDB.Common.Configuration.TraceMaterializationActivity.set -> void
static LinqToDB.Common.Configuration.UseEnumValueNameForStringColumns -> bool
static LinqToDB.Common.Configuration.UseNullableTypesMetadata.get -> bool
static LinqToDB.Common.Configuration.UseNullableTypesMetadata.set -> void
static LinqToDB.Common.Convert<TFrom, TTo>.Expression.get -> System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>!
static LinqToDB.Common.Convert<TFrom, TTo>.Expression.set -> void
static LinqToDB.Common.Convert<TFrom, TTo>.From.get -> System.Func<TFrom, TTo>!
static LinqToDB.Common.Convert<TFrom, TTo>.Lambda.get -> System.Func<TFrom, TTo>!
static LinqToDB.Common.Convert<TFrom, TTo>.Lambda.set -> void
static LinqToDB.Common.Converter.ChangeType(object? value, System.Type! toConvertType, LinqToDB.Mapping.MappingSchema? mappingSchema = null, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> object?
static LinqToDB.Common.Converter.ChangeTypeTo<T>(object? value, LinqToDB.Mapping.MappingSchema? mappingSchema = null, LinqToDB.Mapping.ConversionType conversionType = LinqToDB.Mapping.ConversionType.Common) -> T
static LinqToDB.Common.Converter.GetDefaultMappingFromEnumType(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! enumType) -> System.Type?
static LinqToDB.Common.Converter.SetConverter<TFrom, TTo>(System.Linq.Expressions.Expression<System.Func<TFrom, TTo>!>! expr) -> void
static LinqToDB.Common.ConvertTo<TTo>.From<TFrom>(TFrom o) -> TTo
static LinqToDB.Common.Option<T>.implicit operator LinqToDB.Common.Option<T>(T value) -> LinqToDB.Common.Option<T>
static LinqToDB.Common.Option<T>.Some(T value) -> LinqToDB.Common.Option<T>
static LinqToDB.CompiledQuery.Compile<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>!>! query) -> System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TArg5, TResult>!
static LinqToDB.CompiledQuery.Compile<TDC, TArg1, TArg2, TArg3, TArg4, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>!>! query) -> System.Func<TDC, TArg1, TArg2, TArg3, TArg4, TResult>!
static LinqToDB.CompiledQuery.Compile<TDC, TArg1, TArg2, TArg3, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TArg3, TResult>!>! query) -> System.Func<TDC, TArg1, TArg2, TArg3, TResult>!
static LinqToDB.CompiledQuery.Compile<TDC, TArg1, TArg2, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TArg2, TResult>!>! query) -> System.Func<TDC, TArg1, TArg2, TResult>!
static LinqToDB.CompiledQuery.Compile<TDC, TArg1, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TArg1, TResult>!>! query) -> System.Func<TDC, TArg1, TResult>!
static LinqToDB.CompiledQuery.Compile<TDC, TResult>(System.Linq.Expressions.Expression<System.Func<TDC, TResult>!>! query) -> System.Func<TDC, TResult>!
static LinqToDB.Concurrency.ConcurrencyExtensions.DeleteOptimistic<T>(this LinqToDB.IDataContext! dc, T! obj) -> int
static LinqToDB.Concurrency.ConcurrencyExtensions.DeleteOptimistic<T>(this System.Linq.IQueryable<T!>! source, T! obj) -> int
static LinqToDB.Concurrency.ConcurrencyExtensions.DeleteOptimisticAsync<T>(this LinqToDB.IDataContext! dc, T! obj, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Concurrency.ConcurrencyExtensions.DeleteOptimisticAsync<T>(this System.Linq.IQueryable<T!>! source, T! obj, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Concurrency.ConcurrencyExtensions.UpdateOptimistic<T>(this LinqToDB.IDataContext! dc, T! obj) -> int
static LinqToDB.Concurrency.ConcurrencyExtensions.UpdateOptimistic<T>(this System.Linq.IQueryable<T!>! source, T! obj) -> int
static LinqToDB.Concurrency.ConcurrencyExtensions.UpdateOptimisticAsync<T>(this LinqToDB.IDataContext! dc, T! obj, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Concurrency.ConcurrencyExtensions.UpdateOptimisticAsync<T>(this System.Linq.IQueryable<T!>! source, T! obj, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Concurrency.ConcurrencyExtensions.WhereKeyOptimistic<T>(this System.Linq.IQueryable<T!>! source, T! obj) -> System.Linq.IQueryable<T!>!
static LinqToDB.Data.BulkCopyOptions.Default.get -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.Data.BulkCopyOptions.Default.set -> void
static LinqToDB.Data.BulkCopyOptions.operator !=(LinqToDB.Data.BulkCopyOptions? left, LinqToDB.Data.BulkCopyOptions? right) -> bool
static LinqToDB.Data.BulkCopyOptions.operator ==(LinqToDB.Data.BulkCopyOptions? left, LinqToDB.Data.BulkCopyOptions? right) -> bool
static LinqToDB.Data.CommandInfo.ClearObjectReaderCache() -> void
static LinqToDB.Data.ConnectionOptions.Default.get -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.Data.ConnectionOptions.Default.set -> void
static LinqToDB.Data.ConnectionOptions.operator !=(LinqToDB.Data.ConnectionOptions? left, LinqToDB.Data.ConnectionOptions? right) -> bool
static LinqToDB.Data.ConnectionOptions.operator ==(LinqToDB.Data.ConnectionOptions? left, LinqToDB.Data.ConnectionOptions? right) -> bool
static LinqToDB.Data.DataConnection.AddConfiguration(string! configuration, string! connectionString, LinqToDB.DataProvider.IDataProvider? dataProvider = null) -> void
static LinqToDB.Data.DataConnection.AddDataProvider(LinqToDB.DataProvider.IDataProvider! dataProvider) -> void
static LinqToDB.Data.DataConnection.AddDataProvider(string! providerName, LinqToDB.DataProvider.IDataProvider! dataProvider) -> void
static LinqToDB.Data.DataConnection.AddOrSetConfiguration(string! configuration, string! connectionString, string! dataProvider) -> void
static LinqToDB.Data.DataConnection.AddProviderDetector(System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider?>! providerDetector) -> void
static LinqToDB.Data.DataConnection.ClearObjectReaderCache() -> void
static LinqToDB.Data.DataConnection.DefaultConfiguration.get -> string?
static LinqToDB.Data.DataConnection.DefaultConfiguration.set -> void
static LinqToDB.Data.DataConnection.DefaultDataProvider.get -> string?
static LinqToDB.Data.DataConnection.DefaultDataProvider.set -> void
static LinqToDB.Data.DataConnection.DefaultOnTraceConnection.get -> System.Action<LinqToDB.Data.TraceInfo!>!
static LinqToDB.Data.DataConnection.DefaultOnTraceConnection.set -> void
static LinqToDB.Data.DataConnection.DefaultSettings.get -> LinqToDB.Configuration.ILinqToDBSettings?
static LinqToDB.Data.DataConnection.DefaultSettings.set -> void
static LinqToDB.Data.DataConnection.GetConnectionString(string! configurationString) -> string!
static LinqToDB.Data.DataConnection.GetDataProvider(string! configurationString) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.Data.DataConnection.GetDataProvider(string! providerName, string! configurationString, string! connectionString) -> LinqToDB.DataProvider.IDataProvider?
static LinqToDB.Data.DataConnection.GetDataProvider(string! providerName, string! connectionString) -> LinqToDB.DataProvider.IDataProvider?
static LinqToDB.Data.DataConnection.GetRegisteredProviders() -> System.Collections.Generic.IReadOnlyDictionary<string!, LinqToDB.DataProvider.IDataProvider!>!
static LinqToDB.Data.DataConnection.InsertProviderDetector(System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider?>! providerDetector) -> void
static LinqToDB.Data.DataConnection.SetConnectionString(string! configuration, string! connectionString) -> void
static LinqToDB.Data.DataConnection.SetConnectionStrings(System.Collections.Generic.IEnumerable<LinqToDB.Configuration.IConnectionStringSettings!>! connectionStrings) -> void
static LinqToDB.Data.DataConnection.TraceAction<TContext, TResult>(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.TraceOperation traceOperation, System.Func<TContext, string?>? commandText, TContext context, System.Func<LinqToDB.Data.DataConnection!, TContext, TResult>! action) -> TResult
static LinqToDB.Data.DataConnection.TraceActionAsync<TContext, TResult>(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.TraceOperation traceOperation, System.Func<TContext, string?>? commandText, TContext context, System.Func<LinqToDB.Data.DataConnection!, TContext, System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! action, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
static LinqToDB.Data.DataConnection.TraceSwitch.get -> System.Diagnostics.TraceSwitch!
static LinqToDB.Data.DataConnection.TraceSwitch.set -> void
static LinqToDB.Data.DataConnection.TryGetConnectionString(string? configurationString) -> string?
static LinqToDB.Data.DataConnection.TurnTraceSwitchOn(System.Diagnostics.TraceLevel traceLevel = System.Diagnostics.TraceLevel.Info) -> void
static LinqToDB.Data.DataConnection.WriteTraceLine -> System.Action<string!, string!, System.Diagnostics.TraceLevel>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.Data.DataConnection! dataConnection, int maxBatchSize, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.ITable<T>! table, int maxBatchSize, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.ITable<T>! table, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopy<T>(this LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, int maxBatchSize, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, int maxBatchSize, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, int maxBatchSize, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, int maxBatchSize, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.BulkCopyAsync<T>(this LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Data.DataConnectionExtensions.Execute(this LinqToDB.Data.DataConnection! connection, string! sql) -> int
static LinqToDB.Data.DataConnectionExtensions.Execute(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> int
static LinqToDB.Data.DataConnectionExtensions.Execute(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> int
static LinqToDB.Data.DataConnectionExtensions.Execute<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> T
static LinqToDB.Data.DataConnectionExtensions.Execute<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> T
static LinqToDB.Data.DataConnectionExtensions.Execute<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> T
static LinqToDB.Data.DataConnectionExtensions.Execute<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> T
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProc(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> int
static LinqToDB.Data.DataConnectionExtensions.ExecuteProc(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> int
static LinqToDB.Data.DataConnectionExtensions.ExecuteProc<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> T
static LinqToDB.Data.DataConnectionExtensions.ExecuteProc<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> T
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T>!
static LinqToDB.Data.DataConnectionExtensions.ExecuteReader(this LinqToDB.Data.DataConnection! connection, string! sql) -> LinqToDB.Data.DataReader!
static LinqToDB.Data.DataConnectionExtensions.ExecuteReader(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> LinqToDB.Data.DataReader!
static LinqToDB.Data.DataConnectionExtensions.ExecuteReader(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> LinqToDB.Data.DataReader!
static LinqToDB.Data.DataConnectionExtensions.ExecuteReader(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> LinqToDB.Data.DataReader!
static LinqToDB.Data.DataConnectionExtensions.ExecuteReader(this LinqToDB.Data.DataConnection! connection, string! sql, System.Data.CommandType commandType, System.Data.CommandBehavior commandBehavior, params LinqToDB.Data.DataParameter![]! parameters) -> LinqToDB.Data.DataReader!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.Query<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryMultiple<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> T!
static LinqToDB.Data.DataConnectionExtensions.QueryMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProc<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultiple<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> T!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultiple<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> T!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryProcMultipleAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToArrayAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<T[]!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToAsyncEnumerable<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Collections.Generic.IAsyncEnumerable<T>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, LinqToDB.Data.DataParameter! parameter, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, object? parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, object? parameters, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, System.Func<System.Data.Common.DbDataReader!, T>! objectReader, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, object? parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, System.Threading.CancellationToken cancellationToken, object? parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.QueryToListAsync<T>(this LinqToDB.Data.DataConnection! connection, T template, string! sql, System.Threading.CancellationToken cancellationToken, params LinqToDB.Data.DataParameter![]! parameters) -> System.Threading.Tasks.Task<System.Collections.Generic.List<T>!>!
static LinqToDB.Data.DataConnectionExtensions.SetCommand(this LinqToDB.Data.DataConnection! dataConnection, string! commandText) -> LinqToDB.Data.CommandInfo!
static LinqToDB.Data.DataConnectionExtensions.SetCommand(this LinqToDB.Data.DataConnection! dataConnection, string! commandText, LinqToDB.Data.DataParameter! parameter) -> LinqToDB.Data.CommandInfo!
static LinqToDB.Data.DataConnectionExtensions.SetCommand(this LinqToDB.Data.DataConnection! dataConnection, string! commandText, object? parameters) -> LinqToDB.Data.CommandInfo!
static LinqToDB.Data.DataConnectionExtensions.SetCommand(this LinqToDB.Data.DataConnection! dataConnection, string! commandText, params LinqToDB.Data.DataParameter![]! parameters) -> LinqToDB.Data.CommandInfo!
static LinqToDB.Data.DataParameter.Binary(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Binary(string? name, System.Data.Linq.Binary? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.BinaryJson(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.BitArray(string? name, System.Collections.BitArray? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Blob(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Boolean(string? name, bool value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Byte(string? name, byte value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Char(string? name, char value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Char(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, bool value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, byte value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, char value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, decimal value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, double value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, float value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, int value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, long value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, sbyte value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, short value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Collections.BitArray? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Collections.Generic.Dictionary<string!, string!>? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Data.Linq.Binary? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.DateTime value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.DateTimeOffset value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Guid value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.TimeSpan value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Xml.Linq.XDocument? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, System.Xml.XmlDocument? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, uint value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, ulong value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Create(string? name, ushort value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Date(string? name, System.DateTime value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.DateTime(string? name, System.DateTime value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.DateTime2(string? name, System.DateTime value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.DateTimeOffset(string? name, System.DateTimeOffset value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Decimal(string? name, decimal value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Dictionary(string? name, System.Collections.IDictionary? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Double(string? name, double value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Guid(string? name, System.Guid value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Image(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Int16(string? name, short value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Int32(string? name, int value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Int64(string? name, long value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Json(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Money(string? name, decimal value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.NChar(string? name, char value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.NChar(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.NText(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.NVarChar(string? name, char value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.NVarChar(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.SByte(string? name, sbyte value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Single(string? name, float value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.SmallDateTime(string? name, System.DateTime value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.SmallMoney(string? name, decimal value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Text(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Time(string? name, System.TimeSpan value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Timestamp(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Udt(string? name, object? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.UInt16(string? name, ushort value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.UInt32(string? name, uint value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.UInt64(string? name, ulong value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.VarBinary(string? name, byte[]? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.VarBinary(string? name, System.Data.Linq.Binary? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.VarChar(string? name, char value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.VarChar(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Variant(string? name, object? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.VarNumeric(string? name, decimal value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Xml(string? name, string? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Xml(string? name, System.Xml.Linq.XDocument? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.DataParameter.Xml(string? name, System.Xml.XmlDocument? value) -> LinqToDB.Data.DataParameter!
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.Data.DataConnection! dataConnection, bool delete, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.ITable<T!>! table, bool delete, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.ITable<T!>! table, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.ITable<T!>! table, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.Merge<T>(this LinqToDB.ITable<T!>! table, System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, bool delete, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.Data.DataConnection! dataConnection, System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.ITable<T!>! table, bool delete, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.ITable<T!>! table, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.ITable<T!>! table, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, System.Collections.Generic.IEnumerable<T!>! source, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.LegacyMergeExtensions.MergeAsync<T>(this LinqToDB.ITable<T!>! table, System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, bool>!>! predicate, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.Data.QueryTraceOptions.Default.get -> LinqToDB.Data.QueryTraceOptions!
static LinqToDB.Data.QueryTraceOptions.Default.set -> void
static LinqToDB.Data.QueryTraceOptions.operator !=(LinqToDB.Data.QueryTraceOptions? left, LinqToDB.Data.QueryTraceOptions? right) -> bool
static LinqToDB.Data.QueryTraceOptions.operator ==(LinqToDB.Data.QueryTraceOptions? left, LinqToDB.Data.QueryTraceOptions? right) -> bool
static LinqToDB.Data.RetryPolicy.RetryPolicyBase.Suspended.get -> bool
static LinqToDB.Data.RetryPolicy.RetryPolicyBase.Suspended.set -> void
static LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Default.get -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.Data.RetryPolicy.RetryPolicyOptions.Default.set -> void
static LinqToDB.Data.RetryPolicy.RetryPolicyOptions.operator !=(LinqToDB.Data.RetryPolicy.RetryPolicyOptions? left, LinqToDB.Data.RetryPolicy.RetryPolicyOptions? right) -> bool
static LinqToDB.Data.RetryPolicy.RetryPolicyOptions.operator ==(LinqToDB.Data.RetryPolicy.RetryPolicyOptions? left, LinqToDB.Data.RetryPolicy.RetryPolicyOptions? right) -> bool
static LinqToDB.DataContextOptions.Default.get -> LinqToDB.DataContextOptions!
static LinqToDB.DataContextOptions.Default.set -> void
static LinqToDB.DataContextOptions.operator !=(LinqToDB.DataContextOptions? left, LinqToDB.DataContextOptions? right) -> bool
static LinqToDB.DataContextOptions.operator ==(LinqToDB.DataContextOptions? left, LinqToDB.DataContextOptions? right) -> bool
static LinqToDB.DataExtensions.Compile<TDc, TArg1, TArg2, TArg3, TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TArg2, TArg3, TResult>!>! query) -> System.Func<TDc, TArg1, TArg2, TArg3, TResult>!
static LinqToDB.DataExtensions.Compile<TDc, TArg1, TArg2, TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TArg2, TResult>!>! query) -> System.Func<TDc, TArg1, TArg2, TResult>!
static LinqToDB.DataExtensions.Compile<TDc, TArg1, TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<TDc, TArg1, TResult>!>! query) -> System.Func<TDc, TArg1, TResult>!
static LinqToDB.DataExtensions.Compile<TDc, TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<TDc, TResult>!>! query) -> System.Func<TDc, TResult>!
static LinqToDB.DataExtensions.CreateTable<T>(this LinqToDB.IDataContext! dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, string? statementHeader = null, string? statementFooter = null, LinqToDB.SqlQuery.DefaultNullable defaultNullable = LinqToDB.SqlQuery.DefaultNullable.None, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> LinqToDB.ITable<T>!
static LinqToDB.DataExtensions.CreateTableAsync<T>(this LinqToDB.IDataContext! dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, string? statementHeader = null, string? statementFooter = null, LinqToDB.SqlQuery.DefaultNullable defaultNullable = LinqToDB.SqlQuery.DefaultNullable.None, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.ITable<T>!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, string! tableName, System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, string! tableName, System.Collections.Generic.IEnumerable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T!>! items, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T!>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T!>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, System.Linq.IQueryable<T!>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T!>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTable<T>(this LinqToDB.IDataContext! db, System.Linq.IQueryable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Action<LinqToDB.ITable<T!>!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, string! tableName, System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, string! tableName, System.Collections.Generic.IEnumerable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T!>! items, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T!>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T!>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, System.Linq.IQueryable<T!>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T!>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.CreateTempTableAsync<T>(this LinqToDB.IDataContext! db, System.Linq.IQueryable<T!>! items, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>! setTable, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T!>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.Delete<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.DeleteAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.DropTable<T>(this LinqToDB.IDataContext! dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
static LinqToDB.DataExtensions.DropTable<T>(this LinqToDB.ITable<T>! table, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> void
static LinqToDB.DataExtensions.DropTableAsync<T>(this LinqToDB.IDataContext! dataContext, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.DataExtensions.DropTableAsync<T>(this LinqToDB.ITable<T>! table, string? tableName = null, string? databaseName = null, string? schemaName = null, bool? throwExceptionIfNotExists = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.DataExtensions.FromSql<TEntity>(this LinqToDB.IDataContext! dataContext, LinqToDB.RawSqlString sql, params object?[]! parameters) -> System.Linq.IQueryable<TEntity>!
static LinqToDB.DataExtensions.FromSql<TEntity>(this LinqToDB.IDataContext! dataContext, System.FormattableString! sql) -> System.Linq.IQueryable<TEntity>!
static LinqToDB.DataExtensions.FromSqlScalar<TEntity>(this LinqToDB.IDataContext! dataContext, System.FormattableString! sql) -> System.Linq.IQueryable<TEntity>!
static LinqToDB.DataExtensions.GetCte<T>(this LinqToDB.IDataContext! dataContext, string? cteTableName, System.Func<System.Linq.IQueryable<T>!, System.Linq.IQueryable<T>!>! cteBody) -> System.Linq.IQueryable<T>!
static LinqToDB.DataExtensions.GetCte<T>(this LinqToDB.IDataContext! dataContext, System.Func<System.Linq.IQueryable<T>!, System.Linq.IQueryable<T>!>! cteBody, string? cteTableName = null) -> System.Linq.IQueryable<T>!
static LinqToDB.DataExtensions.GetTable<T>(this LinqToDB.IDataContext! dataContext) -> LinqToDB.ITable<T!>!
static LinqToDB.DataExtensions.GetTable<T>(this LinqToDB.IDataContext! dataContext, object? instance, System.Reflection.MethodInfo! methodInfo, params object?[]! parameters) -> LinqToDB.ITable<T!>!
static LinqToDB.DataExtensions.Insert<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.Insert<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.InsertAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertOrReplace<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertOrUpdateColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.InsertOrReplace<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.InsertOrReplaceAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertOrUpdateColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertOrReplaceAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertWithDecimalIdentity<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> decimal
static LinqToDB.DataExtensions.InsertWithDecimalIdentity<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> decimal
static LinqToDB.DataExtensions.InsertWithDecimalIdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.DataExtensions.InsertWithDecimalIdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.DataExtensions.InsertWithIdentity<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> object!
static LinqToDB.DataExtensions.InsertWithIdentity<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> object!
static LinqToDB.DataExtensions.InsertWithIdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.DataExtensions.InsertWithIdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.DataExtensions.InsertWithInt32Identity<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.InsertWithInt32Identity<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.InsertWithInt32IdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertWithInt32IdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.InsertWithInt64Identity<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> long
static LinqToDB.DataExtensions.InsertWithInt64Identity<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> long
static LinqToDB.DataExtensions.InsertWithInt64IdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.InsertColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.DataExtensions.InsertWithInt64IdentityAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.DataExtensions.IntoTempTable<T>(this System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, LinqToDB.Data.BulkCopyOptions? options = null) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.IntoTempTable<T>(this System.Linq.IQueryable<T!>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Action<LinqToDB.ITable<T!>!>? action = null, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>? setTable = null) -> LinqToDB.TempTable<T!>!
static LinqToDB.DataExtensions.IntoTempTableAsync<T>(this System.Collections.Generic.IEnumerable<T!>! items, LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, LinqToDB.Data.BulkCopyOptions? options = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.IntoTempTableAsync<T>(this System.Linq.IQueryable<T!>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.IsTemporary, System.Func<LinqToDB.ITable<T!>!, System.Threading.Tasks.Task!>? action = null, System.Action<LinqToDB.Mapping.EntityMappingBuilder<T!>!>? setTable = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T!>!>!
static LinqToDB.DataExtensions.QueryFromExpression<TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TResult>!>!>! expression) -> System.Linq.IQueryable<TResult>!
static LinqToDB.DataExtensions.SelectQuery<TEntity>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<TEntity>!>! selector) -> System.Linq.IQueryable<TEntity>!
static LinqToDB.DataExtensions.TableFromExpression<TResult>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<LinqToDB.ITable<TResult>!>!>! expression) -> LinqToDB.ITable<TResult>!
static LinqToDB.DataExtensions.Update<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.UpdateColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.Update<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet) -> int
static LinqToDB.DataExtensions.UpdateAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, LinqToDB.UpdateColumnFilter<T>? columnFilter, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.UpdateAsync<T>(this LinqToDB.IDataContext! dataContext, T obj, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.DataExtensions.UseBulkCopyOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.Data.BulkCopyOptions!, LinqToDB.Data.BulkCopyOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseConnectionOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.Data.ConnectionOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseDataContextOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.DataContextOptions!, LinqToDB.DataContextOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseLinqOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.LinqOptions!, LinqToDB.LinqOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseOptions<TSet>(this LinqToDB.IDataContext! dataContext, System.Func<TSet!, TSet!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseQueryTraceOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.Data.QueryTraceOptions!, LinqToDB.Data.QueryTraceOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseRetryPolicyOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.Data.RetryPolicy.RetryPolicyOptions!, LinqToDB.Data.RetryPolicy.RetryPolicyOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataExtensions.UseSqlOptions(this LinqToDB.IDataContext! dataContext, System.Func<LinqToDB.SqlOptions!, LinqToDB.SqlOptions!>! optionSetter) -> System.IDisposable?
static LinqToDB.DataOptions.operator !=(LinqToDB.DataOptions? t1, LinqToDB.DataOptions? t2) -> bool
static LinqToDB.DataOptions.operator ==(LinqToDB.DataOptions? t1, LinqToDB.DataOptions? t2) -> bool
static LinqToDB.DataOptionsExtensions.RemoveInterceptor(this LinqToDB.DataOptions! options, LinqToDB.Interceptors.IInterceptor! interceptor) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.RemoveTranslator(this LinqToDB.DataOptions! options, LinqToDB.Linq.Translation.IMemberTranslator! translator) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAccess(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Access.AccessOptions!, LinqToDB.DataProvider.Access.AccessOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAdditionalMappingSchema(this LinqToDB.DataOptions! options, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAfterConnectionOpened(this LinqToDB.DataOptions! options, System.Action<System.Data.Common.DbConnection!>! afterConnectionOpened, System.Func<System.Data.Common.DbConnection!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>? afterConnectionOpenedAsync = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseAse(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Sybase.SybaseOptions!, LinqToDB.DataProvider.Sybase.SybaseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBeforeConnectionOpened(this LinqToDB.DataOptions! options, System.Action<System.Data.Common.DbConnection!>! afterConnectionOpening, System.Func<System.Data.Common.DbConnection!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>? afterConnectionOpeningAsync = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyCheckConstraints(this LinqToDB.DataOptions! options, bool? checkConstraints) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyDatabaseName(this LinqToDB.DataOptions! options, string? databaseName) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyFireTriggers(this LinqToDB.DataOptions! options, bool? fireTriggers) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyKeepIdentity(this LinqToDB.DataOptions! options, bool? keepIdentity) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyKeepNulls(this LinqToDB.DataOptions! options, bool? keepNulls) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyMaxBatchSize(this LinqToDB.DataOptions! options, int? maxBatchSize) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyMaxDegreeOfParallelism(this LinqToDB.DataOptions! options, int? maxDegreeOfParallelism) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyMaxParametersForBatch(this LinqToDB.DataOptions! options, int? maxParametersForBatch) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyNotifyAfter(this LinqToDB.DataOptions! options, int notifyAfter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyRowsCopiedCallback(this LinqToDB.DataOptions! options, System.Action<LinqToDB.Data.BulkCopyRowsCopied!>? rowsCopiedCallback) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopySchemaName(this LinqToDB.DataOptions! options, string? schemaName) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyServerName(this LinqToDB.DataOptions! options, string? serverName) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyTableLock(this LinqToDB.DataOptions! options, bool? tableLock) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyTableName(this LinqToDB.DataOptions! options, string? tableName) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyTableOptions(this LinqToDB.DataOptions! options, LinqToDB.TableOptions tableOptions) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyTimeout(this LinqToDB.DataOptions! options, int? bulkCopyTimeout) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyType(this LinqToDB.DataOptions! options, LinqToDB.Data.BulkCopyType bulkCopyType) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyUseInternalTransaction(this LinqToDB.DataOptions! options, bool? useInternalTransaction) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyUseParameters(this LinqToDB.DataOptions! options, bool useParameters) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseBulkCopyWithoutSession(this LinqToDB.DataOptions! options, bool withoutSession) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCacheSlidingExpiration(this LinqToDB.DataOptions! options, System.TimeSpan? cacheSlidingExpiration) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseClickHouse(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCoefficient(this LinqToDB.DataOptions! options, System.TimeSpan coefficient) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCommandTimeout(this LinqToDB.DataOptions! options, int? commandTimeout) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCompareNulls(this LinqToDB.DataOptions! options, LinqToDB.CompareNulls compareNulls) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseCompareNullsAsValues(this LinqToDB.DataOptions! options, bool compareNullsAsValues) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConfiguration(this LinqToDB.DataOptions! options, string? configurationString) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConfiguration(this LinqToDB.DataOptions! options, string? configurationString, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConfigurationString(this LinqToDB.DataOptions! options, string! configurationString, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConfigurationString(this LinqToDB.DataOptions! options, string? configurationString) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnection(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnection(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbConnection! connection, bool? disposeConnection) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnection(this LinqToDB.DataOptions! options, System.Data.Common.DbConnection! connection) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnectionFactory(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnectionFactory(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnectionString(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnectionString(this LinqToDB.DataOptions! options, string! connectionString) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseConnectionString(this LinqToDB.DataOptions! options, string! providerName, string! connectionString) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDataProvider(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDataProviderFactory(this LinqToDB.DataOptions! options, System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider!>! dataProviderFactory) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDB2(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.DB2.DB2Options!, LinqToDB.DataProvider.DB2.DB2Options!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDefaultRetryPolicyFactory(this LinqToDB.DataOptions! options) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDisableQueryCache(this LinqToDB.DataOptions! options, bool disableQueryCache) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseDoNotClearOrderBys(this LinqToDB.DataOptions! options, bool doNotClearOrderBys) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseEnableConstantExpressionInOrderBy(this LinqToDB.DataOptions! options, bool enableConstantExpressionInOrderBy) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseEnableContextSchemaEdit(this LinqToDB.DataOptions! options, bool enableContextSchemaEdit) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseExponentialBase(this LinqToDB.DataOptions! options, double exponentialBase) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFactory(this LinqToDB.DataOptions! options, System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>? factory) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Firebird.FirebirdVersion dialect = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Firebird.FirebirdVersion dialect = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseFirebird(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Firebird.FirebirdOptions!, LinqToDB.DataProvider.Firebird.FirebirdOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseGenerateExpressionTest(this LinqToDB.DataOptions! options, bool generateExpressionTest) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseGenerateFinalAliases(this LinqToDB.DataOptions! options, bool generateFinalAliases) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseGuardGrouping(this LinqToDB.DataOptions! options, bool guardGrouping) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseIgnoreEmptyUpdate(this LinqToDB.DataOptions! options, bool ignoreEmptyUpdate) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInformix(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Informix.InformixOptions!, LinqToDB.DataProvider.Informix.InformixOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInterceptor(this LinqToDB.DataOptions! options, LinqToDB.Interceptors.IInterceptor! interceptor) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInterceptors(this LinqToDB.DataOptions! options, params LinqToDB.Interceptors.IInterceptor![]! interceptors) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseInterceptors(this LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<LinqToDB.Interceptors.IInterceptor!>! interceptors) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseKeepDistinctOrdered(this LinqToDB.DataOptions! options, bool keepDistinctOrdered) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMappingSchema(this LinqToDB.DataOptions! options, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMaxDelay(this LinqToDB.DataOptions! options, System.TimeSpan defaultMaxDelay) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMaxRetryCount(this LinqToDB.DataOptions! options, int maxRetryCount) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMemberTranslator(this LinqToDB.DataOptions! options, LinqToDB.Linq.Translation.IMemberTranslator! translator) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMemberTranslator(this LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<LinqToDB.Linq.Translation.IMemberTranslator!>! translators) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.MySql.MySqlVersion dialect = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.MySql.MySqlVersion dialect = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseMySql(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.MySql.MySqlOptions!, LinqToDB.DataProvider.MySql.MySqlOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOnEntityDescriptorCreated(this LinqToDB.DataOptions! options, System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>! onEntityDescriptorCreated) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOptimizeJoins(this LinqToDB.DataOptions! options, bool optimizeJoins) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.Oracle.OracleVersion dialect = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion dialect = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseOracle(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.Oracle.OracleOptions!, LinqToDB.DataProvider.Oracle.OracleOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseParameterizeTakeSkip(this LinqToDB.DataOptions! options, bool parameterizeTakeSkip) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePostgreSQL(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion dialect = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect, System.Func<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePostgreSQL(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion dialect = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect, System.Func<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePostgreSQL(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePostgreSQL(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePreferApply(this LinqToDB.DataOptions! options, bool preferApply) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePreferExistsForScalar(this LinqToDB.DataOptions! options, bool preferExistsForScalar) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UsePreloadGroups(this LinqToDB.DataOptions! options, bool preloadGroups) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseProvider(this LinqToDB.DataOptions! options, string! providerName) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseRandomFactor(this LinqToDB.DataOptions! options, double randomFactor) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseRetryPolicy(this LinqToDB.DataOptions! options, LinqToDB.Data.RetryPolicy.IRetryPolicy! retryPolicy) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSapHana(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SapHana.SapHanaOptions!, LinqToDB.DataProvider.SapHana.SapHanaOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlCe(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SqlCe.SqlCeOptions!, LinqToDB.DataProvider.SqlCe.SqlCeOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlCe(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SqlCe.SqlCeOptions!, LinqToDB.DataProvider.SqlCe.SqlCeOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSQLite(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SQLite.SQLiteOptions!, LinqToDB.DataProvider.SQLite.SQLiteOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.SqlServer.SqlServerVersion dialect = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, string! connectionString, LinqToDB.DataProvider.SqlServer.SqlServerVersion dialect = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>? optionSetter = null) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, string! connectionString, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseSqlServer(this LinqToDB.DataOptions! options, System.Func<LinqToDB.DataProvider.SqlServer.SqlServerOptions!, LinqToDB.DataProvider.SqlServer.SqlServerOptions!>! optionSetter) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTraceLevel(this LinqToDB.DataOptions! options, System.Diagnostics.TraceLevel traceLevel) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTraceMapperExpression(this LinqToDB.DataOptions! options, bool traceMapperExpression) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTraceSwitch(this LinqToDB.DataOptions! options, System.Diagnostics.TraceSwitch! traceSwitch) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTraceWith(this LinqToDB.DataOptions! options, System.Action<string!, string!, System.Diagnostics.TraceLevel>! write) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTracing(this LinqToDB.DataOptions! options, System.Action<LinqToDB.Data.TraceInfo!>! onTrace) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTracing(this LinqToDB.DataOptions! options, System.Diagnostics.TraceLevel traceLevel, System.Action<LinqToDB.Data.TraceInfo!>! onTrace) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.UseTransaction(this LinqToDB.DataOptions! options, LinqToDB.DataProvider.IDataProvider! dataProvider, System.Data.Common.DbTransaction! transaction) -> LinqToDB.DataOptions!
static LinqToDB.DataOptionsExtensions.WithAfterConnectionOpened(this LinqToDB.Data.ConnectionOptions! options, System.Action<System.Data.Common.DbConnection!>! afterConnectionOpened, System.Func<System.Data.Common.DbConnection!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>? afterConnectionOpenedAsync = null) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithBeforeConnectionOpened(this LinqToDB.Data.ConnectionOptions! options, System.Action<System.Data.Common.DbConnection!>! afterConnectionOpening, System.Func<System.Data.Common.DbConnection!, System.Threading.CancellationToken, System.Threading.Tasks.Task!>? afterConnectionOpeningAsync = null) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithBulkCopyTimeout(this LinqToDB.Data.BulkCopyOptions! options, int? bulkCopyTimeout) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithBulkCopyType(this LinqToDB.Data.BulkCopyOptions! options, LinqToDB.Data.BulkCopyType bulkCopyType) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithCacheSlidingExpiration(this LinqToDB.LinqOptions! options, System.TimeSpan? cacheSlidingExpiration) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithCheckConstraints(this LinqToDB.Data.BulkCopyOptions! options, bool? checkConstraints) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithCoefficient(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, System.TimeSpan coefficient) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithCommandTimeout(this LinqToDB.DataContextOptions! options, int? commandTimeout) -> LinqToDB.DataContextOptions!
static LinqToDB.DataOptionsExtensions.WithCompareNulls(this LinqToDB.LinqOptions! options, LinqToDB.CompareNulls compareNulls) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithCompareNullsAsValues(this LinqToDB.LinqOptions! options, bool compareNullsAsValues) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithConfigurationString(this LinqToDB.Data.ConnectionOptions! options, string? configurationString) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithConnectionFactory(this LinqToDB.Data.ConnectionOptions! options, System.Func<LinqToDB.DataOptions!, System.Data.Common.DbConnection!>! connectionFactory) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithConnectionString(this LinqToDB.Data.ConnectionOptions! options, string? connectionString) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDatabaseName(this LinqToDB.Data.BulkCopyOptions! options, string? databaseName) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithDataProvider(this LinqToDB.Data.ConnectionOptions! options, LinqToDB.DataProvider.IDataProvider? dataProvider) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDataProviderFactory(this LinqToDB.Data.ConnectionOptions! options, System.Func<LinqToDB.Data.ConnectionOptions!, LinqToDB.DataProvider.IDataProvider!>! dataProviderFactory) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDbConnection(this LinqToDB.Data.ConnectionOptions! options, System.Data.Common.DbConnection? connection) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDbTransaction(this LinqToDB.Data.ConnectionOptions! options, System.Data.Common.DbTransaction! transaction) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDisableQueryCache(this LinqToDB.LinqOptions! options, bool disableQueryCache) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithDisposeConnection(this LinqToDB.Data.ConnectionOptions! options, bool? disposeConnection) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithDoNotClearOrderBys(this LinqToDB.LinqOptions! options, bool doNotClearOrderBys) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithEnableConstantExpressionInOrderBy(this LinqToDB.SqlOptions! options, bool enableConstantExpressionInOrderBy) -> LinqToDB.SqlOptions!
static LinqToDB.DataOptionsExtensions.WithEnableContextSchemaEdit(this LinqToDB.LinqOptions! options, bool enableContextSchemaEdit) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithExponentialBase(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, double exponentialBase) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithFactory(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, System.Func<LinqToDB.Data.DataConnection!, LinqToDB.Data.RetryPolicy.IRetryPolicy?>? factory) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithFireTriggers(this LinqToDB.Data.BulkCopyOptions! options, bool? fireTriggers) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithGenerateExpressionTest(this LinqToDB.LinqOptions! options, bool generateExpressionTest) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithGenerateFinalAliases(this LinqToDB.SqlOptions! options, bool generateFinalAliases) -> LinqToDB.SqlOptions!
static LinqToDB.DataOptionsExtensions.WithGuardGrouping(this LinqToDB.LinqOptions! options, bool guardGrouping) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithIgnoreEmptyUpdate(this LinqToDB.LinqOptions! options, bool ignoreEmptyUpdate) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithKeepDistinctOrdered(this LinqToDB.LinqOptions! options, bool keepDistinctOrdered) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithKeepIdentity(this LinqToDB.Data.BulkCopyOptions! options, bool? keepIdentity) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithKeepNulls(this LinqToDB.Data.BulkCopyOptions! options, bool? keepNulls) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithMappingSchema(this LinqToDB.Data.ConnectionOptions! options, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithMaxBatchSize(this LinqToDB.Data.BulkCopyOptions! options, int? maxBatchSize) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithMaxDegreeOfParallelism(this LinqToDB.Data.BulkCopyOptions! options, int? maxDegreeOfParallelism) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithMaxDelay(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, System.TimeSpan maxDelay) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithMaxParametersForBatch(this LinqToDB.Data.BulkCopyOptions! options, int? maxParametersForBatch) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithMaxRetryCount(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, int maxRetryCount) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithNotifyAfter(this LinqToDB.Data.BulkCopyOptions! options, int notifyAfter) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithOnEntityDescriptorCreated(this LinqToDB.Data.ConnectionOptions! options, System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>! onEntityDescriptorCreated) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithOnTrace(this LinqToDB.Data.QueryTraceOptions! options, System.Action<LinqToDB.Data.TraceInfo!>! onTrace) -> LinqToDB.Data.QueryTraceOptions!
static LinqToDB.DataOptionsExtensions.WithOptimizeJoins(this LinqToDB.LinqOptions! options, bool optimizeJoins) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithParameterizeTakeSkip(this LinqToDB.LinqOptions! options, bool parameterizeTakeSkip) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithPreferApply(this LinqToDB.LinqOptions! options, bool preferApply) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithPreferExistsForScalar(this LinqToDB.LinqOptions! options, bool preferExistsForScalar) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithPreloadGroups(this LinqToDB.LinqOptions! options, bool preloadGroups) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithProviderName(this LinqToDB.Data.ConnectionOptions! options, string! providerName) -> LinqToDB.Data.ConnectionOptions!
static LinqToDB.DataOptionsExtensions.WithRandomFactor(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, double randomFactor) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithRetryPolicy(this LinqToDB.Data.RetryPolicy.RetryPolicyOptions! options, LinqToDB.Data.RetryPolicy.IRetryPolicy! retryPolicy) -> LinqToDB.Data.RetryPolicy.RetryPolicyOptions!
static LinqToDB.DataOptionsExtensions.WithRowsCopiedCallback(this LinqToDB.Data.BulkCopyOptions! options, System.Action<LinqToDB.Data.BulkCopyRowsCopied!>? rowsCopiedCallback) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithSchemaName(this LinqToDB.Data.BulkCopyOptions! options, string? schemaName) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithServerName(this LinqToDB.Data.BulkCopyOptions! options, string? serverName) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithTableLock(this LinqToDB.Data.BulkCopyOptions! options, bool? tableLock) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithTableName(this LinqToDB.Data.BulkCopyOptions! options, string? tableName) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithTableOptions(this LinqToDB.Data.BulkCopyOptions! options, LinqToDB.TableOptions tableOptions) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithTraceLevel(this LinqToDB.Data.QueryTraceOptions! options, System.Diagnostics.TraceLevel traceLevel) -> LinqToDB.Data.QueryTraceOptions!
static LinqToDB.DataOptionsExtensions.WithTraceMapperExpression(this LinqToDB.LinqOptions! options, bool traceMapperExpression) -> LinqToDB.LinqOptions!
static LinqToDB.DataOptionsExtensions.WithUseInternalTransaction(this LinqToDB.Data.BulkCopyOptions! options, bool? useInternalTransaction) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithUseParameters(this LinqToDB.Data.BulkCopyOptions! options, bool useParameters) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithWithoutSession(this LinqToDB.Data.BulkCopyOptions! options, bool withoutSession) -> LinqToDB.Data.BulkCopyOptions!
static LinqToDB.DataOptionsExtensions.WithWriteTrace(this LinqToDB.Data.QueryTraceOptions! options, System.Action<string?, string?, System.Diagnostics.TraceLevel>! write) -> LinqToDB.Data.QueryTraceOptions!
static LinqToDB.DataProvider.Access.AccessHints.SubQueryHint<TSource>(this LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Access.AccessHints.WithOwnerAccessOption<TSource>(this LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Access.AccessOptions.operator !=(LinqToDB.DataProvider.Access.AccessOptions? left, LinqToDB.DataProvider.Access.AccessOptions? right) -> bool
static LinqToDB.DataProvider.Access.AccessOptions.operator ==(LinqToDB.DataProvider.Access.AccessOptions? left, LinqToDB.DataProvider.Access.AccessOptions? right) -> bool
static LinqToDB.DataProvider.Access.AccessSpecificExtensions.AsAccess<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.Access.IAccessSpecificTable<TSource>!
static LinqToDB.DataProvider.Access.AccessSpecificExtensions.AsAccess<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.Access.IAccessSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Access.AccessTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Access.AccessTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Access.AccessTools.CreateDatabase(string! databaseName, bool deleteIfExists = false, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.Ace) -> void
static LinqToDB.DataProvider.Access.AccessTools.CreateDatabase(string! databaseName, bool deleteIfExists = false, string! provider = "Microsoft.Jet.OLEDB.4.0") -> void
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Access.AccessTools.DropDatabase(string! databaseName, string? extension = null) -> void
static LinqToDB.DataProvider.Access.AccessTools.GetDataProvider(LinqToDB.DataProvider.Access.AccessVersion version = LinqToDB.DataProvider.Access.AccessVersion.AutoDetect, LinqToDB.DataProvider.Access.AccessProvider provider = LinqToDB.DataProvider.Access.AccessProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.FinalHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.FinalHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.FinalInScopeHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.FinalInScopeHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAllSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAntiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAnyHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalAsOfHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinGlobalSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinOuterHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.JoinSemiHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseHints.SettingsHint<TSource>(this LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>! query, string! hintFormat, params object?[]! hintParameters) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.operator !=(LinqToDB.DataProvider.ClickHouse.ClickHouseOptions? left, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions? right) -> bool
static LinqToDB.DataProvider.ClickHouse.ClickHouseOptions.operator ==(LinqToDB.DataProvider.ClickHouse.ClickHouseOptions? left, LinqToDB.DataProvider.ClickHouse.ClickHouseOptions? right) -> bool
static LinqToDB.DataProvider.ClickHouse.ClickHouseSpecificExtensions.AsClickHouse<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificTable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseSpecificExtensions.AsClickHouse<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.ClickHouse.IClickHouseSpecificQueryable<TSource>!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTools.GetDataProvider(LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider = LinqToDB.DataProvider.ClickHouse.ClickHouseProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.ClickHouse.ClickHouseTransientExceptionDetector.IsHandled(System.Exception! ex, out System.Collections.Generic.IEnumerable<int>? errorNumbers) -> bool
static LinqToDB.DataProvider.ClickHouse.ClickHouseTransientExceptionDetector.ShouldRetryOn(System.Exception! ex) -> bool
static LinqToDB.DataProvider.DB2.DB2Options.operator !=(LinqToDB.DataProvider.DB2.DB2Options? left, LinqToDB.DataProvider.DB2.DB2Options? right) -> bool
static LinqToDB.DataProvider.DB2.DB2Options.operator ==(LinqToDB.DataProvider.DB2.DB2Options? left, LinqToDB.DataProvider.DB2.DB2Options? right) -> bool
static LinqToDB.DataProvider.DB2.DB2Tools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.DB2.DB2Tools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.LUW) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.LUW) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.DB2.DB2Tools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.LUW) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.DB2.DB2Tools.GetDataProvider(LinqToDB.DataProvider.DB2.DB2Version version = LinqToDB.DataProvider.DB2.DB2Version.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.DB2.DB2Tools.ResolveDB2(string! path) -> void
static LinqToDB.DataProvider.DB2.DB2Tools.ResolveDB2(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.Firebird.FirebirdExtensions.Firebird(this LinqToDB.DataProvider.Firebird.IFirebirdExtensions? ext) -> LinqToDB.DataProvider.Firebird.IFirebirdExtensions?
static LinqToDB.DataProvider.Firebird.FirebirdExtensions.UuidToChar(this LinqToDB.DataProvider.Firebird.IFirebirdExtensions? ext, System.Guid? guid) -> string?
static LinqToDB.DataProvider.Firebird.FirebirdOptions.operator !=(LinqToDB.DataProvider.Firebird.FirebirdOptions? left, LinqToDB.DataProvider.Firebird.FirebirdOptions? right) -> bool
static LinqToDB.DataProvider.Firebird.FirebirdOptions.operator ==(LinqToDB.DataProvider.Firebird.FirebirdOptions? left, LinqToDB.DataProvider.Firebird.FirebirdOptions? right) -> bool
static LinqToDB.DataProvider.Firebird.FirebirdTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Firebird.FirebirdTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Firebird.FirebirdTools.ClearAllPools() -> void
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Firebird.FirebirdTools.GetDataProvider(LinqToDB.DataProvider.Firebird.FirebirdVersion version = LinqToDB.DataProvider.Firebird.FirebirdVersion.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Firebird.FirebirdTools.ResolveFirebird(string! path) -> void
static LinqToDB.DataProvider.Firebird.FirebirdTools.ResolveFirebird(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.Informix.InformixOptions.operator !=(LinqToDB.DataProvider.Informix.InformixOptions? left, LinqToDB.DataProvider.Informix.InformixOptions? right) -> bool
static LinqToDB.DataProvider.Informix.InformixOptions.operator ==(LinqToDB.DataProvider.Informix.InformixOptions? left, LinqToDB.DataProvider.Informix.InformixOptions? right) -> bool
static LinqToDB.DataProvider.Informix.InformixTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Informix.InformixTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Informix.InformixTools.GetDataProvider(LinqToDB.DataProvider.Informix.InformixProvider provider = LinqToDB.DataProvider.Informix.InformixProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.MySql.MySqlExtensions.Match(this LinqToDB.DataProvider.MySql.IMySqlExtensions? ext, LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier modifier, string! search, params object?[]! columns) -> bool
static LinqToDB.DataProvider.MySql.MySqlExtensions.Match(this LinqToDB.DataProvider.MySql.IMySqlExtensions? ext, string! search, params object?[]! columns) -> bool
static LinqToDB.DataProvider.MySql.MySqlExtensions.MatchRelevance(this LinqToDB.DataProvider.MySql.IMySqlExtensions? ext, LinqToDB.DataProvider.MySql.MySqlExtensions.MatchModifier modifier, string! search, params object?[]! columns) -> double
static LinqToDB.DataProvider.MySql.MySqlExtensions.MatchRelevance(this LinqToDB.DataProvider.MySql.IMySqlExtensions? ext, string! search, params object?[]! columns) -> double
static LinqToDB.DataProvider.MySql.MySqlExtensions.MySql(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.DataProvider.MySql.IMySqlExtensions?
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BatchedKeyAccessInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BkaInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BlockNestedLoopInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.BnlInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.DerivedConditionPushDownInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForceKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareNoWaitHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ForUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.GroupIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.HashJoinInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IgnoreKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.IndexMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinFixedOrderInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinOrderInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinPrefixInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.JoinSuffixInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.LockInShareModeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MaxExecutionTimeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MergeInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.MrrHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBatchedKeyAccessInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBkaInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBlockNestedLoopInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoBnlInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoDerivedConditionPushDownInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoGroupIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoHashJoinInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIcpHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoIndexMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoJoinIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMergeInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoMrrHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoOrderIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoRangeOptimizationHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoSemiJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoSemiJoinHintWithQueryBlock<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.NoSkipScanHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.OrderIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.Query.MaxExecutionTime(int value) -> string!
static LinqToDB.DataProvider.MySql.MySqlHints.QueryBlockHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.QueryHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.ResourceGroupHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, string! value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SemiJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SemiJoinHintWithQueryBlock<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, params string![]! values) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SetVarHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! query, string! value) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SkipScanHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, string! hint2, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, string! hint2, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TableIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint<TSource, TParam>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>! source, string! hint, params object![]! hintParameters) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseIndexHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForGroupByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForJoinHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyForOrderByHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlHints.UseKeyHint<TSource>(this LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlOptions.operator !=(LinqToDB.DataProvider.MySql.MySqlOptions? left, LinqToDB.DataProvider.MySql.MySqlOptions? right) -> bool
static LinqToDB.DataProvider.MySql.MySqlOptions.operator ==(LinqToDB.DataProvider.MySql.MySqlOptions? left, LinqToDB.DataProvider.MySql.MySqlOptions? right) -> bool
static LinqToDB.DataProvider.MySql.MySqlSpecificExtensions.AsMySql<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.MySql.IMySqlSpecificTable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlSpecificExtensions.AsMySql<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.MySql.IMySqlSpecificQueryable<TSource>!
static LinqToDB.DataProvider.MySql.MySqlTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.MySql.MySqlTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.MySql.MySqlTools.GetDataProvider(LinqToDB.DataProvider.MySql.MySqlVersion version = LinqToDB.DataProvider.MySql.MySqlVersion.AutoDetect, LinqToDB.DataProvider.MySql.MySqlProvider provider = LinqToDB.DataProvider.MySql.MySqlProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.MySql.MySqlTools.ResolveMySql(string! path, string? assemblyName) -> void
static LinqToDB.DataProvider.MySql.MySqlTools.ResolveMySql(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.Oracle.OracleHints.AllRowsHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.AppendHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.AppendValuesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CacheHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CacheInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusteringHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ClusterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ContainersHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! hint) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.CursorSharingExactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DisableParallelDmlHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DrivingSiteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DrivingSiteInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.DynamicSamplingHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, int value) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.EnableParallelDmlHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FactInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FirstRowsHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FreshMaterializedViewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FreshMVHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FullHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.FullInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.GroupingHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.HashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.HashInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.Hint.Containers(string! hint) -> string!
static LinqToDB.DataProvider.Oracle.OracleHints.Hint.FirstRows(int value) -> string!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexCombineHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexFastFullScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexFFSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSkipScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSAscHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSDescHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.IndexSSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryPruningHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.InMemoryPruningInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.LeadingHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MergeInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ModelMinAnalysisHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.MonitorHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NativeFullOuterJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoAppendHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoCacheHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoCacheInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoClusteringHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoExpandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoExpandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoFactHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoFactInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexFastFullScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexFFSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexSkipScanHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoIndexSSHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryPruningHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoInMemoryPruningInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMergeInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoMonitorHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoNativeFullOuterJoinHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoParallelIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params object![]! values) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoParallelInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQSkewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPQSkewInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushPredicateInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPushSubQueriesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPxJoinFilterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoPxJoinFilterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoQueryTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoStarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoStarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseBandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseCubeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseNestedLoopHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoUseNLHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoXmlIndexRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.NoXmlQueryRewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.OptParamHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params string![]! parameters) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.OrderedHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelAutoHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelDefaultHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelDefaultHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, int value) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params object![]! values) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.ParallelManualHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQConcurrentUnionHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQDistributeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, string! outerDistribution, string! innerDistribution) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterNoneHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterRandomHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQFilterSerialHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQSkewHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PQSkewInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushPredicateInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PushSubQueriesHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PxJoinFilterHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.PxJoinFilterInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.QueryHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.RewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.RewriteHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.StarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.StarTransformationHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TableHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint<TSource, TParam>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! source, string! hint, params object![]! hintParameters) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UnnestHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseBandHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseConcatHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseConcatHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, string! queryBlock) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseCubeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseHashHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseMergeHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNestedLoopHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNestedLoopWithIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNLHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleHints.UseNLWithIndexHint<TSource>(this LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleOptions.operator !=(LinqToDB.DataProvider.Oracle.OracleOptions? left, LinqToDB.DataProvider.Oracle.OracleOptions? right) -> bool
static LinqToDB.DataProvider.Oracle.OracleOptions.operator ==(LinqToDB.DataProvider.Oracle.OracleOptions? left, LinqToDB.DataProvider.Oracle.OracleOptions? right) -> bool
static LinqToDB.DataProvider.Oracle.OracleSpecificExtensions.AsOracle<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.Oracle.IOracleSpecificTable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleSpecificExtensions.AsOracle<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.Oracle.IOracleSpecificQueryable<TSource>!
static LinqToDB.DataProvider.Oracle.OracleTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Oracle.OracleTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Oracle.OracleTools.DefaultVersion.get -> LinqToDB.DataProvider.Oracle.OracleVersion
static LinqToDB.DataProvider.Oracle.OracleTools.DefaultVersion.set -> void
static LinqToDB.DataProvider.Oracle.OracleTools.GetDataProvider(LinqToDB.DataProvider.Oracle.OracleVersion version = LinqToDB.DataProvider.Oracle.OracleVersion.AutoDetect, LinqToDB.DataProvider.Oracle.OracleProvider provider = LinqToDB.DataProvider.Oracle.OracleProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Oracle.OracleTools.GetXmlData<T>(LinqToDB.DataOptions! options, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Collections.Generic.IEnumerable<T>! data) -> string!
static LinqToDB.DataProvider.Oracle.OracleTools.OracleXmlTable<T>(this LinqToDB.IDataContext! dataContext, string! xmlData) -> LinqToDB.ITable<T!>!
static LinqToDB.DataProvider.Oracle.OracleTools.OracleXmlTable<T>(this LinqToDB.IDataContext! dataContext, System.Collections.Generic.IEnumerable<T!>! data) -> LinqToDB.ITable<T!>!
static LinqToDB.DataProvider.Oracle.OracleTools.OracleXmlTable<T>(this LinqToDB.IDataContext! dataContext, System.Func<string!>! xmlData) -> LinqToDB.ITable<T!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAggregate<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T[]!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAggregate<T>(this LinqToDB.Sql.ISqlExtension? ext, T expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.AnalyticFunctions.IAnalyticFunctionWithoutWindow<T[]!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAggregate<TEntity, TV>(this System.Collections.Generic.IEnumerable<TEntity>! source, System.Func<TEntity, TV>! expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<TEntity, TV[]!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAggregate<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<TEntity, TV[]!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAggregate<TEntity, TV>(this System.Linq.IQueryable<TEntity>! source, System.Linq.Expressions.Expression<System.Func<TEntity, TV>!>! expr, LinqToDB.Sql.AggregateModifier modifier) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<TEntity, TV[]!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayAppend<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T element) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayCat<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayDims<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayLength<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, int dimension) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayLower<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, int dimension) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayNDims<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayPosition<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T element) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayPosition<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T element, int start) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayPositions<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T element) -> int[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayPrepend<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T element, T[]! array) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayRemove<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T element) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayReplace<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, T oldElement, T newElement) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayToString<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, string! delimiter) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayToString<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, string! delimiter, string! nullString) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ArrayUpper<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array, int dimension) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Cardinality<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array) -> int
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ConcatArrays<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, params T[]![]! arrays) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ConcatArrays<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]![]! array2) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ConcatArrays<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]![]! array1, T[]! array2) -> T[]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ContainedBy<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Contains<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentCatalog(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentDatabase(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentRole(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentSchema(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentSchemas(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string![]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentSchemas(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc, bool includeImplicit) -> string![]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.CurrentUser(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GenerateSeries(this LinqToDB.IDataContext! dc, int start, int stop) -> System.Linq.IQueryable<int>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GenerateSeries(this LinqToDB.IDataContext! dc, int start, int stop, int step) -> System.Linq.IQueryable<int>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GenerateSeries(this LinqToDB.IDataContext! dc, System.DateTime start, System.DateTime stop, System.TimeSpan step) -> System.Linq.IQueryable<System.DateTime>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GenerateSubscripts<T>(this LinqToDB.IDataContext! dc, T[]! array, int dimension) -> System.Linq.IQueryable<int>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GenerateSubscripts<T>(this LinqToDB.IDataContext! dc, T[]! array, int dimension, bool reverse) -> System.Linq.IQueryable<int>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GreaterThan<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.GreaterThanOrEqual<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.LessThan<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.LessThanOrEqual<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Overlaps<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T[]! array1, T[]! array2) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.PostgreSQL(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions?
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.SessionUser(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.StringToArray(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, string! str, string! delimiter) -> string![]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.StringToArray(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, string! str, string! delimiter, string! nullString) -> string![]!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Unnest<T>(this LinqToDB.IDataContext! dc, T[]! array) -> System.Linq.IQueryable<T>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.UnnestWithOrdinality<T>(this LinqToDB.IDataContext! dc, T[]! array) -> System.Linq.IQueryable<LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Ordinality<T>!>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsEqualToAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsGreaterThanAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsGreaterThanOrEqualToAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsLessThanAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsLessThanOrEqualToAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.ValueIsNotEqualToAny<T>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, T value, T[]! array) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLExtensions.Version(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLExtensions? ext, LinqToDB.IDataContext! dc) -> string!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForKeyShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForNoKeyUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForShareSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateNoWaitHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.ForUpdateSkipLockedHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! query, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! source, string! hint, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLHints.SubQueryTableHint<TSource>(this LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>! source, string! hint, string! hint2, params LinqToDB.Sql.SqlID[]! tableIDs) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.operator !=(LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions? left, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions? right) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions.operator ==(LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions? left, LinqToDB.DataProvider.PostgreSQL.PostgreSQLOptions? right) -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLSpecificExtensions.AsPostgreSQL<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.PostgreSQL.IPostgreSQLSpecificQueryable<TSource>!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.GetDataProvider(LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version = LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.ResolvePostgreSQL(string! path) -> void
static LinqToDB.DataProvider.PostgreSQL.PostgreSQLTools.ResolvePostgreSQL(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.SapHana.SapHanaOptions.operator !=(LinqToDB.DataProvider.SapHana.SapHanaOptions? left, LinqToDB.DataProvider.SapHana.SapHanaOptions? right) -> bool
static LinqToDB.DataProvider.SapHana.SapHanaOptions.operator ==(LinqToDB.DataProvider.SapHana.SapHanaOptions? left, LinqToDB.DataProvider.SapHana.SapHanaOptions? right) -> bool
static LinqToDB.DataProvider.SapHana.SapHanaTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SapHana.SapHanaTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SapHana.SapHanaTools.GetDataProvider(LinqToDB.DataProvider.SapHana.SapHanaProvider provider = LinqToDB.DataProvider.SapHana.SapHanaProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SapHana.SapHanaTools.ResolveSapHana(string! path, string? assemblyName = null) -> void
static LinqToDB.DataProvider.SapHana.SapHanaTools.ResolveSapHana(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TableHint<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint<TSource, TParam>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! source, string! hint, params object![]! hintParameters) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithHoldLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithHoldLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithIndex<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithIndex<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table, string! indexName) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithNoLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithNoLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithPagLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithPagLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithRowLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithRowLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithTabLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithTabLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithUpdLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithUpdLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithXLock<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeHints.WithXLockInScope<TSource>(this LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeOptions.operator !=(LinqToDB.DataProvider.SqlCe.SqlCeOptions? left, LinqToDB.DataProvider.SqlCe.SqlCeOptions? right) -> bool
static LinqToDB.DataProvider.SqlCe.SqlCeOptions.operator ==(LinqToDB.DataProvider.SqlCe.SqlCeOptions? left, LinqToDB.DataProvider.SqlCe.SqlCeOptions? right) -> bool
static LinqToDB.DataProvider.SqlCe.SqlCeSpecificExtensions.AsSqlCe<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeSpecificExtensions.AsSqlCe<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.SqlCe.ISqlCeSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlCe.SqlCeTools.CreateDatabase(string! databaseName, bool deleteIfExists = false) -> void
static LinqToDB.DataProvider.SqlCe.SqlCeTools.CreateDataConnection(string! connectionString) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlCe.SqlCeTools.CreateDataConnection(System.Data.Common.DbConnection! connection) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlCe.SqlCeTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlCe.SqlCeTools.DropDatabase(string! databaseName) -> void
static LinqToDB.DataProvider.SqlCe.SqlCeTools.GetDataProvider() -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SqlCe.SqlCeTools.ResolveSqlCe(string! path) -> void
static LinqToDB.DataProvider.SqlCe.SqlCeTools.ResolveSqlCe(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3AutoMerge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int segments) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3IntegrityCheck<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3MatchInfo<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> byte[]!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3MatchInfo<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! format) -> byte[]!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Merge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int blocks, int segments) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Offsets<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Optimize<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Rebuild<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! startMatch) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! startMatch, string! endMatch) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! startMatch, string! endMatch, string! ellipses) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! startMatch, string! endMatch, string! ellipses, int columnIndex) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS3Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, string! startMatch, string! endMatch, string! ellipses, int columnIndex, int tokensNumber) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5AutoMerge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int value) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5bm25<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> double
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5bm25<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, params double[]! weights) -> double
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5CrisisMerge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int value) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Delete<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int rowid, TEntity! record) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5DeleteAll<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Highlight<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, int columnIndex, string! startMatch, string! endMatch) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5IntegrityCheck<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Merge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int value) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Optimize<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Pgsz<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int value) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Rank<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, string! function) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Rebuild<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5Snippet<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity, int columnIndex, string! startMatch, string! endMatch, string! ellipses, int tokensNumber) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.FTS5UserMerge<TEntity>(this LinqToDB.Data.DataConnection! dc, LinqToDB.ITable<TEntity!>! table, int value) -> void
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.Match(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, object? entityOrColumn, string! match) -> bool
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.MatchTable<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, LinqToDB.ITable<TEntity!>! table, string! match) -> System.Linq.IQueryable<TEntity!>!
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.Rank<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> double?
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.RowId<TEntity>(this LinqToDB.DataProvider.SQLite.ISQLiteExtensions? ext, TEntity! entity) -> int
static LinqToDB.DataProvider.SQLite.SQLiteExtensions.SQLite(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.DataProvider.SQLite.ISQLiteExtensions?
static LinqToDB.DataProvider.SQLite.SQLiteHints.Hint.IndexedBy(string! value) -> string!
static LinqToDB.DataProvider.SQLite.SQLiteHints.IndexedByHint<TSource>(this LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>! table, string! indexName) -> LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>!
static LinqToDB.DataProvider.SQLite.SQLiteHints.NotIndexedHint<TSource>(this LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>!
static LinqToDB.DataProvider.SQLite.SQLiteHints.TableHint<TSource>(this LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>!
static LinqToDB.DataProvider.SQLite.SQLiteOptions.operator !=(LinqToDB.DataProvider.SQLite.SQLiteOptions? left, LinqToDB.DataProvider.SQLite.SQLiteOptions? right) -> bool
static LinqToDB.DataProvider.SQLite.SQLiteOptions.operator ==(LinqToDB.DataProvider.SQLite.SQLiteOptions? left, LinqToDB.DataProvider.SQLite.SQLiteOptions? right) -> bool
static LinqToDB.DataProvider.SQLite.SQLiteSpecificExtensions.AsSQLite<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.SQLite.ISQLiteSpecificTable<TSource>!
static LinqToDB.DataProvider.SQLite.SQLiteTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SQLite.SQLiteTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.ClearAllPools(LinqToDB.DataProvider.SQLite.SQLiteProvider? provider) -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDatabase(string! databaseName, bool deleteIfExists = false, string! extension = ".sqlite") -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SQLite.SQLiteTools.DropDatabase(string! databaseName) -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.GetDataProvider(LinqToDB.DataProvider.SQLite.SQLiteProvider provider = LinqToDB.DataProvider.SQLite.SQLiteProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SQLite.SQLiteTools.ResolveSQLite(string! path, string? assemblyName = null) -> void
static LinqToDB.DataProvider.SQLite.SQLiteTools.ResolveSQLite(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.SqlServer.SqlFn.Abs<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Acos<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.AppName() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.Ascii(char character_expression) -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Ascii(string? character_expression) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Asin<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Atan<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Atn2<T>(T float_expression, T float_expression2) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.BinaryCheckSum() -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.BinaryCheckSum(params object![]! expressions) -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Cast<T>(object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Cast<T>(object? expression, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Cast<T>(object? expression, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Ceiling<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Char(int? integer_expression) -> char?
static LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(string? expressionToFind, string? expressionToSearch) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(string? expressionToFind, string? expressionToSearch, int? start_location) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.CharIndex(string? expressionToFind, string? expressionToSearch, long? start_location) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.CharIndexBig(string? expressionToFind, string? expressionToSearch) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.CharIndexBig(string? expressionToFind, string? expressionToSearch, int? start_location) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.CheckSum() -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.CheckSum(params object![]! expressions) -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Choose<T>(int? index, params T[]! values) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Collate(string? string, string! collation_name) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ColumnLength(string! table, string! column) -> short?
static LinqToDB.DataProvider.SqlServer.SqlFn.ColumnName(int? table_id, int column_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ColumnProperty(int? id, string! column, LinqToDB.DataProvider.SqlServer.SqlFn.ColumnPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Compress(byte[]? expression) -> byte[]!
static LinqToDB.DataProvider.SqlServer.SqlFn.Compress(string? expression) -> byte[]!
static LinqToDB.DataProvider.SqlServer.SqlFn.Concat(params string?[]! string_value) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ConcatWithSeparator(string? separator, params string?[]! arguments) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionProperty(LinqToDB.DataProvider.SqlServer.SqlFn.ConnectionPropertyName property) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.Connections.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Convert<T>(System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Cos<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Cot<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.CpuBusy.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.CurrentRequestID() -> short
static LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimestamp.get -> System.DateTime
static LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimezone() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTimezoneID() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.CurrentTransactionID() -> long
static LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyEx(string! database, LinqToDB.DataProvider.SqlServer.SqlFn.DatabasePropertyName property) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.DataLength<T>(T expression) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DataLengthBig<T>(T expression) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, int? number, string? date) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, int? number, System.DateTime? date) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, int? number, System.DateTimeOffset? date) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateAdd(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, int? number, System.TimeSpan? date) -> System.TimeSpan?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, string? startdate, string? enddate) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTime? startdate, System.DateTime? enddate) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTimeOffset? startdate, System.DateTimeOffset? enddate) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiff(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.TimeSpan? startdate, System.TimeSpan? enddate) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, string? startdate, string? enddate) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTime? startdate, System.DateTime? enddate) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTimeOffset? startdate, System.DateTimeOffset? enddate) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateDiffBig(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.TimeSpan? startdate, System.TimeSpan? enddate) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateFirst.get -> byte
static LinqToDB.DataProvider.SqlServer.SqlFn.DateFromParts(int? year, int? month, int? day) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, string? date) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTime? date) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTimeOffset? date) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateName(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.TimeSpan? date) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, string? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTime? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.DateTimeOffset? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DatePart(LinqToDB.DataProvider.SqlServer.SqlFn.DateParts datepart, System.TimeSpan? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(int? year, int? month, int? day) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTime2FromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds, int? fractions, int? precision) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(int? year, int? month, int? day) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeFromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds, int? milliseconds) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(int? year, int? month, int? day) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.DateTimeOffsetFromParts(int? year, int? month, int? day, int? hour, int? minute, int? seconds, int? fractions, int? hour_offset, int? minute_offset, int? precision) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.Day(string? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Day(System.DateTime? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Day(System.DateTimeOffset? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DbID() -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.DbID(string! database_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.DbName() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.DbName(int database_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.DbTS.get -> byte[]!
static LinqToDB.DataProvider.SqlServer.SqlFn.Decompress(byte[]! expression) -> byte[]!
static LinqToDB.DataProvider.SqlServer.SqlFn.Degrees<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Difference(string? character_expression1, string? character_expression2) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(string? start_date) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(string? start_date, int? month_to_add) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.DateTime? start_date) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.EndOfMonth(System.DateTime? start_date, int? month_to_add) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.Exp<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupID(string? filegroup_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupName(short? filegroup_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupProperty(string? filegroup_name, LinqToDB.DataProvider.SqlServer.SqlFn.FileGroupPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileID(string? file_name) -> short?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileIDEx(string? file_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileName(int? file_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.FileProperty(string? file_name, LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyEx(string? file_name, LinqToDB.DataProvider.SqlServer.SqlFn.FilePropertyExName property) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.Floor<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Format(object? value, string? format) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.FormatMessage(int msg_number, params object?[]! param_values) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.FormatMessage(string! msg_string, params object?[]! param_values) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogProperty(string? catalog_name, LinqToDB.DataProvider.SqlServer.SqlFn.FullTextCatalogPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServiceProperty(LinqToDB.DataProvider.SqlServer.SqlFn.FullTextServicePropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.GetAnsiNull() -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.GetAnsiNull(string! database) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.GetDate() -> System.DateTime
static LinqToDB.DataProvider.SqlServer.SqlFn.GetUtcDate() -> System.DateTime
static LinqToDB.DataProvider.SqlServer.SqlFn.HostID() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.HostName() -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.Identity.get -> decimal?
static LinqToDB.DataProvider.SqlServer.SqlFn.IdentityCurrent(string! table_or_view) -> decimal
static LinqToDB.DataProvider.SqlServer.SqlFn.IdentityIncrement(string! table_or_view) -> decimal
static LinqToDB.DataProvider.SqlServer.SqlFn.IdentitySeed(string! table_or_view) -> decimal
static LinqToDB.DataProvider.SqlServer.SqlFn.Idle.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Iif<T>(bool? boolean_expression, T true_value, T false_value) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.IndexColumn(string! table_or_view, int index_id, int key_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyProperty(int? object_ID, int? index_ID, int? key_ID, LinqToDB.DataProvider.SqlServer.SqlFn.IndexKeyPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.IndexProperty(int? object_ID, string? index_or_statistics_name, LinqToDB.DataProvider.SqlServer.SqlFn.IndexPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.IOBusy.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.IsDate(string! expression) -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.IsJson(string? expression) -> bool?
static LinqToDB.DataProvider.SqlServer.SqlFn.IsNull<T>(T check_expression, T replacement_value) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.IsNumeric<T>(T expression) -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.operator !=(LinqToDB.DataProvider.SqlServer.SqlFn.JsonData? left, LinqToDB.DataProvider.SqlServer.SqlFn.JsonData? right) -> bool
static LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.operator ==(LinqToDB.DataProvider.SqlServer.SqlFn.JsonData? left, LinqToDB.DataProvider.SqlServer.SqlFn.JsonData? right) -> bool
static LinqToDB.DataProvider.SqlServer.SqlFn.JsonModify(string? expression, string! path, string! newValue) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.JsonQuery(string? expression, string! path) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.JsonValue(string? expression, string! path) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.LangID.get -> short
static LinqToDB.DataProvider.SqlServer.SqlFn.Language.get -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.Left(string? character_expression, int? integer_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.LeftTrim(string? character_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Len(string? character_expression) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.LenBig(string? character_expression) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.LockTimeout.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Log10<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Log<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Log<T>(T float_expression, int base) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Lower(string? character_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.MaxConnections.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.MaxPrecision.get -> byte
static LinqToDB.DataProvider.SqlServer.SqlFn.MinActiveRowVersion() -> byte[]!
static LinqToDB.DataProvider.SqlServer.SqlFn.Month(string? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Month(System.DateTime? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Month(System.DateTimeOffset? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.NChar(int? integer_expression) -> char?
static LinqToDB.DataProvider.SqlServer.SqlFn.NestLevel.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.NewID() -> System.Guid
static LinqToDB.DataProvider.SqlServer.SqlFn.NextValueFor(string! sequence_name) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.NextValueForOver(string! sequence_name) -> LinqToDB.AnalyticFunctions.INeedsOrderByOnly<object?>!
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectDefinition(int? object_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectID(string! object_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectID(string! object_name, string! object_type) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectName(int? object_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectName(int? object_id, int? database_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectProperty(int? id, LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyEx(int? id, LinqToDB.DataProvider.SqlServer.SqlFn.ObjectPropertyExName property) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectSchemaName(int? object_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ObjectSchemaName(int? object_id, int? database_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(string? json) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlFn.JsonData!>!
static LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(string? json, string! path) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlFn.JsonData!>!
static LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(this LinqToDB.IDataContext! dc, string? json) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlFn.JsonData!>!
static LinqToDB.DataProvider.SqlServer.SqlFn.OpenJson(this LinqToDB.IDataContext! dc, string? json, string! path) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlFn.JsonData!>!
static LinqToDB.DataProvider.SqlServer.SqlFn.Options.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.OriginalDbName() -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.PacketErrors.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.PackReceived.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.PackSent.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Parse<T>(string! string_value, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.ParseName(string? object_name, int object_piece) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.PatIndex(string? pattern, string? expression) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.PatIndexBig(string? pattern, string? expression) -> long?
static LinqToDB.DataProvider.SqlServer.SqlFn.PI() -> double
static LinqToDB.DataProvider.SqlServer.SqlFn.Power<T>(T float_expression, T y) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.PublishingServerName() -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.QuoteName(string? character_string) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.QuoteName(string? character_string, string? quote_character) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Radians<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Random() -> double
static LinqToDB.DataProvider.SqlServer.SqlFn.Random(int seed) -> double
static LinqToDB.DataProvider.SqlServer.SqlFn.RemServer.get -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Replace(string? string_expression, string? string_pattern, string? string_replacement) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Replicate(byte[]? string_expression, int? integer_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Replicate(string? string_expression, int? integer_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Reverse(string? string_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Right(string? character_expression, int? integer_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.RightTrim(string? character_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Round<T>(T numeric_expression, int length) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Round<T>(T numeric_expression, int length, int function) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.RowCount.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.RowCountBig() -> long
static LinqToDB.DataProvider.SqlServer.SqlFn.SchemaID() -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.SchemaID(string! schema_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.SchemaName() -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.SchemaName(int? schema_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.ScopeIdentity() -> decimal
static LinqToDB.DataProvider.SqlServer.SqlFn.ServerName.get -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.ServerProperty(LinqToDB.DataProvider.SqlServer.SqlFn.ServerPropertyName property) -> object?
static LinqToDB.DataProvider.SqlServer.SqlFn.ServiceName.get -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.Sign<T>(T numeric_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Sin<T>(T float_expression, T y) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.SmallDateTimeFromParts(int? year, int? month, int? day, int? hour, int? minute) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.SoundEx(string? character_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Space(int? integer_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.SpID.get -> short
static LinqToDB.DataProvider.SqlServer.SqlFn.Sqrt<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.Square<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.StatsDate(int? object_id, int? stats_id) -> System.DateTime?
static LinqToDB.DataProvider.SqlServer.SqlFn.Str<T>(T? float_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Str<T>(T? float_expression, int length) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Str<T>(T? float_expression, int length, int decimal) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.StringEscape(string? text, string? type) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Stuff(string? character_expression, int? start, int? length, string? replaceWith_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Substring(string? expression, int? start, int? length) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.SwitchOffset(System.DateTimeOffset? datetimeoffset_expression, string! timezoneoffset_expression) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.SysDatetime() -> System.DateTime
static LinqToDB.DataProvider.SqlServer.SqlFn.SysDatetimeOffset() -> System.DateTimeOffset
static LinqToDB.DataProvider.SqlServer.SqlFn.SysUtcDatetime() -> System.DateTime
static LinqToDB.DataProvider.SqlServer.SqlFn.Tan<T>(T float_expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TextSize.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.TimeFromParts(int? hour, int? minute, int? seconds) -> System.TimeSpan?
static LinqToDB.DataProvider.SqlServer.SqlFn.TimeFromParts(int? hour, int? minute, int? seconds, int? fractions, int? precision) -> System.TimeSpan?
static LinqToDB.DataProvider.SqlServer.SqlFn.TimeTicks.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.ToDatetimeOffset(System.DateTimeOffset? datetime_expression, string! timezoneoffset_expression) -> System.DateTimeOffset?
static LinqToDB.DataProvider.SqlServer.SqlFn.TotalErrors.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.TotalRead.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.TotalWrite.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.TransactionCount.get -> int
static LinqToDB.DataProvider.SqlServer.SqlFn.Translate(string? inputString, string? characters, string? translations) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Trim(string! characters, string? string) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Trim(string? string) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.TryCast<T>(object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryCast<T>(object? expression, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryCast<T>(object? expression, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, object? expression) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryConvert<T>(System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, object? expression, int style) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value, LinqToDB.DataProvider.SqlServer.SqlType<T>! data_type, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TryParse<T>(string! string_value, System.Func<LinqToDB.DataProvider.SqlServer.SqlType<T>!>! data_type, string! culture) -> T
static LinqToDB.DataProvider.SqlServer.SqlFn.TypeID(string! type_name) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.TypeName(int? type_id) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.TypeProperty(string? type, LinqToDB.DataProvider.SqlServer.SqlFn.TypePropertyName property) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Unicode(string! ncharacter_expression) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Upper(string? character_expression) -> string?
static LinqToDB.DataProvider.SqlServer.SqlFn.Version.get -> string!
static LinqToDB.DataProvider.SqlServer.SqlFn.XactState() -> short
static LinqToDB.DataProvider.SqlServer.SqlFn.Year(string? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Year(System.DateTime? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlFn.Year(System.DateTimeOffset? date) -> int?
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.Contains(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! search, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsProperty(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, object? column, string! property, string! search) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsPropertyWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, object? column, string! property, string! search, int language) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsPropertyWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, object? column, string! property, string! search, string! language) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search, int language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search, int language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search, string! language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! search, string! language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search, int language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search, int language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search, string! language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! search, string! language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! search, int language, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.ContainsWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! search, string! language, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeText(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! term, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTable<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term, int language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term, int language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term, string! language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, string! term, string! language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term, int language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term, int language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term, string! language) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextTableWithLanguage<TTable, TKey>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, LinqToDB.ITable<TTable>! table, System.Linq.Expressions.Expression<System.Func<TTable, object?>!>! columns, string! term, string! language, int top) -> System.Linq.IQueryable<LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextKey<TKey>!>!
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! term, int language, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.FreeTextWithLanguage(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, string! term, string! language, params object?[]! tableOrColumns) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.IsNull<T>(this LinqToDB.DataProvider.SqlServer.ISqlServerExtensions? ext, T? value, T? replacementValue) -> T
static LinqToDB.DataProvider.SqlServer.SqlServerExtensions.SqlServer(this LinqToDB.Sql.ISqlExtension? ext) -> LinqToDB.DataProvider.SqlServer.ISqlServerExtensions?
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHashHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHashHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinLoopHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinLoopHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinMergeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinMergeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinRemoteHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.JoinRemoteHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionConcatUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionDisableExternalPushDown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionDisableScaleOutExecution<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionExpandViews<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionFast<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceExternalPushDown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceOrder<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionForceScaleOutExecution<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashGroup<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionHashUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionIgnoreNonClusteredColumnStoreIndex<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionKeepFixedPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionKeepPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionLoopJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxDop<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxGrantPercent<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMaxRecursion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMergeJoin<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMergeUnion<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionMinGrantPercent<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionNoPerformanceSpool<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionOptimizeFor<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, params string![]! values) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionOptimizeForUnknown<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionOrderGroup<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionQueryTraceOn<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query, int value) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionRecompile<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionRobustPlan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionTableHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, LinqToDB.Sql.SqlID tableID, params string![]! values) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.OptionUseHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, params string![]! values) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.Fast(int value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MaxDop(int value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MaxGrantPercent(decimal value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MaxRecursion(int value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.MinGrantPercent(decimal value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.OptimizeFor(string! value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Query.QueryTraceOn(int value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2008Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2012Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2016Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint2019Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint<TSource, TParam>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.QueryHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.Table.SpatialWindowMaxCells(int value) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint2012Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint<TSource, TParam>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TableHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint2012Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint2014Plus<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint<TSource, TParam>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint, TParam hintParameter) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TablesInScopeHint<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! source, string! hint, params object![]! hintParameters) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTableAll<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTableAsOf<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, System.DateTime dateTime) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTableBetween<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, System.DateTime dateTime, System.DateTime dateTime2) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTableContainedIn<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, System.DateTime dateTime, System.DateTime dateTime2) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.TemporalTableFromTo<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, System.DateTime dateTime, System.DateTime dateTime2) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceScan<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceScanInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceSeek<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceSeek<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! indexName, params System.Linq.Expressions.Expression<System.Func<TSource, object!>!>![]! columns) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithForceSeekInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithHoldLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithHoldLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithIndex<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, params string![]! indexNames) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithIndex<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, string! indexName) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoWait<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithNoWaitInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithPagLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithPagLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommitted<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadCommittedLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadPast<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadPastInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadUncommitted<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithReadUncommittedInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRepeatableRead<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRepeatableReadInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRowLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithRowLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSerializable<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSerializableInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSnapshot<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSnapshotInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithSpatialWindowMaxCells<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table, int cells) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockX<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithTabLockXInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithUpdLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithUpdLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithXLock<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerHints.WithXLockInScope<TSource>(this LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>! query) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerOptions.operator !=(LinqToDB.DataProvider.SqlServer.SqlServerOptions? left, LinqToDB.DataProvider.SqlServer.SqlServerOptions? right) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerOptions.operator ==(LinqToDB.DataProvider.SqlServer.SqlServerOptions? left, LinqToDB.DataProvider.SqlServer.SqlServerOptions? right) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerSpecificExtensions.AsSqlServer<TSource>(this LinqToDB.ITable<TSource>! table) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificTable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerSpecificExtensions.AsSqlServer<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.DataProvider.SqlServer.ISqlServerSpecificQueryable<TSource>!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.SqlServer.SqlServerTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.SqlServer.SqlServerVersion version = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.SqlServer.SqlServerVersion version = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.SqlServer.SqlServerVersion version = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.GetDataProvider(LinqToDB.DataProvider.SqlServer.SqlServerVersion version = LinqToDB.DataProvider.SqlServer.SqlServerVersion.AutoDetect, LinqToDB.DataProvider.SqlServer.SqlServerProvider provider = LinqToDB.DataProvider.SqlServer.SqlServerProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.QuoteIdentifier(string! identifier) -> string!
static LinqToDB.DataProvider.SqlServer.SqlServerTools.ResolveSqlTypes(string! path) -> void
static LinqToDB.DataProvider.SqlServer.SqlServerTools.ResolveSqlTypes(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.IsHandled(System.Exception! ex, out System.Collections.Generic.IEnumerable<int>? errorNumbers) -> bool
static LinqToDB.DataProvider.SqlServer.SqlServerTransientExceptionDetector.ShouldRetryOn(System.Exception! ex) -> bool
static LinqToDB.DataProvider.SqlServer.SqlType.BigInt.get -> LinqToDB.DataProvider.SqlServer.SqlType<long?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Binary() -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Binary(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.BinaryMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Bit.get -> LinqToDB.DataProvider.SqlServer.SqlType<bool?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Char() -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Char(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.CharMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Cursor.get -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Date.get -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTime?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Datetime.get -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTime?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Datetime2() -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTime?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Datetime2(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTime?>!
static LinqToDB.DataProvider.SqlServer.SqlType.DatetimeOffset() -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTimeOffset?>!
static LinqToDB.DataProvider.SqlServer.SqlType.DatetimeOffset(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTimeOffset?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Decimal() -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Decimal(int precision) -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Decimal(int precision, int scale) -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Float() -> LinqToDB.DataProvider.SqlServer.SqlType<double?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Float(int n) -> LinqToDB.DataProvider.SqlServer.SqlType<double?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Geography() -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Geography<T>() -> LinqToDB.DataProvider.SqlServer.SqlType<T>!
static LinqToDB.DataProvider.SqlServer.SqlType.Geometry() -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Geometry<T>() -> LinqToDB.DataProvider.SqlServer.SqlType<T>!
static LinqToDB.DataProvider.SqlServer.SqlType.HierarchyID() -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.HierarchyID<T>() -> LinqToDB.DataProvider.SqlServer.SqlType<T>!
static LinqToDB.DataProvider.SqlServer.SqlType.Image.get -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Int.get -> LinqToDB.DataProvider.SqlServer.SqlType<int?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Money.get -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NChar() -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NChar(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NCharMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NText.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Numeric() -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Numeric(int precision) -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Numeric(int precision, int scale) -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NVarChar() -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NVarChar(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.NVarCharMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Real.get -> LinqToDB.DataProvider.SqlServer.SqlType<float?>!
static LinqToDB.DataProvider.SqlServer.SqlType.RowVersion.get -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.SmallDatetime.get -> LinqToDB.DataProvider.SqlServer.SqlType<System.DateTime?>!
static LinqToDB.DataProvider.SqlServer.SqlType.SmallInt.get -> LinqToDB.DataProvider.SqlServer.SqlType<short?>!
static LinqToDB.DataProvider.SqlServer.SqlType.SmallMoney.get -> LinqToDB.DataProvider.SqlServer.SqlType<decimal?>!
static LinqToDB.DataProvider.SqlServer.SqlType.SqlVariant.get -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Table.get -> LinqToDB.DataProvider.SqlServer.SqlType<object?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Text.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Time() -> LinqToDB.DataProvider.SqlServer.SqlType<System.TimeSpan?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Time(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<System.TimeSpan?>!
static LinqToDB.DataProvider.SqlServer.SqlType.TinyInt.get -> LinqToDB.DataProvider.SqlServer.SqlType<byte?>!
static LinqToDB.DataProvider.SqlServer.SqlType.UniqueIdentifier.get -> LinqToDB.DataProvider.SqlServer.SqlType<System.Guid?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarBinary() -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarBinary(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarBinaryMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<byte[]?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarChar() -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarChar(int size) -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.VarCharMax.get -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Xml() -> LinqToDB.DataProvider.SqlServer.SqlType<string?>!
static LinqToDB.DataProvider.SqlServer.SqlType.Xml<T>() -> LinqToDB.DataProvider.SqlServer.SqlType<T>!
static LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.MicrosoftDataSqlClientProvider -> LinqToDB.Metadata.IMetadataReader?
static LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.MicrosoftSqlServerServerProvider -> LinqToDB.Metadata.IMetadataReader?
static LinqToDB.DataProvider.SqlServer.SystemDataSqlServerAttributeReader.SystemDataSqlClientProvider -> LinqToDB.Metadata.IMetadataReader?
static LinqToDB.DataProvider.Sybase.SybaseOptions.operator !=(LinqToDB.DataProvider.Sybase.SybaseOptions? left, LinqToDB.DataProvider.Sybase.SybaseOptions? right) -> bool
static LinqToDB.DataProvider.Sybase.SybaseOptions.operator ==(LinqToDB.DataProvider.Sybase.SybaseOptions? left, LinqToDB.DataProvider.Sybase.SybaseOptions? right) -> bool
static LinqToDB.DataProvider.Sybase.SybaseTools.AutoDetectProvider.get -> bool
static LinqToDB.DataProvider.Sybase.SybaseTools.AutoDetectProvider.set -> void
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(string! connectionString, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbConnection! connection, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.CreateDataConnection(System.Data.Common.DbTransaction! transaction, LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect) -> LinqToDB.Data.DataConnection!
static LinqToDB.DataProvider.Sybase.SybaseTools.GetDataProvider(LinqToDB.DataProvider.Sybase.SybaseProvider provider = LinqToDB.DataProvider.Sybase.SybaseProvider.AutoDetect, string? connectionString = null, System.Data.Common.DbConnection? connection = null) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.DataProvider.Sybase.SybaseTools.ResolveSybase(string! path, string? assemblyName = null) -> void
static LinqToDB.DataProvider.Sybase.SybaseTools.ResolveSybase(System.Reflection.Assembly! assembly) -> void
static LinqToDB.DbDataType.operator !=(LinqToDB.DbDataType t1, LinqToDB.DbDataType t2) -> bool
static LinqToDB.DbDataType.operator ==(LinqToDB.DbDataType t1, LinqToDB.DbDataType t2) -> bool
static LinqToDB.Expressions.ExpressionExtensions.Find(this System.Linq.Expressions.Expression? expr, System.Linq.Expressions.Expression! exprToFind) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Find(this System.Linq.Expressions.Expression? expr, System.Linq.Expressions.Expression! exprToFind, System.Collections.Generic.IEqualityComparer<System.Linq.Expressions.Expression!>! comparer) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Find<TContext>(this System.Linq.Expressions.Expression? expr, TContext context, System.Func<TContext, System.Linq.Expressions.Expression!, bool>! func) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, params System.Linq.Expressions.Expression![]! replacement) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression!>! replacement) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, System.Linq.Expressions.Expression! exprToReplaceParameter) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, System.Linq.Expressions.Expression! exprToReplaceParameter1, System.Linq.Expressions.Expression! exprToReplaceParameter2) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetBody(this System.Linq.Expressions.LambdaExpression! lambda, System.Linq.Expressions.Expression! exprToReplaceParameter1, System.Linq.Expressions.Expression! exprToReplaceParameter2, System.Linq.Expressions.Expression! exprToReplaceParameter3) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.GetCount<TContext>(this System.Linq.Expressions.Expression! expr, TContext context, System.Func<TContext, System.Linq.Expressions.Expression!, bool>! func) -> int
static LinqToDB.Expressions.ExpressionExtensions.GetDebugView(this System.Linq.Expressions.Expression! expression) -> string!
static LinqToDB.Expressions.ExpressionExtensions.GetMemberGetter(System.Reflection.MemberInfo! mi, System.Linq.Expressions.Expression! obj) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.Replace(this System.Linq.Expressions.Expression! expression, System.Collections.Generic.IReadOnlyDictionary<System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!>! replaceMap) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.Replace(this System.Linq.Expressions.Expression! expression, System.Linq.Expressions.Expression! toReplace, System.Linq.Expressions.Expression! replacedBy) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.Replace(this System.Linq.Expressions.Expression! expression, System.Linq.Expressions.Expression! toReplace, System.Linq.Expressions.Expression! replacedBy, System.Collections.Generic.IEqualityComparer<System.Linq.Expressions.Expression!>! equalityComparer) -> System.Linq.Expressions.Expression!
static LinqToDB.Expressions.ExpressionExtensions.Transform(this System.Linq.Expressions.Expression? expr, System.Func<System.Linq.Expressions.Expression!, LinqToDB.Internal.Expressions.TransformInfo>! func) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Transform(this System.Linq.Expressions.Expression? expr, System.Func<System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!>! func) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Transform<TContext>(this System.Linq.Expressions.Expression? expr, TContext context, System.Func<TContext, System.Linq.Expressions.Expression!, LinqToDB.Internal.Expressions.TransformInfo>! func) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Transform<TContext>(this System.Linq.Expressions.Expression? expr, TContext context, System.Func<TContext, System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!>! func) -> System.Linq.Expressions.Expression?
static LinqToDB.Expressions.ExpressionExtensions.Visit<TContext>(this System.Linq.Expressions.Expression! expr, TContext context, System.Action<TContext, System.Linq.Expressions.Expression!>! func) -> void
static LinqToDB.Expressions.ExpressionExtensions.Visit<TContext>(this System.Linq.Expressions.Expression! expr, TContext context, System.Func<TContext, System.Linq.Expressions.Expression!, bool>! func) -> void
static LinqToDB.Expressions.MemberHelper.ConstructorOf(System.Linq.Expressions.Expression<System.Func<object!>!>! func) -> System.Reflection.ConstructorInfo!
static LinqToDB.Expressions.MemberHelper.ConstructorOf<T>(System.Linq.Expressions.Expression<System.Func<T, object!>!>! func) -> System.Reflection.ConstructorInfo!
static LinqToDB.Expressions.MemberHelper.FieldOf<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> System.Reflection.FieldInfo!
static LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.Expression! expr) -> System.Reflection.MemberInfo!
static LinqToDB.Expressions.MemberHelper.GetMemberInfo(System.Linq.Expressions.LambdaExpression! func) -> System.Reflection.MemberInfo!
static LinqToDB.Expressions.MemberHelper.GetMemberInfoWithType(System.Linq.Expressions.Expression! expr) -> LinqToDB.Expressions.MemberHelper.MemberInfoWithType
static LinqToDB.Expressions.MemberHelper.GetMemberInfoWithType(System.Linq.Expressions.LambdaExpression! func) -> LinqToDB.Expressions.MemberHelper.MemberInfoWithType
static LinqToDB.Expressions.MemberHelper.MemberOf<T, TMember>(System.Linq.Expressions.Expression<System.Func<T, TMember>!>! func) -> System.Reflection.MemberInfo!
static LinqToDB.Expressions.MemberHelper.MemberOf<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> System.Reflection.MemberInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf(System.Linq.Expressions.Expression<System.Action!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf(System.Linq.Expressions.Expression<System.Func<object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf<T1, T2, T3, T4>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf<T1, T2, T3>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf<T1, T2>(System.Linq.Expressions.Expression<System.Func<T1, T2, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOf<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric(System.Linq.Expressions.Expression<System.Action!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric(System.Linq.Expressions.Expression<System.Func<object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric<T1, T2, T3, T4>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric<T1, T2, T3>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric<T1, T2>(System.Linq.Expressions.Expression<System.Func<T1, T2, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.MethodOfGeneric<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> System.Reflection.MethodInfo!
static LinqToDB.Expressions.MemberHelper.PropertyOf(System.Linq.Expressions.Expression<System.Func<object?>!>! func) -> System.Reflection.PropertyInfo!
static LinqToDB.Expressions.MemberHelper.PropertyOf<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> System.Reflection.PropertyInfo!
static LinqToDB.ExtensionBuilderExtensions.Add(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Add(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Add<T>(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.AddFragment(this LinqToDB.Sql.ISqExtensionBuilder! builder, string! name, string! expr) -> LinqToDB.Sql.SqlExtensionParam!
static LinqToDB.ExtensionBuilderExtensions.AddParameter(this LinqToDB.Sql.ISqExtensionBuilder! builder, string! name, string! value) -> LinqToDB.Sql.SqlExtensionParam!
static LinqToDB.ExtensionBuilderExtensions.Dec(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Div(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Div(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Div<T>(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Inc(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Mul(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Mul(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Mul<T>(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Sub(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, int value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Sub(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right, System.Type! type) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.ExtensionBuilderExtensions.Sub<T>(this LinqToDB.Sql.ISqExtensionBuilder! builder, LinqToDB.Internal.SqlQuery.ISqlExpression! left, LinqToDB.Internal.SqlQuery.ISqlExpression! right) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Extensions.AttributesExtensions.GetAttribute<T>(this System.Reflection.ICustomAttributeProvider! source, bool inherit = true) -> T?
static LinqToDB.Extensions.AttributesExtensions.GetAttributes<T>(this System.Reflection.ICustomAttributeProvider! source, bool inherit = true) -> T![]!
static LinqToDB.Extensions.AttributesExtensions.HasAttribute<T>(this System.Reflection.ICustomAttributeProvider! source, bool inherit = true) -> bool
static LinqToDB.Interceptors.InterceptorExtensions.OnNextCommandInitialized(this LinqToDB.Data.DataConnection! dataConnection, System.Func<LinqToDB.Interceptors.CommandEventData, System.Data.Common.DbCommand!, System.Data.Common.DbCommand!>! onCommandInitialized) -> void
static LinqToDB.Interceptors.InterceptorExtensions.OnNextCommandInitialized(this LinqToDB.DataContext! dataContext, System.Func<LinqToDB.Interceptors.CommandEventData, System.Data.Common.DbCommand!, System.Data.Common.DbCommand!>! onCommandInitialized) -> void
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance(System.Type! type) -> object!
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance(System.Type! type, bool nonPublic) -> object!
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance(System.Type! type, params object?[]? args) -> object!
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance<T>() -> T
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance<T>(System.Type! type) -> T!
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance<T>(System.Type! type, bool nonPublic) -> T!
static LinqToDB.Internal.Common.ActivatorExt.CreateInstance<T>(System.Type! type, params object?[]? args) -> T!
static LinqToDB.Internal.Common.ActivatorExt.DynamicInvokeExt(this System.Delegate! method, params object?[]? args) -> object?
static LinqToDB.Internal.Common.ActivatorExt.DynamicInvokeExt<T>(this System.Delegate! method, params object?[]? args) -> T
static LinqToDB.Internal.Common.ActivatorExt.InvokeExt(this System.Reflection.ConstructorInfo! ctor, object?[]? parameters) -> object!
static LinqToDB.Internal.Common.ActivatorExt.InvokeExt(this System.Reflection.MethodBase! method, object? obj, object?[]? parameters) -> object?
static LinqToDB.Internal.Common.ActivatorExt.InvokeExt<T>(this System.Reflection.ConstructorInfo! ctor, object?[]? parameters) -> T!
static LinqToDB.Internal.Common.ActivatorExt.InvokeExt<T>(this System.Reflection.MethodBase! method, object? obj, object?[]? parameters) -> T
static LinqToDB.Internal.Common.EnumerableHelper.Batch<T>(System.Collections.Generic.IAsyncEnumerable<T>! source, int batchSize) -> System.Collections.Generic.IAsyncEnumerable<System.Collections.Generic.IAsyncEnumerable<T>!>!
static LinqToDB.Internal.Common.EnumerableHelper.Batch<T>(System.Collections.Generic.IEnumerable<T>! source, int batchSize) -> System.Collections.Generic.IEnumerable<System.Collections.Generic.IEnumerable<T>!>!
static LinqToDB.Internal.Common.IdentifierBuilder.CreateNextID() -> int
static LinqToDB.Internal.Common.IdentifierBuilder.GetObjectID(object? obj) -> string!
static LinqToDB.Internal.Common.IdentifierBuilder.GetObjectID(System.Linq.Expressions.Expression? ex) -> int
static LinqToDB.Internal.Common.IdentifierBuilder.GetObjectID(System.Reflection.MethodInfo? m) -> string!
static LinqToDB.Internal.Common.IdentifierBuilder.GetObjectID(System.Type? obj) -> string!
static LinqToDB.Internal.Common.Tools.CreateEmptyQuery<T>() -> System.Linq.IQueryable<T>!
static LinqToDB.Internal.Common.Tools.IsNullOrEmpty(this System.Collections.ICollection? array) -> bool
static LinqToDB.Internal.Common.Tools.ToDebugDisplay(string! str) -> string!
static LinqToDB.Internal.Common.Tools.TryLoadAssembly(string? assemblyName, string? providerFactory) -> System.Reflection.Assembly?
static LinqToDB.Internal.Common.TypeHelper.EnumTypeRemapping(System.Type! templateType, System.Type! replaced, System.Type![]! templateArguments) -> System.Collections.Generic.IEnumerable<System.Tuple<System.Type!, System.Type!>!>!
static LinqToDB.Internal.Common.TypeHelper.GetEnumerableElementType(System.Type! type) -> System.Type!
static LinqToDB.Internal.Common.TypeHelper.MakeGenericMethod(System.Reflection.MethodInfo! methodInfo, System.Linq.Expressions.Expression![]! arguments) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Common.TypeHelper.MakeMethodCall(System.Reflection.MethodInfo! methodInfo, params System.Linq.Expressions.Expression![]! arguments) -> System.Linq.Expressions.MethodCallExpression!
static LinqToDB.Internal.Common.TypeHelper.RegisterTypeRemapping(System.Type! templateType, System.Type! replaced, System.Type![]! templateArguments, System.Collections.Generic.Dictionary<System.Type!, System.Type!>! typeMappings) -> void
static LinqToDB.Internal.Common.Utils.MakeUniqueNames<T>(System.Collections.Generic.IEnumerable<T>! items, System.Collections.Generic.IEnumerable<string!>? staticNames, System.Func<T, string?>! nameFunc, System.Action<T, string!, System.Collections.Generic.ISet<string!>?>! nameSetter, string! defaultName = "t", System.StringComparer? comparer = null) -> void
static LinqToDB.Internal.Common.Utils.MakeUniqueNames<T>(System.Collections.Generic.IEnumerable<T>! items, System.Collections.Generic.IEnumerable<string!>? staticNames, System.Func<T, string?>! nameFunc, System.Action<T, string!, System.Collections.Generic.ISet<string!>?>! nameSetter, System.Func<T, string?>! defaultName, System.StringComparer? comparer = null) -> void
static LinqToDB.Internal.Common.Utils.MakeUniqueNames<T>(System.Collections.Generic.IEnumerable<T>! items, System.Collections.Generic.ISet<string!>? namesParameter, System.Func<string!, System.Collections.Generic.ISet<string!>?, bool>! validatorFunc, System.Func<T, string?>! nameFunc, System.Action<T, string!, System.Collections.Generic.ISet<string!>?>! nameSetter, System.Func<T, string?>! defaultName, System.StringComparer? comparer = null) -> void
static LinqToDB.Internal.Common.Utils.ObjectReferenceEqualityComparer<T>.Default -> System.Collections.Generic.IEqualityComparer<T>!
static LinqToDB.Internal.Common.Utils.RemoveDuplicates<T, TKey>(this System.Collections.Generic.IList<T>! list, System.Func<T, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>? comparer = null) -> void
static LinqToDB.Internal.Common.Utils.RemoveDuplicates<T>(this System.Collections.Generic.IList<T>! list, System.Collections.Generic.IEqualityComparer<T>? comparer = null) -> void
static LinqToDB.Internal.Common.Utils.RemoveDuplicatesFromTail<T>(this System.Collections.Generic.IList<T>! list, System.Func<T, T, bool>! compareFunc) -> void
static LinqToDB.Internal.Common.ValueComparer.CreateDefault(System.Type! type, bool favorStructuralComparisons) -> LinqToDB.Internal.Common.ValueComparer!
static LinqToDB.Internal.Common.ValueComparer.GetDefaultValueComparer(System.Type! type, bool favorStructuralComparisons) -> LinqToDB.Internal.Common.ValueComparer!
static LinqToDB.Internal.Common.ValueComparer.GetDefaultValueComparer<T>(bool favorStructuralComparisons) -> LinqToDB.Internal.Common.ValueComparer<T>!
static LinqToDB.Internal.Common.ValueComparer<T>.CreateDefaultEqualsExpression() -> System.Linq.Expressions.Expression<System.Func<T, T, bool>!>!
static LinqToDB.Internal.Common.ValueComparer<T>.CreateDefaultHashCodeExpression(bool favorStructuralComparisons) -> System.Linq.Expressions.Expression<System.Func<T, int>!>!
static LinqToDB.Internal.Conversion.ConvertBuilder.GetConverter(LinqToDB.Mapping.MappingSchema? mappingSchema, System.Type! from, System.Type! to) -> System.Tuple<System.Linq.Expressions.LambdaExpression!, System.Linq.Expressions.LambdaExpression?, bool>!
static LinqToDB.Internal.Conversion.ConvertBuilder.GetDefaultMappingFromEnumType(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! enumType) -> System.Type?
static LinqToDB.Internal.DataProvider.Access.AccessProviderDetector.DetectProvider() -> LinqToDB.DataProvider.Access.AccessProvider
static LinqToDB.Internal.DataProvider.AliasesHelper.PrepareQueryAndAliases(LinqToDB.Internal.DataProvider.IIdentifierService! identifierService, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.AliasesContext? prevAliasContext, out LinqToDB.Internal.SqlQuery.AliasesContext! newAliasContext) -> void
static LinqToDB.Internal.DataProvider.BasicBulkCopy.GetTableName<T>(LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Data.BulkCopyOptions! options, LinqToDB.ITable<T>! table, bool escaped = true) -> string!
static LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopyHelper(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string? from, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! prepFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!, object!, string?>! addFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! finishFunction, int maxParameters, int maxSqlLength) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopyHelperAsync(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.IEnumerable! source, string? from, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! prepFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!, object!, string?>! addFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! finishFunction, System.Threading.CancellationToken cancellationToken, int maxParameters, int maxSqlLength) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopyHelperAsync<T>(LinqToDB.Internal.DataProvider.MultipleRowsHelper! helper, System.Collections.Generic.IAsyncEnumerable<T>! source, string? from, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! prepFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!, object!, string?>! addFunction, System.Action<LinqToDB.Internal.DataProvider.MultipleRowsHelper!>! finishFunction, System.Threading.CancellationToken cancellationToken, int maxParameters, int maxSqlLength) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter.GetInstance(LinqToDB.DataProvider.ClickHouse.ClickHouseProvider provider) -> LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderAdapter!
static LinqToDB.Internal.DataProvider.ClickHouse.ClickHouseProviderDetector.DetectProvider() -> LinqToDB.DataProvider.ClickHouse.ClickHouseProvider
static LinqToDB.Internal.DataProvider.DataProviderBase.OnConnectionCreated.get -> System.Func<LinqToDB.DataProvider.IDataProvider!, System.Data.Common.DbConnection!, System.Data.Common.DbConnection!>?
static LinqToDB.Internal.DataProvider.DataProviderBase.OnConnectionCreated.set -> void
static LinqToDB.Internal.DataProvider.DataProviderExtensions.SetFieldReaderExpression<TDbDataReader, T>(this LinqToDB.DataProvider.IDataProvider! dataProvider, bool includeDataReaderType, System.Linq.Expressions.Expression<System.Func<TDbDataReader!, int, T>!>! expr) -> void
static LinqToDB.Internal.DataProvider.DataProviderExtensions.SetFieldReaderExpression<TDbDataReader, T>(this LinqToDB.DataProvider.IDataProvider! dataProvider, string! dataTypeName, System.Linq.Expressions.Expression<System.Func<TDbDataReader!, int, T>!>! expr) -> void
static LinqToDB.Internal.DataProvider.DataProviderExtensions.SetFieldReaderExpression<TDbDataReader, T>(this LinqToDB.DataProvider.IDataProvider! dataProvider, System.Linq.Expressions.Expression<System.Func<TDbDataReader!, int, T>!>! expr) -> void
static LinqToDB.Internal.DataProvider.DataProviderExtensions.SetFieldReaderExpression<TDbDataReader, T>(this LinqToDB.DataProvider.IDataProvider! dataProvider, System.Type! fieldType, string! dataTypeName, System.Linq.Expressions.Expression<System.Func<TDbDataReader!, int, T>!>! expr) -> void
static LinqToDB.Internal.DataProvider.DataProviderExtensions.SetFieldReaderExpression<TDbDataReader, T>(this LinqToDB.DataProvider.IDataProvider! dataProvider, System.Type? dataReaderType, System.Type? toType, System.Type? providerFieldType, System.Type? fieldType, string? dataTypeName, System.Linq.Expressions.Expression<System.Func<TDbDataReader!, int, T>!>! expr) -> void
static LinqToDB.Internal.DataProvider.DataProviderOptions<T>.Default.get -> T!
static LinqToDB.Internal.DataProvider.DataProviderOptions<T>.Default.set -> void
static LinqToDB.Internal.DataProvider.DataTools.ConvertCharToSql(System.Text.StringBuilder! stringBuilder, string! startString, System.Action<System.Text.StringBuilder!, int>! appendConversion, char value) -> void
static LinqToDB.Internal.DataProvider.DataTools.ConvertStringToSql(System.Text.StringBuilder! stringBuilder, string! plusOperator, string? startPrefix, System.Action<System.Text.StringBuilder!, int>! appendConversion, string! value, char[]? extraEscapes) -> void
static LinqToDB.Internal.DataProvider.DataTools.EscapeUnterminatedBracket(string? str) -> string?
static LinqToDB.Internal.DataProvider.DataTools.GetCharExpression -> System.Linq.Expressions.Expression<System.Func<System.Data.Common.DbDataReader!, int, string!>!>!
static LinqToDB.Internal.DataProvider.DB2.DB2BulkCopyShared.ProviderSpecificCopyImpl<T>(LinqToDB.ITable<T>! table, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T>! source, LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbConnection! connection, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.BulkCopyAdapter! bulkCopy, System.Action<LinqToDB.Data.DataConnection!, System.Func<string!>!, System.Func<int>!>! traceAction) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.Instance.get -> LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter!
static LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.LikeFirebirdEscapeSymbols -> string![]!
static LinqToDB.Internal.DataProvider.IdentifiersHelper.TruncateIdentifier(LinqToDB.Internal.DataProvider.IIdentifierService! identifierService, LinqToDB.Internal.DataProvider.IdentifierKind identifierKind, string! identifier) -> string!
static LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.GetInstance(LinqToDB.DataProvider.Informix.InformixProvider provider) -> LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter!
static LinqToDB.Internal.DataProvider.Informix.InformixProviderDetector.DetectProvider() -> LinqToDB.DataProvider.Informix.InformixProvider
static LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter.GetInstance(LinqToDB.DataProvider.MySql.MySqlProvider provider) -> LinqToDB.Internal.DataProvider.MySql.MySqlProviderAdapter!
static LinqToDB.Internal.DataProvider.MySql.MySqlProviderDetector.DetectProvider() -> LinqToDB.DataProvider.MySql.MySqlProvider
static LinqToDB.Internal.DataProvider.OdbcProviderAdapter.GetInstance() -> LinqToDB.Internal.DataProvider.OdbcProviderAdapter!
static LinqToDB.Internal.DataProvider.OleDbProviderAdapter.GetInstance() -> LinqToDB.Internal.DataProvider.OleDbProviderAdapter!
static LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter.GetInstance(LinqToDB.DataProvider.Oracle.OracleProvider provider) -> LinqToDB.Internal.DataProvider.Oracle.OracleProviderAdapter!
static LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.MakeIdentitySequenceName(string! tableName) -> string!
static LinqToDB.Internal.DataProvider.Oracle.OracleSqlBuilderBase.MakeIdentityTriggerName(string! tableName) -> string!
static LinqToDB.Internal.DataProvider.Oracle.OracleSqlExpressionConvertVisitor.OracleLikeCharactersToEscape -> string![]!
static LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter.GetInstance() -> LinqToDB.Internal.DataProvider.PostgreSQL.NpgsqlProviderAdapter!
static LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.ClearCache() -> void
static LinqToDB.Internal.DataProvider.ProviderDetectorBase<TProvider, TVersion>.CreateDataProvider<T>() -> System.Lazy<LinqToDB.DataProvider.IDataProvider!>!
static LinqToDB.Internal.DataProvider.ReaderInfo.operator !=(LinqToDB.Internal.DataProvider.ReaderInfo left, LinqToDB.Internal.DataProvider.ReaderInfo right) -> bool
static LinqToDB.Internal.DataProvider.ReaderInfo.operator ==(LinqToDB.Internal.DataProvider.ReaderInfo left, LinqToDB.Internal.DataProvider.ReaderInfo right) -> bool
static LinqToDB.Internal.DataProvider.ReservedWords.Add(string! word, string? providerName = null) -> void
static LinqToDB.Internal.DataProvider.ReservedWords.IsReserved(string! word, string? providerName = null) -> bool
static LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderDetector.DetectProvider() -> LinqToDB.DataProvider.SapHana.SapHanaProvider
static LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter.GetInstance() -> LinqToDB.Internal.DataProvider.SqlCe.SqlCeProviderAdapter!
static LinqToDB.Internal.DataProvider.SqlCe.Translation.SqlCeMemberTranslator.DateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter.GetInstance(LinqToDB.DataProvider.SQLite.SQLiteProvider provider) -> LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderAdapter!
static LinqToDB.Internal.DataProvider.SQLite.SQLiteProviderDetector.DetectProvider() -> LinqToDB.DataProvider.SQLite.SQLiteProvider
static LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.GetInstance(LinqToDB.DataProvider.SqlServer.SqlServerProvider provider) -> LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter!
static LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.DetectProvider() -> LinqToDB.DataProvider.SqlServer.SqlServerProvider
static LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.ResolveSqlTypes(string! path) -> void
static LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderDetector.ResolveSqlTypes(System.Reflection.Assembly! assembly) -> void
static LinqToDB.Internal.DataProvider.SqlServer.Translation.SqlServerMemberTranslator.SqlServerDateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.GetInstance(LinqToDB.DataProvider.Sybase.SybaseProvider provider) -> LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter!
static LinqToDB.Internal.DataProvider.Sybase.SybaseProviderDetector.DetectProvider() -> LinqToDB.DataProvider.Sybase.SybaseProvider
static LinqToDB.Internal.DataProvider.Sybase.Translation.SybaseMemberTranslator.DateFunctionsTranslator.DatePartToStr(LinqToDB.Sql.DateParts part) -> string?
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Add(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Binary(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, string! operation, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Cast(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.DbDataType toDbDataType, bool isMandatory = false) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Cast(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.DbDataType toDbDataType, LinqToDB.SqlQuery.SqlDataType? fromType, bool isMandatory = false) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, string! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, string! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Concat(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! expressions) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Condition(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlPredicate! condition, LinqToDB.Internal.SqlQuery.ISqlExpression! trueExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! falseExpression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Decrement(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Decrement<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Div(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Div<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.EnsureType(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.DbDataType dbDataType) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Equal(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Equal(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, bool? unknownValue) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Expression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, int precedence, string! expr, bool? canBeNull, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Expression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, int precedence, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Expression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.ExprPredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Fragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, string! fragmentText, int precedence, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Fragment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, string! fragmentText, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Function(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, string! functionName, LinqToDB.Internal.SqlQuery.ParametersNullabilityType parametersNullability, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Function(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType type, string! functionName, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Greater(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.GreaterOrEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Increment(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Increment<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.IsNull(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isNot = false) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.IsNullPredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, bool isNot = false) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Length(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Less(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.LessOrEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.LikePredicate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! value, bool isNull, LinqToDB.Internal.SqlQuery.ISqlExpression! template, LinqToDB.Internal.SqlQuery.ISqlExpression? escape = null, string? functionName = null) -> LinqToDB.Internal.SqlQuery.SqlPredicate.Like!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Mod(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Mod<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Multiply(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Multiply<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Multiply<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! x, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Negate(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! v) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NonPureExpression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NonPureFunction(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, string! functionName, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NotEqual(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NotNull(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NotNullExpression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, int precedence, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.NotNullExpression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, string! expr, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Replace(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression, LinqToDB.Internal.SqlQuery.ISqlExpression! oldSubString, LinqToDB.Internal.SqlQuery.ISqlExpression! newSubstring) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.SearchCondition(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, bool isOr = false) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.SqlDataType(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DataType dataType) -> LinqToDB.SqlQuery.SqlDataType!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.SqlDataType(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType type) -> LinqToDB.SqlQuery.SqlDataType!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Sub(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType, LinqToDB.Internal.SqlQuery.ISqlExpression! x, LinqToDB.Internal.SqlQuery.ISqlExpression! y) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.ToLower(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.ToUpper(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.TypeExpression(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dbDataType) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Value<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, LinqToDB.DbDataType dataType, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.SqlExpressionFactoryExtensions.Value<T>(this LinqToDB.Linq.Translation.ISqlExpressionFactory! factory, T value) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.CreatePlaceholder(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, System.Linq.Expressions.Expression! basedOn) -> LinqToDB.Internal.Expressions.SqlPlaceholderExpression!
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.GetDbDataType(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression) -> LinqToDB.DbDataType
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.TranslateToSqlExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! expression, out LinqToDB.Internal.SqlQuery.ISqlExpression? translated) -> bool
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.TryEvaluate<T>(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! expression, out T result) -> bool
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.UsingTypeFromExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression? fromExpression) -> System.IDisposable?
static LinqToDB.Internal.DataProvider.Translation.TranslationContextExtensions.UsingTypeFromExpression(this LinqToDB.Linq.Translation.ITranslationContext! translationContext, params System.Linq.Expressions.Expression![]! fromExpressions) -> System.IDisposable?
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.operator !=(LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement? left, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement? right) -> bool
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.operator ==(LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement? left, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement? right) -> bool
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, T6, T7, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, T6, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, T5, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, T4, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, T3, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<T1, T2, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterConstructor<TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! constructorAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc! translateConstructorFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMember<T, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! memberAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMember<TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! memberAccessPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMemberAccessFunc! translateMemberAccessFunc) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Action!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, T5, T6, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, T5, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, T4, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, T3, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterMethod<T1, T2, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! methodCallPattern, LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc! translateMethodFunc, bool isGenericTypeMatch = false) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterReplacement<T, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T, TResult>!>! replacement) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterReplacement<T1, T2, T3, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TResult>!>! replacement) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterReplacement<T1, T2, TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<T1, T2, TResult>!>! replacement) -> void
static LinqToDB.Internal.DataProvider.Translation.TranslationRegistrationExtensions.RegisterReplacement<TResult>(this LinqToDB.Internal.DataProvider.Translation.TranslationRegistration! registration, System.Linq.Expressions.Expression<System.Func<TResult>!>! pattern, System.Linq.Expressions.Expression<System.Func<TResult>!>! replacement) -> void
static LinqToDB.Internal.Expressions.ExpressionEqualityComparer.Instance.get -> LinqToDB.Internal.Expressions.ExpressionEqualityComparer!
static LinqToDB.Internal.Expressions.ExpressionEvaluator.EvaluateExpression(this System.Linq.Expressions.Expression? expr) -> object?
static LinqToDB.Internal.Expressions.ExpressionEvaluator.EvaluateExpression<T>(this System.Linq.Expressions.Expression? expr) -> T?
static LinqToDB.Internal.Expressions.ExpressionGenerator.Build(System.Action<LinqToDB.Internal.Expressions.ExpressionGenerator!>! buildFunc, LinqToDB.Internal.Expressions.Types.TypeMapper? typeMapper = null) -> System.Linq.Expressions.Expression!
static LinqToDB.Internal.Expressions.ExpressionGenerator.NoOpTypeMapper -> LinqToDB.Internal.Expressions.Types.TypeMapper!
static LinqToDB.Internal.Expressions.ExpressionHelper.Field(System.Linq.Expressions.Expression! obj, string! name) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionHelper.Field(System.Type! type, string! name) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionHelper.Property(System.Linq.Expressions.Expression! obj, string! name) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionHelper.Property(System.Type! type, string! name) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionHelper.PropertyOrField(System.Linq.Expressions.Expression! obj, string! name) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionHelper.PropertyOrField(System.Type! type, string! name, bool allowInherited = true) -> System.Linq.Expressions.MemberExpression!
static LinqToDB.Internal.Expressions.ExpressionPrinter.Print(System.Linq.Expressions.Expression! expression) -> string!
static LinqToDB.Internal.Expressions.ExpressionPrinter.PrintDebug(System.Linq.Expressions.Expression! expression) -> string!
static LinqToDB.Internal.Expressions.MarkerExpression.PreferClientSide(System.Linq.Expressions.Expression! innerExpression) -> System.Linq.Expressions.Expression!
static LinqToDB.Internal.Expressions.SqlErrorExpression.CreateException(string! message) -> System.Exception!
static LinqToDB.Internal.Expressions.SqlErrorExpression.CreateException(System.Linq.Expressions.Expression? expression, string? message) -> System.Exception!
static LinqToDB.Internal.Expressions.SqlErrorExpression.EnsureError(System.Linq.Expressions.Expression! expression) -> LinqToDB.Internal.Expressions.SqlErrorExpression!
static LinqToDB.Internal.Expressions.SqlErrorExpression.EnsureError(System.Linq.Expressions.Expression! expression, System.Type! resultType) -> LinqToDB.Internal.Expressions.SqlErrorExpression!
static LinqToDB.Internal.Expressions.SqlErrorExpression.PrepareExpressionString(System.Linq.Expressions.Expression? expression) -> string!
static LinqToDB.Internal.Expressions.SqlErrorExpression.ThrowError(System.Linq.Expressions.Expression! expression, string? message) -> void
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.AssignmentComparer.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!>!
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment.EmptyCollection -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Assignment!>!
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.FindMember(System.Collections.Generic.IReadOnlyCollection<LinqToDB.Reflection.MemberAccessor!>! members, System.Reflection.ParameterInfo! parameter) -> System.Reflection.MemberInfo?
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.FindMember(System.Type! inType, System.Reflection.ParameterInfo! parameter) -> System.Reflection.MemberInfo?
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.operator !=(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression? left, LinqToDB.Internal.Expressions.SqlGenericConstructorExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.operator ==(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression? left, LinqToDB.Internal.Expressions.SqlGenericConstructorExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.EmptyCollection -> System.Collections.ObjectModel.ReadOnlyCollection<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!>!
static LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter.ParameterComparer.get -> System.Collections.Generic.IEqualityComparer<LinqToDB.Internal.Expressions.SqlGenericConstructorExpression.Parameter!>!
static LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.operator !=(LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression? left, LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression.operator ==(LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression? left, LinqToDB.Internal.Expressions.SqlGenericParamAccessExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlPathExpression.operator !=(LinqToDB.Internal.Expressions.SqlPathExpression? left, LinqToDB.Internal.Expressions.SqlPathExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlPathExpression.operator ==(LinqToDB.Internal.Expressions.SqlPathExpression? left, LinqToDB.Internal.Expressions.SqlPathExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlQueryRootExpression.Create(LinqToDB.IDataContext! dataContext) -> LinqToDB.Internal.Expressions.SqlQueryRootExpression!
static LinqToDB.Internal.Expressions.SqlQueryRootExpression.Create(LinqToDB.IDataContext! dataContext, System.Type! contextType) -> LinqToDB.Internal.Expressions.SqlQueryRootExpression!
static LinqToDB.Internal.Expressions.SqlQueryRootExpression.Create(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! contextType) -> LinqToDB.Internal.Expressions.SqlQueryRootExpression!
static LinqToDB.Internal.Expressions.SqlQueryRootExpression.operator !=(LinqToDB.Internal.Expressions.SqlQueryRootExpression? left, LinqToDB.Internal.Expressions.SqlQueryRootExpression? right) -> bool
static LinqToDB.Internal.Expressions.SqlQueryRootExpression.operator ==(LinqToDB.Internal.Expressions.SqlQueryRootExpression? left, LinqToDB.Internal.Expressions.SqlQueryRootExpression? right) -> bool
static LinqToDB.Internal.Expressions.Types.TypeWrapper.PropertySetter<TI, TP>(System.Linq.Expressions.Expression<System.Func<TI, TP>!>! getter) -> System.Linq.Expressions.Expression<System.Action<TI, TP>!>!
static LinqToDB.Internal.Extensions.ReflectionExtensions.AsNullable(this System.Type! type) -> System.Type!
static LinqToDB.Internal.Extensions.ReflectionExtensions.CanConvertTo(this System.Type! fromType, System.Type! toType) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.EqualsTo(this System.Reflection.MemberInfo? member1, System.Reflection.MemberInfo? member2, System.Type? declaringType = null) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetDefaultConstructorEx(this System.Type! type) -> System.Reflection.ConstructorInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetDefaultValue(this System.Type! type) -> object?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetDefiningTypes(this System.Type! child, System.Reflection.MemberInfo! member) -> System.Collections.Generic.IEnumerable<System.Type!>!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetEventEx(this System.Type! type, string! eventName) -> System.Reflection.EventInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetGenericArguments(this System.Type! type, System.Type! baseType) -> System.Type![]?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetGenericType(this System.Type! genericType, System.Type! type) -> System.Type?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetGenericTypes(this System.Type! genericType, System.Type! type) -> System.Collections.Generic.IEnumerable<System.Type!>!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetImplementation(this System.Type! concreteType, System.Reflection.MemberInfo! interfaceMember) -> System.Reflection.MemberInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetInstanceMemberEx(this System.Type! type, string! name) -> System.Reflection.MemberInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetInterfaceMapEx(this System.Type! type, System.Type! interfaceType) -> System.Reflection.InterfaceMapping
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetItemType(this System.Type? type) -> System.Type?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetListItemType(this System.Collections.IEnumerable? list) -> System.Type!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetListItemType(this System.Type! listType) -> System.Type!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMemberEx(this System.Type! type, System.Reflection.MemberInfo! memberInfo) -> System.Reflection.MemberInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMemberType(this System.Reflection.MemberInfo! memberInfo) -> System.Type!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMethodEx(this System.Type! type, string! name) -> System.Reflection.MethodInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMethodEx(this System.Type! type, string! name, int genericParametersCount, params System.Type![]! types) -> System.Reflection.MethodInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMethodEx(this System.Type! type, string! name, params System.Type![]! types) -> System.Reflection.MethodInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetMethodEx(this System.Type! type, System.Type! returnType, string! name, params System.Type![]! types) -> System.Reflection.MethodInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetNonPublicPropertiesEx(this System.Type! type) -> System.Reflection.PropertyInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPropertiesEx(this System.Type! type) -> System.Reflection.PropertyInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPropertyInfo(this System.Reflection.MethodInfo? method) -> System.Reflection.PropertyInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPublicInstanceMembersEx(this System.Type! type) -> System.Reflection.MemberInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPublicInstanceMethodEx(this System.Type! type, string! name, params System.Type![]! types) -> System.Reflection.MethodInfo?
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPublicInstanceValueMembers(this System.Type! type) -> System.Reflection.MemberInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetPublicMemberEx(this System.Type! type, string! name) -> System.Reflection.MemberInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetStaticMembersEx(this System.Type! type, string! name) -> System.Reflection.MemberInfo![]!
static LinqToDB.Internal.Extensions.ReflectionExtensions.GetTypeCodeEx(this System.Type! type) -> System.TypeCode
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsAnonymous(this System.Type! type) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsDynamicColumnPropertyEx(this System.Reflection.MemberInfo! memberInfo) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsEnumerableType(this System.Type! type, System.Type! elementType) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsFieldEx(this System.Reflection.MemberInfo! memberInfo) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsFloatType(this System.Type! type) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsGenericEnumerableType(this System.Type! type) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsIntegerType(this System.Type! type) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsMethodEx(this System.Reflection.MemberInfo! memberInfo) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsNullable(this System.Type! type) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsNullableGetValueOrDefault(this System.Reflection.MemberInfo! member) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsNullableHasValueMember(this System.Reflection.MemberInfo! member) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsNullableValueMember(this System.Reflection.MemberInfo! member) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsPropertyEx(this System.Reflection.MemberInfo! memberInfo) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsSameOrParentOf(this System.Type! parent, System.Type! child) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsSqlPropertyMethodEx(this System.Reflection.MemberInfo! memberInfo) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.IsSubClassOf(this System.Type! type, System.Type! check) -> bool
static LinqToDB.Internal.Extensions.ReflectionExtensions.ToNullableUnderlying(this System.Type! type) -> System.Type!
static LinqToDB.Internal.Extensions.ReflectionExtensions.ToUnderlying(this System.Type! type) -> System.Type!
static LinqToDB.Internal.Extensions.TypeExtensions.IsInteger(this System.Type! type) -> bool
static LinqToDB.Internal.Linq.Builder.EvaluationHelper.EvaluateExpression(System.Linq.Expressions.Expression? expression, LinqToDB.IDataContext! dataContext, object?[]? parameterValues) -> object?
static LinqToDB.Internal.Linq.Internals.CreateExpressionQueryInstance<T>(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression) -> System.Linq.IQueryable<T>!
static LinqToDB.Internal.Linq.Internals.ExposeQueryExpression(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
static LinqToDB.Internal.Linq.Internals.GetDataContext<T>(LinqToDB.Linq.IUpdatable<T>! updatable) -> LinqToDB.IDataContext?
static LinqToDB.Internal.Linq.Internals.GetDataContext<T>(LinqToDB.Linq.IValueInsertable<T>! insertable) -> LinqToDB.IDataContext?
static LinqToDB.Internal.Linq.Internals.GetDataContext<T>(System.Linq.IQueryable<T>! queryable) -> LinqToDB.IDataContext?
static LinqToDB.Internal.Linq.Internals.GetDataContext<TSource, TTarget>(LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! insertable) -> LinqToDB.IDataContext?
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo(this System.Delegate! del) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(System.Func<T1, T2, T3, T4, T5, T6, T7>! f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5, T6 unused6) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2, T3, T4, T5, T6>(System.Func<T1, T2, T3, T4, T5, T6>! f, T1 unused1, T2 unused2, T3 unused3, T4 unused4, T5 unused5) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2, T3, T4, T5>(System.Func<T1, T2, T3, T4, T5>! f, T1 unused1, T2 unused2, T3 unused3, T4 unused4) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2, T3, T4>(System.Func<T1, T2, T3, T4>! f, T1 unused1, T2 unused2, T3 unused3) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2, T3>(System.Func<T1, T2, T3>! f, T1 unused1, T2 unused2) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.MethodHelper.GetMethodInfo<T1, T2>(System.Func<T1, T2>! f, T1 unused1) -> System.Reflection.MethodInfo!
static LinqToDB.Internal.Linq.Query.ClearCaches() -> void
static LinqToDB.Internal.Linq.Query<T>.CacheMissCount.get -> long
static LinqToDB.Internal.Linq.Query<T>.ClearCache() -> void
static LinqToDB.Internal.Linq.Query<T>.GetQuery(LinqToDB.IDataContext! dataContext, ref LinqToDB.Internal.Linq.IQueryExpressions! expressions, out bool dependsOnParameters) -> LinqToDB.Internal.Linq.Query<T>!
static LinqToDB.Internal.Logging.LoggingExtensions.GetTraceSwitch(this LinqToDB.IDataContext! context) -> System.Diagnostics.TraceSwitch!
static LinqToDB.Internal.Logging.LoggingExtensions.WriteTraceLine(this LinqToDB.IDataContext! context, string! message, string! category, System.Diagnostics.TraceLevel level) -> void
static LinqToDB.Internal.Mapping.DynamicColumnInfo.operator !=(LinqToDB.Internal.Mapping.DynamicColumnInfo? a, LinqToDB.Internal.Mapping.DynamicColumnInfo? b) -> bool
static LinqToDB.Internal.Mapping.DynamicColumnInfo.operator ==(LinqToDB.Internal.Mapping.DynamicColumnInfo? a, LinqToDB.Internal.Mapping.DynamicColumnInfo? b) -> bool
static LinqToDB.Internal.Mapping.Nullability.TryAnalyzeMember(System.Reflection.MemberInfo! member, out bool isNullable) -> bool
static LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetHashSet(string?[]? data, System.Collections.Generic.IEqualityComparer<string?>! comparer) -> System.Collections.Generic.HashSet<string?>!
static LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ToTypeName(System.Type? type, bool isNullable) -> string!
static LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ToValidName(string! name) -> string!
static LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetExtensionBuilder(System.Type! builderType) -> LinqToDB.Internal.SqlQuery.ISqlExtensionBuilder!
static LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetPrecedence(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> int
static LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsDateDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string! dateName) -> bool
static LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsTimeDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ApplyUpdateTableComparison(LinqToDB.Internal.SqlQuery.SelectQuery! updateQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause, LinqToDB.Internal.SqlQuery.SqlTable! inQueryTable, LinqToDB.DataOptions! dataOptions) -> void
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ApplyUpdateTableComparison(LinqToDB.Internal.SqlQuery.SqlSearchCondition! searchCondition, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause, LinqToDB.Internal.SqlQuery.SqlTable! inQueryTable, LinqToDB.DataOptions! dataOptions) -> void
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CloneTable(LinqToDB.Internal.SqlQuery.SqlTable! tableToClone, out System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! replaceTree) -> LinqToDB.Internal.SqlQuery.SqlTable!
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.DetachUpdateTableFromUpdateQuery(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! updateStatement, LinqToDB.DataOptions! dataOptions, bool moveToJoin, bool addNewSource, out LinqToDB.Internal.SqlQuery.SqlTableSource! newSource) -> LinqToDB.Internal.SqlQuery.SqlUpdateStatement!
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.HasParameters(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.IsCompatibleForUpdate(LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Internal.SqlQuery.SqlTable! updateTable) -> bool
static LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.RemapCloned<TElement>(TElement! element, System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>? mainTree, System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>? innerTree = null, bool insideColumns = true) -> TElement!
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsDateDataOffsetType(LinqToDB.DbDataType dataType) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsDateDataType(LinqToDB.DbDataType dataType, string! typeName) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsDateTime2Type(LinqToDB.DbDataType dataType, string! typeName) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsDateTimeType(LinqToDB.DbDataType dataType, string! typeName) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsSmallDateTimeType(LinqToDB.DbDataType dataType, string! typeName) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.IsTimeDataType(LinqToDB.DbDataType dataType) -> bool
static LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.StandardLikeCharactersToEscape -> string![]!
static LinqToDB.Internal.SqlProvider.TableIDInfo.operator !=(LinqToDB.Internal.SqlProvider.TableIDInfo? left, LinqToDB.Internal.SqlProvider.TableIDInfo? right) -> bool
static LinqToDB.Internal.SqlProvider.TableIDInfo.operator ==(LinqToDB.Internal.SqlProvider.TableIDInfo? left, LinqToDB.Internal.SqlProvider.TableIDInfo? right) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasCreateIfNotExists(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasDropIfExists(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsGlobalTemporaryData(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsGlobalTemporaryStructure(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsLocalTemporaryData(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsLocalTemporaryStructure(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsTemporary(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.HasIsTransactionTemporaryData(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.IsSet(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.IsTemporaryOptionSet(this LinqToDB.TableOptions tableOptions) -> bool
static LinqToDB.Internal.SqlProvider.TableOptionsExtensions.Or(this LinqToDB.TableOptions tableOptions, LinqToDB.TableOptions additionalOptions) -> LinqToDB.TableOptions
static LinqToDB.Internal.SqlQuery.CteClause.CteIDCounter -> int
static LinqToDB.Internal.SqlQuery.DebugStringExtensions.AppendElement<T>(this LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer, T? element) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
static LinqToDB.Internal.SqlQuery.DebugStringExtensions.AppendExtensions(this LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer, System.Collections.Generic.ICollection<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>? extensions) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
static LinqToDB.Internal.SqlQuery.DebugStringExtensions.AppendTag(this LinqToDB.Internal.SqlQuery.QueryElementTextWriter! writer, LinqToDB.Internal.SqlQuery.SqlComment? comment) -> LinqToDB.Internal.SqlQuery.QueryElementTextWriter!
static LinqToDB.Internal.SqlQuery.JoinExtensions.CrossApply(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.CrossApply(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.FullJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.FullJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.InnerJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.InnerJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.LeftJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.LeftJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.OuterApply(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.OuterApply(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.RightJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.RightJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.WeakInnerJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.WeakInnerJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.WeakLeftJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.JoinExtensions.WeakLeftJoin(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string! alias, params LinqToDB.Internal.SqlQuery.SqlFromClause.Join![]! joins) -> LinqToDB.Internal.SqlQuery.SqlFromClause.Join!
static LinqToDB.Internal.SqlQuery.NullabilityContext.GetContext(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> LinqToDB.Internal.SqlQuery.NullabilityContext!
static LinqToDB.Internal.SqlQuery.NullabilityContext.NonQuery.get -> LinqToDB.Internal.SqlQuery.NullabilityContext!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddAnd(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, System.Action<LinqToDB.Internal.SqlQuery.SqlSearchCondition!>! andInitializer) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddEqual(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddExists(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, bool isNot = false) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddGreater(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddGreaterOrEqual(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddIsNotNull(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddIsNull(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddIsNull(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool isNot) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddLess(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddLessOrEqual(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddNot(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddNotEqual(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2, LinqToDB.CompareNulls compareNulls) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddNotExists(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.AddOr(this LinqToDB.Internal.SqlQuery.SqlSearchCondition! search, System.Action<LinqToDB.Internal.SqlQuery.SqlSearchCondition!>! orInitializer) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.MakeNot(this LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.SqlQuery.PredicateExtensions.MakeNot(this LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate, bool isNot) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.SqlQuery.PseudoFunctions.MakeCast(LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType = null) -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
static LinqToDB.Internal.SqlQuery.PseudoFunctions.MakeMandatoryCast(LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.DbDataType toType, LinqToDB.SqlQuery.SqlDataType? fromType = null) -> LinqToDB.Internal.SqlQuery.SqlCastExpression!
static LinqToDB.Internal.SqlQuery.PseudoFunctions.MakeReplace(LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! oldSubstring, LinqToDB.Internal.SqlQuery.ISqlExpression! newSubstring, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlFunction!
static LinqToDB.Internal.SqlQuery.PseudoFunctions.MakeToLower(LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlFunction!
static LinqToDB.Internal.SqlQuery.QueryHelper.CalcCanBeNull(System.Type? type, bool? canBeNull, LinqToDB.Internal.SqlQuery.ParametersNullabilityType isNullable, System.Collections.Generic.IEnumerable<bool>! nullInfo) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.CanBeEvaluated(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, bool withParameters) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.CanBeEvaluated(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.CanBeNullableOrUnknown(this LinqToDB.Internal.SqlQuery.ISqlExpression! expr, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, bool withoutUnknownErased) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.CollectDependencies(LinqToDB.Internal.SqlQuery.IQueryElement! root, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlTableSource!>! sources, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.ISqlExpression!>! found, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.IQueryElement!>? ignore = null, bool singleColumnLevel = false) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.CollectParametersAndValues(LinqToDB.Internal.SqlQuery.IQueryElement! root, System.Collections.Generic.ICollection<LinqToDB.Internal.SqlQuery.SqlParameter!>! parameters, System.Collections.Generic.ICollection<LinqToDB.Internal.SqlQuery.SqlValue!>! values) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.CollectUniqueKeys(LinqToDB.Internal.SqlQuery.ISqlTableSource! tableSource, bool includeDistinct, System.Collections.Generic.List<System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! knownKeys) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.CollectUniqueKeys(LinqToDB.Internal.SqlQuery.SqlTableSource! tableSource, System.Collections.Generic.List<System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! knownKeys) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.CollectUsedSources(LinqToDB.Internal.SqlQuery.IQueryElement! root, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.ISqlTableSource!>! found, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.IQueryElement!>? ignore = null) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.ConcatSearchCondition(this LinqToDB.Internal.SqlQuery.SqlHavingClause! where, LinqToDB.Internal.SqlQuery.SqlSearchCondition! search) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.ConcatSearchCondition(this LinqToDB.Internal.SqlQuery.SqlWhereClause! where, LinqToDB.Internal.SqlQuery.SqlSearchCondition! search) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.ContainsAggregationFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.ContainsAggregationOrWindowFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.ContainsWindowFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.ConvertFormatToConcatenation(string! format, System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.ISqlExpression!>! parameters) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.CorrectComparisonForJoin(LinqToDB.Internal.SqlQuery.SqlSearchCondition! sc) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.QueryHelper.CreateSqlValue(object? value, LinqToDB.DbDataType dbDataType, params LinqToDB.Internal.SqlQuery.ISqlExpression![]! basedOn) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.CreateSqlValue(object? value, LinqToDB.Internal.SqlQuery.SqlBinaryExpression! be, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnsureConjunction(this LinqToDB.Internal.SqlQuery.SqlWhereClause! whereClause) -> LinqToDB.Internal.SqlQuery.SqlSearchCondition!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateAccessibleSources(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlTableSource!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateAccessibleSources(LinqToDB.Internal.SqlQuery.SqlTableSource! tableSource) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.ISqlTableSource!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateAccessibleTables(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlTable!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateAccessibleTableSources(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlTableSource!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateJoins(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlJoinedTable!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EnumerateLevelSources(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.SqlQuery.SqlTableSource!>!
static LinqToDB.Internal.SqlQuery.QueryHelper.EvaluateBoolExpression(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context, bool? defaultValue = null) -> bool?
static LinqToDB.Internal.SqlQuery.QueryHelper.EvaluateExpression(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> object?
static LinqToDB.Internal.SqlQuery.QueryHelper.ExtractField(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.SqlField?
static LinqToDB.Internal.SqlQuery.QueryHelper.ExtractPredicate(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate, out LinqToDB.Internal.SqlQuery.ISqlPredicate! underlying, out bool isNot) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.ExtractSqlTable(LinqToDB.Internal.SqlQuery.ISqlExpression? expression) -> LinqToDB.Internal.SqlQuery.SqlTable?
static LinqToDB.Internal.SqlQuery.QueryHelper.GetBoolValue(LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext) -> bool?
static LinqToDB.Internal.SqlQuery.QueryHelper.GetColumnDescriptor(LinqToDB.Internal.SqlQuery.ISqlExpression? expr) -> LinqToDB.Mapping.ColumnDescriptor?
static LinqToDB.Internal.SqlQuery.QueryHelper.GetDbDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.DbDataType
static LinqToDB.Internal.SqlQuery.QueryHelper.GetDbDataTypeWithoutSchema(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.DbDataType
static LinqToDB.Internal.SqlQuery.QueryHelper.GetParameterValue(this LinqToDB.Internal.SqlQuery.SqlParameter! parameter, LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues? parameterValues) -> LinqToDB.Internal.SqlQuery.SqlParameterValue!
static LinqToDB.Internal.SqlQuery.QueryHelper.GetUnderlyingField(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.SqlField?
static LinqToDB.Internal.SqlQuery.QueryHelper.GetUsedSources(LinqToDB.Internal.SqlQuery.ISqlExpression! root, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.ISqlTableSource!>! foundSources) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.GetValueConverter(LinqToDB.Internal.SqlQuery.ISqlExpression? expr) -> LinqToDB.Mapping.IValueConverter?
static LinqToDB.Internal.SqlQuery.QueryHelper.HasElement(this LinqToDB.Internal.SqlQuery.IQueryElement! root, LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.HasQueryParameter(this LinqToDB.Internal.SqlQuery.IQueryElement! root) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.HasTableInQuery(LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Internal.SqlQuery.SqlTable! table) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsAggregationFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsAggregationOrWindowFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsAggregationQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsBoolean(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool includeFields = false) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsConstant(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsConstantFast(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsDependsOn(LinqToDB.Internal.SqlQuery.IQueryElement! testedRoot, LinqToDB.Internal.SqlQuery.IQueryElement! onElement, System.Collections.Generic.HashSet<LinqToDB.Internal.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsDependsOnOuterSources(LinqToDB.Internal.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.IQueryElement!>? elementsToIgnore = null, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.ISqlTableSource!>? currentSources = null) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsDependsOnSource(LinqToDB.Internal.SqlQuery.IQueryElement! testedRoot, LinqToDB.Internal.SqlQuery.ISqlTableSource! onSource, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsDependsOnSources(LinqToDB.Internal.SqlQuery.IQueryElement! testedRoot, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.ISqlTableSource!>! onSources, System.Collections.Generic.IReadOnlyCollection<LinqToDB.Internal.SqlQuery.IQueryElement!>? elementsToIgnore = null) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsEqualTables(LinqToDB.Internal.SqlQuery.SqlTable? table1, LinqToDB.Internal.SqlQuery.SqlTable? table2, bool withExtensions = true) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsMutable(this LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsNullValue(this LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsPredicate(this LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsSingleTableInQuery(LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Internal.SqlQuery.SqlTable! table) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.IsWindowFunction(LinqToDB.Internal.SqlQuery.IQueryElement! expr) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.MarkAsNonQueryParameters(LinqToDB.Internal.SqlQuery.IQueryElement! root) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.MoveOrderByUp(params LinqToDB.Internal.SqlQuery.SelectQuery![]! queries) -> void
static LinqToDB.Internal.SqlQuery.QueryHelper.NeedParameterInlining(LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.SameWithoutNullablity(LinqToDB.Internal.SqlQuery.ISqlExpression! expr1, LinqToDB.Internal.SqlQuery.ISqlExpression! expr2) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.ShouldCheckForNull(this LinqToDB.Internal.SqlQuery.ISqlExpression! expr, LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.SimplifyColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression? sqlExpression) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
static LinqToDB.Internal.SqlQuery.QueryHelper.SuggestDbDataType(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.DbDataType?
static LinqToDB.Internal.SqlQuery.QueryHelper.SuggestTableSourceAlias(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, string! alias) -> string!
static LinqToDB.Internal.SqlQuery.QueryHelper.TransformExpressionIndexes<TContext>(TContext context, string! expression, System.Func<TContext, int, int>! transformFunc) -> string!
static LinqToDB.Internal.SqlQuery.QueryHelper.TryEvaluateExpression(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context, out object? result) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.TryEvaluateExpressionForServer(this LinqToDB.Internal.SqlQuery.IQueryElement! expr, LinqToDB.Internal.SqlQuery.EvaluationContext! context, out object? result) -> bool
static LinqToDB.Internal.SqlQuery.QueryHelper.UnwrapCast(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.UnwrapExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool checkNullability) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.UnwrapNullablity(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.QueryHelper.WrapQuery<TStatement, TContext>(TContext context, TStatement! statement, System.Func<TContext, LinqToDB.Internal.SqlQuery.SelectQuery!, LinqToDB.Internal.SqlQuery.IQueryElement?, bool>! wrapTest, System.Action<TContext, LinqToDB.Internal.SqlQuery.SelectQuery!, LinqToDB.Internal.SqlQuery.SelectQuery!>? onWrap, bool allowMutation) -> TStatement!
static LinqToDB.Internal.SqlQuery.QueryHelper.WrapQuery<TStatement, TContext>(TContext context, TStatement! statement, System.Func<TContext, LinqToDB.Internal.SqlQuery.SelectQuery!, LinqToDB.Internal.SqlQuery.IQueryElement?, int>! wrapTest, System.Action<TContext, System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.SelectQuery!>!>! onWrap, bool allowMutation) -> TStatement!
static LinqToDB.Internal.SqlQuery.QueryHelper.WrapQuery<TStatement>(TStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! queryToWrap, bool allowMutation) -> TStatement!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Clone<T, TContext>(this T? element, TContext context, System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! objectTree, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! doClone) -> T?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Clone<T, TContext>(this T? element, TContext context, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! doClone) -> T?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Clone<T>(this T? element) -> T?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Clone<T>(this T? element, System.Collections.Generic.Dictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! objectTree) -> T?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Clone<T>(this T? element, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! doClone) -> T?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<T>(this T! element, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Convert<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction, bool withStack) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.ConvertAll<T>(this T! element, bool allowMutation, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<object?>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, bool allowMutation, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.ConvertAll<TContext, T>(this T! element, TContext context, System.Func<LinqToDB.Internal.SqlQuery.Visitors.SqlQueryConvertVisitor<TContext>!, LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! convertAction) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Find(this LinqToDB.Internal.SqlQuery.IQueryElement? element, LinqToDB.Internal.SqlQuery.QueryElementType type) -> LinqToDB.Internal.SqlQuery.IQueryElement?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Find(this LinqToDB.Internal.SqlQuery.IQueryElement? element, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! find) -> LinqToDB.Internal.SqlQuery.IQueryElement?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Find<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement? element, TContext context, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! find) -> LinqToDB.Internal.SqlQuery.IQueryElement?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.FindExcept<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement? element, TContext context, LinqToDB.Internal.SqlQuery.IQueryElement! skip, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! find) -> LinqToDB.Internal.SqlQuery.IQueryElement?
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Replace<T>(this T! element, System.Collections.Generic.IDictionary<LinqToDB.Internal.SqlQuery.IQueryElement!, LinqToDB.Internal.SqlQuery.IQueryElement!>! replacements, params LinqToDB.Internal.SqlQuery.IQueryElement![]! toIgnore) -> T!
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Visit(this LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Action<LinqToDB.Internal.SqlQuery.IQueryElement!>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.Visit<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Action<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitAll(this LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Action<LinqToDB.Internal.SqlQuery.IQueryElement!>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitAll<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Action<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitParentFirst(this LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitParentFirst<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitParentFirstAll(this LinqToDB.Internal.SqlQuery.IQueryElement! element, System.Func<LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> void
static LinqToDB.Internal.SqlQuery.QueryVisitorExtensions.VisitParentFirstAll<TContext>(this LinqToDB.Internal.SqlQuery.IQueryElement! element, TContext context, System.Func<TContext, LinqToDB.Internal.SqlQuery.IQueryElement!, bool>! action) -> void
static LinqToDB.Internal.SqlQuery.SelectQuery.SourceIDCounter -> int
static LinqToDB.Internal.SqlQuery.SqlExtensions.CreateCount(this LinqToDB.Internal.SqlQuery.ISqlTableSource! table, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlFunction!
static LinqToDB.Internal.SqlQuery.SqlExtensions.EnsureQuery(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SelectQuery!
static LinqToDB.Internal.SqlQuery.SqlExtensions.GetInsertClause(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlInsertClause?
static LinqToDB.Internal.SqlQuery.SqlExtensions.GetOutputClause(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlOutputClause?
static LinqToDB.Internal.SqlQuery.SqlExtensions.GetWithClause(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlWithClause?
static LinqToDB.Internal.SqlQuery.SqlExtensions.HasSomeModifiers(this LinqToDB.Internal.SqlQuery.SqlSelectClause! select, bool ignoreSkip, bool ignoreTake) -> bool
static LinqToDB.Internal.SqlQuery.SqlExtensions.IsDelete(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
static LinqToDB.Internal.SqlQuery.SqlExtensions.IsInsert(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
static LinqToDB.Internal.SqlQuery.SqlExtensions.IsUpdate(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
static LinqToDB.Internal.SqlQuery.SqlExtensions.NeedsIdentity(this LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
static LinqToDB.Internal.SqlQuery.SqlExtensions.WithName(this LinqToDB.Internal.SqlQuery.SqlFunction! func, string! name) -> LinqToDB.Internal.SqlQuery.SqlFunction!
static LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.ApplyNullability(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, bool canBeNull) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.SqlNullabilityExpression.ApplyNullability(LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.Internal.SqlQuery.NullabilityContext! nullability) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr.SwapOperator(LinqToDB.Internal.SqlQuery.SqlPredicate.Operator op) -> LinqToDB.Internal.SqlQuery.SqlPredicate.Operator
static LinqToDB.Internal.SqlQuery.SqlPredicate.MakeBool(bool isTrue) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
static LinqToDB.Internal.SqlQuery.SqlTable.Create<T>(LinqToDB.IDataContext! dataContext) -> LinqToDB.Internal.SqlQuery.SqlTable!
static LinqToDB.Linq.Expressions.AccessInt<T>(T value) -> T
static LinqToDB.Linq.Expressions.AccessRound(decimal? value, int? precision) -> decimal?
static LinqToDB.Linq.Expressions.AccessRound(double? value, int? precision) -> double?
static LinqToDB.Linq.Expressions.AltStuff(string? str, int? startLocation, int? length, string? value) -> string?
static LinqToDB.Linq.Expressions.ConvertBinary(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.BinaryExpression! binaryExpression) -> System.Linq.Expressions.LambdaExpression?
static LinqToDB.Linq.Expressions.ConvertMember(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type? objectType, System.Reflection.MemberInfo! mi) -> System.Linq.Expressions.LambdaExpression?
static LinqToDB.Linq.Expressions.ConvertToCaseCompareTo(string? str, string? value) -> int?
static LinqToDB.Linq.Expressions.DecimalPI() -> decimal
static LinqToDB.Linq.Expressions.DoublePI() -> double
static LinqToDB.Linq.Expressions.Hex(System.Guid? guid) -> string?
static LinqToDB.Linq.Expressions.L<T1, T2, T3, T4, T5, T6, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, T6, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<T1, TR>(System.Linq.Expressions.Expression<System.Func<T1, TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.L<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! func) -> System.Linq.Expressions.LambdaExpression!
static LinqToDB.Linq.Expressions.M<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! func) -> LinqToDB.Expressions.MemberHelper.MemberInfoWithType
static LinqToDB.Linq.Expressions.M<T>(System.Linq.Expressions.Expression<System.Func<T>!>! func) -> LinqToDB.Expressions.MemberHelper.MemberInfoWithType
static LinqToDB.Linq.Expressions.MapBinary(string! providerName, System.Linq.Expressions.ExpressionType nodeType, System.Type! leftType, System.Type! rightType, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapBinary(System.Linq.Expressions.ExpressionType nodeType, System.Type! leftType, System.Type! rightType, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapBinary<TLeft, TRight, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TR>!>! binaryExpression, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapBinary<TLeft, TRight, TR>(System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TR>!>! binaryExpression, System.Linq.Expressions.Expression<System.Func<TLeft, TRight, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, LinqToDB.Expressions.MemberHelper.MemberInfoWithType memberInfoWithType, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, System.Linq.Expressions.Expression<System.Func<object!>!>! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, System.Reflection.MemberInfo! memberInfo, LinqToDB.Linq.IExpressionInfo! expressionInfo) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, System.Type! objectType, System.Reflection.MemberInfo! memberInfo, LinqToDB.Linq.IExpressionInfo! expressionInfo) -> void
static LinqToDB.Linq.Expressions.MapMember(string! providerName, System.Type! objectType, System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(System.Linq.Expressions.Expression<System.Func<object!>!>! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(System.Reflection.MemberInfo! memberInfo, LinqToDB.Linq.IExpressionInfo! expressionInfo) -> void
static LinqToDB.Linq.Expressions.MapMember(System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember(System.Type! objectType, System.Reflection.MemberInfo! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, T5, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, T5, TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, T5, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, T5, TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, T5, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, T4, TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, T4, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, T3, TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, T3, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, TR>(System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, T2, TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, T2, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, TR>(System.Linq.Expressions.Expression<System.Func<T1, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T1, TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<T1, TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T>(string! providerName, System.Linq.Expressions.Expression<System.Func<T, object?>!>! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<T>(System.Linq.Expressions.Expression<System.Func<T, object?>!>! memberInfo, System.Linq.Expressions.LambdaExpression! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<TR>(string! providerName, System.Linq.Expressions.Expression<System.Func<TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<TR>(string! providerName, System.Type! objectType, System.Linq.Expressions.Expression<System.Func<TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<TR>(System.Linq.Expressions.Expression<System.Func<TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.MapMember<TR>(System.Type! objectType, System.Linq.Expressions.Expression<System.Func<TR>!>! memberInfo, System.Linq.Expressions.Expression<System.Func<TR>!>! expression) -> void
static LinqToDB.Linq.Expressions.Mdy(int? month, int? day, int? year) -> System.DateTime?
static LinqToDB.Linq.Expressions.N(System.Func<System.Linq.Expressions.LambdaExpression!>! func) -> LinqToDB.Linq.Expressions.LazyExpressionInfo!
static LinqToDB.Linq.Expressions.Replicate(char? ch, int? count) -> string?
static LinqToDB.Linq.Expressions.Replicate(string? str, int? count) -> string?
static LinqToDB.Linq.Expressions.Round(decimal? value, int precision, int mode) -> decimal?
static LinqToDB.Linq.Expressions.Round(double? value, int precision, int mode) -> double?
static LinqToDB.Linq.Expressions.SetGenericInfoProvider(System.Type! type) -> void
static LinqToDB.Linq.Expressions.TrimLeft(string? str, params char[]! trimChars) -> string?
static LinqToDB.Linq.Expressions.TrimRight(string? str, params char[]! trimChars) -> string?
static LinqToDB.Linq.Expressions.VarChar(object? obj, int? size) -> string?
static LinqToDB.Linq.NoLinqCache.Scope() -> System.IDisposable!
static LinqToDB.Linq.Tools.ClearAllCaches() -> void
static LinqToDB.LinqExtensions.AsCte<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.AsCte<TSource>(this System.Linq.IQueryable<TSource>! source, string? name) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.AsQueryable<TElement>(this System.Collections.Generic.IEnumerable<TElement>! source, LinqToDB.IDataContext! dataContext) -> System.Linq.IQueryable<TElement>!
static LinqToDB.LinqExtensions.AsSubQuery<TKey, TElement>(this System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>!>! grouping) -> System.Linq.IQueryable<TKey>!
static LinqToDB.LinqExtensions.AsSubQuery<TKey, TElement>(this System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>!>! grouping, string! queryName) -> System.Linq.IQueryable<TKey>!
static LinqToDB.LinqExtensions.AsSubQuery<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.AsSubQuery<TSource>(this System.Linq.IQueryable<TSource>! source, string! queryName) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.AsUpdatable<T>(this System.Linq.IQueryable<T>! source) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.AsValueInsertable<T>(this LinqToDB.ITable<T>! source) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.CrossJoin<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.DatabaseName<T>(this LinqToDB.ITable<T>! table, string? name) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.Delete<T>(this System.Linq.IQueryable<T>! source) -> int
static LinqToDB.LinqExtensions.Delete<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, bool>!>! predicate) -> int
static LinqToDB.LinqExtensions.DeleteAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.DeleteAsync<T>(this System.Linq.IQueryable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.DeleteWhenMatched<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.DeleteWhenMatchedAnd<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! searchCondition) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.DeleteWhenNotMatchedBySource<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.DeleteWhenNotMatchedBySourceAnd<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>! searchCondition) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.DeleteWithOutput<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.DeleteWithOutput<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IEnumerable<TSource>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource, TOutput>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource[]!>!
static LinqToDB.LinqExtensions.DeleteWithOutputAsync<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
static LinqToDB.LinqExtensions.DeleteWithOutputInto<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TOutput>! outputTable) -> int
static LinqToDB.LinqExtensions.DeleteWithOutputInto<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.DeleteWithOutputIntoAsync<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.DeleteWithOutputIntoAsync<TSource, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TOutput>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.DisableGuard<TKey, TElement>(this System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>!>! grouping) -> System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>!>!
static LinqToDB.LinqExtensions.Drop<T>(this LinqToDB.ITable<T>! target, bool throwExceptionIfNotExists = true) -> int
static LinqToDB.LinqExtensions.DropAsync<T>(this LinqToDB.ITable<T>! target, bool throwExceptionIfNotExists = true, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.ElementAt<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! index) -> TSource
static LinqToDB.LinqExtensions.ElementAtAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! index, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.LinqExtensions.ElementAtOrDefault<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! index) -> TSource
static LinqToDB.LinqExtensions.ElementAtOrDefaultAsync<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! index, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.LinqExtensions.ExceptAll<TSource>(this System.Linq.IQueryable<TSource>! source1, System.Collections.Generic.IEnumerable<TSource>! source2) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.ExtensionsAdapter.get -> LinqToDB.IExtensionsAdapter?
static LinqToDB.LinqExtensions.ExtensionsAdapter.set -> void
static LinqToDB.LinqExtensions.FullJoin<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.FullJoin<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.GenerateTestString<T>(this System.Linq.IQueryable<T>! query, bool mangleNames = false) -> string!
static LinqToDB.LinqExtensions.HasUniqueKey<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Having<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.IgnoreFilters<TSource>(this System.Linq.IQueryable<TSource>! source, params System.Type![]! entityTypes) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.IndexHint<TSource, TParam>(this LinqToDB.ITable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.IndexHint<TSource, TParam>(this LinqToDB.ITable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.IndexHint<TSource>(this LinqToDB.ITable<TSource>! table, string! hint) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.InlineParameters<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.InnerJoin<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.InnerJoin<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Insert<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter) -> int
static LinqToDB.LinqExtensions.Insert<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> int
static LinqToDB.LinqExtensions.Insert<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> int
static LinqToDB.LinqExtensions.Insert<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> int
static LinqToDB.LinqExtensions.InsertAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertOrUpdate<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! insertSetter, System.Linq.Expressions.Expression<System.Func<T, T?>!>? onDuplicateKeyUpdateSetter) -> int
static LinqToDB.LinqExtensions.InsertOrUpdate<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! insertSetter, System.Linq.Expressions.Expression<System.Func<T, T?>!>? onDuplicateKeyUpdateSetter, System.Linq.Expressions.Expression<System.Func<T>!>! keySelector) -> int
static LinqToDB.LinqExtensions.InsertOrUpdateAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! insertSetter, System.Linq.Expressions.Expression<System.Func<T, T?>!>? onDuplicateKeyUpdateSetter, System.Linq.Expressions.Expression<System.Func<T>!>! keySelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertOrUpdateAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! insertSetter, System.Linq.Expressions.Expression<System.Func<T, T?>!>? onDuplicateKeyUpdateSetter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWhenNotMatched<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.InsertWhenNotMatched<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.InsertWhenNotMatchedAnd<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! searchCondition, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.InsertWhenNotMatchedAnd<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>! searchCondition) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.InsertWithDecimalIdentity<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter) -> decimal
static LinqToDB.LinqExtensions.InsertWithDecimalIdentity<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> decimal?
static LinqToDB.LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> decimal?
static LinqToDB.LinqExtensions.InsertWithDecimalIdentity<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> decimal?
static LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.LinqExtensions.InsertWithIdentity<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter) -> object!
static LinqToDB.LinqExtensions.InsertWithIdentity<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> object!
static LinqToDB.LinqExtensions.InsertWithIdentity<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> object!
static LinqToDB.LinqExtensions.InsertWithIdentity<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> object!
static LinqToDB.LinqExtensions.InsertWithIdentityAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.LinqExtensions.InsertWithIdentityAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.LinqExtensions.InsertWithIdentityAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object!>!
static LinqToDB.LinqExtensions.InsertWithInt32Identity<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter) -> int
static LinqToDB.LinqExtensions.InsertWithInt32Identity<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> int?
static LinqToDB.LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> int?
static LinqToDB.LinqExtensions.InsertWithInt32Identity<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> int?
static LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.LinqExtensions.InsertWithInt64Identity<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter) -> long
static LinqToDB.LinqExtensions.InsertWithInt64Identity<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> long?
static LinqToDB.LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> long?
static LinqToDB.LinqExtensions.InsertWithInt64Identity<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> long?
static LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync<T>(this LinqToDB.ITable<T>! target, System.Linq.Expressions.Expression<System.Func<T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.LinqExtensions.InsertWithOutput<T, TOutput>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TOutput>!>! outputExpression) -> TOutput
static LinqToDB.LinqExtensions.InsertWithOutput<T>(this LinqToDB.Linq.IValueInsertable<T>! source) -> T
static LinqToDB.LinqExtensions.InsertWithOutput<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.InsertWithOutput<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source) -> TTarget
static LinqToDB.LinqExtensions.InsertWithOutput<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IEnumerable<TTarget>!
static LinqToDB.LinqExtensions.InsertWithOutput<TTarget, TOutput>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> TOutput
static LinqToDB.LinqExtensions.InsertWithOutput<TTarget>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter) -> TTarget
static LinqToDB.LinqExtensions.InsertWithOutput<TTarget>(this LinqToDB.ITable<TTarget>! target, TTarget obj) -> TTarget
static LinqToDB.LinqExtensions.InsertWithOutputAsync<T, TOutput>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<T>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TTarget[]!>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TTarget>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<TTarget>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TTarget, TOutput>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TOutput>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TTarget>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TTarget>!
static LinqToDB.LinqExtensions.InsertWithOutputAsync<TTarget>(this LinqToDB.ITable<TTarget>! target, TTarget obj, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TTarget>!
static LinqToDB.LinqExtensions.InsertWithOutputInto<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.InsertWithOutputInto<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, LinqToDB.ITable<TTarget>! outputTable) -> int
static LinqToDB.LinqExtensions.InsertWithOutputInto<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TTarget>! outputTable) -> int
static LinqToDB.LinqExtensions.InsertWithOutputInto<TTarget, TOutput>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.InsertWithOutputInto<TTarget>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, LinqToDB.ITable<TTarget>! outputTable) -> int
static LinqToDB.LinqExtensions.InsertWithOutputIntoAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWithOutputIntoAsync<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, LinqToDB.ITable<TTarget>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWithOutputIntoAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TTarget>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWithOutputIntoAsync<TTarget, TOutput>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.InsertWithOutputIntoAsync<TTarget>(this LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TTarget>!>! setter, LinqToDB.ITable<TTarget>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.IntersectAll<TSource>(this System.Linq.IQueryable<TSource>! source1, System.Collections.Generic.IEnumerable<TSource>! source2) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Into<T>(this LinqToDB.IDataContext! dataContext, LinqToDB.ITable<T>! target) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.Into<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target) -> LinqToDB.Linq.ISelectInsertable<TSource, TTarget>!
static LinqToDB.LinqExtensions.Join<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, LinqToDB.SqlJoinType joinType, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.Join<TSource>(this System.Linq.IQueryable<TSource>! source, LinqToDB.SqlJoinType joinType, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.JoinHint<TSource>(this System.Linq.IQueryable<TSource>! source, string! hint) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.LeftJoin<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.LeftJoin<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.LoadWith<TEntity, TProperty>(this System.Linq.IQueryable<TEntity!>! source, System.Linq.Expressions.Expression<System.Func<TEntity!, System.Collections.Generic.IEnumerable<TProperty>?>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.LoadWith<TEntity, TProperty>(this System.Linq.IQueryable<TEntity!>! source, System.Linq.Expressions.Expression<System.Func<TEntity!, TProperty?>!>! selector) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.LoadWith<TEntity, TProperty>(this System.Linq.IQueryable<TEntity!>! source, System.Linq.Expressions.Expression<System.Func<TEntity!, TProperty?>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.LoadWithAsTable<T>(this LinqToDB.ITable<T>! table, System.Linq.Expressions.Expression<System.Func<T, object?>!>! selector) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.Merge<TTarget, TSource>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge) -> int
static LinqToDB.LinqExtensions.Merge<TTarget>(this LinqToDB.ITable<TTarget>! target) -> LinqToDB.Linq.IMergeableUsing<TTarget>!
static LinqToDB.LinqExtensions.Merge<TTarget>(this LinqToDB.ITable<TTarget>! target, string! hint) -> LinqToDB.Linq.IMergeableUsing<TTarget>!
static LinqToDB.LinqExtensions.Merge<TTarget>(this System.Linq.IQueryable<TTarget>! target) -> LinqToDB.Linq.IMergeableUsing<TTarget>!
static LinqToDB.LinqExtensions.MergeAsync<TTarget, TSource>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.MergeInto<TTarget, TSource>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target) -> LinqToDB.Linq.IMergeableOn<TTarget, TSource>!
static LinqToDB.LinqExtensions.MergeInto<TTarget, TSource>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, string! hint) -> LinqToDB.Linq.IMergeableOn<TTarget, TSource>!
static LinqToDB.LinqExtensions.MergeInto<TTarget, TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.IQueryable<TTarget>! target) -> LinqToDB.Linq.IMergeableOn<TTarget, TSource>!
static LinqToDB.LinqExtensions.MergeWithOutput<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.MergeWithOutput<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TSource, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.MergeWithOutputAsync<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.MergeWithOutputAsync<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TSource, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.MergeWithOutputInto<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TOutput>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.MergeWithOutputInto<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TSource, TOutput>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.MergeWithOutputIntoAsync<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.MergeWithOutputIntoAsync<TTarget, TSource, TOutput>(this LinqToDB.Linq.IMergeable<TTarget, TSource>! merge, LinqToDB.ITable<TOutput>! outputTable, System.Linq.Expressions.Expression<System.Func<string!, TTarget, TTarget, TSource, TOutput>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.On<TTarget, TSource, TKey>(this LinqToDB.Linq.IMergeableOn<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TKey>!>! targetKey, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! sourceKey) -> LinqToDB.Linq.IMergeableSource<TTarget, TSource>!
static LinqToDB.LinqExtensions.On<TTarget, TSource>(this LinqToDB.Linq.IMergeableOn<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! matchCondition) -> LinqToDB.Linq.IMergeableSource<TTarget, TSource>!
static LinqToDB.LinqExtensions.OnTargetKey<TTarget>(this LinqToDB.Linq.IMergeableOn<TTarget, TTarget>! merge) -> LinqToDB.Linq.IMergeableSource<TTarget, TTarget>!
static LinqToDB.LinqExtensions.ProcessSourceQueryable.get -> System.Func<System.Linq.IQueryable!, System.Linq.IQueryable!>?
static LinqToDB.LinqExtensions.ProcessSourceQueryable.set -> void
static LinqToDB.LinqExtensions.QueryHint<TSource, TParam>(this System.Linq.IQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.QueryHint<TSource, TParam>(this System.Linq.IQueryable<TSource>! source, string! hint, TParam hintParameter) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.QueryHint<TSource>(this System.Linq.IQueryable<TSource>! source, string! hint) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.QueryName<TKey, TElement>(this System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>!>! grouping, string! queryName) -> System.Linq.IQueryable<TKey>!
static LinqToDB.LinqExtensions.QueryName<TSource>(this System.Linq.IQueryable<TSource>! source, string! queryName) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.RemoveOrderBy<TSource>(this System.Linq.IQueryable<TSource>! source) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.RightJoin<TOuter, TInner, TResult>(this System.Linq.IQueryable<TOuter>! outer, System.Linq.IQueryable<TInner>! inner, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>!>! resultSelector) -> System.Linq.IQueryable<TResult>!
static LinqToDB.LinqExtensions.RightJoin<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.SchemaName<T>(this LinqToDB.ITable<T>! table, string? name) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.Select<T>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<T>!>! selector) -> T
static LinqToDB.LinqExtensions.SelectAsync<T>(this LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression<System.Func<T>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>!
static LinqToDB.LinqExtensions.ServerName<T>(this LinqToDB.ITable<T>! table, string? name) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, System.Linq.Expressions.Expression<System.Func<T, TV>!>! update) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, System.Linq.Expressions.Expression<System.Func<TV>!>! update) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, TV value) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, System.Linq.Expressions.Expression<System.Func<T, TV>!>! update) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, System.Linq.Expressions.Expression<System.Func<TV>!>! update) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T, TV>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! extract, TV value) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, string!>!>! setExpression) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Set<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, string!>!>! setExpression) -> LinqToDB.Linq.IUpdatable<T>!
static LinqToDB.LinqExtensions.Skip<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! count) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.SubQueryHint<TSource, TParam>(this System.Linq.IQueryable<TSource>! source, string! hint, params TParam[]! hintParameters) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.SubQueryHint<TSource, TParam>(this System.Linq.IQueryable<TSource>! source, string! hint, TParam hintParameter) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.SubQueryHint<TSource>(this System.Linq.IQueryable<TSource>! source, string! hint) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.TableHint<TSource, TParam>(this LinqToDB.ITable<TSource>! table, string! hint, params TParam[]! hintParameters) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.TableHint<TSource, TParam>(this LinqToDB.ITable<TSource>! table, string! hint, TParam hintParameter) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.TableHint<TSource>(this LinqToDB.ITable<TSource>! table, string! hint) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.TableID<T>(this LinqToDB.ITable<T>! table, string? id) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.TableName<T>(this LinqToDB.ITable<T>! table, string! name) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.TablesInScopeHint<TSource, TParam>(this System.Linq.IQueryable<TSource>! source, string! hint, TParam hintParameter) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.TablesInScopeHint<TSource>(this System.Linq.IQueryable<TSource>! source, string! hint) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.TablesInScopeHint<TSource>(this System.Linq.IQueryable<TSource>! source, string! hint, params object![]! hintParameters) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.TagQuery<T>(this LinqToDB.ITable<T>! table, string! tagValue) -> LinqToDB.ITable<T>!
static LinqToDB.LinqExtensions.TagQuery<TSource>(this System.Linq.IQueryable<TSource>! source, string! tagValue) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Take<TSource>(this System.Linq.IQueryable<TSource>! source, int count, LinqToDB.TakeHints hints) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Take<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! count) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Take<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<int>!>! count, LinqToDB.TakeHints hints) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, System.Collections.Generic.IEnumerable<TPreviousProperty>!>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, System.Collections.Generic.IEnumerable<TProperty>!>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, System.Collections.Generic.IEnumerable<TPreviousProperty>!>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty?>!>! selector) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, System.Collections.Generic.IEnumerable<TPreviousProperty>!>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty?>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, TPreviousProperty>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, System.Collections.Generic.IEnumerable<TProperty>?>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, TPreviousProperty>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty?>!>! selector) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenLoad<TEntity, TPreviousProperty, TProperty>(this LinqToDB.ILoadWithQueryable<TEntity!, TPreviousProperty>! source, System.Linq.Expressions.Expression<System.Func<TPreviousProperty, TProperty?>!>! selector, System.Linq.Expressions.Expression<System.Func<System.Linq.IQueryable<TProperty>!, System.Linq.IQueryable<TProperty>!>!>! loadFunc) -> LinqToDB.ILoadWithQueryable<TEntity!, TProperty>!
static LinqToDB.LinqExtensions.ThenOrBy<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Linq.IOrderedQueryable<TSource>!
static LinqToDB.LinqExtensions.ThenOrByDescending<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TKey>!>! keySelector) -> System.Linq.IOrderedQueryable<TSource>!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this LinqToDB.Linq.IUpdatable<T>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this LinqToDB.Linq.IValueInsertable<T>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<T>(this System.Linq.IQueryable<T>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource, TTarget>(this LinqToDB.Linq.IMergeable<TSource, TTarget>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource, TTarget>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.ToSqlQuery<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>! query, LinqToDB.SqlGenerationOptions? options = null) -> LinqToDB.QuerySql!
static LinqToDB.LinqExtensions.Truncate<T>(this LinqToDB.ITable<T>! target, bool resetIdentity = true) -> int
static LinqToDB.LinqExtensions.TruncateAsync<T>(this LinqToDB.ITable<T>! target, bool resetIdentity = true, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UnionAll<TSource>(this System.Linq.IQueryable<TSource>! source1, System.Collections.Generic.IEnumerable<TSource>! source2) -> System.Linq.IQueryable<TSource>!
static LinqToDB.LinqExtensions.Update<T>(this LinqToDB.Linq.IUpdatable<T>! source) -> int
static LinqToDB.LinqExtensions.Update<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter) -> int
static LinqToDB.LinqExtensions.Update<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter) -> int
static LinqToDB.LinqExtensions.Update<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> int
static LinqToDB.LinqExtensions.Update<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> int
static LinqToDB.LinqExtensions.UpdateAsync<T>(this LinqToDB.Linq.IUpdatable<T>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWhenMatched<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWhenMatched<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedAnd<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! searchCondition, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedAnd<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget, bool>!>! searchCondition) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedAndThenDelete<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! searchCondition, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! deleteCondition) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedAndThenDelete<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget, bool>!>! searchCondition, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget, bool>!>! deleteCondition) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedThenDelete<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! deleteCondition) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWhenMatchedThenDelete<TTarget>(this LinqToDB.Linq.IMergeableSource<TTarget, TTarget>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget, bool>!>! deleteCondition) -> LinqToDB.Linq.IMergeable<TTarget, TTarget>!
static LinqToDB.LinqExtensions.UpdateWhenNotMatchedBySource<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWhenNotMatchedBySourceAnd<TTarget, TSource>(this LinqToDB.Linq.IMergeableSource<TTarget, TSource>! merge, System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>! searchCondition, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget>!>! setter) -> LinqToDB.Linq.IMergeable<TTarget, TSource>!
static LinqToDB.LinqExtensions.UpdateWithOutput<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutput<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutput<T>(this LinqToDB.Linq.IUpdatable<T>! source) -> System.Collections.Generic.IEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutput<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter) -> System.Collections.Generic.IEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutput<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutput<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutput<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter) -> System.Collections.Generic.IEnumerable<LinqToDB.UpdateOutput<TTarget!>!>!
static LinqToDB.LinqExtensions.UpdateWithOutput<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IEnumerable<LinqToDB.UpdateOutput<TTarget>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Linq.Expressions.Expression<System.Func<T, T, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(LinqToDB.Linq.IUpdatable<T>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<T>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this LinqToDB.Linq.IUpdatable<T>! source) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<T>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<T>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TOutput[]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput>!>! outputExpression) -> System.Collections.Generic.IAsyncEnumerable<TOutput>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget!>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<LinqToDB.UpdateOutput<TTarget>![]!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<TTarget!>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> System.Collections.Generic.IAsyncEnumerable<LinqToDB.UpdateOutput<TTarget>!>!
static LinqToDB.LinqExtensions.UpdateWithOutputInto<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<T, T, TOutput!>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<T, T, TOutput!>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<T>(this LinqToDB.Linq.IUpdatable<T!>! source, LinqToDB.ITable<T!>! outputTable) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<T>(this System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, T!>!>! setter, LinqToDB.ITable<T!>! outputTable) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput!>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput!>!>! outputExpression) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TTarget!>! outputTable) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputInto<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TTarget!>! outputTable) -> int
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<T, TOutput>(this LinqToDB.Linq.IUpdatable<T>! source, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<T, T, TOutput!>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<T, TOutput>(this System.Linq.IQueryable<T>! source, System.Linq.Expressions.Expression<System.Func<T, T>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<T, T, TOutput!>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<T>(this LinqToDB.Linq.IUpdatable<T!>! source, LinqToDB.ITable<T!>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<T>(this System.Linq.IQueryable<T!>! source, System.Linq.Expressions.Expression<System.Func<T!, T!>!>! setter, LinqToDB.ITable<T!>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!, TTarget!, TOutput!>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<TSource, TTarget, TOutput>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter, LinqToDB.ITable<TOutput!>! outputTable, System.Linq.Expressions.Expression<System.Func<TSource, TTarget, TTarget, TOutput!>!>! outputExpression, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, LinqToDB.ITable<TTarget!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TTarget!>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.UpdateWithOutputIntoAsync<TSource, TTarget>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget!>!>! setter, LinqToDB.ITable<TTarget!>! outputTable, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.LinqExtensions.Using<TTarget, TSource>(this LinqToDB.Linq.IMergeableUsing<TTarget>! merge, System.Collections.Generic.IEnumerable<TSource>! source) -> LinqToDB.Linq.IMergeableOn<TTarget, TSource>!
static LinqToDB.LinqExtensions.Using<TTarget, TSource>(this LinqToDB.Linq.IMergeableUsing<TTarget>! merge, System.Linq.IQueryable<TSource>! source) -> LinqToDB.Linq.IMergeableOn<TTarget, TSource>!
static LinqToDB.LinqExtensions.UsingTarget<TTarget>(this LinqToDB.Linq.IMergeableUsing<TTarget>! merge) -> LinqToDB.Linq.IMergeableOn<TTarget, TTarget>!
static LinqToDB.LinqExtensions.Value<T, TV>(this LinqToDB.ITable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! field, System.Linq.Expressions.Expression<System.Func<TV>!>! value) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.Value<T, TV>(this LinqToDB.ITable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! field, TV value) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.Value<T, TV>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! field, System.Linq.Expressions.Expression<System.Func<TV>!>! value) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.Value<T, TV>(this LinqToDB.Linq.IValueInsertable<T>! source, System.Linq.Expressions.Expression<System.Func<T, TV>!>! field, TV value) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.LinqExtensions.Value<TSource, TTarget, TValue>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Linq.Expressions.Expression<System.Func<TTarget, TValue>!>! field, System.Linq.Expressions.Expression<System.Func<TSource, TValue>!>! value) -> LinqToDB.Linq.ISelectInsertable<TSource, TTarget>!
static LinqToDB.LinqExtensions.Value<TSource, TTarget, TValue>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Linq.Expressions.Expression<System.Func<TTarget, TValue>!>! field, System.Linq.Expressions.Expression<System.Func<TValue>!>! value) -> LinqToDB.Linq.ISelectInsertable<TSource, TTarget>!
static LinqToDB.LinqExtensions.Value<TSource, TTarget, TValue>(this LinqToDB.Linq.ISelectInsertable<TSource, TTarget>! source, System.Linq.Expressions.Expression<System.Func<TTarget, TValue>!>! field, TValue value) -> LinqToDB.Linq.ISelectInsertable<TSource, TTarget>!
static LinqToDB.LinqExtensions.With<TSource>(this LinqToDB.ITable<TSource>! table, string! hint) -> LinqToDB.ITable<TSource>!
static LinqToDB.LinqExtensions.WithTableExpression<T>(this LinqToDB.ITable<T>! table, string! expression) -> LinqToDB.ITable<T>!
static LinqToDB.LinqOptions.Default.get -> LinqToDB.LinqOptions!
static LinqToDB.LinqOptions.Default.set -> void
static LinqToDB.LinqOptions.operator !=(LinqToDB.LinqOptions? left, LinqToDB.LinqOptions? right) -> bool
static LinqToDB.LinqOptions.operator ==(LinqToDB.LinqOptions? left, LinqToDB.LinqOptions? right) -> bool
static LinqToDB.Mapping.AssociationDescriptor.ParseKeys(string? keys) -> string![]!
static LinqToDB.Mapping.ColumnDescriptor.ApplyConversions(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! getterExpr, LinqToDB.DbDataType dbDataType, LinqToDB.Mapping.IValueConverter? valueConverter, bool includingEnum) -> System.Linq.Expressions.Expression!
static LinqToDB.Mapping.ColumnDescriptor.CalculateDbDataType(LinqToDB.Mapping.MappingSchema! mappingSchema, System.Type! systemType) -> LinqToDB.DbDataType
static LinqToDB.Mapping.DefaultValue.GetValue(System.Type! type, LinqToDB.Mapping.MappingSchema? mappingSchema = null) -> object?
static LinqToDB.Mapping.DefaultValue.GetValue<T>() -> T
static LinqToDB.Mapping.DefaultValue.SetValue<T>(T value) -> void
static LinqToDB.Mapping.DefaultValue<T>.Value.get -> T
static LinqToDB.Mapping.DefaultValue<T>.Value.set -> void
static LinqToDB.Mapping.MappingSchema.ClearCache() -> void
static LinqToDB.Mapping.MappingSchema.CombineSchemas(LinqToDB.Mapping.MappingSchema! ms1, LinqToDB.Mapping.MappingSchema! ms2) -> LinqToDB.Mapping.MappingSchema!
static LinqToDB.Mapping.MappingSchema.Default -> LinqToDB.Mapping.MappingSchema!
static LinqToDB.Mapping.MappingSchema.EntityDescriptorCreatedCallback.get -> System.Action<LinqToDB.Mapping.MappingSchema!, LinqToDB.Mapping.IEntityChangeDescriptor!>?
static LinqToDB.Mapping.MappingSchema.EntityDescriptorCreatedCallback.set -> void
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.Delete(System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! predicate) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.DeleteBySource(System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>! predicate) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.Insert(System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! create) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.Update(System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! update) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.UpdateBySource(System.Linq.Expressions.Expression<System.Func<TTarget, bool>!>! predicate, System.Linq.Expressions.Expression<System.Func<TTarget, TTarget>!>! update) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.MergeDefinition<TTarget, TSource>.Operation.UpdateWithDelete(System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! updatePredicate, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, TTarget>!>! update, System.Linq.Expressions.Expression<System.Func<TTarget, TSource, bool>!>! deletePredicate) -> LinqToDB.MergeDefinition<TTarget, TSource>.Operation!
static LinqToDB.Metadata.MetadataReader.Default -> LinqToDB.Metadata.MetadataReader!
static LinqToDB.Metrics.ActivityService.AddFactory(System.Func<LinqToDB.Metrics.ActivityID, LinqToDB.Metrics.IActivity?>! factory) -> void
static LinqToDB.MultiInsertExtensions.Else<TSource, TTarget>(this LinqToDB.MultiInsertExtensions.IMultiInsertWhen<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>!
static LinqToDB.MultiInsertExtensions.Insert<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>! insert) -> int
static LinqToDB.MultiInsertExtensions.InsertAll<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! insert) -> int
static LinqToDB.MultiInsertExtensions.InsertAllAsync<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! insert, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.MultiInsertExtensions.InsertAsync<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>! insert, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.MultiInsertExtensions.InsertFirst<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! insert) -> int
static LinqToDB.MultiInsertExtensions.InsertFirstAsync<TSource>(this LinqToDB.MultiInsertExtensions.IMultiInsertElse<TSource>! insert, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.MultiInsertExtensions.Into<TSource, TTarget>(this LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>! source, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> LinqToDB.MultiInsertExtensions.IMultiInsertInto<TSource>!
static LinqToDB.MultiInsertExtensions.MultiInsert<TSource>(this System.Linq.IQueryable<TSource>! source) -> LinqToDB.MultiInsertExtensions.IMultiInsertSource<TSource>!
static LinqToDB.MultiInsertExtensions.When<TSource, TTarget>(this LinqToDB.MultiInsertExtensions.IMultiInsertWhen<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! condition, LinqToDB.ITable<TTarget>! target, System.Linq.Expressions.Expression<System.Func<TSource, TTarget>!>! setter) -> LinqToDB.MultiInsertExtensions.IMultiInsertWhen<TSource>!
static LinqToDB.RawSqlString.implicit operator LinqToDB.RawSqlString(string! s) -> LinqToDB.RawSqlString
static LinqToDB.RawSqlString.implicit operator LinqToDB.RawSqlString(System.FormattableString! fs) -> LinqToDB.RawSqlString
static LinqToDB.Reflection.ObjectFactory<T>.CreateInstance() -> T
static LinqToDB.Reflection.TypeAccessor.GetAccessor(System.Type! type) -> LinqToDB.Reflection.TypeAccessor!
static LinqToDB.Reflection.TypeAccessor.GetAccessor<T>() -> LinqToDB.Reflection.TypeAccessor<T>!
static LinqToDB.Remote.LinqService.TypeResolver -> System.Func<string!, System.Type?>!
static LinqToDB.Sql.Abs(decimal? value) -> decimal?
static LinqToDB.Sql.Abs(double? value) -> double?
static LinqToDB.Sql.Abs(float? value) -> float?
static LinqToDB.Sql.Abs(int? value) -> int?
static LinqToDB.Sql.Abs(long? value) -> long?
static LinqToDB.Sql.Abs(sbyte? value) -> sbyte?
static LinqToDB.Sql.Abs(short? value) -> short?
static LinqToDB.Sql.Acos(double? value) -> double?
static LinqToDB.Sql.AliasExpr() -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.AllColumns() -> object?[]!
static LinqToDB.Sql.Asin(double? value) -> double?
static LinqToDB.Sql.AsNotNull<T>(T value) -> T
static LinqToDB.Sql.AsNotNullable<T>(T value) -> T
static LinqToDB.Sql.AsNullable<T>(T value) -> T
static LinqToDB.Sql.AsSql<T>(T obj) -> T
static LinqToDB.Sql.Atan(double? value) -> double?
static LinqToDB.Sql.Atan2(double? x, double? y) -> double?
static LinqToDB.Sql.Between<T>(this T value, T low, T high) -> bool
static LinqToDB.Sql.Between<T>(this T? value, T? low, T? high) -> bool
static LinqToDB.Sql.Ceiling(decimal? value) -> decimal?
static LinqToDB.Sql.Ceiling(double? value) -> double?
static LinqToDB.Sql.CharIndex(char? value, string? str) -> int?
static LinqToDB.Sql.CharIndex(char? value, string? str, int? start) -> int?
static LinqToDB.Sql.CharIndex(string? substring, string? str) -> int?
static LinqToDB.Sql.CharIndex(string? substring, string? str, int? start) -> int?
static LinqToDB.Sql.Collate(this string? expr, string! collation) -> string?
static LinqToDB.Sql.Concat(params object?[]! args) -> string?
static LinqToDB.Sql.Concat(params string?[]! args) -> string?
static LinqToDB.Sql.ConcatStrings(string! separator, params string?[]! arguments) -> string!
static LinqToDB.Sql.Constant<T>(T expression) -> T
static LinqToDB.Sql.Convert<TTo, TFrom>(TFrom obj) -> TTo
static LinqToDB.Sql.Convert<TTo, TFrom>(TTo to, TFrom from) -> TTo
static LinqToDB.Sql.Convert<TTo, TFrom>(TTo to, TFrom from, int format) -> TTo
static LinqToDB.Sql.ConvertTo<TTo>.From<TFrom>(TFrom obj) -> TTo
static LinqToDB.Sql.Cos(double? value) -> double?
static LinqToDB.Sql.Cosh(double? value) -> double?
static LinqToDB.Sql.Cot(double? value) -> double?
static LinqToDB.Sql.CurrentTimestamp.get -> System.DateTime
static LinqToDB.Sql.CurrentTimestamp2.get -> System.DateTime
static LinqToDB.Sql.CurrentTimestampUtc.get -> System.DateTime
static LinqToDB.Sql.CurrentTzTimestamp.get -> System.DateTimeOffset
static LinqToDB.Sql.DateAdd(LinqToDB.Sql.DateParts part, double? number, System.DateTime? date) -> System.DateTime?
static LinqToDB.Sql.DateAdd(LinqToDB.Sql.DateParts part, double? number, System.DateTimeOffset? date) -> System.DateTimeOffset?
static LinqToDB.Sql.DateDiff(LinqToDB.Sql.DateParts part, System.DateTime? startDate, System.DateTime? endDate) -> int?
static LinqToDB.Sql.DateDiff(LinqToDB.Sql.DateParts part, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate) -> int?
static LinqToDB.Sql.DateFirst.get -> int
static LinqToDB.Sql.DatePart(LinqToDB.Sql.DateParts part, System.DateTime? date) -> int?
static LinqToDB.Sql.DatePart(LinqToDB.Sql.DateParts part, System.DateTimeOffset? date) -> int?
static LinqToDB.Sql.DateToTime(System.DateTime? date) -> System.TimeSpan?
static LinqToDB.Sql.Default<T>() -> T
static LinqToDB.Sql.Degrees(decimal? value) -> decimal?
static LinqToDB.Sql.Degrees(double? value) -> double?
static LinqToDB.Sql.Degrees(float? value) -> float?
static LinqToDB.Sql.Degrees(int? value) -> int?
static LinqToDB.Sql.Degrees(long? value) -> long?
static LinqToDB.Sql.Degrees(sbyte? value) -> sbyte?
static LinqToDB.Sql.Degrees(short? value) -> short?
static LinqToDB.Sql.Exp(double? value) -> double?
static LinqToDB.Sql.Expr<T>(LinqToDB.RawSqlString sql, params object![]! parameters) -> T
static LinqToDB.Sql.Expr<T>(System.FormattableString! sql) -> T
static LinqToDB.Sql.ExpressionAttribute.PrepareArguments<TContext>(TContext context, string! expressionStr, int[]? argIndices, bool addDefault, System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter, bool forceInlineParameters, out System.Linq.Expressions.Expression? error) -> LinqToDB.Internal.SqlQuery.ISqlExpression?[]!
static LinqToDB.Sql.ExpressionAttribute.PrepareParameterValues<TContext>(TContext context, LinqToDB.Mapping.MappingSchema! mappingSchema, System.Linq.Expressions.Expression! expression, ref string? expressionStr, bool includeInstance, out System.Collections.Generic.List<(System.Linq.Expressions.Expression? expression, LinqToDB.ExprParameterAttribute? parameter)>! knownExpressions, bool ignoreGenericParameters, bool forceInlineParameters, out System.Collections.Generic.List<LinqToDB.SqlQuery.SqlDataType!>? genericTypes, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
static LinqToDB.Sql.ExpressionAttribute.ResolveExpressionValues<TContext>(TContext context, string! expression, System.Func<TContext, string!, string?, string?>! valueProvider, out System.Linq.Expressions.Expression? error) -> string!
static LinqToDB.Sql.ExpressionAttribute.ToParametersNullabilityType(LinqToDB.Sql.IsNullableType nullableType) -> LinqToDB.Internal.SqlQuery.ParametersNullabilityType
static LinqToDB.Sql.Ext.get -> LinqToDB.Sql.ISqlExtension?
static LinqToDB.Sql.ExtensionAttribute.BuildSqlExpression(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SelectQuery! query, LinqToDB.Sql.SqlExtension! root, System.Type! systemType, int precedence, LinqToDB.Internal.SqlQuery.SqlFlags flags, bool? canBeNull, LinqToDB.Sql.IsNullableType isNullable) -> System.Linq.Expressions.Expression!
static LinqToDB.Sql.ExtensionAttribute.ExcludeExtensionChain(LinqToDB.Mapping.MappingSchema! mapping, System.Linq.Expressions.Expression! expr, out bool isQueryable) -> System.Linq.Expressions.Expression!
static LinqToDB.Sql.ExtensionAttribute.GetExtensionAttributes(System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.MappingSchema! mapping, bool forFirstConfiguration = true) -> LinqToDB.Sql.ExtensionAttribute![]!
static LinqToDB.Sql.FieldExpr(object! fieldExpr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.FieldExpr(object! fieldExpr, bool qualified) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.FieldExpr<T, TV>(LinqToDB.ITable<T>! table, System.Linq.Expressions.Expression<System.Func<T, TV>!>! fieldExpr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.FieldExpr<T, TV>(LinqToDB.ITable<T>! table, System.Linq.Expressions.Expression<System.Func<T, TV>!>! fieldExpr, bool qualified) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.FieldName(object! fieldExpr) -> string!
static LinqToDB.Sql.FieldName(object! fieldExpr, bool qualified) -> string!
static LinqToDB.Sql.FieldName<T>(LinqToDB.ITable<T>! table, System.Linq.Expressions.Expression<System.Func<T, object!>!>! fieldExpr) -> string!
static LinqToDB.Sql.FieldName<T>(LinqToDB.ITable<T>! table, System.Linq.Expressions.Expression<System.Func<T, object!>!>! fieldExpr, bool qualified) -> string!
static LinqToDB.Sql.Floor(decimal? value) -> decimal?
static LinqToDB.Sql.Floor(double? value) -> double?
static LinqToDB.Sql.GetDate() -> System.DateTime
static LinqToDB.Sql.GroupBy -> LinqToDB.Sql.IGroupBy!
static LinqToDB.Sql.Grouping(params object![]! fields) -> int
static LinqToDB.Sql.IsDistinctFrom<T>(this T value, T other) -> bool
static LinqToDB.Sql.IsDistinctFrom<T>(this T value, T? other) -> bool
static LinqToDB.Sql.IsNotDistinctFrom<T>(this T value, T other) -> bool
static LinqToDB.Sql.IsNotDistinctFrom<T>(this T value, T? other) -> bool
static LinqToDB.Sql.Left(string? str, int? length) -> string?
static LinqToDB.Sql.Length(byte[]? value) -> int?
static LinqToDB.Sql.Length(string? str) -> int?
static LinqToDB.Sql.Length(System.Data.Linq.Binary? value) -> int?
static LinqToDB.Sql.Like(string? matchExpression, string? pattern) -> bool
static LinqToDB.Sql.Like(string? matchExpression, string? pattern, char? escapeCharacter) -> bool
static LinqToDB.Sql.Log(decimal? newBase, decimal? value) -> decimal?
static LinqToDB.Sql.Log(decimal? value) -> decimal?
static LinqToDB.Sql.Log(double? newBase, double? value) -> double?
static LinqToDB.Sql.Log(double? value) -> double?
static LinqToDB.Sql.Log10(double? value) -> double?
static LinqToDB.Sql.Lower(string? str) -> string?
static LinqToDB.Sql.MakeDateTime(int? year, int? month, int? day) -> System.DateTime?
static LinqToDB.Sql.MakeDateTime(int? year, int? month, int? day, int? hour, int? minute, int? second) -> System.DateTime?
static LinqToDB.Sql.NewGuid() -> System.Guid
static LinqToDB.Sql.NoConvert<T>(T expr) -> T
static LinqToDB.Sql.NotBetween<T>(this T value, T low, T high) -> bool
static LinqToDB.Sql.NotBetween<T>(this T? value, T? low, T? high) -> bool
static LinqToDB.Sql.NullIf<T>(T? value, T compareTo) -> T?
static LinqToDB.Sql.NullIf<T>(T? value, T? compareTo) -> T?
static LinqToDB.Sql.Ordinal<T>(T expression) -> T
static LinqToDB.Sql.PadLeft(string? str, int? length, char? paddingChar) -> string?
static LinqToDB.Sql.PadRight(string? str, int? length, char? paddingChar) -> string?
static LinqToDB.Sql.Parameter<T>(T expression) -> T
static LinqToDB.Sql.Power(decimal? x, decimal? y) -> decimal?
static LinqToDB.Sql.Power(double? x, double? y) -> double?
static LinqToDB.Sql.Property<T>(object? entity, string! propertyName) -> T
static LinqToDB.Sql.QueryExtensionAttribute.GetExtensionAttributes(System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.MappingSchema! mapping) -> LinqToDB.Sql.QueryExtensionAttribute![]!
static LinqToDB.Sql.Replace(string? str, char? oldValue, char? newValue) -> string?
static LinqToDB.Sql.Replace(string? str, string? oldValue, string? newValue) -> string?
static LinqToDB.Sql.Reverse(string? str) -> string?
static LinqToDB.Sql.Right(string? str, int? length) -> string?
static LinqToDB.Sql.Round(decimal? value) -> decimal?
static LinqToDB.Sql.Round(decimal? value, int? precision) -> decimal?
static LinqToDB.Sql.Round(double? value) -> double?
static LinqToDB.Sql.Round(double? value, int? precision) -> double?
static LinqToDB.Sql.RoundToEven(decimal? value) -> decimal?
static LinqToDB.Sql.RoundToEven(decimal? value, int? precision) -> decimal?
static LinqToDB.Sql.RoundToEven(double? value) -> double?
static LinqToDB.Sql.RoundToEven(double? value, int? precision) -> double?
static LinqToDB.Sql.Sign(decimal? value) -> int?
static LinqToDB.Sql.Sign(double? value) -> int?
static LinqToDB.Sql.Sign(float? value) -> int?
static LinqToDB.Sql.Sign(int? value) -> int?
static LinqToDB.Sql.Sign(long? value) -> int?
static LinqToDB.Sql.Sign(sbyte? value) -> int?
static LinqToDB.Sql.Sign(short? value) -> int?
static LinqToDB.Sql.Sin(double? value) -> double?
static LinqToDB.Sql.Sinh(double? value) -> double?
static LinqToDB.Sql.Space(int? length) -> string?
static LinqToDB.Sql.SqlID.Parse(string! value) -> LinqToDB.Sql.SqlID
static LinqToDB.Sql.Sqrt(double? value) -> double?
static LinqToDB.Sql.StringAggregate(this System.Collections.Generic.IEnumerable<string?>! source, string! separator) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<string?, string!>!
static LinqToDB.Sql.StringAggregate(this System.Linq.IQueryable<string?>! source, string! separator) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<string?, string!>!
static LinqToDB.Sql.StringAggregate<T>(this System.Collections.Generic.IEnumerable<T>! source, string! separator, System.Func<T, string?>! selector) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<T, string!>!
static LinqToDB.Sql.StringAggregate<T>(this System.Linq.IQueryable<T>! source, string! separator, System.Linq.Expressions.Expression<System.Func<T, string?>!>! selector) -> LinqToDB.Sql.IAggregateFunctionNotOrdered<T, string!>!
static LinqToDB.Sql.Stuff(string? str, int? start, int? length, string? newString) -> string?
static LinqToDB.Sql.Stuff(System.Collections.Generic.IEnumerable<string!>! characterExpression, int? start, int? length, string! replaceWithExpression) -> string!
static LinqToDB.Sql.Substring(string? str, int? start, int? length) -> string?
static LinqToDB.Sql.TableAlias(string! id) -> LinqToDB.Sql.SqlID
static LinqToDB.Sql.TableExpr(object! tableExpr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.TableExpr(object! tableExpr, LinqToDB.Sql.TableQualification qualification) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.TableExpr<T>(LinqToDB.ITable<T>! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.TableExpr<T>(LinqToDB.ITable<T>! table, LinqToDB.Sql.TableQualification qualification) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
static LinqToDB.Sql.TableField<TEntity, TColumn>(TEntity entity, string! fieldName) -> TColumn
static LinqToDB.Sql.TableName(object! tableExpr) -> string!
static LinqToDB.Sql.TableName(object! tableExpr, LinqToDB.Sql.TableQualification qualification) -> string!
static LinqToDB.Sql.TableName(string! id) -> LinqToDB.Sql.SqlID
static LinqToDB.Sql.TableName<T>(LinqToDB.ITable<T>! table) -> string!
static LinqToDB.Sql.TableName<T>(LinqToDB.ITable<T>! table, LinqToDB.Sql.TableQualification qualification) -> string!
static LinqToDB.Sql.TableSpec(string! id) -> LinqToDB.Sql.SqlID
static LinqToDB.Sql.Tan(double? value) -> double?
static LinqToDB.Sql.Tanh(double? value) -> double?
static LinqToDB.Sql.ToDate(int? year, int? month, int? day) -> System.DateTime?
static LinqToDB.Sql.ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second) -> System.DateTime?
static LinqToDB.Sql.ToDate(int? year, int? month, int? day, int? hour, int? minute, int? second, int? millisecond) -> System.DateTime?
static LinqToDB.Sql.ToNotNull<T>(T? value) -> T
static LinqToDB.Sql.ToNotNullable<T>(T? value) -> T
static LinqToDB.Sql.ToNullable<T>(T value) -> T?
static LinqToDB.Sql.ToSql<T>(T obj) -> T
static LinqToDB.Sql.Trim(string? str) -> string?
static LinqToDB.Sql.Trim(string? str, char? ch) -> string?
static LinqToDB.Sql.TrimLeft(string? str) -> string?
static LinqToDB.Sql.TrimLeft(string? str, char? ch) -> string?
static LinqToDB.Sql.TrimRight(string? str) -> string?
static LinqToDB.Sql.TrimRight(string? str, char? ch) -> string?
static LinqToDB.Sql.Truncate(decimal? value) -> decimal?
static LinqToDB.Sql.Truncate(double? value) -> double?
static LinqToDB.Sql.TryConvert<TFrom, TTo>(TFrom value, TTo? _) -> TTo?
static LinqToDB.Sql.TryConvertOrDefault<TFrom, TTo>(TFrom value, TTo? defaultValue) -> TTo?
static LinqToDB.Sql.Types.BigInt.get -> long
static LinqToDB.Sql.Types.Bit.get -> bool
static LinqToDB.Sql.Types.Char(int length) -> string!
static LinqToDB.Sql.Types.Date.get -> System.DateTime
static LinqToDB.Sql.Types.DateTime.get -> System.DateTime
static LinqToDB.Sql.Types.DateTime2.get -> System.DateTime
static LinqToDB.Sql.Types.DateTimeOffset.get -> System.DateTimeOffset
static LinqToDB.Sql.Types.Decimal(int precision) -> decimal
static LinqToDB.Sql.Types.Decimal(int precision, int scale) -> decimal
static LinqToDB.Sql.Types.DefaultChar.get -> string!
static LinqToDB.Sql.Types.DefaultDecimal.get -> decimal
static LinqToDB.Sql.Types.DefaultNChar.get -> string!
static LinqToDB.Sql.Types.DefaultNVarChar.get -> string!
static LinqToDB.Sql.Types.DefaultVarChar.get -> string!
static LinqToDB.Sql.Types.Float.get -> double
static LinqToDB.Sql.Types.Int.get -> int
static LinqToDB.Sql.Types.Money.get -> decimal
static LinqToDB.Sql.Types.NChar(int length) -> string!
static LinqToDB.Sql.Types.NVarChar(int length) -> string!
static LinqToDB.Sql.Types.Real.get -> float
static LinqToDB.Sql.Types.SmallDateTime.get -> System.DateTime
static LinqToDB.Sql.Types.SmallInt.get -> short
static LinqToDB.Sql.Types.SmallMoney.get -> decimal
static LinqToDB.Sql.Types.Time.get -> System.DateTime
static LinqToDB.Sql.Types.TinyInt.get -> byte
static LinqToDB.Sql.Types.VarChar(int length) -> string!
static LinqToDB.Sql.Upper(string? str) -> string?
static LinqToDB.Sql.ZeroPad(int? val, int length) -> string?
static LinqToDB.SqlExtensions.In<T>(this T value, params T[]! sequence) -> bool
static LinqToDB.SqlExtensions.In<T>(this T value, System.Collections.Generic.IEnumerable<T>! sequence) -> bool
static LinqToDB.SqlExtensions.In<T>(this T value, System.Linq.IQueryable<T>! sequence) -> bool
static LinqToDB.SqlExtensions.In<T>(this T value, T cmp1, T cmp2) -> bool
static LinqToDB.SqlExtensions.In<T>(this T value, T cmp1, T cmp2, T cmp3) -> bool
static LinqToDB.SqlExtensions.NotIn<T>(this T value, params T[]! sequence) -> bool
static LinqToDB.SqlExtensions.NotIn<T>(this T value, System.Collections.Generic.IEnumerable<T>! sequence) -> bool
static LinqToDB.SqlExtensions.NotIn<T>(this T value, System.Linq.IQueryable<T>! sequence) -> bool
static LinqToDB.SqlExtensions.NotIn<T>(this T value, T cmp1, T cmp2) -> bool
static LinqToDB.SqlExtensions.NotIn<T>(this T value, T cmp1, T cmp2, T cmp3) -> bool
static LinqToDB.SqlOptions.Default.get -> LinqToDB.SqlOptions!
static LinqToDB.SqlOptions.Default.set -> void
static LinqToDB.SqlOptions.operator !=(LinqToDB.SqlOptions? left, LinqToDB.SqlOptions? right) -> bool
static LinqToDB.SqlOptions.operator ==(LinqToDB.SqlOptions? left, LinqToDB.SqlOptions? right) -> bool
static LinqToDB.SqlQuery.SqlDataType.GetDataType(LinqToDB.DataType type) -> LinqToDB.SqlQuery.SqlDataType!
static LinqToDB.SqlQuery.SqlDataType.GetMaxDisplaySize(LinqToDB.DataType dbType) -> int?
static LinqToDB.SqlQuery.SqlDataType.GetMaxLength(LinqToDB.DataType dbType) -> int?
static LinqToDB.SqlQuery.SqlDataType.GetMaxPrecision(LinqToDB.DataType dbType) -> int?
static LinqToDB.SqlQuery.SqlDataType.GetMaxScale(LinqToDB.DataType dbType) -> int?
static LinqToDB.SqlQuery.SqlObjectName.operator !=(LinqToDB.SqlQuery.SqlObjectName left, LinqToDB.SqlQuery.SqlObjectName right) -> bool
static LinqToDB.SqlQuery.SqlObjectName.operator ==(LinqToDB.SqlQuery.SqlObjectName left, LinqToDB.SqlQuery.SqlObjectName right) -> bool
static LinqToDB.StringAggregateExtensions.OrderBy<T, TR, TKey>(this LinqToDB.Sql.IAggregateFunctionNotOrdered<T, TR>! aggregate, System.Linq.Expressions.Expression<System.Func<T, TKey>!>! expr) -> LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>!
static LinqToDB.StringAggregateExtensions.OrderBy<T, TR>(this LinqToDB.Sql.IAggregateFunctionNotOrdered<T, TR>! aggregate) -> LinqToDB.Sql.IAggregateFunction<T, TR>!
static LinqToDB.StringAggregateExtensions.OrderByDescending<T, TR, TKey>(this LinqToDB.Sql.IAggregateFunctionNotOrdered<T, TR>! aggregate, System.Linq.Expressions.Expression<System.Func<T, TKey>!>! expr) -> LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>!
static LinqToDB.StringAggregateExtensions.OrderByDescending<T, TR>(this LinqToDB.Sql.IAggregateFunctionNotOrdered<T, TR>! aggregate) -> LinqToDB.Sql.IAggregateFunction<T, TR>!
static LinqToDB.StringAggregateExtensions.ThenBy<T, TR, TKey>(this LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>! aggregate, System.Linq.Expressions.Expression<System.Func<T, TKey>!>! expr) -> LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>!
static LinqToDB.StringAggregateExtensions.ThenByDescending<T, TR, TKey>(this LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>! aggregate, System.Linq.Expressions.Expression<System.Func<T, TKey>!>! expr) -> LinqToDB.Sql.IAggregateFunctionOrdered<T, TR>!
static LinqToDB.StringAggregateExtensions.ToValue<T, TR>(this LinqToDB.Sql.IAggregateFunction<T, TR>! aggregate) -> TR
static LinqToDB.TableExtensions.GetTableName<T>(this LinqToDB.ITable<T>! table) -> string!
static LinqToDB.TableExtensions.IsTemporary<T>(this LinqToDB.ITable<T>! table) -> LinqToDB.ITable<T>!
static LinqToDB.TableExtensions.IsTemporary<T>(this LinqToDB.ITable<T>! table, bool isTemporary) -> LinqToDB.ITable<T>!
static LinqToDB.TableExtensions.TableOptions<T>(this LinqToDB.ITable<T>! table, LinqToDB.TableOptions options) -> LinqToDB.ITable<T>!
static LinqToDB.TempTable<T>.CreateAsync(LinqToDB.IDataContext! db, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T>!>!
static LinqToDB.TempTable<T>.CreateAsync(LinqToDB.IDataContext! db, string? tableName, System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T>!>!
static LinqToDB.TempTable<T>.CreateAsync(LinqToDB.IDataContext! db, string? tableName, System.Linq.IQueryable<T>! items, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T>!>!
static LinqToDB.TempTable<T>.CreateAsync(LinqToDB.IDataContext! db, System.Collections.Generic.IEnumerable<T>! items, LinqToDB.Data.BulkCopyOptions? options = null, string? tableName = null, string? databaseName = null, string? schemaName = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T>!>!
static LinqToDB.TempTable<T>.CreateAsync(LinqToDB.IDataContext! db, System.Linq.IQueryable<T>! items, string? tableName = null, string? databaseName = null, string? schemaName = null, System.Func<LinqToDB.ITable<T>!, System.Threading.Tasks.Task!>? action = null, string? serverName = null, LinqToDB.TableOptions tableOptions = LinqToDB.TableOptions.NotSet, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.TempTable<T>!>!
static LinqToDB.Tools.DataExtensions.RetrieveIdentity<T>(this System.Collections.Generic.IEnumerable<T>! source, LinqToDB.Data.DataConnection! context, bool useSequenceName = true, bool useIdentity = false) -> System.Collections.Generic.IEnumerable<T>!
static readonly LinqToDB.Common.Option<T>.None -> LinqToDB.Common.Option<T>
static readonly LinqToDB.DbDataType.Undefined -> LinqToDB.DbDataType
static readonly LinqToDB.Internal.DataProvider.NoopQueryParametersNormalizer.Instance -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
static readonly LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.UnmanagedAssemblyNames -> System.Collections.Generic.IEnumerable<string!>!
static readonly LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.BuildVectorLiteralMethod -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Expressions.ExpressionConstants.DataContextParam -> System.Linq.Expressions.ParameterExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.Constant0 -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.Constant1 -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.Constant26 -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.Constant29 -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.EmptyString -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.EmptyTypes -> System.Linq.Expressions.Expression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.False -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.HashMultiplier -> System.Linq.Expressions.Expression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.NullIDataContext -> System.Linq.Expressions.Expression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.True -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Expressions.ExpressionInstances.UntypedNull -> System.Linq.Expressions.ConstantExpression!
static readonly LinqToDB.Internal.Reflection.MemberInfoEqualityComparer.Default -> LinqToDB.Internal.Reflection.MemberInfoEqualityComparer!
static readonly LinqToDB.Internal.Reflection.Methods.ADONet.ConnectionString -> System.Reflection.PropertyInfo!
static readonly LinqToDB.Internal.Reflection.Methods.ADONet.IsDBNull -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.ADONet.IsDBNullAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Contains -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.DefaultIfEmpty -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.DefaultIfEmptyValue -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Distinct -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.ElementAt -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.ElementAtOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.First -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.FirstOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.FirstOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.GroupJoin -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Join -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.OfType -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Select -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.SelectManyProjection -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.SelectManySimple -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Single -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.SingleOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.SingleOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Skip -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Take -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.ToArray -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.ToList -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Enumerable.Where -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.AsQueryable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.AsSubQuery -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ColumnReader.GetRawValueSequential -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ColumnReader.GetValue -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ColumnReader.GetValueSequential -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ColumnReader.RawValuePlaceholder -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.DataParameter.DbDataType -> System.Reflection.PropertyInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.DataParameter.Value -> System.Reflection.PropertyInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Delete.DeleteQueryable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Delete.DeleteQueryableAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Delete.DeleteQueryablePredicate -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Delete.DeleteQueryablePredicateAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.DisableGuard -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ElementAtLambda -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.GetTable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.GroupBy.Cube -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.GroupBy.Grouping -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.GroupBy.GroupingSets -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.GroupBy.Rollup -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.IgnoreFilters -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.InlineParameters -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromDataContext.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromDataContext.InsertAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromDataContext.Into -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithDecimalIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithDecimalIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithInt32Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithInt32IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithInt64Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.InsertWithInt64IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromQuery.Into -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithDecimalIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithDecimalIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithInt32Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithInt32IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithInt64Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.InsertWithInt64IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.Value -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.ValueExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromSelectInsertable.ValueSourceExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.AsValueInsertable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithDecimalIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithDecimalIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithInt32Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithInt32IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithInt64Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.InsertWithInt64IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.Value -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromTable.ValueExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithDecimalIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithDecimalIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithIdentity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithIdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithInt32Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithInt32IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithInt64Identity -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.InsertWithInt64IdentityAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.Value -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Insert.FromValueInsertable.ValueExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.JoinTypePredicateSelector -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.LoadWith -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.LoadWithAsTable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.LoadWithManyFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.LoadWithSingleFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.DeleteWhenMatchedAndMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.DeleteWhenNotMatchedBySourceAndMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.ExecuteMergeMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.InsertWhenNotMatchedAndMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeIntoMethodInfo1 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeIntoMethodInfo2 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeMethodInfo1 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeMethodInfo2 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeWithOutput -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeWithOutputInto -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeWithOutputIntoSource -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.MergeWithOutputSource -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.OnMethodInfo1 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.OnMethodInfo2 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.OnTargetKeyMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UpdateWhenMatchedAndMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UpdateWhenMatchedAndThenDeleteMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UpdateWhenNotMatchedBySourceAndMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UsingMethodInfo1 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UsingMethodInfo2 -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Merge.UsingTargetMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.Begin -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.Else -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.Insert -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.InsertAll -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.InsertFirst -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.Into -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.MultiInsert.When -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.RemoveOrderBy -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Select -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SkipLambda -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlConstant -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlExt.Alias -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlExt.Property -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlExt.ToNotNull -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlExt.ToNotNullable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.SqlParameter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.DatabaseName -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.SchemaName -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.ServerName -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.TableID -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.TableName -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.TableOptions -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.With -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Table.WithTableExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.TagQuery -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromMany -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromManyManyFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromManySingleFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromSingle -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromSingleManyFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.ThenLoadFromSingleSingleFilter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Tools.CreateEmptyQuery -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.AsUpdatable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetQueryableExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetQueryablePrev -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetQueryableSetCustom -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetQueryableValue -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetUpdatableExpression -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetUpdatablePrev -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetUpdatableSetCustom -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.SetUpdatableValue -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdatePredicateSetter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdatePredicateSetterAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateSetter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateSetterAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateTarget -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateTargetAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateTargetFuncSetter -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateTargetFuncSetterAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateUpdatable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.LinqToDB.Update.UpdateUpdatableAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.AsEnumerable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.AsQueryable -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Contains -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.DefaultIfEmpty -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.DefaultIfEmptyValue -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Distinct -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ElementAt -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ElementAtAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ElementAtOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ElementAtOrDefaultAsync -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.First -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.FirstOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.FirstOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.GroupJoin -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Join -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.OfType -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Select -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.SelectManyProjection -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.SelectManySimple -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Single -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.SingleOrDefault -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.SingleOrDefaultCondition -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Skip -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Take -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ToArray -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.ToList -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.Queryable.Where -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.System.Guid_NewGuid -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.System.Guid_ToByteArray -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.Reflection.Methods.System.Guid_ToString -> System.Reflection.MethodInfo!
static readonly LinqToDB.Internal.SqlProvider.BasicSqlBuilder.EndLine -> char[]!
static readonly LinqToDB.Internal.SqlQuery.ISqlExpressionEqualityComparer.Instance -> System.Collections.Generic.IEqualityComparer<LinqToDB.Internal.SqlQuery.ISqlExpression!>!
static readonly LinqToDB.Internal.SqlQuery.QueryElement.ReferenceComparer -> System.Collections.Generic.IEqualityComparer<LinqToDB.Internal.SqlQuery.IQueryElement!>!
static readonly LinqToDB.Internal.SqlQuery.SimilarityMerger.Instance -> LinqToDB.Internal.SqlQuery.SimilarityMerger!
static readonly LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder.Instance -> LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder!
static readonly LinqToDB.Internal.SqlQuery.SqlObjectNameComparer.Instance -> System.Collections.Generic.IComparer<LinqToDB.SqlQuery.SqlObjectName>!
static readonly LinqToDB.Internal.SqlQuery.SqlParameterValues.Empty -> LinqToDB.Internal.SqlQuery.IReadOnlyParameterValues!
static readonly LinqToDB.Internal.SqlQuery.SqlPredicate.False -> LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate!
static readonly LinqToDB.Internal.SqlQuery.SqlPredicate.True -> LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate!
static readonly LinqToDB.SqlQuery.SqlDataType.Boolean -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Byte -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.ByteArray -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Char -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.CharArray -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DateTime -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DateTimeOffset -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbBinary -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbBinaryJson -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbBitArray -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbBoolean -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbByte -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbChar -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDate -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDateTime -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDateTime2 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDateTimeOffset -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDecFloat -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDecimal -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDictionary -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbDouble -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbGuid -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbImage -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbInt128 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbInt16 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbInt32 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbInt64 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbJson -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbMoney -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbNChar -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbNText -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbNVarChar -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbSByte -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbSingle -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbSmallDateTime -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbSmallMoney -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbText -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbTime -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbTimestamp -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbTimeTZ -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbUdt -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbUInt16 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbUInt32 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbUInt64 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbVarBinary -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbVarChar -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbVariant -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.DbXml -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Decimal -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Double -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Guid -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Int16 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Int32 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.LinqBinary -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SByte -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Single -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlBinary -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlBoolean -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlByte -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlBytes -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlChars -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlDateTime -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlDecimal -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlDouble -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlGuid -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlInt16 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlInt32 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlInt64 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlMoney -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlSingle -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlString -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.SqlXml -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.String -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.TimeSpan -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.UInt16 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.UInt32 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.UInt64 -> LinqToDB.SqlQuery.SqlDataType!
static readonly LinqToDB.SqlQuery.SqlDataType.Undefined -> LinqToDB.SqlQuery.SqlDataType!
virtual LinqToDB.Data.DataConnection.BeginTransaction() -> LinqToDB.Data.DataConnectionTransaction!
virtual LinqToDB.Data.DataConnection.BeginTransaction(System.Data.IsolationLevel isolationLevel) -> LinqToDB.Data.DataConnectionTransaction!
virtual LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Data.IsolationLevel isolationLevel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.DataConnectionTransaction!>!
virtual LinqToDB.Data.DataConnection.BeginTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.DataConnectionTransaction!>!
virtual LinqToDB.Data.DataConnection.Close() -> void
virtual LinqToDB.Data.DataConnection.CloseAsync() -> System.Threading.Tasks.Task!
virtual LinqToDB.Data.DataConnection.CommitTransaction() -> void
virtual LinqToDB.Data.DataConnection.CommitTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual LinqToDB.Data.DataConnection.DisposeTransaction() -> void
virtual LinqToDB.Data.DataConnection.DisposeTransactionAsync() -> System.Threading.Tasks.Task!
virtual LinqToDB.Data.DataConnection.ExecuteNonQuery(System.Data.Common.DbCommand! command) -> int
virtual LinqToDB.Data.DataConnection.ExecuteNonQueryAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<int>!
virtual LinqToDB.Data.DataConnection.ExecuteReader(System.Data.CommandBehavior commandBehavior) -> LinqToDB.Data.DataReaderWrapper!
virtual LinqToDB.Data.DataConnection.ExecuteReaderAsync(System.Data.CommandBehavior commandBehavior, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.DataReaderWrapper!>!
virtual LinqToDB.Data.DataConnection.ExecuteScalar(System.Data.Common.DbCommand! command) -> object?
virtual LinqToDB.Data.DataConnection.ExecuteScalarAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<object?>!
virtual LinqToDB.Data.DataConnection.ProcessQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Data.DataConnection.RollbackTransaction() -> void
virtual LinqToDB.Data.DataConnection.RollbackTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExceptionsEncountered.get -> System.Collections.Generic.List<System.Exception!>!
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.Execute(System.Action! operation) -> void
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.Execute<TResult>(System.Func<TResult>! operation) -> TResult
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.ExecuteAsync<TResult>(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<TResult>!>! operation, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.GetNextDelay(System.Exception! lastException) -> System.TimeSpan?
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.MaxRetryCount.get -> int
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.MaxRetryDelay.get -> System.TimeSpan
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.OnFirstExecution() -> void
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.OnRetry() -> void
virtual LinqToDB.Data.RetryPolicy.RetryPolicyBase.Random.get -> System.Random!
virtual LinqToDB.DataContext.BeginTransaction() -> LinqToDB.DataContextTransaction!
virtual LinqToDB.DataContext.BeginTransaction(System.Data.IsolationLevel level) -> LinqToDB.DataContextTransaction!
virtual LinqToDB.DataContext.BeginTransactionAsync(System.Data.IsolationLevel level, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.DataContextTransaction!>!
virtual LinqToDB.DataContext.BeginTransactionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.DataContextTransaction!>!
virtual LinqToDB.DataContext.CreateDataConnection(LinqToDB.DataOptions! options) -> LinqToDB.Data.DataConnection!
virtual LinqToDB.DataContext.Dispose(bool disposing) -> void
virtual LinqToDB.DataContext.DisposeAsync(bool disposing) -> System.Threading.Tasks.ValueTask
virtual LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.<Clone>$() -> LinqToDB.DataProvider.SqlServer.SqlFn.JsonData!
virtual LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.EqualityContract.get -> System.Type!
virtual LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.Equals(LinqToDB.DataProvider.SqlServer.SqlFn.JsonData? other) -> bool
virtual LinqToDB.DataProvider.SqlServer.SqlFn.JsonData.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.InsertColumnFilter<T>.Invoke(T entity, LinqToDB.Mapping.ColumnDescriptor! column) -> bool
virtual LinqToDB.InsertOrUpdateColumnFilter<T>.Invoke(T entity, LinqToDB.Mapping.ColumnDescriptor! column, bool isInsert) -> bool
virtual LinqToDB.Interceptors.CommandInterceptor.AfterExecuteReader(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, System.Data.Common.DbDataReader! dataReader) -> void
virtual LinqToDB.Interceptors.CommandInterceptor.BeforeReaderDispose(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand? command, System.Data.Common.DbDataReader! dataReader) -> void
virtual LinqToDB.Interceptors.CommandInterceptor.BeforeReaderDisposeAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand? command, System.Data.Common.DbDataReader! dataReader) -> System.Threading.Tasks.Task!
virtual LinqToDB.Interceptors.CommandInterceptor.CommandInitialized(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command) -> System.Data.Common.DbCommand!
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteNonQuery(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<int> result) -> LinqToDB.Common.Option<int>
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteNonQueryAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<int> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<int>>!
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteReader(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, LinqToDB.Common.Option<System.Data.Common.DbDataReader!> result) -> LinqToDB.Common.Option<System.Data.Common.DbDataReader!>
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteReaderAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, System.Data.CommandBehavior commandBehavior, LinqToDB.Common.Option<System.Data.Common.DbDataReader!> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<System.Data.Common.DbDataReader!>>!
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteScalar(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<object?> result) -> LinqToDB.Common.Option<object?>
virtual LinqToDB.Interceptors.CommandInterceptor.ExecuteScalarAsync(LinqToDB.Interceptors.CommandEventData eventData, System.Data.Common.DbCommand! command, LinqToDB.Common.Option<object?> result, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Common.Option<object?>>!
virtual LinqToDB.Interceptors.ConnectionInterceptor.ConnectionOpened(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
virtual LinqToDB.Interceptors.ConnectionInterceptor.ConnectionOpenedAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual LinqToDB.Interceptors.ConnectionInterceptor.ConnectionOpening(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection) -> void
virtual LinqToDB.Interceptors.ConnectionInterceptor.ConnectionOpeningAsync(LinqToDB.Interceptors.ConnectionEventData eventData, System.Data.Common.DbConnection! connection, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
virtual LinqToDB.Interceptors.DataContextInterceptor.OnClosed(LinqToDB.Interceptors.DataContextEventData eventData) -> void
virtual LinqToDB.Interceptors.DataContextInterceptor.OnClosedAsync(LinqToDB.Interceptors.DataContextEventData eventData) -> System.Threading.Tasks.Task!
virtual LinqToDB.Interceptors.DataContextInterceptor.OnClosing(LinqToDB.Interceptors.DataContextEventData eventData) -> void
virtual LinqToDB.Interceptors.DataContextInterceptor.OnClosingAsync(LinqToDB.Interceptors.DataContextEventData eventData) -> System.Threading.Tasks.Task!
virtual LinqToDB.Interceptors.EntityServiceInterceptor.EntityCreated(LinqToDB.Interceptors.EntityCreatedEventData eventData, object! entity) -> object!
virtual LinqToDB.Interceptors.ExceptionInterceptor.ProcessException(LinqToDB.Interceptors.ExceptionEventData eventData, System.Exception! exception) -> void
virtual LinqToDB.Interceptors.UnwrapDataObjectInterceptor.UnwrapCommand(LinqToDB.IDataContext! dataContext, System.Data.Common.DbCommand! command) -> System.Data.Common.DbCommand!
virtual LinqToDB.Interceptors.UnwrapDataObjectInterceptor.UnwrapConnection(LinqToDB.IDataContext! dataContext, System.Data.Common.DbConnection! connection) -> System.Data.Common.DbConnection!
virtual LinqToDB.Interceptors.UnwrapDataObjectInterceptor.UnwrapDataReader(LinqToDB.IDataContext! dataContext, System.Data.Common.DbDataReader! dataReader) -> System.Data.Common.DbDataReader!
virtual LinqToDB.Interceptors.UnwrapDataObjectInterceptor.UnwrapTransaction(LinqToDB.IDataContext! dataContext, System.Data.Common.DbTransaction! transaction) -> System.Data.Common.DbTransaction!
virtual LinqToDB.Internal.Common.ValueComparer.EqualsExpression.get -> System.Linq.Expressions.LambdaExpression!
virtual LinqToDB.Internal.Common.ValueComparer.ExtractEqualsBody(System.Linq.Expressions.Expression! leftExpression, System.Linq.Expressions.Expression! rightExpression) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Common.ValueComparer.HashCodeExpression.get -> System.Linq.Expressions.LambdaExpression!
virtual LinqToDB.Internal.Common.ValueComparer<T>.Equals(T? x, T? y) -> bool
virtual LinqToDB.Internal.Common.ValueComparer<T>.EqualsExpression.get -> System.Linq.Expressions.Expression<System.Func<T?, T?, bool>!>!
virtual LinqToDB.Internal.Common.ValueComparer<T>.GetHashCode(T? obj) -> int
virtual LinqToDB.Internal.Common.ValueComparer<T>.HashCodeExpression.get -> System.Linq.Expressions.Expression<System.Func<T?, int>!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.BulkCopy<T>(LinqToDB.Data.BulkCopyType bulkCopyType, LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.BulkCopyAsync<T>(LinqToDB.Data.BulkCopyType bulkCopyType, LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.BulkCopyAsync<T>(LinqToDB.Data.BulkCopyType bulkCopyType, LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.CastAllRowsParametersOnUnionAll.get -> bool
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.CastFirstRowLiteralOnUnionAll.get -> bool
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.CastFirstRowParametersOnUnionAll.get -> bool
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.CastLiteral(LinqToDB.Mapping.ColumnDescriptor! column) -> bool
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MaxMultipleRows.get -> int?
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MaxParameters.get -> int
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MaxSqlLength.get -> int
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.MultipleRowsCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderSpecificCopy<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.ProviderSpecificCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! options, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.RowByRowCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! dataOptions, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.BasicBulkCopy.RowByRowCopyAsync<T>(LinqToDB.ITable<T>! table, LinqToDB.DataOptions! dataOptions, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.BulkCopy<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IAsyncEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.BulkCopyAsync<T>(LinqToDB.DataOptions! options, LinqToDB.ITable<T>! table, System.Collections.Generic.IEnumerable<T>! source, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.ClearCommandParameters(System.Data.Common.DbCommand! command) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.ConvertParameterType(System.Type! type, LinqToDB.DbDataType dataType) -> System.Type!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.CreateIdentifierService() -> LinqToDB.Internal.DataProvider.IIdentifierService!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.DisposeCommand(System.Data.Common.DbCommand! command) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.DisposeCommandAsync(System.Data.Common.DbCommand! command) -> System.Threading.Tasks.ValueTask
virtual LinqToDB.Internal.DataProvider.DataProviderBase.ExecuteScope(LinqToDB.Data.DataConnection! dataConnection) -> LinqToDB.Internal.DataProvider.IExecutionScope?
virtual LinqToDB.Internal.DataProvider.DataProviderBase.GetCommandBehavior(System.Data.CommandBehavior commandBehavior) -> System.Data.CommandBehavior
virtual LinqToDB.Internal.DataProvider.DataProviderBase.GetConnectionInfo(LinqToDB.Data.DataConnection! dataConnection, string! parameterName) -> object?
virtual LinqToDB.Internal.DataProvider.DataProviderBase.GetQueryParameterNormalizer() -> LinqToDB.Internal.DataProvider.IQueryParametersNormalizer!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.GetReaderExpression(System.Data.Common.DbDataReader! reader, int idx, System.Linq.Expressions.Expression! readerExpression, System.Type? toType) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.InitCommand(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbCommand! command, System.Data.CommandType commandType, string! commandText, LinqToDB.Data.DataParameter![]? parameters, bool withParameters) -> System.Data.Common.DbCommand!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.InitContext(LinqToDB.IDataContext! dataContext) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.InitServiceProvider(LinqToDB.Internal.DataProvider.SimpleServiceProvider! serviceProvider) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.IsDBNullAllowed(LinqToDB.DataOptions! options, System.Data.Common.DbDataReader! reader, int idx) -> bool?
virtual LinqToDB.Internal.DataProvider.DataProviderBase.MappingSchema.get -> LinqToDB.Mapping.MappingSchema!
virtual LinqToDB.Internal.DataProvider.DataProviderBase.NormalizeTypeName(string? typeName) -> string?
virtual LinqToDB.Internal.DataProvider.DataProviderBase.SetParameter(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, string! name, LinqToDB.DbDataType dataType, object? value) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.SetParameterType(LinqToDB.Data.DataConnection! dataConnection, System.Data.Common.DbParameter! parameter, LinqToDB.DbDataType dataType) -> void
virtual LinqToDB.Internal.DataProvider.DataProviderBase.TransactionsSupported.get -> bool
virtual LinqToDB.Internal.DataProvider.DataProviderOptions<T>.EqualityContract.get -> System.Type!
virtual LinqToDB.Internal.DataProvider.DataProviderOptions<T>.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventHandler.Invoke(object! sender, LinqToDB.Internal.DataProvider.DB2.DB2ProviderAdapter.DB2RowsCopiedEventArgs! e) -> void
virtual LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.TryGetProviderCommand(LinqToDB.IDataContext! dataContext, System.Data.Common.DbCommand! command) -> System.Data.Common.DbCommand?
virtual LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.TryGetProviderConnection(LinqToDB.IDataContext! dataContext, System.Data.Common.DbConnection! connection) -> System.Data.Common.DbConnection?
virtual LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.TryGetProviderParameter(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> System.Data.Common.DbParameter?
virtual LinqToDB.Internal.DataProvider.DynamicDataProviderBase<TProviderMappings>.TryGetProviderTransaction(LinqToDB.IDataContext! dataContext, System.Data.Common.DbTransaction! transaction) -> System.Data.Common.DbTransaction?
virtual LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.NullCharSize.get -> int
virtual LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlBuilder.UnknownCharSize.get -> int
virtual LinqToDB.Internal.DataProvider.Firebird.FirebirdSqlExpressionConvertVisitor.GetCaseSensitiveParameter(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> bool?
virtual LinqToDB.Internal.DataProvider.IdentifierServiceBase.CorrectAlias(string! alias) -> string!
virtual LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventHandler.Invoke(object! sender, LinqToDB.Internal.DataProvider.Informix.InformixProviderAdapter.IfxRowsCopiedEventArgs! e) -> void
virtual LinqToDB.Internal.DataProvider.MultipleRowsHelper.BuildColumns(object! item, System.Func<LinqToDB.Mapping.ColumnDescriptor!, bool>? skipConvert = null, bool castParameters = false, bool castAllRows = false, bool castFirstRowLiteralOnUnionAll = false, System.Func<LinqToDB.Mapping.ColumnDescriptor!, bool>? castLiteral = null) -> void
virtual LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventHandler.Invoke(object! sender, LinqToDB.Internal.DataProvider.SapHana.SapHanaProviderAdapter.HanaRowsCopiedEventArgs! e) -> void
virtual LinqToDB.Internal.DataProvider.SqlServer.SqlServer2005SqlExpressionConvertVisitor.ProcessConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast, out LinqToDB.Internal.SqlQuery.ISqlExpression! result) -> bool
virtual LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventHandler.Invoke(object! sender, LinqToDB.Internal.DataProvider.SqlServer.SqlServerProviderAdapter.SqlRowsCopiedEventArgs! e) -> void
virtual LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventHandler.Invoke(object! sender, LinqToDB.Internal.DataProvider.Sybase.SybaseProviderAdapter.AseRowsCopiedEventArgs! e) -> void
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateOnlyDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateOnlyDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetDateAdd(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Internal.SqlQuery.ISqlExpression! increment, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetDatePart(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlag, LinqToDB.Internal.SqlQuery.ISqlExpression! dateTimeExpression, LinqToDB.Sql.DateParts datepart) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeOffsetTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeTruncationToDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateDateTimeTruncationToTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! dateExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateMakeDateOnly(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateMakeDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.DbDataType resulType, LinqToDB.Internal.SqlQuery.ISqlExpression! year, LinqToDB.Internal.SqlQuery.ISqlExpression! month, LinqToDB.Internal.SqlQuery.ISqlExpression! day, LinqToDB.Internal.SqlQuery.ISqlExpression? hour, LinqToDB.Internal.SqlQuery.ISqlExpression? minute, LinqToDB.Internal.SqlQuery.ISqlExpression? second, LinqToDB.Internal.SqlQuery.ISqlExpression? millisecond) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestamp(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestampUtc(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateSqlCurrentTimestampUtc(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.DateFunctionsTranslatorBase.TranslateSqlGetDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.GuidMemberTranslatorBase.TranslateGuildToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! guidExpr, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslateAbsMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslateMaxMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslateMinMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslatePow(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! xValue, LinqToDB.Internal.SqlQuery.ISqlExpression! yValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslateRoundAwayFromZero(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MathMemberTranslatorBase.TranslateRoundToEven(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression? precision) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.MemberTranslatorBase.TranslateOverrideHandler(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.ConvertToString(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.CreateGuidMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.CreateMathMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.CreateSqlTypesTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.CreateStringMemberTranslator() -> LinqToDB.Linq.Translation.IMemberTranslator!
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateConvertToBoolean(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Internal.SqlQuery.ISqlExpression! sqlExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateMemberExpression(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateMethodCall(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.ProviderMemberTranslatorDefault.TranslateNewGuidMethod(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertBigInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertBit(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertCharLength(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDate(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDateTime2(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDateTimeOffset(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDecimalPrecision(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDecimalPrecisionScale(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDefaultChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDefaultDecimal(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDefaultNChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDefaultNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertDefaultVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertFloat(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertNChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertNVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertReal(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertSmallDateTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertSmallInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertSmallMoney(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertTime(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertTinyInt(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.SqlTypesTranslationDefault.ConvertVarChar(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.TranslateLength(LinqToDB.Linq.Translation.ITranslationContext! translationContext, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.TranslateLPad(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression! paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.TranslatePadLeft(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! padding, LinqToDB.Internal.SqlQuery.ISqlExpression? paddingChar) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.TranslateReplace(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags, LinqToDB.Internal.SqlQuery.ISqlExpression! value, LinqToDB.Internal.SqlQuery.ISqlExpression! oldValue, LinqToDB.Internal.SqlQuery.ISqlExpression! newValue) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.StringMemberTranslatorBase.TranslateStringFormat(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, string! format, System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.ISqlExpression!>! arguments, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.<Clone>$() -> LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement!
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.EqualityContract.get -> System.Type!
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.Equals(LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement? other) -> bool
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.MemberReplacement.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.Expression! member, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMemberAccessFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MemberExpression! memberExpression, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.Translation.TranslationRegistration.TranslateMethodFunc.Invoke(LinqToDB.Linq.Translation.ITranslationContext! translationContext, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Linq.Translation.TranslationFlags translationFlags) -> System.Linq.Expressions.Expression?
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.Comparer.get -> System.StringComparer!
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.CounterSeparator.get -> string!
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.DefaultName.get -> string!
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.IsReserved(string! name) -> bool
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.IsValidCharacter(char chr) -> bool
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.IsValidFirstCharacter(char chr) -> bool
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.MakeValidName(string! name) -> string!
virtual LinqToDB.Internal.DataProvider.UniqueParametersNormalizer.MaxLength.get -> int
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.Cleanup() -> void
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitChangeTypeExpression(LinqToDB.Internal.Expressions.ChangeTypeExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitConstantPlaceholder(LinqToDB.Internal.Expressions.ConstantPlaceholderExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitDefaultValueExpression(LinqToDB.Internal.Expressions.DefaultValueExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitMarkerExpression(LinqToDB.Internal.Expressions.MarkerExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitSqlDefaultIfEmptyExpression(LinqToDB.Internal.Expressions.SqlDefaultIfEmptyExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitSqlGenericConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitSqlPlaceholderExpression(LinqToDB.Internal.Expressions.SqlPlaceholderExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitSqlQueryRootExpression(LinqToDB.Internal.Expressions.SqlQueryRootExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Expressions.ExpressionVisitorBase.VisitTagExpression(LinqToDB.Internal.Expressions.TagExpression! node) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Internal.Interceptors.EntityBindingInterceptor.ConvertConstructorExpression(LinqToDB.Internal.Expressions.SqlGenericConstructorExpression! expression) -> LinqToDB.Internal.Expressions.SqlGenericConstructorExpression!
virtual LinqToDB.Internal.Options.OptionsContainer<T>.Find<TSet>() -> TSet?
virtual LinqToDB.Internal.Options.OptionsContainer<T>.Get<TSet>() -> TSet!
virtual LinqToDB.Internal.Options.OptionsContainer<T>.OptionSets.get -> System.Collections.Generic.IEnumerable<LinqToDB.Internal.Options.IOptionSet!>!
virtual LinqToDB.Internal.Options.OptionsContainer<T>.WithOptions(LinqToDB.Internal.Options.IOptionSet! options) -> T!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.BuildProcedureParameter(LinqToDB.SchemaProvider.ParameterSchema! p) -> LinqToDB.Data.DataParameter!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.BuildTableFunctionLoadTableSchemaCommand(LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText) -> string!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ForeignKeyColumnComparison(string! column) -> System.StringComparison
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDatabaseName(LinqToDB.Data.DataConnection! dbConnection) -> string!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDataSourceName(LinqToDB.Data.DataConnection! dbConnection) -> string!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDataType(string? typeName, LinqToDB.DataType? dataType, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> LinqToDB.Internal.SchemaProvider.DataTypeInfo?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDataTypes(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.DataTypeInfo!>!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetDbType(LinqToDB.SchemaProvider.GetSchemaOptions! options, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataType, int? length, int? precision, int? scale, string? udtCatalog, string? udtSchema, string? udtName) -> string?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProcedureParameters(LinqToDB.Data.DataConnection! dataConnection, System.Collections.Generic.IEnumerable<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>! procedures, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureParameterInfo!>?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProcedureResultColumns(System.Data.DataTable! resultTable, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ColumnSchema!>!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProcedures(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.Internal.SchemaProvider.ProcedureInfo!>?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProcedureSchema(LinqToDB.Data.DataConnection! dataConnection, string! commandText, System.Data.CommandType commandType, LinqToDB.Data.DataParameter![]! parameters, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Data.DataTable?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProcedureSchemaExecutesProcedure.get -> bool
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProviderSpecificProcedures(LinqToDB.Data.DataConnection! dataConnection) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.ProcedureSchema!>?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProviderSpecificTables(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetProviderSpecificType(string? dataType) -> string?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions? options = null) -> LinqToDB.SchemaProvider.DatabaseSchema!
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.GetSystemType(string? dataType, string? columnType, LinqToDB.Internal.SchemaProvider.DataTypeInfo? dataTypeInfo, int? length, int? precision, int? scale, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> System.Type?
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.InitProvider(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options) -> void
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.LoadProcedureTableSchema(LinqToDB.Data.DataConnection! dataConnection, LinqToDB.SchemaProvider.GetSchemaOptions! options, LinqToDB.SchemaProvider.ProcedureSchema! procedure, string! commandText, System.Collections.Generic.List<LinqToDB.SchemaProvider.TableSchema!>! tables) -> void
virtual LinqToDB.Internal.SchemaProvider.SchemaProviderBase.ProcessSchema(LinqToDB.SchemaProvider.DatabaseSchema! databaseSchema, LinqToDB.SchemaProvider.GetSchemaOptions! schemaOptions) -> LinqToDB.SchemaProvider.DatabaseSchema!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildAlterDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildAnchor(LinqToDB.Internal.SqlQuery.SqlAnchor! anchor) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! expr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildColumnExpression(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.ISqlExpression! expr, string? alias, ref bool addAlias) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildColumns(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCommand(LinqToDB.Internal.SqlQuery.SqlStatement! statement, int commandNumber) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableCommand(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableFieldType(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableIdentityAttribute1(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableIdentityAttribute2(LinqToDB.Internal.SqlQuery.SqlField! field) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableNullAttribute(LinqToDB.Internal.SqlQuery.SqlField! field, LinqToDB.SqlQuery.DefaultNullable defaultNullable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTablePrimaryKey(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable, string! pkName, System.Collections.Generic.IEnumerable<string!>! fieldNames) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildCteBody(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDataTypeFromDataType(LinqToDB.DbDataType type, bool forCreateTable, bool canBeNull) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDeleteClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDeleteFromClause(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDeleteQuery(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! deleteStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! dropTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildEmptyInsert(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildEndCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool buildTableName, bool checkParentheses, string? alias, ref bool addAlias, bool throwExceptionIfTableNotFound = true) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExpressionForOrderBy(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! expr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildExprExprPredicateOperator(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! expr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildFakeTableName() -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildFieldTableAlias(LinqToDB.Internal.SqlQuery.SqlField! field) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildFromClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildFromExtensions(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildGetIdentity(LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildGroupByBody(LinqToDB.Internal.SqlQuery.GroupingType groupingType, System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>! items) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildGroupByClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildHavingClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, string? insertText, bool appendTableName, bool addAlias) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertOrUpdateQuery(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertOrUpdateQueryAsMerge(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! insertOrUpdate, string? fromDummyTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause, bool addAlias) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInsertValuesOverrideClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! expr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildJoinType(LinqToDB.Internal.SqlQuery.SqlJoinedTable! join, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeInto(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOn(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! mergeStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationDelete(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationDeleteBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationInsert(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdate(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateBySource(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeOperationUpdateWithDelete(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! operation) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeSourceQuery(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlTableLikeSource! mergeSource) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMergeTerminator(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.SqlMergeStatement! merge) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildMultiInsertQuery(LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildObjectName(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, LinqToDB.Internal.SqlProvider.ConvertType objectType, bool escape, LinqToDB.TableOptions tableOptions, bool withoutSuffix = false) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildObjectNameSuffix(System.Text.StringBuilder! sb, LinqToDB.SqlQuery.SqlObjectName name, bool escape) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildOffsetLimit(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildOrderByClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildOutputColumnExpressions(System.Collections.Generic.IReadOnlyList<LinqToDB.Internal.SqlQuery.ISqlExpression!>! expressions) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildOutputSubclause(LinqToDB.Internal.SqlQuery.SqlOutputClause? output) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildOutputSubclause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SqlInsertClause! insertClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildParameter(LinqToDB.Internal.SqlQuery.SqlParameter! parameter) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildPhysicalTable(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, string? defaultDatabaseName = null) -> bool?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildPredicate(LinqToDB.Internal.SqlQuery.ISqlPredicate! predicate) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSearchCondition(int parentPrecedence, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition, bool wrapCondition) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSearchCondition(LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition, bool wrapCondition) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSelectClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSelectQuery(LinqToDB.Internal.SqlQuery.SqlSelectStatement! selectStatement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSetOperation(LinqToDB.Internal.SqlQuery.SetOperation operation, System.Text.StringBuilder! sb) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSkipFirst(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSql() -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSql(int commandNumber, LinqToDB.Internal.SqlQuery.SqlStatement! statement, System.Text.StringBuilder! sb, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, int indent, bool skipAlias, LinqToDB.Internal.SqlQuery.NullabilityContext? nullabilityContext) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlBuilder(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, int indent, bool skipAlias) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! caseExpression) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlCastExpression(LinqToDB.Internal.SqlQuery.SqlCastExpression! castExpression) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlComment(System.Text.StringBuilder! sb, LinqToDB.Internal.SqlQuery.SqlComment! comment) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! conditionExpression) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlRow(LinqToDB.Internal.SqlQuery.SqlRowExpression! expr, bool buildTableName, bool checkParentheses, bool throwExceptionIfTableNotFound) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlValue(LinqToDB.Internal.SqlQuery.SqlValue! value) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSqlValuesTable(LinqToDB.Internal.SqlQuery.SqlValuesTable! valuesTable, string! alias, out bool aliasBuilt) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildStartCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! createTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildSubQueryExtensions(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTableExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table, string! alias) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTableNameExtensions(LinqToDB.Internal.SqlQuery.SqlTable! table) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTag(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTakeHints(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTruncateTable(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTruncateTableStatement(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! truncateTable) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildTypedExpression(LinqToDB.DbDataType dataType, LinqToDB.Internal.SqlQuery.ISqlExpression! value) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUnknownQuery() -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateClause(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateSet(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateTable(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateTableName(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlUpdateClause! updateClause) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildUpdateWhereClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildValue(LinqToDB.DbDataType? dataType, object? value) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildWhereClause(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildWhereSearchCondition(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.BuildWithClause(LinqToDB.Internal.SqlQuery.SqlWithClause? with) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.CanSkipRootAliases(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Comma.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.CommandCount(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> int
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Convert(System.Text.StringBuilder! sb, string! value, LinqToDB.Internal.SqlProvider.ConvertType convertType) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.CteFirst.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.DeletedOutputTable.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.FakeTable.get -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.FakeTableSchema.get -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.FinalizeBuildQuery(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.FirstFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetIdentityExpression(LinqToDB.Internal.SqlQuery.SqlTable! table) -> LinqToDB.Internal.SqlQuery.ISqlExpression?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetMaxValueSql(LinqToDB.Mapping.EntityDescriptor! entity, LinqToDB.Mapping.ColumnDescriptor! column) -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetPhysicalTableName(LinqToDB.Internal.SqlQuery.ISqlTableSource! table, string? alias, bool ignoreTableExpression = false, string? defaultDatabaseName = null, bool withoutSuffix = false) -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetProviderTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetReserveSequenceValuesSql(int count, string! sequenceName) -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.GetUdtTypeName(LinqToDB.IDataContext! dataContext, System.Data.Common.DbParameter! parameter) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.InlineComma.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.InsertedOutputTable.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsCteColumnListSupported.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsEmptyValuesSourceSupported.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsNestedJoinParenthesisRequired.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsNestedJoinSupported.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsRecursiveCteKeywordRequired.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsReserved(string! word) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsSqlValuesTableValueTypeRequired(LinqToDB.Internal.SqlQuery.SqlValuesTable! source, System.Collections.Generic.IReadOnlyList<System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.ISqlExpression!>!>! rows, int row, int column) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.IsValuesSyntaxSupported.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.LimitFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.MergeSqlBuilderData(LinqToDB.Internal.SqlProvider.BasicSqlBuilder! sqlBuilder) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.Name.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OffsetFirst.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OffsetFormat(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OpenParens.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.OutputKeyword.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ParenthesizeJoin(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlJoinedTable!>! joins) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.PrintParameterName(System.Text.StringBuilder! sb, System.Data.Common.DbParameter! parameter) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.PrintParameters(LinqToDB.IDataContext! dataContext, System.Text.StringBuilder! sb, System.Collections.Generic.IEnumerable<System.Data.Common.DbParameter!>? parameters) -> System.Text.StringBuilder!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.PrintParameterType(LinqToDB.IDataContext! dataContext, System.Text.StringBuilder! sb, System.Data.Common.DbParameter! parameter) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.RequiresConstantColumnAliases.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.ShouldBuildWhere(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, out LinqToDB.Internal.SqlQuery.SqlSearchCondition! condition) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SkipFirst.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SkipFormat.get -> string?
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.StartStatementQueryExtensions(LinqToDB.Internal.SqlQuery.SelectQuery? selectQuery) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.SupportsColumnAliasesInSource.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TakePercent.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TakeTies.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.TryConvertParameterToSql(LinqToDB.Internal.SqlQuery.SqlParameterValue! paramValue) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.UpdateKeyword.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.UpdateSetKeyword.get -> string!
virtual LinqToDB.Internal.SqlProvider.BasicSqlBuilder.WrapJoinCondition.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.BasicCorrectUpdate(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! statement, LinqToDB.DataOptions! dataOptions, bool wrapForOutput) -> LinqToDB.Internal.SqlQuery.SqlUpdateStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.ConvertSkipTake(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions, LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery, LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, out LinqToDB.Internal.SqlQuery.ISqlExpression? takeExpr, out LinqToDB.Internal.SqlQuery.ISqlExpression? skipExpr) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectOutputTables(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CorrectUnionOrderBy(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CreateConvertVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CreateOptimizerVisitor(bool allowModify) -> LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.CreateSqlExpressionFactory(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Linq.Translation.ISqlExpressionFactory!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.Finalize(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FinalizeInsert(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FinalizeInsertOrUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FinalizeSelect(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FinalizeStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.Internal.SqlQuery.EvaluationContext! context, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FinalizeUpdate(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FixEmptySelect(LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> void
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.FixSetOperationValues(LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlStatement! statement) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.IsParameterDependedElement(LinqToDB.Internal.SqlQuery.NullabilityContext! nullability, LinqToDB.Internal.SqlQuery.IQueryElement! element, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.IsParameterDependedQuery(LinqToDB.Internal.SqlQuery.SelectQuery! query) -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.RequiresCastingParametersForSetOperations.get -> bool
virtual LinqToDB.Internal.SqlProvider.BasicSqlOptimizer.TransformStatement(LinqToDB.Internal.SqlQuery.SqlStatement! statement, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.Internal.SqlQuery.SqlStatement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.Convert(LinqToDB.Internal.SqlProvider.OptimizationContext! optimizationContext, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, LinqToDB.Internal.SqlQuery.IQueryElement! element, bool visitQueries) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertBetweenPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Between! between) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertCaseItem(LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem! newElement) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertCastToPredicate(LinqToDB.Internal.SqlQuery.SqlCastExpression! castExpression) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertCoalesce(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertConversion(LinqToDB.Internal.SqlQuery.SqlCastExpression! cast) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertIsDistinctPredicateAsIntersect(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertRowInList(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.ISqlPredicate!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlCondition(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlExpression(LinqToDB.Internal.SqlQuery.SqlExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.ConvertSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! func) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.EscapeLikeCharacters(LinqToDB.Internal.SqlQuery.ISqlExpression! expression, ref LinqToDB.Internal.SqlQuery.ISqlExpression? escape) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.EscapeLikeCharacters(string! str, string! escape) -> string!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.EscapeLikePattern(string! str) -> string!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.GetMaxDisplaySize(LinqToDB.DbDataType type) -> int?
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.GetMaxLength(LinqToDB.DbDataType type) -> int?
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.GetMaxPrecision(LinqToDB.DbDataType type) -> int?
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.GetMaxScale(LinqToDB.DbDataType type) -> int?
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikeCharactersToEscape.get -> string![]!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikeEscapeCharacter.get -> string!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikeIsEscapeSupported.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikePatternParameterSupport.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikeValueParameterSupport.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.LikeWildcardCharacter.get -> string!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.SupportsBooleanInColumn.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.SupportsDistinctAsExistsIntersect.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.SupportsNullInColumn.get -> bool
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.WrapBooleanExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr, bool includeFields, bool forceConvert = false, bool withNull = true) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionConvertVisitor.WrapColumnExpression(LinqToDB.Internal.SqlQuery.ISqlExpression! expr) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.Optimize(LinqToDB.Internal.SqlQuery.EvaluationContext! evaluationContext, LinqToDB.Internal.SqlQuery.NullabilityContext! nullabilityContext, LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.IVisitorTransformationInfo? transformationInfo, LinqToDB.DataOptions! dataOptions, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.IQueryElement! element, bool visitQueries, bool reducePredicates) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlProvider.SqlExpressionOptimizerVisitor.OptimizeFunction(LinqToDB.Internal.SqlQuery.SqlFunction! function) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.SqlExpressionBase.Equals(LinqToDB.Internal.SqlQuery.ISqlExpression? other) -> bool
virtual LinqToDB.Internal.SqlQuery.SqlStatement.IsDependedOn(LinqToDB.Internal.SqlQuery.SqlTable! table) -> bool
virtual LinqToDB.Internal.SqlQuery.SqlTable.GetKeys(bool allIfEmpty) -> System.Collections.Generic.IList<LinqToDB.Internal.SqlQuery.ISqlExpression!>?
virtual LinqToDB.Internal.SqlQuery.SqlTable.ID.get -> string?
virtual LinqToDB.Internal.SqlQuery.SqlTable.ID.set -> void
virtual LinqToDB.Internal.SqlQuery.SqlTable.SqlTableType.get -> LinqToDB.Internal.SqlQuery.SqlTableType
virtual LinqToDB.Internal.SqlQuery.SqlTable.SqlTableType.set -> void
virtual LinqToDB.Internal.SqlQuery.SqlTable.TableName.get -> LinqToDB.SqlQuery.SqlObjectName
virtual LinqToDB.Internal.SqlQuery.SqlTable.TableName.set -> void
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.GetVisitMode(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.Visitors.VisitMode
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.NotifyReplaced(LinqToDB.Internal.SqlQuery.IQueryElement! newElement, LinqToDB.Internal.SqlQuery.IQueryElement! oldElement) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.ShouldReplace(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> bool
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.Visit(LinqToDB.Internal.SqlQuery.IQueryElement? element) -> LinqToDB.Internal.SqlQuery.IQueryElement?
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitBetweenPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Between! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitCaseItem(LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem! element) -> LinqToDB.Internal.SqlQuery.SqlCaseExpression.CaseItem!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitCteClause(LinqToDB.Internal.SqlQuery.CteClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitCteClauseReference(LinqToDB.Internal.SqlQuery.CteClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitExistsPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Exists! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitExprExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.ExprExpr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitExprPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Expr! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitFalsePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.FalsePredicate! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitInListPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InList! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitInSubQueryPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.InSubQuery! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitIsDistinctPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsDistinct! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitIsNullPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsNull! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitIsTruePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.IsTrue! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitLikePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Like! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitNotPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.Not! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSearchStringPredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.SearchString! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlAliasPlaceholder(LinqToDB.Internal.SqlQuery.SqlAliasPlaceholder! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlAnchor(LinqToDB.Internal.SqlQuery.SqlAnchor! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlBinaryExpression(LinqToDB.Internal.SqlQuery.SqlBinaryExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCaseExpression(LinqToDB.Internal.SqlQuery.SqlCaseExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCastExpression(LinqToDB.Internal.SqlQuery.SqlCastExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCoalesceExpression(LinqToDB.Internal.SqlQuery.SqlCoalesceExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlColumnExpression(LinqToDB.Internal.SqlQuery.SqlColumn! column, LinqToDB.Internal.SqlQuery.ISqlExpression! expression) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlColumnReference(LinqToDB.Internal.SqlQuery.SqlColumn! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlComment(LinqToDB.Internal.SqlQuery.SqlComment! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCompareToExpression(LinqToDB.Internal.SqlQuery.SqlCompareToExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlConditionalInsertClause(LinqToDB.Internal.SqlQuery.SqlConditionalInsertClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlConditionExpression(LinqToDB.Internal.SqlQuery.SqlConditionExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCreateTableStatement(LinqToDB.Internal.SqlQuery.SqlCreateTableStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlCteTable(LinqToDB.Internal.SqlQuery.SqlCteTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlDataType(LinqToDB.SqlQuery.SqlDataType! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlDeleteStatement(LinqToDB.Internal.SqlQuery.SqlDeleteStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlDropTableStatement(LinqToDB.Internal.SqlQuery.SqlDropTableStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlExpression(LinqToDB.Internal.SqlQuery.SqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlFieldReference(LinqToDB.Internal.SqlQuery.SqlField! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlFragment(LinqToDB.Internal.SqlQuery.SqlFragment! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlFromClause(LinqToDB.Internal.SqlQuery.SqlFromClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlFunction(LinqToDB.Internal.SqlQuery.SqlFunction! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlGroupByClause(LinqToDB.Internal.SqlQuery.SqlGroupByClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlGroupByItem(LinqToDB.Internal.SqlQuery.ISqlExpression! element) -> LinqToDB.Internal.SqlQuery.ISqlExpression!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlGroupingSet(LinqToDB.Internal.SqlQuery.SqlGroupingSet! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlHavingClause(LinqToDB.Internal.SqlQuery.SqlHavingClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlInlinedSqlExpression(LinqToDB.Internal.SqlQuery.SqlInlinedSqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlInlinedToSqlExpression(LinqToDB.Internal.SqlQuery.SqlInlinedToSqlExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlInsertClause(LinqToDB.Internal.SqlQuery.SqlInsertClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlInsertOrUpdateStatement(LinqToDB.Internal.SqlQuery.SqlInsertOrUpdateStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlInsertStatement(LinqToDB.Internal.SqlQuery.SqlInsertStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlJoinedTable(LinqToDB.Internal.SqlQuery.SqlJoinedTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlMergeOperationClause(LinqToDB.Internal.SqlQuery.SqlMergeOperationClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlMergeStatement(LinqToDB.Internal.SqlQuery.SqlMergeStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlMultiInsertStatement(LinqToDB.Internal.SqlQuery.SqlMultiInsertStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlNullabilityExpression(LinqToDB.Internal.SqlQuery.SqlNullabilityExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlObjectExpression(LinqToDB.Internal.SqlQuery.SqlObjectExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlOrderByClause(LinqToDB.Internal.SqlQuery.SqlOrderByClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlOrderByItem(LinqToDB.Internal.SqlQuery.SqlOrderByItem! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlOutputClause(LinqToDB.Internal.SqlQuery.SqlOutputClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlParameter(LinqToDB.Internal.SqlQuery.SqlParameter! sqlParameter) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlQuery(LinqToDB.Internal.SqlQuery.SelectQuery! selectQuery) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlQueryExtension(LinqToDB.Internal.SqlQuery.SqlQueryExtension! extension) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlRawSqlTable(LinqToDB.Internal.SqlQuery.SqlRawSqlTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlRow(LinqToDB.Internal.SqlQuery.SqlRowExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlSearchCondition(LinqToDB.Internal.SqlQuery.SqlSearchCondition! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlSelectClause(LinqToDB.Internal.SqlQuery.SqlSelectClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlSelectStatement(LinqToDB.Internal.SqlQuery.SqlSelectStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlSetExpression(LinqToDB.Internal.SqlQuery.SqlSetExpression! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlSetOperator(LinqToDB.Internal.SqlQuery.SqlSetOperator! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlTable(LinqToDB.Internal.SqlQuery.SqlTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlTableLikeSource(LinqToDB.Internal.SqlQuery.SqlTableLikeSource! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlTableSource(LinqToDB.Internal.SqlQuery.SqlTableSource! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlTruncateTableStatement(LinqToDB.Internal.SqlQuery.SqlTruncateTableStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlUpdateClause(LinqToDB.Internal.SqlQuery.SqlUpdateClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlUpdateStatement(LinqToDB.Internal.SqlQuery.SqlUpdateStatement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlValue(LinqToDB.Internal.SqlQuery.SqlValue! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlValuesTable(LinqToDB.Internal.SqlQuery.SqlValuesTable! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlWhereClause(LinqToDB.Internal.SqlQuery.SqlWhereClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitSqlWithClause(LinqToDB.Internal.SqlQuery.SqlWithClause! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.QueryElementVisitor.VisitTruePredicate(LinqToDB.Internal.SqlQuery.SqlPredicate.TruePredicate! predicate) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.Cleanup() -> void
virtual LinqToDB.Internal.SqlQuery.Visitors.SqlQueryVisitor.ProcessElement(LinqToDB.Internal.SqlQuery.IQueryElement! element) -> LinqToDB.Internal.SqlQuery.IQueryElement!
virtual LinqToDB.Mapping.ColumnDescriptor.GetProviderValue(object! obj) -> object?
virtual LinqToDB.Mapping.ColumnDescriptor.ShouldSkip(object! obj, LinqToDB.Mapping.EntityDescriptor! descriptor, LinqToDB.Mapping.SkipModification flags) -> bool
virtual LinqToDB.Mapping.MappingSchema.GenerateID() -> int
virtual LinqToDB.Mapping.MappingSchema.GetMapValues(System.Type! type) -> LinqToDB.Mapping.MapValue![]?
virtual LinqToDB.Mapping.MappingSchema.IsLockable.get -> bool
virtual LinqToDB.Mapping.MappingSchema.IsLocked.get -> bool
virtual LinqToDB.Mapping.MappingSchema.TryGetConvertExpression(System.Type! from, System.Type! to) -> System.Linq.Expressions.LambdaExpression?
virtual LinqToDB.Mapping.SqlQueryDependentAttribute.ExpressionsEqual<TContext>(TContext context, System.Linq.Expressions.Expression! expr1, System.Linq.Expressions.Expression! expr2, System.Func<TContext, System.Linq.Expressions.Expression!, System.Linq.Expressions.Expression!, bool>! comparer) -> bool
virtual LinqToDB.Mapping.SqlQueryDependentAttribute.ObjectsEqual(object? obj1, object? obj2) -> bool
virtual LinqToDB.Mapping.SqlQueryDependentAttribute.PrepareForCache(System.Linq.Expressions.Expression! expression, LinqToDB.Expressions.IExpressionEvaluator! evaluator) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Mapping.SqlQueryDependentAttribute.SplitExpression(System.Linq.Expressions.Expression! expression) -> System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression!>!
virtual LinqToDB.Mapping.ValueConverterAttribute.GetValueConverter(LinqToDB.Mapping.ColumnDescriptor! columnDescriptor) -> LinqToDB.Mapping.IValueConverter?
virtual LinqToDB.Metrics.ActivityBase.AddQueryInfo(LinqToDB.Data.DataConnection? context, System.Data.Common.DbConnection? connection, System.Data.Common.DbCommand? command) -> LinqToDB.Metrics.IActivity!
virtual LinqToDB.Metrics.ActivityBase.AddTag(LinqToDB.Metrics.ActivityTagID key, object? value) -> LinqToDB.Metrics.IActivity!
virtual LinqToDB.Metrics.ActivityBase.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual LinqToDB.Reflection.MemberAccessor.GetValue(object! o) -> object?
virtual LinqToDB.Reflection.MemberAccessor.SetValue(object! o, object? value) -> void
virtual LinqToDB.Reflection.TypeAccessor.CreateInstance() -> object!
virtual LinqToDB.Remote.LinqService.CreateDataContext(string? configuration) -> LinqToDB.Data.DataConnection!
virtual LinqToDB.Remote.LinqService.GetInfo(string? configuration) -> LinqToDB.Remote.LinqServiceInfo!
virtual LinqToDB.Remote.LinqService.GetInfoAsync(string? configuration, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<LinqToDB.Remote.LinqServiceInfo!>!
virtual LinqToDB.Remote.LinqService.HandleException(System.Exception! exception) -> void
virtual LinqToDB.Remote.LinqService.ValidateQuery(LinqToDB.Remote.LinqServiceQuery! query) -> void
virtual LinqToDB.Remote.RemoteDataContextBase.Dispose() -> void
virtual LinqToDB.Remote.RemoteDataContextBase.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual LinqToDB.Remote.RemoteDataContextBase.SqlOptimizerType.get -> System.Type!
virtual LinqToDB.Remote.RemoteDataContextBase.SqlOptimizerType.set -> void
virtual LinqToDB.Remote.RemoteDataContextBase.SqlProviderType.get -> System.Type!
virtual LinqToDB.Remote.RemoteDataContextBase.SqlProviderType.set -> void
virtual LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>.Invoke(TContext context, System.Linq.Expressions.Expression! expression, LinqToDB.Mapping.ColumnDescriptor? columnDescriptor, bool? inlineParameters) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Sql.ExpressionAttribute.GetExpression<TContext>(TContext context, LinqToDB.IDataContext! dataContext, LinqToDB.Expressions.IExpressionEvaluator! evaluator, LinqToDB.Internal.SqlQuery.SelectQuery! query, System.Linq.Expressions.Expression! expression, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> System.Linq.Expressions.Expression!
virtual LinqToDB.Sql.ExpressionAttribute.GetIsPredicate(System.Linq.Expressions.Expression! expression) -> bool
virtual LinqToDB.Sql.QueryExtensionAttribute.ExtendJoin(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>! extensions, System.Collections.Generic.List<LinqToDB.Sql.SqlQueryExtensionData!>! parameters) -> void
virtual LinqToDB.Sql.QueryExtensionAttribute.ExtendQuery(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>! extensions, System.Collections.Generic.List<LinqToDB.Sql.SqlQueryExtensionData!>! parameters) -> void
virtual LinqToDB.Sql.QueryExtensionAttribute.ExtendSubQuery(System.Collections.Generic.List<LinqToDB.Internal.SqlQuery.SqlQueryExtension!>! extensions, System.Collections.Generic.List<LinqToDB.Sql.SqlQueryExtensionData!>! parameters) -> void
virtual LinqToDB.Sql.QueryExtensionAttribute.ExtendTable(LinqToDB.Internal.SqlQuery.SqlTable! table, System.Collections.Generic.List<LinqToDB.Sql.SqlQueryExtensionData!>! parameters) -> void
virtual LinqToDB.Sql.QueryExtensionAttribute.GetExtension(System.Collections.Generic.List<LinqToDB.Sql.SqlQueryExtensionData!>! parameters) -> LinqToDB.Internal.SqlQuery.SqlQueryExtension!
virtual LinqToDB.Sql.TableFunctionAttribute.SetTable<TContext>(LinqToDB.DataOptions! options, TContext context, LinqToDB.Internal.SqlProvider.ISqlBuilder! sqlBuilder, LinqToDB.Mapping.MappingSchema! mappingSchema, LinqToDB.Internal.SqlQuery.SqlTable! table, System.Linq.Expressions.MethodCallExpression! methodCall, LinqToDB.Sql.ExpressionAttribute.ConvertFunc<TContext>! converter) -> void
virtual LinqToDB.TempTable<T>.Dispose() -> void
virtual LinqToDB.TempTable<T>.DisposeAsync() -> System.Threading.Tasks.ValueTask
virtual LinqToDB.UpdateColumnFilter<T>.Invoke(T entity, LinqToDB.Mapping.ColumnDescriptor! column) -> bool
~abstract LinqToDB.Internal.DataProvider.DataProviderOptions<T>.<Clone>$() -> LinqToDB.Internal.DataProvider.DataProviderOptions<T>!
~override LinqToDB.Internal.DataProvider.ReaderInfo.Equals(object obj) -> bool
~override LinqToDB.Internal.DataProvider.ReaderInfo.ToString() -> string
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2, T3>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1, T2>.Equals(object other) -> bool
~override LinqToDB.Sql.SqlRow<T1>.Equals(object other) -> bool
~override LinqToDB.SqlQuery.SqlObjectName.Equals(object obj) -> bool
~static LinqToDB.Internal.DataProvider.DataProviderOptions<T>.operator !=(LinqToDB.Internal.DataProvider.DataProviderOptions<T>? left, LinqToDB.Internal.DataProvider.DataProviderOptions<T>? right) -> bool
~static LinqToDB.Internal.DataProvider.DataProviderOptions<T>.operator ==(LinqToDB.Internal.DataProvider.DataProviderOptions<T>? left, LinqToDB.Internal.DataProvider.DataProviderOptions<T>? right) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7, T8>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6, T7>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5, T6>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4, T5>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3, T4>(this LinqToDB.Sql.SqlRow<T1, T2, T3, T4> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2, T3>(this LinqToDB.Sql.SqlRow<T1, T2, T3> thisRow, LinqToDB.Sql.SqlRow<T1, T2, T3> other) -> bool
~static LinqToDB.Sql.Overlaps<T1, T2>(this LinqToDB.Sql.SqlRow<T1, T2> thisRow, LinqToDB.Sql.SqlRow<T1, T2> other) -> bool
~static LinqToDB.Sql.Overlaps<T1>(this LinqToDB.Sql.SqlRow<T1> thisRow, LinqToDB.Sql.SqlRow<T1> other) -> bool
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>
~static LinqToDB.Sql.Row<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>
~static LinqToDB.Sql.Row<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) -> LinqToDB.Sql.SqlRow<T1, T2, T3, T4>
~static LinqToDB.Sql.Row<T1, T2, T3>(T1 value1, T2 value2, T3 value3) -> LinqToDB.Sql.SqlRow<T1, T2, T3>
~static LinqToDB.Sql.Row<T1, T2>(T1 value1, T2 value2) -> LinqToDB.Sql.SqlRow<T1, T2>
~static LinqToDB.Sql.Row<T1>(T1 value1) -> LinqToDB.Sql.SqlRow<T1>
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8, T9> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7, T8> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6, T7> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5, T6> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4, T5> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3, T4>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3, T4> x, LinqToDB.Sql.SqlRow<T1, T2, T3, T4> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator <(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator <=(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator >(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2, T3>.operator >=(LinqToDB.Sql.SqlRow<T1, T2, T3> x, LinqToDB.Sql.SqlRow<T1, T2, T3> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator <(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator <=(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator >(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1, T2>.operator >=(LinqToDB.Sql.SqlRow<T1, T2> x, LinqToDB.Sql.SqlRow<T1, T2> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator <(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator <=(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator >(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static LinqToDB.Sql.SqlRow<T1>.operator >=(LinqToDB.Sql.SqlRow<T1> x, LinqToDB.Sql.SqlRow<T1> y) -> bool
~static readonly LinqToDB.Sql.SqlRow.Types -> System.Type[]
~virtual LinqToDB.Internal.DataProvider.DataProviderOptions<T>.Equals(LinqToDB.Internal.DataProvider.DataProviderOptions<T>? other) -> bool
