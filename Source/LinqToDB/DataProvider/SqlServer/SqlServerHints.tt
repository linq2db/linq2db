<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq.Expressions;

namespace LinqToDB.DataProvider.SqlServer
{
	public static partial class SqlServerHints
	{
<#
	GenerateTableHint("ForceScan", "2012Plus");
	GenerateTableHint("ForceSeek");
	GenerateTableHint("HoldLock");
	GenerateTableHint("NoLock");
	GenerateTableHint("NoWait");
	GenerateTableHint("PagLock");
	GenerateTableHint("ReadCommitted");
	GenerateTableHint("ReadCommittedLock");
	GenerateTableHint("ReadPast");
	GenerateTableHint("ReadUncommitted");
	GenerateTableHint("RepeatableRead");
	GenerateTableHint("RowLock");
	GenerateTableHint("Serializable");
	GenerateTableHint("Snapshot", "2014Plus");
	GenerateTableHint("TabLock");
	GenerateTableHint("TabLockX");
	GenerateTableHint("UpdLock");
	GenerateTableHint("XLock");

	GenerateJoinHint("Loop");
	GenerateJoinHint("Hash");
	GenerateJoinHint("Merge");
	GenerateJoinHint("Remote");

	GenerateQueryHint ("HashGroup");   GenerateQueryHint("OrderGroup");
	GenerateQueryHint ("ConcatUnion"); GenerateQueryHint("HashUnion"); GenerateQueryHint("MergeUnion");
	GenerateQueryHint ("LoopJoin");    GenerateQueryHint("HashJoin");  GenerateQueryHint("MergeJoin");
	GenerateQueryHint ("ExpandViews");
	GenerateQueryHint2("Fast");
	GenerateQueryHint ("ForceOrder");
	GenerateQueryHint ("ForceExternalPushDown");
	GenerateQueryHint("DisableExternalPushDown");
	GenerateQueryHint ("ForceScaleOutExecution",   "2019Plus");
	GenerateQueryHint ("DisableScaleOutExecution", "2019Plus");
	GenerateQueryHint ("IgnoreNonClusteredColumnStoreIndex", "2012Plus");
	GenerateQueryHint ("KeepPlan");
	GenerateQueryHint ("KeepFixedPlan");
	GenerateQueryHint2("MaxGrantPercent", "2016Plus");
	GenerateQueryHint2("MinGrantPercent", "2016Plus");
	GenerateQueryHint2("MaxDop");
	GenerateQueryHint2("MaxRecursion");
	GenerateQueryHint ("NoPerformanceSpool", "2019Plus");
	GenerateQueryHint ("OptimizeForUnknown", "2008Plus");
	GenerateQueryHint2("QueryTraceOn");
	GenerateQueryHint ("Recompile");
	GenerateQueryHint ("RobustPlan");
#>
	}
}
<#+
void GenerateTableHint(string hint, string version = "")
{
#>
		[ExpressionMethod(ProviderName.SqlServer, nameof(With<#= hint #>TableImpl))]
		public static ISqlServerSpecificTable<TSource> With<#= hint #><TSource>(this ISqlServerSpecificTable<TSource> table)
			where TSource : notnull
		{
			return table.TableHint<#= version #>(Table.<#= hint #>);
		}

		static Expression<Func<ISqlServerSpecificTable<TSource>,ISqlServerSpecificTable<TSource>>> With<#= hint #>TableImpl<TSource>()
			where TSource : notnull
		{
			return table => table.TableHint<#= version #>(Table.<#= hint #>);
		}

		[ExpressionMethod(ProviderName.SqlServer, nameof(With<#= hint #>QueryImpl))]
		public static ISqlServerSpecificQueryable<TSource> With<#= hint #>InScope<TSource>(this ISqlServerSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.TablesInScopeHint<#= version #>(Table.<#= hint #>);
		}

		static Expression<Func<ISqlServerSpecificQueryable<TSource>,ISqlServerSpecificQueryable<TSource>>> With<#= hint #>QueryImpl<TSource>()
			where TSource : notnull
		{
			return query => query.TablesInScopeHint<#= version #>(Table.<#= hint #>);
		}

<#+
}

void GenerateJoinHint(string hint)
{
#>
		[ExpressionMethod(nameof(Join<#= hint #>HintImpl))]
		public static ISqlServerSpecificQueryable<TSource> Join<#= hint #>Hint<TSource>(this ISqlServerSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.JoinHint(Join.<#= hint #>);
		}

		static Expression<Func<ISqlServerSpecificQueryable<TSource>,ISqlServerSpecificQueryable<TSource>>> Join<#= hint #>HintImpl<TSource>()
			where TSource : notnull
		{
			return query => query.JoinHint(Join.<#= hint #>);
		}

		[ExpressionMethod(nameof(Join<#= hint #>TableHintImpl))]
		public static ISqlServerSpecificTable<TSource> Join<#= hint #>Hint<TSource>(this ISqlServerSpecificTable<TSource> table)
			where TSource : notnull
		{
			return table.JoinHint(Join.<#= hint #>);
		}

		static Expression<Func<ISqlServerSpecificTable<TSource>,ISqlServerSpecificTable<TSource>>> Join<#= hint #>TableHintImpl<TSource>()
			where TSource : notnull
		{
			return table => table.JoinHint(Join.<#= hint #>);
		}

<#+
}

void GenerateQueryHint(string hint, string version = "")
{
#>
		[ExpressionMethod(nameof(Option<#= hint #>Impl))]
		public static ISqlServerSpecificQueryable<TSource> Option<#= hint #><TSource>(this ISqlServerSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.QueryHint<#= version #>(Query.<#= hint #>);
		}

		static Expression<Func<ISqlServerSpecificQueryable<TSource>,ISqlServerSpecificQueryable<TSource>>> Option<#= hint #>Impl<TSource>()
			where TSource : notnull
		{
			return query => query.QueryHint<#= version #>(Query.<#= hint #>);
		}

<#+
}

void GenerateQueryHint2(string hint, string version = "")
{
#>
		[ExpressionMethod(nameof(Option<#= hint #>Impl))]
		public static ISqlServerSpecificQueryable<TSource> Option<#= hint #><TSource>(this ISqlServerSpecificQueryable<TSource> query, int value)
			where TSource : notnull
		{
			return query.QueryHint<#= version #>(Query.<#= hint #>(value));
		}

		static Expression<Func<ISqlServerSpecificQueryable<TSource>,int,ISqlServerSpecificQueryable<TSource>>> Option<#= hint #>Impl<TSource>()
			where TSource : notnull
		{
			return (query, value) => query.QueryHint<#= version #>(Query.<#= hint #>(value));
		}

<#+
}
#>
