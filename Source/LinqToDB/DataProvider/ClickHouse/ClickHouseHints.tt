<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq.Expressions;

namespace LinqToDB.DataProvider.ClickHouse
{
	public static partial class ClickHouseHints
	{
<#
	GenerateJoinHint("Outer");
	GenerateJoinHint("Semi");
	GenerateJoinHint("Anti");
	GenerateJoinHint("Any");
	GenerateJoinHint("AsOf");
#>
	}
}
<#+
void GenerateTableHint(string hint, string version = "")
{
#>
		[ExpressionMethod(ProviderName.ClickHouse, nameof(With<#= hint #>TableImpl))]
		public static IClickHouseSpecificTable<TSource> With<#= hint #><TSource>(this IClickHouseSpecificTable<TSource> table)
			where TSource : notnull
		{
			return table.TableHint<#= version #>(Table.<#= hint #>);
		}

		static Expression<Func<IClickHouseSpecificTable<TSource>,IClickHouseSpecificTable<TSource>>> With<#= hint #>TableImpl<TSource>()
			where TSource : notnull
		{
			return table => table.TableHint<#= version #>(Table.<#= hint #>);
		}

		[ExpressionMethod(ProviderName.ClickHouse, nameof(With<#= hint #>QueryImpl))]
		public static IClickHouseSpecificQueryable<TSource> With<#= hint #>InScope<TSource>(this IClickHouseSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.TablesInScopeHint<#= version #>(Table.<#= hint #>);
		}

		static Expression<Func<IClickHouseSpecificQueryable<TSource>,IClickHouseSpecificQueryable<TSource>>> With<#= hint #>QueryImpl<TSource>()
			where TSource : notnull
		{
			return query => query.TablesInScopeHint<#= version #>(Table.<#= hint #>);
		}

<#+
}

void GenerateJoinHint(string hint)
{
#>
		[ExpressionMethod(nameof(Join<#= hint #>HintImpl))]
		public static IClickHouseSpecificQueryable<TSource> Join<#= hint #>Hint<TSource>(this IClickHouseSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.JoinHint(Join.<#= hint #>);
		}

		static Expression<Func<IClickHouseSpecificQueryable<TSource>,IClickHouseSpecificQueryable<TSource>>> Join<#= hint #>HintImpl<TSource>()
			where TSource : notnull
		{
			return query => query.JoinHint(Join.<#= hint #>);
		}

		[ExpressionMethod(nameof(Join<#= hint #>TableHintImpl))]
		public static IClickHouseSpecificTable<TSource> Join<#= hint #>Hint<TSource>(this IClickHouseSpecificTable<TSource> table)
			where TSource : notnull
		{
			return table.JoinHint(Join.<#= hint #>);
		}

		static Expression<Func<IClickHouseSpecificTable<TSource>,IClickHouseSpecificTable<TSource>>> Join<#= hint #>TableHintImpl<TSource>()
			where TSource : notnull
		{
			return table => table.JoinHint(Join.<#= hint #>);
		}

<#+
}

void GenerateQueryHint(string hint, string version = "")
{
#>
		[ExpressionMethod(nameof(Option<#= hint #>Impl))]
		public static IClickHouseSpecificQueryable<TSource> Option<#= hint #><TSource>(this IClickHouseSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return query.QueryHint<#= version #>(Query.<#= hint #>);
		}

		static Expression<Func<IClickHouseSpecificQueryable<TSource>,IClickHouseSpecificQueryable<TSource>>> Option<#= hint #>Impl<TSource>()
			where TSource : notnull
		{
			return query => query.QueryHint<#= version #>(Query.<#= hint #>);
		}

<#+
}

void GenerateQueryHint2(string hint, string version = "")
{
#>
		[ExpressionMethod(nameof(Option<#= hint #>Impl))]
		public static IClickHouseSpecificQueryable<TSource> Option<#= hint #><TSource>(this IClickHouseSpecificQueryable<TSource> query, int value)
			where TSource : notnull
		{
			return query.QueryHint<#= version #>(Query.<#= hint #>(value));
		}

		static Expression<Func<IClickHouseSpecificQueryable<TSource>,int,IClickHouseSpecificQueryable<TSource>>> Option<#= hint #>Impl<TSource>()
			where TSource : notnull
		{
			return (query, value) => query.QueryHint<#= version #>(Query.<#= hint #>(value));
		}

<#+
}
#>
