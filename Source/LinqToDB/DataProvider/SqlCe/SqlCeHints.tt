<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq.Expressions;

namespace LinqToDB.DataProvider.SqlCe
{
	public static partial class SqlCeHints
	{
<#
	GenerateTable("HoldLock");
	GenerateTable("NoLock");
	GenerateTable("PagLock");
	GenerateTable("RowLock");
	GenerateTable("TabLock");
	GenerateTable("UpdLock");
	GenerateTable("XLock");
#>
	}
}
<#+
void GenerateTable(string hint)
{
#>
		[ExpressionMethod(ProviderName.SqlCe, nameof(With<#= hint #>TableImpl))]
		public static ISqlCeSpecificTable<TSource> With<#= hint #><TSource>(this ISqlCeSpecificTable<TSource> table)
			where TSource : notnull
		{
			return TableHint(table, Table.<#= hint #>);
		}

		static Expression<Func<ISqlCeSpecificTable<TSource>,ISqlCeSpecificTable<TSource>>> With<#= hint #>TableImpl<TSource>()
			where TSource : notnull
		{
			return table => TableHint(table, Table.<#= hint #>);
		}

		[ExpressionMethod(ProviderName.SqlCe, nameof(With<#= hint #>QueryImpl))]
		public static ISqlCeSpecificQueryable<TSource> With<#= hint #>InScope<TSource>(this ISqlCeSpecificQueryable<TSource> query)
			where TSource : notnull
		{
			return TablesInScopeHint(query, Table.<#= hint #>);
		}

		static Expression<Func<ISqlCeSpecificQueryable<TSource>,ISqlCeSpecificQueryable<TSource>>> With<#= hint #>QueryImpl<TSource>()
			where TSource : notnull
		{
			return query => TablesInScopeHint(query, Table.<#= hint #>);
		}

<#+
}
#>
