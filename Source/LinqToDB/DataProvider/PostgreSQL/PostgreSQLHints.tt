<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq.Expressions;

namespace LinqToDB.DataProvider.PostgreSQL
{
	public static partial class PostgreSQLHints
	{
<#
	GenerateQuery("ForUpdate",      ""); GenerateQuery("ForUpdate",      "NoWait"); GenerateQuery("ForUpdate",      "SkipLocked");
	GenerateQuery("ForNoKeyUpdate", ""); GenerateQuery("ForNoKeyUpdate", "NoWait"); GenerateQuery("ForNoKeyUpdate", "SkipLocked");
	GenerateQuery("ForShare",       ""); GenerateQuery("ForShare",       "NoWait"); GenerateQuery("ForShare",       "SkipLocked");
	GenerateQuery("ForKeyShare",    ""); GenerateQuery("ForKeyShare",    "NoWait"); GenerateQuery("ForKeyShare",    "SkipLocked");
#>
	}
}
<#+

void GenerateQuery(string hint, string hint2)
{
#>
		[ExpressionMethod(nameof(<#= hint #><#= hint2 #>HintImpl))]
		public static IPostgreSQLSpecificQueryable<TSource> <#= hint #><#= hint2 #>Hint<TSource>(
			this IPostgreSQLSpecificQueryable<TSource> query,
			params Sql.SqlID[]                         tableIDs)
			where TSource : notnull
		{
			return SubQueryTableHint(query, <#= hint #>, <#= hint2?.Length == 0 ? "" : hint2 + ", " #>tableIDs);
		}
		static Expression<Func<IPostgreSQLSpecificQueryable<TSource>,Sql.SqlID[],IPostgreSQLSpecificQueryable<TSource>>> <#= hint #><#= hint2 #>HintImpl<TSource>()
			where TSource : notnull
		{
			return (query, tableIDs) => SubQueryTableHint(query, <#= hint #>, <#= hint2?.Length == 0 ? "" : hint2 + ", " #>tableIDs);
		}

<#+
}
#>
