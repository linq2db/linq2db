using System;
using System.Linq.Expressions;
using LinqToDB.Expressions;
using LinqToDB.Reflection;

namespace LinqToDB.Mapping
{
	/// <summary>
	/// Defines optimistic lock column value generation strategy for update.
	/// Used with <see cref="ConcurrencyExtensions" /> extensions:
	/// <list type="bullet">
	/// <item><see cref="ConcurrencyExtensions.UpdateOptimistic{T}(IDataContext, T)"/></item>
	/// <item><see cref="ConcurrencyExtensions.UpdateOptimisticAsync{T}(IDataContext, T, System.Threading.CancellationToken)"/></item>
	/// <item><see cref="ConcurrencyExtensions.DeleteOptimistic{T}(IDataContext, T)"/></item>
	/// <item><see cref="ConcurrencyExtensions.DeleteOptimisticAsync{T}(IDataContext, T, System.Threading.CancellationToken)"/></item>
	/// </list>
	/// </summary>
	[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]
	public abstract class OptimisticLockPropertyBaseAttribute : MappingAttribute
	{
		public OptimisticLockPropertyBaseAttribute()
		{
		}

		/// <summary>
		/// Returns expression for new value for optimistic lock column on successful update.
		/// Should return <c>null</c> if value generated by database.
		/// </summary>
		/// <param name="column">Column descriptor.</param>
		/// <param name="record">Current record variable.</param>
		public abstract LambdaExpression? GetNextValue(ColumnDescriptor column, ParameterExpression record);

		public override string GetObjectID() => $".{Configuration}.";
	}
}
