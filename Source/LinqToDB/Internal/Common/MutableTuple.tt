<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".generated.cs" #>
// <auto-generated> This file has been auto generated. </auto-generated>
//#nullable enable
using System;
using System.Collections.Generic;

namespace LinqToDB.Internal.Common
{
<#
	var MaxMemberCount = 8;
	var prefixes = new[] { "M" };
#>
	internal static partial class MutableTuple
	{
		public const int MaxMemberCount = <#= MaxMemberCount #>;

<#
	foreach (var prefix in prefixes)
	{
#>
		public static readonly Type[] <#= prefix #>Types = new []
		{
<#
	    foreach (var info in Enumerable.Range(1, MaxMemberCount))
	    {
	        var indexes = Enumerable.Range(1, info).ToArray();
	        var types = string.Join(",", indexes.Select(i => ""));
#>
			typeof(<#= prefix #>Tuple<<#= types #>>),
<#
	    } #>
		};

<#
	}
#>
	}

<#
	foreach (var prefix in prefixes)
	foreach (var info in Enumerable.Range(1, MaxMemberCount))
	{

		var indexes      = Enumerable.Range(1, info).ToArray();
		var types        = string.Join(", ", indexes.Select(i => "T" + i.ToString()));
		var equals       = string.Join("\r\n\t\t\t\t&& ", indexes.Select(i => $"_item{i}ValueComparer.Equals(Item{i}, objTuple.Item{i})"));
		var hashCodes    = string.Join(",\r\n\t\t\t\t", indexes.Select(i => $"_item{i}ValueComparer.GetHashCode(Item{i})"));
		var hashCodesStr = hashCodes;
		if (info > 1)
		    hashCodesStr = $"HashCode.Combine({hashCodes})";

#>
	internal sealed class <#= prefix #>Tuple<<#= types #>>
	{
<#
	foreach (var idx in indexes)
	{
#>
		public T<#= idx #> Item<#= idx #> { get; set; }
<#
	}
#>
<#
	foreach (var idx in indexes)
	{
#>
		static IEqualityComparer<T<#= idx #>> _item<#= idx #>ValueComparer = ValueComparer.GetDefaultValueComparer<T<#= idx #>>(true);
<#
	}
#>
		public override bool Equals(object other)
		{
			if (other == null) return false;

			var objTuple = other as MTuple<<#= types #>>;

			if (objTuple == null)
				return false;

			return <#= equals #>;
		}

		public override int GetHashCode()
			=> <#= hashCodesStr #>;
	}
<#
	}
#>
}
