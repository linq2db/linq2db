using LinqToDB.Mapping;
using LinqToDB.SqlQuery;

namespace LinqToDB.Internal.SqlQuery
{
	/// <summary>
	/// Contains names and create helpers for pseudo-functions, generated by linq2db and then converted to database-specific SQL by provider-specific SQL optimizer.
	/// </summary>
	public static class PseudoFunctions
	{
		public const string MERGE_ACTION = "$merge_action$";

		/// <summary>
		/// Function to convert text parameter to lowercased form: <c>TO_LOWER(string)</c>
		/// </summary>
		public const string TO_LOWER = "$ToLower$";
		public static SqlFunction MakeToLower(ISqlExpression value, MappingSchema mappingSchema)
		{
			return new SqlFunction(mappingSchema.GetDbDataType(typeof(string)), TO_LOWER, value);
		}

		/// <summary>
		/// Function to convert text parameter to uppercased form: <c>TO_UPPER(string)</c>
		/// </summary>
		public const string TO_UPPER = "$ToUpper$";

		/// <summary>
		/// Creates cast expression: <c>CAST(value AS to_type)</c>
		/// </summary>
		public static SqlCastExpression MakeCast(ISqlExpression value, DbDataType toType, SqlDataType? fromType = null)
		{
			return new SqlCastExpression(value, toType, fromType);
		}

		/// <summary>
		/// Function to convert value from one type to another: <c>CONVERT(to_type, from_type, value) { CanBeNull = value.CanBeNull }</c>
		/// </summary>
		public const string CONVERT_FORMAT = "$Convert_Format$";

		/// <summary>
		/// Function to convert value from one type to another: <c>CONVERT(to_type, from_type, value) { CanBeNull = value.CanBeNull, DoNotOptimize = true }</c>
		/// </summary>
		public static SqlCastExpression MakeMandatoryCast(ISqlExpression value, DbDataType toType, SqlDataType? fromType = null)
		{
			return new SqlCastExpression(value, toType, fromType, true);
		}

		/// <summary>
		/// Function to convert value from one type to another: <c>TRY_CONVERT(to_type, from_type, value) { CanBeNull = true }</c>.
		/// Returns NULL on conversion failure.
		/// </summary>
		public const string TRY_CONVERT = "$TryConvert$";

		/// <summary>
		/// Function to convert value from one type to another: <c>TRY_CONVERT_OR_DEFAULT(to_type, from_type, value, defaultValue) { CanBeNull = value.CanBeNull || defaultValue.CanBeNull }</c>.
		/// Returns provided default value on conversion failure.
		/// </summary>
		public const string TRY_CONVERT_OR_DEFAULT = "$TryConvertOrDefault$";

		/// <summary>
		/// Function to replace one text fragment with another in string: <c>REPLACE(value, oldSubstring, newSubstring)</c>
		/// </summary>
		public const string REPLACE = "$Replace$";
		public static SqlFunction MakeReplace(ISqlExpression value, ISqlExpression oldSubstring, ISqlExpression newSubstring, MappingSchema mappingSchema)
		{
			return new SqlFunction(QueryHelper.GetDbDataType(value, mappingSchema), REPLACE, value, oldSubstring, newSubstring);
		}

		/// <summary>
		/// Function to suppress conversion SQL generation for provided value: <c>REMOVE_CONVERT(value, resultType)</c>
		/// </summary>
		public const string REMOVE_CONVERT = "$Convert_Remover$";

		/// <summary>
		/// Function for calculating length of string: <c>LENGTH(value)</c>
		/// </summary>
		public const string LENGTH = "$Length$";
	}
}
