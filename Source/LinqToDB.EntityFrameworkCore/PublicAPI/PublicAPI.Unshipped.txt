#nullable enable
LinqToDB.EntityFrameworkCore.EFConnectionInfo
LinqToDB.EntityFrameworkCore.EFConnectionInfo.Connection.get -> System.Data.Common.DbConnection?
LinqToDB.EntityFrameworkCore.EFConnectionInfo.Connection.set -> void
LinqToDB.EntityFrameworkCore.EFConnectionInfo.ConnectionString.get -> string?
LinqToDB.EntityFrameworkCore.EFConnectionInfo.ConnectionString.set -> void
LinqToDB.EntityFrameworkCore.EFConnectionInfo.EFConnectionInfo() -> void
LinqToDB.EntityFrameworkCore.EFForEFExtensions
LinqToDB.EntityFrameworkCore.EFProviderInfo
LinqToDB.EntityFrameworkCore.EFProviderInfo.Connection.get -> System.Data.Common.DbConnection?
LinqToDB.EntityFrameworkCore.EFProviderInfo.Connection.set -> void
LinqToDB.EntityFrameworkCore.EFProviderInfo.Context.get -> Microsoft.EntityFrameworkCore.DbContext?
LinqToDB.EntityFrameworkCore.EFProviderInfo.Context.set -> void
LinqToDB.EntityFrameworkCore.EFProviderInfo.EFProviderInfo() -> void
LinqToDB.EntityFrameworkCore.EFProviderInfo.Options.get -> Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions?
LinqToDB.EntityFrameworkCore.EFProviderInfo.Options.set -> void
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ClearCaches() -> void
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.CreateLogger(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> Microsoft.Extensions.Logging.ILogger?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.CreateMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel! model, LinqToDB.Metadata.IMetadataReader! metadataReader, Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector! convertorSelector, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.CreateMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel? model, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider!>? accessor) -> LinqToDB.Metadata.IMetadataReader?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.EnableChangeTracker.get -> bool
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.EnableChangeTracker.set -> void
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ExtractConnectionInfo(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> LinqToDB.EntityFrameworkCore.EFConnectionInfo!
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.ExtractModel(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> Microsoft.EntityFrameworkCore.Metadata.IModel?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext? context) -> Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetCurrentContext(System.Linq.IQueryable! query) -> Microsoft.EntityFrameworkCore.DbContext?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetDataProvider(LinqToDB.DataOptions! options, LinqToDB.EntityFrameworkCore.EFProviderInfo! providerInfo, LinqToDB.EntityFrameworkCore.EFConnectionInfo! connectionInfo) -> LinqToDB.DataProvider.IDataProvider?
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel! model, LinqToDB.Metadata.IMetadataReader? metadataReader, Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector? convertorSelector, LinqToDB.DataOptions? dataOptions) -> LinqToDB.Mapping.MappingSchema!
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.LogConnectionTrace(LinqToDB.Data.TraceInfo! info, Microsoft.Extensions.Logging.ILogger! logger) -> void
LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools.TransformExpression(System.Linq.Expressions.Expression! expression, LinqToDB.IDataContext? dc, Microsoft.EntityFrameworkCore.DbContext? ctx, Microsoft.EntityFrameworkCore.Metadata.IModel? model, bool isQueryExpression) -> System.Linq.Expressions.Expression!
LinqToDB.EntityFrameworkCore.Internal.CanBeValuatedVisitor
LinqToDB.EntityFrameworkCore.Internal.CanBeValuatedVisitor.CanBeEvaluated.get -> bool
LinqToDB.EntityFrameworkCore.Internal.CanBeValuatedVisitor.CanBeValuatedVisitor() -> void
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.CreateQuery(System.Linq.Expressions.Expression! expression) -> System.Linq.IQueryable!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.CreateQuery<TElement>(System.Linq.Expressions.Expression! expression) -> System.Linq.IQueryable<TElement>!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.ElementType.get -> System.Type!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.Execute(System.Linq.Expressions.Expression! expression) -> object?
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.Execute<TResult>(System.Linq.Expressions.Expression! expression) -> TResult
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.ExecuteAsync<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<TResult>!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.ExecuteAsyncEnumerable<TResult>(System.Linq.Expressions.Expression! expression, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<System.Collections.Generic.IAsyncEnumerable<TResult>!>!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.Expression.get -> System.Linq.Expressions.Expression!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerator<T>!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.LinqToDBForEFQueryProvider(LinqToDB.IDataContext! dataContext, System.Linq.Expressions.Expression! expression) -> void
LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.Provider.get -> System.Linq.IQueryProvider!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.Info.get -> Microsoft.EntityFrameworkCore.Infrastructure.DbContextOptionsExtensionInfo!
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.LinqToDBOptionsExtension() -> void
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.LinqToDBOptionsExtension(LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension! copyFrom) -> void
LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions! options) -> void
LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.CanBeEvaluated(System.Linq.Expressions.Expression! expression) -> bool
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.CanBeValuatedVisitor -> LinqToDB.EntityFrameworkCore.Internal.CanBeValuatedVisitor!
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.DataContext.get -> LinqToDB.IDataContext?
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.DataContext.set -> void
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.IgnoreTracking.get -> bool?
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.IgnoreTracking.set -> void
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.Tracking.get -> bool?
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.Tracking.set -> void
LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.TransformExpressionVisitor() -> void
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder.AddCustomOptions(System.Func<LinqToDB.DataOptions!, LinqToDB.DataOptions!>! optionsSetter) -> LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder!
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder.AddInterceptor(LinqToDB.Interceptors.IInterceptor! interceptor) -> LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder!
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder.AddMappingSchema(LinqToDB.Mapping.MappingSchema! mappingSchema) -> LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder!
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder.DbContextOptions.get -> Microsoft.EntityFrameworkCore.DbContextOptions!
LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder.LinqToDBContextOptionsBuilder(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder! optionsBuilder) -> void
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AllAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AnyAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AnyAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AsAsyncEnumerable<TSource>(System.Linq.IQueryable<TSource>! source) -> System.Collections.Generic.IAsyncEnumerable<TSource>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync(System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.AverageAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ContainsAsync<TSource>(System.Linq.IQueryable<TSource>! source, TSource item, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<bool>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.CountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.CountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.FirstAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.FirstAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.FirstOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ForEachAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.LinqToDBExtensionsAdapter() -> void
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.LongCountAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.MaxAsync<TSource, TResult>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TResult?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.MaxAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.MinAsync<TSource, TResult>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TResult?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.MinAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SingleAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SingleAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SingleOrDefaultAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync(System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<decimal?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<double?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<float?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<int?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.SumAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<long?>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToArrayAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<TSource[]!>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToDictionaryAsync<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToDictionaryAsync<TSource, TKey>(System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
LinqToDB.EntityFrameworkCore.LinqToDBExtensionsAdapter.ToListAsync<TSource>(System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>!>!
LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions
LinqToDB.EntityFrameworkCore.LinqToDBForEFTools
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.Context.get -> Microsoft.EntityFrameworkCore.DbContext?
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.LinqToDBForEFToolsDataConnection(Microsoft.EntityFrameworkCore.DbContext? context, LinqToDB.DataOptions! options, Microsoft.EntityFrameworkCore.Metadata.IModel? model, System.Func<System.Linq.Expressions.Expression!, LinqToDB.IDataContext!, Microsoft.EntityFrameworkCore.DbContext?, Microsoft.EntityFrameworkCore.Metadata.IModel?, bool, System.Linq.Expressions.Expression!>? transformFunc) -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.ProcessExpression(System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs! args) -> System.Linq.Expressions.Expression!
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.Tracking.get -> bool
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataConnection.Tracking.set -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataContext
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataContext.LinqToDBForEFToolsDataContext(Microsoft.EntityFrameworkCore.DbContext? context, LinqToDB.DataProvider.IDataProvider! dataProvider, string! connectionString, Microsoft.EntityFrameworkCore.Metadata.IModel! model, System.Func<System.Linq.Expressions.Expression!, LinqToDB.IDataContext!, Microsoft.EntityFrameworkCore.DbContext?, Microsoft.EntityFrameworkCore.Metadata.IModel!, bool, System.Linq.Expressions.Expression!>? transformFunc) -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsDataContext.ProcessExpression(System.Linq.Expressions.Expression! expression, LinqToDB.Interceptors.QueryExpressionArgs! args) -> System.Linq.Expressions.Expression!
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.LinqToDBForEFToolsException() -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.LinqToDBForEFToolsException(string! message) -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsException.LinqToDBForEFToolsException(string! message, System.Exception! innerException) -> void
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault
LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.LinqToDBForEFToolsImplDefault() -> void
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.LinqToDBProviderInfo() -> void
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.Merge(LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo? providerInfo) -> void
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.ProviderName.get -> string?
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.ProviderName.set -> void
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.Version.get -> string?
LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo.Version.set -> void
override LinqToDB.EntityFrameworkCore.Internal.LinqToDBForEFQueryProvider<T>.ToString() -> string?
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.Cleanup() -> void
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.VisitLambda<T>(System.Linq.Expressions.Expression<T>! node) -> System.Linq.Expressions.Expression!
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression! node) -> System.Linq.Expressions.Expression!
override LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression! node) -> System.Linq.Expressions.Expression!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AllAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AnyAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AnyAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.AverageAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ContainsAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, TSource item, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.CountAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.CountAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstOrDefaultAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.FirstOrDefaultAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ForEachAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.LongCountAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.LongCountAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.MaxAsyncEF<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.MaxAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.MinAsyncEF<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.MinAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleOrDefaultAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SingleOrDefaultAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.SumAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToArrayAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource[]!>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToDictionaryAsyncEF<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
static LinqToDB.EntityFrameworkCore.EFForEFExtensions.ToListAsyncEF<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>!>!
static LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.IsQueryable(System.Linq.Expressions.MethodCallExpression! method, bool enumerable = true) -> bool
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AllAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AnyAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AnyAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.AverageAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ContainsAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, TSource item, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<bool>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.CountAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.CountAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstOrDefaultAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.FirstOrDefaultAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ForEachAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Action<TSource>! action, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.LongCountAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.LongCountAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.MaxAsyncLinqToDB<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.MaxAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.MinAsyncLinqToDB<TSource, TResult>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, TResult>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TResult?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.MinAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleOrDefaultAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, bool>!>! predicate, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SingleOrDefaultAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<decimal>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<decimal?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<double>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<double?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<float>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<float?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<int>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<int?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<long>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB(this System.Linq.IQueryable<long?>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, decimal?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<decimal?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, double?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<double?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, float?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<float?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, int?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<int?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.SumAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Linq.Expressions.Expression<System.Func<TSource, long?>!>! selector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<long?>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToArrayAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<TSource[]!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Collections.Generic.IEqualityComparer<TKey>! comparer, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB<TSource, TKey, TElement>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Func<TSource, TElement>! elementSelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TElement>!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToDictionaryAsyncLinqToDB<TSource, TKey>(this System.Linq.IQueryable<TSource>! source, System.Func<TSource, TKey>! keySelector, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<TKey, TSource>!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFExtensions.ToListAsyncLinqToDB<TSource>(this System.Linq.IQueryable<TSource>! source, System.Threading.CancellationToken token = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.Collections.Generic.List<TSource>!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy<T>(this Microsoft.EntityFrameworkCore.DbContext! context, int maxBatchSize, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy<T>(this Microsoft.EntityFrameworkCore.DbContext! context, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopy<T>(this Microsoft.EntityFrameworkCore.DbContext! context, System.Collections.Generic.IEnumerable<T!>! source) -> LinqToDB.Data.BulkCopyRowsCopied!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, int maxBatchSize, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, int maxBatchSize, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, LinqToDB.Data.BulkCopyOptions! options, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, System.Collections.Generic.IAsyncEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.BulkCopyAsync<T>(this Microsoft.EntityFrameworkCore.DbContext! context, System.Collections.Generic.IEnumerable<T!>! source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<LinqToDB.Data.BulkCopyRowsCopied!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ClearCaches() -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDBConnection(this Microsoft.EntityFrameworkCore.DbContext! context, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction? transaction = null) -> LinqToDB.Data.DataConnection!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDBConnection(this Microsoft.EntityFrameworkCore.DbContextOptions! options) -> LinqToDB.Data.DataConnection!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDBConnectionDetached(this Microsoft.EntityFrameworkCore.DbContext! context) -> LinqToDB.Data.DataConnection!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLinqToDBContext(this Microsoft.EntityFrameworkCore.DbContext! context, Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction? transaction = null) -> LinqToDB.IDataContext!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.CreateLogger(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> Microsoft.Extensions.Logging.ILogger?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.EnableChangeTracker.get -> bool
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.EnableChangeTracker.set -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetConnectionInfo(LinqToDB.EntityFrameworkCore.EFProviderInfo! info) -> LinqToDB.EntityFrameworkCore.EFConnectionInfo!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext! context) -> Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetCurrentContext(System.Linq.IQueryable! query) -> Microsoft.EntityFrameworkCore.DbContext?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetDataProvider(LinqToDB.DataOptions! options, LinqToDB.EntityFrameworkCore.EFProviderInfo! info, LinqToDB.EntityFrameworkCore.EFConnectionInfo! connectionInfo) -> LinqToDB.DataProvider.IDataProvider!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetDbContextOptions(this Microsoft.EntityFrameworkCore.DbContext! context) -> Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(Microsoft.EntityFrameworkCore.DbContext! context) -> LinqToDB.EntityFrameworkCore.EFProviderInfo!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(Microsoft.EntityFrameworkCore.DbContextOptions! options) -> LinqToDB.EntityFrameworkCore.EFProviderInfo!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetEFProviderInfo(System.Data.Common.DbConnection! connection) -> LinqToDB.EntityFrameworkCore.EFProviderInfo!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetLinqToDBOptions(this Microsoft.EntityFrameworkCore.DbContext! context) -> LinqToDB.DataOptions?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetLinqToDBOptions(this Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions! contextOptions) -> LinqToDB.DataOptions?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel! model, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider!>? accessor, LinqToDB.DataOptions? dataOptions) -> LinqToDB.Mapping.MappingSchema!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel? model, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider!>? accessor) -> LinqToDB.Metadata.IMetadataReader?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetModel(Microsoft.EntityFrameworkCore.DbContextOptions? options) -> Microsoft.EntityFrameworkCore.Metadata.IModel?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.GetTable<T>(this Microsoft.EntityFrameworkCore.DbContext! context) -> LinqToDB.ITable<T!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Implementation.get -> LinqToDB.EntityFrameworkCore.ILinqToDBForEFTools!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Implementation.set -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Initialize() -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.Into<T>(this Microsoft.EntityFrameworkCore.DbContext! context, LinqToDB.ITable<T>! target) -> LinqToDB.Linq.IValueInsertable<T>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDB<T>(this System.Linq.IQueryable<T>! query) -> System.Linq.IQueryable<T>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDB<T>(this System.Linq.IQueryable<T>! query, LinqToDB.IDataContext! dc) -> System.Linq.IQueryable<T>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDBTable<T>(this Microsoft.EntityFrameworkCore.DbSet<T!>! dbSet) -> LinqToDB.ITable<T!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.ToLinqToDBTable<T>(this Microsoft.EntityFrameworkCore.DbSet<T!>! dbSet, LinqToDB.IDataContext! dataContext) -> LinqToDB.ITable<T!>!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.TransformExpression(System.Linq.Expressions.Expression! expression, LinqToDB.IDataContext? dc, Microsoft.EntityFrameworkCore.DbContext? ctx, Microsoft.EntityFrameworkCore.Metadata.IModel? model, bool isQueryExpression) -> System.Linq.Expressions.Expression!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFTools.UseLinqToDB<TContext>(this TContext! optionsBuilder, System.Action<LinqToDB.EntityFrameworkCore.LinqToDBContextOptionsBuilder!>? linq2dbOptionsAction = null) -> TContext!
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.EvaluateExpression(System.Linq.Expressions.Expression? expr) -> object?
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.PostgreSqlDefaultVersion.get -> LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.PostgreSqlDefaultVersion.set -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.SqlServerDefaultVersion.get -> LinqToDB.DataProvider.SqlServer.SqlServerVersion
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.SqlServerDefaultVersion.set -> void
static LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.Unwrap(System.Linq.Expressions.Expression? ex) -> System.Linq.Expressions.Expression?
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.AsNoTrackingMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.AsTrackingMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.ContextDependenciesGetValueMethod -> System.Func<object?, object?>!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.DataParameterConstructor -> System.Reflection.ConstructorInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.EFProperty -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.IgnoreQueryFiltersMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.IncludeMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.IncludeMethodInfoString -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.L2DBFromSqlMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.RawSqlStringConstructor -> System.Reflection.ConstructorInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.TagWithMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.ThenIncludeEnumerableMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.ThenIncludeMethodInfo -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.ToLinqToDBTable -> System.Reflection.MethodInfo!
static readonly LinqToDB.EntityFrameworkCore.Internal.ReflectionMethods.ToSql -> System.Reflection.MethodInfo!
virtual LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.Options.get -> LinqToDB.DataOptions!
virtual LinqToDB.EntityFrameworkCore.Internal.LinqToDBOptionsExtension.Options.set -> void
virtual LinqToDB.EntityFrameworkCore.Internal.TransformExpressionVisitor.Transform(LinqToDB.IDataContext? dc, Microsoft.EntityFrameworkCore.Metadata.IModel? model, System.Linq.Expressions.Expression! expression) -> System.Linq.Expressions.Expression!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.ClearCaches() -> void
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateLinqToDBDataProvider(LinqToDB.EntityFrameworkCore.EFProviderInfo! providerInfo, LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo! provInfo, LinqToDB.EntityFrameworkCore.EFConnectionInfo! connectionInfo) -> LinqToDB.DataProvider.IDataProvider!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateLogger(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> Microsoft.Extensions.Logging.ILogger?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel! model, LinqToDB.Metadata.IMetadataReader? metadataReader, Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector? convertorSelector, LinqToDB.DataOptions! dataOptions) -> LinqToDB.Mapping.MappingSchema!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateMetadataReader(Microsoft.EntityFrameworkCore.Metadata.IModel? model, Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider!>? accessor) -> LinqToDB.Metadata.IMetadataReader!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreatePostgreSqlProvider(LinqToDB.DataProvider.PostgreSQL.PostgreSQLVersion version, string? connectionString) -> LinqToDB.DataProvider.IDataProvider!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.CreateSqlServerProvider(LinqToDB.DataProvider.SqlServer.SqlServerVersion version, string? connectionString) -> LinqToDB.DataProvider.IDataProvider!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.DefineConvertors(LinqToDB.Mapping.MappingSchema! mappingSchema, Microsoft.EntityFrameworkCore.Metadata.IModel! model, Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector? convertorSelector, LinqToDB.DataOptions! dataOptions) -> void
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.EnableChangeTracker.get -> bool
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.EnableChangeTracker.set -> void
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.ExtractConnectionInfo(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> LinqToDB.EntityFrameworkCore.EFConnectionInfo!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.ExtractModel(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions? options) -> Microsoft.EntityFrameworkCore.Metadata.IModel?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetContextOptions(Microsoft.EntityFrameworkCore.DbContext? context) -> Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetCurrentContext(System.Linq.IQueryable! query) -> Microsoft.EntityFrameworkCore.DbContext?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetDataProvider(LinqToDB.DataOptions! options, LinqToDB.EntityFrameworkCore.EFProviderInfo! providerInfo, LinqToDB.EntityFrameworkCore.EFConnectionInfo! connectionInfo) -> LinqToDB.DataProvider.IDataProvider!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetLinqToDBProviderInfo(LinqToDB.EntityFrameworkCore.EFProviderInfo! providerInfo) -> LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetLinqToDBProviderInfo(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade! database) -> LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetLinqToDBProviderInfo(Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension! extensions) -> LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetLinqToDBProviderInfo(System.Data.Common.DbConnection! connection) -> LinqToDB.EntityFrameworkCore.LinqToDBProviderInfo?
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.GetMappingSchema(Microsoft.EntityFrameworkCore.Metadata.IModel! model, LinqToDB.Metadata.IMetadataReader? metadataReader, Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector? convertorSelector, LinqToDB.DataOptions? dataOptions) -> LinqToDB.Mapping.MappingSchema!
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.LogConnectionTrace(LinqToDB.Data.TraceInfo! info, Microsoft.Extensions.Logging.ILogger! logger) -> void
virtual LinqToDB.EntityFrameworkCore.LinqToDBForEFToolsImplDefault.TransformExpression(System.Linq.Expressions.Expression! expression, LinqToDB.IDataContext? dc, Microsoft.EntityFrameworkCore.DbContext? ctx, Microsoft.EntityFrameworkCore.Metadata.IModel? model, bool isQueryExpression) -> System.Linq.Expressions.Expression!
