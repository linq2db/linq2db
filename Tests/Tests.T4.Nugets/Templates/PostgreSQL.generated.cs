//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1573, 1591

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;

using NpgsqlTypes;

namespace PostgreSQL
{
	public partial class TestdataDB : LinqToDB.Data.DataConnection
	{
		#region Tables

		public ITable<AllType>                  AllTypes                  { get { return this.GetTable<AllType>(); } }
		public ITable<Child>                    Children                  { get { return this.GetTable<Child>(); } }
		public ITable<CollatedTable>            CollatedTables            { get { return this.GetTable<CollatedTable>(); } }
		public ITable<Doctor>                   Doctors                   { get { return this.GetTable<Doctor>(); } }
		public ITable<Entity>                   Entities                  { get { return this.GetTable<Entity>(); } }
		public ITable<GrandChild>               GrandChildren             { get { return this.GetTable<GrandChild>(); } }
		public ITable<InheritanceChild>         InheritanceChildren       { get { return this.GetTable<InheritanceChild>(); } }
		public ITable<InheritanceParent>        InheritanceParents        { get { return this.GetTable<InheritanceParent>(); } }
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                Issue2023                 { get { return this.GetTable<Issue2023>(); } }
		public ITable<LinqDataType>             LinqDataTypes             { get { return this.GetTable<LinqDataType>(); } }
		public ITable<MultitenantTable>         MultitenantTables         { get { return this.GetTable<MultitenantTable>(); } }
		public ITable<Parent>                   Parents                   { get { return this.GetTable<Parent>(); } }
		public ITable<Patient>                  Patients                  { get { return this.GetTable<Patient>(); } }
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                   People                    { get { return this.GetTable<Person>(); } }
		public ITable<SameName>                 SameNames                 { get { return this.GetTable<SameName>(); } }
		public ITable<SameName1>                SameName1                 { get { return this.GetTable<SameName1>(); } }
		public ITable<SameName2>                SameName2                 { get { return this.GetTable<SameName2>(); } }
		public ITable<SequenceCustomNamingTest> SequenceCustomNamingTests { get { return this.GetTable<SequenceCustomNamingTest>(); } }
		public ITable<SequenceTest1>            SequenceTest1             { get { return this.GetTable<SequenceTest1>(); } }
		public ITable<SequenceTest2>            SequenceTest2             { get { return this.GetTable<SequenceTest2>(); } }
		public ITable<SequenceTest3>            SequenceTest3             { get { return this.GetTable<SequenceTest3>(); } }
		public ITable<TestIdentity>             TestIdentities            { get { return this.GetTable<TestIdentity>(); } }
		public ITable<TestMerge1>               TestMerge1                { get { return this.GetTable<TestMerge1>(); } }
		public ITable<TestMerge2>               TestMerge2                { get { return this.GetTable<TestMerge2>(); } }
		public ITable<TestMergeIdentity>        TestMergeIdentities       { get { return this.GetTable<TestMergeIdentity>(); } }
		public ITable<Testsamename>             Testsamenames             { get { return this.GetTable<Testsamename>(); } }

		#endregion

		partial void InitMappingSchema()
		{
			MappingSchema.SetConvertExpression<object[], TestFunctionParametersResult>(tuple => new TestFunctionParametersResult() { param2 = (int?)tuple[0], param3 = (int?)tuple[1] });
		}

		#region Schemas

		public test_schemaSchema.DataContext test_schema { get; set; }
		public SchemaNameSchema.DataContext  SchemaName  { get; set; }

		public void InitSchemas()
		{
			test_schema = new test_schemaSchema.DataContext(this);
			SchemaName  = new SchemaNameSchema. DataContext(this);
		}

		#endregion

		#region .ctor

		public TestdataDB()
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public TestdataDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public TestdataDB(DataOptions options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		public TestdataDB(DataOptions<TestdataDB> options)
			: base(options.Options)
		{
			InitSchemas();
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#endregion

		#region Table Functions

		#region GetParentByID

		[Sql.TableFunction(Schema="public", Name="GetParentByID")]
		public ITable<Parent> GetParentByID(int? id)
		{
			return this.TableFromExpression(() => GetParentByID(id));
		}

		#endregion

		#region TestTableFunction

		[Sql.TableFunction(Schema="public", Name="TestTableFunction")]
		public ITable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.TableFromExpression(() => TestTableFunction(param1));
		}

		public partial class TestTableFunctionResult
		{
			[Column("param2")] public int? Param2 { get; set; }
		}

		#endregion

		#region TestTableFunction1

		[Sql.TableFunction(Schema="public", Name="TestTableFunction1")]
		public ITable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.TableFromExpression(() => TestTableFunction1(param1, param2));
		}

		public partial class TestTableFunction1Result
		{
			[Column("param3")] public int? Param3 { get; set; }
			[Column("param4")] public int? Param4 { get; set; }
		}

		#endregion

		#region TestTableFunctionSchema

		[Sql.TableFunction(Schema="public", Name="TestTableFunctionSchema")]
		public ITable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.TableFromExpression(() => TestTableFunctionSchema());
		}

		public partial class TestTableFunctionSchemaResult
		{
			                                public int?                         ID                  { get; set; }
			[Column("bigintDataType")     ] public long?                        BigintDataType      { get; set; }
			[Column("numericDataType")    ] public decimal?                     NumericDataType     { get; set; }
			[Column("smallintDataType")   ] public short?                       SmallintDataType    { get; set; }
			[Column("intDataType")        ] public int?                         IntDataType         { get; set; }
			[Column("moneyDataType")      ] public decimal?                     MoneyDataType       { get; set; }
			[Column("doubleDataType")     ] public double?                      DoubleDataType      { get; set; }
			[Column("realDataType")       ] public float?                       RealDataType        { get; set; }
			[Column("timestampDataType")  ] public DateTime?                    TimestampDataType   { get; set; }
			[Column("timestampTZDataType")] public DateTimeOffset?              TimestampTZDataType { get; set; }
			[Column("dateDataType")       ] public DateTime?                    DateDataType        { get; set; }
			[Column("timeDataType")       ] public TimeSpan?                    TimeDataType        { get; set; }
			[Column("timeTZDataType")     ] public DateTimeOffset?              TimeTZDataType      { get; set; }
			[Column("intervalDataType")   ] public TimeSpan?                    IntervalDataType    { get; set; }
			[Column("intervalDataType2")  ] public TimeSpan?                    IntervalDataType2   { get; set; }
			[Column("charDataType")       ] public char?                        CharDataType        { get; set; }
			[Column("char20DataType")     ] public string                       Char20DataType      { get; set; }
			[Column("varcharDataType")    ] public string                       VarcharDataType     { get; set; }
			[Column("textDataType")       ] public string                       TextDataType        { get; set; }
			[Column("binaryDataType")     ] public byte[]                       BinaryDataType      { get; set; }
			[Column("uuidDataType")       ] public Guid?                        UuidDataType        { get; set; }
			[Column("bitDataType")        ] public BitArray                     BitDataType         { get; set; }
			[Column("booleanDataType")    ] public bool?                        BooleanDataType     { get; set; }
			[Column("colorDataType")      ] public string                       ColorDataType       { get; set; }
			[Column("pointDataType")      ] public NpgsqlPoint?                 PointDataType       { get; set; }
			[Column("lsegDataType")       ] public NpgsqlLSeg?                  LsegDataType        { get; set; }
			[Column("boxDataType")        ] public NpgsqlBox?                   BoxDataType         { get; set; }
			[Column("pathDataType")       ] public NpgsqlPath?                  PathDataType        { get; set; }
			[Column("polygonDataType")    ] public NpgsqlPolygon?               PolygonDataType     { get; set; }
			[Column("circleDataType")     ] public NpgsqlCircle?                CircleDataType      { get; set; }
			[Column("lineDataType")       ] public NpgsqlLine?                  LineDataType        { get; set; }
			[Column("inetDataType")       ] public IPAddress                    InetDataType        { get; set; }
			[Column("cidrDataType")       ] public ValueTuple<IPAddress, byte>? CidrDataType        { get; set; }
			[Column("macaddrDataType")    ] public PhysicalAddress              MacaddrDataType     { get; set; }
			[Column("macaddr8DataType")   ] public PhysicalAddress              Macaddr8DataType    { get; set; }
			[Column("jsonDataType")       ] public string                       JsonDataType        { get; set; }
			[Column("jsonbDataType")      ] public string                       JsonbDataType       { get; set; }
			[Column("xmlDataType")        ] public string                       XmlDataType         { get; set; }
			[Column("varBitDataType")     ] public BitArray                     VarBitDataType      { get; set; }
			[Column("strarray")           ] public string[]                     Strarray            { get; set; }
			[Column("intarray")           ] public int[]                        Intarray            { get; set; }
			[Column("int2darray")         ] public int[]                        Int2darray          { get; set; }
			[Column("longarray")          ] public long[]                       Longarray           { get; set; }
			[Column("intervalarray")      ] public TimeSpan[]                   Intervalarray       { get; set; }
			[Column("doublearray")        ] public double[]                     Doublearray         { get; set; }
			[Column("numericarray")       ] public decimal[]                    Numericarray        { get; set; }
			[Column("decimalarray")       ] public decimal[]                    Decimalarray        { get; set; }
		}

		#endregion

		#endregion
	}

	public partial class TestFunctionParametersResult
	{
		public int? param2 { get; set; }

		public int? param3 { get; set; }
	}

	[Table(Schema="public", Name="AllTypes")]
	public partial class AllType
	{
		[Column(),                      PrimaryKey, Identity] public int                          ID                  { get; set; } // integer
		[Column("bigintDataType"),      Nullable            ] public long?                        BigintDataType      { get; set; } // bigint
		[Column("numericDataType"),     Nullable            ] public decimal?                     NumericDataType     { get; set; } // numeric
		[Column("smallintDataType"),    Nullable            ] public short?                       SmallintDataType    { get; set; } // smallint
		[Column("intDataType"),         Nullable            ] public int?                         IntDataType         { get; set; } // integer
		[Column("moneyDataType"),       Nullable            ] public decimal?                     MoneyDataType       { get; set; } // money
		[Column("doubleDataType"),      Nullable            ] public double?                      DoubleDataType      { get; set; } // double precision
		[Column("realDataType"),        Nullable            ] public float?                       RealDataType        { get; set; } // real
		[Column("timestampDataType"),   Nullable            ] public DateTime?                    TimestampDataType   { get; set; } // timestamp (6) without time zone
		[Column("timestampTZDataType"), Nullable            ] public DateTimeOffset?              TimestampTZDataType { get; set; } // timestamp (6) with time zone
		[Column("dateDataType"),        Nullable            ] public DateTime?                    DateDataType        { get; set; } // date
		[Column("timeDataType"),        Nullable            ] public TimeSpan?                    TimeDataType        { get; set; } // time without time zone
		[Column("timeTZDataType"),      Nullable            ] public DateTimeOffset?              TimeTZDataType      { get; set; } // time with time zone
		[Column("intervalDataType"),    Nullable            ] public TimeSpan?                    IntervalDataType    { get; set; } // interval
		[Column("intervalDataType2"),   Nullable            ] public TimeSpan?                    IntervalDataType2   { get; set; } // interval
		[Column("charDataType"),        Nullable            ] public char?                        CharDataType        { get; set; } // character(1)
		[Column("char20DataType"),      Nullable            ] public string                       Char20DataType      { get; set; } // character(20)
		[Column("varcharDataType"),     Nullable            ] public string                       VarcharDataType     { get; set; } // character varying(20)
		[Column("textDataType"),        Nullable            ] public string                       TextDataType        { get; set; } // text
		[Column("binaryDataType"),      Nullable            ] public byte[]                       BinaryDataType      { get; set; } // bytea
		[Column("uuidDataType"),        Nullable            ] public Guid?                        UuidDataType        { get; set; } // uuid
		[Column("bitDataType"),         Nullable            ] public BitArray                     BitDataType         { get; set; } // bit(3)
		[Column("booleanDataType"),     Nullable            ] public bool?                        BooleanDataType     { get; set; } // boolean
		[Column("colorDataType"),       Nullable            ] public string                       ColorDataType       { get; set; } // color
		[Column("pointDataType"),       Nullable            ] public NpgsqlPoint?                 PointDataType       { get; set; } // point
		[Column("lsegDataType"),        Nullable            ] public NpgsqlLSeg?                  LsegDataType        { get; set; } // lseg
		[Column("boxDataType"),         Nullable            ] public NpgsqlBox?                   BoxDataType         { get; set; } // box
		[Column("pathDataType"),        Nullable            ] public NpgsqlPath?                  PathDataType        { get; set; } // path
		[Column("polygonDataType"),     Nullable            ] public NpgsqlPolygon?               PolygonDataType     { get; set; } // polygon
		[Column("circleDataType"),      Nullable            ] public NpgsqlCircle?                CircleDataType      { get; set; } // circle
		[Column("lineDataType"),        Nullable            ] public NpgsqlLine?                  LineDataType        { get; set; } // line
		[Column("inetDataType"),        Nullable            ] public IPAddress                    InetDataType        { get; set; } // inet
		[Column("cidrDataType"),        Nullable            ] public ValueTuple<IPAddress, byte>? CidrDataType        { get; set; } // cidr
		[Column("macaddrDataType"),     Nullable            ] public PhysicalAddress              MacaddrDataType     { get; set; } // macaddr
		[Column("macaddr8DataType"),    Nullable            ] public PhysicalAddress              Macaddr8DataType    { get; set; } // macaddr8
		[Column("jsonDataType"),        Nullable            ] public string                       JsonDataType        { get; set; } // json
		[Column("jsonbDataType"),       Nullable            ] public string                       JsonbDataType       { get; set; } // jsonb
		[Column("xmlDataType"),         Nullable            ] public string                       XmlDataType         { get; set; } // xml
		[Column("varBitDataType"),      Nullable            ] public BitArray                     VarBitDataType      { get; set; } // bit varying
		[Column("strarray"),            Nullable            ] public string[]                     Strarray            { get; set; } // text[]
		[Column("intarray"),            Nullable            ] public int[]                        Intarray            { get; set; } // integer[]
		[Column("int2darray"),          Nullable            ] public int[][]                      Int2darray          { get; set; } // integer[][]
		[Column("longarray"),           Nullable            ] public long[]                       Longarray           { get; set; } // bigint[]
		[Column("intervalarray"),       Nullable            ] public TimeSpan[]                   Intervalarray       { get; set; } // interval[]
		[Column("doublearray"),         Nullable            ] public double[]                     Doublearray         { get; set; } // double precision[]
		[Column("numericarray"),        Nullable            ] public decimal[]                    Numericarray        { get; set; } // numeric[]
		[Column("decimalarray"),        Nullable            ] public decimal[]                    Decimalarray        { get; set; } // numeric[]
	}

	[Table(Schema="public", Name="Child")]
	public partial class Child
	{
		[Column, Nullable] public int? ParentID { get; set; } // integer
		[Column, Nullable] public int? ChildID  { get; set; } // integer
	}

	[Table(Schema="public", Name="CollatedTable")]
	public partial class CollatedTable
	{
		[Column, NotNull] public int    Id              { get; set; } // integer
		[Column, NotNull] public string CaseSensitive   { get; set; } // character varying(20)
		[Column, NotNull] public string CaseInsensitive { get; set; } // character varying(20)
	}

	[Table(Schema="public", Name="Doctor")]
	public partial class Doctor
	{
		[PrimaryKey, NotNull] public int    PersonID { get; set; } // integer
		[Column,     NotNull] public string Taxonomy { get; set; } // character varying(50)

		#region Associations

		/// <summary>
		/// Doctor_PersonID_fkey (public.Person)
		/// </summary>
		[Association(ThisKey=nameof(PersonID), OtherKey=nameof(PostgreSQL.Person.PersonID), CanBeNull=false)]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="entity")]
	public partial class Entity
	{
		[Column("the_name"), NotNull] public string TheName { get; set; } // character varying(255)
	}

	[Table(Schema="public", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column, Nullable] public int? ParentID     { get; set; } // integer
		[Column, Nullable] public int? ChildID      { get; set; } // integer
		[Column, Nullable] public int? GrandChildID { get; set; } // integer
	}

	[Table(Schema="public", Name="InheritanceChild")]
	public partial class InheritanceChild
	{
		[PrimaryKey, NotNull    ] public int    InheritanceChildId  { get; set; } // integer
		[Column,     NotNull    ] public int    InheritanceParentId { get; set; } // integer
		[Column,        Nullable] public int?   TypeDiscriminator   { get; set; } // integer
		[Column,        Nullable] public string Name                { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="InheritanceParent")]
	public partial class InheritanceParent
	{
		[PrimaryKey, NotNull    ] public int    InheritanceParentId { get; set; } // integer
		[Column,        Nullable] public int?   TypeDiscriminator   { get; set; } // integer
		[Column,        Nullable] public string Name                { get; set; } // character varying(50)
	}

	/// <summary>
	/// This is the Issue2023 matview
	/// </summary>
	[Table(Schema="public", Name="Issue2023", IsView=true)]
	public partial class Issue2023
	{
		/// <summary>
		/// This is the Issue2023.PersonID column
		/// </summary>
		[Column(SkipOnInsert=true, SkipOnUpdate=true), Nullable] public int?   PersonID   { get; set; } // integer
		[Column(SkipOnInsert=true, SkipOnUpdate=true), Nullable] public string FirstName  { get; set; } // character varying(50)
		[Column(SkipOnInsert=true, SkipOnUpdate=true), Nullable] public string LastName   { get; set; } // character varying(50)
		[Column(SkipOnInsert=true, SkipOnUpdate=true), Nullable] public string MiddleName { get; set; } // character varying(50)
		[Column(SkipOnInsert=true, SkipOnUpdate=true), Nullable] public char?  Gender     { get; set; } // character(1)
	}

	[Table(Schema="public", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column, Nullable] public int?      ID             { get; set; } // integer
		[Column, Nullable] public decimal?  MoneyValue     { get; set; } // numeric(10,4)
		[Column, Nullable] public DateTime? DateTimeValue  { get; set; } // timestamp (6) without time zone
		[Column, Nullable] public DateTime? DateTimeValue2 { get; set; } // timestamp (6) without time zone
		[Column, Nullable] public bool?     BoolValue      { get; set; } // boolean
		[Column, Nullable] public Guid?     GuidValue      { get; set; } // uuid
		[Column, Nullable] public byte[]    BinaryValue    { get; set; } // bytea
		[Column, Nullable] public short?    SmallIntValue  { get; set; } // smallint
		[Column, Nullable] public int?      IntValue       { get; set; } // integer
		[Column, Nullable] public long?     BigIntValue    { get; set; } // bigint
		[Column, Nullable] public string    StringValue    { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="multitenant_table")]
	public partial class MultitenantTable
	{
		[Column("tenantid",    SkipOnUpdate=true), PrimaryKey(1), NotNull] public Guid     Tenantid    { get; set; } // uuid
		[Column("id",          SkipOnUpdate=true), PrimaryKey(2), NotNull] public Guid     Id          { get; set; } // uuid
		[Column("name",        SkipOnUpdate=true),    Nullable           ] public string   Name        { get; set; } // character varying(100)
		[Column("description", SkipOnUpdate=true),    Nullable           ] public string   Description { get; set; } // text
		[Column("createdat",   SkipOnUpdate=true),                NotNull] public DateTime Createdat   { get; set; } // timestamp (6) without time zone
	}

	[Table(Schema="public", Name="Parent")]
	public partial class Parent
	{
		[Column, Nullable] public int? ParentID { get; set; } // integer
		[Column, Nullable] public int? Value1   { get; set; } // integer
	}

	[Table(Schema="public", Name="Patient")]
	public partial class Patient
	{
		[PrimaryKey, NotNull] public int    PersonID  { get; set; } // integer
		[Column,     NotNull] public string Diagnosis { get; set; } // character varying(256)

		#region Associations

		/// <summary>
		/// Patient_PersonID_fkey (public.Person)
		/// </summary>
		[Association(ThisKey=nameof(PersonID), OtherKey=nameof(PostgreSQL.Person.PersonID), CanBeNull=false)]
		public Person Person { get; set; }

		#endregion
	}

	/// <summary>
	/// This is the Person table
	/// </summary>
	[Table(Schema="public", Name="Person")]
	public partial class Person
	{
		/// <summary>
		/// This is the Person.PersonID column
		/// </summary>
		[PrimaryKey, Identity   ] public int    PersonID   { get; set; } // integer
		[Column,     NotNull    ] public string FirstName  { get; set; } // character varying(50)
		[Column,     NotNull    ] public string LastName   { get; set; } // character varying(50)
		[Column,        Nullable] public string MiddleName { get; set; } // character varying(50)
		[Column,     NotNull    ] public char   Gender     { get; set; } // character(1)

		#region Associations

		/// <summary>
		/// Doctor_PersonID_fkey_BackReference (public.Doctor)
		/// </summary>
		[Association(ThisKey=nameof(PersonID), OtherKey=nameof(PostgreSQL.Doctor.PersonID), CanBeNull=true)]
		public Doctor DoctorPersonIDfkey { get; set; }

		/// <summary>
		/// Patient_PersonID_fkey_BackReference (public.Patient)
		/// </summary>
		[Association(ThisKey=nameof(PersonID), OtherKey=nameof(PostgreSQL.Patient.PersonID), CanBeNull=true)]
		public Patient PatientPersonIDfkey { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="same_name")]
	public partial class SameName
	{
		[Column("id"), PrimaryKey, NotNull] public int Id { get; set; } // integer

		#region Associations

		/// <summary>
		/// same_name_BackReference (public.same_name2)
		/// </summary>
		[Association(ThisKey=nameof(Id), OtherKey=nameof(PostgreSQL.SameName2.SameName), CanBeNull=true)]
		public IEnumerable<SameName2> SameNameBackReferences { get; set; }

		/// <summary>
		/// same_name_BackReference (public.same_name1)
		/// </summary>
		[Association(ThisKey=nameof(Id), OtherKey=nameof(PostgreSQL.SameName1.SameName), CanBeNull=true)]
		public IEnumerable<SameName1> Samenames { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="same_name1")]
	public partial class SameName1
	{
		[Column("id"),        PrimaryKey,  NotNull] public int  Id       { get; set; } // integer
		[Column("same_name"),    Nullable         ] public int? SameName { get; set; } // integer

		#region Associations

		/// <summary>
		/// same_name (public.same_name)
		/// </summary>
		[Association(ThisKey=nameof(SameName), OtherKey=nameof(PostgreSQL.SameName.Id), CanBeNull=true)]
		public SameName Samename { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="same_name2")]
	public partial class SameName2
	{
		[Column("id"),        PrimaryKey,  NotNull] public int  Id       { get; set; } // integer
		[Column("same_name"),    Nullable         ] public int? SameName { get; set; } // integer

		#region Associations

		/// <summary>
		/// same_name (public.same_name)
		/// </summary>
		[Association(ThisKey=nameof(SameName), OtherKey=nameof(PostgreSQL.SameName.Id), CanBeNull=true)]
		public SameName Samename { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="SequenceCustomNamingTest")]
	public partial class SequenceCustomNamingTest
	{
		[PrimaryKey, Identity] public int    ID    { get; set; } // integer
		[Column,     Nullable] public string Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest1")]
	public partial class SequenceTest1
	{
		[PrimaryKey, NotNull    ] public int    ID    { get; set; } // integer
		[Column,        Nullable] public string Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest2")]
	public partial class SequenceTest2
	{
		[PrimaryKey, Identity] public int    ID    { get; set; } // integer
		[Column,     Nullable] public string Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest3")]
	public partial class SequenceTest3
	{
		[PrimaryKey, Identity] public int    ID    { get; set; } // integer
		[Column,     Nullable] public string Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[PrimaryKey, Identity] public int ID { get; set; } // integer
	}

	[Table(Schema="public", Name="TestMerge1")]
	public partial class TestMerge1
	{
		[PrimaryKey, NotNull    ] public int             Id              { get; set; } // integer
		[Column,        Nullable] public int?            Field1          { get; set; } // integer
		[Column,        Nullable] public int?            Field2          { get; set; } // integer
		[Column,        Nullable] public int?            Field3          { get; set; } // integer
		[Column,        Nullable] public int?            Field4          { get; set; } // integer
		[Column,        Nullable] public int?            Field5          { get; set; } // integer
		[Column,        Nullable] public long?           FieldInt64      { get; set; } // bigint
		[Column,        Nullable] public bool?           FieldBoolean    { get; set; } // boolean
		[Column,        Nullable] public string          FieldString     { get; set; } // character varying(20)
		[Column,        Nullable] public string          FieldNString    { get; set; } // character varying(20)
		[Column,        Nullable] public char?           FieldChar       { get; set; } // character(1)
		[Column,        Nullable] public char?           FieldNChar      { get; set; } // character(1)
		[Column,        Nullable] public float?          FieldFloat      { get; set; } // real
		[Column,        Nullable] public double?         FieldDouble     { get; set; } // double precision
		[Column,        Nullable] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column,        Nullable] public byte[]          FieldBinary     { get; set; } // bytea
		[Column,        Nullable] public Guid?           FieldGuid       { get; set; } // uuid
		[Column,        Nullable] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column,        Nullable] public DateTime?       FieldDate       { get; set; } // date
		[Column,        Nullable] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column,        Nullable] public string          FieldEnumString { get; set; } // character varying(20)
		[Column,        Nullable] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table(Schema="public", Name="TestMerge2")]
	public partial class TestMerge2
	{
		[PrimaryKey, NotNull    ] public int             Id              { get; set; } // integer
		[Column,        Nullable] public int?            Field1          { get; set; } // integer
		[Column,        Nullable] public int?            Field2          { get; set; } // integer
		[Column,        Nullable] public int?            Field3          { get; set; } // integer
		[Column,        Nullable] public int?            Field4          { get; set; } // integer
		[Column,        Nullable] public int?            Field5          { get; set; } // integer
		[Column,        Nullable] public long?           FieldInt64      { get; set; } // bigint
		[Column,        Nullable] public bool?           FieldBoolean    { get; set; } // boolean
		[Column,        Nullable] public string          FieldString     { get; set; } // character varying(20)
		[Column,        Nullable] public string          FieldNString    { get; set; } // character varying(20)
		[Column,        Nullable] public char?           FieldChar       { get; set; } // character(1)
		[Column,        Nullable] public char?           FieldNChar      { get; set; } // character(1)
		[Column,        Nullable] public float?          FieldFloat      { get; set; } // real
		[Column,        Nullable] public double?         FieldDouble     { get; set; } // double precision
		[Column,        Nullable] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column,        Nullable] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column,        Nullable] public byte[]          FieldBinary     { get; set; } // bytea
		[Column,        Nullable] public Guid?           FieldGuid       { get; set; } // uuid
		[Column,        Nullable] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column,        Nullable] public DateTime?       FieldDate       { get; set; } // date
		[Column,        Nullable] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column,        Nullable] public string          FieldEnumString { get; set; } // character varying(20)
		[Column,        Nullable] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table(Schema="public", Name="TestMergeIdentity")]
	public partial class TestMergeIdentity
	{
		[PrimaryKey, Identity] public int  Id    { get; set; } // integer
		[Column,     Nullable] public int? Field { get; set; } // integer
	}

	[Table(Schema="public", Name="testsamename")]
	public partial class Testsamename
	{
		[Column("id"), PrimaryKey, Identity] public int Id { get; set; } // integer
	}

	public static partial class SqlFunctions
	{
		#region AddIfNotExists

		[Sql.Function(Name="public.add_if_not_exists", ServerSideOnly=true)]
		public static object AddIfNotExists(string pName)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Addissue792record

		[Sql.Function(Name="public.addissue792record", ServerSideOnly=true)]
		public static object Addissue792record()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bool

		[Sql.Function(Name="public.bool", ServerSideOnly=true)]
		public static string Bool(int? param)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Date

		[Sql.Function(Name="public.issue_1742_date", ServerSideOnly=true)]
		public static int? Issue1742Date(DateTime? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Ts

		[Sql.Function(Name="public.issue_1742_ts", ServerSideOnly=true)]
		public static int? Issue1742Ts(DateTime? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Tstz

		[Sql.Function(Name="public.issue_1742_tstz", ServerSideOnly=true)]
		public static int? Issue1742Tstz(DateTimeOffset? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overloads

		[Sql.Function(Name="public.overloads", ServerSideOnly=true)]
		public static short? Overloads(int? input1, int? input2)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reverse

		[Sql.Function(Name="public.reverse", ServerSideOnly=true)]
		public static string Reverse(string par11)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestAvg

		[Sql.Function(Name="public.test_avg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par13)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestFunctionParameters

		[Sql.Function(Name="public.\"TestFunctionParameters\"", ServerSideOnly=true)]
		public static TestFunctionParametersResult TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestScalarFunction

		[Sql.Function(Name="public.\"TestScalarFunction\"", ServerSideOnly=true)]
		public static string TestScalarFunction(int? param)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestSingleOutParameterFunction

		[Sql.Function(Name="public.\"TestSingleOutParameterFunction\"", ServerSideOnly=true)]
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AllType Find(this ITable<AllType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static InheritanceChild Find(this ITable<InheritanceChild> table, int InheritanceChildId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceChildId == InheritanceChildId);
		}

		public static InheritanceParent Find(this ITable<InheritanceParent> table, int InheritanceParentId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceParentId == InheritanceParentId);
		}

		public static MultitenantTable Find(this ITable<MultitenantTable> table, Guid Tenantid, Guid Id)
		{
			return table.FirstOrDefault(t =>
				t.Tenantid == Tenantid &&
				t.Id       == Id);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static SameName Find(this ITable<SameName> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SameName1 Find(this ITable<SameName1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SameName2 Find(this ITable<SameName2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static SequenceCustomNamingTest Find(this ITable<SequenceCustomNamingTest> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest1 Find(this ITable<SequenceTest1> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest2 Find(this ITable<SequenceTest2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest3 Find(this ITable<SequenceTest3> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestMerge1 Find(this ITable<TestMerge1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMerge2 Find(this ITable<TestMerge2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMergeIdentity Find(this ITable<TestMergeIdentity> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Testsamename Find(this ITable<Testsamename> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}

	public static partial class test_schemaSchema
	{
		public partial class DataContext
		{
			public ITable<Testsamename>       Testsamenames        { get { return _dataContext.GetTable<Testsamename>(); } }
			public ITable<TestSchemaIdentity> TestSchemaIdentities { get { return _dataContext.GetTable<TestSchemaIdentity>(); } }
			public ITable<Testserialidentity> Testserialidentities { get { return _dataContext.GetTable<Testserialidentity>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Schema="test_schema", Name="testsamename")]
		public partial class Testsamename
		{
			[Column("id"), PrimaryKey, Identity] public int Id { get; set; } // integer
		}

		[Table(Schema="test_schema", Name="TestSchemaIdentity")]
		public partial class TestSchemaIdentity
		{
			[PrimaryKey, Identity] public int ID { get; set; } // integer
		}

		[Table(Schema="test_schema", Name="testserialidentity")]
		public partial class Testserialidentity
		{
			[PrimaryKey, Identity] public int ID { get; set; } // integer
		}

		#region Table Extensions

		public static Testsamename Find(this ITable<Testsamename> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestSchemaIdentity Find(this ITable<TestSchemaIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Testserialidentity Find(this ITable<Testserialidentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		#endregion
	}

	public static partial class SchemaNameSchema
	{
		public partial class DataContext
		{

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		public static partial class SqlFunctions
		{
			#region FnTest

			[Sql.Function(Name="\"SchemaName\".\"fnTest\"", ServerSideOnly=true)]
			public static string FnTest(int? param)
			{
				throw new InvalidOperationException();
			}

			#endregion
		}
	}
}
