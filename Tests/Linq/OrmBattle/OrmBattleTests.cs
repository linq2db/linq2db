//------------------------------------------------------------------------------
// <auto-generated>
//     Copyright (C) 2009-2010 ORMBattle.NET.
//     All rights reserved.
//     For conditions of distribution and use, see license.
//     Created by: Alexis Kochetov
//     Created:    2009.07.31
//     Updated by: Svyatoslav Danyliv
//     Updated:    2015.12.14
//
//     This file is generated from LinqTests.tt
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using LinqToDB.Data;
using NUnit.Framework;
using Tests.Model;
using Tests.OrmBattle.Helper;
using static Tests.Model.Northwind;
using LinqToDB;

namespace Tests.OrmBattle
{
	[TestFixture]
	public class OrmBattleTests : TestBase
	{
		private const double doubleDelta = 1E-9;
		private string _currentContext;
		protected NorthwindDB db;

		protected void Setup(string context)
		{
			if (_currentContext == context)
				return;

			using (db)
				db = null;

			using (new DisableLogging())
			{
				// LinqToDB.Common.Configuration.Linq.AllowMultipleQuery = true;
				db = new NorthwindDB(context);

				Customers = db.Customer.ToList();
				Employees = db.Employee.ToList();
				Order = db.Order.ToList();
				Products = db.Product.ToList();

				foreach (var o in Order)
				{
					o.Customer = Customers.SingleOrDefault(c => c.CustomerID == o.CustomerID);
					o.Employee = Employees.SingleOrDefault(e => e.EmployeeID == o.EmployeeID);
				}

				foreach (var c in Customers)
					c.Orders = Order.Where(o => c.CustomerID == o.CustomerID).ToList();
			}

			_currentContext = context;
		}

		[TearDown]
		protected void TearDown()
		{
			LinqToDB.Common.Configuration.Linq.AllowMultipleQuery = false;
			_currentContext = null;
			using (db)
				db = null;
		}
#pragma warning disable 0169
		List<Northwind.Customer> Customers;
		List<Northwind.Employee> Employees;
		List<Northwind.Order> Order;
		List<Northwind.Product> Products;
//		List<Northwind.Category> Categories;
//		List<Northwind.Supplier> Suppliers;
//		List<Northwind.Product> DiscontinuedProducts;
//		List<Northwind.OrderDetail> OrderDetails;
#pragma warning restore 0169
		// DTO for testing purposes.
		public class OrderDTO
		{
			public int Id { get; set; }
			public string CustomerId { get; set; }
			public DateTime? OrderDate { get; set; }
		}

		#region Filtering tests

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where o.ShipCity == "Seattle"
				select o;
			var expected = from o in Order
				where o.ShipCity == "Seattle"
				select o;
			var list = result.ToList();
			Assert.AreEqual(14, list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereParameterTest(string context)
		{
			Setup(context);
			var city = "Seattle";
			var result = from o in db.Order
				where o.ShipCity == city
				select o;
			var expected = from o in Order
				where o.ShipCity == city
				select o;
			var list = result.ToList();
			Assert.AreEqual(14, list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());

			city = "Rio de Janeiro";
			list = result.ToList();
			Assert.AreEqual(34, list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereConditionsTest(string context)
		{
			Setup(context);
			var result = from p in db.Product
				where p.UnitsInStock < p.ReorderLevel && p.UnitsOnOrder == 0
				select p;
			var list = result.ToList();
			Assert.AreEqual(1, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereNullTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where o.ShipRegion == null
				select o;
			var list = result.ToList();
			Assert.AreEqual(507, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereNullParameterTest(string context)
		{
			Setup(context);
			string region = null;
			var result = from o in db.Order
				where o.ShipRegion == region
				select o;
			var list = result.ToList();
			Assert.AreEqual(507, list.Count);

			region = "WA";
			list = result.ToList();
			Assert.AreEqual(19, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereNullableTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where !o.ShippedDate.HasValue
				select o;
			var list = result.ToList();
			Assert.AreEqual(21, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereNullableParameterTest(string context)
		{
			Setup(context);
			DateTime? shippedDate = null;
			var result = from o in db.Order
				where o.ShippedDate == shippedDate
				select o;
			var list = result.ToList();
			Assert.AreEqual(21, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereCoalesceTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where (o.ShipRegion ?? "N/A") == "N/A"
				select o;
			var list = result.ToList();
			Assert.AreEqual(507, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereConditionalTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where (o.ShipCity == "Seattle" ? "Home" : "Other") == "Home"
				select o;
			var list = result.ToList();
			Assert.AreEqual(14, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereConditionalBooleanTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				where o.ShipCity == "Seattle" ? true : false
				select o;
			var list = result.ToList();
			Assert.AreEqual(14, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereAnonymousParameterTest(string context)
		{
			Setup(context);
			var cityRegion = new {City = "Seattle", Region = "WA"};
			var result = from o in db.Order
				where new {City = o.ShipCity, Region = o.ShipRegion} == cityRegion
				select o;
			var list = result.ToList();
			Assert.AreEqual(14, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Filtering")]
		public void WhereEntityParameterTest(string context)
		{
			Setup(context);
			var order = db.Order.OrderBy(o => o.OrderDate).First();
			var result = from o in db.Order
				where o == order
				select o;
			var list = result.ToList();
			Assert.AreEqual(1, list.Count);
			Assert.AreEqual(order, list[0]);
			//Assert.AreSame(order, list[0]);
		}

		#endregion

		#region Projection tests

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				select o.ShipRegion;
			var expected = from o in Order
				select o.ShipRegion;
			var list = result.ToList();
			Assert.AreEqual(expected.Count(), list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectBooleanTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				select o.ShipRegion == "WA";
			var expected = from o in Order
				select o.ShipRegion == "WA";
			var list = result.ToList();
			Assert.AreEqual(expected.Count(), list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectCalculatedTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				select o.Freight * 1000;
			var expected = from o in Order
				select o.Freight * 1000;
			var list = result.ToList();
			var expectedList = expected.ToList();
			list.Sort();
			expectedList.Sort();

			// Assert.AreEqual(expectedList.Count, list.Count);
			// expectedList.Zip(list, (i, j) => {
			//                       Assert.AreEqual(i,j);
			//                       return true;
			//                     });
			CollectionAssert.AreEquivalent(expectedList, list);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectNestedCalculatedTest(string context)
		{
			Setup(context);
			var result = from r in
				from o in db.Order
				select o.Freight * 1000
				where r > 100000
				select r / 1000;
			var expected = from o in Order
				where o.Freight > 100
				select o.Freight;
			var list = result.ToList();
			var expectedList = expected.ToList();
			list.Sort();
			expectedList.Sort();
			Assert.AreEqual(187, list.Count);
			// Assert.AreEqual(expectedList.Count, list.Count);
			// expectedList.Zip(list, (i, j) => {
			//                       Assert.AreEqual(i,j);
			//                       return true;
			//                     });
			CollectionAssert.AreEquivalent(expectedList, list);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectAnonymousTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				select new {OrderID = o.OrderID, o.OrderDate, o.Freight};
			var expected = from o in Order
				select new {OrderID = o.OrderID, o.OrderDate, o.Freight};
			var list = result.ToList();
			Assert.AreEqual(expected.Count(), list.Count);
			Assert.AreEqual(0, expected.Except(list).Count());
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("WindowsOnly")]
		public void SelectSubqueryTest(string context)
		{
			using (new AllowMultipleQuery())
			{
				Setup(context);
				Assert.AreNotEqual(db.GetType().FullName, "OrmBattle.EF7Model.NorthwindContext",
					"EF7 has infinite loop here");

				var result = from o in db.Order
					select db.Customer.Where(c => c.CustomerID == o.Customer.CustomerID);
				var expected = from o in Order
					select Customers.Where(c => c.CustomerID == o.Customer.CustomerID);
				var list = result.ToList();

				var expectedList = expected.ToList();
				CollectionAssert.AreEquivalent(expectedList, list);

				//Assert.AreEqual(expected.Count(), list.Count);
				//expected.Zip(result, (expectedCustomers, actualCustomers) => {
				//                       Assert.AreEqual(expectedCustomers.Count(), actualCustomers.Count());
				//                       Assert.AreEqual(0, expectedCustomers.Except(actualCustomers));
				//                       return true;
				//                     });
			}
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectDtoTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				select new OrderDTO {Id = o.OrderID, CustomerId = o.Customer.CustomerID, OrderDate = o.OrderDate};
			var list = result.ToList();
			Assert.AreEqual(Order.Count(), list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectNestedDtoTest(string context)
		{
			Setup(context);
			var result = from r in
				from o in db.Order
				select new OrderDTO {Id = o.OrderID, CustomerId = o.Customer.CustomerID, OrderDate = o.OrderDate}
				where r.OrderDate > new DateTime(1998, 01, 01)
				select r;
			var list = result.ToList();
			Assert.AreEqual(267, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectManyAnonymousTest(string context)
		{
			Setup(context);
			var result = from c in db.Customer
				from o in c.Orders
				where o.Freight < 500.00M
				select new {CustomerId = c.CustomerID, o.OrderID, o.Freight};
			var list = result.ToList();
			Assert.AreEqual(817, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectManyLetTest(string context)
		{
			Setup(context);
			var result = from c in db.Customer
				from o in c.Orders
				let freight = o.Freight
				where freight < 500.00M
				select new {CustomerId = c.CustomerID, o.OrderID, freight};
			var list = result.ToList();
			Assert.AreEqual(817, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectManyGroupByTest(string context)
		{
			Setup(context);
			var result = db.Order
				.GroupBy(o => o.Customer)
				.Where(g => g.Count() > 20)
				.SelectMany(g => g.Select(o => o.Customer));

			var list = result.ToList();
			Assert.AreEqual(89, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectManyOuterProjectionTest(string context)
		{
			Setup(context);
			var result = db.Customer.SelectMany(i => i.Orders.Select(t => i));

			var list = result.ToList();
			Assert.AreEqual(830, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Projections")]
		public void SelectManyLeftJoinTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				from o in c.Orders.Select(o => new {o.OrderID, c.CompanyName}).DefaultIfEmpty()
				select new {c.ContactName, o};

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		#endregion

		#region Take / Skip tests

		[Test, NorthwindDataContext]
		[Category("Take/Skip")]
		public void TakeTest(string context)
		{
			Setup(context);
			var result = (from o in db.Order
				orderby o.OrderDate, o.OrderID
				select o).Take(10);
			var expected = (from o in Order
				orderby o.OrderDate, o.OrderID
				select o).Take(10);
			var list = result.ToList();
			Assert.AreEqual(10, list.Count);
			Assert.IsTrue(expected.SequenceEqual(list));
		}

		[Test, NorthwindDataContext]
		[Category("Take/Skip")]
		public void SkipTest(string context)
		{
			Setup(context);
			var result = (from o in db.Order
				orderby o.OrderDate, o.OrderID
				select o).Skip(10);
			var expected = (from o in Order
				orderby o.OrderDate, o.OrderID
				select o).Skip(10);
			var list = result.ToList();
			Assert.AreEqual(820, list.Count);
			Assert.IsTrue(expected.SequenceEqual(list));
		}

		[Test, NorthwindDataContext]
		[Category("Take/Skip")]
		public void TakeSkipTest(string context)
		{
			Setup(context);
			var result = (from o in db.Order
				orderby o.OrderDate, o.OrderID
				select o).Skip(10).Take(10);
			var expected = (from o in Order
				orderby o.OrderDate, o.OrderID
				select o).Skip(10).Take(10);
			var list = result.ToList();
			Assert.AreEqual(10, list.Count);
			Assert.IsTrue(expected.SequenceEqual(list));
		}

		[Test, NorthwindDataContext]
		[Category("Take/Skip")]
		public void TakeNestedTest(string context)
		{
			using (new AllowMultipleQuery())
			{
				Setup(context);
				var result =
					from c in db.Customer
					select new {Customer = c, TopOrder = c.Orders.OrderByDescending(o => o.OrderDate).Take(5)};
				var expected =
					from c in Customers
					select new {Customer = c, TopOrder = c.Orders.OrderByDescending(o => o.OrderDate).Take(5)};
				var list = result.ToList();
				Assert.AreEqual(expected.Count(), list.Count);
				foreach (var anonymous in list)
				{
					var count = anonymous.TopOrder.ToList().Count;
					Assert.GreaterOrEqual(count, 0);
					Assert.LessOrEqual(count, 5);
				}
			}
		}

		[Test, NorthwindDataContext]
		[Category("Take/Skip")]
		public void ComplexTakeSkipTest(string context)
		{
			Setup(context);
			var original = db.Order.ToList()
				.OrderBy(o => o.OrderDate)
				.Skip(100)
				.Take(50)
				.OrderBy(o => o.RequiredDate)
				.Where(o => o.OrderDate != null)
				.Select(o => o.RequiredDate)
				.Distinct()
				.OrderByDescending(_ => _)
				.Skip(10);
			var result = db.Order
				.OrderBy(o => o.OrderDate)
				.Skip(100)
				.Take(50)
				.OrderBy(o => o.RequiredDate)
				.Where(o => o.OrderDate != null)
				.Select(o => o.RequiredDate)
				.Distinct()
				.OrderByDescending(_ => _)
				.Skip(10);
			var originalList = original.ToList();
			var resultList = result.ToList();
			Assert.AreEqual(originalList.Count, resultList.Count);
			Assert.IsTrue(originalList.SequenceEqual(resultList));
		}

		#endregion

		#region Ordering tests

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				orderby o.OrderDate, o.ShippedDate descending, o.OrderID
				select o;
			var expected =
				from o in Order
				orderby o.OrderDate, o.ShippedDate descending, o.OrderID
				select o;

			var list = result.ToList();
			var expectedList = expected.ToList();
			Assert.AreEqual(expectedList.Count, list.Count);
			Assert.IsTrue(expected.SequenceEqual(list));
		}

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByWhereTest(string context)
		{
			Setup(context);
			var result = (from o in db.Order
				orderby o.OrderDate, o.OrderID
				where o.OrderDate > new DateTime(1997, 1, 1)
				select o).Take(10);
			var expected = (from o in Order
				where o.OrderDate > new DateTime(1997, 1, 1)
				orderby o.OrderDate, o.OrderID
				select o).Take(10);
			var list = result.ToList();
			Assert.AreEqual(10, list.Count);
			Assert.IsTrue(expected.SequenceEqual(list));
		}

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByCalculatedColumnTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				orderby o.Freight * o.OrderID descending
				select o;
			var expected =
				from o in Order
				orderby o.Freight * o.OrderID descending
				select o;
			Assert.IsTrue(expected.SequenceEqual(result));
		}

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByEntityTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				orderby o
				select o;
			var expected =
				from o in Order
				orderby o.OrderID
				select o;
			Assert.IsTrue(expected.SequenceEqual(result, new GenericEqualityComparer<Order>(o => o.OrderID)));
		}

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByAnonymousTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				orderby new {o.OrderDate, o.ShippedDate, o.OrderID}
				select o;
			var expected =
				from o in Order
				orderby o.OrderDate, o.ShippedDate, o.OrderID
				select o;
			Assert.IsTrue(expected.SequenceEqual(result, new GenericEqualityComparer<Order>(o => o.OrderID)));
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Ordering")]
		public void OrderByDistinctTest(string context)
		{
			//TODO: sdanyliv: data in Northwind.sqlite is broken
			Setup(context);
			var result = db.Customer
				.OrderBy(c => c.CompanyName)
				.Select(c => c.City)
				.Distinct()
				.OrderBy(c => c)
				.Select(c => c);
			var expected = Customers
				.OrderBy(c => c.CompanyName)
				.Select(c => c.City)
				.Distinct()
				.OrderBy(c => c)
				.Select(c => c);
			Assert.IsTrue(expected.SequenceEqual(result));
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Ordering")]
		public void OrderBySelectManyTest(string context)
		{
			//TODO: sdanyliv: data in Northwind.sqlite is broken
			Setup(context);
			var result =
				from c in db.Customer.OrderBy(c => c.ContactName)
				from o in db.Order.OrderBy(o => o.OrderDate)
				where c == o.Customer
				select new {c.ContactName, o.OrderDate};
			var expected =
				from c in Customers.OrderBy(c => c.ContactName)
				from o in Order.OrderBy(o => o.OrderDate)
				where c == o.Customer
				select new {c.ContactName, o.OrderDate};
			Assert.IsTrue(expected.SequenceEqual(result));
		}

		[Test, NorthwindDataContext]
		[Category("Ordering")]
		public void OrderByPredicateTest(string context)
		{
			Setup(context);
			var result =
				db.Order.OrderBy(o => o.Freight > 0 && o.ShippedDate != null).ThenBy(o => o.OrderID).Select(o => o.OrderID);
			var list = result.ToList();
			var original =
				Order.OrderBy(o => o.Freight > 0 && o.ShippedDate != null).ThenBy(o => o.OrderID).Select(o => o.OrderID).ToList();
			Assert.IsTrue(list.SequenceEqual(original));
		}

		#endregion

		#region Grouping tests

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				group o by o.OrderDate;
			var list = result.ToList();
			Assert.AreEqual(480, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByReferenceTest(string context)
		{
			Setup(context);
			var result = from o in db.Order
				group o by o.Customer;
			var list = result.ToList();
			Assert.AreEqual(89, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByWhereTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				group o by o.OrderDate
				into g
				where g.Count() > 5
				select g;
			var list = result.ToList();
			Assert.AreEqual(1, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByTestAnonymous(string context)
		{
			Setup(context);
			var result = from c in db.Customer
				group c by new {c.Region, c.City};
			var list = result.ToList();
			Assert.AreEqual(69, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByCalculatedTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				group o by o.Freight > 50 ? o.Freight > 100 ? "expensive" : "average" : "cheap"
				into g
				select g;
			var list = result.ToList();
			Assert.AreEqual(3, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupBySelectManyTest(string context)
		{
			Setup(context);
			var result = db.Customer
				.GroupBy(c => c.City)
				.SelectMany(g => g);

			var list = result.ToList();
			Assert.AreEqual(91, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByCalculateAggregateTest(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				group o by o.Customer
				into g
				select g.Sum(o => o.Freight);

			var list = result.ToList();
			Assert.AreEqual(89, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByCalculateManyAggreagetes(string context)
		{
			Setup(context);
			var result =
				from o in db.Order
				group o by o.Customer
				into g
				select new
				{
					Sum = g.Sum(o => o.Freight),
					Min = g.Min(o => o.Freight),
					Max = g.Max(o => o.Freight),
					Avg = g.Average(o => o.Freight)
				};

			var list = result.ToList();
			Assert.AreEqual(89, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Grouping")]
		public void GroupByAggregate(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				group c by c.Orders.Average(o => o.Freight) >= 80;
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
			var firstGroupList = list.First(g => !g.Key).ToList();
			Assert.AreEqual(71, firstGroupList.Count);
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Grouping")]
		public void ComplexGroupingTest(string context)
		{
			//TODO: sdanyliv: Nested queries support is not implemented. Possible in V2
			Setup(context);
			var result =
				from c in db.Customer
				select new
				{
					c.CompanyName,
					YearGroups =
					from o in c.Orders
					group o by o.OrderDate.Value.Year
					into yg
					select new
					{
						Year = yg.Key,
						MonthGroups =
						from o in yg
						group o by o.OrderDate.Value.Month
						into mg
						select new {Month = mg.Key, Order = mg}
					}
				};
			var list = result.ToList();
			foreach (var customer in list)
			{
				var OrderList = customer.YearGroups.ToList();
				Assert.LessOrEqual(OrderList.Count, 3);
			}
		}

		#endregion

		#region Set operations / Distinct tests

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void ConcatTest(string context)
		{
			Setup(context);
			var result = db.Customer.Where(c => c.Orders.Count <= 1)
				.Concat(db.Customer.Where(c => c.Orders.Count > 1));
			var list = result.ToList();
			Assert.AreEqual(91, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void UnionTest(string context)
		{
			Setup(context);
			var result = (
					from c in db.Customer
					select c.Phone)
				.Union(
					from c in db.Customer
					select c.Fax)
				.Union(
					from e in db.Employee
					select e.HomePhone
				);

			var list = result.ToList();
			Assert.AreEqual(167, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void ExceptTest(string context)
		{
			Setup(context);
			var result =
				db.Customer.Except(db.Customer.Where(c => c.Orders.Count() > 0));
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void IntersectTest(string context)
		{
			Setup(context);
			var result =
				db.Customer.Intersect(db.Customer.Where(c => c.Orders.Count() > 0));
			var list = result.ToList();
			Assert.AreEqual(89, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void DistinctTest(string context)
		{
			Setup(context);
			var result = db.Order.Select(c => c.Freight).Distinct();
			var list = result.ToList();
			Assert.AreEqual(799, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void DistinctTakeLastTest(string context)
		{
			Setup(context);
			var result =
			(from o in db.Order
				orderby o.OrderDate
				select o.OrderDate).Distinct().Take(5);
			var list = result.ToList();
			Assert.AreEqual(5, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void DistinctTakeFirstTest(string context)
		{
			Setup(context);
			var result =
			(from o in db.Order
				orderby o.OrderDate
				select o.OrderDate).Take(5).Distinct();
			var list = result.ToList();
			Assert.AreEqual(4, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void DistinctEntityTest(string context)
		{
			Setup(context);
			var result = db.Customer.Distinct();
			var list = result.ToList();
			Assert.AreEqual(91, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Set operations")]
		public void DistinctAnonymousTest(string context)
		{
			Setup(context);
			var result = db.Customer.Select(c => new {c.Region, c.City}).Distinct();
			var list = result.ToList();
			Assert.AreEqual(69, list.Count);
		}

		#endregion

		#region Type casts

		[Test, NorthwindDataContext]
		[Category("Type casts")]
		public void TypeCastIsChildTest(string context)
		{
			Setup(context);
			var result = db.Product.Where(p => p is DiscontinuedProduct);
			var expected = db.Product.ToList().Where(p => p is DiscontinuedProduct);
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(expected.Count(), list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Type casts")]
		public void TypeCastIsParentTest(string context)
		{
			Setup(context);
			var result = db.Product.Where(p => p is Product);
			var expected = db.Product.ToList();
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(expected.Count(), list.Count);
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Type casts")]
		public void TypeCastIsChildConditionalTest(string context)
		{
			//TODO: sdanyliv: strange test for me
			Setup(context);
			var result = db.Product
				.Select(x => x is DiscontinuedProduct
					? x
					: null);

			var expected = db.Product.ToList()
				.Select(x => x is DiscontinuedProduct
					? x
					: null);

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(expected.Count(), list.Count);
			Assert.IsTrue(list.Except(expected).Count() == 0);
			Assert.IsTrue(list.Contains(null));
		}

		[Test, NorthwindDataContext]
		[Category("Type casts")]
		public void TypeCastOfTypeTest(string context)
		{
			Setup(context);
			var result = db.Product.OfType<DiscontinuedProduct>();
			var expected = db.Product.ToList().OfType<DiscontinuedProduct>();
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(expected.Count(), list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Type casts")]
		public void TypeCastAsTest(string context)
		{
			Setup(context);
			var result = db.DiscontinuedProduct
				.Select(discontinuedProduct => discontinuedProduct as Product)
				.Select(product =>
					product == null
						? "NULL"
						: product.ProductName);

			var expected = db.DiscontinuedProduct.ToList()
				.Select(discontinuedProduct => discontinuedProduct as Product)
				.Select(product =>
					product == null
						? "NULL"
						: product.ProductName);

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(expected.Count(), list.Count);
			Assert.IsTrue(list.Except(expected).Count() == 0);
		}

		#endregion

		#region Element operations

		[Test, NorthwindDataContext]
		[Category("Element operations")]
		public void FirstTest(string context)
		{
			Setup(context);
			var customer = db.Customer.First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Element operations")]
		public void FirstOrDefaultTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.CustomerID == "ALFKI").FirstOrDefault();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Element operations")]
		public void FirstPredicateTest(string context)
		{
			Setup(context);
			var customer = db.Customer.First(c => c.CustomerID == "ALFKI");
			Assert.IsNotNull(customer);
		}

		[Test, IncludeDataContextSource("Northwind")]
		[Category("Element operations")]
		public void NestedFirstOrDefaultTest(string context)
		{
			Setup(context);
			var result =
				from p in db.Product
				select new
				{
					ProductID = p.ProductID,
					MaxOrder = db.OrderDetail
						.Where(od => od.Product == p)
						.OrderByDescending(od => od.UnitPrice * od.Quantity)
						.FirstOrDefault()
						.Order
				};
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		[Test, IncludeDataContextSource("Northwind")]
		[Category("Element operations")]
		public void FirstOrDefaultEntitySetTest(string context)
		{
			Setup(context);
			var customersCount = Customers.Count;
			var result = db.Customer.Select(c => c.Orders.FirstOrDefault());
			var list = result.ToList();
			Assert.AreEqual(customersCount, list.Count);
		}

		[Test, IncludeDataContextSource("Northwind")]
		[Category("Element operations")]
		public void NestedSingleOrDefaultTest(string context)
		{
			Setup(context);
			var customersCount = Customers.Count;
			var result = db.Customer.Select(c => c.Orders.Take(1).SingleOrDefault());
			var list = result.ToList();
			Assert.AreEqual(customersCount, list.Count);
		}

		[Test, IncludeDataContextSource("Northwind")]
		[Category("Element operations")]
		public void NestedSingleTest(string context)
		{
			Setup(context);
			var result = db.Customer.Where(c => c.Orders.Count() > 0).Select(c => c.Orders.Take(1).Single());
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		[Test, NorthwindDataContext]
		[Category("Element operations")]
		public void ElementAtTest(string context)
		{
			Setup(context);
			var customer = db.Customer.OrderBy(c => c.CustomerID).ElementAt(15);
			Assert.IsNotNull(customer);
			Assert.AreEqual("CONSH", customer.CustomerID);
		}

		[Test, IncludeDataContextSource("Northwind")]
		[Category("Element operations")]
		public void NestedElementAtTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				where c.Orders.Count() > 5
				select c.Orders.ElementAt(3);

			var list = result.ToList();
			Assert.AreEqual(63, list.Count);
		}

		#endregion

		#region Contains / Any / All tests

		[Test, NorthwindDataContext]
		[Category("All/Any/Contains")]
		public void AllNestedTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				where
				db.Order.Where(o => o.Customer == c)
					.All(o => db.Employee.Where(e => o.Employee == e).Any(e => e.FirstName.StartsWith("A")))
				select c;
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("All/Any/Contains")]
		public void ComplexAllTest(string context)
		{
			Setup(context);
			var result =
				(from o in db.Order
				where
				db.Customer.Where(c => c == o.Customer).All(c => c.CompanyName.StartsWith("A")) ||
				db.Employee.Where(e => e == o.Employee).All(e => e.FirstName.EndsWith("t"))
				select o).ToList();
			var expected =
				from o in Order
				where
				Customers.Where(c => c == o.Customer).All(c => c.CompanyName.StartsWith("A")) ||
				Employees.Where(e => e == o.Employee).All(e => e.FirstName.EndsWith("t"))
				select o;

			Assert.AreEqual(0, expected.Except(result).Count());
			Assert.AreEqual(result.ToList().Count, 366);
		}

		[Test, NorthwindDataContext]
		[Category("All/Any/Contains")]
		public void ContainsNestedTest(string context)
		{
			Setup(context);
			var result = from c in db.Customer
				select new
				{
					Customer = c,
					HasNewOrder = db.Order
						.Where(o => o.OrderDate > new DateTime(2001, 1, 1))
						.Select(o => o.Customer)
						.Contains(c)
				};

			var resultList = result.ToList();

			var expected =
				from c in Customers
				select new
				{
					Customer = c,
					HasNewOrder = Order
						.Where(o => o.OrderDate > new DateTime(2001, 1, 1))
						.Select(o => o.Customer)
						.Contains(c)
				};
			Assert.AreEqual(0, expected.Except(resultList).Count());
			Assert.AreEqual(0, resultList.Count(i => i.HasNewOrder));
		}

		[Test, NorthwindDataContext]
		[Category("All/Any/Contains")]
		public void AnyTest(string context)
		{
			Setup(context);
			var result = db.Customer.Where(c => c.Orders.Any(o => o.Freight > 400)).ToList();
			var expected = Customers.Where(c => c.Orders.Any(o => o.Freight > 400));
			Assert.AreEqual(0, expected.Except(result).Count());
			Assert.AreEqual(10, result.ToList().Count);
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("All/Any/Contains")]
		public void AnyParameterizedTest(string context)
		{
			//TODO: sdanyliv: It may take many efforts to implement. And I don't see any benefits.
			Setup(context);
			var ids = new[] {"ABCDE", "ALFKI"};
			var result = db.Customer.Where(c => ids.Any(id => c.CustomerID == id));
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		[Test, NorthwindDataContext]
		[Category("All/Any/Contains")]
		public void ContainsParameterizedTest(string context)
		{
			Setup(context);
			var customerIDs = new[] {"ALFKI", "ANATR", "AROUT", "BERGS"};
			var result = db.Order.Where(o => customerIDs.Contains(o.Customer.CustomerID));
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			Assert.AreEqual(41, list.Count);
		}

		#endregion

		#region Aggregates tests

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Aggregates")]
		public void SumTest(string context)
		{
			Setup(context);
			var sum = db.Order.Select(o => o.Freight).Sum();
			var sum1 = Order.Select(o => o.Freight).Sum();
			Assert.AreEqual((double)sum1, (double)sum, doubleDelta);
		}

		[Test, NorthwindDataContext]
		[Category("Aggregates")]
		public void CountPredicateTest(string context)
		{
			Setup(context);
			var count = db.Order.Count(o => o.OrderID > 10);
			var count1 = Order.Count(o => o.OrderID > 10);
			Assert.AreEqual(count1, count);
		}

		[Test, NorthwindDataContext]
		[Category("Aggregates")]
		public void NestedCountTest(string context)
		{
			Setup(context);
			var result = db.Customer.Where(c => db.Order.Count(o => o.Customer.CustomerID == c.CustomerID) > 5);
			var expected = Customers.Where(c => db.Order.Count(o => o.Customer.CustomerID == c.CustomerID) > 5);

			Assert.IsTrue(expected.Except(result).Count() == 0);
		}

		[Test, NorthwindDataContext]
		[Category("Aggregates")]
		public void NullableSumTest(string context)
		{
			Setup(context);
			var sum = db.Order.Select(o => (int?) o.OrderID).Sum();
			var sum1 = Order.Select(o => (int?) o.OrderID).Sum();
			Assert.AreEqual(sum1, sum);
		}

		[Test, NorthwindDataContext]
		[Category("Aggregates")]
		public void MaxCountTest(string context)
		{
			Setup(context);
			var max = db.Customer.Max(c => db.Order.Count(o => o.Customer.CustomerID == c.CustomerID));
			var max1 = Customers.Max(c => Order.Count(o => o.Customer.CustomerID == c.CustomerID));
			Assert.AreEqual(max1, max);
		}

		#endregion

		#region Join tests

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Join")]
		public void GroupJoinTest(string context)
		{
			//TODO: sdanyliv: o.Customer.CustomerID - it is association that means additional JOIN. We have to decide if it is a bug.
			Setup(context);
			var result =
				from c in db.Customer
				join o in db.Order on c.CustomerID equals o.Customer.CustomerID into go
				join e in db.Employee on c.City equals e.City into ge
				select new
				{
					OrderCount = go.Count(),
					EmployeesCount = ge.Count()
				};
			var list = result.ToList();
			Assert.AreEqual(91, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Join")]
		public void JoinTest(string context)
		{
			Setup(context);
			var result =
				from p in db.Product
				join s in db.Supplier on p.Supplier.SupplierID equals s.SupplierID
				select new {p.ProductName, s.ContactName, s.Phone};

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		[Test, NorthwindDataContext]
		[Category("Join")]
		public void JoinByAnonymousTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				join o in db.Order on new {Customer = c, Name = c.ContactName} equals
				new {o.Customer, Name = o.Customer.ContactName}
				select new {c.ContactName, o.OrderDate};

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Join")]
		public void LeftJoinTest(string context)
		{
			//TODO: sdanyliv: Same as in GroupJoinTest, p.Category.CategoryID - is an association.
			Setup(context);
			var result =
				from c in db.Category
				join p in db.Product on c.CategoryID equals p.Category.CategoryID into g
				from p in g.DefaultIfEmpty()
				select new {Name = p == null ? "Nothing!" : p.ProductName, c.CategoryName};

			var list = result.ToList();
			Assert.AreEqual(77, list.Count);
		}

		#endregion

		#region References tests

		[Test, NorthwindDataContext]
		[Category("References")]
		public void JoinByReferenceTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				join o in db.Order on c equals o.Customer
				select new {c.ContactName, o.OrderDate};

			var list = result.ToList();
			Assert.AreEqual(830, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("References")]
		public void CompareReferenceTest(string context)
		{
			Setup(context);
			var result =
				from c in db.Customer
				from o in db.Order
				where c == o.Customer
				select new {c.ContactName, o.OrderDate};

			var list = result.ToList();
			Assert.AreEqual(830, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("References")]
		public void ReferenceNavigationTestTest(string context)
		{
			Setup(context);
			var result =
				from od in db.OrderDetail
				where od.Product.Category.CategoryName == "Seafood"
				select new {od.Order, od.Product};

			var list = result.ToList();
			Assert.AreEqual(330, list.Count);
			foreach (var anonymous in list)
			{
				Assert.IsNotNull(anonymous);
				Assert.IsNotNull(anonymous.Order);
				Assert.IsNotNull(anonymous.Product);
			}
		}

		[Test, NorthwindDataContext]
		[Category("References")]
		public void EntitySetCountTest(string context)
		{
			Setup(context);
			var result = db.Category.Where(c => c.Products.Count > 10);
			var list = result.ToList();
			Assert.AreEqual(4, list.Count);
		}

		#endregion

		#region Complex tests

		[Test, NorthwindDataContext]
		[Category("WindowsOnly")]
		public void ComplexTest1(string context)
		{
			using (new AllowMultipleQuery())
			{
				Setup(context);
				var result = db.Supplier.Select(
					supplier => db.Product.Select(
						product => db.Product.Where(p => p.ProductID == product.ProductID && p.Supplier.SupplierID == supplier.SupplierID)));
				var count = result.ToList().Count;
				Assert.Greater(count, 0);
				foreach (var queryable in result)
				{
					foreach (var queryable1 in queryable)
					{
						foreach (var product in queryable1)
						{
							Assert.IsNotNull(product);
						}
					}
				}
			}
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Complex")]
		public void ComplexTest2(string context)
		{
			Setup(context);

			//TODO: sdanyliv: It can be replaced by the following linq expression. We have to decide that we have time to implement.
			var r = from c in db.Customer
				group c by c.Country
				into g
				from gi in g
				where gi.CompanyName.Substring(0, 1) == g.Key.Substring(0, 1)
				select gi;

			var result = db.Customer
				.GroupBy(c => c.Country,
					(country, customers) =>
						customers.Where(k => k.CompanyName.Substring(0, 1) == country.Substring(0, 1)))
				.SelectMany(k => k);
			var expected = Customers
				.GroupBy(c => c.Country,
					(country, customers) =>
						customers.Where(k => k.CompanyName.Substring(0, 1) == country.Substring(0, 1)))
				.SelectMany(k => k);

			Assert.AreEqual(0, expected.Except(result).Count());
		}

		[Test, NorthwindDataContext, Ignore("Disabled, multiply queries")]
		[Category("Complex")]
		public void ComplexTest3(string context)
		{
			Setup(context);
			var products = db.Product;
			var suppliers = db.Supplier;
			var result = from p in products
				select new
				{
					Product = p,
					Suppliers = suppliers
						.Where(s => s.SupplierID == p.Supplier.SupplierID)
						.Select(s => s.CompanyName)
				};
			var list = result.ToList();
			Assert.Greater(list.Count, 0);
			foreach (var p in list)
			foreach (var companyName in p.Suppliers)
				Assert.IsNotNull(companyName);
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Complex")]
		public void ComplexTest4(string context)
		{
			//TODO: sdanyliv: This is a bug
			Setup(context);
			var result = db.Customer
				.Take(2)
				.Select(
					c =>
						db.Order.Select(o => db.Employee.Take(2).Where(e => e.Orders.Contains(o)))
							.Where(o => o.Count() > 0))
				.Select(os => os);

			var list = result.ToList();
			Assert.Greater(list.Count, 0);

			foreach (var item in list)
				item.ToList();
		}

		[Test, NorthwindDataContext, Ignore("Disabled, multiply queries")]
		[Category("Complex")]
		public void ComplexTest5(string context)
		{
			Setup(context);
			var result = db.Customer
				.Select(c => new {Customer = c, Order = db.Order})
				.Select(i => i.Customer.Orders);

			var list = result.ToList();
			Assert.Greater(list.Count, 0);

			foreach (var item in list)
				item.ToList();
		}

		[Test, NorthwindDataContext, Ignore("Not working at the Moment -> issue #573")]
		[Category("Complex")]
		public void ComplexTest6(string context)
		{
			Setup(context);

			//TODO: sdanyliv: Another strange query that needs efforts for implementation. Can be replaced by this one:
			var r =
				from c in db.Customer
				from o in db.Order
				where o.Customer == c
				select new
				{
					Customer = c,
					Order = o
				};

			var result = db.Customer
				.Select(c => new {Customer = c, Order = db.Order.Where(o => o.Customer == c)})
				.SelectMany(i => i.Order.Select(o => new {i.Customer, Order = o}));

			var list = result.ToList();
			Assert.Greater(list.Count, 0);
		}

		#endregion

		#region Standard functions tests

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringStartsWithTest(string context)
		{
			Setup(context);
			var result = db.Customer.Where(c => c.CustomerID.StartsWith("A") || c.CustomerID.StartsWith("L"));

			var list = result.ToList();
			Assert.AreEqual(13, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringStartsWithParameterizedTest(string context)
		{
			Setup(context);
			var likeA = "A";
			var likeL = "L";
			var result = db.Customer.Where(c => c.CustomerID.StartsWith(likeA) || c.CustomerID.StartsWith(likeL));

			var list = result.ToList();
			Assert.AreEqual(13, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringLengthTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.Length == 7).First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringContainsTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.ContactName.Contains("and")).First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringToLowerTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.ToLower() == "seattle").First();
			Assert.IsNotNull(customer);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void StringRemoveTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.Remove(3) == "Sea").First();
			Assert.IsNotNull(customer);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void StringIndexOfTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.IndexOf("tt") == 3).First();
			Assert.IsNotNull(customer);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void StringLastIndexOfTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.LastIndexOf("t", 1, 3) == 3).First();
			Assert.IsNotNull(customer);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void StringPadLeftTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => "123" + c.City.PadLeft(8) == "123 Seattle").First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void DateTimeTest(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => o.OrderDate >= new DateTime(o.OrderDate.Value.Year, 1, 1)).First();
			Assert.IsNotNull(order);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void DateTimeDayTest(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => o.OrderDate.Value.Day == 5).First();
			Assert.IsNotNull(order);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void DateTimeDayOfWeek(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => o.OrderDate.Value.DayOfWeek == DayOfWeek.Friday).First();
			Assert.IsNotNull(order);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void DateTimeDayOfYear(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => o.OrderDate.Value.DayOfYear == 360).First();
			Assert.IsNotNull(order);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void MathAbsTest(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => Math.Abs(o.OrderID) == 10 || o.OrderID > 0).First();
			Assert.IsNotNull(order);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void MathTrignometricTest(string context)
		{
			Setup(context);
			var order = db.Order.Where(o => Math.Asin(Math.Cos(o.OrderID)) == 0 || o.OrderID > 0).First();
			Assert.IsNotNull(order);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void MathFloorTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Floor(o.Freight) == 140);
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void MathCeilingTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Ceiling(o.Freight) == 141);
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void MathTruncateTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Truncate(o.Freight) == 141);
			var list = result.ToList();
			Assert.AreEqual(2, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void MathRoundAwayFromZeroTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Round(o.Freight / 10, 1, MidpointRounding.AwayFromZero) == 6.5m);
			var list = result.ToList();
			Assert.AreEqual(7, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void MathRoundToEvenTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Round(o.Freight / 10, 1, MidpointRounding.ToEven) == 6.5m);
			var list = result.ToList();
			Assert.AreEqual(6, list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void MathRoundDefaultTest(string context)
		{
			Setup(context);
			var result = db.Order.Where(o => Math.Round(o.Freight / 10, 1) == 6.5m);
			var list = result.ToList();
			Assert.AreEqual(6, list.Count);
		}

		[Test]
		[NorthwindDataContext(false, true)]
		[Category("Standard functions")]
		public void ConvertToInt32(string context)
		{
			Setup(context);
			var expected = Order.Where(o => Convert.ToInt32(o.Freight * 10) == 592);
			var result = db.Order.Where(o => Convert.ToInt32(o.Freight * 10) == 592);
			var list = result.ToList();
			Assert.AreEqual(expected.Count(), list.Count);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void StringCompareToTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => c.City.CompareTo("Seattle") >= 0).First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void ComparisonWithNullTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => null != c.City).First();
			Assert.IsNotNull(customer);
		}

		[Test, NorthwindDataContext]
		[Category("Standard functions")]
		public void EqualsWithNullTest(string context)
		{
			Setup(context);
			var customer = db.Customer.Where(c => !c.Address.Equals(null)).First();
			Assert.IsNotNull(customer);
		}

		#endregion
	}
}
