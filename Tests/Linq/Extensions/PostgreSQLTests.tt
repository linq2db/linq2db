<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq;
using System.Linq.Expressions;

using LinqToDB;
using LinqToDB.DataProvider.PostgreSQL;

using NUnit.Framework;

namespace Tests.Extensions
{
	partial class PostgreSQLTests
	{
<#
	GenerateQuery("ForUpdate",      ""); GenerateQuery("ForUpdate",      "NoWait"); GenerateQuery("ForUpdate",      "SkipLocked");
	GenerateQuery("ForNoKeyUpdate", ""); GenerateQuery("ForNoKeyUpdate", "NoWait"); GenerateQuery("ForNoKeyUpdate", "SkipLocked");
	GenerateQuery("ForShare",       ""); GenerateQuery("ForShare",       "NoWait"); GenerateQuery("ForShare",       "SkipLocked");
	GenerateQuery("ForKeyShare",    ""); GenerateQuery("ForKeyShare",    "NoWait"); GenerateQuery("ForKeyShare",    "SkipLocked");
#>
	}
}
<#+

void GenerateQuery(string hint, string hint2)
{
#>
		[Test]
		public void QueryHint<#= hint #><#= hint2 #>Test([IncludeDataSources(true, TestProvName.AllPostgreSQL)] string context)
		{
			using var db = GetDataContext(context);

			var q =
			(
				from p in db.Parent
				join c in db.Child on p.ParentID equals c.ParentID
				select p
			)
			.AsPostgreSQL()
			.<#= hint #><#= hint2 #>Hint();

			_ = q.ToList();

<#+
			if (hint is "ForNoKeyUpdate" or "ForKeyShare")
			{
#>
			if (LastQuery.Contains(ProviderName.PostgreSQL92))
				return;

<#+
			}

			if (hint2 == "SkipLocked")
			{
#>
			var skipLocked = LastQuery.Contains(ProviderName.PostgreSQL95) ? " SKIP LOCKED" : "";
			Assert.That(LastQuery, Contains.Substring($"{PostgreSQLHints.<#= hint #>}{skipLocked}"));
<#+
			}
			else
			{
#>
			Assert.That(LastQuery, Contains.Substring($"{PostgreSQLHints.<#= hint #>}<#= hint2.Length == 0 ? "" : " {PostgreSQLHints." + hint2 + "}" #>"));
<#+
			}
#>
		}

		[Test]
		public void QueryHint<#= hint #><#= hint2 #>Test2([IncludeDataSources(true, TestProvName.AllPostgreSQL)] string context)
		{
			using var db = GetDataContext(context);

			var q =
			(
				from p in db.Parent.TableID("Pr")
				join c in db.Child.TableID("Ch") on p.ParentID equals c.ParentID
				select p
			)
			.AsPostgreSQL()
			.<#= hint #><#= hint2 #>Hint(Sql.TableAlias("Pr"), Sql.TableAlias("Ch"));

			_ = q.ToList();

<#+
			if (hint is "ForNoKeyUpdate" or "ForKeyShare")
			{
#>
			if (LastQuery.Contains(ProviderName.PostgreSQL92))
				return;

<#+
			}

			if (hint2 == "SkipLocked")
			{
#>
			var skipLocked = LastQuery.Contains(ProviderName.PostgreSQL95) ? " SKIP LOCKED" : "";
			Assert.That(LastQuery, Contains.Substring($"{PostgreSQLHints.<#= hint #>} OF p, c_1{skipLocked}"));
<#+
			}
			else
			{
#>
			Assert.That(LastQuery, Contains.Substring($"{PostgreSQLHints.<#= hint #>} OF p, c_1<#= hint2.Length == 0 ? "" : " {PostgreSQLHints." + hint2 + "}" #>"));
<#+
			}
#>
		}

<#+
}
#>
