<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
// Generated.
//
using System;
using System.Linq;
using System.Linq.Expressions;

using LinqToDB.DataProvider.SqlServer;

using NUnit.Framework;

namespace Tests.Extensions
{
	partial class SqlServerTests
	{
<#
	GenerateTableTest("ForceScan", "2012Plus");
	GenerateTableTest("HoldLock");
	GenerateTableTest("NoLock");
	GenerateTableTest("NoWait");
	GenerateTableTest("PagLock");
	GenerateTableTest("ReadCommitted");
	GenerateTableTest("ReadCommittedLock");
	GenerateTableTest("ReadPast");
	GenerateTableTest("ReadUncommitted");
	GenerateTableTest("RepeatableRead");
	GenerateTableTest("RowLock");
	GenerateTableTest("Serializable");
	GenerateTableTest("TabLock");
	GenerateTableTest("TabLockX");
	GenerateTableTest("UpdLock");
	GenerateTableTest("XLock");

	GenerateOptionTest ("HashGroup");   GenerateOptionTest("OrderGroup");
	GenerateOptionTest ("ConcatUnion"); GenerateOptionTest("HashUnion"); GenerateOptionTest("MergeUnion");
	GenerateOptionTest ("LoopJoin");    GenerateOptionTest("HashJoin");  GenerateOptionTest("MergeJoin");
	GenerateOptionTest ("ExpandViews");
	GenerateOptionTest2("Fast");
	GenerateOptionTest ("ForceOrder");
//	GenerateOptionTest ("ForceScaleOutExecution",   "2019Plus");
//	GenerateOptionTest ("DisableScaleOutExecution", "2019Plus");
	GenerateOptionTest ("IgnoreNonClusteredColumnStoreIndex", "2012Plus");
	GenerateOptionTest ("KeepPlan");
	GenerateOptionTest ("KeepFixedPlan");
	GenerateOptionTest2("MaxGrantPercent", "2016Plus");
	GenerateOptionTest2("MinGrantPercent", "2016Plus");
	GenerateOptionTest2("MaxDop");
	GenerateOptionTest2("MaxRecursion");
	GenerateOptionTest ("NoPerformanceSpool", "2019Plus");
	GenerateOptionTest ("OptimizeForUnknown", "2008Plus");
	GenerateOptionTest2("QueryTraceOn",       "NoAzure");
	GenerateOptionTest ("Recompile");
	GenerateOptionTest ("RobustPlan");
#>
	}
}
<#+
void GenerateTableTest(string test, string version = "")
{
#>
		[Test]
		public void With<#= test #>TableTest([IncludeDataSources(true, TestProvName.AllSqlServer<#= version #>)] string context)
		{
			using var db = GetDataContext(context);

			var q =
				from p in db.Parent
					.AsSqlServer()
					.With<#= test #>()
				select p;

			_ = q.ToList();

			Assert.That(LastQuery, Contains.Substring("WITH (<#= test #>)"));
		}

		[Test]
		public void With<#= test #>InScopeTest([IncludeDataSources(true, TestProvName.AllSqlServer<#= version #>)] string context)
		{
			using var db = GetDataContext(context);

			var q =
			(
				from p in db.Parent
				join c in db.Child on p.ParentID equals c.ParentID
				select p
			)
			.AsSqlServer()
			.With<#= test #>InScope();

			_ = q.ToList();

			Assert.That(LastQuery, Contains.Substring("[p] WITH (<#= test #>)"));
			Assert.That(LastQuery, Contains.Substring("[c_1] WITH (<#= test #>)"));
		}

<#+
}

void GenerateOptionTest(string test, string version = "")
{
#>
		[Test]
		public void Option<#= test #>Test([IncludeDataSources(true, TestProvName.AllSqlServer<#= version #>)] string context)
		{
			using var db = GetDataContext(context);

			var q =
			(
				from c in db.Child
				join p in db.Parent on c.ParentID equals p.ParentID
				select p
			)
			.AsSqlServer()
			.Option<#= test #>();

			_ = q.ToList();

			Assert.That(LastQuery, Contains.Substring($"OPTION ({SqlServerHints.Query.<#= test #>})"));
		}

<#+
}

void GenerateOptionTest2(string test, string version = "")
{
#>
		[Test]
		public void Option<#= test #>Test([IncludeDataSources(true, TestProvName.AllSqlServer<#= version #>)] string context)
		{
			using var db = GetDataContext(context);

			var q =
			(
				from c in db.Child
				join p in db.Parent on c.ParentID equals p.ParentID
				select p
			)
			.AsSqlServer()
			.Option<#= test #>(10);

			_ = q.ToList();

			Assert.That(LastQuery, Contains.Substring($"OPTION ({SqlServerHints.Query.<#= test #>(10)})"));
		}

<#+
}
#>
