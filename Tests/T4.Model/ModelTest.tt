<#@ template language="C#" debug="True" hostSpecific="True"                        #>
<#@ output extension=".generated.cs"                                               #>
<#@ include file="..\..\Source\LinqToDB.Templates\T4Model.ttinclude"               #>
<#@ include file="..\..\Source\LinqToDB.Templates\EditableObject.ttinclude"        #>
<#@ include file="..\..\Source\LinqToDB.Templates\NotifyPropertyChanged.ttinclude" #>
<#@ include file="..\..\Source\LinqToDB.Templates\Validation.ttinclude"            #>
<#
	Model.Namespaces[0].Name = "Tests.T4.Model";

	Model.Usings.Add("System.ComponentModel");
	Model.Usings.Add("System.Collections.Generic");
	Model.Usings.Add("System.Xml.Serialization");
	Model.Usings.Add("Tests.T4.Model");
	Model.Usings.Add("System.ComponentModel");

	ImplementNotifyPropertyChanging = true;

	Model.Namespaces[0].Types.Add(new Class
	{
		Name    = "TestClass1",
		Members =
		{
			new EditableProperty ("long",   "EditableLong1")   { InitValue = "12345", CustomValidation = true },
			new EditableProperty ("int",    "EditableInt1")    { CustomValidation = true },
			new EditableProperty ("int",    "EditableInt3")    { Dependents = { "EditableInt1", "EditableInt3" } },
			new EditableProperty ("double", "EditableDouble1") { IsDirtyText = "Math.Abs({0} - {1}) <= 16 * Double.Epsilon * Math.Max(Math.Abs({0}), Math.Abs({1}))" },
			new NotifyingProperty("string", "NotifiedProp1", "NotifiedProp2", "NotifiedProp3"),
			new NotifyingProperty("int",    "NotifiedProp2")   { InitValue = "1" },
			new NotifyingProperty("long",   "NotifiedProp3").InitGetter("1"),
			new NotifyingProperty("string", "IDProp3"),
			new MemberGroup
			{
				Region    = "Test Region",
				IsCompact = true,
				Members   =
				{
					new Field
					{
						Type       = "int",
						Name       = "Field1",
						Comment    = { "/ <summary>", "/ 123", "/ </summary>" },
						Attributes =
						{
							new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
						}
					},
					new Field
					{
						Type        = "string",
						Name        = "Field2",
						Conditional = "AAA",
						Attributes  =
						{
							new Attribute("XmlArray", "\"Name1\""),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field21",
						Attributes =
						{
							new Attribute("XmlArray",     "\"Name21\""),
							new Attribute("XmlArrayItem", "typeof(int)",  "DataType=\"List\""),
							new Attribute("XmlArrayItem", "typeof(char)"),
						}
					},
					new Property
					{
						Type       = "string",
						Name       = "Field221",
						Attributes =
						{
							new Attribute("XmlAttribute", "\"Name1\"",  "typeof(int)"),
							new Attribute("XmlArray",     "\"N2\""),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field2212",
					},
					new Field
					{
						Type       = "string",
						Name       = "Field23",
						Attributes =
						{
							new Attribute("XmlAttribute", "\"Nm1\"",  "typeof(int)"),
						}
					},
					new Field
					{
						Type       = "string",
						Name       = "Field23a",
						Attributes =
						{
							new Attribute("XmlElement", "\"Nm1\"",  "typeof(int)"),
							new Attribute("XmlElement"),
						}
					},
				}
			},
			new MemberGroup
			{
				Region    = "Test Region 2",
				IsCompact = true,
				Members   =
				{
					new Field   ("int",    "Field12") { EndLineComment = "Field3 comnt" },
					new Field   ("string", "Field22_____"),
					new Property("string", "PField121"),
					new Property("string", "PField221", new[] { "var a = 1;", "return null;" }),
					new Property("string", "PField222", new[] { "return null;" }) { EndLineComment = "Field3 comment" },
					new Property("string", "PField23",  new[] { "return null;" }, new[] { "value.ToString();" }) { EndLineComment = "Fieomment" },
				}
			},
			new Field
			{
				Comment        = { "/ <summary>", "/ 456", "/ </summary>" },
				Type           = "List<int>",
				Name           = "Field3",
				EndLineComment = "Field3 comment",
				Conditional    = "AAA",
				Attributes     =
				{
					//new Attribute { Name = "DisplayName" },
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property("char", "Property1",
				new[]
				{
					"int a = 1;",
					"return 'a';"
				},
				new[]
				{
					"var a = value;",
					"a.ToString();"
				})
			{
				EndLineComment = "Property1 comment",
				Conditional    = "AAA",
				Attributes     =
				{
					new Attribute("DisplayName", "\"Prop\""),
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property("char", "Property11",
				new[] { "'a'" },
				new[] { "var a = value;" }),
			new Field
			{
				Type = "List<int>",
				Name = "Field31"
			},
			new MemberGroup
			{
				Members =
				{
					new Field("double",    "Field5"),
					new Field("List<int>", "Field6"),
				}
			},
			new MemberGroup
			{
				IsCompact = true,
				Members   =
				{
					new Field   ("double",       "Fld7")          { EndLineComment = "Fld7" },
					new Field   ("List<int>",    "Field8"),
					new Field   ("DateTime",     "FieldLongName") { EndLineComment = "field long name" },
					new Property("List<string>", "Property2")     { EndLineComment = "Property2" },
					new Property("List<int?>",   "Property3")     { EndLineComment = "Property3", HasSetter = false },
					new Property("int?",         "Prop1")         { EndLineComment = "Prop1" },
				}
			},
			new Field { Type = "List<string>", Name = "Field4" },
		}
	});

	Model.Namespaces[0].Types.Add(new Class
	{
		Name       = "TestClass2",
		BaseClass  = "TestClass1",
		//Interfaces = { "IDisposable" }
		Attributes =
		{
			new Attribute("Serializable"),
			new Attribute("DisplayName", "\"TestClass\""),
		}
	});

	GenerateModel();
#>
