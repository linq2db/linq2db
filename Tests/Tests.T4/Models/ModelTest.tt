<#@ template language="C#" debug="True" hostSpecific="True"                           #>
<#@ output extension=".generated.cs"                                                  #>
<#@ include file="..\..\..\Source\LinqToDB.Templates\T4Model.ttinclude"               #>
<#@ include file="..\..\..\Source\LinqToDB.Templates\EditableObject.ttinclude"        #>
<#@ include file="..\..\..\Source\LinqToDB.Templates\NotifyPropertyChanged.ttinclude" #>
<#@ include file="..\..\..\Source\LinqToDB.Templates\Validation.ttinclude"            #>
<#
	EnableNullableReferenceTypes = true;

	Model.Namespaces[0].Name = "Tests.T4.Model";

	Model.Usings.Add("System.ComponentModel");
	Model.Usings.Add("System.Collections.Generic");
	Model.Usings.Add("System.Xml.Serialization");
	Model.Usings.Add("Tests.T4.Model");
	Model.Usings.Add("System.ComponentModel");

	ImplementNotifyPropertyChanging = true;

	Model.Namespaces[0].Types.Add(new Class
	{
		Name    = "TestClass1",
		Members =
		{
			new EditableProperty (ModelType.Create<string>(false), "EditableString1") { InitValue = "\"12345\"", CustomValidation = true },
			new EditableProperty (ModelType.Create<string>(true),  "EditableString2") { InitValue = "null"     , CustomValidation = true },
			new EditableProperty ("long",                          "EditableLong1")   { InitValue = "12345"    , CustomValidation = true },
			new EditableProperty ("int",                           "EditableInt1")    {                          CustomValidation = true },
			new EditableProperty ("int",                           "EditableInt3")    { Dependents = { "EditableInt1", "EditableInt3" } },
			new EditableProperty ("double",                        "EditableDouble1") { IsDirtyText = "Math.Abs({0} - {1}) <= 16 * double.Epsilon * Math.Max(Math.Abs({0}), Math.Abs({1}))" },
			new NotifyingProperty(ModelType.Create<string>(true),  "NotifiedProp1", "NotifiedProp2", "NotifiedProp3"),
			new NotifyingProperty("int",                           "NotifiedProp2")   { InitValue = "1" },
			new NotifyingProperty("long",                          "NotifiedProp3").InitGetter(() => new [] { "1" }),
			new NotifyingProperty(ModelType.Create<string>(true),  "IDProp3"),
			new NotifyingProperty(ModelType.Create<string>(false), "IDProp4")         { InitValue = "string.Empty" },
			new MemberGroup
			{
				Region    = "Test Region",
				IsCompact = true,
				Members   =
				{
					new Field
					{
						TypeBuilder = () => "int",
						Name        = "Field1",
						Comment     = { "/ <summary>", "/ 123", "/ </summary>" },
						Attributes  =
						{
							new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
						}
					},
					new Field(ModelType.Create<string>(true), "Field2")
					{
						Conditional = "AAA",
						Attributes  =
						{
							new Attribute("XmlArray", "\"Name1\""),
						}
					},
					new Field(ModelType.Create<string>(false), "Field22")
					{
						Attributes  =
						{
							new Attribute("XmlArray", "\"Name3\""),
						},
						InitValue = "string.Empty"
					},
					new Field(ModelType.Create<string>(true), "Field21")
					{
						Attributes  =
						{
							new Attribute("XmlArray",     "\"Name21\""),
							new Attribute("XmlArrayItem", "typeof(int)",  "DataType=\"List\""),
							new Attribute("XmlArrayItem", "typeof(char)"),
						}
					},
					new Property(ModelType.Create<string>(true), "Field221")
					{
						Attributes  =
						{
							new Attribute("XmlAttribute", "\"Name1\"",  "typeof(int)"),
							new Attribute("XmlArray",     "\"N2\""),
						}
					},
					new Field(ModelType.Create<string>(true), "Field2212"),
					new Field(ModelType.Create<string>(true), "Field23")
					{
						Attributes  =
						{
							new Attribute("XmlAttribute", "\"Nm1\"",  "typeof(int)"),
						}
					},
					new Field(ModelType.Create<string>(true), "Field23a")
					{
						Attributes  =
						{
							new Attribute("XmlElement", "\"Nm1\"",  "typeof(int)"),
							new Attribute("XmlElement"),
						}
					},
				}
			},
			new MemberGroup
			{
				Region    = "Test Region 2",
				IsCompact = true,
				Members   =
				{
					new Field   (() => "int",    "Field12") { EndLineComment = "Field3 comnt" },
					new Field   (ModelType.Create<string>(true) , "Field22_____"),
					new Property(ModelType.Create<string>(true) , "PField121"),
					new Property(ModelType.Create<string>(false), "PField122", () => new[] { "return \"not null\";" }),
					new Property(ModelType.Create<string>(true) , "PField221", () => new[] { "_ = 1;", "return null;" }),
					new Property(ModelType.Create<string>(true) , "PField222", () => new[] { "return null;" }) { EndLineComment = "Field3 comment" },
					new Property(ModelType.Create<string>(true) , "PField23",  () => new[] { "return null;" }, () => new[] { "value?.ToString();" }) { EndLineComment = "Fieomment" },
				}
			},
			new Field(ModelType.Create<List<int>>(true), "Field3")
			{
				Comment        = { "/ <summary>", "/ 456", "/ </summary>" },
				EndLineComment = "Field3 comment",
				Conditional    = "AAA",
				Attributes     =
				{
					//new Attribute { Name = "DisplayName" },
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property(() => "char", "Property1",
				() => new[]
				{
					"int a = 1;",
					"return 'a';"
				},
				() => new[]
				{
					"var a = value;",
					"a.ToString();"
				})
			{
				EndLineComment = "Property1 comment",
				Conditional    = "AAA",
				Attributes     =
				{
					new Attribute("DisplayName", "\"Prop\""),
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
			new Property(() => "char", "Property11",
				() => new[] { "'a'" },
				() => new[] { "var a = value;" }),
			new Field(ModelType.Create<List<int>>(true), "Field31"),
			new MemberGroup
			{
				Members =
				{
					new Field(() => "double",    "Field5"),
					new Field(ModelType.Create<List<int>>(true), "Field6")
				}
			},
			new MemberGroup
			{
				IsCompact = true,
				Members   =
				{
					new Field   (() => "double",                                                 "Fld7")           { EndLineComment = "Fld7" },
					new Field   (ModelType.Create<List<int>>(true),                              "Field8"),
					new Field   (() => "DateTime",                                               "FieldLongName")  { EndLineComment = "field long name" },
					new Property(new ModelType(typeof(List<>), true, ModelType.Create<string>(true)), "Property2") { EndLineComment = "Property2" },
					new Property(ModelType.Create<List<int?>>(true),                             "Property3")      { EndLineComment = "Property3", HasSetter = false },
					new Property(() => "int?",                                                   "Prop1")          { EndLineComment = "Prop1" },
				}
			},
			new Field(new ModelType(typeof(List<>), true, ModelType.Create<string>(true)), "Field4")
		}
	});

	Model.Namespaces[0].Types.Add(new Class
	{
		Name       = "TestClass2",
		BaseClass  = "TestClass1",
		//Interfaces = { "IDisposable" }
		Attributes =
		{
			new Attribute("Serializable"),
			new Attribute("DisplayName", "\"TestClass\""),
		}
	});

	Model.Namespaces[0].Types.Add(new Class
	{
		Name         = "ITestInterface",
		ClassKeyword = "interface",
		Members      =
		{
			new MemberGroup
			{
				Region    = "Test Region",
				IsCompact = true,
				Members   =
				{
					new Property { Type = "int",    Name = "P1", AccessModifier = AccessModifier.None },
					new Property { Type = "string", Name = "P2", AccessModifier = AccessModifier.None  },
				}
			},
			new MemberGroup
			{
				Region    = "Test Region 2",
				IsCompact = false,
				Members   =
				{
					new Property(ModelType.Create<int>(true),     "PField121") { AccessModifier = AccessModifier.None  },
					new Property(ModelType.Create<string>(false), "PField122") { AccessModifier = AccessModifier.None  },
					new Property(ModelType.Create<string>(true) , "PField221") { AccessModifier = AccessModifier.None  },
				}
			},
			new Property(() => "char", "Property1")
			{
				AccessModifier = AccessModifier.None,
				EndLineComment = "Property1 comment",
				Conditional    = "!AAA",
				Attributes     =
				{
					new Attribute("DisplayName", "\"Prop\""),
					new Attribute("XmlArrayItem", "typeof(int)", "DataType=\"List\""),
				}
			},
		}
	});

	GenerateModel();
#>
