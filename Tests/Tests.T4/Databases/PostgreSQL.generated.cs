//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591
#pragma warning disable 618
#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Net.NetworkInformation;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

using NpgsqlTypes;

namespace PostreSQLDataContext
{
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<_testsamename>                  _testsamename             { get { return this.GetTable<_testsamename>(); } }
		public ITable<AllType>                        AllTypes                  { get { return this.GetTable<AllType>(); } }
		public ITable<Child>                          Children                  { get { return this.GetTable<Child>(); } }
		public ITable<Doctor>                         Doctors                   { get { return this.GetTable<Doctor>(); } }
		public ITable<Entity>                         Entities                  { get { return this.GetTable<Entity>(); } }
		public ITable<GrandChild>                     GrandChildren             { get { return this.GetTable<GrandChild>(); } }
		public ITable<InheritanceChild>               InheritanceChildren       { get { return this.GetTable<InheritanceChild>(); } }
		public ITable<InheritanceParent>              InheritanceParents        { get { return this.GetTable<InheritanceParent>(); } }
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                      Issue2023                 { get { return this.GetTable<Issue2023>(); } }
		public ITable<LinqDataType>                   LinqDataTypes             { get { return this.GetTable<LinqDataType>(); } }
		public ITable<Parent>                         Parents                   { get { return this.GetTable<Parent>(); } }
		public ITable<Patient>                        Patients                  { get { return this.GetTable<Patient>(); } }
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                         People                    { get { return this.GetTable<Person>(); } }
		public ITable<SequenceCustomNamingTest>       SequenceCustomNamingTests { get { return this.GetTable<SequenceCustomNamingTest>(); } }
		public ITable<SequenceTest1>                  SequenceTest1             { get { return this.GetTable<SequenceTest1>(); } }
		public ITable<SequenceTest2>                  SequenceTest2             { get { return this.GetTable<SequenceTest2>(); } }
		public ITable<SequenceTest3>                  SequenceTest3             { get { return this.GetTable<SequenceTest3>(); } }
		public ITable<TestIdentity>                   TestIdentities            { get { return this.GetTable<TestIdentity>(); } }
		public ITable<TestMerge1>                     TestMerge1                { get { return this.GetTable<TestMerge1>(); } }
		public ITable<TestMerge2>                     TestMerge2                { get { return this.GetTable<TestMerge2>(); } }
		public ITable<test_schema_Testsamename>       Testsamenames             { get { return this.GetTable<test_schema_Testsamename>(); } }
		public ITable<test_schema_TestSchemaIdentity> TestSchemaIdentities      { get { return this.GetTable<test_schema_TestSchemaIdentity>(); } }
		public ITable<test_schema_Testserialidentity> Testserialidentities      { get { return this.GetTable<test_schema_Testserialidentity>(); } }

		protected void InitMappingSchema()
		{
			MappingSchema.SetConvertExpression<object?[], pg_create_logical_replication_slotResult>(tuple => new pg_create_logical_replication_slotResult() { slot_name = (string?)tuple[0], xlog_position = (object?)tuple[1] });
			MappingSchema.SetConvertExpression<object?[], pg_create_physical_replication_slotResult>(tuple => new pg_create_physical_replication_slotResult() { slot_name = (string?)tuple[0], xlog_position = (object?)tuple[1] });
			MappingSchema.SetConvertExpression<object?[], pg_get_object_addressResult>(tuple => new pg_get_object_addressResult() { classid = (int?)tuple[0], objid = (int?)tuple[1], subobjid = (int?)tuple[2] });
			MappingSchema.SetConvertExpression<object?[], pg_identify_objectResult>(tuple => new pg_identify_objectResult() { type = (string?)tuple[0], schema = (string?)tuple[1], name = (string?)tuple[2], identity = (string?)tuple[3] });
			MappingSchema.SetConvertExpression<object?[], pg_identify_object_as_addressResult>(tuple => new pg_identify_object_as_addressResult() { type = (string?)tuple[0], object_names = (object?)tuple[1], object_args = (object?)tuple[2] });
			MappingSchema.SetConvertExpression<object?[], pg_last_committed_xactResult>(tuple => new pg_last_committed_xactResult() { xid = (int?)tuple[0], timestamp = (NpgsqlDateTime?)tuple[1] });
			MappingSchema.SetConvertExpression<object?[], pg_sequence_parametersResult>(tuple => new pg_sequence_parametersResult() { start_value = (long?)tuple[0], minimum_value = (long?)tuple[1], maximum_value = (long?)tuple[2], increment = (long?)tuple[3], cycle_option = (bool?)tuple[4] });
			MappingSchema.SetConvertExpression<object?[], pg_stat_fileResult>(tuple => new pg_stat_fileResult() { size = (long?)tuple[0], access = (NpgsqlDateTime?)tuple[1], modification = (NpgsqlDateTime?)tuple[2], change = (NpgsqlDateTime?)tuple[3], creation = (NpgsqlDateTime?)tuple[4], isdir = (bool?)tuple[5] });
			MappingSchema.SetConvertExpression<object?[], pg_stat_get_archiverResult>(tuple => new pg_stat_get_archiverResult() { archived_count = (long?)tuple[0], last_archived_wal = (string?)tuple[1], last_archived_time = (NpgsqlDateTime?)tuple[2], failed_count = (long?)tuple[3], last_failed_wal = (string?)tuple[4], last_failed_time = (NpgsqlDateTime?)tuple[5], stats_reset = (NpgsqlDateTime?)tuple[6] });
			MappingSchema.SetConvertExpression<object?[], pg_xlogfile_name_offsetResult>(tuple => new pg_xlogfile_name_offsetResult() { file_name = (string?)tuple[0], file_offset = (int?)tuple[1] });
			MappingSchema.SetConvertExpression<object?[], TestFunctionParametersResult>(tuple => new TestFunctionParametersResult() { param2 = (int?)tuple[0], param3 = (int?)tuple[1] });
		}

		#region Table Functions

		#region PgExpandarray

		[Sql.TableFunction(Schema="information_schema", Name="_pg_expandarray")]
		public ITable<PgExpandarrayResult> PgExpandarray(object? par4)
		{
			return this.GetTable<PgExpandarrayResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par4);
		}

		public partial class PgExpandarrayResult
		{
			public int? x { get; set; }
			public int? n { get; set; }
		}

		#endregion

		#region Aclexplode

		[Sql.TableFunction(Schema="pg_catalog", Name="aclexplode")]
		public ITable<AclexplodeResult> Aclexplode(object? acl)
		{
			return this.GetTable<AclexplodeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				acl);
		}

		public partial class AclexplodeResult
		{
			public int?    grantor        { get; set; }
			public int?    grantee        { get; set; }
			public string? privilege_type { get; set; }
			public bool?   is_grantable   { get; set; }
		}

		#endregion

		#region GenerateSeries

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_series")]
		public ITable<GenerateSeriesResult> GenerateSeries(NpgsqlDateTime? par1958, NpgsqlDateTime? par1959, NpgsqlTimeSpan? par1960)
		{
			return this.GetTable<GenerateSeriesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1958,
				par1959,
				par1960);
		}

		public partial class GenerateSeriesResult
		{
			public NpgsqlDateTime? generate_series { get; set; }
		}

		#endregion

		#region GenerateSubscripts

		[Sql.TableFunction(Schema="pg_catalog", Name="generate_subscripts")]
		public ITable<GenerateSubscriptsResult> GenerateSubscripts(object? par1964, int? par1965)
		{
			return this.GetTable<GenerateSubscriptsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par1964,
				par1965);
		}

		public partial class GenerateSubscriptsResult
		{
			public int? generate_subscripts { get; set; }
		}

		#endregion

		#region GetParentByID

		[Sql.TableFunction(Schema="public", Name="\"GetParentByID\"")]
		public ITable<Parent> GetParentByID(int? id)
		{
			return this.GetTable<Parent>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				id);
		}

		#endregion

		#region JsonArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements")]
		public ITable<JsonArrayElementsResult> JsonArrayElements(string? from_json)
		{
			return this.GetTable<JsonArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsResult
		{
			public string? value { get; set; }
		}

		#endregion

		#region JsonArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_array_elements_text")]
		public ITable<JsonArrayElementsTextResult> JsonArrayElementsText(string? from_json)
		{
			return this.GetTable<JsonArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonArrayElementsTextResult
		{
			public string? value { get; set; }
		}

		#endregion

		#region JsonEach

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each")]
		public ITable<JsonEachResult> JsonEach(string? from_json)
		{
			return this.GetTable<JsonEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachResult
		{
			public string? key   { get; set; }
			public string? value { get; set; }
		}

		#endregion

		#region JsonEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="json_each_text")]
		public ITable<JsonEachTextResult> JsonEachText(string? from_json)
		{
			return this.GetTable<JsonEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonEachTextResult
		{
			public string? key   { get; set; }
			public string? value { get; set; }
		}

		#endregion

		#region JsonObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="json_object_keys")]
		public ITable<JsonObjectKeysResult> JsonObjectKeys(string? par3599)
		{
			return this.GetTable<JsonObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3599);
		}

		public partial class JsonObjectKeysResult
		{
			public string? json_object_keys { get; set; }
		}

		#endregion

		#region JsonPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="json_populate_recordset")]
		public ITable<JsonPopulateRecordsetResult> JsonPopulateRecordset(object? @base, string? from_json, bool? use_json_as_text)
		{
			return this.GetTable<JsonPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@base,
				from_json,
				use_json_as_text);
		}

		public partial class JsonPopulateRecordsetResult
		{
			public int? json_populate_recordset { get; set; }
		}

		#endregion

		#region JsonbArrayElements

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements")]
		public ITable<JsonbArrayElementsResult> JsonbArrayElements(string? from_json)
		{
			return this.GetTable<JsonbArrayElementsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsResult
		{
			public string? value { get; set; }
		}

		#endregion

		#region JsonbArrayElementsText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_array_elements_text")]
		public ITable<JsonbArrayElementsTextResult> JsonbArrayElementsText(string? from_json)
		{
			return this.GetTable<JsonbArrayElementsTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbArrayElementsTextResult
		{
			public string? value { get; set; }
		}

		#endregion

		#region JsonbEach

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each")]
		public ITable<JsonbEachResult> JsonbEach(string? from_json)
		{
			return this.GetTable<JsonbEachResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachResult
		{
			public string? key   { get; set; }
			public string? value { get; set; }
		}

		#endregion

		#region JsonbEachText

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_each_text")]
		public ITable<JsonbEachTextResult> JsonbEachText(string? from_json)
		{
			return this.GetTable<JsonbEachTextResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				from_json);
		}

		public partial class JsonbEachTextResult
		{
			public string? key   { get; set; }
			public string? value { get; set; }
		}

		#endregion

		#region JsonbObjectKeys

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_object_keys")]
		public ITable<JsonbObjectKeysResult> JsonbObjectKeys(string? par3700)
		{
			return this.GetTable<JsonbObjectKeysResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3700);
		}

		public partial class JsonbObjectKeysResult
		{
			public string? jsonb_object_keys { get; set; }
		}

		#endregion

		#region JsonbPopulateRecordset

		[Sql.TableFunction(Schema="pg_catalog", Name="jsonb_populate_recordset")]
		public ITable<JsonbPopulateRecordsetResult> JsonbPopulateRecordset(object? par3706, string? par3707)
		{
			return this.GetTable<JsonbPopulateRecordsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par3706,
				par3707);
		}

		public partial class JsonbPopulateRecordsetResult
		{
			public int? jsonb_populate_recordset { get; set; }
		}

		#endregion

		#region PgAvailableExtensionVersions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extension_versions")]
		public ITable<PgAvailableExtensionVersionsResult> PgAvailableExtensionVersions()
		{
			return this.GetTable<PgAvailableExtensionVersionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionVersionsResult
		{
			public string?   name        { get; set; }
			public string?   version     { get; set; }
			public bool?     superuser   { get; set; }
			public bool?     relocatable { get; set; }
			public string?   schema      { get; set; }
			public String[]? requires    { get; set; }
			public string?   comment     { get; set; }
		}

		#endregion

		#region PgAvailableExtensions

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_available_extensions")]
		public ITable<PgAvailableExtensionsResult> PgAvailableExtensions()
		{
			return this.GetTable<PgAvailableExtensionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgAvailableExtensionsResult
		{
			public string? name            { get; set; }
			public string? default_version { get; set; }
			public string? comment         { get; set; }
		}

		#endregion

		#region PgCursor

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_cursor")]
		public ITable<PgCursorResult> PgCursor()
		{
			return this.GetTable<PgCursorResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgCursorResult
		{
			public string?         name          { get; set; }
			public string?         statement     { get; set; }
			public bool?           is_holdable   { get; set; }
			public bool?           is_binary     { get; set; }
			public bool?           is_scrollable { get; set; }
			public NpgsqlDateTime? creation_time { get; set; }
		}

		#endregion

		#region PgEventTriggerDdlCommands

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_ddl_commands")]
		public ITable<PgEventTriggerDdlCommandsResult> PgEventTriggerDdlCommands()
		{
			return this.GetTable<PgEventTriggerDdlCommandsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDdlCommandsResult
		{
			public int?    classid         { get; set; }
			public int?    objid           { get; set; }
			public int?    objsubid        { get; set; }
			public string? command_tag     { get; set; }
			public string? object_type     { get; set; }
			public string? schema_name     { get; set; }
			public string? object_identity { get; set; }
			public bool?   in_extension    { get; set; }
			public object? command         { get; set; }
		}

		#endregion

		#region PgEventTriggerDroppedObjects

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_event_trigger_dropped_objects")]
		public ITable<PgEventTriggerDroppedObjectsResult> PgEventTriggerDroppedObjects()
		{
			return this.GetTable<PgEventTriggerDroppedObjectsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgEventTriggerDroppedObjectsResult
		{
			public int?      classid         { get; set; }
			public int?      objid           { get; set; }
			public int?      objsubid        { get; set; }
			public bool?     original        { get; set; }
			public bool?     normal          { get; set; }
			public bool?     is_temporary    { get; set; }
			public string?   object_type     { get; set; }
			public string?   schema_name     { get; set; }
			public string?   object_name     { get; set; }
			public string?   object_identity { get; set; }
			public String[]? address_names   { get; set; }
			public String[]? address_args    { get; set; }
		}

		#endregion

		#region PgExtensionUpdatePaths

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_extension_update_paths")]
		public ITable<PgExtensionUpdatePathsResult> PgExtensionUpdatePaths(string? name)
		{
			return this.GetTable<PgExtensionUpdatePathsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				name);
		}

		public partial class PgExtensionUpdatePathsResult
		{
			public string? source { get; set; }
			public string? target { get; set; }
			public string? path   { get; set; }
		}

		#endregion

		#region PgGetKeywords

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_keywords")]
		public ITable<PgGetKeywordsResult> PgGetKeywords()
		{
			return this.GetTable<PgGetKeywordsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetKeywordsResult
		{
			public string? word    { get; set; }
			public char?   catcode { get; set; }
			public string? catdesc { get; set; }
		}

		#endregion

		#region PgGetMultixactMembers

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_multixact_members")]
		public ITable<PgGetMultixactMembersResult> PgGetMultixactMembers(int? multixid)
		{
			return this.GetTable<PgGetMultixactMembersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				multixid);
		}

		public partial class PgGetMultixactMembersResult
		{
			public int?    xid  { get; set; }
			public string? mode { get; set; }
		}

		#endregion

		#region PgGetReplicationSlots

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_get_replication_slots")]
		public ITable<PgGetReplicationSlotsResult> PgGetReplicationSlots()
		{
			return this.GetTable<PgGetReplicationSlotsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgGetReplicationSlotsResult
		{
			public string? slot_name    { get; set; }
			public string? plugin       { get; set; }
			public string? slot_type    { get; set; }
			public int?    datoid       { get; set; }
			public bool?   active       { get; set; }
			public int?    active_pid   { get; set; }
			public int?    xmin         { get; set; }
			public int?    catalog_xmin { get; set; }
			public object? restart_lsn  { get; set; }
		}

		#endregion

		#region PgListeningChannels

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_listening_channels")]
		public ITable<PgListeningChannelsResult> PgListeningChannels()
		{
			return this.GetTable<PgListeningChannelsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgListeningChannelsResult
		{
			public string? pg_listening_channels { get; set; }
		}

		#endregion

		#region PgLockStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_lock_status")]
		public ITable<PgLockStatusResult> PgLockStatus()
		{
			return this.GetTable<PgLockStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgLockStatusResult
		{
			public string? locktype           { get; set; }
			public int?    database           { get; set; }
			public int?    relation           { get; set; }
			public int?    page               { get; set; }
			public short?  tuple              { get; set; }
			public string? virtualxid         { get; set; }
			public int?    transactionid      { get; set; }
			public int?    classid            { get; set; }
			public int?    objid              { get; set; }
			public short?  objsubid           { get; set; }
			public string? virtualtransaction { get; set; }
			public int?    pid                { get; set; }
			public string? mode               { get; set; }
			public bool?   granted            { get; set; }
			public bool?   fastpath           { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_binary_changes")]
		public ITable<PgLogicalSlotGetBinaryChangesResult> PgLogicalSlotGetBinaryChanges(string? slot_name, object? upto_lsn, int? upto_nchanges, object? options)
		{
			return this.GetTable<PgLogicalSlotGetBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetBinaryChangesResult
		{
			public object? location { get; set; }
			public int?    xid      { get; set; }
			public byte[]? data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotGetChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_get_changes")]
		public ITable<PgLogicalSlotGetChangesResult> PgLogicalSlotGetChanges(string? slot_name, object? upto_lsn, int? upto_nchanges, object? options)
		{
			return this.GetTable<PgLogicalSlotGetChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotGetChangesResult
		{
			public object? location { get; set; }
			public int?    xid      { get; set; }
			public string? data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekBinaryChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_binary_changes")]
		public ITable<PgLogicalSlotPeekBinaryChangesResult> PgLogicalSlotPeekBinaryChanges(string? slot_name, object? upto_lsn, int? upto_nchanges, object? options)
		{
			return this.GetTable<PgLogicalSlotPeekBinaryChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekBinaryChangesResult
		{
			public object? location { get; set; }
			public int?    xid      { get; set; }
			public byte[]? data     { get; set; }
		}

		#endregion

		#region PgLogicalSlotPeekChanges

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_logical_slot_peek_changes")]
		public ITable<PgLogicalSlotPeekChangesResult> PgLogicalSlotPeekChanges(string? slot_name, object? upto_lsn, int? upto_nchanges, object? options)
		{
			return this.GetTable<PgLogicalSlotPeekChangesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				slot_name,
				upto_lsn,
				upto_nchanges,
				options);
		}

		public partial class PgLogicalSlotPeekChangesResult
		{
			public object? location { get; set; }
			public int?    xid      { get; set; }
			public string? data     { get; set; }
		}

		#endregion

		#region PgLsDir

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_ls_dir")]
		public ITable<PgLsDirResult> PgLsDir(string? par5039, bool? par5040, bool? par5041)
		{
			return this.GetTable<PgLsDirResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5039,
				par5040,
				par5041);
		}

		public partial class PgLsDirResult
		{
			public string? pg_ls_dir { get; set; }
		}

		#endregion

		#region PgOptionsToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_options_to_table")]
		public ITable<PgOptionsToTableResult> PgOptionsToTable(object? options_array)
		{
			return this.GetTable<PgOptionsToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				options_array);
		}

		public partial class PgOptionsToTableResult
		{
			public string? option_name  { get; set; }
			public string? option_value { get; set; }
		}

		#endregion

		#region PgPreparedStatement

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_statement")]
		public ITable<PgPreparedStatementResult> PgPreparedStatement()
		{
			return this.GetTable<PgPreparedStatementResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedStatementResult
		{
			public string?         name            { get; set; }
			public string?         statement       { get; set; }
			public NpgsqlDateTime? prepare_time    { get; set; }
			public Array?          parameter_types { get; set; }
			public bool?           from_sql        { get; set; }
		}

		#endregion

		#region PgPreparedXact

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_prepared_xact")]
		public ITable<PgPreparedXactResult> PgPreparedXact()
		{
			return this.GetTable<PgPreparedXactResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgPreparedXactResult
		{
			public int?            transaction { get; set; }
			public string?         gid         { get; set; }
			public NpgsqlDateTime? prepared    { get; set; }
			public int?            ownerid     { get; set; }
			public int?            dbid        { get; set; }
		}

		#endregion

		#region PgShowAllFileSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_file_settings")]
		public ITable<PgShowAllFileSettingsResult> PgShowAllFileSettings()
		{
			return this.GetTable<PgShowAllFileSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllFileSettingsResult
		{
			public string? sourcefile { get; set; }
			public int?    sourceline { get; set; }
			public int?    seqno      { get; set; }
			public string? name       { get; set; }
			public string? setting    { get; set; }
			public bool?   applied    { get; set; }
			public string? error      { get; set; }
		}

		#endregion

		#region PgShowAllSettings

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_all_settings")]
		public ITable<PgShowAllSettingsResult> PgShowAllSettings()
		{
			return this.GetTable<PgShowAllSettingsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowAllSettingsResult
		{
			public string?   name            { get; set; }
			public string?   setting         { get; set; }
			public string?   unit            { get; set; }
			public string?   category        { get; set; }
			public string?   short_desc      { get; set; }
			public string?   extra_desc      { get; set; }
			public string?   context         { get; set; }
			public string?   vartype         { get; set; }
			public string?   source          { get; set; }
			public string?   min_val         { get; set; }
			public string?   max_val         { get; set; }
			public String[]? enumvals        { get; set; }
			public string?   boot_val        { get; set; }
			public string?   reset_val       { get; set; }
			public string?   sourcefile      { get; set; }
			public int?      sourceline      { get; set; }
			public bool?     pending_restart { get; set; }
		}

		#endregion

		#region PgShowReplicationOriginStatus

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_show_replication_origin_status")]
		public ITable<PgShowReplicationOriginStatusResult> PgShowReplicationOriginStatus()
		{
			return this.GetTable<PgShowReplicationOriginStatusResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgShowReplicationOriginStatusResult
		{
			public int?    local_id    { get; set; }
			public string? external_id { get; set; }
			public object? remote_lsn  { get; set; }
			public object? local_lsn   { get; set; }
		}

		#endregion

		#region PgStatGetActivity

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_activity")]
		public ITable<PgStatGetActivityResult> PgStatGetActivity(int? pid)
		{
			return this.GetTable<PgStatGetActivityResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				pid);
		}

		public partial class PgStatGetActivityResult
		{
			public int?            datid            { get; set; }
			public int?            pid              { get; set; }
			public int?            usesysid         { get; set; }
			public string?         application_name { get; set; }
			public string?         state            { get; set; }
			public string?         query            { get; set; }
			public bool?           waiting          { get; set; }
			public NpgsqlDateTime? xact_start       { get; set; }
			public NpgsqlDateTime? query_start      { get; set; }
			public NpgsqlDateTime? backend_start    { get; set; }
			public NpgsqlDateTime? state_change     { get; set; }
			public NpgsqlInet?     client_addr      { get; set; }
			public string?         client_hostname  { get; set; }
			public int?            client_port      { get; set; }
			public int?            backend_xid      { get; set; }
			public int?            backend_xmin     { get; set; }
			public bool?           ssl              { get; set; }
			public string?         sslversion       { get; set; }
			public string?         sslcipher        { get; set; }
			public int?            sslbits          { get; set; }
			public bool?           sslcompression   { get; set; }
			public string?         sslclientdn      { get; set; }
		}

		#endregion

		#region PgStatGetBackendIdset

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_backend_idset")]
		public ITable<PgStatGetBackendIdsetResult> PgStatGetBackendIdset()
		{
			return this.GetTable<PgStatGetBackendIdsetResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetBackendIdsetResult
		{
			public int? pg_stat_get_backend_idset { get; set; }
		}

		#endregion

		#region PgStatGetWalSenders

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_stat_get_wal_senders")]
		public ITable<PgStatGetWalSendersResult> PgStatGetWalSenders()
		{
			return this.GetTable<PgStatGetWalSendersResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgStatGetWalSendersResult
		{
			public int?    pid             { get; set; }
			public string? state           { get; set; }
			public object? sent_location   { get; set; }
			public object? write_location  { get; set; }
			public object? flush_location  { get; set; }
			public object? replay_location { get; set; }
			public int?    sync_priority   { get; set; }
			public string? sync_state      { get; set; }
		}

		#endregion

		#region PgTablespaceDatabases

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_tablespace_databases")]
		public ITable<PgTablespaceDatabasesResult> PgTablespaceDatabases(int? par5311)
		{
			return this.GetTable<PgTablespaceDatabasesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5311);
		}

		public partial class PgTablespaceDatabasesResult
		{
			public int? pg_tablespace_databases { get; set; }
		}

		#endregion

		#region PgTimezoneAbbrevs

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_abbrevs")]
		public ITable<PgTimezoneAbbrevsResult> PgTimezoneAbbrevs()
		{
			return this.GetTable<PgTimezoneAbbrevsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneAbbrevsResult
		{
			public string?         abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region PgTimezoneNames

		[Sql.TableFunction(Schema="pg_catalog", Name="pg_timezone_names")]
		public ITable<PgTimezoneNamesResult> PgTimezoneNames()
		{
			return this.GetTable<PgTimezoneNamesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class PgTimezoneNamesResult
		{
			public string?         name       { get; set; }
			public string?         abbrev     { get; set; }
			public NpgsqlTimeSpan? utc_offset { get; set; }
			public bool?           is_dst     { get; set; }
		}

		#endregion

		#region RegexpMatches

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_matches")]
		public ITable<RegexpMatchesResult> RegexpMatches(string? par5778, string? par5779, string? par5780)
		{
			return this.GetTable<RegexpMatchesResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5778,
				par5779,
				par5780);
		}

		public partial class RegexpMatchesResult
		{
			public String[]? regexp_matches { get; set; }
		}

		#endregion

		#region RegexpSplitToTable

		[Sql.TableFunction(Schema="pg_catalog", Name="regexp_split_to_table")]
		public ITable<RegexpSplitToTableResult> RegexpSplitToTable(string? par5799, string? par5800, string? par5801)
		{
			return this.GetTable<RegexpSplitToTableResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par5799,
				par5800,
				par5801);
		}

		public partial class RegexpSplitToTableResult
		{
			public string? regexp_split_to_table { get; set; }
		}

		#endregion

		#region TestTableFunction

		[Sql.TableFunction(Schema="public", Name="\"TestTableFunction\"")]
		public ITable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.GetTable<TestTableFunctionResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				param1);
		}

		public partial class TestTableFunctionResult
		{
			public int? param2 { get; set; }
		}

		#endregion

		#region TestTableFunction1

		[Sql.TableFunction(Schema="public", Name="\"TestTableFunction1\"")]
		public ITable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.GetTable<TestTableFunction1Result>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				param1,
				param2);
		}

		public partial class TestTableFunction1Result
		{
			public int? param3 { get; set; }
			public int? param4 { get; set; }
		}

		#endregion

		#region TestTableFunctionSchema

		[Sql.TableFunction(Schema="public", Name="\"TestTableFunctionSchema\"")]
		public ITable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.GetTable<TestTableFunctionSchemaResult>(this, (MethodInfo)MethodBase.GetCurrentMethod());
		}

		public partial class TestTableFunctionSchemaResult
		{
			public int?             ID                  { get; set; }
			public long?            bigintDataType      { get; set; }
			public decimal?         numericDataType     { get; set; }
			public short?           smallintDataType    { get; set; }
			public int?             intDataType         { get; set; }
			public decimal?         moneyDataType       { get; set; }
			public double?          doubleDataType      { get; set; }
			public float?           realDataType        { get; set; }
			public NpgsqlDateTime?  timestampDataType   { get; set; }
			public NpgsqlDateTime?  timestampTZDataType { get; set; }
			public NpgsqlDate?      dateDataType        { get; set; }
			public TimeSpan?        timeDataType        { get; set; }
			public DateTimeOffset?  timeTZDataType      { get; set; }
			public NpgsqlTimeSpan?  intervalDataType    { get; set; }
			public NpgsqlTimeSpan?  intervalDataType2   { get; set; }
			public char?            charDataType        { get; set; }
			public string?          char20DataType      { get; set; }
			public string?          varcharDataType     { get; set; }
			public string?          textDataType        { get; set; }
			public byte[]?          binaryDataType      { get; set; }
			public Guid?            uuidDataType        { get; set; }
			public BitArray?        bitDataType         { get; set; }
			public bool?            booleanDataType     { get; set; }
			public string?          colorDataType       { get; set; }
			public NpgsqlPoint?     pointDataType       { get; set; }
			public NpgsqlLSeg?      lsegDataType        { get; set; }
			public NpgsqlBox?       boxDataType         { get; set; }
			public NpgsqlPath?      pathDataType        { get; set; }
			public NpgsqlPolygon?   polygonDataType     { get; set; }
			public NpgsqlCircle?    circleDataType      { get; set; }
			public NpgsqlLine?      lineDataType        { get; set; }
			public NpgsqlInet?      inetDataType        { get; set; }
			public NpgsqlInet?      cidrDataType        { get; set; }
			public PhysicalAddress? macaddrDataType     { get; set; }
			public string?          jsonDataType        { get; set; }
			public string?          jsonbDataType       { get; set; }
			public string?          xmlDataType         { get; set; }
			public BitArray?        varBitDataType      { get; set; }
			public String[]?        strarray            { get; set; }
			public Int32[]?         intarray            { get; set; }
			public Int64[]?         int2darray          { get; set; }
			public Double[]?        longarray           { get; set; }
			public Decimal[]?       doublearray         { get; set; }
			public Decimal[]?       decimalarray        { get; set; }
		}

		#endregion

		#region TsDebug

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_debug")]
		public ITable<TsDebugResult> TsDebug(string? document)
		{
			return this.GetTable<TsDebugResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				document);
		}

		public partial class TsDebugResult
		{
			public string?   alias        { get; set; }
			public string?   description  { get; set; }
			public string?   token        { get; set; }
			public object?   dictionaries { get; set; }
			public object?   dictionary   { get; set; }
			public String[]? lexemes      { get; set; }
		}

		#endregion

		#region TsParse

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_parse")]
		public ITable<TsParseResult> TsParse(string? parser_name, string? txt)
		{
			return this.GetTable<TsParseResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name,
				txt);
		}

		public partial class TsParseResult
		{
			public int?    tokid { get; set; }
			public string? token { get; set; }
		}

		#endregion

		#region TsStat

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_stat")]
		public ITable<TsStatResult> TsStat(string? query, string? weights)
		{
			return this.GetTable<TsStatResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				query,
				weights);
		}

		public partial class TsStatResult
		{
			public string? word   { get; set; }
			public int?    ndoc   { get; set; }
			public int?    nentry { get; set; }
		}

		#endregion

		#region TsTokenType

		[Sql.TableFunction(Schema="pg_catalog", Name="ts_token_type")]
		public ITable<TsTokenTypeResult> TsTokenType(string? parser_name)
		{
			return this.GetTable<TsTokenTypeResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				parser_name);
		}

		public partial class TsTokenTypeResult
		{
			public int?    tokid       { get; set; }
			public string? alias       { get; set; }
			public string? description { get; set; }
		}

		#endregion

		#region TxidSnapshotXip

		[Sql.TableFunction(Schema="pg_catalog", Name="txid_snapshot_xip")]
		public ITable<TxidSnapshotXipResult> TxidSnapshotXip(object? par7172)
		{
			return this.GetTable<TxidSnapshotXipResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par7172);
		}

		public partial class TxidSnapshotXipResult
		{
			public long? txid_snapshot_xip { get; set; }
		}

		#endregion

		#region Unnest

		[Sql.TableFunction(Schema="pg_catalog", Name="unnest")]
		public ITable<UnnestResult> Unnest(object? par7194)
		{
			return this.GetTable<UnnestResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				par7194);
		}

		public partial class UnnestResult
		{
			public int? unnest { get; set; }
		}

		#endregion

		#endregion
	}

	public partial class pg_create_logical_replication_slotResult
	{
		public string? slot_name { get; set; }

		public object? xlog_position { get; set; }
	}

	public partial class pg_create_physical_replication_slotResult
	{
		public string? slot_name { get; set; }

		public object? xlog_position { get; set; }
	}

	public partial class pg_get_object_addressResult
	{
		public int? classid { get; set; }

		public int? objid { get; set; }

		public int? subobjid { get; set; }
	}

	public partial class pg_identify_objectResult
	{
		public string? type { get; set; }

		public string? schema { get; set; }

		public string? name { get; set; }

		public string? identity { get; set; }
	}

	public partial class pg_identify_object_as_addressResult
	{
		public string? type { get; set; }

		public object? object_names { get; set; }

		public object? object_args { get; set; }
	}

	public partial class pg_last_committed_xactResult
	{
		public int? xid { get; set; }

		public NpgsqlDateTime? timestamp { get; set; }
	}

	public partial class pg_sequence_parametersResult
	{
		public long? start_value { get; set; }

		public long? minimum_value { get; set; }

		public long? maximum_value { get; set; }

		public long? increment { get; set; }

		public bool? cycle_option { get; set; }
	}

	public partial class pg_stat_fileResult
	{
		public long? size { get; set; }

		public NpgsqlDateTime? access { get; set; }

		public NpgsqlDateTime? modification { get; set; }

		public NpgsqlDateTime? change { get; set; }

		public NpgsqlDateTime? creation { get; set; }

		public bool? isdir { get; set; }
	}

	public partial class pg_stat_get_archiverResult
	{
		public long? archived_count { get; set; }

		public string? last_archived_wal { get; set; }

		public NpgsqlDateTime? last_archived_time { get; set; }

		public long? failed_count { get; set; }

		public string? last_failed_wal { get; set; }

		public NpgsqlDateTime? last_failed_time { get; set; }

		public NpgsqlDateTime? stats_reset { get; set; }
	}

	public partial class pg_xlogfile_name_offsetResult
	{
		public string? file_name { get; set; }

		public int? file_offset { get; set; }
	}

	public partial class TestFunctionParametersResult
	{
		public int? param2 { get; set; }

		public int? param3 { get; set; }
	}

	[Table(Schema="public", Name="testsamename")]
	public partial class _testsamename
	{
		[Column("id", DataType=DataType.Int32, Precision=32, Scale=0), PrimaryKey, Identity] public int Id { get; set; } // integer
	}

	[Table(Schema="public", Name="AllTypes")]
	public partial class AllType
	{
		[Column(                       DataType=DataType.Int32,          Precision=32, Scale=0), PrimaryKey, Identity] public int              ID                  { get; set; } // integer
		[Column("bigintDataType",      DataType=DataType.Int64,          Precision=64, Scale=0), Nullable            ] public long?            BigintDataType      { get; set; } // bigint
		[Column("numericDataType",     DataType=DataType.Decimal),                               Nullable            ] public decimal?         NumericDataType     { get; set; } // numeric
		[Column("smallintDataType",    DataType=DataType.Int16,          Precision=16, Scale=0), Nullable            ] public short?           SmallintDataType    { get; set; } // smallint
		[Column("intDataType",         DataType=DataType.Int32,          Precision=32, Scale=0), Nullable            ] public int?             IntDataType         { get; set; } // integer
		[Column("moneyDataType",       DataType=DataType.Money),                                 Nullable            ] public decimal?         MoneyDataType       { get; set; } // money
		[Column("doubleDataType",      DataType=DataType.Double,         Precision=53),          Nullable            ] public double?          DoubleDataType      { get; set; } // double precision
		[Column("realDataType",        DataType=DataType.Single,         Precision=24),          Nullable            ] public float?           RealDataType        { get; set; } // real
		[Column("timestampDataType",   DataType=DataType.DateTime2,      Precision=6),           Nullable            ] public NpgsqlDateTime?  TimestampDataType   { get; set; } // timestamp (6) without time zone
		[Column("timestampTZDataType", DataType=DataType.DateTimeOffset, Precision=6),           Nullable            ] public NpgsqlDateTime?  TimestampTZDataType { get; set; } // timestamp (6) with time zone
		[Column("dateDataType",        DataType=DataType.Date,           Precision=0),           Nullable            ] public NpgsqlDate?      DateDataType        { get; set; } // date
		[Column("timeDataType",        DataType=DataType.Time,           Precision=6),           Nullable            ] public TimeSpan?        TimeDataType        { get; set; } // time (6) without time zone
		[Column("timeTZDataType",      DataType=DataType.Time,           Precision=6),           Nullable            ] public DateTimeOffset?  TimeTZDataType      { get; set; } // time (6) with time zone
		[Column("intervalDataType",    DataType=DataType.Interval,       Precision=6),           Nullable            ] public NpgsqlTimeSpan?  IntervalDataType    { get; set; } // interval(6)
		[Column("intervalDataType2",   DataType=DataType.Interval,       Precision=6),           Nullable            ] public NpgsqlTimeSpan?  IntervalDataType2   { get; set; } // interval(6)
		[Column("charDataType",        DataType=DataType.NChar,          Length=1),              Nullable            ] public char?            CharDataType        { get; set; } // character(1)
		[Column("char20DataType",      DataType=DataType.NChar,          Length=20),             Nullable            ] public string?          Char20DataType      { get; set; } // character(20)
		[Column("varcharDataType",     DataType=DataType.NVarChar,       Length=20),             Nullable            ] public string?          VarcharDataType     { get; set; } // character varying(20)
		[Column("textDataType",        DataType=DataType.Text),                                  Nullable            ] public string?          TextDataType        { get; set; } // text
		[Column("binaryDataType",      DataType=DataType.Binary),                                Nullable            ] public byte[]?          BinaryDataType      { get; set; } // bytea
		[Column("uuidDataType",        DataType=DataType.Guid),                                  Nullable            ] public Guid?            UuidDataType        { get; set; } // uuid
		[Column("bitDataType",         DataType=DataType.BitArray,       Length=3),              Nullable            ] public BitArray?        BitDataType         { get; set; } // bit(3)
		[Column("booleanDataType",     DataType=DataType.Boolean),                               Nullable            ] public bool?            BooleanDataType     { get; set; } // boolean
		[Column("colorDataType",       DataType=DataType.Udt),                                   Nullable            ] public object?          ColorDataType       { get; set; } // USER-DEFINED
		[Column("pointDataType",       DataType=DataType.Udt),                                   Nullable            ] public NpgsqlPoint?     PointDataType       { get; set; } // point
		[Column("lsegDataType",        DataType=DataType.Udt),                                   Nullable            ] public NpgsqlLSeg?      LsegDataType        { get; set; } // lseg
		[Column("boxDataType",         DataType=DataType.Udt),                                   Nullable            ] public NpgsqlBox?       BoxDataType         { get; set; } // box
		[Column("pathDataType",        DataType=DataType.Udt),                                   Nullable            ] public NpgsqlPath?      PathDataType        { get; set; } // path
		[Column("polygonDataType",     DataType=DataType.Udt),                                   Nullable            ] public NpgsqlPolygon?   PolygonDataType     { get; set; } // polygon
		[Column("circleDataType",      DataType=DataType.Udt),                                   Nullable            ] public NpgsqlCircle?    CircleDataType      { get; set; } // circle
		[Column("lineDataType",        DataType=DataType.Udt),                                   Nullable            ] public NpgsqlLine?      LineDataType        { get; set; } // line
		[Column("inetDataType",        DataType=DataType.Udt),                                   Nullable            ] public NpgsqlInet?      InetDataType        { get; set; } // inet
		[Column("cidrDataType",        DataType=DataType.Udt),                                   Nullable            ] public NpgsqlInet?      CidrDataType        { get; set; } // cidr
		[Column("macaddrDataType",     DataType=DataType.Udt),                                   Nullable            ] public PhysicalAddress? MacaddrDataType     { get; set; } // macaddr
		[Column("jsonDataType",        DataType=DataType.Json),                                  Nullable            ] public string?          JsonDataType        { get; set; } // json
		[Column("jsonbDataType",       DataType=DataType.BinaryJson),                            Nullable            ] public string?          JsonbDataType       { get; set; } // jsonb
		[Column("xmlDataType",         DataType=DataType.Xml),                                   Nullable            ] public string?          XmlDataType         { get; set; } // xml
		[Column("varBitDataType",      DataType=DataType.BitArray),                              Nullable            ] public BitArray?        VarBitDataType      { get; set; } // bit varying
		[Column("strarray",            DataType=DataType.Undefined),                             Nullable            ] public String[]?        Strarray            { get; set; } // text[]
		[Column("intarray",            DataType=DataType.Undefined),                             Nullable            ] public Int32[]?         Intarray            { get; set; } // integer[]
		[Column("int2darray",          DataType=DataType.Undefined),                             Nullable            ] public Int64[]?         Int2darray          { get; set; } // bigint[]
		[Column("longarray",           DataType=DataType.Undefined),                             Nullable            ] public Double[]?        Longarray           { get; set; } // double precision[]
		[Column("doublearray",         DataType=DataType.Undefined),                             Nullable            ] public Decimal[]?       Doublearray         { get; set; } // numeric[]
		[Column("decimalarray",        DataType=DataType.Undefined),                             Nullable            ] public Decimal[]?       Decimalarray        { get; set; } // numeric[]
	}

	[Table(Schema="public", Name="Child")]
	public partial class Child
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? ParentID { get; set; } // integer
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? ChildID  { get; set; } // integer
	}

	[Table(Schema="public", Name="Doctor")]
	public partial class Doctor
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey, NotNull] public int    PersonID { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),                         NotNull] public string Taxonomy { get; set; } = null!; // character varying(50)

		#region Associations

		/// <summary>
		/// Doctor_PersonID_fkey
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="Doctor_PersonID_fkey", BackReferenceName="DoctorPersonIDfkey")]
		public Person Person { get; set; } = null!;

		#endregion
	}

	[Table(Schema="public", Name="entity")]
	public partial class Entity
	{
		[Column("the_name", DataType=DataType.NVarChar, Length=255), NotNull] public string TheName { get; set; } = null!; // character varying(255)
	}

	[Table(Schema="public", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? ParentID     { get; set; } // integer
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? ChildID      { get; set; } // integer
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? GrandChildID { get; set; } // integer
	}

	[Table(Schema="public", Name="InheritanceChild")]
	public partial class InheritanceChild
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey,  NotNull] public int     InheritanceChildId  { get; set; } // integer
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0),              NotNull] public int     InheritanceParentId { get; set; } // integer
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0),    Nullable         ] public int?    TypeDiscriminator   { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),                Nullable         ] public string? Name                { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="InheritanceParent")]
	public partial class InheritanceParent
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey,  NotNull] public int     InheritanceParentId { get; set; } // integer
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0),    Nullable         ] public int?    TypeDiscriminator   { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),                Nullable         ] public string? Name                { get; set; } // character varying(50)
	}

	/// <summary>
	/// This is the Issue2023 matview
	/// </summary>
	[Table(Schema="public", Name="Issue2023", IsView=true)]
	public partial class Issue2023
	{
		/// <summary>
		/// This is the Issue2023.PersonID column
		/// </summary>
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0, SkipOnInsert=true, SkipOnUpdate=true), Nullable] public int?    PersonID   { get; set; } // int4
		[Column(DataType=DataType.NVarChar, Length=50, SkipOnInsert=true, SkipOnUpdate=true),             Nullable] public string? FirstName  { get; set; } // character varying(50)
		[Column(DataType=DataType.NVarChar, Length=50, SkipOnInsert=true, SkipOnUpdate=true),             Nullable] public string? LastName   { get; set; } // character varying(50)
		[Column(DataType=DataType.NVarChar, Length=50, SkipOnInsert=true, SkipOnUpdate=true),             Nullable] public string? MiddleName { get; set; } // character varying(50)
		[Column(DataType=DataType.NChar,    Length=1, SkipOnInsert=true, SkipOnUpdate=true),              Nullable] public char?   Gender     { get; set; } // character(1)
	}

	[Table(Schema="public", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column(DataType=DataType.Int32,     Precision=32, Scale=0), Nullable] public int?            ID             { get; set; } // integer
		[Column(DataType=DataType.Decimal,   Precision=10, Scale=4), Nullable] public decimal?        MoneyValue     { get; set; } // numeric(10,4)
		[Column(DataType=DataType.DateTime2, Precision=6),           Nullable] public NpgsqlDateTime? DateTimeValue  { get; set; } // timestamp (6) without time zone
		[Column(DataType=DataType.DateTime2, Precision=6),           Nullable] public NpgsqlDateTime? DateTimeValue2 { get; set; } // timestamp (6) without time zone
		[Column(DataType=DataType.Boolean),                          Nullable] public bool?           BoolValue      { get; set; } // boolean
		[Column(DataType=DataType.Guid),                             Nullable] public Guid?           GuidValue      { get; set; } // uuid
		[Column(DataType=DataType.Binary),                           Nullable] public byte[]?         BinaryValue    { get; set; } // bytea
		[Column(DataType=DataType.Int16,     Precision=16, Scale=0), Nullable] public short?          SmallIntValue  { get; set; } // smallint
		[Column(DataType=DataType.Int32,     Precision=32, Scale=0), Nullable] public int?            IntValue       { get; set; } // integer
		[Column(DataType=DataType.Int64,     Precision=64, Scale=0), Nullable] public long?           BigIntValue    { get; set; } // bigint
		[Column(DataType=DataType.NVarChar,  Length=50),             Nullable] public string?         StringValue    { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="Parent")]
	public partial class Parent
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? ParentID { get; set; } // integer
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), Nullable] public int? Value1   { get; set; } // integer
	}

	[Table(Schema="public", Name="Patient")]
	public partial class Patient
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey, NotNull] public int    PersonID  { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=256),                        NotNull] public string Diagnosis { get; set; } = null!; // character varying(256)

		#region Associations

		/// <summary>
		/// Patient_PersonID_fkey
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="Patient_PersonID_fkey", BackReferenceName="PatientPersonIDfkey")]
		public Person Person { get; set; } = null!;

		#endregion
	}

	/// <summary>
	/// This is the Person table
	/// </summary>
	[Table(Schema="public", Name="Person")]
	public partial class Person
	{
		/// <summary>
		/// This is the Person.PersonID column
		/// </summary>
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey,  Identity] public int     PersonID   { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),             NotNull              ] public string  FirstName  { get; set; } = null!; // character varying(50)
		[Column(DataType=DataType.NVarChar, Length=50),             NotNull              ] public string  LastName   { get; set; } = null!; // character varying(50)
		[Column(DataType=DataType.NVarChar, Length=50),                Nullable          ] public string? MiddleName { get; set; } // character varying(50)
		[Column(DataType=DataType.NChar,    Length=1),              NotNull              ] public char    Gender     { get; set; } // character(1)

		#region Associations

		/// <summary>
		/// Doctor_PersonID_fkey_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Doctor? DoctorPersonIDfkey { get; set; }

		/// <summary>
		/// Patient_PersonID_fkey_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Patient? PatientPersonIDfkey { get; set; }

		#endregion
	}

	[Table(Schema="public", Name="SequenceCustomNamingTest")]
	public partial class SequenceCustomNamingTest
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey, Identity] public int     ID    { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),             Nullable            ] public string? Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest1")]
	public partial class SequenceTest1
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey,  NotNull] public int     ID    { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),                Nullable         ] public string? Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest2")]
	public partial class SequenceTest2
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey, Identity] public int     ID    { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),             Nullable            ] public string? Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="SequenceTest3")]
	public partial class SequenceTest3
	{
		[Column(DataType=DataType.Int32,    Precision=32, Scale=0), PrimaryKey, Identity] public int     ID    { get; set; } // integer
		[Column(DataType=DataType.NVarChar, Length=50),             Nullable            ] public string? Value { get; set; } // character varying(50)
	}

	[Table(Schema="public", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), PrimaryKey, Identity] public int ID { get; set; } // integer
	}

	[Table(Schema="public", Name="TestMerge1")]
	public partial class TestMerge1
	{
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),  PrimaryKey,  NotNull] public int             Id              { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field1          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field2          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field3          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field4          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field5          { get; set; } // integer
		[Column(DataType=DataType.Int64,          Precision=64, Scale=0),     Nullable         ] public long?           FieldInt64      { get; set; } // bigint
		[Column(DataType=DataType.Boolean),                                   Nullable         ] public bool?           FieldBoolean    { get; set; } // boolean
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldString     { get; set; } // character varying(20)
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldNString    { get; set; } // character varying(20)
		[Column(DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldChar       { get; set; } // character(1)
		[Column(DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldNChar      { get; set; } // character(1)
		[Column(DataType=DataType.Single,         Precision=24),              Nullable         ] public float?          FieldFloat      { get; set; } // real
		[Column(DataType=DataType.Double,         Precision=53),              Nullable         ] public double?         FieldDouble     { get; set; } // double precision
		[Column(DataType=DataType.DateTime2,      Precision=6),               Nullable         ] public NpgsqlDateTime? FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column(DataType=DataType.DateTimeOffset, Precision=6),               Nullable         ] public NpgsqlDateTime? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column(DataType=DataType.Binary),                                    Nullable         ] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column(DataType=DataType.Guid),                                      Nullable         ] public Guid?           FieldGuid       { get; set; } // uuid
		[Column(DataType=DataType.Decimal,        Precision=24, Scale=10),    Nullable         ] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column(DataType=DataType.Date,           Precision=0),               Nullable         ] public NpgsqlDate?     FieldDate       { get; set; } // date
		[Column(DataType=DataType.Time,           Precision=6),               Nullable         ] public TimeSpan?       FieldTime       { get; set; } // time (6) without time zone
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table(Schema="public", Name="TestMerge2")]
	public partial class TestMerge2
	{
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),  PrimaryKey,  NotNull] public int             Id              { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field1          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field2          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field3          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field4          { get; set; } // integer
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            Field5          { get; set; } // integer
		[Column(DataType=DataType.Int64,          Precision=64, Scale=0),     Nullable         ] public long?           FieldInt64      { get; set; } // bigint
		[Column(DataType=DataType.Boolean),                                   Nullable         ] public bool?           FieldBoolean    { get; set; } // boolean
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldString     { get; set; } // character varying(20)
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldNString    { get; set; } // character varying(20)
		[Column(DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldChar       { get; set; } // character(1)
		[Column(DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldNChar      { get; set; } // character(1)
		[Column(DataType=DataType.Single,         Precision=24),              Nullable         ] public float?          FieldFloat      { get; set; } // real
		[Column(DataType=DataType.Double,         Precision=53),              Nullable         ] public double?         FieldDouble     { get; set; } // double precision
		[Column(DataType=DataType.DateTime2,      Precision=6),               Nullable         ] public NpgsqlDateTime? FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column(DataType=DataType.DateTimeOffset, Precision=6),               Nullable         ] public NpgsqlDateTime? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column(DataType=DataType.Binary),                                    Nullable         ] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column(DataType=DataType.Guid),                                      Nullable         ] public Guid?           FieldGuid       { get; set; } // uuid
		[Column(DataType=DataType.Decimal,        Precision=24, Scale=10),    Nullable         ] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column(DataType=DataType.Date,           Precision=0),               Nullable         ] public NpgsqlDate?     FieldDate       { get; set; } // date
		[Column(DataType=DataType.Time,           Precision=6),               Nullable         ] public TimeSpan?       FieldTime       { get; set; } // time (6) without time zone
		[Column(DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column(DataType=DataType.Int32,          Precision=32, Scale=0),     Nullable         ] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table(Schema="test_schema", Name="testsamename")]
	public partial class test_schema_Testsamename
	{
		[Column("id", DataType=DataType.Int32, Precision=32, Scale=0), PrimaryKey, Identity] public int Id { get; set; } // integer
	}

	[Table(Schema="test_schema", Name="TestSchemaIdentity")]
	public partial class test_schema_TestSchemaIdentity
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), PrimaryKey, Identity] public int ID { get; set; } // integer
	}

	[Table(Schema="test_schema", Name="testserialidentity")]
	public partial class test_schema_Testserialidentity
	{
		[Column(DataType=DataType.Int32, Precision=32, Scale=0), PrimaryKey, Identity] public int ID { get; set; } // integer
	}

	public static partial class SqlFunctions
	{
		#region PgCharMaxLength

		[Sql.Function(Name="information_schema._pg_char_max_length", ServerSideOnly=true)]
		public static int? PgCharMaxLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharOctetLength

		[Sql.Function(Name="information_schema._pg_char_octet_length", ServerSideOnly=true)]
		public static int? PgCharOctetLength(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatetimePrecision

		[Sql.Function(Name="information_schema._pg_datetime_precision", ServerSideOnly=true)]
		public static int? PgDatetimePrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexPosition

		[Sql.Function(Name="information_schema._pg_index_position", ServerSideOnly=true)]
		public static int? PgIndexPosition(int? par6, short? par7)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIntervalType

		[Sql.Function(Name="information_schema._pg_interval_type", ServerSideOnly=true)]
		public static string? PgIntervalType(int? typid, int? mod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgKeysequal

		[Sql.Function(Name="information_schema._pg_keysequal", ServerSideOnly=true)]
		public static bool? PgKeysequal(object? par10, object? par11)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecision

		[Sql.Function(Name="information_schema._pg_numeric_precision", ServerSideOnly=true)]
		public static int? PgNumericPrecision(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericPrecisionRadix

		[Sql.Function(Name="information_schema._pg_numeric_precision_radix", ServerSideOnly=true)]
		public static int? PgNumericPrecisionRadix(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNumericScale

		[Sql.Function(Name="information_schema._pg_numeric_scale", ServerSideOnly=true)]
		public static int? PgNumericScale(int? typid, int? typmod)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypid

		[Sql.Function(Name="information_schema._pg_truetypid", ServerSideOnly=true)]
		public static int? PgTruetypid(object? par16, object? par17)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTruetypmod

		[Sql.Function(Name="information_schema._pg_truetypmod", ServerSideOnly=true)]
		public static int? PgTruetypmod(object? par19, object? par20)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abbrev

		[Sql.Function(Name="pg_catalog.abbrev", ServerSideOnly=true)]
		public static string? Abbrev(NpgsqlInet? par24)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abs

		[Sql.Function(Name="pg_catalog.abs", ServerSideOnly=true)]
		public static decimal? Abs(decimal? par36)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstime

		[Sql.Function(Name="pg_catalog.abstime", ServerSideOnly=true)]
		public static object? Abstime(NpgsqlDateTime? par40)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimeeq

		[Sql.Function(Name="pg_catalog.abstimeeq", ServerSideOnly=true)]
		public static bool? Abstimeeq(object? par42, object? par43)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimege

		[Sql.Function(Name="pg_catalog.abstimege", ServerSideOnly=true)]
		public static bool? Abstimege(object? par45, object? par46)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimegt

		[Sql.Function(Name="pg_catalog.abstimegt", ServerSideOnly=true)]
		public static bool? Abstimegt(object? par48, object? par49)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimein

		[Sql.Function(Name="pg_catalog.abstimein", ServerSideOnly=true)]
		public static object? Abstimein(object? par51)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimele

		[Sql.Function(Name="pg_catalog.abstimele", ServerSideOnly=true)]
		public static bool? Abstimele(object? par53, object? par54)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimelt

		[Sql.Function(Name="pg_catalog.abstimelt", ServerSideOnly=true)]
		public static bool? Abstimelt(object? par56, object? par57)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimene

		[Sql.Function(Name="pg_catalog.abstimene", ServerSideOnly=true)]
		public static bool? Abstimene(object? par59, object? par60)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimeout

		[Sql.Function(Name="pg_catalog.abstimeout", ServerSideOnly=true)]
		public static object? Abstimeout(object? par62)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimerecv

		[Sql.Function(Name="pg_catalog.abstimerecv", ServerSideOnly=true)]
		public static object? Abstimerecv(object? par64)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Abstimesend

		[Sql.Function(Name="pg_catalog.abstimesend", ServerSideOnly=true)]
		public static byte[]? Abstimesend(object? par66)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclcontains

		[Sql.Function(Name="pg_catalog.aclcontains", ServerSideOnly=true)]
		public static bool? Aclcontains(object? par68, object? par69)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acldefault

		[Sql.Function(Name="pg_catalog.acldefault", ServerSideOnly=true)]
		public static object? Acldefault(object? par71, int? par72)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclinsert

		[Sql.Function(Name="pg_catalog.aclinsert", ServerSideOnly=true)]
		public static object? Aclinsert(object? par74, object? par75)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemeq

		[Sql.Function(Name="pg_catalog.aclitemeq", ServerSideOnly=true)]
		public static bool? Aclitemeq(object? par77, object? par78)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemin

		[Sql.Function(Name="pg_catalog.aclitemin", ServerSideOnly=true)]
		public static object? Aclitemin(object? par80)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclitemout

		[Sql.Function(Name="pg_catalog.aclitemout", ServerSideOnly=true)]
		public static object? Aclitemout(object? par82)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Aclremove

		[Sql.Function(Name="pg_catalog.aclremove", ServerSideOnly=true)]
		public static object? Aclremove(object? par84, object? par85)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Acos

		[Sql.Function(Name="pg_catalog.acos", ServerSideOnly=true)]
		public static double? Acos(double? par87)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AddIfNotExists

		[Sql.Function(Name="public.add_if_not_exists", ServerSideOnly=true)]
		public static object? AddIfNotExists(string? p_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Addissue792record

		[Sql.Function(Name="public.addissue792record", ServerSideOnly=true)]
		public static object? Addissue792record()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Age

		[Sql.Function(Name="pg_catalog.age", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Age(NpgsqlDateTime? par99)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyIn

		[Sql.Function(Name="pg_catalog.any_in", ServerSideOnly=true)]
		public static object? AnyIn(object? par101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyOut

		[Sql.Function(Name="pg_catalog.any_out", ServerSideOnly=true)]
		public static object? AnyOut(object? par103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayIn

		[Sql.Function(Name="pg_catalog.anyarray_in", ServerSideOnly=true)]
		public static object? AnyarrayIn(object? par105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayOut

		[Sql.Function(Name="pg_catalog.anyarray_out", ServerSideOnly=true)]
		public static object? AnyarrayOut(object? par107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarrayRecv

		[Sql.Function(Name="pg_catalog.anyarray_recv", ServerSideOnly=true)]
		public static object? AnyarrayRecv(object? par109)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyarraySend

		[Sql.Function(Name="pg_catalog.anyarray_send", ServerSideOnly=true)]
		public static byte[]? AnyarraySend(object? par111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementIn

		[Sql.Function(Name="pg_catalog.anyelement_in", ServerSideOnly=true)]
		public static object? AnyelementIn(object? par113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyelementOut

		[Sql.Function(Name="pg_catalog.anyelement_out", ServerSideOnly=true)]
		public static object? AnyelementOut(object? par115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumIn

		[Sql.Function(Name="pg_catalog.anyenum_in", ServerSideOnly=true)]
		public static object? AnyenumIn(object? par117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyenumOut

		[Sql.Function(Name="pg_catalog.anyenum_out", ServerSideOnly=true)]
		public static object? AnyenumOut(object? par119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayIn

		[Sql.Function(Name="pg_catalog.anynonarray_in", ServerSideOnly=true)]
		public static object? AnynonarrayIn(object? par121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnynonarrayOut

		[Sql.Function(Name="pg_catalog.anynonarray_out", ServerSideOnly=true)]
		public static object? AnynonarrayOut(object? par123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeIn

		[Sql.Function(Name="pg_catalog.anyrange_in", ServerSideOnly=true)]
		public static object? AnyrangeIn(object? par125, int? par126, int? par127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AnyrangeOut

		[Sql.Function(Name="pg_catalog.anyrange_out", ServerSideOnly=true)]
		public static object? AnyrangeOut(object? par129)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Anytextcat

		[Sql.Function(Name="pg_catalog.anytextcat", ServerSideOnly=true)]
		public static string? Anytextcat(object? par131, string? par132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Area

		[Sql.Function(Name="pg_catalog.area", ServerSideOnly=true)]
		public static double? Area(NpgsqlPath? par138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areajoinsel

		[Sql.Function(Name="pg_catalog.areajoinsel", ServerSideOnly=true)]
		public static double? Areajoinsel(object? par140, int? par141, object? par142, short? par143, object? par144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Areasel

		[Sql.Function(Name="pg_catalog.areasel", ServerSideOnly=true)]
		public static double? Areasel(object? par146, int? par147, object? par148, int? par149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAgg

		[Sql.Function(Name="pg_catalog.array_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object? ArrayAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_array_finalfn", ServerSideOnly=true)]
		public static object? ArrayAggArrayFinalfn(object? par155, object? par156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggArrayTransfn

		[Sql.Function(Name="pg_catalog.array_agg_array_transfn", ServerSideOnly=true)]
		public static object? ArrayAggArrayTransfn(object? par158, object? par159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggFinalfn

		[Sql.Function(Name="pg_catalog.array_agg_finalfn", ServerSideOnly=true)]
		public static object? ArrayAggFinalfn(object? par161, object? par162)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAggTransfn

		[Sql.Function(Name="pg_catalog.array_agg_transfn", ServerSideOnly=true)]
		public static object? ArrayAggTransfn(object? par164, object? par165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayAppend

		[Sql.Function(Name="pg_catalog.array_append", ServerSideOnly=true)]
		public static object? ArrayAppend(object? par167, object? par168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayCat

		[Sql.Function(Name="pg_catalog.array_cat", ServerSideOnly=true)]
		public static object? ArrayCat(object? par170, object? par171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayDims

		[Sql.Function(Name="pg_catalog.array_dims", ServerSideOnly=true)]
		public static string? ArrayDims(object? par173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayEq

		[Sql.Function(Name="pg_catalog.array_eq", ServerSideOnly=true)]
		public static bool? ArrayEq(object? par175, object? par176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayFill

		[Sql.Function(Name="pg_catalog.array_fill", ServerSideOnly=true)]
		public static object? ArrayFill(object? par181, object? par182, object? par183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGe

		[Sql.Function(Name="pg_catalog.array_ge", ServerSideOnly=true)]
		public static bool? ArrayGe(object? par185, object? par186)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayGt

		[Sql.Function(Name="pg_catalog.array_gt", ServerSideOnly=true)]
		public static bool? ArrayGt(object? par188, object? par189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayIn

		[Sql.Function(Name="pg_catalog.array_in", ServerSideOnly=true)]
		public static object? ArrayIn(object? par191, int? par192, int? par193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLarger

		[Sql.Function(Name="pg_catalog.array_larger", ServerSideOnly=true)]
		public static object? ArrayLarger(object? par195, object? par196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLe

		[Sql.Function(Name="pg_catalog.array_le", ServerSideOnly=true)]
		public static bool? ArrayLe(object? par198, object? par199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLength

		[Sql.Function(Name="pg_catalog.array_length", ServerSideOnly=true)]
		public static int? ArrayLength(object? par201, int? par202)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLower

		[Sql.Function(Name="pg_catalog.array_lower", ServerSideOnly=true)]
		public static int? ArrayLower(object? par204, int? par205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayLt

		[Sql.Function(Name="pg_catalog.array_lt", ServerSideOnly=true)]
		public static bool? ArrayLt(object? par207, object? par208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNdims

		[Sql.Function(Name="pg_catalog.array_ndims", ServerSideOnly=true)]
		public static int? ArrayNdims(object? par210)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayNe

		[Sql.Function(Name="pg_catalog.array_ne", ServerSideOnly=true)]
		public static bool? ArrayNe(object? par212, object? par213)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayOut

		[Sql.Function(Name="pg_catalog.array_out", ServerSideOnly=true)]
		public static object? ArrayOut(object? par215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPosition

		[Sql.Function(Name="pg_catalog.array_position", ServerSideOnly=true)]
		public static int? ArrayPosition(object? par220, object? par221, int? par222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPositions

		[Sql.Function(Name="pg_catalog.array_positions", ServerSideOnly=true)]
		public static object? ArrayPositions(object? par224, object? par225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayPrepend

		[Sql.Function(Name="pg_catalog.array_prepend", ServerSideOnly=true)]
		public static object? ArrayPrepend(object? par227, object? par228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRecv

		[Sql.Function(Name="pg_catalog.array_recv", ServerSideOnly=true)]
		public static object? ArrayRecv(object? par230, int? par231, int? par232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayRemove

		[Sql.Function(Name="pg_catalog.array_remove", ServerSideOnly=true)]
		public static object? ArrayRemove(object? par234, object? par235)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayReplace

		[Sql.Function(Name="pg_catalog.array_replace", ServerSideOnly=true)]
		public static object? ArrayReplace(object? par237, object? par238, object? par239)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySend

		[Sql.Function(Name="pg_catalog.array_send", ServerSideOnly=true)]
		public static byte[]? ArraySend(object? par241)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArraySmaller

		[Sql.Function(Name="pg_catalog.array_smaller", ServerSideOnly=true)]
		public static object? ArraySmaller(object? par243, object? par244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToJson

		[Sql.Function(Name="pg_catalog.array_to_json", ServerSideOnly=true)]
		public static string? ArrayToJson(object? par248, bool? par249)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayToString

		[Sql.Function(Name="pg_catalog.array_to_string", ServerSideOnly=true)]
		public static string? ArrayToString(object? par255, string? par256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayTypanalyze

		[Sql.Function(Name="pg_catalog.array_typanalyze", ServerSideOnly=true)]
		public static bool? ArrayTypanalyze(object? par258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ArrayUpper

		[Sql.Function(Name="pg_catalog.array_upper", ServerSideOnly=true)]
		public static int? ArrayUpper(object? par260, int? par261)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontained

		[Sql.Function(Name="pg_catalog.arraycontained", ServerSideOnly=true)]
		public static bool? Arraycontained(object? par263, object? par264)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontains

		[Sql.Function(Name="pg_catalog.arraycontains", ServerSideOnly=true)]
		public static bool? Arraycontains(object? par266, object? par267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontjoinsel

		[Sql.Function(Name="pg_catalog.arraycontjoinsel", ServerSideOnly=true)]
		public static double? Arraycontjoinsel(object? par269, int? par270, object? par271, short? par272, object? par273)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arraycontsel

		[Sql.Function(Name="pg_catalog.arraycontsel", ServerSideOnly=true)]
		public static double? Arraycontsel(object? par275, int? par276, object? par277, int? par278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Arrayoverlap

		[Sql.Function(Name="pg_catalog.arrayoverlap", ServerSideOnly=true)]
		public static bool? Arrayoverlap(object? par280, object? par281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ascii

		[Sql.Function(Name="pg_catalog.ascii", ServerSideOnly=true)]
		public static int? Ascii(string? par283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToMic

		[Sql.Function(Name="pg_catalog.ascii_to_mic", ServerSideOnly=true)]
		public static object? AsciiToMic(int? par284, int? par285, object? par286, object? par287, int? par288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region AsciiToUtf8

		[Sql.Function(Name="pg_catalog.ascii_to_utf8", ServerSideOnly=true)]
		public static object? AsciiToUtf8(int? par289, int? par290, object? par291, object? par292, int? par293)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Asin

		[Sql.Function(Name="pg_catalog.asin", ServerSideOnly=true)]
		public static double? Asin(double? par295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan

		[Sql.Function(Name="pg_catalog.atan", ServerSideOnly=true)]
		public static double? Atan(double? par297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Atan2

		[Sql.Function(Name="pg_catalog.atan2", ServerSideOnly=true)]
		public static double? Atan2(double? par299, double? par300)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Avg

		[Sql.Function(Name="pg_catalog.avg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlTimeSpan? Avg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlTimeSpan?>> par314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bernoulli

		[Sql.Function(Name="pg_catalog.bernoulli", ServerSideOnly=true)]
		public static object? Bernoulli(object? par316)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToEucTw

		[Sql.Function(Name="pg_catalog.big5_to_euc_tw", ServerSideOnly=true)]
		public static object? Big5ToEucTw(int? par317, int? par318, object? par319, object? par320, int? par321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToMic

		[Sql.Function(Name="pg_catalog.big5_to_mic", ServerSideOnly=true)]
		public static object? Big5ToMic(int? par322, int? par323, object? par324, object? par325, int? par326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Big5ToUtf8

		[Sql.Function(Name="pg_catalog.big5_to_utf8", ServerSideOnly=true)]
		public static object? Big5ToUtf8(int? par327, int? par328, object? par329, object? par330, int? par331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeCreateEmptyExtension

		[Sql.Function(Name="pg_catalog.binary_upgrade_create_empty_extension", ServerSideOnly=true)]
		public static object? BinaryUpgradeCreateEmptyExtension(string? par332, string? par333, bool? par334, string? par335, object? par336, object? par337, object? par338)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextArrayPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_array_pg_type_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextArrayPgTypeOid(int? par339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextHeapPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_heap_pg_class_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextHeapPgClassOid(int? par340)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextIndexPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_index_pg_class_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextIndexPgClassOid(int? par341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgAuthidOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_authid_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextPgAuthidOid(int? par342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgEnumOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_enum_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextPgEnumOid(int? par343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_pg_type_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextPgTypeOid(int? par344)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgClassOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_class_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextToastPgClassOid(int? par345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BinaryUpgradeSetNextToastPgTypeOid

		[Sql.Function(Name="pg_catalog.binary_upgrade_set_next_toast_pg_type_oid", ServerSideOnly=true)]
		public static object? BinaryUpgradeSetNextToastPgTypeOid(int? par346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bit

		[Sql.Function(Name="pg_catalog.bit", ServerSideOnly=true)]
		public static BitArray? Bit(long? par355, int? par356)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitAnd

		[Sql.Function(Name="pg_catalog.bit_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray? BitAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray?>> par364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitIn

		[Sql.Function(Name="pg_catalog.bit_in", ServerSideOnly=true)]
		public static BitArray? BitIn(object? par366, int? par367, int? par368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitLength

		[Sql.Function(Name="pg_catalog.bit_length", ServerSideOnly=true)]
		public static int? BitLength(BitArray? par374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOr

		[Sql.Function(Name="pg_catalog.bit_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static BitArray? BitOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, BitArray?>> par382)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitOut

		[Sql.Function(Name="pg_catalog.bit_out", ServerSideOnly=true)]
		public static object? BitOut(BitArray? par384)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitRecv

		[Sql.Function(Name="pg_catalog.bit_recv", ServerSideOnly=true)]
		public static BitArray? BitRecv(object? par386, int? par387, int? par388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BitSend

		[Sql.Function(Name="pg_catalog.bit_send", ServerSideOnly=true)]
		public static byte[]? BitSend(BitArray? par390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitand

		[Sql.Function(Name="pg_catalog.bitand", ServerSideOnly=true)]
		public static BitArray? Bitand(BitArray? par392, BitArray? par393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcat

		[Sql.Function(Name="pg_catalog.bitcat", ServerSideOnly=true)]
		public static BitArray? Bitcat(BitArray? par395, BitArray? par396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitcmp

		[Sql.Function(Name="pg_catalog.bitcmp", ServerSideOnly=true)]
		public static int? Bitcmp(BitArray? par398, BitArray? par399)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Biteq

		[Sql.Function(Name="pg_catalog.biteq", ServerSideOnly=true)]
		public static bool? Biteq(BitArray? par401, BitArray? par402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitge

		[Sql.Function(Name="pg_catalog.bitge", ServerSideOnly=true)]
		public static bool? Bitge(BitArray? par404, BitArray? par405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitgt

		[Sql.Function(Name="pg_catalog.bitgt", ServerSideOnly=true)]
		public static bool? Bitgt(BitArray? par407, BitArray? par408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitle

		[Sql.Function(Name="pg_catalog.bitle", ServerSideOnly=true)]
		public static bool? Bitle(BitArray? par410, BitArray? par411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitlt

		[Sql.Function(Name="pg_catalog.bitlt", ServerSideOnly=true)]
		public static bool? Bitlt(BitArray? par413, BitArray? par414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitne

		[Sql.Function(Name="pg_catalog.bitne", ServerSideOnly=true)]
		public static bool? Bitne(BitArray? par416, BitArray? par417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitnot

		[Sql.Function(Name="pg_catalog.bitnot", ServerSideOnly=true)]
		public static BitArray? Bitnot(BitArray? par419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitor

		[Sql.Function(Name="pg_catalog.bitor", ServerSideOnly=true)]
		public static BitArray? Bitor(BitArray? par421, BitArray? par422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftleft

		[Sql.Function(Name="pg_catalog.bitshiftleft", ServerSideOnly=true)]
		public static BitArray? Bitshiftleft(BitArray? par424, int? par425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitshiftright

		[Sql.Function(Name="pg_catalog.bitshiftright", ServerSideOnly=true)]
		public static BitArray? Bitshiftright(BitArray? par427, int? par428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodin

		[Sql.Function(Name="pg_catalog.bittypmodin", ServerSideOnly=true)]
		public static int? Bittypmodin(object? par430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bittypmodout

		[Sql.Function(Name="pg_catalog.bittypmodout", ServerSideOnly=true)]
		public static object? Bittypmodout(int? par432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bitxor

		[Sql.Function(Name="pg_catalog.bitxor", ServerSideOnly=true)]
		public static BitArray? Bitxor(BitArray? par434, BitArray? par435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bool

		[Sql.Function(Name="pg_catalog.bool", ServerSideOnly=true)]
		public static bool? Bool(int? par437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bool

		[Sql.Function(Name="public.bool", ServerSideOnly=true)]
		public static string? Bool0(int? param)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccum

		[Sql.Function(Name="pg_catalog.bool_accum", ServerSideOnly=true)]
		public static object? BoolAccum(object? par440, bool? par441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAccumInv

		[Sql.Function(Name="pg_catalog.bool_accum_inv", ServerSideOnly=true)]
		public static object? BoolAccumInv(object? par443, bool? par444)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAlltrue

		[Sql.Function(Name="pg_catalog.bool_alltrue", ServerSideOnly=true)]
		public static bool? BoolAlltrue(object? par446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnd

		[Sql.Function(Name="pg_catalog.bool_and", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolAnd<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolAnytrue

		[Sql.Function(Name="pg_catalog.bool_anytrue", ServerSideOnly=true)]
		public static bool? BoolAnytrue(object? par450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolOr

		[Sql.Function(Name="pg_catalog.bool_or", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? BoolOr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolandStatefunc

		[Sql.Function(Name="pg_catalog.booland_statefunc", ServerSideOnly=true)]
		public static bool? BoolandStatefunc(bool? par454, bool? par455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Booleq

		[Sql.Function(Name="pg_catalog.booleq", ServerSideOnly=true)]
		public static bool? Booleq(bool? par457, bool? par458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolge

		[Sql.Function(Name="pg_catalog.boolge", ServerSideOnly=true)]
		public static bool? Boolge(bool? par460, bool? par461)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolgt

		[Sql.Function(Name="pg_catalog.boolgt", ServerSideOnly=true)]
		public static bool? Boolgt(bool? par463, bool? par464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolin

		[Sql.Function(Name="pg_catalog.boolin", ServerSideOnly=true)]
		public static bool? Boolin(object? par466)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolle

		[Sql.Function(Name="pg_catalog.boolle", ServerSideOnly=true)]
		public static bool? Boolle(bool? par468, bool? par469)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boollt

		[Sql.Function(Name="pg_catalog.boollt", ServerSideOnly=true)]
		public static bool? Boollt(bool? par471, bool? par472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolne

		[Sql.Function(Name="pg_catalog.boolne", ServerSideOnly=true)]
		public static bool? Boolne(bool? par474, bool? par475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoolorStatefunc

		[Sql.Function(Name="pg_catalog.boolor_statefunc", ServerSideOnly=true)]
		public static bool? BoolorStatefunc(bool? par477, bool? par478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolout

		[Sql.Function(Name="pg_catalog.boolout", ServerSideOnly=true)]
		public static object? Boolout(bool? par480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolrecv

		[Sql.Function(Name="pg_catalog.boolrecv", ServerSideOnly=true)]
		public static bool? Boolrecv(object? par482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Boolsend

		[Sql.Function(Name="pg_catalog.boolsend", ServerSideOnly=true)]
		public static byte[]? Boolsend(bool? par484)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoundBox

		[Sql.Function(Name="pg_catalog.bound_box", ServerSideOnly=true)]
		public static NpgsqlBox? BoundBox(NpgsqlBox? par486, NpgsqlBox? par487)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Box

		[Sql.Function(Name="pg_catalog.box", ServerSideOnly=true)]
		public static NpgsqlBox? Box(NpgsqlPoint? par496)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAbove

		[Sql.Function(Name="pg_catalog.box_above", ServerSideOnly=true)]
		public static bool? BoxAbove(NpgsqlBox? par498, NpgsqlBox? par499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAboveEq

		[Sql.Function(Name="pg_catalog.box_above_eq", ServerSideOnly=true)]
		public static bool? BoxAboveEq(NpgsqlBox? par501, NpgsqlBox? par502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxAdd

		[Sql.Function(Name="pg_catalog.box_add", ServerSideOnly=true)]
		public static NpgsqlBox? BoxAdd(NpgsqlBox? par504, NpgsqlPoint? par505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelow

		[Sql.Function(Name="pg_catalog.box_below", ServerSideOnly=true)]
		public static bool? BoxBelow(NpgsqlBox? par507, NpgsqlBox? par508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxBelowEq

		[Sql.Function(Name="pg_catalog.box_below_eq", ServerSideOnly=true)]
		public static bool? BoxBelowEq(NpgsqlBox? par510, NpgsqlBox? par511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxCenter

		[Sql.Function(Name="pg_catalog.box_center", ServerSideOnly=true)]
		public static NpgsqlPoint? BoxCenter(NpgsqlBox? par513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContain

		[Sql.Function(Name="pg_catalog.box_contain", ServerSideOnly=true)]
		public static bool? BoxContain(NpgsqlBox? par515, NpgsqlBox? par516)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContainPt

		[Sql.Function(Name="pg_catalog.box_contain_pt", ServerSideOnly=true)]
		public static bool? BoxContainPt(NpgsqlBox? par518, NpgsqlPoint? par519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxContained

		[Sql.Function(Name="pg_catalog.box_contained", ServerSideOnly=true)]
		public static bool? BoxContained(NpgsqlBox? par521, NpgsqlBox? par522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDistance

		[Sql.Function(Name="pg_catalog.box_distance", ServerSideOnly=true)]
		public static double? BoxDistance(NpgsqlBox? par524, NpgsqlBox? par525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxDiv

		[Sql.Function(Name="pg_catalog.box_div", ServerSideOnly=true)]
		public static NpgsqlBox? BoxDiv(NpgsqlBox? par527, NpgsqlPoint? par528)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxEq

		[Sql.Function(Name="pg_catalog.box_eq", ServerSideOnly=true)]
		public static bool? BoxEq(NpgsqlBox? par530, NpgsqlBox? par531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGe

		[Sql.Function(Name="pg_catalog.box_ge", ServerSideOnly=true)]
		public static bool? BoxGe(NpgsqlBox? par533, NpgsqlBox? par534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxGt

		[Sql.Function(Name="pg_catalog.box_gt", ServerSideOnly=true)]
		public static bool? BoxGt(NpgsqlBox? par536, NpgsqlBox? par537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIn

		[Sql.Function(Name="pg_catalog.box_in", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIn(object? par539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxIntersect

		[Sql.Function(Name="pg_catalog.box_intersect", ServerSideOnly=true)]
		public static NpgsqlBox? BoxIntersect(NpgsqlBox? par541, NpgsqlBox? par542)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLe

		[Sql.Function(Name="pg_catalog.box_le", ServerSideOnly=true)]
		public static bool? BoxLe(NpgsqlBox? par544, NpgsqlBox? par545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLeft

		[Sql.Function(Name="pg_catalog.box_left", ServerSideOnly=true)]
		public static bool? BoxLeft(NpgsqlBox? par547, NpgsqlBox? par548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxLt

		[Sql.Function(Name="pg_catalog.box_lt", ServerSideOnly=true)]
		public static bool? BoxLt(NpgsqlBox? par550, NpgsqlBox? par551)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxMul

		[Sql.Function(Name="pg_catalog.box_mul", ServerSideOnly=true)]
		public static NpgsqlBox? BoxMul(NpgsqlBox? par553, NpgsqlPoint? par554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOut

		[Sql.Function(Name="pg_catalog.box_out", ServerSideOnly=true)]
		public static object? BoxOut(NpgsqlBox? par556)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverabove

		[Sql.Function(Name="pg_catalog.box_overabove", ServerSideOnly=true)]
		public static bool? BoxOverabove(NpgsqlBox? par558, NpgsqlBox? par559)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverbelow

		[Sql.Function(Name="pg_catalog.box_overbelow", ServerSideOnly=true)]
		public static bool? BoxOverbelow(NpgsqlBox? par561, NpgsqlBox? par562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverlap

		[Sql.Function(Name="pg_catalog.box_overlap", ServerSideOnly=true)]
		public static bool? BoxOverlap(NpgsqlBox? par564, NpgsqlBox? par565)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverleft

		[Sql.Function(Name="pg_catalog.box_overleft", ServerSideOnly=true)]
		public static bool? BoxOverleft(NpgsqlBox? par567, NpgsqlBox? par568)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxOverright

		[Sql.Function(Name="pg_catalog.box_overright", ServerSideOnly=true)]
		public static bool? BoxOverright(NpgsqlBox? par570, NpgsqlBox? par571)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRecv

		[Sql.Function(Name="pg_catalog.box_recv", ServerSideOnly=true)]
		public static NpgsqlBox? BoxRecv(object? par573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxRight

		[Sql.Function(Name="pg_catalog.box_right", ServerSideOnly=true)]
		public static bool? BoxRight(NpgsqlBox? par575, NpgsqlBox? par576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSame

		[Sql.Function(Name="pg_catalog.box_same", ServerSideOnly=true)]
		public static bool? BoxSame(NpgsqlBox? par578, NpgsqlBox? par579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSend

		[Sql.Function(Name="pg_catalog.box_send", ServerSideOnly=true)]
		public static byte[]? BoxSend(NpgsqlBox? par581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BoxSub

		[Sql.Function(Name="pg_catalog.box_sub", ServerSideOnly=true)]
		public static NpgsqlBox? BoxSub(NpgsqlBox? par583, NpgsqlPoint? par584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchar

		[Sql.Function(Name="pg_catalog.bpchar", ServerSideOnly=true)]
		public static string? Bpchar(object? par592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharLarger

		[Sql.Function(Name="pg_catalog.bpchar_larger", ServerSideOnly=true)]
		public static string? BpcharLarger(string? par594, string? par595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_ge", ServerSideOnly=true)]
		public static bool? BpcharPatternGe(string? par597, string? par598)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternGt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_gt", ServerSideOnly=true)]
		public static bool? BpcharPatternGt(string? par600, string? par601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLe

		[Sql.Function(Name="pg_catalog.bpchar_pattern_le", ServerSideOnly=true)]
		public static bool? BpcharPatternLe(string? par603, string? par604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharPatternLt

		[Sql.Function(Name="pg_catalog.bpchar_pattern_lt", ServerSideOnly=true)]
		public static bool? BpcharPatternLt(string? par606, string? par607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BpcharSmaller

		[Sql.Function(Name="pg_catalog.bpchar_smaller", ServerSideOnly=true)]
		public static string? BpcharSmaller(string? par609, string? par610)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharcmp

		[Sql.Function(Name="pg_catalog.bpcharcmp", ServerSideOnly=true)]
		public static int? Bpcharcmp(string? par612, string? par613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchareq

		[Sql.Function(Name="pg_catalog.bpchareq", ServerSideOnly=true)]
		public static bool? Bpchareq(string? par615, string? par616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharge

		[Sql.Function(Name="pg_catalog.bpcharge", ServerSideOnly=true)]
		public static bool? Bpcharge(string? par618, string? par619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchargt

		[Sql.Function(Name="pg_catalog.bpchargt", ServerSideOnly=true)]
		public static bool? Bpchargt(string? par621, string? par622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchariclike

		[Sql.Function(Name="pg_catalog.bpchariclike", ServerSideOnly=true)]
		public static bool? Bpchariclike(string? par624, string? par625)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicnlike

		[Sql.Function(Name="pg_catalog.bpcharicnlike", ServerSideOnly=true)]
		public static bool? Bpcharicnlike(string? par627, string? par628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexeq

		[Sql.Function(Name="pg_catalog.bpcharicregexeq", ServerSideOnly=true)]
		public static bool? Bpcharicregexeq(string? par630, string? par631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharicregexne

		[Sql.Function(Name="pg_catalog.bpcharicregexne", ServerSideOnly=true)]
		public static bool? Bpcharicregexne(string? par633, string? par634)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharin

		[Sql.Function(Name="pg_catalog.bpcharin", ServerSideOnly=true)]
		public static string? Bpcharin(object? par636, int? par637, int? par638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharle

		[Sql.Function(Name="pg_catalog.bpcharle", ServerSideOnly=true)]
		public static bool? Bpcharle(string? par640, string? par641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlike

		[Sql.Function(Name="pg_catalog.bpcharlike", ServerSideOnly=true)]
		public static bool? Bpcharlike(string? par643, string? par644)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharlt

		[Sql.Function(Name="pg_catalog.bpcharlt", ServerSideOnly=true)]
		public static bool? Bpcharlt(string? par646, string? par647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharne

		[Sql.Function(Name="pg_catalog.bpcharne", ServerSideOnly=true)]
		public static bool? Bpcharne(string? par649, string? par650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharnlike

		[Sql.Function(Name="pg_catalog.bpcharnlike", ServerSideOnly=true)]
		public static bool? Bpcharnlike(string? par652, string? par653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharout

		[Sql.Function(Name="pg_catalog.bpcharout", ServerSideOnly=true)]
		public static object? Bpcharout(string? par655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharrecv

		[Sql.Function(Name="pg_catalog.bpcharrecv", ServerSideOnly=true)]
		public static string? Bpcharrecv(object? par657, int? par658, int? par659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexeq

		[Sql.Function(Name="pg_catalog.bpcharregexeq", ServerSideOnly=true)]
		public static bool? Bpcharregexeq(string? par661, string? par662)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharregexne

		[Sql.Function(Name="pg_catalog.bpcharregexne", ServerSideOnly=true)]
		public static bool? Bpcharregexne(string? par664, string? par665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpcharsend

		[Sql.Function(Name="pg_catalog.bpcharsend", ServerSideOnly=true)]
		public static byte[]? Bpcharsend(string? par667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodin

		[Sql.Function(Name="pg_catalog.bpchartypmodin", ServerSideOnly=true)]
		public static int? Bpchartypmodin(object? par669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bpchartypmodout

		[Sql.Function(Name="pg_catalog.bpchartypmodout", ServerSideOnly=true)]
		public static object? Bpchartypmodout(int? par671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionAddValue

		[Sql.Function(Name="pg_catalog.brin_inclusion_add_value", ServerSideOnly=true)]
		public static bool? BrinInclusionAddValue(object? par673, object? par674, object? par675, object? par676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionConsistent

		[Sql.Function(Name="pg_catalog.brin_inclusion_consistent", ServerSideOnly=true)]
		public static bool? BrinInclusionConsistent(object? par678, object? par679, object? par680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionOpcinfo

		[Sql.Function(Name="pg_catalog.brin_inclusion_opcinfo", ServerSideOnly=true)]
		public static object? BrinInclusionOpcinfo(object? par682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinInclusionUnion

		[Sql.Function(Name="pg_catalog.brin_inclusion_union", ServerSideOnly=true)]
		public static bool? BrinInclusionUnion(object? par684, object? par685, object? par686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxAddValue

		[Sql.Function(Name="pg_catalog.brin_minmax_add_value", ServerSideOnly=true)]
		public static bool? BrinMinmaxAddValue(object? par688, object? par689, object? par690, object? par691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxConsistent

		[Sql.Function(Name="pg_catalog.brin_minmax_consistent", ServerSideOnly=true)]
		public static bool? BrinMinmaxConsistent(object? par693, object? par694, object? par695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxOpcinfo

		[Sql.Function(Name="pg_catalog.brin_minmax_opcinfo", ServerSideOnly=true)]
		public static object? BrinMinmaxOpcinfo(object? par697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinMinmaxUnion

		[Sql.Function(Name="pg_catalog.brin_minmax_union", ServerSideOnly=true)]
		public static bool? BrinMinmaxUnion(object? par699, object? par700, object? par701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BrinSummarizeNewValues

		[Sql.Function(Name="pg_catalog.brin_summarize_new_values", ServerSideOnly=true)]
		public static int? BrinSummarizeNewValues(object? par703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinbeginscan

		[Sql.Function(Name="pg_catalog.brinbeginscan", ServerSideOnly=true)]
		public static object? Brinbeginscan(object? par705, object? par706, object? par707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinbuild

		[Sql.Function(Name="pg_catalog.brinbuild", ServerSideOnly=true)]
		public static object? Brinbuild(object? par709, object? par710, object? par711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinbuildempty

		[Sql.Function(Name="pg_catalog.brinbuildempty", ServerSideOnly=true)]
		public static object? Brinbuildempty(object? par712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinbulkdelete

		[Sql.Function(Name="pg_catalog.brinbulkdelete", ServerSideOnly=true)]
		public static object? Brinbulkdelete(object? par714, object? par715, object? par716, object? par717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brincostestimate

		[Sql.Function(Name="pg_catalog.brincostestimate", ServerSideOnly=true)]
		public static object? Brincostestimate(object? par718, object? par719, object? par720, object? par721, object? par722, object? par723, object? par724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinendscan

		[Sql.Function(Name="pg_catalog.brinendscan", ServerSideOnly=true)]
		public static object? Brinendscan(object? par725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bringetbitmap

		[Sql.Function(Name="pg_catalog.bringetbitmap", ServerSideOnly=true)]
		public static long? Bringetbitmap(object? par727, object? par728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brininsert

		[Sql.Function(Name="pg_catalog.brininsert", ServerSideOnly=true)]
		public static bool? Brininsert(object? par730, object? par731, object? par732, object? par733, object? par734, object? par735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinmarkpos

		[Sql.Function(Name="pg_catalog.brinmarkpos", ServerSideOnly=true)]
		public static object? Brinmarkpos(object? par736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinoptions

		[Sql.Function(Name="pg_catalog.brinoptions", ServerSideOnly=true)]
		public static byte[]? Brinoptions(object? par738, bool? par739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinrescan

		[Sql.Function(Name="pg_catalog.brinrescan", ServerSideOnly=true)]
		public static object? Brinrescan(object? par740, object? par741, object? par742, object? par743, object? par744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinrestrpos

		[Sql.Function(Name="pg_catalog.brinrestrpos", ServerSideOnly=true)]
		public static object? Brinrestrpos(object? par745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Brinvacuumcleanup

		[Sql.Function(Name="pg_catalog.brinvacuumcleanup", ServerSideOnly=true)]
		public static object? Brinvacuumcleanup(object? par747, object? par748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Broadcast

		[Sql.Function(Name="pg_catalog.broadcast", ServerSideOnly=true)]
		public static NpgsqlInet? Broadcast(NpgsqlInet? par750)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btabstimecmp

		[Sql.Function(Name="pg_catalog.btabstimecmp", ServerSideOnly=true)]
		public static int? Btabstimecmp(object? par752, object? par753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btarraycmp

		[Sql.Function(Name="pg_catalog.btarraycmp", ServerSideOnly=true)]
		public static int? Btarraycmp(object? par755, object? par756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btbeginscan

		[Sql.Function(Name="pg_catalog.btbeginscan", ServerSideOnly=true)]
		public static object? Btbeginscan(object? par758, object? par759, object? par760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btboolcmp

		[Sql.Function(Name="pg_catalog.btboolcmp", ServerSideOnly=true)]
		public static int? Btboolcmp(bool? par762, bool? par763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BtbpcharPatternCmp

		[Sql.Function(Name="pg_catalog.btbpchar_pattern_cmp", ServerSideOnly=true)]
		public static int? BtbpcharPatternCmp(string? par765, string? par766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btbuild

		[Sql.Function(Name="pg_catalog.btbuild", ServerSideOnly=true)]
		public static object? Btbuild(object? par768, object? par769, object? par770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btbuildempty

		[Sql.Function(Name="pg_catalog.btbuildempty", ServerSideOnly=true)]
		public static object? Btbuildempty(object? par771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btbulkdelete

		[Sql.Function(Name="pg_catalog.btbulkdelete", ServerSideOnly=true)]
		public static object? Btbulkdelete(object? par773, object? par774, object? par775, object? par776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btcanreturn

		[Sql.Function(Name="pg_catalog.btcanreturn", ServerSideOnly=true)]
		public static bool? Btcanreturn(object? par778, int? par779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btcharcmp

		[Sql.Function(Name="pg_catalog.btcharcmp", ServerSideOnly=true)]
		public static int? Btcharcmp(object? par781, object? par782)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btcostestimate

		[Sql.Function(Name="pg_catalog.btcostestimate", ServerSideOnly=true)]
		public static object? Btcostestimate(object? par783, object? par784, object? par785, object? par786, object? par787, object? par788, object? par789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btendscan

		[Sql.Function(Name="pg_catalog.btendscan", ServerSideOnly=true)]
		public static object? Btendscan(object? par790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat48cmp

		[Sql.Function(Name="pg_catalog.btfloat48cmp", ServerSideOnly=true)]
		public static int? Btfloat48cmp(float? par792, double? par793)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4cmp

		[Sql.Function(Name="pg_catalog.btfloat4cmp", ServerSideOnly=true)]
		public static int? Btfloat4cmp(float? par795, float? par796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat4sortsupport

		[Sql.Function(Name="pg_catalog.btfloat4sortsupport", ServerSideOnly=true)]
		public static object? Btfloat4sortsupport(object? par797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat84cmp

		[Sql.Function(Name="pg_catalog.btfloat84cmp", ServerSideOnly=true)]
		public static int? Btfloat84cmp(double? par799, float? par800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8cmp

		[Sql.Function(Name="pg_catalog.btfloat8cmp", ServerSideOnly=true)]
		public static int? Btfloat8cmp(double? par802, double? par803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btfloat8sortsupport

		[Sql.Function(Name="pg_catalog.btfloat8sortsupport", ServerSideOnly=true)]
		public static object? Btfloat8sortsupport(object? par804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btgetbitmap

		[Sql.Function(Name="pg_catalog.btgetbitmap", ServerSideOnly=true)]
		public static long? Btgetbitmap(object? par806, object? par807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btgettuple

		[Sql.Function(Name="pg_catalog.btgettuple", ServerSideOnly=true)]
		public static bool? Btgettuple(object? par809, object? par810)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btinsert

		[Sql.Function(Name="pg_catalog.btinsert", ServerSideOnly=true)]
		public static bool? Btinsert(object? par812, object? par813, object? par814, object? par815, object? par816, object? par817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint24cmp

		[Sql.Function(Name="pg_catalog.btint24cmp", ServerSideOnly=true)]
		public static int? Btint24cmp(short? par819, int? par820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint28cmp

		[Sql.Function(Name="pg_catalog.btint28cmp", ServerSideOnly=true)]
		public static int? Btint28cmp(short? par822, long? par823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2cmp

		[Sql.Function(Name="pg_catalog.btint2cmp", ServerSideOnly=true)]
		public static int? Btint2cmp(short? par825, short? par826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint2sortsupport

		[Sql.Function(Name="pg_catalog.btint2sortsupport", ServerSideOnly=true)]
		public static object? Btint2sortsupport(object? par827)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint42cmp

		[Sql.Function(Name="pg_catalog.btint42cmp", ServerSideOnly=true)]
		public static int? Btint42cmp(int? par829, short? par830)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint48cmp

		[Sql.Function(Name="pg_catalog.btint48cmp", ServerSideOnly=true)]
		public static int? Btint48cmp(int? par832, long? par833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4cmp

		[Sql.Function(Name="pg_catalog.btint4cmp", ServerSideOnly=true)]
		public static int? Btint4cmp(int? par835, int? par836)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint4sortsupport

		[Sql.Function(Name="pg_catalog.btint4sortsupport", ServerSideOnly=true)]
		public static object? Btint4sortsupport(object? par837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint82cmp

		[Sql.Function(Name="pg_catalog.btint82cmp", ServerSideOnly=true)]
		public static int? Btint82cmp(long? par839, short? par840)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint84cmp

		[Sql.Function(Name="pg_catalog.btint84cmp", ServerSideOnly=true)]
		public static int? Btint84cmp(long? par842, int? par843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8cmp

		[Sql.Function(Name="pg_catalog.btint8cmp", ServerSideOnly=true)]
		public static int? Btint8cmp(long? par845, long? par846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btint8sortsupport

		[Sql.Function(Name="pg_catalog.btint8sortsupport", ServerSideOnly=true)]
		public static object? Btint8sortsupport(object? par847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btmarkpos

		[Sql.Function(Name="pg_catalog.btmarkpos", ServerSideOnly=true)]
		public static object? Btmarkpos(object? par848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamecmp

		[Sql.Function(Name="pg_catalog.btnamecmp", ServerSideOnly=true)]
		public static int? Btnamecmp(string? par850, string? par851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btnamesortsupport

		[Sql.Function(Name="pg_catalog.btnamesortsupport", ServerSideOnly=true)]
		public static object? Btnamesortsupport(object? par852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidcmp

		[Sql.Function(Name="pg_catalog.btoidcmp", ServerSideOnly=true)]
		public static int? Btoidcmp(int? par854, int? par855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidsortsupport

		[Sql.Function(Name="pg_catalog.btoidsortsupport", ServerSideOnly=true)]
		public static object? Btoidsortsupport(object? par856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoidvectorcmp

		[Sql.Function(Name="pg_catalog.btoidvectorcmp", ServerSideOnly=true)]
		public static int? Btoidvectorcmp(object? par858, object? par859)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btoptions

		[Sql.Function(Name="pg_catalog.btoptions", ServerSideOnly=true)]
		public static byte[]? Btoptions(object? par861, bool? par862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordcmp

		[Sql.Function(Name="pg_catalog.btrecordcmp", ServerSideOnly=true)]
		public static int? Btrecordcmp(object? par864, object? par865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrecordimagecmp

		[Sql.Function(Name="pg_catalog.btrecordimagecmp", ServerSideOnly=true)]
		public static int? Btrecordimagecmp(object? par867, object? par868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btreltimecmp

		[Sql.Function(Name="pg_catalog.btreltimecmp", ServerSideOnly=true)]
		public static int? Btreltimecmp(object? par870, object? par871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrescan

		[Sql.Function(Name="pg_catalog.btrescan", ServerSideOnly=true)]
		public static object? Btrescan(object? par872, object? par873, object? par874, object? par875, object? par876)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrestrpos

		[Sql.Function(Name="pg_catalog.btrestrpos", ServerSideOnly=true)]
		public static object? Btrestrpos(object? par877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btrim

		[Sql.Function(Name="pg_catalog.btrim", ServerSideOnly=true)]
		public static string? Btrim(string? par885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region BttextPatternCmp

		[Sql.Function(Name="pg_catalog.bttext_pattern_cmp", ServerSideOnly=true)]
		public static int? BttextPatternCmp(string? par887, string? par888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextcmp

		[Sql.Function(Name="pg_catalog.bttextcmp", ServerSideOnly=true)]
		public static int? Bttextcmp(string? par890, string? par891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttextsortsupport

		[Sql.Function(Name="pg_catalog.bttextsortsupport", ServerSideOnly=true)]
		public static object? Bttextsortsupport(object? par892)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttidcmp

		[Sql.Function(Name="pg_catalog.bttidcmp", ServerSideOnly=true)]
		public static int? Bttidcmp(object? par894, object? par895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bttintervalcmp

		[Sql.Function(Name="pg_catalog.bttintervalcmp", ServerSideOnly=true)]
		public static int? Bttintervalcmp(object? par897, object? par898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Btvacuumcleanup

		[Sql.Function(Name="pg_catalog.btvacuumcleanup", ServerSideOnly=true)]
		public static object? Btvacuumcleanup(object? par900, object? par901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggFinalfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_finalfn", ServerSideOnly=true)]
		public static byte[]? ByteaStringAggFinalfn(object? par903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ByteaStringAggTransfn

		[Sql.Function(Name="pg_catalog.bytea_string_agg_transfn", ServerSideOnly=true)]
		public static object? ByteaStringAggTransfn(object? par905, byte[]? par906, byte[]? par907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacat

		[Sql.Function(Name="pg_catalog.byteacat", ServerSideOnly=true)]
		public static byte[]? Byteacat(byte[]? par909, byte[]? par910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteacmp

		[Sql.Function(Name="pg_catalog.byteacmp", ServerSideOnly=true)]
		public static int? Byteacmp(byte[]? par912, byte[]? par913)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaeq

		[Sql.Function(Name="pg_catalog.byteaeq", ServerSideOnly=true)]
		public static bool? Byteaeq(byte[]? par915, byte[]? par916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteage

		[Sql.Function(Name="pg_catalog.byteage", ServerSideOnly=true)]
		public static bool? Byteage(byte[]? par918, byte[]? par919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteagt

		[Sql.Function(Name="pg_catalog.byteagt", ServerSideOnly=true)]
		public static bool? Byteagt(byte[]? par921, byte[]? par922)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteain

		[Sql.Function(Name="pg_catalog.byteain", ServerSideOnly=true)]
		public static byte[]? Byteain(object? par924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteale

		[Sql.Function(Name="pg_catalog.byteale", ServerSideOnly=true)]
		public static bool? Byteale(byte[]? par926, byte[]? par927)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealike

		[Sql.Function(Name="pg_catalog.bytealike", ServerSideOnly=true)]
		public static bool? Bytealike(byte[]? par929, byte[]? par930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytealt

		[Sql.Function(Name="pg_catalog.bytealt", ServerSideOnly=true)]
		public static bool? Bytealt(byte[]? par932, byte[]? par933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteane

		[Sql.Function(Name="pg_catalog.byteane", ServerSideOnly=true)]
		public static bool? Byteane(byte[]? par935, byte[]? par936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteanlike

		[Sql.Function(Name="pg_catalog.byteanlike", ServerSideOnly=true)]
		public static bool? Byteanlike(byte[]? par938, byte[]? par939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteaout

		[Sql.Function(Name="pg_catalog.byteaout", ServerSideOnly=true)]
		public static object? Byteaout(byte[]? par941)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Bytearecv

		[Sql.Function(Name="pg_catalog.bytearecv", ServerSideOnly=true)]
		public static byte[]? Bytearecv(object? par943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Byteasend

		[Sql.Function(Name="pg_catalog.byteasend", ServerSideOnly=true)]
		public static byte[]? Byteasend(byte[]? par945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cardinality

		[Sql.Function(Name="pg_catalog.cardinality", ServerSideOnly=true)]
		public static int? Cardinality(object? par947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashCmp

		[Sql.Function(Name="pg_catalog.cash_cmp", ServerSideOnly=true)]
		public static int? CashCmp(decimal? par949, decimal? par950)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivCash

		[Sql.Function(Name="pg_catalog.cash_div_cash", ServerSideOnly=true)]
		public static double? CashDivCash(decimal? par952, decimal? par953)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt4

		[Sql.Function(Name="pg_catalog.cash_div_flt4", ServerSideOnly=true)]
		public static decimal? CashDivFlt4(decimal? par955, float? par956)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivFlt8

		[Sql.Function(Name="pg_catalog.cash_div_flt8", ServerSideOnly=true)]
		public static decimal? CashDivFlt8(decimal? par958, double? par959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt2

		[Sql.Function(Name="pg_catalog.cash_div_int2", ServerSideOnly=true)]
		public static decimal? CashDivInt2(decimal? par961, short? par962)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashDivInt4

		[Sql.Function(Name="pg_catalog.cash_div_int4", ServerSideOnly=true)]
		public static decimal? CashDivInt4(decimal? par964, int? par965)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashEq

		[Sql.Function(Name="pg_catalog.cash_eq", ServerSideOnly=true)]
		public static bool? CashEq(decimal? par967, decimal? par968)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGe

		[Sql.Function(Name="pg_catalog.cash_ge", ServerSideOnly=true)]
		public static bool? CashGe(decimal? par970, decimal? par971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashGt

		[Sql.Function(Name="pg_catalog.cash_gt", ServerSideOnly=true)]
		public static bool? CashGt(decimal? par973, decimal? par974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashIn

		[Sql.Function(Name="pg_catalog.cash_in", ServerSideOnly=true)]
		public static decimal? CashIn(object? par976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLe

		[Sql.Function(Name="pg_catalog.cash_le", ServerSideOnly=true)]
		public static bool? CashLe(decimal? par978, decimal? par979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashLt

		[Sql.Function(Name="pg_catalog.cash_lt", ServerSideOnly=true)]
		public static bool? CashLt(decimal? par981, decimal? par982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMi

		[Sql.Function(Name="pg_catalog.cash_mi", ServerSideOnly=true)]
		public static decimal? CashMi(decimal? par984, decimal? par985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt4

		[Sql.Function(Name="pg_catalog.cash_mul_flt4", ServerSideOnly=true)]
		public static decimal? CashMulFlt4(decimal? par987, float? par988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulFlt8

		[Sql.Function(Name="pg_catalog.cash_mul_flt8", ServerSideOnly=true)]
		public static decimal? CashMulFlt8(decimal? par990, double? par991)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt2

		[Sql.Function(Name="pg_catalog.cash_mul_int2", ServerSideOnly=true)]
		public static decimal? CashMulInt2(decimal? par993, short? par994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashMulInt4

		[Sql.Function(Name="pg_catalog.cash_mul_int4", ServerSideOnly=true)]
		public static decimal? CashMulInt4(decimal? par996, int? par997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashNe

		[Sql.Function(Name="pg_catalog.cash_ne", ServerSideOnly=true)]
		public static bool? CashNe(decimal? par999, decimal? par1000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashOut

		[Sql.Function(Name="pg_catalog.cash_out", ServerSideOnly=true)]
		public static object? CashOut(decimal? par1002)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashPl

		[Sql.Function(Name="pg_catalog.cash_pl", ServerSideOnly=true)]
		public static decimal? CashPl(decimal? par1004, decimal? par1005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashRecv

		[Sql.Function(Name="pg_catalog.cash_recv", ServerSideOnly=true)]
		public static decimal? CashRecv(object? par1007)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashSend

		[Sql.Function(Name="pg_catalog.cash_send", ServerSideOnly=true)]
		public static byte[]? CashSend(decimal? par1009)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CashWords

		[Sql.Function(Name="pg_catalog.cash_words", ServerSideOnly=true)]
		public static string? CashWords(decimal? par1011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashlarger

		[Sql.Function(Name="pg_catalog.cashlarger", ServerSideOnly=true)]
		public static decimal? Cashlarger(decimal? par1013, decimal? par1014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cashsmaller

		[Sql.Function(Name="pg_catalog.cashsmaller", ServerSideOnly=true)]
		public static decimal? Cashsmaller(decimal? par1016, decimal? par1017)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cbrt

		[Sql.Function(Name="pg_catalog.cbrt", ServerSideOnly=true)]
		public static double? Cbrt(double? par1019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceil

		[Sql.Function(Name="pg_catalog.ceil", ServerSideOnly=true)]
		public static double? Ceil(double? par1023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ceiling

		[Sql.Function(Name="pg_catalog.ceiling", ServerSideOnly=true)]
		public static double? Ceiling(double? par1027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Center

		[Sql.Function(Name="pg_catalog.center", ServerSideOnly=true)]
		public static NpgsqlPoint? Center(NpgsqlCircle? par1031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Char

		[Sql.Function(Name="pg_catalog.char", ServerSideOnly=true)]
		public static object? Char(string? par1035)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharLength

		[Sql.Function(Name="pg_catalog.char_length", ServerSideOnly=true)]
		public static int? CharLength(string? par1039)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CharacterLength

		[Sql.Function(Name="pg_catalog.character_length", ServerSideOnly=true)]
		public static int? CharacterLength(string? par1043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chareq

		[Sql.Function(Name="pg_catalog.chareq", ServerSideOnly=true)]
		public static bool? Chareq(object? par1045, object? par1046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charge

		[Sql.Function(Name="pg_catalog.charge", ServerSideOnly=true)]
		public static bool? Charge(object? par1048, object? par1049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chargt

		[Sql.Function(Name="pg_catalog.chargt", ServerSideOnly=true)]
		public static bool? Chargt(object? par1051, object? par1052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charin

		[Sql.Function(Name="pg_catalog.charin", ServerSideOnly=true)]
		public static object? Charin(object? par1054)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charle

		[Sql.Function(Name="pg_catalog.charle", ServerSideOnly=true)]
		public static bool? Charle(object? par1056, object? par1057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charlt

		[Sql.Function(Name="pg_catalog.charlt", ServerSideOnly=true)]
		public static bool? Charlt(object? par1059, object? par1060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charne

		[Sql.Function(Name="pg_catalog.charne", ServerSideOnly=true)]
		public static bool? Charne(object? par1062, object? par1063)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charout

		[Sql.Function(Name="pg_catalog.charout", ServerSideOnly=true)]
		public static object? Charout(object? par1065)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charrecv

		[Sql.Function(Name="pg_catalog.charrecv", ServerSideOnly=true)]
		public static object? Charrecv(object? par1067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Charsend

		[Sql.Function(Name="pg_catalog.charsend", ServerSideOnly=true)]
		public static byte[]? Charsend(object? par1069)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Chr

		[Sql.Function(Name="pg_catalog.chr", ServerSideOnly=true)]
		public static string? Chr(int? par1071)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cideq

		[Sql.Function(Name="pg_catalog.cideq", ServerSideOnly=true)]
		public static bool? Cideq(object? par1073, object? par1074)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidin

		[Sql.Function(Name="pg_catalog.cidin", ServerSideOnly=true)]
		public static object? Cidin(object? par1076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidout

		[Sql.Function(Name="pg_catalog.cidout", ServerSideOnly=true)]
		public static object? Cidout(object? par1078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidr

		[Sql.Function(Name="pg_catalog.cidr", ServerSideOnly=true)]
		public static NpgsqlInet? Cidr(NpgsqlInet? par1080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrIn

		[Sql.Function(Name="pg_catalog.cidr_in", ServerSideOnly=true)]
		public static NpgsqlInet? CidrIn(object? par1082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrOut

		[Sql.Function(Name="pg_catalog.cidr_out", ServerSideOnly=true)]
		public static object? CidrOut(NpgsqlInet? par1084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrRecv

		[Sql.Function(Name="pg_catalog.cidr_recv", ServerSideOnly=true)]
		public static NpgsqlInet? CidrRecv(object? par1086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CidrSend

		[Sql.Function(Name="pg_catalog.cidr_send", ServerSideOnly=true)]
		public static byte[]? CidrSend(NpgsqlInet? par1088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidrecv

		[Sql.Function(Name="pg_catalog.cidrecv", ServerSideOnly=true)]
		public static object? Cidrecv(object? par1090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cidsend

		[Sql.Function(Name="pg_catalog.cidsend", ServerSideOnly=true)]
		public static byte[]? Cidsend(object? par1092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Circle

		[Sql.Function(Name="pg_catalog.circle", ServerSideOnly=true)]
		public static NpgsqlCircle? Circle(NpgsqlBox? par1099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAbove

		[Sql.Function(Name="pg_catalog.circle_above", ServerSideOnly=true)]
		public static bool? CircleAbove(NpgsqlCircle? par1101, NpgsqlCircle? par1102)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleAddPt

		[Sql.Function(Name="pg_catalog.circle_add_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleAddPt(NpgsqlCircle? par1104, NpgsqlPoint? par1105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleBelow

		[Sql.Function(Name="pg_catalog.circle_below", ServerSideOnly=true)]
		public static bool? CircleBelow(NpgsqlCircle? par1107, NpgsqlCircle? par1108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleCenter

		[Sql.Function(Name="pg_catalog.circle_center", ServerSideOnly=true)]
		public static NpgsqlPoint? CircleCenter(NpgsqlCircle? par1110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContain

		[Sql.Function(Name="pg_catalog.circle_contain", ServerSideOnly=true)]
		public static bool? CircleContain(NpgsqlCircle? par1112, NpgsqlCircle? par1113)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContainPt

		[Sql.Function(Name="pg_catalog.circle_contain_pt", ServerSideOnly=true)]
		public static bool? CircleContainPt(NpgsqlCircle? par1115, NpgsqlPoint? par1116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleContained

		[Sql.Function(Name="pg_catalog.circle_contained", ServerSideOnly=true)]
		public static bool? CircleContained(NpgsqlCircle? par1118, NpgsqlCircle? par1119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDistance

		[Sql.Function(Name="pg_catalog.circle_distance", ServerSideOnly=true)]
		public static double? CircleDistance(NpgsqlCircle? par1121, NpgsqlCircle? par1122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleDivPt

		[Sql.Function(Name="pg_catalog.circle_div_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleDivPt(NpgsqlCircle? par1124, NpgsqlPoint? par1125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleEq

		[Sql.Function(Name="pg_catalog.circle_eq", ServerSideOnly=true)]
		public static bool? CircleEq(NpgsqlCircle? par1127, NpgsqlCircle? par1128)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGe

		[Sql.Function(Name="pg_catalog.circle_ge", ServerSideOnly=true)]
		public static bool? CircleGe(NpgsqlCircle? par1130, NpgsqlCircle? par1131)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleGt

		[Sql.Function(Name="pg_catalog.circle_gt", ServerSideOnly=true)]
		public static bool? CircleGt(NpgsqlCircle? par1133, NpgsqlCircle? par1134)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleIn

		[Sql.Function(Name="pg_catalog.circle_in", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleIn(object? par1136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLe

		[Sql.Function(Name="pg_catalog.circle_le", ServerSideOnly=true)]
		public static bool? CircleLe(NpgsqlCircle? par1138, NpgsqlCircle? par1139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLeft

		[Sql.Function(Name="pg_catalog.circle_left", ServerSideOnly=true)]
		public static bool? CircleLeft(NpgsqlCircle? par1141, NpgsqlCircle? par1142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleLt

		[Sql.Function(Name="pg_catalog.circle_lt", ServerSideOnly=true)]
		public static bool? CircleLt(NpgsqlCircle? par1144, NpgsqlCircle? par1145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleMulPt

		[Sql.Function(Name="pg_catalog.circle_mul_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleMulPt(NpgsqlCircle? par1147, NpgsqlPoint? par1148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleNe

		[Sql.Function(Name="pg_catalog.circle_ne", ServerSideOnly=true)]
		public static bool? CircleNe(NpgsqlCircle? par1150, NpgsqlCircle? par1151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOut

		[Sql.Function(Name="pg_catalog.circle_out", ServerSideOnly=true)]
		public static object? CircleOut(NpgsqlCircle? par1153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverabove

		[Sql.Function(Name="pg_catalog.circle_overabove", ServerSideOnly=true)]
		public static bool? CircleOverabove(NpgsqlCircle? par1155, NpgsqlCircle? par1156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverbelow

		[Sql.Function(Name="pg_catalog.circle_overbelow", ServerSideOnly=true)]
		public static bool? CircleOverbelow(NpgsqlCircle? par1158, NpgsqlCircle? par1159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverlap

		[Sql.Function(Name="pg_catalog.circle_overlap", ServerSideOnly=true)]
		public static bool? CircleOverlap(NpgsqlCircle? par1161, NpgsqlCircle? par1162)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverleft

		[Sql.Function(Name="pg_catalog.circle_overleft", ServerSideOnly=true)]
		public static bool? CircleOverleft(NpgsqlCircle? par1164, NpgsqlCircle? par1165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleOverright

		[Sql.Function(Name="pg_catalog.circle_overright", ServerSideOnly=true)]
		public static bool? CircleOverright(NpgsqlCircle? par1167, NpgsqlCircle? par1168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRecv

		[Sql.Function(Name="pg_catalog.circle_recv", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleRecv(object? par1170)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleRight

		[Sql.Function(Name="pg_catalog.circle_right", ServerSideOnly=true)]
		public static bool? CircleRight(NpgsqlCircle? par1172, NpgsqlCircle? par1173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSame

		[Sql.Function(Name="pg_catalog.circle_same", ServerSideOnly=true)]
		public static bool? CircleSame(NpgsqlCircle? par1175, NpgsqlCircle? par1176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSend

		[Sql.Function(Name="pg_catalog.circle_send", ServerSideOnly=true)]
		public static byte[]? CircleSend(NpgsqlCircle? par1178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CircleSubPt

		[Sql.Function(Name="pg_catalog.circle_sub_pt", ServerSideOnly=true)]
		public static NpgsqlCircle? CircleSubPt(NpgsqlCircle? par1180, NpgsqlPoint? par1181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClockTimestamp

		[Sql.Function(Name="pg_catalog.clock_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? ClockTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLb

		[Sql.Function(Name="pg_catalog.close_lb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLb(NpgsqlLine? par1184, NpgsqlBox? par1185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLs

		[Sql.Function(Name="pg_catalog.close_ls", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLs(NpgsqlLine? par1187, NpgsqlLSeg? par1188)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseLseg

		[Sql.Function(Name="pg_catalog.close_lseg", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseLseg(NpgsqlLSeg? par1190, NpgsqlLSeg? par1191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePb

		[Sql.Function(Name="pg_catalog.close_pb", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePb(NpgsqlPoint? par1193, NpgsqlBox? par1194)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePl

		[Sql.Function(Name="pg_catalog.close_pl", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePl(NpgsqlPoint? par1196, NpgsqlLine? par1197)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ClosePs

		[Sql.Function(Name="pg_catalog.close_ps", ServerSideOnly=true)]
		public static NpgsqlPoint? ClosePs(NpgsqlPoint? par1199, NpgsqlLSeg? par1200)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSb

		[Sql.Function(Name="pg_catalog.close_sb", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSb(NpgsqlLSeg? par1202, NpgsqlBox? par1203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CloseSl

		[Sql.Function(Name="pg_catalog.close_sl", ServerSideOnly=true)]
		public static NpgsqlPoint? CloseSl(NpgsqlLSeg? par1205, NpgsqlLine? par1206)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ColDescription

		[Sql.Function(Name="pg_catalog.col_description", ServerSideOnly=true)]
		public static string? ColDescription(int? par1208, int? par1209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Concat

		[Sql.Function(Name="pg_catalog.concat", ServerSideOnly=true)]
		public static string? Concat(object? par1211)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConcatWs

		[Sql.Function(Name="pg_catalog.concat_ws", ServerSideOnly=true)]
		public static string? ConcatWs(string? par1213, object? par1214)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contjoinsel

		[Sql.Function(Name="pg_catalog.contjoinsel", ServerSideOnly=true)]
		public static double? Contjoinsel(object? par1216, int? par1217, object? par1218, short? par1219, object? par1220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Contsel

		[Sql.Function(Name="pg_catalog.contsel", ServerSideOnly=true)]
		public static double? Contsel(object? par1222, int? par1223, object? par1224, int? par1225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Convert

		[Sql.Function(Name="pg_catalog.convert", ServerSideOnly=true)]
		public static byte[]? Convert(byte[]? par1227, string? par1228, string? par1229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertFrom

		[Sql.Function(Name="pg_catalog.convert_from", ServerSideOnly=true)]
		public static string? ConvertFrom(byte[]? par1231, string? par1232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ConvertTo

		[Sql.Function(Name="pg_catalog.convert_to", ServerSideOnly=true)]
		public static byte[]? ConvertTo(string? par1234, string? par1235)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Corr

		[Sql.Function(Name="pg_catalog.corr", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? Corr<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1237, Expression<Func<TSource, double?>> par1238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cos

		[Sql.Function(Name="pg_catalog.cos", ServerSideOnly=true)]
		public static double? Cos(double? par1240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Cot

		[Sql.Function(Name="pg_catalog.cot", ServerSideOnly=true)]
		public static double? Cot(double? par1242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Count

		[Sql.Function(Name="pg_catalog.count", ServerSideOnly=true, IsAggregate = true)]
		public static long? Count<TSource>(this IEnumerable<TSource> src)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarPop

		[Sql.Function(Name="pg_catalog.covar_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1247, Expression<Func<TSource, double?>> par1248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CovarSamp

		[Sql.Function(Name="pg_catalog.covar_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? CovarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par1250, Expression<Func<TSource, double?>> par1251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringIn

		[Sql.Function(Name="pg_catalog.cstring_in", ServerSideOnly=true)]
		public static object? CstringIn(object? par1253)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringOut

		[Sql.Function(Name="pg_catalog.cstring_out", ServerSideOnly=true)]
		public static object? CstringOut(object? par1255)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringRecv

		[Sql.Function(Name="pg_catalog.cstring_recv", ServerSideOnly=true)]
		public static object? CstringRecv(object? par1257)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CstringSend

		[Sql.Function(Name="pg_catalog.cstring_send", ServerSideOnly=true)]
		public static byte[]? CstringSend(object? par1259)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDist

		[Sql.Function(Name="pg_catalog.cume_dist", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? CumeDist<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par1262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CumeDistFinal

		[Sql.Function(Name="pg_catalog.cume_dist_final", ServerSideOnly=true)]
		public static double? CumeDistFinal(object? par1264, object? par1265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentDatabase

		[Sql.Function(Name="pg_catalog.current_database", ServerSideOnly=true)]
		public static string? CurrentDatabase()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentQuery

		[Sql.Function(Name="pg_catalog.current_query", ServerSideOnly=true)]
		public static string? CurrentQuery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchema

		[Sql.Function(Name="pg_catalog.current_schema", ServerSideOnly=true)]
		public static string? CurrentSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSchemas

		[Sql.Function(Name="pg_catalog.current_schemas", ServerSideOnly=true)]
		public static object? CurrentSchemas(bool? par1270)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentSetting

		[Sql.Function(Name="pg_catalog.current_setting", ServerSideOnly=true)]
		public static string? CurrentSetting(string? par1272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CurrentUser

		[Sql.Function(Name="pg_catalog.current_user", ServerSideOnly=true)]
		public static string? CurrentUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid

		[Sql.Function(Name="pg_catalog.currtid", ServerSideOnly=true)]
		public static object? Currtid(int? par1275, object? par1276)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currtid2

		[Sql.Function(Name="pg_catalog.currtid2", ServerSideOnly=true)]
		public static object? Currtid2(string? par1278, object? par1279)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Currval

		[Sql.Function(Name="pg_catalog.currval", ServerSideOnly=true)]
		public static long? Currval(object? par1281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXml

		[Sql.Function(Name="pg_catalog.cursor_to_xml", ServerSideOnly=true)]
		public static string? CursorToXml(object? cursor, int? count, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region CursorToXmlschema

		[Sql.Function(Name="pg_catalog.cursor_to_xmlschema", ServerSideOnly=true)]
		public static string? CursorToXmlschema(object? cursor, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXml

		[Sql.Function(Name="pg_catalog.database_to_xml", ServerSideOnly=true)]
		public static string? DatabaseToXml(bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string? DatabaseToXmlAndXmlschema(bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatabaseToXmlschema

		[Sql.Function(Name="pg_catalog.database_to_xmlschema", ServerSideOnly=true)]
		public static string? DatabaseToXmlschema(bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Date

		[Sql.Function(Name="pg_catalog.date", ServerSideOnly=true)]
		public static NpgsqlDate? Date(NpgsqlDateTime? par1292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmp

		[Sql.Function(Name="pg_catalog.date_cmp", ServerSideOnly=true)]
		public static int? DateCmp(NpgsqlDate? par1294, NpgsqlDate? par1295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamp

		[Sql.Function(Name="pg_catalog.date_cmp_timestamp", ServerSideOnly=true)]
		public static int? DateCmpTimestamp(NpgsqlDate? par1297, NpgsqlDateTime? par1298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateCmpTimestamptz

		[Sql.Function(Name="pg_catalog.date_cmp_timestamptz", ServerSideOnly=true)]
		public static int? DateCmpTimestamptz(NpgsqlDate? par1300, NpgsqlDateTime? par1301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEq

		[Sql.Function(Name="pg_catalog.date_eq", ServerSideOnly=true)]
		public static bool? DateEq(NpgsqlDate? par1303, NpgsqlDate? par1304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamp

		[Sql.Function(Name="pg_catalog.date_eq_timestamp", ServerSideOnly=true)]
		public static bool? DateEqTimestamp(NpgsqlDate? par1306, NpgsqlDateTime? par1307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateEqTimestamptz

		[Sql.Function(Name="pg_catalog.date_eq_timestamptz", ServerSideOnly=true)]
		public static bool? DateEqTimestamptz(NpgsqlDate? par1309, NpgsqlDateTime? par1310)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGe

		[Sql.Function(Name="pg_catalog.date_ge", ServerSideOnly=true)]
		public static bool? DateGe(NpgsqlDate? par1312, NpgsqlDate? par1313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamp

		[Sql.Function(Name="pg_catalog.date_ge_timestamp", ServerSideOnly=true)]
		public static bool? DateGeTimestamp(NpgsqlDate? par1315, NpgsqlDateTime? par1316)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ge_timestamptz", ServerSideOnly=true)]
		public static bool? DateGeTimestamptz(NpgsqlDate? par1318, NpgsqlDateTime? par1319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGt

		[Sql.Function(Name="pg_catalog.date_gt", ServerSideOnly=true)]
		public static bool? DateGt(NpgsqlDate? par1321, NpgsqlDate? par1322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamp

		[Sql.Function(Name="pg_catalog.date_gt_timestamp", ServerSideOnly=true)]
		public static bool? DateGtTimestamp(NpgsqlDate? par1324, NpgsqlDateTime? par1325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateGtTimestamptz

		[Sql.Function(Name="pg_catalog.date_gt_timestamptz", ServerSideOnly=true)]
		public static bool? DateGtTimestamptz(NpgsqlDate? par1327, NpgsqlDateTime? par1328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateIn

		[Sql.Function(Name="pg_catalog.date_in", ServerSideOnly=true)]
		public static NpgsqlDate? DateIn(object? par1330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLarger

		[Sql.Function(Name="pg_catalog.date_larger", ServerSideOnly=true)]
		public static NpgsqlDate? DateLarger(NpgsqlDate? par1332, NpgsqlDate? par1333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLe

		[Sql.Function(Name="pg_catalog.date_le", ServerSideOnly=true)]
		public static bool? DateLe(NpgsqlDate? par1335, NpgsqlDate? par1336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamp

		[Sql.Function(Name="pg_catalog.date_le_timestamp", ServerSideOnly=true)]
		public static bool? DateLeTimestamp(NpgsqlDate? par1338, NpgsqlDateTime? par1339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLeTimestamptz

		[Sql.Function(Name="pg_catalog.date_le_timestamptz", ServerSideOnly=true)]
		public static bool? DateLeTimestamptz(NpgsqlDate? par1341, NpgsqlDateTime? par1342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLt

		[Sql.Function(Name="pg_catalog.date_lt", ServerSideOnly=true)]
		public static bool? DateLt(NpgsqlDate? par1344, NpgsqlDate? par1345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamp

		[Sql.Function(Name="pg_catalog.date_lt_timestamp", ServerSideOnly=true)]
		public static bool? DateLtTimestamp(NpgsqlDate? par1347, NpgsqlDateTime? par1348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateLtTimestamptz

		[Sql.Function(Name="pg_catalog.date_lt_timestamptz", ServerSideOnly=true)]
		public static bool? DateLtTimestamptz(NpgsqlDate? par1350, NpgsqlDateTime? par1351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMi

		[Sql.Function(Name="pg_catalog.date_mi", ServerSideOnly=true)]
		public static int? DateMi(NpgsqlDate? par1353, NpgsqlDate? par1354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMiInterval

		[Sql.Function(Name="pg_catalog.date_mi_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? DateMiInterval(NpgsqlDate? par1356, NpgsqlTimeSpan? par1357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateMii

		[Sql.Function(Name="pg_catalog.date_mii", ServerSideOnly=true)]
		public static NpgsqlDate? DateMii(NpgsqlDate? par1359, int? par1360)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNe

		[Sql.Function(Name="pg_catalog.date_ne", ServerSideOnly=true)]
		public static bool? DateNe(NpgsqlDate? par1362, NpgsqlDate? par1363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamp

		[Sql.Function(Name="pg_catalog.date_ne_timestamp", ServerSideOnly=true)]
		public static bool? DateNeTimestamp(NpgsqlDate? par1365, NpgsqlDateTime? par1366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateNeTimestamptz

		[Sql.Function(Name="pg_catalog.date_ne_timestamptz", ServerSideOnly=true)]
		public static bool? DateNeTimestamptz(NpgsqlDate? par1368, NpgsqlDateTime? par1369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateOut

		[Sql.Function(Name="pg_catalog.date_out", ServerSideOnly=true)]
		public static object? DateOut(NpgsqlDate? par1371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePart

		[Sql.Function(Name="pg_catalog.date_part", ServerSideOnly=true)]
		public static double? DatePart(string? par1394, NpgsqlDateTime? par1395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePlInterval

		[Sql.Function(Name="pg_catalog.date_pl_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? DatePlInterval(NpgsqlDate? par1397, NpgsqlTimeSpan? par1398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatePli

		[Sql.Function(Name="pg_catalog.date_pli", ServerSideOnly=true)]
		public static NpgsqlDate? DatePli(NpgsqlDate? par1400, int? par1401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateRecv

		[Sql.Function(Name="pg_catalog.date_recv", ServerSideOnly=true)]
		public static NpgsqlDate? DateRecv(object? par1403)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSend

		[Sql.Function(Name="pg_catalog.date_send", ServerSideOnly=true)]
		public static byte[]? DateSend(NpgsqlDate? par1405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSmaller

		[Sql.Function(Name="pg_catalog.date_smaller", ServerSideOnly=true)]
		public static NpgsqlDate? DateSmaller(NpgsqlDate? par1407, NpgsqlDate? par1408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateSortsupport

		[Sql.Function(Name="pg_catalog.date_sortsupport", ServerSideOnly=true)]
		public static object? DateSortsupport(object? par1409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DateTrunc

		[Sql.Function(Name="pg_catalog.date_trunc", ServerSideOnly=true)]
		public static NpgsqlDateTime? DateTrunc(string? par1417, NpgsqlDateTime? par1418)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Daterange

		[Sql.Function(Name="pg_catalog.daterange", ServerSideOnly=true)]
		public static object? Daterange(NpgsqlDate? par1423, NpgsqlDate? par1424, string? par1425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeCanonical

		[Sql.Function(Name="pg_catalog.daterange_canonical", ServerSideOnly=true)]
		public static object? DaterangeCanonical(object? par1427)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DaterangeSubdiff

		[Sql.Function(Name="pg_catalog.daterange_subdiff", ServerSideOnly=true)]
		public static double? DaterangeSubdiff(NpgsqlDate? par1429, NpgsqlDate? par1430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimePl

		[Sql.Function(Name="pg_catalog.datetime_pl", ServerSideOnly=true)]
		public static NpgsqlDateTime? DatetimePl(NpgsqlDate? par1432, TimeSpan? par1433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DatetimetzPl

		[Sql.Function(Name="pg_catalog.datetimetz_pl", ServerSideOnly=true)]
		public static NpgsqlDateTime? DatetimetzPl(NpgsqlDate? par1435, DateTimeOffset? par1436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dcbrt

		[Sql.Function(Name="pg_catalog.dcbrt", ServerSideOnly=true)]
		public static double? Dcbrt(double? par1438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Decode

		[Sql.Function(Name="pg_catalog.decode", ServerSideOnly=true)]
		public static byte[]? Decode(string? par1440, string? par1441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Degrees

		[Sql.Function(Name="pg_catalog.degrees", ServerSideOnly=true)]
		public static double? Degrees(double? par1443)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRank

		[Sql.Function(Name="pg_catalog.dense_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? DenseRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par1446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DenseRankFinal

		[Sql.Function(Name="pg_catalog.dense_rank_final", ServerSideOnly=true)]
		public static long? DenseRankFinal(object? par1448, object? par1449)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dexp

		[Sql.Function(Name="pg_catalog.dexp", ServerSideOnly=true)]
		public static double? Dexp(double? par1451)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diagonal

		[Sql.Function(Name="pg_catalog.diagonal", ServerSideOnly=true)]
		public static NpgsqlLSeg? Diagonal(NpgsqlBox? par1453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Diameter

		[Sql.Function(Name="pg_catalog.diameter", ServerSideOnly=true)]
		public static double? Diameter(NpgsqlCircle? par1455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellInit

		[Sql.Function(Name="pg_catalog.dispell_init", ServerSideOnly=true)]
		public static object? DispellInit(object? par1457)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DispellLexize

		[Sql.Function(Name="pg_catalog.dispell_lexize", ServerSideOnly=true)]
		public static object? DispellLexize(object? par1459, object? par1460, object? par1461, object? par1462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoint

		[Sql.Function(Name="pg_catalog.dist_cpoint", ServerSideOnly=true)]
		public static double? DistCpoint(NpgsqlCircle? par1464, NpgsqlPoint? par1465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistCpoly

		[Sql.Function(Name="pg_catalog.dist_cpoly", ServerSideOnly=true)]
		public static double? DistCpoly(NpgsqlCircle? par1467, NpgsqlPolygon? par1468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistLb

		[Sql.Function(Name="pg_catalog.dist_lb", ServerSideOnly=true)]
		public static double? DistLb(NpgsqlLine? par1470, NpgsqlBox? par1471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPb

		[Sql.Function(Name="pg_catalog.dist_pb", ServerSideOnly=true)]
		public static double? DistPb(NpgsqlPoint? par1473, NpgsqlBox? par1474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPc

		[Sql.Function(Name="pg_catalog.dist_pc", ServerSideOnly=true)]
		public static double? DistPc(NpgsqlPoint? par1476, NpgsqlCircle? par1477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPl

		[Sql.Function(Name="pg_catalog.dist_pl", ServerSideOnly=true)]
		public static double? DistPl(NpgsqlPoint? par1479, NpgsqlLine? par1480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPolyp

		[Sql.Function(Name="pg_catalog.dist_polyp", ServerSideOnly=true)]
		public static double? DistPolyp(NpgsqlPolygon? par1482, NpgsqlPoint? par1483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpath

		[Sql.Function(Name="pg_catalog.dist_ppath", ServerSideOnly=true)]
		public static double? DistPpath(NpgsqlPoint? par1485, NpgsqlPath? par1486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPpoly

		[Sql.Function(Name="pg_catalog.dist_ppoly", ServerSideOnly=true)]
		public static double? DistPpoly(NpgsqlPoint? par1488, NpgsqlPolygon? par1489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistPs

		[Sql.Function(Name="pg_catalog.dist_ps", ServerSideOnly=true)]
		public static double? DistPs(NpgsqlPoint? par1491, NpgsqlLSeg? par1492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSb

		[Sql.Function(Name="pg_catalog.dist_sb", ServerSideOnly=true)]
		public static double? DistSb(NpgsqlLSeg? par1494, NpgsqlBox? par1495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DistSl

		[Sql.Function(Name="pg_catalog.dist_sl", ServerSideOnly=true)]
		public static double? DistSl(NpgsqlLSeg? par1497, NpgsqlLine? par1498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Div

		[Sql.Function(Name="pg_catalog.div", ServerSideOnly=true)]
		public static decimal? Div(decimal? par1500, decimal? par1501)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog1

		[Sql.Function(Name="pg_catalog.dlog1", ServerSideOnly=true)]
		public static double? Dlog1(double? par1503)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dlog10

		[Sql.Function(Name="pg_catalog.dlog10", ServerSideOnly=true)]
		public static double? Dlog10(double? par1505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainIn

		[Sql.Function(Name="pg_catalog.domain_in", ServerSideOnly=true)]
		public static object? DomainIn(object? par1507, int? par1508, int? par1509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DomainRecv

		[Sql.Function(Name="pg_catalog.domain_recv", ServerSideOnly=true)]
		public static object? DomainRecv(object? par1511, int? par1512, int? par1513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dpow

		[Sql.Function(Name="pg_catalog.dpow", ServerSideOnly=true)]
		public static double? Dpow(double? par1515, double? par1516)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dround

		[Sql.Function(Name="pg_catalog.dround", ServerSideOnly=true)]
		public static double? Dround(double? par1518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleInit

		[Sql.Function(Name="pg_catalog.dsimple_init", ServerSideOnly=true)]
		public static object? DsimpleInit(object? par1520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsimpleLexize

		[Sql.Function(Name="pg_catalog.dsimple_lexize", ServerSideOnly=true)]
		public static object? DsimpleLexize(object? par1522, object? par1523, object? par1524, object? par1525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballInit

		[Sql.Function(Name="pg_catalog.dsnowball_init", ServerSideOnly=true)]
		public static object? DsnowballInit(object? par1527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsnowballLexize

		[Sql.Function(Name="pg_catalog.dsnowball_lexize", ServerSideOnly=true)]
		public static object? DsnowballLexize(object? par1529, object? par1530, object? par1531, object? par1532)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dsqrt

		[Sql.Function(Name="pg_catalog.dsqrt", ServerSideOnly=true)]
		public static double? Dsqrt(double? par1534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymInit

		[Sql.Function(Name="pg_catalog.dsynonym_init", ServerSideOnly=true)]
		public static object? DsynonymInit(object? par1536)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region DsynonymLexize

		[Sql.Function(Name="pg_catalog.dsynonym_lexize", ServerSideOnly=true)]
		public static object? DsynonymLexize(object? par1538, object? par1539, object? par1540, object? par1541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Dtrunc

		[Sql.Function(Name="pg_catalog.dtrunc", ServerSideOnly=true)]
		public static double? Dtrunc(double? par1543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ElemContainedByRange

		[Sql.Function(Name="pg_catalog.elem_contained_by_range", ServerSideOnly=true)]
		public static bool? ElemContainedByRange(object? par1545, object? par1546)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Encode

		[Sql.Function(Name="pg_catalog.encode", ServerSideOnly=true)]
		public static string? Encode(byte[]? par1548, string? par1549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumCmp

		[Sql.Function(Name="pg_catalog.enum_cmp", ServerSideOnly=true)]
		public static int? EnumCmp(object? par1551, object? par1552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumEq

		[Sql.Function(Name="pg_catalog.enum_eq", ServerSideOnly=true)]
		public static bool? EnumEq(object? par1554, object? par1555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumFirst

		[Sql.Function(Name="pg_catalog.enum_first", ServerSideOnly=true)]
		public static object? EnumFirst(object? par1557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGe

		[Sql.Function(Name="pg_catalog.enum_ge", ServerSideOnly=true)]
		public static bool? EnumGe(object? par1559, object? par1560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumGt

		[Sql.Function(Name="pg_catalog.enum_gt", ServerSideOnly=true)]
		public static bool? EnumGt(object? par1562, object? par1563)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumIn

		[Sql.Function(Name="pg_catalog.enum_in", ServerSideOnly=true)]
		public static object? EnumIn(object? par1565, int? par1566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLarger

		[Sql.Function(Name="pg_catalog.enum_larger", ServerSideOnly=true)]
		public static object? EnumLarger(object? par1568, object? par1569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLast

		[Sql.Function(Name="pg_catalog.enum_last", ServerSideOnly=true)]
		public static object? EnumLast(object? par1571)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLe

		[Sql.Function(Name="pg_catalog.enum_le", ServerSideOnly=true)]
		public static bool? EnumLe(object? par1573, object? par1574)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumLt

		[Sql.Function(Name="pg_catalog.enum_lt", ServerSideOnly=true)]
		public static bool? EnumLt(object? par1576, object? par1577)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumNe

		[Sql.Function(Name="pg_catalog.enum_ne", ServerSideOnly=true)]
		public static bool? EnumNe(object? par1579, object? par1580)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumOut

		[Sql.Function(Name="pg_catalog.enum_out", ServerSideOnly=true)]
		public static object? EnumOut(object? par1582)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRange

		[Sql.Function(Name="pg_catalog.enum_range", ServerSideOnly=true)]
		public static object? EnumRange(object? par1587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumRecv

		[Sql.Function(Name="pg_catalog.enum_recv", ServerSideOnly=true)]
		public static object? EnumRecv(object? par1589, int? par1590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSend

		[Sql.Function(Name="pg_catalog.enum_send", ServerSideOnly=true)]
		public static byte[]? EnumSend(object? par1592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EnumSmaller

		[Sql.Function(Name="pg_catalog.enum_smaller", ServerSideOnly=true)]
		public static object? EnumSmaller(object? par1594, object? par1595)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqjoinsel

		[Sql.Function(Name="pg_catalog.eqjoinsel", ServerSideOnly=true)]
		public static double? Eqjoinsel(object? par1597, int? par1598, object? par1599, short? par1600, object? par1601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Eqsel

		[Sql.Function(Name="pg_catalog.eqsel", ServerSideOnly=true)]
		public static double? Eqsel(object? par1603, int? par1604, object? par1605, int? par1606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToMic

		[Sql.Function(Name="pg_catalog.euc_cn_to_mic", ServerSideOnly=true)]
		public static object? EucCnToMic(int? par1607, int? par1608, object? par1609, object? par1610, int? par1611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucCnToUtf8

		[Sql.Function(Name="pg_catalog.euc_cn_to_utf8", ServerSideOnly=true)]
		public static object? EucCnToUtf8(int? par1612, int? par1613, object? par1614, object? par1615, int? par1616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToShiftJis2004

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_shift_jis_2004", ServerSideOnly=true)]
		public static object? EucJis2004ToShiftJis2004(int? par1617, int? par1618, object? par1619, object? par1620, int? par1621)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.euc_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object? EucJis2004ToUtf8(int? par1622, int? par1623, object? par1624, object? par1625, int? par1626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToMic

		[Sql.Function(Name="pg_catalog.euc_jp_to_mic", ServerSideOnly=true)]
		public static object? EucJpToMic(int? par1627, int? par1628, object? par1629, object? par1630, int? par1631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToSjis

		[Sql.Function(Name="pg_catalog.euc_jp_to_sjis", ServerSideOnly=true)]
		public static object? EucJpToSjis(int? par1632, int? par1633, object? par1634, object? par1635, int? par1636)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucJpToUtf8

		[Sql.Function(Name="pg_catalog.euc_jp_to_utf8", ServerSideOnly=true)]
		public static object? EucJpToUtf8(int? par1637, int? par1638, object? par1639, object? par1640, int? par1641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToMic

		[Sql.Function(Name="pg_catalog.euc_kr_to_mic", ServerSideOnly=true)]
		public static object? EucKrToMic(int? par1642, int? par1643, object? par1644, object? par1645, int? par1646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucKrToUtf8

		[Sql.Function(Name="pg_catalog.euc_kr_to_utf8", ServerSideOnly=true)]
		public static object? EucKrToUtf8(int? par1647, int? par1648, object? par1649, object? par1650, int? par1651)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToBig5

		[Sql.Function(Name="pg_catalog.euc_tw_to_big5", ServerSideOnly=true)]
		public static object? EucTwToBig5(int? par1652, int? par1653, object? par1654, object? par1655, int? par1656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToMic

		[Sql.Function(Name="pg_catalog.euc_tw_to_mic", ServerSideOnly=true)]
		public static object? EucTwToMic(int? par1657, int? par1658, object? par1659, object? par1660, int? par1661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EucTwToUtf8

		[Sql.Function(Name="pg_catalog.euc_tw_to_utf8", ServerSideOnly=true)]
		public static object? EucTwToUtf8(int? par1662, int? par1663, object? par1664, object? par1665, int? par1666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerIn

		[Sql.Function(Name="pg_catalog.event_trigger_in", ServerSideOnly=true)]
		public static object? EventTriggerIn(object? par1668)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region EventTriggerOut

		[Sql.Function(Name="pg_catalog.event_trigger_out", ServerSideOnly=true)]
		public static object? EventTriggerOut(object? par1670)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Every

		[Sql.Function(Name="pg_catalog.every", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static bool? Every<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, bool?>> par1672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Exp

		[Sql.Function(Name="pg_catalog.exp", ServerSideOnly=true)]
		public static decimal? Exp(decimal? par1676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Factorial

		[Sql.Function(Name="pg_catalog.factorial", ServerSideOnly=true)]
		public static decimal? Factorial(long? par1678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Family

		[Sql.Function(Name="pg_catalog.family", ServerSideOnly=true)]
		public static int? Family(NpgsqlInet? par1680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerIn

		[Sql.Function(Name="pg_catalog.fdw_handler_in", ServerSideOnly=true)]
		public static object? FdwHandlerIn(object? par1682)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FdwHandlerOut

		[Sql.Function(Name="pg_catalog.fdw_handler_out", ServerSideOnly=true)]
		public static object? FdwHandlerOut(object? par1684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FirstValue

		[Sql.Function(Name="pg_catalog.first_value", ServerSideOnly=true)]
		public static object? FirstValue(object? par1686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4

		[Sql.Function(Name="pg_catalog.float4", ServerSideOnly=true)]
		public static float? Float4(long? par1696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4Accum

		[Sql.Function(Name="pg_catalog.float4_accum", ServerSideOnly=true)]
		public static object? Float4Accum(object? par1698, float? par1699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48div

		[Sql.Function(Name="pg_catalog.float48div", ServerSideOnly=true)]
		public static double? Float48div(float? par1701, double? par1702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48eq

		[Sql.Function(Name="pg_catalog.float48eq", ServerSideOnly=true)]
		public static bool? Float48eq(float? par1704, double? par1705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ge

		[Sql.Function(Name="pg_catalog.float48ge", ServerSideOnly=true)]
		public static bool? Float48ge(float? par1707, double? par1708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48gt

		[Sql.Function(Name="pg_catalog.float48gt", ServerSideOnly=true)]
		public static bool? Float48gt(float? par1710, double? par1711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48le

		[Sql.Function(Name="pg_catalog.float48le", ServerSideOnly=true)]
		public static bool? Float48le(float? par1713, double? par1714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48lt

		[Sql.Function(Name="pg_catalog.float48lt", ServerSideOnly=true)]
		public static bool? Float48lt(float? par1716, double? par1717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mi

		[Sql.Function(Name="pg_catalog.float48mi", ServerSideOnly=true)]
		public static double? Float48mi(float? par1719, double? par1720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48mul

		[Sql.Function(Name="pg_catalog.float48mul", ServerSideOnly=true)]
		public static double? Float48mul(float? par1722, double? par1723)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48ne

		[Sql.Function(Name="pg_catalog.float48ne", ServerSideOnly=true)]
		public static bool? Float48ne(float? par1725, double? par1726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float48pl

		[Sql.Function(Name="pg_catalog.float48pl", ServerSideOnly=true)]
		public static double? Float48pl(float? par1728, double? par1729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4abs

		[Sql.Function(Name="pg_catalog.float4abs", ServerSideOnly=true)]
		public static float? Float4abs(float? par1731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4div

		[Sql.Function(Name="pg_catalog.float4div", ServerSideOnly=true)]
		public static float? Float4div(float? par1733, float? par1734)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4eq

		[Sql.Function(Name="pg_catalog.float4eq", ServerSideOnly=true)]
		public static bool? Float4eq(float? par1736, float? par1737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ge

		[Sql.Function(Name="pg_catalog.float4ge", ServerSideOnly=true)]
		public static bool? Float4ge(float? par1739, float? par1740)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4gt

		[Sql.Function(Name="pg_catalog.float4gt", ServerSideOnly=true)]
		public static bool? Float4gt(float? par1742, float? par1743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4in

		[Sql.Function(Name="pg_catalog.float4in", ServerSideOnly=true)]
		public static float? Float4in(object? par1745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4larger

		[Sql.Function(Name="pg_catalog.float4larger", ServerSideOnly=true)]
		public static float? Float4larger(float? par1747, float? par1748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4le

		[Sql.Function(Name="pg_catalog.float4le", ServerSideOnly=true)]
		public static bool? Float4le(float? par1750, float? par1751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4lt

		[Sql.Function(Name="pg_catalog.float4lt", ServerSideOnly=true)]
		public static bool? Float4lt(float? par1753, float? par1754)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mi

		[Sql.Function(Name="pg_catalog.float4mi", ServerSideOnly=true)]
		public static float? Float4mi(float? par1756, float? par1757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4mul

		[Sql.Function(Name="pg_catalog.float4mul", ServerSideOnly=true)]
		public static float? Float4mul(float? par1759, float? par1760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4ne

		[Sql.Function(Name="pg_catalog.float4ne", ServerSideOnly=true)]
		public static bool? Float4ne(float? par1762, float? par1763)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4out

		[Sql.Function(Name="pg_catalog.float4out", ServerSideOnly=true)]
		public static object? Float4out(float? par1765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4pl

		[Sql.Function(Name="pg_catalog.float4pl", ServerSideOnly=true)]
		public static float? Float4pl(float? par1767, float? par1768)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4recv

		[Sql.Function(Name="pg_catalog.float4recv", ServerSideOnly=true)]
		public static float? Float4recv(object? par1770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4send

		[Sql.Function(Name="pg_catalog.float4send", ServerSideOnly=true)]
		public static byte[]? Float4send(float? par1772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4smaller

		[Sql.Function(Name="pg_catalog.float4smaller", ServerSideOnly=true)]
		public static float? Float4smaller(float? par1774, float? par1775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4um

		[Sql.Function(Name="pg_catalog.float4um", ServerSideOnly=true)]
		public static float? Float4um(float? par1777)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float4up

		[Sql.Function(Name="pg_catalog.float4up", ServerSideOnly=true)]
		public static float? Float4up(float? par1779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8

		[Sql.Function(Name="pg_catalog.float8", ServerSideOnly=true)]
		public static double? Float8(long? par1789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Accum

		[Sql.Function(Name="pg_catalog.float8_accum", ServerSideOnly=true)]
		public static object? Float8Accum(object? par1791, double? par1792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Avg

		[Sql.Function(Name="pg_catalog.float8_avg", ServerSideOnly=true)]
		public static double? Float8Avg(object? par1794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8Corr

		[Sql.Function(Name="pg_catalog.float8_corr", ServerSideOnly=true)]
		public static double? Float8Corr(object? par1796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarPop

		[Sql.Function(Name="pg_catalog.float8_covar_pop", ServerSideOnly=true)]
		public static double? Float8CovarPop(object? par1798)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8CovarSamp

		[Sql.Function(Name="pg_catalog.float8_covar_samp", ServerSideOnly=true)]
		public static double? Float8CovarSamp(object? par1800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAccum

		[Sql.Function(Name="pg_catalog.float8_regr_accum", ServerSideOnly=true)]
		public static object? Float8RegrAccum(object? par1802, double? par1803, double? par1804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgx

		[Sql.Function(Name="pg_catalog.float8_regr_avgx", ServerSideOnly=true)]
		public static double? Float8RegrAvgx(object? par1806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrAvgy

		[Sql.Function(Name="pg_catalog.float8_regr_avgy", ServerSideOnly=true)]
		public static double? Float8RegrAvgy(object? par1808)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrIntercept

		[Sql.Function(Name="pg_catalog.float8_regr_intercept", ServerSideOnly=true)]
		public static double? Float8RegrIntercept(object? par1810)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrR2

		[Sql.Function(Name="pg_catalog.float8_regr_r2", ServerSideOnly=true)]
		public static double? Float8RegrR2(object? par1812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSlope

		[Sql.Function(Name="pg_catalog.float8_regr_slope", ServerSideOnly=true)]
		public static double? Float8RegrSlope(object? par1814)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxx

		[Sql.Function(Name="pg_catalog.float8_regr_sxx", ServerSideOnly=true)]
		public static double? Float8RegrSxx(object? par1816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSxy

		[Sql.Function(Name="pg_catalog.float8_regr_sxy", ServerSideOnly=true)]
		public static double? Float8RegrSxy(object? par1818)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8RegrSyy

		[Sql.Function(Name="pg_catalog.float8_regr_syy", ServerSideOnly=true)]
		public static double? Float8RegrSyy(object? par1820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevPop

		[Sql.Function(Name="pg_catalog.float8_stddev_pop", ServerSideOnly=true)]
		public static double? Float8StddevPop(object? par1822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8StddevSamp

		[Sql.Function(Name="pg_catalog.float8_stddev_samp", ServerSideOnly=true)]
		public static double? Float8StddevSamp(object? par1824)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarPop

		[Sql.Function(Name="pg_catalog.float8_var_pop", ServerSideOnly=true)]
		public static double? Float8VarPop(object? par1826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8VarSamp

		[Sql.Function(Name="pg_catalog.float8_var_samp", ServerSideOnly=true)]
		public static double? Float8VarSamp(object? par1828)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84div

		[Sql.Function(Name="pg_catalog.float84div", ServerSideOnly=true)]
		public static double? Float84div(double? par1830, float? par1831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84eq

		[Sql.Function(Name="pg_catalog.float84eq", ServerSideOnly=true)]
		public static bool? Float84eq(double? par1833, float? par1834)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ge

		[Sql.Function(Name="pg_catalog.float84ge", ServerSideOnly=true)]
		public static bool? Float84ge(double? par1836, float? par1837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84gt

		[Sql.Function(Name="pg_catalog.float84gt", ServerSideOnly=true)]
		public static bool? Float84gt(double? par1839, float? par1840)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84le

		[Sql.Function(Name="pg_catalog.float84le", ServerSideOnly=true)]
		public static bool? Float84le(double? par1842, float? par1843)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84lt

		[Sql.Function(Name="pg_catalog.float84lt", ServerSideOnly=true)]
		public static bool? Float84lt(double? par1845, float? par1846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mi

		[Sql.Function(Name="pg_catalog.float84mi", ServerSideOnly=true)]
		public static double? Float84mi(double? par1848, float? par1849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84mul

		[Sql.Function(Name="pg_catalog.float84mul", ServerSideOnly=true)]
		public static double? Float84mul(double? par1851, float? par1852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84ne

		[Sql.Function(Name="pg_catalog.float84ne", ServerSideOnly=true)]
		public static bool? Float84ne(double? par1854, float? par1855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float84pl

		[Sql.Function(Name="pg_catalog.float84pl", ServerSideOnly=true)]
		public static double? Float84pl(double? par1857, float? par1858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8abs

		[Sql.Function(Name="pg_catalog.float8abs", ServerSideOnly=true)]
		public static double? Float8abs(double? par1860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8div

		[Sql.Function(Name="pg_catalog.float8div", ServerSideOnly=true)]
		public static double? Float8div(double? par1862, double? par1863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8eq

		[Sql.Function(Name="pg_catalog.float8eq", ServerSideOnly=true)]
		public static bool? Float8eq(double? par1865, double? par1866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ge

		[Sql.Function(Name="pg_catalog.float8ge", ServerSideOnly=true)]
		public static bool? Float8ge(double? par1868, double? par1869)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8gt

		[Sql.Function(Name="pg_catalog.float8gt", ServerSideOnly=true)]
		public static bool? Float8gt(double? par1871, double? par1872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8in

		[Sql.Function(Name="pg_catalog.float8in", ServerSideOnly=true)]
		public static double? Float8in(object? par1874)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8larger

		[Sql.Function(Name="pg_catalog.float8larger", ServerSideOnly=true)]
		public static double? Float8larger(double? par1876, double? par1877)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8le

		[Sql.Function(Name="pg_catalog.float8le", ServerSideOnly=true)]
		public static bool? Float8le(double? par1879, double? par1880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8lt

		[Sql.Function(Name="pg_catalog.float8lt", ServerSideOnly=true)]
		public static bool? Float8lt(double? par1882, double? par1883)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mi

		[Sql.Function(Name="pg_catalog.float8mi", ServerSideOnly=true)]
		public static double? Float8mi(double? par1885, double? par1886)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8mul

		[Sql.Function(Name="pg_catalog.float8mul", ServerSideOnly=true)]
		public static double? Float8mul(double? par1888, double? par1889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8ne

		[Sql.Function(Name="pg_catalog.float8ne", ServerSideOnly=true)]
		public static bool? Float8ne(double? par1891, double? par1892)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8out

		[Sql.Function(Name="pg_catalog.float8out", ServerSideOnly=true)]
		public static object? Float8out(double? par1894)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8pl

		[Sql.Function(Name="pg_catalog.float8pl", ServerSideOnly=true)]
		public static double? Float8pl(double? par1896, double? par1897)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8recv

		[Sql.Function(Name="pg_catalog.float8recv", ServerSideOnly=true)]
		public static double? Float8recv(object? par1899)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8send

		[Sql.Function(Name="pg_catalog.float8send", ServerSideOnly=true)]
		public static byte[]? Float8send(double? par1901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8smaller

		[Sql.Function(Name="pg_catalog.float8smaller", ServerSideOnly=true)]
		public static double? Float8smaller(double? par1903, double? par1904)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8um

		[Sql.Function(Name="pg_catalog.float8um", ServerSideOnly=true)]
		public static double? Float8um(double? par1906)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Float8up

		[Sql.Function(Name="pg_catalog.float8up", ServerSideOnly=true)]
		public static double? Float8up(double? par1908)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Floor

		[Sql.Function(Name="pg_catalog.floor", ServerSideOnly=true)]
		public static double? Floor(double? par1912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt4MulCash

		[Sql.Function(Name="pg_catalog.flt4_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt4MulCash(float? par1914, decimal? par1915)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Flt8MulCash

		[Sql.Function(Name="pg_catalog.flt8_mul_cash", ServerSideOnly=true)]
		public static decimal? Flt8MulCash(double? par1917, decimal? par1918)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrCValidator

		[Sql.Function(Name="pg_catalog.fmgr_c_validator", ServerSideOnly=true)]
		public static object? FmgrCValidator(int? par1919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrInternalValidator

		[Sql.Function(Name="pg_catalog.fmgr_internal_validator", ServerSideOnly=true)]
		public static object? FmgrInternalValidator(int? par1920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FmgrSqlValidator

		[Sql.Function(Name="pg_catalog.fmgr_sql_validator", ServerSideOnly=true)]
		public static object? FmgrSqlValidator(int? par1921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Format

		[Sql.Function(Name="pg_catalog.format", ServerSideOnly=true)]
		public static string? Format(string? par1926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region FormatType

		[Sql.Function(Name="pg_catalog.format_type", ServerSideOnly=true)]
		public static string? FormatType(int? par1928, int? par1929)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gb18030ToUtf8

		[Sql.Function(Name="pg_catalog.gb18030_to_utf8", ServerSideOnly=true)]
		public static object? Gb18030ToUtf8(int? par1930, int? par1931, object? par1932, object? par1933, int? par1934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GbkToUtf8

		[Sql.Function(Name="pg_catalog.gbk_to_utf8", ServerSideOnly=true)]
		public static object? GbkToUtf8(int? par1935, int? par1936, object? par1937, object? par1938, int? par1939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetBit

		[Sql.Function(Name="pg_catalog.get_bit", ServerSideOnly=true)]
		public static int? GetBit(byte[]? par1970, int? par1971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetByte

		[Sql.Function(Name="pg_catalog.get_byte", ServerSideOnly=true)]
		public static int? GetByte(byte[]? par1973, int? par1974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GetCurrentTsConfig

		[Sql.Function(Name="pg_catalog.get_current_ts_config", ServerSideOnly=true)]
		public static object? GetCurrentTsConfig()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getdatabaseencoding

		[Sql.Function(Name="pg_catalog.getdatabaseencoding", ServerSideOnly=true)]
		public static string? Getdatabaseencoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Getpgusername

		[Sql.Function(Name="pg_catalog.getpgusername", ServerSideOnly=true)]
		public static string? Getpgusername()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpPrefix

		[Sql.Function(Name="pg_catalog.gin_cmp_prefix", ServerSideOnly=true)]
		public static int? GinCmpPrefix(string? par1979, string? par1980, short? par1981, object? par1982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCmpTslexeme

		[Sql.Function(Name="pg_catalog.gin_cmp_tslexeme", ServerSideOnly=true)]
		public static int? GinCmpTslexeme(string? par1984, string? par1985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinCompareJsonb

		[Sql.Function(Name="pg_catalog.gin_compare_jsonb", ServerSideOnly=true)]
		public static int? GinCompareJsonb(string? par1987, string? par1988)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb", ServerSideOnly=true)]
		public static bool? GinConsistentJsonb(object? par1990, short? par1991, object? par1992, int? par1993, object? par1994, object? par1995, object? par1996, object? par1997)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinConsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_consistent_jsonb_path", ServerSideOnly=true)]
		public static bool? GinConsistentJsonbPath(object? par1999, short? par2000, object? par2001, int? par2002, object? par2003, object? par2004, object? par2005, object? par2006)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonb

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb", ServerSideOnly=true)]
		public static object? GinExtractJsonb(object? par2008, object? par2009, object? par2010)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_path", ServerSideOnly=true)]
		public static object? GinExtractJsonbPath(object? par2012, object? par2013, object? par2014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQuery

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query", ServerSideOnly=true)]
		public static object? GinExtractJsonbQuery(object? par2016, object? par2017, short? par2018, object? par2019, object? par2020, object? par2021, object? par2022)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractJsonbQueryPath

		[Sql.Function(Name="pg_catalog.gin_extract_jsonb_query_path", ServerSideOnly=true)]
		public static object? GinExtractJsonbQueryPath(object? par2024, object? par2025, short? par2026, object? par2027, object? par2028, object? par2029, object? par2030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsquery

		[Sql.Function(Name="pg_catalog.gin_extract_tsquery", ServerSideOnly=true)]
		public static object? GinExtractTsquery(object? par2038, object? par2039, short? par2040, object? par2041, object? par2042, object? par2043, object? par2044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinExtractTsvector

		[Sql.Function(Name="pg_catalog.gin_extract_tsvector", ServerSideOnly=true)]
		public static object? GinExtractTsvector(object? par2049, object? par2050, object? par2051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonb

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb", ServerSideOnly=true)]
		public static object? GinTriconsistentJsonb(object? par2053, short? par2054, object? par2055, int? par2056, object? par2057, object? par2058, object? par2059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTriconsistentJsonbPath

		[Sql.Function(Name="pg_catalog.gin_triconsistent_jsonb_path", ServerSideOnly=true)]
		public static object? GinTriconsistentJsonbPath(object? par2061, short? par2062, object? par2063, int? par2064, object? par2065, object? par2066, object? par2067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryConsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_consistent", ServerSideOnly=true)]
		public static bool? GinTsqueryConsistent(object? par2076, short? par2077, object? par2078, int? par2079, object? par2080, object? par2081, object? par2082, object? par2083)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GinTsqueryTriconsistent

		[Sql.Function(Name="pg_catalog.gin_tsquery_triconsistent", ServerSideOnly=true)]
		public static object? GinTsqueryTriconsistent(object? par2085, short? par2086, object? par2087, int? par2088, object? par2089, object? par2090, object? par2091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayconsistent

		[Sql.Function(Name="pg_catalog.ginarrayconsistent", ServerSideOnly=true)]
		public static bool? Ginarrayconsistent(object? par2093, short? par2094, object? par2095, int? par2096, object? par2097, object? par2098, object? par2099, object? par2100)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarrayextract

		[Sql.Function(Name="pg_catalog.ginarrayextract", ServerSideOnly=true)]
		public static object? Ginarrayextract(object? par2106, object? par2107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginarraytriconsistent

		[Sql.Function(Name="pg_catalog.ginarraytriconsistent", ServerSideOnly=true)]
		public static object? Ginarraytriconsistent(object? par2109, short? par2110, object? par2111, int? par2112, object? par2113, object? par2114, object? par2115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginbeginscan

		[Sql.Function(Name="pg_catalog.ginbeginscan", ServerSideOnly=true)]
		public static object? Ginbeginscan(object? par2117, object? par2118, object? par2119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginbuild

		[Sql.Function(Name="pg_catalog.ginbuild", ServerSideOnly=true)]
		public static object? Ginbuild(object? par2121, object? par2122, object? par2123)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginbuildempty

		[Sql.Function(Name="pg_catalog.ginbuildempty", ServerSideOnly=true)]
		public static object? Ginbuildempty(object? par2124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginbulkdelete

		[Sql.Function(Name="pg_catalog.ginbulkdelete", ServerSideOnly=true)]
		public static object? Ginbulkdelete(object? par2126, object? par2127, object? par2128, object? par2129)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gincostestimate

		[Sql.Function(Name="pg_catalog.gincostestimate", ServerSideOnly=true)]
		public static object? Gincostestimate(object? par2130, object? par2131, object? par2132, object? par2133, object? par2134, object? par2135, object? par2136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginendscan

		[Sql.Function(Name="pg_catalog.ginendscan", ServerSideOnly=true)]
		public static object? Ginendscan(object? par2137)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gingetbitmap

		[Sql.Function(Name="pg_catalog.gingetbitmap", ServerSideOnly=true)]
		public static long? Gingetbitmap(object? par2139, object? par2140)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gininsert

		[Sql.Function(Name="pg_catalog.gininsert", ServerSideOnly=true)]
		public static bool? Gininsert(object? par2142, object? par2143, object? par2144, object? par2145, object? par2146, object? par2147)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginmarkpos

		[Sql.Function(Name="pg_catalog.ginmarkpos", ServerSideOnly=true)]
		public static object? Ginmarkpos(object? par2148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginoptions

		[Sql.Function(Name="pg_catalog.ginoptions", ServerSideOnly=true)]
		public static byte[]? Ginoptions(object? par2150, bool? par2151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginqueryarrayextract

		[Sql.Function(Name="pg_catalog.ginqueryarrayextract", ServerSideOnly=true)]
		public static object? Ginqueryarrayextract(object? par2153, object? par2154, short? par2155, object? par2156, object? par2157, object? par2158, object? par2159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginrescan

		[Sql.Function(Name="pg_catalog.ginrescan", ServerSideOnly=true)]
		public static object? Ginrescan(object? par2160, object? par2161, object? par2162, object? par2163, object? par2164)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginrestrpos

		[Sql.Function(Name="pg_catalog.ginrestrpos", ServerSideOnly=true)]
		public static object? Ginrestrpos(object? par2165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ginvacuumcleanup

		[Sql.Function(Name="pg_catalog.ginvacuumcleanup", ServerSideOnly=true)]
		public static object? Ginvacuumcleanup(object? par2167, object? par2168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBboxDistance

		[Sql.Function(Name="pg_catalog.gist_bbox_distance", ServerSideOnly=true)]
		public static double? GistBboxDistance(object? par2170, NpgsqlPoint? par2171, int? par2172, int? par2173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxCompress

		[Sql.Function(Name="pg_catalog.gist_box_compress", ServerSideOnly=true)]
		public static object? GistBoxCompress(object? par2175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxConsistent

		[Sql.Function(Name="pg_catalog.gist_box_consistent", ServerSideOnly=true)]
		public static bool? GistBoxConsistent(object? par2177, NpgsqlBox? par2178, int? par2179, int? par2180, object? par2181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxDecompress

		[Sql.Function(Name="pg_catalog.gist_box_decompress", ServerSideOnly=true)]
		public static object? GistBoxDecompress(object? par2183)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxFetch

		[Sql.Function(Name="pg_catalog.gist_box_fetch", ServerSideOnly=true)]
		public static object? GistBoxFetch(object? par2185)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPenalty

		[Sql.Function(Name="pg_catalog.gist_box_penalty", ServerSideOnly=true)]
		public static object? GistBoxPenalty(object? par2187, object? par2188, object? par2189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxPicksplit

		[Sql.Function(Name="pg_catalog.gist_box_picksplit", ServerSideOnly=true)]
		public static object? GistBoxPicksplit(object? par2191, object? par2192)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxSame

		[Sql.Function(Name="pg_catalog.gist_box_same", ServerSideOnly=true)]
		public static object? GistBoxSame(NpgsqlBox? par2194, NpgsqlBox? par2195, object? par2196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistBoxUnion

		[Sql.Function(Name="pg_catalog.gist_box_union", ServerSideOnly=true)]
		public static NpgsqlBox? GistBoxUnion(object? par2198, object? par2199)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleCompress

		[Sql.Function(Name="pg_catalog.gist_circle_compress", ServerSideOnly=true)]
		public static object? GistCircleCompress(object? par2201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistCircleConsistent

		[Sql.Function(Name="pg_catalog.gist_circle_consistent", ServerSideOnly=true)]
		public static bool? GistCircleConsistent(object? par2203, NpgsqlCircle? par2204, int? par2205, int? par2206, object? par2207)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointCompress

		[Sql.Function(Name="pg_catalog.gist_point_compress", ServerSideOnly=true)]
		public static object? GistPointCompress(object? par2209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointConsistent

		[Sql.Function(Name="pg_catalog.gist_point_consistent", ServerSideOnly=true)]
		public static bool? GistPointConsistent(object? par2211, NpgsqlPoint? par2212, int? par2213, int? par2214, object? par2215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointDistance

		[Sql.Function(Name="pg_catalog.gist_point_distance", ServerSideOnly=true)]
		public static double? GistPointDistance(object? par2217, NpgsqlPoint? par2218, int? par2219, int? par2220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPointFetch

		[Sql.Function(Name="pg_catalog.gist_point_fetch", ServerSideOnly=true)]
		public static object? GistPointFetch(object? par2222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyCompress

		[Sql.Function(Name="pg_catalog.gist_poly_compress", ServerSideOnly=true)]
		public static object? GistPolyCompress(object? par2224)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GistPolyConsistent

		[Sql.Function(Name="pg_catalog.gist_poly_consistent", ServerSideOnly=true)]
		public static bool? GistPolyConsistent(object? par2226, NpgsqlPolygon? par2227, int? par2228, int? par2229, object? par2230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistbeginscan

		[Sql.Function(Name="pg_catalog.gistbeginscan", ServerSideOnly=true)]
		public static object? Gistbeginscan(object? par2232, object? par2233, object? par2234)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistbuild

		[Sql.Function(Name="pg_catalog.gistbuild", ServerSideOnly=true)]
		public static object? Gistbuild(object? par2236, object? par2237, object? par2238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistbuildempty

		[Sql.Function(Name="pg_catalog.gistbuildempty", ServerSideOnly=true)]
		public static object? Gistbuildempty(object? par2239)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistbulkdelete

		[Sql.Function(Name="pg_catalog.gistbulkdelete", ServerSideOnly=true)]
		public static object? Gistbulkdelete(object? par2241, object? par2242, object? par2243, object? par2244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistcanreturn

		[Sql.Function(Name="pg_catalog.gistcanreturn", ServerSideOnly=true)]
		public static bool? Gistcanreturn(object? par2246, int? par2247)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistcostestimate

		[Sql.Function(Name="pg_catalog.gistcostestimate", ServerSideOnly=true)]
		public static object? Gistcostestimate(object? par2248, object? par2249, object? par2250, object? par2251, object? par2252, object? par2253, object? par2254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistendscan

		[Sql.Function(Name="pg_catalog.gistendscan", ServerSideOnly=true)]
		public static object? Gistendscan(object? par2255)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistgetbitmap

		[Sql.Function(Name="pg_catalog.gistgetbitmap", ServerSideOnly=true)]
		public static long? Gistgetbitmap(object? par2257, object? par2258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistgettuple

		[Sql.Function(Name="pg_catalog.gistgettuple", ServerSideOnly=true)]
		public static bool? Gistgettuple(object? par2260, object? par2261)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistinsert

		[Sql.Function(Name="pg_catalog.gistinsert", ServerSideOnly=true)]
		public static bool? Gistinsert(object? par2263, object? par2264, object? par2265, object? par2266, object? par2267, object? par2268)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistmarkpos

		[Sql.Function(Name="pg_catalog.gistmarkpos", ServerSideOnly=true)]
		public static object? Gistmarkpos(object? par2269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistoptions

		[Sql.Function(Name="pg_catalog.gistoptions", ServerSideOnly=true)]
		public static byte[]? Gistoptions(object? par2271, bool? par2272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistrescan

		[Sql.Function(Name="pg_catalog.gistrescan", ServerSideOnly=true)]
		public static object? Gistrescan(object? par2273, object? par2274, object? par2275, object? par2276, object? par2277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistrestrpos

		[Sql.Function(Name="pg_catalog.gistrestrpos", ServerSideOnly=true)]
		public static object? Gistrestrpos(object? par2278)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gistvacuumcleanup

		[Sql.Function(Name="pg_catalog.gistvacuumcleanup", ServerSideOnly=true)]
		public static object? Gistvacuumcleanup(object? par2280, object? par2281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryCompress

		[Sql.Function(Name="pg_catalog.gtsquery_compress", ServerSideOnly=true)]
		public static object? GtsqueryCompress(object? par2283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryConsistent

		[Sql.Function(Name="pg_catalog.gtsquery_consistent", ServerSideOnly=true)]
		public static bool? GtsqueryConsistent(object? par2285, object? par2286, int? par2287, int? par2288, object? par2289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryDecompress

		[Sql.Function(Name="pg_catalog.gtsquery_decompress", ServerSideOnly=true)]
		public static object? GtsqueryDecompress(object? par2291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPenalty

		[Sql.Function(Name="pg_catalog.gtsquery_penalty", ServerSideOnly=true)]
		public static object? GtsqueryPenalty(object? par2293, object? par2294, object? par2295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryPicksplit

		[Sql.Function(Name="pg_catalog.gtsquery_picksplit", ServerSideOnly=true)]
		public static object? GtsqueryPicksplit(object? par2297, object? par2298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsquerySame

		[Sql.Function(Name="pg_catalog.gtsquery_same", ServerSideOnly=true)]
		public static object? GtsquerySame(long? par2300, long? par2301, object? par2302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsqueryUnion

		[Sql.Function(Name="pg_catalog.gtsquery_union", ServerSideOnly=true)]
		public static object? GtsqueryUnion(object? par2304, object? par2305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorCompress

		[Sql.Function(Name="pg_catalog.gtsvector_compress", ServerSideOnly=true)]
		public static object? GtsvectorCompress(object? par2307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorConsistent

		[Sql.Function(Name="pg_catalog.gtsvector_consistent", ServerSideOnly=true)]
		public static bool? GtsvectorConsistent(object? par2309, object? par2310, int? par2311, int? par2312, object? par2313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorDecompress

		[Sql.Function(Name="pg_catalog.gtsvector_decompress", ServerSideOnly=true)]
		public static object? GtsvectorDecompress(object? par2315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPenalty

		[Sql.Function(Name="pg_catalog.gtsvector_penalty", ServerSideOnly=true)]
		public static object? GtsvectorPenalty(object? par2317, object? par2318, object? par2319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorPicksplit

		[Sql.Function(Name="pg_catalog.gtsvector_picksplit", ServerSideOnly=true)]
		public static object? GtsvectorPicksplit(object? par2321, object? par2322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorSame

		[Sql.Function(Name="pg_catalog.gtsvector_same", ServerSideOnly=true)]
		public static object? GtsvectorSame(object? par2324, object? par2325, object? par2326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region GtsvectorUnion

		[Sql.Function(Name="pg_catalog.gtsvector_union", ServerSideOnly=true)]
		public static object? GtsvectorUnion(object? par2328, object? par2329)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorin

		[Sql.Function(Name="pg_catalog.gtsvectorin", ServerSideOnly=true)]
		public static object? Gtsvectorin(object? par2331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Gtsvectorout

		[Sql.Function(Name="pg_catalog.gtsvectorout", ServerSideOnly=true)]
		public static object? Gtsvectorout(object? par2333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasAnyColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_any_column_privilege", ServerSideOnly=true)]
		public static bool? HasAnyColumnPrivilege(int? par2354, string? par2355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasColumnPrivilege

		[Sql.Function(Name="pg_catalog.has_column_privilege", ServerSideOnly=true)]
		public static bool? HasColumnPrivilege(int? par2409, short? par2410, string? par2411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasDatabasePrivilege

		[Sql.Function(Name="pg_catalog.has_database_privilege", ServerSideOnly=true)]
		public static bool? HasDatabasePrivilege(int? par2432, string? par2433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasForeignDataWrapperPrivilege

		[Sql.Function(Name="pg_catalog.has_foreign_data_wrapper_privilege", ServerSideOnly=true)]
		public static bool? HasForeignDataWrapperPrivilege(int? par2454, string? par2455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasFunctionPrivilege

		[Sql.Function(Name="pg_catalog.has_function_privilege", ServerSideOnly=true)]
		public static bool? HasFunctionPrivilege(int? par2476, string? par2477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasLanguagePrivilege

		[Sql.Function(Name="pg_catalog.has_language_privilege", ServerSideOnly=true)]
		public static bool? HasLanguagePrivilege(int? par2498, string? par2499)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSchemaPrivilege

		[Sql.Function(Name="pg_catalog.has_schema_privilege", ServerSideOnly=true)]
		public static bool? HasSchemaPrivilege(int? par2520, string? par2521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasSequencePrivilege

		[Sql.Function(Name="pg_catalog.has_sequence_privilege", ServerSideOnly=true)]
		public static bool? HasSequencePrivilege(int? par2542, string? par2543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasServerPrivilege

		[Sql.Function(Name="pg_catalog.has_server_privilege", ServerSideOnly=true)]
		public static bool? HasServerPrivilege(int? par2564, string? par2565)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablePrivilege

		[Sql.Function(Name="pg_catalog.has_table_privilege", ServerSideOnly=true)]
		public static bool? HasTablePrivilege(int? par2586, string? par2587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTablespacePrivilege

		[Sql.Function(Name="pg_catalog.has_tablespace_privilege", ServerSideOnly=true)]
		public static bool? HasTablespacePrivilege(int? par2608, string? par2609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HasTypePrivilege

		[Sql.Function(Name="pg_catalog.has_type_privilege", ServerSideOnly=true)]
		public static bool? HasTypePrivilege(int? par2630, string? par2631)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashAclitem

		[Sql.Function(Name="pg_catalog.hash_aclitem", ServerSideOnly=true)]
		public static int? HashAclitem(object? par2633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashArray

		[Sql.Function(Name="pg_catalog.hash_array", ServerSideOnly=true)]
		public static int? HashArray(object? par2635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashNumeric

		[Sql.Function(Name="pg_catalog.hash_numeric", ServerSideOnly=true)]
		public static int? HashNumeric(decimal? par2637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region HashRange

		[Sql.Function(Name="pg_catalog.hash_range", ServerSideOnly=true)]
		public static int? HashRange(object? par2639)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbeginscan

		[Sql.Function(Name="pg_catalog.hashbeginscan", ServerSideOnly=true)]
		public static object? Hashbeginscan(object? par2641, object? par2642, object? par2643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbpchar

		[Sql.Function(Name="pg_catalog.hashbpchar", ServerSideOnly=true)]
		public static int? Hashbpchar(string? par2645)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbuild

		[Sql.Function(Name="pg_catalog.hashbuild", ServerSideOnly=true)]
		public static object? Hashbuild(object? par2647, object? par2648, object? par2649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbuildempty

		[Sql.Function(Name="pg_catalog.hashbuildempty", ServerSideOnly=true)]
		public static object? Hashbuildempty(object? par2650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashbulkdelete

		[Sql.Function(Name="pg_catalog.hashbulkdelete", ServerSideOnly=true)]
		public static object? Hashbulkdelete(object? par2652, object? par2653, object? par2654, object? par2655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashchar

		[Sql.Function(Name="pg_catalog.hashchar", ServerSideOnly=true)]
		public static int? Hashchar(object? par2657)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashcostestimate

		[Sql.Function(Name="pg_catalog.hashcostestimate", ServerSideOnly=true)]
		public static object? Hashcostestimate(object? par2658, object? par2659, object? par2660, object? par2661, object? par2662, object? par2663, object? par2664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashendscan

		[Sql.Function(Name="pg_catalog.hashendscan", ServerSideOnly=true)]
		public static object? Hashendscan(object? par2665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashenum

		[Sql.Function(Name="pg_catalog.hashenum", ServerSideOnly=true)]
		public static int? Hashenum(object? par2667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat4

		[Sql.Function(Name="pg_catalog.hashfloat4", ServerSideOnly=true)]
		public static int? Hashfloat4(float? par2669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashfloat8

		[Sql.Function(Name="pg_catalog.hashfloat8", ServerSideOnly=true)]
		public static int? Hashfloat8(double? par2671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashgetbitmap

		[Sql.Function(Name="pg_catalog.hashgetbitmap", ServerSideOnly=true)]
		public static long? Hashgetbitmap(object? par2673, object? par2674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashgettuple

		[Sql.Function(Name="pg_catalog.hashgettuple", ServerSideOnly=true)]
		public static bool? Hashgettuple(object? par2676, object? par2677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashinet

		[Sql.Function(Name="pg_catalog.hashinet", ServerSideOnly=true)]
		public static int? Hashinet(NpgsqlInet? par2679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashinsert

		[Sql.Function(Name="pg_catalog.hashinsert", ServerSideOnly=true)]
		public static bool? Hashinsert(object? par2681, object? par2682, object? par2683, object? par2684, object? par2685, object? par2686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2

		[Sql.Function(Name="pg_catalog.hashint2", ServerSideOnly=true)]
		public static int? Hashint2(short? par2688)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint2vector

		[Sql.Function(Name="pg_catalog.hashint2vector", ServerSideOnly=true)]
		public static int? Hashint2vector(object? par2690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint4

		[Sql.Function(Name="pg_catalog.hashint4", ServerSideOnly=true)]
		public static int? Hashint4(int? par2692)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashint8

		[Sql.Function(Name="pg_catalog.hashint8", ServerSideOnly=true)]
		public static int? Hashint8(long? par2694)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmacaddr

		[Sql.Function(Name="pg_catalog.hashmacaddr", ServerSideOnly=true)]
		public static int? Hashmacaddr(PhysicalAddress? par2696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashmarkpos

		[Sql.Function(Name="pg_catalog.hashmarkpos", ServerSideOnly=true)]
		public static object? Hashmarkpos(object? par2697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashname

		[Sql.Function(Name="pg_catalog.hashname", ServerSideOnly=true)]
		public static int? Hashname(string? par2699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoid

		[Sql.Function(Name="pg_catalog.hashoid", ServerSideOnly=true)]
		public static int? Hashoid(int? par2701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoidvector

		[Sql.Function(Name="pg_catalog.hashoidvector", ServerSideOnly=true)]
		public static int? Hashoidvector(object? par2703)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashoptions

		[Sql.Function(Name="pg_catalog.hashoptions", ServerSideOnly=true)]
		public static byte[]? Hashoptions(object? par2705, bool? par2706)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashrescan

		[Sql.Function(Name="pg_catalog.hashrescan", ServerSideOnly=true)]
		public static object? Hashrescan(object? par2707, object? par2708, object? par2709, object? par2710, object? par2711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashrestrpos

		[Sql.Function(Name="pg_catalog.hashrestrpos", ServerSideOnly=true)]
		public static object? Hashrestrpos(object? par2712)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashtext

		[Sql.Function(Name="pg_catalog.hashtext", ServerSideOnly=true)]
		public static int? Hashtext(string? par2714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashvacuumcleanup

		[Sql.Function(Name="pg_catalog.hashvacuumcleanup", ServerSideOnly=true)]
		public static object? Hashvacuumcleanup(object? par2716, object? par2717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hashvarlena

		[Sql.Function(Name="pg_catalog.hashvarlena", ServerSideOnly=true)]
		public static int? Hashvarlena(object? par2719)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Height

		[Sql.Function(Name="pg_catalog.height", ServerSideOnly=true)]
		public static double? Height(NpgsqlBox? par2721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Host

		[Sql.Function(Name="pg_catalog.host", ServerSideOnly=true)]
		public static string? Host(NpgsqlInet? par2723)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Hostmask

		[Sql.Function(Name="pg_catalog.hostmask", ServerSideOnly=true)]
		public static NpgsqlInet? Hostmask(NpgsqlInet? par2725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikejoinsel

		[Sql.Function(Name="pg_catalog.iclikejoinsel", ServerSideOnly=true)]
		public static double? Iclikejoinsel(object? par2727, int? par2728, object? par2729, short? par2730, object? par2731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iclikesel

		[Sql.Function(Name="pg_catalog.iclikesel", ServerSideOnly=true)]
		public static double? Iclikesel(object? par2733, int? par2734, object? par2735, int? par2736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikejoinsel

		[Sql.Function(Name="pg_catalog.icnlikejoinsel", ServerSideOnly=true)]
		public static double? Icnlikejoinsel(object? par2738, int? par2739, object? par2740, short? par2741, object? par2742)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icnlikesel

		[Sql.Function(Name="pg_catalog.icnlikesel", ServerSideOnly=true)]
		public static double? Icnlikesel(object? par2744, int? par2745, object? par2746, int? par2747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqjoinsel

		[Sql.Function(Name="pg_catalog.icregexeqjoinsel", ServerSideOnly=true)]
		public static double? Icregexeqjoinsel(object? par2749, int? par2750, object? par2751, short? par2752, object? par2753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexeqsel

		[Sql.Function(Name="pg_catalog.icregexeqsel", ServerSideOnly=true)]
		public static double? Icregexeqsel(object? par2755, int? par2756, object? par2757, int? par2758)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnejoinsel

		[Sql.Function(Name="pg_catalog.icregexnejoinsel", ServerSideOnly=true)]
		public static double? Icregexnejoinsel(object? par2760, int? par2761, object? par2762, short? par2763, object? par2764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Icregexnesel

		[Sql.Function(Name="pg_catalog.icregexnesel", ServerSideOnly=true)]
		public static double? Icregexnesel(object? par2766, int? par2767, object? par2768, int? par2769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientAddr

		[Sql.Function(Name="pg_catalog.inet_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetClientAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetClientPort

		[Sql.Function(Name="pg_catalog.inet_client_port", ServerSideOnly=true)]
		public static int? InetClientPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistCompress

		[Sql.Function(Name="pg_catalog.inet_gist_compress", ServerSideOnly=true)]
		public static object? InetGistCompress(object? par2773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistConsistent

		[Sql.Function(Name="pg_catalog.inet_gist_consistent", ServerSideOnly=true)]
		public static bool? InetGistConsistent(object? par2775, NpgsqlInet? par2776, int? par2777, int? par2778, object? par2779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistDecompress

		[Sql.Function(Name="pg_catalog.inet_gist_decompress", ServerSideOnly=true)]
		public static object? InetGistDecompress(object? par2781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistFetch

		[Sql.Function(Name="pg_catalog.inet_gist_fetch", ServerSideOnly=true)]
		public static object? InetGistFetch(object? par2783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPenalty

		[Sql.Function(Name="pg_catalog.inet_gist_penalty", ServerSideOnly=true)]
		public static object? InetGistPenalty(object? par2785, object? par2786, object? par2787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistPicksplit

		[Sql.Function(Name="pg_catalog.inet_gist_picksplit", ServerSideOnly=true)]
		public static object? InetGistPicksplit(object? par2789, object? par2790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistSame

		[Sql.Function(Name="pg_catalog.inet_gist_same", ServerSideOnly=true)]
		public static object? InetGistSame(NpgsqlInet? par2792, NpgsqlInet? par2793, object? par2794)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetGistUnion

		[Sql.Function(Name="pg_catalog.inet_gist_union", ServerSideOnly=true)]
		public static object? InetGistUnion(object? par2796, object? par2797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetIn

		[Sql.Function(Name="pg_catalog.inet_in", ServerSideOnly=true)]
		public static NpgsqlInet? InetIn(object? par2799)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetMerge

		[Sql.Function(Name="pg_catalog.inet_merge", ServerSideOnly=true)]
		public static NpgsqlInet? InetMerge(NpgsqlInet? par2801, NpgsqlInet? par2802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetOut

		[Sql.Function(Name="pg_catalog.inet_out", ServerSideOnly=true)]
		public static object? InetOut(NpgsqlInet? par2804)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetRecv

		[Sql.Function(Name="pg_catalog.inet_recv", ServerSideOnly=true)]
		public static NpgsqlInet? InetRecv(object? par2806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSameFamily

		[Sql.Function(Name="pg_catalog.inet_same_family", ServerSideOnly=true)]
		public static bool? InetSameFamily(NpgsqlInet? par2808, NpgsqlInet? par2809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetSend

		[Sql.Function(Name="pg_catalog.inet_send", ServerSideOnly=true)]
		public static byte[]? InetSend(NpgsqlInet? par2811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerAddr

		[Sql.Function(Name="pg_catalog.inet_server_addr", ServerSideOnly=true)]
		public static NpgsqlInet? InetServerAddr()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetServerPort

		[Sql.Function(Name="pg_catalog.inet_server_port", ServerSideOnly=true)]
		public static int? InetServerPort()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetand

		[Sql.Function(Name="pg_catalog.inetand", ServerSideOnly=true)]
		public static NpgsqlInet? Inetand(NpgsqlInet? par2815, NpgsqlInet? par2816)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetmi

		[Sql.Function(Name="pg_catalog.inetmi", ServerSideOnly=true)]
		public static long? Inetmi(NpgsqlInet? par2818, NpgsqlInet? par2819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InetmiInt8

		[Sql.Function(Name="pg_catalog.inetmi_int8", ServerSideOnly=true)]
		public static NpgsqlInet? InetmiInt8(NpgsqlInet? par2821, long? par2822)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetnot

		[Sql.Function(Name="pg_catalog.inetnot", ServerSideOnly=true)]
		public static NpgsqlInet? Inetnot(NpgsqlInet? par2824)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetor

		[Sql.Function(Name="pg_catalog.inetor", ServerSideOnly=true)]
		public static NpgsqlInet? Inetor(NpgsqlInet? par2826, NpgsqlInet? par2827)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Inetpl

		[Sql.Function(Name="pg_catalog.inetpl", ServerSideOnly=true)]
		public static NpgsqlInet? Inetpl(NpgsqlInet? par2829, long? par2830)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Initcap

		[Sql.Function(Name="pg_catalog.initcap", ServerSideOnly=true)]
		public static string? Initcap(string? par2832)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2

		[Sql.Function(Name="pg_catalog.int2", ServerSideOnly=true)]
		public static short? Int2(long? par2842)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Accum

		[Sql.Function(Name="pg_catalog.int2_accum", ServerSideOnly=true)]
		public static object? Int2Accum(object? par2844, short? par2845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AccumInv

		[Sql.Function(Name="pg_catalog.int2_accum_inv", ServerSideOnly=true)]
		public static object? Int2AccumInv(object? par2847, short? par2848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccum

		[Sql.Function(Name="pg_catalog.int2_avg_accum", ServerSideOnly=true)]
		public static object? Int2AvgAccum(object? par2850, short? par2851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2AvgAccumInv

		[Sql.Function(Name="pg_catalog.int2_avg_accum_inv", ServerSideOnly=true)]
		public static object? Int2AvgAccumInv(object? par2853, short? par2854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2MulCash

		[Sql.Function(Name="pg_catalog.int2_mul_cash", ServerSideOnly=true)]
		public static decimal? Int2MulCash(short? par2856, decimal? par2857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2Sum

		[Sql.Function(Name="pg_catalog.int2_sum", ServerSideOnly=true)]
		public static long? Int2Sum(long? par2859, short? par2860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24div

		[Sql.Function(Name="pg_catalog.int24div", ServerSideOnly=true)]
		public static int? Int24div(short? par2862, int? par2863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24eq

		[Sql.Function(Name="pg_catalog.int24eq", ServerSideOnly=true)]
		public static bool? Int24eq(short? par2865, int? par2866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ge

		[Sql.Function(Name="pg_catalog.int24ge", ServerSideOnly=true)]
		public static bool? Int24ge(short? par2868, int? par2869)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24gt

		[Sql.Function(Name="pg_catalog.int24gt", ServerSideOnly=true)]
		public static bool? Int24gt(short? par2871, int? par2872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24le

		[Sql.Function(Name="pg_catalog.int24le", ServerSideOnly=true)]
		public static bool? Int24le(short? par2874, int? par2875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24lt

		[Sql.Function(Name="pg_catalog.int24lt", ServerSideOnly=true)]
		public static bool? Int24lt(short? par2877, int? par2878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mi

		[Sql.Function(Name="pg_catalog.int24mi", ServerSideOnly=true)]
		public static int? Int24mi(short? par2880, int? par2881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24mul

		[Sql.Function(Name="pg_catalog.int24mul", ServerSideOnly=true)]
		public static int? Int24mul(short? par2883, int? par2884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24ne

		[Sql.Function(Name="pg_catalog.int24ne", ServerSideOnly=true)]
		public static bool? Int24ne(short? par2886, int? par2887)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int24pl

		[Sql.Function(Name="pg_catalog.int24pl", ServerSideOnly=true)]
		public static int? Int24pl(short? par2889, int? par2890)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28div

		[Sql.Function(Name="pg_catalog.int28div", ServerSideOnly=true)]
		public static long? Int28div(short? par2892, long? par2893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28eq

		[Sql.Function(Name="pg_catalog.int28eq", ServerSideOnly=true)]
		public static bool? Int28eq(short? par2895, long? par2896)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ge

		[Sql.Function(Name="pg_catalog.int28ge", ServerSideOnly=true)]
		public static bool? Int28ge(short? par2898, long? par2899)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28gt

		[Sql.Function(Name="pg_catalog.int28gt", ServerSideOnly=true)]
		public static bool? Int28gt(short? par2901, long? par2902)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28le

		[Sql.Function(Name="pg_catalog.int28le", ServerSideOnly=true)]
		public static bool? Int28le(short? par2904, long? par2905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28lt

		[Sql.Function(Name="pg_catalog.int28lt", ServerSideOnly=true)]
		public static bool? Int28lt(short? par2907, long? par2908)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mi

		[Sql.Function(Name="pg_catalog.int28mi", ServerSideOnly=true)]
		public static long? Int28mi(short? par2910, long? par2911)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28mul

		[Sql.Function(Name="pg_catalog.int28mul", ServerSideOnly=true)]
		public static long? Int28mul(short? par2913, long? par2914)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28ne

		[Sql.Function(Name="pg_catalog.int28ne", ServerSideOnly=true)]
		public static bool? Int28ne(short? par2916, long? par2917)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int28pl

		[Sql.Function(Name="pg_catalog.int28pl", ServerSideOnly=true)]
		public static long? Int28pl(short? par2919, long? par2920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2abs

		[Sql.Function(Name="pg_catalog.int2abs", ServerSideOnly=true)]
		public static short? Int2abs(short? par2922)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2and

		[Sql.Function(Name="pg_catalog.int2and", ServerSideOnly=true)]
		public static short? Int2and(short? par2924, short? par2925)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2div

		[Sql.Function(Name="pg_catalog.int2div", ServerSideOnly=true)]
		public static short? Int2div(short? par2927, short? par2928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2eq

		[Sql.Function(Name="pg_catalog.int2eq", ServerSideOnly=true)]
		public static bool? Int2eq(short? par2930, short? par2931)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ge

		[Sql.Function(Name="pg_catalog.int2ge", ServerSideOnly=true)]
		public static bool? Int2ge(short? par2933, short? par2934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2gt

		[Sql.Function(Name="pg_catalog.int2gt", ServerSideOnly=true)]
		public static bool? Int2gt(short? par2936, short? par2937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2in

		[Sql.Function(Name="pg_catalog.int2in", ServerSideOnly=true)]
		public static short? Int2in(object? par2939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2int4Sum

		[Sql.Function(Name="pg_catalog.int2int4_sum", ServerSideOnly=true)]
		public static long? Int2int4Sum(object? par2941)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2larger

		[Sql.Function(Name="pg_catalog.int2larger", ServerSideOnly=true)]
		public static short? Int2larger(short? par2943, short? par2944)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2le

		[Sql.Function(Name="pg_catalog.int2le", ServerSideOnly=true)]
		public static bool? Int2le(short? par2946, short? par2947)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2lt

		[Sql.Function(Name="pg_catalog.int2lt", ServerSideOnly=true)]
		public static bool? Int2lt(short? par2949, short? par2950)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mi

		[Sql.Function(Name="pg_catalog.int2mi", ServerSideOnly=true)]
		public static short? Int2mi(short? par2952, short? par2953)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mod

		[Sql.Function(Name="pg_catalog.int2mod", ServerSideOnly=true)]
		public static short? Int2mod(short? par2955, short? par2956)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2mul

		[Sql.Function(Name="pg_catalog.int2mul", ServerSideOnly=true)]
		public static short? Int2mul(short? par2958, short? par2959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2ne

		[Sql.Function(Name="pg_catalog.int2ne", ServerSideOnly=true)]
		public static bool? Int2ne(short? par2961, short? par2962)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2not

		[Sql.Function(Name="pg_catalog.int2not", ServerSideOnly=true)]
		public static short? Int2not(short? par2964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2or

		[Sql.Function(Name="pg_catalog.int2or", ServerSideOnly=true)]
		public static short? Int2or(short? par2966, short? par2967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2out

		[Sql.Function(Name="pg_catalog.int2out", ServerSideOnly=true)]
		public static object? Int2out(short? par2969)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2pl

		[Sql.Function(Name="pg_catalog.int2pl", ServerSideOnly=true)]
		public static short? Int2pl(short? par2971, short? par2972)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2recv

		[Sql.Function(Name="pg_catalog.int2recv", ServerSideOnly=true)]
		public static short? Int2recv(object? par2974)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2send

		[Sql.Function(Name="pg_catalog.int2send", ServerSideOnly=true)]
		public static byte[]? Int2send(short? par2976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shl

		[Sql.Function(Name="pg_catalog.int2shl", ServerSideOnly=true)]
		public static short? Int2shl(short? par2978, int? par2979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2shr

		[Sql.Function(Name="pg_catalog.int2shr", ServerSideOnly=true)]
		public static short? Int2shr(short? par2981, int? par2982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2smaller

		[Sql.Function(Name="pg_catalog.int2smaller", ServerSideOnly=true)]
		public static short? Int2smaller(short? par2984, short? par2985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2um

		[Sql.Function(Name="pg_catalog.int2um", ServerSideOnly=true)]
		public static short? Int2um(short? par2987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2up

		[Sql.Function(Name="pg_catalog.int2up", ServerSideOnly=true)]
		public static short? Int2up(short? par2989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectoreq

		[Sql.Function(Name="pg_catalog.int2vectoreq", ServerSideOnly=true)]
		public static bool? Int2vectoreq(object? par2991, object? par2992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorin

		[Sql.Function(Name="pg_catalog.int2vectorin", ServerSideOnly=true)]
		public static object? Int2vectorin(object? par2994)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorout

		[Sql.Function(Name="pg_catalog.int2vectorout", ServerSideOnly=true)]
		public static object? Int2vectorout(object? par2996)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorrecv

		[Sql.Function(Name="pg_catalog.int2vectorrecv", ServerSideOnly=true)]
		public static object? Int2vectorrecv(object? par2998)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2vectorsend

		[Sql.Function(Name="pg_catalog.int2vectorsend", ServerSideOnly=true)]
		public static byte[]? Int2vectorsend(object? par3000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int2xor

		[Sql.Function(Name="pg_catalog.int2xor", ServerSideOnly=true)]
		public static short? Int2xor(short? par3002, short? par3003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4

		[Sql.Function(Name="pg_catalog.int4", ServerSideOnly=true)]
		public static int? Int4(object? par3019)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Accum

		[Sql.Function(Name="pg_catalog.int4_accum", ServerSideOnly=true)]
		public static object? Int4Accum(object? par3021, int? par3022)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AccumInv

		[Sql.Function(Name="pg_catalog.int4_accum_inv", ServerSideOnly=true)]
		public static object? Int4AccumInv(object? par3024, int? par3025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccum

		[Sql.Function(Name="pg_catalog.int4_avg_accum", ServerSideOnly=true)]
		public static object? Int4AvgAccum(object? par3027, int? par3028)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4AvgAccumInv

		[Sql.Function(Name="pg_catalog.int4_avg_accum_inv", ServerSideOnly=true)]
		public static object? Int4AvgAccumInv(object? par3030, int? par3031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4MulCash

		[Sql.Function(Name="pg_catalog.int4_mul_cash", ServerSideOnly=true)]
		public static decimal? Int4MulCash(int? par3033, decimal? par3034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4Sum

		[Sql.Function(Name="pg_catalog.int4_sum", ServerSideOnly=true)]
		public static long? Int4Sum(long? par3036, int? par3037)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42div

		[Sql.Function(Name="pg_catalog.int42div", ServerSideOnly=true)]
		public static int? Int42div(int? par3039, short? par3040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42eq

		[Sql.Function(Name="pg_catalog.int42eq", ServerSideOnly=true)]
		public static bool? Int42eq(int? par3042, short? par3043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ge

		[Sql.Function(Name="pg_catalog.int42ge", ServerSideOnly=true)]
		public static bool? Int42ge(int? par3045, short? par3046)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42gt

		[Sql.Function(Name="pg_catalog.int42gt", ServerSideOnly=true)]
		public static bool? Int42gt(int? par3048, short? par3049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42le

		[Sql.Function(Name="pg_catalog.int42le", ServerSideOnly=true)]
		public static bool? Int42le(int? par3051, short? par3052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42lt

		[Sql.Function(Name="pg_catalog.int42lt", ServerSideOnly=true)]
		public static bool? Int42lt(int? par3054, short? par3055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mi

		[Sql.Function(Name="pg_catalog.int42mi", ServerSideOnly=true)]
		public static int? Int42mi(int? par3057, short? par3058)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42mul

		[Sql.Function(Name="pg_catalog.int42mul", ServerSideOnly=true)]
		public static int? Int42mul(int? par3060, short? par3061)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42ne

		[Sql.Function(Name="pg_catalog.int42ne", ServerSideOnly=true)]
		public static bool? Int42ne(int? par3063, short? par3064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int42pl

		[Sql.Function(Name="pg_catalog.int42pl", ServerSideOnly=true)]
		public static int? Int42pl(int? par3066, short? par3067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48div

		[Sql.Function(Name="pg_catalog.int48div", ServerSideOnly=true)]
		public static long? Int48div(int? par3069, long? par3070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48eq

		[Sql.Function(Name="pg_catalog.int48eq", ServerSideOnly=true)]
		public static bool? Int48eq(int? par3072, long? par3073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ge

		[Sql.Function(Name="pg_catalog.int48ge", ServerSideOnly=true)]
		public static bool? Int48ge(int? par3075, long? par3076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48gt

		[Sql.Function(Name="pg_catalog.int48gt", ServerSideOnly=true)]
		public static bool? Int48gt(int? par3078, long? par3079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48le

		[Sql.Function(Name="pg_catalog.int48le", ServerSideOnly=true)]
		public static bool? Int48le(int? par3081, long? par3082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48lt

		[Sql.Function(Name="pg_catalog.int48lt", ServerSideOnly=true)]
		public static bool? Int48lt(int? par3084, long? par3085)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mi

		[Sql.Function(Name="pg_catalog.int48mi", ServerSideOnly=true)]
		public static long? Int48mi(int? par3087, long? par3088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48mul

		[Sql.Function(Name="pg_catalog.int48mul", ServerSideOnly=true)]
		public static long? Int48mul(int? par3090, long? par3091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48ne

		[Sql.Function(Name="pg_catalog.int48ne", ServerSideOnly=true)]
		public static bool? Int48ne(int? par3093, long? par3094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int48pl

		[Sql.Function(Name="pg_catalog.int48pl", ServerSideOnly=true)]
		public static long? Int48pl(int? par3096, long? par3097)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4abs

		[Sql.Function(Name="pg_catalog.int4abs", ServerSideOnly=true)]
		public static int? Int4abs(int? par3099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4and

		[Sql.Function(Name="pg_catalog.int4and", ServerSideOnly=true)]
		public static int? Int4and(int? par3101, int? par3102)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4div

		[Sql.Function(Name="pg_catalog.int4div", ServerSideOnly=true)]
		public static int? Int4div(int? par3104, int? par3105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4eq

		[Sql.Function(Name="pg_catalog.int4eq", ServerSideOnly=true)]
		public static bool? Int4eq(int? par3107, int? par3108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ge

		[Sql.Function(Name="pg_catalog.int4ge", ServerSideOnly=true)]
		public static bool? Int4ge(int? par3110, int? par3111)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4gt

		[Sql.Function(Name="pg_catalog.int4gt", ServerSideOnly=true)]
		public static bool? Int4gt(int? par3113, int? par3114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4in

		[Sql.Function(Name="pg_catalog.int4in", ServerSideOnly=true)]
		public static int? Int4in(object? par3116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4inc

		[Sql.Function(Name="pg_catalog.int4inc", ServerSideOnly=true)]
		public static int? Int4inc(int? par3118)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4larger

		[Sql.Function(Name="pg_catalog.int4larger", ServerSideOnly=true)]
		public static int? Int4larger(int? par3120, int? par3121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4le

		[Sql.Function(Name="pg_catalog.int4le", ServerSideOnly=true)]
		public static bool? Int4le(int? par3123, int? par3124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4lt

		[Sql.Function(Name="pg_catalog.int4lt", ServerSideOnly=true)]
		public static bool? Int4lt(int? par3126, int? par3127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mi

		[Sql.Function(Name="pg_catalog.int4mi", ServerSideOnly=true)]
		public static int? Int4mi(int? par3129, int? par3130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mod

		[Sql.Function(Name="pg_catalog.int4mod", ServerSideOnly=true)]
		public static int? Int4mod(int? par3132, int? par3133)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4mul

		[Sql.Function(Name="pg_catalog.int4mul", ServerSideOnly=true)]
		public static int? Int4mul(int? par3135, int? par3136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4ne

		[Sql.Function(Name="pg_catalog.int4ne", ServerSideOnly=true)]
		public static bool? Int4ne(int? par3138, int? par3139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4not

		[Sql.Function(Name="pg_catalog.int4not", ServerSideOnly=true)]
		public static int? Int4not(int? par3141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4or

		[Sql.Function(Name="pg_catalog.int4or", ServerSideOnly=true)]
		public static int? Int4or(int? par3143, int? par3144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4out

		[Sql.Function(Name="pg_catalog.int4out", ServerSideOnly=true)]
		public static object? Int4out(int? par3146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4pl

		[Sql.Function(Name="pg_catalog.int4pl", ServerSideOnly=true)]
		public static int? Int4pl(int? par3148, int? par3149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4range

		[Sql.Function(Name="pg_catalog.int4range", ServerSideOnly=true)]
		public static object? Int4range(int? par3154, int? par3155, string? par3156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeCanonical

		[Sql.Function(Name="pg_catalog.int4range_canonical", ServerSideOnly=true)]
		public static object? Int4rangeCanonical(object? par3158)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4rangeSubdiff

		[Sql.Function(Name="pg_catalog.int4range_subdiff", ServerSideOnly=true)]
		public static double? Int4rangeSubdiff(int? par3160, int? par3161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4recv

		[Sql.Function(Name="pg_catalog.int4recv", ServerSideOnly=true)]
		public static int? Int4recv(object? par3163)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4send

		[Sql.Function(Name="pg_catalog.int4send", ServerSideOnly=true)]
		public static byte[]? Int4send(int? par3165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shl

		[Sql.Function(Name="pg_catalog.int4shl", ServerSideOnly=true)]
		public static int? Int4shl(int? par3167, int? par3168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4shr

		[Sql.Function(Name="pg_catalog.int4shr", ServerSideOnly=true)]
		public static int? Int4shr(int? par3170, int? par3171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4smaller

		[Sql.Function(Name="pg_catalog.int4smaller", ServerSideOnly=true)]
		public static int? Int4smaller(int? par3173, int? par3174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4um

		[Sql.Function(Name="pg_catalog.int4um", ServerSideOnly=true)]
		public static int? Int4um(int? par3176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4up

		[Sql.Function(Name="pg_catalog.int4up", ServerSideOnly=true)]
		public static int? Int4up(int? par3178)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int4xor

		[Sql.Function(Name="pg_catalog.int4xor", ServerSideOnly=true)]
		public static int? Int4xor(int? par3180, int? par3181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8

		[Sql.Function(Name="pg_catalog.int8", ServerSideOnly=true)]
		public static long? Int8(short? par3195)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Accum

		[Sql.Function(Name="pg_catalog.int8_accum", ServerSideOnly=true)]
		public static object? Int8Accum(object? par3197, long? par3198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AccumInv

		[Sql.Function(Name="pg_catalog.int8_accum_inv", ServerSideOnly=true)]
		public static object? Int8AccumInv(object? par3200, long? par3201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Avg

		[Sql.Function(Name="pg_catalog.int8_avg", ServerSideOnly=true)]
		public static decimal? Int8Avg(object? par3203)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccum

		[Sql.Function(Name="pg_catalog.int8_avg_accum", ServerSideOnly=true)]
		public static object? Int8AvgAccum(object? par3205, long? par3206)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8AvgAccumInv

		[Sql.Function(Name="pg_catalog.int8_avg_accum_inv", ServerSideOnly=true)]
		public static object? Int8AvgAccumInv(object? par3208, long? par3209)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8Sum

		[Sql.Function(Name="pg_catalog.int8_sum", ServerSideOnly=true)]
		public static decimal? Int8Sum(decimal? par3211, long? par3212)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82div

		[Sql.Function(Name="pg_catalog.int82div", ServerSideOnly=true)]
		public static long? Int82div(long? par3214, short? par3215)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82eq

		[Sql.Function(Name="pg_catalog.int82eq", ServerSideOnly=true)]
		public static bool? Int82eq(long? par3217, short? par3218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ge

		[Sql.Function(Name="pg_catalog.int82ge", ServerSideOnly=true)]
		public static bool? Int82ge(long? par3220, short? par3221)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82gt

		[Sql.Function(Name="pg_catalog.int82gt", ServerSideOnly=true)]
		public static bool? Int82gt(long? par3223, short? par3224)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82le

		[Sql.Function(Name="pg_catalog.int82le", ServerSideOnly=true)]
		public static bool? Int82le(long? par3226, short? par3227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82lt

		[Sql.Function(Name="pg_catalog.int82lt", ServerSideOnly=true)]
		public static bool? Int82lt(long? par3229, short? par3230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mi

		[Sql.Function(Name="pg_catalog.int82mi", ServerSideOnly=true)]
		public static long? Int82mi(long? par3232, short? par3233)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82mul

		[Sql.Function(Name="pg_catalog.int82mul", ServerSideOnly=true)]
		public static long? Int82mul(long? par3235, short? par3236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82ne

		[Sql.Function(Name="pg_catalog.int82ne", ServerSideOnly=true)]
		public static bool? Int82ne(long? par3238, short? par3239)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int82pl

		[Sql.Function(Name="pg_catalog.int82pl", ServerSideOnly=true)]
		public static long? Int82pl(long? par3241, short? par3242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84div

		[Sql.Function(Name="pg_catalog.int84div", ServerSideOnly=true)]
		public static long? Int84div(long? par3244, int? par3245)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84eq

		[Sql.Function(Name="pg_catalog.int84eq", ServerSideOnly=true)]
		public static bool? Int84eq(long? par3247, int? par3248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ge

		[Sql.Function(Name="pg_catalog.int84ge", ServerSideOnly=true)]
		public static bool? Int84ge(long? par3250, int? par3251)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84gt

		[Sql.Function(Name="pg_catalog.int84gt", ServerSideOnly=true)]
		public static bool? Int84gt(long? par3253, int? par3254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84le

		[Sql.Function(Name="pg_catalog.int84le", ServerSideOnly=true)]
		public static bool? Int84le(long? par3256, int? par3257)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84lt

		[Sql.Function(Name="pg_catalog.int84lt", ServerSideOnly=true)]
		public static bool? Int84lt(long? par3259, int? par3260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mi

		[Sql.Function(Name="pg_catalog.int84mi", ServerSideOnly=true)]
		public static long? Int84mi(long? par3262, int? par3263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84mul

		[Sql.Function(Name="pg_catalog.int84mul", ServerSideOnly=true)]
		public static long? Int84mul(long? par3265, int? par3266)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84ne

		[Sql.Function(Name="pg_catalog.int84ne", ServerSideOnly=true)]
		public static bool? Int84ne(long? par3268, int? par3269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int84pl

		[Sql.Function(Name="pg_catalog.int84pl", ServerSideOnly=true)]
		public static long? Int84pl(long? par3271, int? par3272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8abs

		[Sql.Function(Name="pg_catalog.int8abs", ServerSideOnly=true)]
		public static long? Int8abs(long? par3274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8and

		[Sql.Function(Name="pg_catalog.int8and", ServerSideOnly=true)]
		public static long? Int8and(long? par3276, long? par3277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8dec

		[Sql.Function(Name="pg_catalog.int8dec", ServerSideOnly=true)]
		public static long? Int8dec(long? par3279)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8decAny

		[Sql.Function(Name="pg_catalog.int8dec_any", ServerSideOnly=true)]
		public static long? Int8decAny(long? par3281, object? par3282)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8div

		[Sql.Function(Name="pg_catalog.int8div", ServerSideOnly=true)]
		public static long? Int8div(long? par3284, long? par3285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8eq

		[Sql.Function(Name="pg_catalog.int8eq", ServerSideOnly=true)]
		public static bool? Int8eq(long? par3287, long? par3288)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ge

		[Sql.Function(Name="pg_catalog.int8ge", ServerSideOnly=true)]
		public static bool? Int8ge(long? par3290, long? par3291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8gt

		[Sql.Function(Name="pg_catalog.int8gt", ServerSideOnly=true)]
		public static bool? Int8gt(long? par3293, long? par3294)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8in

		[Sql.Function(Name="pg_catalog.int8in", ServerSideOnly=true)]
		public static long? Int8in(object? par3296)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8inc

		[Sql.Function(Name="pg_catalog.int8inc", ServerSideOnly=true)]
		public static long? Int8inc(long? par3298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incAny

		[Sql.Function(Name="pg_catalog.int8inc_any", ServerSideOnly=true)]
		public static long? Int8incAny(long? par3300, object? par3301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8incFloat8Float8

		[Sql.Function(Name="pg_catalog.int8inc_float8_float8", ServerSideOnly=true)]
		public static long? Int8incFloat8Float8(long? par3303, double? par3304, double? par3305)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8larger

		[Sql.Function(Name="pg_catalog.int8larger", ServerSideOnly=true)]
		public static long? Int8larger(long? par3307, long? par3308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8le

		[Sql.Function(Name="pg_catalog.int8le", ServerSideOnly=true)]
		public static bool? Int8le(long? par3310, long? par3311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8lt

		[Sql.Function(Name="pg_catalog.int8lt", ServerSideOnly=true)]
		public static bool? Int8lt(long? par3313, long? par3314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mi

		[Sql.Function(Name="pg_catalog.int8mi", ServerSideOnly=true)]
		public static long? Int8mi(long? par3316, long? par3317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mod

		[Sql.Function(Name="pg_catalog.int8mod", ServerSideOnly=true)]
		public static long? Int8mod(long? par3319, long? par3320)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8mul

		[Sql.Function(Name="pg_catalog.int8mul", ServerSideOnly=true)]
		public static long? Int8mul(long? par3322, long? par3323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8ne

		[Sql.Function(Name="pg_catalog.int8ne", ServerSideOnly=true)]
		public static bool? Int8ne(long? par3325, long? par3326)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8not

		[Sql.Function(Name="pg_catalog.int8not", ServerSideOnly=true)]
		public static long? Int8not(long? par3328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8or

		[Sql.Function(Name="pg_catalog.int8or", ServerSideOnly=true)]
		public static long? Int8or(long? par3330, long? par3331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8out

		[Sql.Function(Name="pg_catalog.int8out", ServerSideOnly=true)]
		public static object? Int8out(long? par3333)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8pl

		[Sql.Function(Name="pg_catalog.int8pl", ServerSideOnly=true)]
		public static long? Int8pl(long? par3335, long? par3336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8plInet

		[Sql.Function(Name="pg_catalog.int8pl_inet", ServerSideOnly=true)]
		public static NpgsqlInet? Int8plInet(long? par3338, NpgsqlInet? par3339)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8range

		[Sql.Function(Name="pg_catalog.int8range", ServerSideOnly=true)]
		public static object? Int8range(long? par3344, long? par3345, string? par3346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeCanonical

		[Sql.Function(Name="pg_catalog.int8range_canonical", ServerSideOnly=true)]
		public static object? Int8rangeCanonical(object? par3348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8rangeSubdiff

		[Sql.Function(Name="pg_catalog.int8range_subdiff", ServerSideOnly=true)]
		public static double? Int8rangeSubdiff(long? par3350, long? par3351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8recv

		[Sql.Function(Name="pg_catalog.int8recv", ServerSideOnly=true)]
		public static long? Int8recv(object? par3353)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8send

		[Sql.Function(Name="pg_catalog.int8send", ServerSideOnly=true)]
		public static byte[]? Int8send(long? par3355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shl

		[Sql.Function(Name="pg_catalog.int8shl", ServerSideOnly=true)]
		public static long? Int8shl(long? par3357, int? par3358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8shr

		[Sql.Function(Name="pg_catalog.int8shr", ServerSideOnly=true)]
		public static long? Int8shr(long? par3360, int? par3361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8smaller

		[Sql.Function(Name="pg_catalog.int8smaller", ServerSideOnly=true)]
		public static long? Int8smaller(long? par3363, long? par3364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8um

		[Sql.Function(Name="pg_catalog.int8um", ServerSideOnly=true)]
		public static long? Int8um(long? par3366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8up

		[Sql.Function(Name="pg_catalog.int8up", ServerSideOnly=true)]
		public static long? Int8up(long? par3368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Int8xor

		[Sql.Function(Name="pg_catalog.int8xor", ServerSideOnly=true)]
		public static long? Int8xor(long? par3370, long? par3371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntegerPlDate

		[Sql.Function(Name="pg_catalog.integer_pl_date", ServerSideOnly=true)]
		public static NpgsqlDate? IntegerPlDate(int? par3373, NpgsqlDate? par3374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterLb

		[Sql.Function(Name="pg_catalog.inter_lb", ServerSideOnly=true)]
		public static bool? InterLb(NpgsqlLine? par3376, NpgsqlBox? par3377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSb

		[Sql.Function(Name="pg_catalog.inter_sb", ServerSideOnly=true)]
		public static bool? InterSb(NpgsqlLSeg? par3379, NpgsqlBox? par3380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InterSl

		[Sql.Function(Name="pg_catalog.inter_sl", ServerSideOnly=true)]
		public static bool? InterSl(NpgsqlLSeg? par3382, NpgsqlLine? par3383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalIn

		[Sql.Function(Name="pg_catalog.internal_in", ServerSideOnly=true)]
		public static object? InternalIn(object? par3385)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region InternalOut

		[Sql.Function(Name="pg_catalog.internal_out", ServerSideOnly=true)]
		public static object? InternalOut(object? par3387)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Interval

		[Sql.Function(Name="pg_catalog.interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? Interval(TimeSpan? par3394)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccum

		[Sql.Function(Name="pg_catalog.interval_accum", ServerSideOnly=true)]
		public static object? IntervalAccum(object? par3396, NpgsqlTimeSpan? par3397)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAccumInv

		[Sql.Function(Name="pg_catalog.interval_accum_inv", ServerSideOnly=true)]
		public static object? IntervalAccumInv(object? par3399, NpgsqlTimeSpan? par3400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalAvg

		[Sql.Function(Name="pg_catalog.interval_avg", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalAvg(object? par3402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalCmp

		[Sql.Function(Name="pg_catalog.interval_cmp", ServerSideOnly=true)]
		public static int? IntervalCmp(NpgsqlTimeSpan? par3404, NpgsqlTimeSpan? par3405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalDiv

		[Sql.Function(Name="pg_catalog.interval_div", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalDiv(NpgsqlTimeSpan? par3407, double? par3408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalEq

		[Sql.Function(Name="pg_catalog.interval_eq", ServerSideOnly=true)]
		public static bool? IntervalEq(NpgsqlTimeSpan? par3410, NpgsqlTimeSpan? par3411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGe

		[Sql.Function(Name="pg_catalog.interval_ge", ServerSideOnly=true)]
		public static bool? IntervalGe(NpgsqlTimeSpan? par3413, NpgsqlTimeSpan? par3414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalGt

		[Sql.Function(Name="pg_catalog.interval_gt", ServerSideOnly=true)]
		public static bool? IntervalGt(NpgsqlTimeSpan? par3416, NpgsqlTimeSpan? par3417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalHash

		[Sql.Function(Name="pg_catalog.interval_hash", ServerSideOnly=true)]
		public static int? IntervalHash(NpgsqlTimeSpan? par3419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalIn

		[Sql.Function(Name="pg_catalog.interval_in", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalIn(object? par3421, int? par3422, int? par3423)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLarger

		[Sql.Function(Name="pg_catalog.interval_larger", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalLarger(NpgsqlTimeSpan? par3425, NpgsqlTimeSpan? par3426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLe

		[Sql.Function(Name="pg_catalog.interval_le", ServerSideOnly=true)]
		public static bool? IntervalLe(NpgsqlTimeSpan? par3428, NpgsqlTimeSpan? par3429)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalLt

		[Sql.Function(Name="pg_catalog.interval_lt", ServerSideOnly=true)]
		public static bool? IntervalLt(NpgsqlTimeSpan? par3431, NpgsqlTimeSpan? par3432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMi

		[Sql.Function(Name="pg_catalog.interval_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMi(NpgsqlTimeSpan? par3434, NpgsqlTimeSpan? par3435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalMul

		[Sql.Function(Name="pg_catalog.interval_mul", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalMul(NpgsqlTimeSpan? par3437, double? par3438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalNe

		[Sql.Function(Name="pg_catalog.interval_ne", ServerSideOnly=true)]
		public static bool? IntervalNe(NpgsqlTimeSpan? par3440, NpgsqlTimeSpan? par3441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalOut

		[Sql.Function(Name="pg_catalog.interval_out", ServerSideOnly=true)]
		public static object? IntervalOut(NpgsqlTimeSpan? par3443)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPl

		[Sql.Function(Name="pg_catalog.interval_pl", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalPl(NpgsqlTimeSpan? par3445, NpgsqlTimeSpan? par3446)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlDate

		[Sql.Function(Name="pg_catalog.interval_pl_date", ServerSideOnly=true)]
		public static NpgsqlDateTime? IntervalPlDate(NpgsqlTimeSpan? par3448, NpgsqlDate? par3449)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTime

		[Sql.Function(Name="pg_catalog.interval_pl_time", ServerSideOnly=true)]
		public static TimeSpan? IntervalPlTime(NpgsqlTimeSpan? par3451, TimeSpan? par3452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamp

		[Sql.Function(Name="pg_catalog.interval_pl_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? IntervalPlTimestamp(NpgsqlTimeSpan? par3454, NpgsqlDateTime? par3455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimestamptz

		[Sql.Function(Name="pg_catalog.interval_pl_timestamptz", ServerSideOnly=true)]
		public static NpgsqlDateTime? IntervalPlTimestamptz(NpgsqlTimeSpan? par3457, NpgsqlDateTime? par3458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalPlTimetz

		[Sql.Function(Name="pg_catalog.interval_pl_timetz", ServerSideOnly=true)]
		public static DateTimeOffset? IntervalPlTimetz(NpgsqlTimeSpan? par3460, DateTimeOffset? par3461)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalRecv

		[Sql.Function(Name="pg_catalog.interval_recv", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalRecv(object? par3463, int? par3464, int? par3465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSend

		[Sql.Function(Name="pg_catalog.interval_send", ServerSideOnly=true)]
		public static byte[]? IntervalSend(NpgsqlTimeSpan? par3467)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalSmaller

		[Sql.Function(Name="pg_catalog.interval_smaller", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalSmaller(NpgsqlTimeSpan? par3469, NpgsqlTimeSpan? par3470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalTransform

		[Sql.Function(Name="pg_catalog.interval_transform", ServerSideOnly=true)]
		public static object? IntervalTransform(object? par3472)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IntervalUm

		[Sql.Function(Name="pg_catalog.interval_um", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? IntervalUm(NpgsqlTimeSpan? par3474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodin

		[Sql.Function(Name="pg_catalog.intervaltypmodin", ServerSideOnly=true)]
		public static int? Intervaltypmodin(object? par3476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intervaltypmodout

		[Sql.Function(Name="pg_catalog.intervaltypmodout", ServerSideOnly=true)]
		public static object? Intervaltypmodout(int? par3478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Intinterval

		[Sql.Function(Name="pg_catalog.intinterval", ServerSideOnly=true)]
		public static bool? Intinterval(object? par3480, object? par3481)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isclosed

		[Sql.Function(Name="pg_catalog.isclosed", ServerSideOnly=true)]
		public static bool? Isclosed(NpgsqlPath? par3483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isempty

		[Sql.Function(Name="pg_catalog.isempty", ServerSideOnly=true)]
		public static bool? Isempty(object? par3485)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isfinite

		[Sql.Function(Name="pg_catalog.isfinite", ServerSideOnly=true)]
		public static bool? Isfinite(object? par3495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ishorizontal

		[Sql.Function(Name="pg_catalog.ishorizontal", ServerSideOnly=true)]
		public static bool? Ishorizontal(NpgsqlLine? par3502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToKoi8r

		[Sql.Function(Name="pg_catalog.iso_to_koi8r", ServerSideOnly=true)]
		public static object? IsoToKoi8r(int? par3503, int? par3504, object? par3505, object? par3506, int? par3507)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToMic

		[Sql.Function(Name="pg_catalog.iso_to_mic", ServerSideOnly=true)]
		public static object? IsoToMic(int? par3508, int? par3509, object? par3510, object? par3511, int? par3512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin1251

		[Sql.Function(Name="pg_catalog.iso_to_win1251", ServerSideOnly=true)]
		public static object? IsoToWin1251(int? par3513, int? par3514, object? par3515, object? par3516, int? par3517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region IsoToWin866

		[Sql.Function(Name="pg_catalog.iso_to_win866", ServerSideOnly=true)]
		public static object? IsoToWin866(int? par3518, int? par3519, object? par3520, object? par3521, int? par3522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso88591ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_1_to_utf8", ServerSideOnly=true)]
		public static object? Iso88591ToUtf8(int? par3523, int? par3524, object? par3525, object? par3526, int? par3527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Iso8859ToUtf8

		[Sql.Function(Name="pg_catalog.iso8859_to_utf8", ServerSideOnly=true)]
		public static object? Iso8859ToUtf8(int? par3528, int? par3529, object? par3530, object? par3531, int? par3532)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isopen

		[Sql.Function(Name="pg_catalog.isopen", ServerSideOnly=true)]
		public static bool? Isopen(NpgsqlPath? par3534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isparallel

		[Sql.Function(Name="pg_catalog.isparallel", ServerSideOnly=true)]
		public static bool? Isparallel(NpgsqlLine? par3539, NpgsqlLine? par3540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isperp

		[Sql.Function(Name="pg_catalog.isperp", ServerSideOnly=true)]
		public static bool? Isperp(NpgsqlLine? par3545, NpgsqlLine? par3546)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Date

		[Sql.Function(Name="public.issue_1742_date", ServerSideOnly=true)]
		public static int? Issue1742Date(NpgsqlDate? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Ts

		[Sql.Function(Name="public.issue_1742_ts", ServerSideOnly=true)]
		public static int? Issue1742Ts(NpgsqlDateTime? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Issue1742Tstz

		[Sql.Function(Name="public.issue_1742_tstz", ServerSideOnly=true)]
		public static int? Issue1742Tstz(NpgsqlDateTime? p1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Isvertical

		[Sql.Function(Name="pg_catalog.isvertical", ServerSideOnly=true)]
		public static bool? Isvertical(NpgsqlLine? par3556)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JohabToUtf8

		[Sql.Function(Name="pg_catalog.johab_to_utf8", ServerSideOnly=true)]
		public static object? JohabToUtf8(int? par3557, int? par3558, object? par3559, object? par3560, int? par3561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAgg

		[Sql.Function(Name="pg_catalog.json_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string? JsonAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par3563)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggFinalfn

		[Sql.Function(Name="pg_catalog.json_agg_finalfn", ServerSideOnly=true)]
		public static string? JsonAggFinalfn(object? par3565)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonAggTransfn

		[Sql.Function(Name="pg_catalog.json_agg_transfn", ServerSideOnly=true)]
		public static object? JsonAggTransfn(object? par3567, object? par3568)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElement

		[Sql.Function(Name="pg_catalog.json_array_element", ServerSideOnly=true)]
		public static string? JsonArrayElement(string? from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayElementText

		[Sql.Function(Name="pg_catalog.json_array_element_text", ServerSideOnly=true)]
		public static string? JsonArrayElementText(string? from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonArrayLength

		[Sql.Function(Name="pg_catalog.json_array_length", ServerSideOnly=true)]
		public static int? JsonArrayLength(string? par3572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildArray

		[Sql.Function(Name="pg_catalog.json_build_array", ServerSideOnly=true)]
		public static string? JsonBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonBuildObject

		[Sql.Function(Name="pg_catalog.json_build_object", ServerSideOnly=true)]
		public static string? JsonBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPath

		[Sql.Function(Name="pg_catalog.json_extract_path", ServerSideOnly=true)]
		public static string? JsonExtractPath(string? from_json, object? path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonExtractPathText

		[Sql.Function(Name="pg_catalog.json_extract_path_text", ServerSideOnly=true)]
		public static string? JsonExtractPathText(string? from_json, object? path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonIn

		[Sql.Function(Name="pg_catalog.json_in", ServerSideOnly=true)]
		public static string? JsonIn(object? par3582)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObject

		[Sql.Function(Name="pg_catalog.json_object", ServerSideOnly=true)]
		public static string? JsonObject(object? par3586, object? par3587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAgg

		[Sql.Function(Name="pg_catalog.json_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string? JsonObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par3589, Expression<Func<TSource, object?>> par3590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.json_object_agg_finalfn", ServerSideOnly=true)]
		public static string? JsonObjectAggFinalfn(object? par3592)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectAggTransfn

		[Sql.Function(Name="pg_catalog.json_object_agg_transfn", ServerSideOnly=true)]
		public static object? JsonObjectAggTransfn(object? par3594, object? par3595, object? par3596)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectField

		[Sql.Function(Name="pg_catalog.json_object_field", ServerSideOnly=true)]
		public static string? JsonObjectField(string? from_json, string? field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonObjectFieldText

		[Sql.Function(Name="pg_catalog.json_object_field_text", ServerSideOnly=true)]
		public static string? JsonObjectFieldText(string? from_json, string? field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonOut

		[Sql.Function(Name="pg_catalog.json_out", ServerSideOnly=true)]
		public static object? JsonOut(string? par3601)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonPopulateRecord

		[Sql.Function(Name="pg_catalog.json_populate_record", ServerSideOnly=true)]
		public static object? JsonPopulateRecord(object? @base, string? from_json, bool? use_json_as_text)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonRecv

		[Sql.Function(Name="pg_catalog.json_recv", ServerSideOnly=true)]
		public static string? JsonRecv(object? par3604)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonSend

		[Sql.Function(Name="pg_catalog.json_send", ServerSideOnly=true)]
		public static byte[]? JsonSend(string? par3606)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonStripNulls

		[Sql.Function(Name="pg_catalog.json_strip_nulls", ServerSideOnly=true)]
		public static string? JsonStripNulls(string? par3608)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonToRecord

		[Sql.Function(Name="pg_catalog.json_to_record", ServerSideOnly=true)]
		public static object? JsonToRecord(string? par3609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonTypeof

		[Sql.Function(Name="pg_catalog.json_typeof", ServerSideOnly=true)]
		public static string? JsonTypeof(string? par3612)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAgg

		[Sql.Function(Name="pg_catalog.jsonb_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string? JsonbAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par3614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_finalfn", ServerSideOnly=true)]
		public static string? JsonbAggFinalfn(object? par3616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_agg_transfn", ServerSideOnly=true)]
		public static object? JsonbAggTransfn(object? par3618, object? par3619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElement

		[Sql.Function(Name="pg_catalog.jsonb_array_element", ServerSideOnly=true)]
		public static string? JsonbArrayElement(string? from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayElementText

		[Sql.Function(Name="pg_catalog.jsonb_array_element_text", ServerSideOnly=true)]
		public static string? JsonbArrayElementText(string? from_json, int? element_index)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbArrayLength

		[Sql.Function(Name="pg_catalog.jsonb_array_length", ServerSideOnly=true)]
		public static int? JsonbArrayLength(string? par3623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildArray

		[Sql.Function(Name="pg_catalog.jsonb_build_array", ServerSideOnly=true)]
		public static string? JsonbBuildArray()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbBuildObject

		[Sql.Function(Name="pg_catalog.jsonb_build_object", ServerSideOnly=true)]
		public static string? JsonbBuildObject()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbCmp

		[Sql.Function(Name="pg_catalog.jsonb_cmp", ServerSideOnly=true)]
		public static int? JsonbCmp(string? par3631, string? par3632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbConcat

		[Sql.Function(Name="pg_catalog.jsonb_concat", ServerSideOnly=true)]
		public static string? JsonbConcat(string? par3634, string? par3635)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContained

		[Sql.Function(Name="pg_catalog.jsonb_contained", ServerSideOnly=true)]
		public static bool? JsonbContained(string? par3637, string? par3638)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbContains

		[Sql.Function(Name="pg_catalog.jsonb_contains", ServerSideOnly=true)]
		public static bool? JsonbContains(string? par3640, string? par3641)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDelete

		[Sql.Function(Name="pg_catalog.jsonb_delete", ServerSideOnly=true)]
		public static string? JsonbDelete(string? par3646, int? par3647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbDeletePath

		[Sql.Function(Name="pg_catalog.jsonb_delete_path", ServerSideOnly=true)]
		public static string? JsonbDeletePath(string? par3649, object? par3650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbEq

		[Sql.Function(Name="pg_catalog.jsonb_eq", ServerSideOnly=true)]
		public static bool? JsonbEq(string? par3652, string? par3653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExists

		[Sql.Function(Name="pg_catalog.jsonb_exists", ServerSideOnly=true)]
		public static bool? JsonbExists(string? par3655, string? par3656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAll

		[Sql.Function(Name="pg_catalog.jsonb_exists_all", ServerSideOnly=true)]
		public static bool? JsonbExistsAll(string? par3658, object? par3659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExistsAny

		[Sql.Function(Name="pg_catalog.jsonb_exists_any", ServerSideOnly=true)]
		public static bool? JsonbExistsAny(string? par3661, object? par3662)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPath

		[Sql.Function(Name="pg_catalog.jsonb_extract_path", ServerSideOnly=true)]
		public static string? JsonbExtractPath(string? from_json, object? path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbExtractPathText

		[Sql.Function(Name="pg_catalog.jsonb_extract_path_text", ServerSideOnly=true)]
		public static string? JsonbExtractPathText(string? from_json, object? path_elems)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGe

		[Sql.Function(Name="pg_catalog.jsonb_ge", ServerSideOnly=true)]
		public static bool? JsonbGe(string? par3666, string? par3667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbGt

		[Sql.Function(Name="pg_catalog.jsonb_gt", ServerSideOnly=true)]
		public static bool? JsonbGt(string? par3669, string? par3670)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbHash

		[Sql.Function(Name="pg_catalog.jsonb_hash", ServerSideOnly=true)]
		public static int? JsonbHash(string? par3672)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbIn

		[Sql.Function(Name="pg_catalog.jsonb_in", ServerSideOnly=true)]
		public static string? JsonbIn(object? par3674)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLe

		[Sql.Function(Name="pg_catalog.jsonb_le", ServerSideOnly=true)]
		public static bool? JsonbLe(string? par3676, string? par3677)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbLt

		[Sql.Function(Name="pg_catalog.jsonb_lt", ServerSideOnly=true)]
		public static bool? JsonbLt(string? par3679, string? par3680)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbNe

		[Sql.Function(Name="pg_catalog.jsonb_ne", ServerSideOnly=true)]
		public static bool? JsonbNe(string? par3682, string? par3683)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObject

		[Sql.Function(Name="pg_catalog.jsonb_object", ServerSideOnly=true)]
		public static string? JsonbObject(object? par3687, object? par3688)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAgg

		[Sql.Function(Name="pg_catalog.jsonb_object_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static string? JsonbObjectAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par3690, Expression<Func<TSource, object?>> par3691)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggFinalfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_finalfn", ServerSideOnly=true)]
		public static string? JsonbObjectAggFinalfn(object? par3693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectAggTransfn

		[Sql.Function(Name="pg_catalog.jsonb_object_agg_transfn", ServerSideOnly=true)]
		public static object? JsonbObjectAggTransfn(object? par3695, object? par3696, object? par3697)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectField

		[Sql.Function(Name="pg_catalog.jsonb_object_field", ServerSideOnly=true)]
		public static string? JsonbObjectField(string? from_json, string? field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbObjectFieldText

		[Sql.Function(Name="pg_catalog.jsonb_object_field_text", ServerSideOnly=true)]
		public static string? JsonbObjectFieldText(string? from_json, string? field_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbOut

		[Sql.Function(Name="pg_catalog.jsonb_out", ServerSideOnly=true)]
		public static object? JsonbOut(string? par3702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPopulateRecord

		[Sql.Function(Name="pg_catalog.jsonb_populate_record", ServerSideOnly=true)]
		public static object? JsonbPopulateRecord(object? par3704, string? par3705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbPretty

		[Sql.Function(Name="pg_catalog.jsonb_pretty", ServerSideOnly=true)]
		public static string? JsonbPretty(string? par3709)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbRecv

		[Sql.Function(Name="pg_catalog.jsonb_recv", ServerSideOnly=true)]
		public static string? JsonbRecv(object? par3711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSend

		[Sql.Function(Name="pg_catalog.jsonb_send", ServerSideOnly=true)]
		public static byte[]? JsonbSend(string? par3713)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbSet

		[Sql.Function(Name="pg_catalog.jsonb_set", ServerSideOnly=true)]
		public static string? JsonbSet(string? jsonb_in, object? path, string? replacement, bool? create_if_missing)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbStripNulls

		[Sql.Function(Name="pg_catalog.jsonb_strip_nulls", ServerSideOnly=true)]
		public static string? JsonbStripNulls(string? par3716)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbToRecord

		[Sql.Function(Name="pg_catalog.jsonb_to_record", ServerSideOnly=true)]
		public static object? JsonbToRecord(string? par3717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JsonbTypeof

		[Sql.Function(Name="pg_catalog.jsonb_typeof", ServerSideOnly=true)]
		public static string? JsonbTypeof(string? par3720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyDays

		[Sql.Function(Name="pg_catalog.justify_days", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyDays(NpgsqlTimeSpan? par3722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyHours

		[Sql.Function(Name="pg_catalog.justify_hours", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyHours(NpgsqlTimeSpan? par3724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region JustifyInterval

		[Sql.Function(Name="pg_catalog.justify_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? JustifyInterval(NpgsqlTimeSpan? par3726)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToIso

		[Sql.Function(Name="pg_catalog.koi8r_to_iso", ServerSideOnly=true)]
		public static object? Koi8rToIso(int? par3727, int? par3728, object? par3729, object? par3730, int? par3731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToMic

		[Sql.Function(Name="pg_catalog.koi8r_to_mic", ServerSideOnly=true)]
		public static object? Koi8rToMic(int? par3732, int? par3733, object? par3734, object? par3735, int? par3736)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToUtf8

		[Sql.Function(Name="pg_catalog.koi8r_to_utf8", ServerSideOnly=true)]
		public static object? Koi8rToUtf8(int? par3737, int? par3738, object? par3739, object? par3740, int? par3741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin1251

		[Sql.Function(Name="pg_catalog.koi8r_to_win1251", ServerSideOnly=true)]
		public static object? Koi8rToWin1251(int? par3742, int? par3743, object? par3744, object? par3745, int? par3746)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8rToWin866

		[Sql.Function(Name="pg_catalog.koi8r_to_win866", ServerSideOnly=true)]
		public static object? Koi8rToWin866(int? par3747, int? par3748, object? par3749, object? par3750, int? par3751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Koi8uToUtf8

		[Sql.Function(Name="pg_catalog.koi8u_to_utf8", ServerSideOnly=true)]
		public static object? Koi8uToUtf8(int? par3752, int? par3753, object? par3754, object? par3755, int? par3756)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lag

		[Sql.Function(Name="pg_catalog.lag", ServerSideOnly=true)]
		public static object? Lag(object? par3763, int? par3764, object? par3765)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerIn

		[Sql.Function(Name="pg_catalog.language_handler_in", ServerSideOnly=true)]
		public static object? LanguageHandlerIn(object? par3767)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LanguageHandlerOut

		[Sql.Function(Name="pg_catalog.language_handler_out", ServerSideOnly=true)]
		public static object? LanguageHandlerOut(object? par3769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LastValue

		[Sql.Function(Name="pg_catalog.last_value", ServerSideOnly=true)]
		public static object? LastValue(object? par3771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lastval

		[Sql.Function(Name="pg_catalog.lastval", ServerSideOnly=true)]
		public static long? Lastval()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin1ToMic

		[Sql.Function(Name="pg_catalog.latin1_to_mic", ServerSideOnly=true)]
		public static object? Latin1ToMic(int? par3773, int? par3774, object? par3775, object? par3776, int? par3777)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToMic

		[Sql.Function(Name="pg_catalog.latin2_to_mic", ServerSideOnly=true)]
		public static object? Latin2ToMic(int? par3778, int? par3779, object? par3780, object? par3781, int? par3782)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin2ToWin1250

		[Sql.Function(Name="pg_catalog.latin2_to_win1250", ServerSideOnly=true)]
		public static object? Latin2ToWin1250(int? par3783, int? par3784, object? par3785, object? par3786, int? par3787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin3ToMic

		[Sql.Function(Name="pg_catalog.latin3_to_mic", ServerSideOnly=true)]
		public static object? Latin3ToMic(int? par3788, int? par3789, object? par3790, object? par3791, int? par3792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Latin4ToMic

		[Sql.Function(Name="pg_catalog.latin4_to_mic", ServerSideOnly=true)]
		public static object? Latin4ToMic(int? par3793, int? par3794, object? par3795, object? par3796, int? par3797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lead

		[Sql.Function(Name="pg_catalog.lead", ServerSideOnly=true)]
		public static object? Lead(object? par3804, int? par3805, object? par3806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Left

		[Sql.Function(Name="pg_catalog.left", ServerSideOnly=true)]
		public static string? Left(string? par3808, int? par3809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Length

		[Sql.Function(Name="pg_catalog.length", ServerSideOnly=true)]
		public static int? Length(object? par3826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Like

		[Sql.Function(Name="pg_catalog.like", ServerSideOnly=true)]
		public static bool? Like(byte[]? par3834, byte[]? par3835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LikeEscape

		[Sql.Function(Name="pg_catalog.like_escape", ServerSideOnly=true)]
		public static byte[]? LikeEscape(byte[]? par3840, byte[]? par3841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likejoinsel

		[Sql.Function(Name="pg_catalog.likejoinsel", ServerSideOnly=true)]
		public static double? Likejoinsel(object? par3843, int? par3844, object? par3845, short? par3846, object? par3847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Likesel

		[Sql.Function(Name="pg_catalog.likesel", ServerSideOnly=true)]
		public static double? Likesel(object? par3849, int? par3850, object? par3851, int? par3852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Line

		[Sql.Function(Name="pg_catalog.line", ServerSideOnly=true)]
		public static NpgsqlLine? Line(NpgsqlPoint? par3854, NpgsqlPoint? par3855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineDistance

		[Sql.Function(Name="pg_catalog.line_distance", ServerSideOnly=true)]
		public static double? LineDistance(NpgsqlLine? par3857, NpgsqlLine? par3858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineEq

		[Sql.Function(Name="pg_catalog.line_eq", ServerSideOnly=true)]
		public static bool? LineEq(NpgsqlLine? par3860, NpgsqlLine? par3861)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineHorizontal

		[Sql.Function(Name="pg_catalog.line_horizontal", ServerSideOnly=true)]
		public static bool? LineHorizontal(NpgsqlLine? par3863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIn

		[Sql.Function(Name="pg_catalog.line_in", ServerSideOnly=true)]
		public static NpgsqlLine? LineIn(object? par3865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineInterpt

		[Sql.Function(Name="pg_catalog.line_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LineInterpt(NpgsqlLine? par3867, NpgsqlLine? par3868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineIntersect

		[Sql.Function(Name="pg_catalog.line_intersect", ServerSideOnly=true)]
		public static bool? LineIntersect(NpgsqlLine? par3870, NpgsqlLine? par3871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineOut

		[Sql.Function(Name="pg_catalog.line_out", ServerSideOnly=true)]
		public static object? LineOut(NpgsqlLine? par3873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineParallel

		[Sql.Function(Name="pg_catalog.line_parallel", ServerSideOnly=true)]
		public static bool? LineParallel(NpgsqlLine? par3875, NpgsqlLine? par3876)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LinePerp

		[Sql.Function(Name="pg_catalog.line_perp", ServerSideOnly=true)]
		public static bool? LinePerp(NpgsqlLine? par3878, NpgsqlLine? par3879)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineRecv

		[Sql.Function(Name="pg_catalog.line_recv", ServerSideOnly=true)]
		public static NpgsqlLine? LineRecv(object? par3881)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineSend

		[Sql.Function(Name="pg_catalog.line_send", ServerSideOnly=true)]
		public static byte[]? LineSend(NpgsqlLine? par3883)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LineVertical

		[Sql.Function(Name="pg_catalog.line_vertical", ServerSideOnly=true)]
		public static bool? LineVertical(NpgsqlLine? par3885)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ln

		[Sql.Function(Name="pg_catalog.ln", ServerSideOnly=true)]
		public static decimal? Ln(decimal? par3889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoClose

		[Sql.Function(Name="pg_catalog.lo_close", ServerSideOnly=true)]
		public static int? LoClose(int? par3891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreat

		[Sql.Function(Name="pg_catalog.lo_creat", ServerSideOnly=true)]
		public static int? LoCreat(int? par3893)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoCreate

		[Sql.Function(Name="pg_catalog.lo_create", ServerSideOnly=true)]
		public static int? LoCreate(int? par3895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoExport

		[Sql.Function(Name="pg_catalog.lo_export", ServerSideOnly=true)]
		public static int? LoExport(int? par3897, string? par3898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoFromBytea

		[Sql.Function(Name="pg_catalog.lo_from_bytea", ServerSideOnly=true)]
		public static int? LoFromBytea(int? par3900, byte[]? par3901)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoGet

		[Sql.Function(Name="pg_catalog.lo_get", ServerSideOnly=true)]
		public static byte[]? LoGet(int? par3905, long? par3906, int? par3907)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoImport

		[Sql.Function(Name="pg_catalog.lo_import", ServerSideOnly=true)]
		public static int? LoImport(string? par3911, int? par3912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek

		[Sql.Function(Name="pg_catalog.lo_lseek", ServerSideOnly=true)]
		public static int? LoLseek(int? par3914, int? par3915, int? par3916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoLseek64

		[Sql.Function(Name="pg_catalog.lo_lseek64", ServerSideOnly=true)]
		public static long? LoLseek64(int? par3918, long? par3919, int? par3920)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoOpen

		[Sql.Function(Name="pg_catalog.lo_open", ServerSideOnly=true)]
		public static int? LoOpen(int? par3922, int? par3923)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoPut

		[Sql.Function(Name="pg_catalog.lo_put", ServerSideOnly=true)]
		public static object? LoPut(int? par3924, long? par3925, byte[]? par3926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell

		[Sql.Function(Name="pg_catalog.lo_tell", ServerSideOnly=true)]
		public static int? LoTell(int? par3928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTell64

		[Sql.Function(Name="pg_catalog.lo_tell64", ServerSideOnly=true)]
		public static long? LoTell64(int? par3930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate

		[Sql.Function(Name="pg_catalog.lo_truncate", ServerSideOnly=true)]
		public static int? LoTruncate(int? par3932, int? par3933)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoTruncate64

		[Sql.Function(Name="pg_catalog.lo_truncate64", ServerSideOnly=true)]
		public static int? LoTruncate64(int? par3935, long? par3936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LoUnlink

		[Sql.Function(Name="pg_catalog.lo_unlink", ServerSideOnly=true)]
		public static int? LoUnlink(int? par3938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Log

		[Sql.Function(Name="pg_catalog.log", ServerSideOnly=true)]
		public static decimal? Log(decimal? par3945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Loread

		[Sql.Function(Name="pg_catalog.loread", ServerSideOnly=true)]
		public static byte[]? Loread(int? par3947, int? par3948)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lower

		[Sql.Function(Name="pg_catalog.lower", ServerSideOnly=true)]
		public static string? Lower(string? par3952)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInc

		[Sql.Function(Name="pg_catalog.lower_inc", ServerSideOnly=true)]
		public static bool? LowerInc(object? par3954)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LowerInf

		[Sql.Function(Name="pg_catalog.lower_inf", ServerSideOnly=true)]
		public static bool? LowerInf(object? par3956)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lowrite

		[Sql.Function(Name="pg_catalog.lowrite", ServerSideOnly=true)]
		public static int? Lowrite(int? par3958, byte[]? par3959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lpad

		[Sql.Function(Name="pg_catalog.lpad", ServerSideOnly=true)]
		public static string? Lpad(string? par3965, int? par3966)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Lseg

		[Sql.Function(Name="pg_catalog.lseg", ServerSideOnly=true)]
		public static NpgsqlLSeg? Lseg(NpgsqlPoint? par3970, NpgsqlPoint? par3971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegCenter

		[Sql.Function(Name="pg_catalog.lseg_center", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegCenter(NpgsqlLSeg? par3973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegDistance

		[Sql.Function(Name="pg_catalog.lseg_distance", ServerSideOnly=true)]
		public static double? LsegDistance(NpgsqlLSeg? par3975, NpgsqlLSeg? par3976)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegEq

		[Sql.Function(Name="pg_catalog.lseg_eq", ServerSideOnly=true)]
		public static bool? LsegEq(NpgsqlLSeg? par3978, NpgsqlLSeg? par3979)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGe

		[Sql.Function(Name="pg_catalog.lseg_ge", ServerSideOnly=true)]
		public static bool? LsegGe(NpgsqlLSeg? par3981, NpgsqlLSeg? par3982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegGt

		[Sql.Function(Name="pg_catalog.lseg_gt", ServerSideOnly=true)]
		public static bool? LsegGt(NpgsqlLSeg? par3984, NpgsqlLSeg? par3985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegHorizontal

		[Sql.Function(Name="pg_catalog.lseg_horizontal", ServerSideOnly=true)]
		public static bool? LsegHorizontal(NpgsqlLSeg? par3987)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIn

		[Sql.Function(Name="pg_catalog.lseg_in", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegIn(object? par3989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegInterpt

		[Sql.Function(Name="pg_catalog.lseg_interpt", ServerSideOnly=true)]
		public static NpgsqlPoint? LsegInterpt(NpgsqlLSeg? par3991, NpgsqlLSeg? par3992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegIntersect

		[Sql.Function(Name="pg_catalog.lseg_intersect", ServerSideOnly=true)]
		public static bool? LsegIntersect(NpgsqlLSeg? par3994, NpgsqlLSeg? par3995)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLe

		[Sql.Function(Name="pg_catalog.lseg_le", ServerSideOnly=true)]
		public static bool? LsegLe(NpgsqlLSeg? par3997, NpgsqlLSeg? par3998)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLength

		[Sql.Function(Name="pg_catalog.lseg_length", ServerSideOnly=true)]
		public static double? LsegLength(NpgsqlLSeg? par4000)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegLt

		[Sql.Function(Name="pg_catalog.lseg_lt", ServerSideOnly=true)]
		public static bool? LsegLt(NpgsqlLSeg? par4002, NpgsqlLSeg? par4003)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegNe

		[Sql.Function(Name="pg_catalog.lseg_ne", ServerSideOnly=true)]
		public static bool? LsegNe(NpgsqlLSeg? par4005, NpgsqlLSeg? par4006)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegOut

		[Sql.Function(Name="pg_catalog.lseg_out", ServerSideOnly=true)]
		public static object? LsegOut(NpgsqlLSeg? par4008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegParallel

		[Sql.Function(Name="pg_catalog.lseg_parallel", ServerSideOnly=true)]
		public static bool? LsegParallel(NpgsqlLSeg? par4010, NpgsqlLSeg? par4011)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegPerp

		[Sql.Function(Name="pg_catalog.lseg_perp", ServerSideOnly=true)]
		public static bool? LsegPerp(NpgsqlLSeg? par4013, NpgsqlLSeg? par4014)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegRecv

		[Sql.Function(Name="pg_catalog.lseg_recv", ServerSideOnly=true)]
		public static NpgsqlLSeg? LsegRecv(object? par4016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegSend

		[Sql.Function(Name="pg_catalog.lseg_send", ServerSideOnly=true)]
		public static byte[]? LsegSend(NpgsqlLSeg? par4018)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region LsegVertical

		[Sql.Function(Name="pg_catalog.lseg_vertical", ServerSideOnly=true)]
		public static bool? LsegVertical(NpgsqlLSeg? par4020)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ltrim

		[Sql.Function(Name="pg_catalog.ltrim", ServerSideOnly=true)]
		public static string? Ltrim(string? par4025)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrAnd

		[Sql.Function(Name="pg_catalog.macaddr_and", ServerSideOnly=true)]
		public static PhysicalAddress? MacaddrAnd(PhysicalAddress? par4027, PhysicalAddress? par4028)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrCmp

		[Sql.Function(Name="pg_catalog.macaddr_cmp", ServerSideOnly=true)]
		public static int? MacaddrCmp(PhysicalAddress? par4030, PhysicalAddress? par4031)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrEq

		[Sql.Function(Name="pg_catalog.macaddr_eq", ServerSideOnly=true)]
		public static bool? MacaddrEq(PhysicalAddress? par4033, PhysicalAddress? par4034)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGe

		[Sql.Function(Name="pg_catalog.macaddr_ge", ServerSideOnly=true)]
		public static bool? MacaddrGe(PhysicalAddress? par4036, PhysicalAddress? par4037)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrGt

		[Sql.Function(Name="pg_catalog.macaddr_gt", ServerSideOnly=true)]
		public static bool? MacaddrGt(PhysicalAddress? par4039, PhysicalAddress? par4040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrIn

		[Sql.Function(Name="pg_catalog.macaddr_in", ServerSideOnly=true)]
		public static PhysicalAddress? MacaddrIn(object? par4042)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLe

		[Sql.Function(Name="pg_catalog.macaddr_le", ServerSideOnly=true)]
		public static bool? MacaddrLe(PhysicalAddress? par4044, PhysicalAddress? par4045)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrLt

		[Sql.Function(Name="pg_catalog.macaddr_lt", ServerSideOnly=true)]
		public static bool? MacaddrLt(PhysicalAddress? par4047, PhysicalAddress? par4048)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNe

		[Sql.Function(Name="pg_catalog.macaddr_ne", ServerSideOnly=true)]
		public static bool? MacaddrNe(PhysicalAddress? par4050, PhysicalAddress? par4051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrNot

		[Sql.Function(Name="pg_catalog.macaddr_not", ServerSideOnly=true)]
		public static PhysicalAddress? MacaddrNot(PhysicalAddress? par4053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOr

		[Sql.Function(Name="pg_catalog.macaddr_or", ServerSideOnly=true)]
		public static PhysicalAddress? MacaddrOr(PhysicalAddress? par4055, PhysicalAddress? par4056)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrOut

		[Sql.Function(Name="pg_catalog.macaddr_out", ServerSideOnly=true)]
		public static object? MacaddrOut(PhysicalAddress? par4058)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrRecv

		[Sql.Function(Name="pg_catalog.macaddr_recv", ServerSideOnly=true)]
		public static PhysicalAddress? MacaddrRecv(object? par4060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MacaddrSend

		[Sql.Function(Name="pg_catalog.macaddr_send", ServerSideOnly=true)]
		public static byte[]? MacaddrSend(PhysicalAddress? par4062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeDate

		[Sql.Function(Name="pg_catalog.make_date", ServerSideOnly=true)]
		public static NpgsqlDate? MakeDate(int? year, int? month, int? day)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeInterval

		[Sql.Function(Name="pg_catalog.make_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MakeInterval(int? years, int? months, int? weeks, int? days, int? hours, int? mins, double? secs)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTime

		[Sql.Function(Name="pg_catalog.make_time", ServerSideOnly=true)]
		public static TimeSpan? MakeTime(int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamp

		[Sql.Function(Name="pg_catalog.make_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? MakeTimestamp(int? year, int? month, int? mday, int? hour, int? min, double? sec)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MakeTimestamptz

		[Sql.Function(Name="pg_catalog.make_timestamptz", ServerSideOnly=true)]
		public static NpgsqlDateTime? MakeTimestamptz(int? year, int? month, int? mday, int? hour, int? min, double? sec, string? timezone)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Makeaclitem

		[Sql.Function(Name="pg_catalog.makeaclitem", ServerSideOnly=true)]
		public static object? Makeaclitem(int? par4070, int? par4071, string? par4072, bool? par4073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Masklen

		[Sql.Function(Name="pg_catalog.masklen", ServerSideOnly=true)]
		public static int? Masklen(NpgsqlInet? par4075)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Max

		[Sql.Function(Name="pg_catalog.max", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Max<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Md5

		[Sql.Function(Name="pg_catalog.md5", ServerSideOnly=true)]
		public static string? Md5(byte[]? par4121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToAscii

		[Sql.Function(Name="pg_catalog.mic_to_ascii", ServerSideOnly=true)]
		public static object? MicToAscii(int? par4122, int? par4123, object? par4124, object? par4125, int? par4126)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToBig5

		[Sql.Function(Name="pg_catalog.mic_to_big5", ServerSideOnly=true)]
		public static object? MicToBig5(int? par4127, int? par4128, object? par4129, object? par4130, int? par4131)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucCn

		[Sql.Function(Name="pg_catalog.mic_to_euc_cn", ServerSideOnly=true)]
		public static object? MicToEucCn(int? par4132, int? par4133, object? par4134, object? par4135, int? par4136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucJp

		[Sql.Function(Name="pg_catalog.mic_to_euc_jp", ServerSideOnly=true)]
		public static object? MicToEucJp(int? par4137, int? par4138, object? par4139, object? par4140, int? par4141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucKr

		[Sql.Function(Name="pg_catalog.mic_to_euc_kr", ServerSideOnly=true)]
		public static object? MicToEucKr(int? par4142, int? par4143, object? par4144, object? par4145, int? par4146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToEucTw

		[Sql.Function(Name="pg_catalog.mic_to_euc_tw", ServerSideOnly=true)]
		public static object? MicToEucTw(int? par4147, int? par4148, object? par4149, object? par4150, int? par4151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToIso

		[Sql.Function(Name="pg_catalog.mic_to_iso", ServerSideOnly=true)]
		public static object? MicToIso(int? par4152, int? par4153, object? par4154, object? par4155, int? par4156)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToKoi8r

		[Sql.Function(Name="pg_catalog.mic_to_koi8r", ServerSideOnly=true)]
		public static object? MicToKoi8r(int? par4157, int? par4158, object? par4159, object? par4160, int? par4161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin1

		[Sql.Function(Name="pg_catalog.mic_to_latin1", ServerSideOnly=true)]
		public static object? MicToLatin1(int? par4162, int? par4163, object? par4164, object? par4165, int? par4166)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin2

		[Sql.Function(Name="pg_catalog.mic_to_latin2", ServerSideOnly=true)]
		public static object? MicToLatin2(int? par4167, int? par4168, object? par4169, object? par4170, int? par4171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin3

		[Sql.Function(Name="pg_catalog.mic_to_latin3", ServerSideOnly=true)]
		public static object? MicToLatin3(int? par4172, int? par4173, object? par4174, object? par4175, int? par4176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToLatin4

		[Sql.Function(Name="pg_catalog.mic_to_latin4", ServerSideOnly=true)]
		public static object? MicToLatin4(int? par4177, int? par4178, object? par4179, object? par4180, int? par4181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToSjis

		[Sql.Function(Name="pg_catalog.mic_to_sjis", ServerSideOnly=true)]
		public static object? MicToSjis(int? par4182, int? par4183, object? par4184, object? par4185, int? par4186)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1250

		[Sql.Function(Name="pg_catalog.mic_to_win1250", ServerSideOnly=true)]
		public static object? MicToWin1250(int? par4187, int? par4188, object? par4189, object? par4190, int? par4191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin1251

		[Sql.Function(Name="pg_catalog.mic_to_win1251", ServerSideOnly=true)]
		public static object? MicToWin1251(int? par4192, int? par4193, object? par4194, object? par4195, int? par4196)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MicToWin866

		[Sql.Function(Name="pg_catalog.mic_to_win866", ServerSideOnly=true)]
		public static object? MicToWin866(int? par4197, int? par4198, object? par4199, object? par4200, int? par4201)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Min

		[Sql.Function(Name="pg_catalog.min", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static NpgsqlInet? Min<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, NpgsqlInet?>> par4243)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mktinterval

		[Sql.Function(Name="pg_catalog.mktinterval", ServerSideOnly=true)]
		public static object? Mktinterval(object? par4245, object? par4246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mod

		[Sql.Function(Name="pg_catalog.mod", ServerSideOnly=true)]
		public static long? Mod(long? par4257, long? par4258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Mode

		[Sql.Function(Name="pg_catalog.mode", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static object? Mode<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par4260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ModeFinal

		[Sql.Function(Name="pg_catalog.mode_final", ServerSideOnly=true)]
		public static object? ModeFinal(object? par4262, object? par4263)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Money

		[Sql.Function(Name="pg_catalog.money", ServerSideOnly=true)]
		public static decimal? Money(decimal? par4269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MulDInterval

		[Sql.Function(Name="pg_catalog.mul_d_interval", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? MulDInterval(double? par4271, NpgsqlTimeSpan? par4272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region MxidAge

		[Sql.Function(Name="pg_catalog.mxid_age", ServerSideOnly=true)]
		public static int? MxidAge(int? par4274)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Name

		[Sql.Function(Name="pg_catalog.name", ServerSideOnly=true)]
		public static string? Name(string? par4280)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameeq

		[Sql.Function(Name="pg_catalog.nameeq", ServerSideOnly=true)]
		public static bool? Nameeq(string? par4282, string? par4283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namege

		[Sql.Function(Name="pg_catalog.namege", ServerSideOnly=true)]
		public static bool? Namege(string? par4285, string? par4286)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namegt

		[Sql.Function(Name="pg_catalog.namegt", ServerSideOnly=true)]
		public static bool? Namegt(string? par4288, string? par4289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameiclike

		[Sql.Function(Name="pg_catalog.nameiclike", ServerSideOnly=true)]
		public static bool? Nameiclike(string? par4291, string? par4292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicnlike

		[Sql.Function(Name="pg_catalog.nameicnlike", ServerSideOnly=true)]
		public static bool? Nameicnlike(string? par4294, string? par4295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexeq

		[Sql.Function(Name="pg_catalog.nameicregexeq", ServerSideOnly=true)]
		public static bool? Nameicregexeq(string? par4297, string? par4298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameicregexne

		[Sql.Function(Name="pg_catalog.nameicregexne", ServerSideOnly=true)]
		public static bool? Nameicregexne(string? par4300, string? par4301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namein

		[Sql.Function(Name="pg_catalog.namein", ServerSideOnly=true)]
		public static string? Namein(object? par4303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namele

		[Sql.Function(Name="pg_catalog.namele", ServerSideOnly=true)]
		public static bool? Namele(string? par4305, string? par4306)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelike

		[Sql.Function(Name="pg_catalog.namelike", ServerSideOnly=true)]
		public static bool? Namelike(string? par4308, string? par4309)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namelt

		[Sql.Function(Name="pg_catalog.namelt", ServerSideOnly=true)]
		public static bool? Namelt(string? par4311, string? par4312)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namene

		[Sql.Function(Name="pg_catalog.namene", ServerSideOnly=true)]
		public static bool? Namene(string? par4314, string? par4315)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namenlike

		[Sql.Function(Name="pg_catalog.namenlike", ServerSideOnly=true)]
		public static bool? Namenlike(string? par4317, string? par4318)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameout

		[Sql.Function(Name="pg_catalog.nameout", ServerSideOnly=true)]
		public static object? Nameout(string? par4320)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namerecv

		[Sql.Function(Name="pg_catalog.namerecv", ServerSideOnly=true)]
		public static string? Namerecv(object? par4322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexeq

		[Sql.Function(Name="pg_catalog.nameregexeq", ServerSideOnly=true)]
		public static bool? Nameregexeq(string? par4324, string? par4325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nameregexne

		[Sql.Function(Name="pg_catalog.nameregexne", ServerSideOnly=true)]
		public static bool? Nameregexne(string? par4327, string? par4328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Namesend

		[Sql.Function(Name="pg_catalog.namesend", ServerSideOnly=true)]
		public static byte[]? Namesend(string? par4330)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqjoinsel

		[Sql.Function(Name="pg_catalog.neqjoinsel", ServerSideOnly=true)]
		public static double? Neqjoinsel(object? par4332, int? par4333, object? par4334, short? par4335, object? par4336)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Neqsel

		[Sql.Function(Name="pg_catalog.neqsel", ServerSideOnly=true)]
		public static double? Neqsel(object? par4338, int? par4339, object? par4340, int? par4341)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Netmask

		[Sql.Function(Name="pg_catalog.netmask", ServerSideOnly=true)]
		public static NpgsqlInet? Netmask(NpgsqlInet? par4343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Network

		[Sql.Function(Name="pg_catalog.network", ServerSideOnly=true)]
		public static NpgsqlInet? Network(NpgsqlInet? par4345)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkCmp

		[Sql.Function(Name="pg_catalog.network_cmp", ServerSideOnly=true)]
		public static int? NetworkCmp(NpgsqlInet? par4347, NpgsqlInet? par4348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkEq

		[Sql.Function(Name="pg_catalog.network_eq", ServerSideOnly=true)]
		public static bool? NetworkEq(NpgsqlInet? par4350, NpgsqlInet? par4351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGe

		[Sql.Function(Name="pg_catalog.network_ge", ServerSideOnly=true)]
		public static bool? NetworkGe(NpgsqlInet? par4353, NpgsqlInet? par4354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkGt

		[Sql.Function(Name="pg_catalog.network_gt", ServerSideOnly=true)]
		public static bool? NetworkGt(NpgsqlInet? par4356, NpgsqlInet? par4357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLarger

		[Sql.Function(Name="pg_catalog.network_larger", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkLarger(NpgsqlInet? par4359, NpgsqlInet? par4360)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLe

		[Sql.Function(Name="pg_catalog.network_le", ServerSideOnly=true)]
		public static bool? NetworkLe(NpgsqlInet? par4362, NpgsqlInet? par4363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkLt

		[Sql.Function(Name="pg_catalog.network_lt", ServerSideOnly=true)]
		public static bool? NetworkLt(NpgsqlInet? par4365, NpgsqlInet? par4366)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkNe

		[Sql.Function(Name="pg_catalog.network_ne", ServerSideOnly=true)]
		public static bool? NetworkNe(NpgsqlInet? par4368, NpgsqlInet? par4369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkOverlap

		[Sql.Function(Name="pg_catalog.network_overlap", ServerSideOnly=true)]
		public static bool? NetworkOverlap(NpgsqlInet? par4371, NpgsqlInet? par4372)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSmaller

		[Sql.Function(Name="pg_catalog.network_smaller", ServerSideOnly=true)]
		public static NpgsqlInet? NetworkSmaller(NpgsqlInet? par4374, NpgsqlInet? par4375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSub

		[Sql.Function(Name="pg_catalog.network_sub", ServerSideOnly=true)]
		public static bool? NetworkSub(NpgsqlInet? par4377, NpgsqlInet? par4378)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSubeq

		[Sql.Function(Name="pg_catalog.network_subeq", ServerSideOnly=true)]
		public static bool? NetworkSubeq(NpgsqlInet? par4380, NpgsqlInet? par4381)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSup

		[Sql.Function(Name="pg_catalog.network_sup", ServerSideOnly=true)]
		public static bool? NetworkSup(NpgsqlInet? par4383, NpgsqlInet? par4384)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NetworkSupeq

		[Sql.Function(Name="pg_catalog.network_supeq", ServerSideOnly=true)]
		public static bool? NetworkSupeq(NpgsqlInet? par4386, NpgsqlInet? par4387)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networkjoinsel

		[Sql.Function(Name="pg_catalog.networkjoinsel", ServerSideOnly=true)]
		public static double? Networkjoinsel(object? par4389, int? par4390, object? par4391, short? par4392, object? par4393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Networksel

		[Sql.Function(Name="pg_catalog.networksel", ServerSideOnly=true)]
		public static double? Networksel(object? par4395, int? par4396, object? par4397, int? par4398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nextval

		[Sql.Function(Name="pg_catalog.nextval", ServerSideOnly=true)]
		public static long? Nextval(object? par4400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikejoinsel

		[Sql.Function(Name="pg_catalog.nlikejoinsel", ServerSideOnly=true)]
		public static double? Nlikejoinsel(object? par4402, int? par4403, object? par4404, short? par4405, object? par4406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Nlikesel

		[Sql.Function(Name="pg_catalog.nlikesel", ServerSideOnly=true)]
		public static double? Nlikesel(object? par4408, int? par4409, object? par4410, int? par4411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Notlike

		[Sql.Function(Name="pg_catalog.notlike", ServerSideOnly=true)]
		public static bool? Notlike(byte[]? par4419, byte[]? par4420)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Now

		[Sql.Function(Name="pg_catalog.now", ServerSideOnly=true)]
		public static NpgsqlDateTime? Now()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Npoints

		[Sql.Function(Name="pg_catalog.npoints", ServerSideOnly=true)]
		public static int? Npoints(NpgsqlPolygon? par4425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NthValue

		[Sql.Function(Name="pg_catalog.nth_value", ServerSideOnly=true)]
		public static object? NthValue(object? par4427, int? par4428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Ntile

		[Sql.Function(Name="pg_catalog.ntile", ServerSideOnly=true)]
		public static int? Ntile(int? par4430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numeric

		[Sql.Function(Name="pg_catalog.numeric", ServerSideOnly=true)]
		public static decimal? Numeric(decimal? par4445)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAbs

		[Sql.Function(Name="pg_catalog.numeric_abs", ServerSideOnly=true)]
		public static decimal? NumericAbs(decimal? par4447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccum

		[Sql.Function(Name="pg_catalog.numeric_accum", ServerSideOnly=true)]
		public static object? NumericAccum(object? par4449, decimal? par4450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAccumInv

		[Sql.Function(Name="pg_catalog.numeric_accum_inv", ServerSideOnly=true)]
		public static object? NumericAccumInv(object? par4452, decimal? par4453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAdd

		[Sql.Function(Name="pg_catalog.numeric_add", ServerSideOnly=true)]
		public static decimal? NumericAdd(decimal? par4455, decimal? par4456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvg

		[Sql.Function(Name="pg_catalog.numeric_avg", ServerSideOnly=true)]
		public static decimal? NumericAvg(object? par4458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericAvgAccum

		[Sql.Function(Name="pg_catalog.numeric_avg_accum", ServerSideOnly=true)]
		public static object? NumericAvgAccum(object? par4460, decimal? par4461)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericCmp

		[Sql.Function(Name="pg_catalog.numeric_cmp", ServerSideOnly=true)]
		public static int? NumericCmp(decimal? par4463, decimal? par4464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDiv

		[Sql.Function(Name="pg_catalog.numeric_div", ServerSideOnly=true)]
		public static decimal? NumericDiv(decimal? par4466, decimal? par4467)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericDivTrunc

		[Sql.Function(Name="pg_catalog.numeric_div_trunc", ServerSideOnly=true)]
		public static decimal? NumericDivTrunc(decimal? par4469, decimal? par4470)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericEq

		[Sql.Function(Name="pg_catalog.numeric_eq", ServerSideOnly=true)]
		public static bool? NumericEq(decimal? par4472, decimal? par4473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericExp

		[Sql.Function(Name="pg_catalog.numeric_exp", ServerSideOnly=true)]
		public static decimal? NumericExp(decimal? par4475)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericFac

		[Sql.Function(Name="pg_catalog.numeric_fac", ServerSideOnly=true)]
		public static decimal? NumericFac(long? par4477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGe

		[Sql.Function(Name="pg_catalog.numeric_ge", ServerSideOnly=true)]
		public static bool? NumericGe(decimal? par4479, decimal? par4480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericGt

		[Sql.Function(Name="pg_catalog.numeric_gt", ServerSideOnly=true)]
		public static bool? NumericGt(decimal? par4482, decimal? par4483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericIn

		[Sql.Function(Name="pg_catalog.numeric_in", ServerSideOnly=true)]
		public static decimal? NumericIn(object? par4485, int? par4486, int? par4487)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericInc

		[Sql.Function(Name="pg_catalog.numeric_inc", ServerSideOnly=true)]
		public static decimal? NumericInc(decimal? par4489)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLarger

		[Sql.Function(Name="pg_catalog.numeric_larger", ServerSideOnly=true)]
		public static decimal? NumericLarger(decimal? par4491, decimal? par4492)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLe

		[Sql.Function(Name="pg_catalog.numeric_le", ServerSideOnly=true)]
		public static bool? NumericLe(decimal? par4494, decimal? par4495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLn

		[Sql.Function(Name="pg_catalog.numeric_ln", ServerSideOnly=true)]
		public static decimal? NumericLn(decimal? par4497)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLog

		[Sql.Function(Name="pg_catalog.numeric_log", ServerSideOnly=true)]
		public static decimal? NumericLog(decimal? par4499, decimal? par4500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericLt

		[Sql.Function(Name="pg_catalog.numeric_lt", ServerSideOnly=true)]
		public static bool? NumericLt(decimal? par4502, decimal? par4503)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMod

		[Sql.Function(Name="pg_catalog.numeric_mod", ServerSideOnly=true)]
		public static decimal? NumericMod(decimal? par4505, decimal? par4506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericMul

		[Sql.Function(Name="pg_catalog.numeric_mul", ServerSideOnly=true)]
		public static decimal? NumericMul(decimal? par4508, decimal? par4509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericNe

		[Sql.Function(Name="pg_catalog.numeric_ne", ServerSideOnly=true)]
		public static bool? NumericNe(decimal? par4511, decimal? par4512)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericOut

		[Sql.Function(Name="pg_catalog.numeric_out", ServerSideOnly=true)]
		public static object? NumericOut(decimal? par4514)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyAvg

		[Sql.Function(Name="pg_catalog.numeric_poly_avg", ServerSideOnly=true)]
		public static decimal? NumericPolyAvg(object? par4516)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevPop

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevPop(object? par4518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyStddevSamp(object? par4520)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolySum

		[Sql.Function(Name="pg_catalog.numeric_poly_sum", ServerSideOnly=true)]
		public static decimal? NumericPolySum(object? par4522)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarPop

		[Sql.Function(Name="pg_catalog.numeric_poly_var_pop", ServerSideOnly=true)]
		public static decimal? NumericPolyVarPop(object? par4524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPolyVarSamp

		[Sql.Function(Name="pg_catalog.numeric_poly_var_samp", ServerSideOnly=true)]
		public static decimal? NumericPolyVarSamp(object? par4526)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericPower

		[Sql.Function(Name="pg_catalog.numeric_power", ServerSideOnly=true)]
		public static decimal? NumericPower(decimal? par4528, decimal? par4529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericRecv

		[Sql.Function(Name="pg_catalog.numeric_recv", ServerSideOnly=true)]
		public static decimal? NumericRecv(object? par4531, int? par4532, int? par4533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSend

		[Sql.Function(Name="pg_catalog.numeric_send", ServerSideOnly=true)]
		public static byte[]? NumericSend(decimal? par4535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSmaller

		[Sql.Function(Name="pg_catalog.numeric_smaller", ServerSideOnly=true)]
		public static decimal? NumericSmaller(decimal? par4537, decimal? par4538)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSortsupport

		[Sql.Function(Name="pg_catalog.numeric_sortsupport", ServerSideOnly=true)]
		public static object? NumericSortsupport(object? par4539)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSqrt

		[Sql.Function(Name="pg_catalog.numeric_sqrt", ServerSideOnly=true)]
		public static decimal? NumericSqrt(decimal? par4541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevPop

		[Sql.Function(Name="pg_catalog.numeric_stddev_pop", ServerSideOnly=true)]
		public static decimal? NumericStddevPop(object? par4543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericStddevSamp

		[Sql.Function(Name="pg_catalog.numeric_stddev_samp", ServerSideOnly=true)]
		public static decimal? NumericStddevSamp(object? par4545)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSub

		[Sql.Function(Name="pg_catalog.numeric_sub", ServerSideOnly=true)]
		public static decimal? NumericSub(decimal? par4547, decimal? par4548)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericSum

		[Sql.Function(Name="pg_catalog.numeric_sum", ServerSideOnly=true)]
		public static decimal? NumericSum(object? par4550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericTransform

		[Sql.Function(Name="pg_catalog.numeric_transform", ServerSideOnly=true)]
		public static object? NumericTransform(object? par4552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUminus

		[Sql.Function(Name="pg_catalog.numeric_uminus", ServerSideOnly=true)]
		public static decimal? NumericUminus(decimal? par4554)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericUplus

		[Sql.Function(Name="pg_catalog.numeric_uplus", ServerSideOnly=true)]
		public static decimal? NumericUplus(decimal? par4556)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarPop

		[Sql.Function(Name="pg_catalog.numeric_var_pop", ServerSideOnly=true)]
		public static decimal? NumericVarPop(object? par4558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumericVarSamp

		[Sql.Function(Name="pg_catalog.numeric_var_samp", ServerSideOnly=true)]
		public static decimal? NumericVarSamp(object? par4560)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodin

		[Sql.Function(Name="pg_catalog.numerictypmodin", ServerSideOnly=true)]
		public static int? Numerictypmodin(object? par4562)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numerictypmodout

		[Sql.Function(Name="pg_catalog.numerictypmodout", ServerSideOnly=true)]
		public static object? Numerictypmodout(int? par4564)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numnode

		[Sql.Function(Name="pg_catalog.numnode", ServerSideOnly=true)]
		public static int? Numnode(object? par4566)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Numrange

		[Sql.Function(Name="pg_catalog.numrange", ServerSideOnly=true)]
		public static object? Numrange(decimal? par4571, decimal? par4572, string? par4573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region NumrangeSubdiff

		[Sql.Function(Name="pg_catalog.numrange_subdiff", ServerSideOnly=true)]
		public static double? NumrangeSubdiff(decimal? par4575, decimal? par4576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ObjDescription

		[Sql.Function(Name="pg_catalog.obj_description", ServerSideOnly=true)]
		public static string? ObjDescription(int? par4581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OctetLength

		[Sql.Function(Name="pg_catalog.octet_length", ServerSideOnly=true)]
		public static int? OctetLength(byte[]? par4589)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oid

		[Sql.Function(Name="pg_catalog.oid", ServerSideOnly=true)]
		public static int? Oid(long? par4591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oideq

		[Sql.Function(Name="pg_catalog.oideq", ServerSideOnly=true)]
		public static bool? Oideq(int? par4593, int? par4594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidge

		[Sql.Function(Name="pg_catalog.oidge", ServerSideOnly=true)]
		public static bool? Oidge(int? par4596, int? par4597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidgt

		[Sql.Function(Name="pg_catalog.oidgt", ServerSideOnly=true)]
		public static bool? Oidgt(int? par4599, int? par4600)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidin

		[Sql.Function(Name="pg_catalog.oidin", ServerSideOnly=true)]
		public static int? Oidin(object? par4602)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlarger

		[Sql.Function(Name="pg_catalog.oidlarger", ServerSideOnly=true)]
		public static int? Oidlarger(int? par4604, int? par4605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidle

		[Sql.Function(Name="pg_catalog.oidle", ServerSideOnly=true)]
		public static bool? Oidle(int? par4607, int? par4608)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidlt

		[Sql.Function(Name="pg_catalog.oidlt", ServerSideOnly=true)]
		public static bool? Oidlt(int? par4610, int? par4611)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidne

		[Sql.Function(Name="pg_catalog.oidne", ServerSideOnly=true)]
		public static bool? Oidne(int? par4613, int? par4614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidout

		[Sql.Function(Name="pg_catalog.oidout", ServerSideOnly=true)]
		public static object? Oidout(int? par4616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidrecv

		[Sql.Function(Name="pg_catalog.oidrecv", ServerSideOnly=true)]
		public static int? Oidrecv(object? par4618)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsend

		[Sql.Function(Name="pg_catalog.oidsend", ServerSideOnly=true)]
		public static byte[]? Oidsend(int? par4620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidsmaller

		[Sql.Function(Name="pg_catalog.oidsmaller", ServerSideOnly=true)]
		public static int? Oidsmaller(int? par4622, int? par4623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectoreq

		[Sql.Function(Name="pg_catalog.oidvectoreq", ServerSideOnly=true)]
		public static bool? Oidvectoreq(object? par4625, object? par4626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorge

		[Sql.Function(Name="pg_catalog.oidvectorge", ServerSideOnly=true)]
		public static bool? Oidvectorge(object? par4628, object? par4629)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorgt

		[Sql.Function(Name="pg_catalog.oidvectorgt", ServerSideOnly=true)]
		public static bool? Oidvectorgt(object? par4631, object? par4632)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorin

		[Sql.Function(Name="pg_catalog.oidvectorin", ServerSideOnly=true)]
		public static object? Oidvectorin(object? par4634)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorle

		[Sql.Function(Name="pg_catalog.oidvectorle", ServerSideOnly=true)]
		public static bool? Oidvectorle(object? par4636, object? par4637)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorlt

		[Sql.Function(Name="pg_catalog.oidvectorlt", ServerSideOnly=true)]
		public static bool? Oidvectorlt(object? par4639, object? par4640)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorne

		[Sql.Function(Name="pg_catalog.oidvectorne", ServerSideOnly=true)]
		public static bool? Oidvectorne(object? par4642, object? par4643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorout

		[Sql.Function(Name="pg_catalog.oidvectorout", ServerSideOnly=true)]
		public static object? Oidvectorout(object? par4645)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorrecv

		[Sql.Function(Name="pg_catalog.oidvectorrecv", ServerSideOnly=true)]
		public static object? Oidvectorrecv(object? par4647)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectorsend

		[Sql.Function(Name="pg_catalog.oidvectorsend", ServerSideOnly=true)]
		public static byte[]? Oidvectorsend(object? par4649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Oidvectortypes

		[Sql.Function(Name="pg_catalog.oidvectortypes", ServerSideOnly=true)]
		public static string? Oidvectortypes(object? par4651)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPb

		[Sql.Function(Name="pg_catalog.on_pb", ServerSideOnly=true)]
		public static bool? OnPb(NpgsqlPoint? par4653, NpgsqlBox? par4654)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPl

		[Sql.Function(Name="pg_catalog.on_pl", ServerSideOnly=true)]
		public static bool? OnPl(NpgsqlPoint? par4656, NpgsqlLine? par4657)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPpath

		[Sql.Function(Name="pg_catalog.on_ppath", ServerSideOnly=true)]
		public static bool? OnPpath(NpgsqlPoint? par4659, NpgsqlPath? par4660)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnPs

		[Sql.Function(Name="pg_catalog.on_ps", ServerSideOnly=true)]
		public static bool? OnPs(NpgsqlPoint? par4662, NpgsqlLSeg? par4663)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSb

		[Sql.Function(Name="pg_catalog.on_sb", ServerSideOnly=true)]
		public static bool? OnSb(NpgsqlLSeg? par4665, NpgsqlBox? par4666)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OnSl

		[Sql.Function(Name="pg_catalog.on_sl", ServerSideOnly=true)]
		public static bool? OnSl(NpgsqlLSeg? par4668, NpgsqlLine? par4669)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueIn

		[Sql.Function(Name="pg_catalog.opaque_in", ServerSideOnly=true)]
		public static object? OpaqueIn(object? par4671)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OpaqueOut

		[Sql.Function(Name="pg_catalog.opaque_out", ServerSideOnly=true)]
		public static object? OpaqueOut(object? par4673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransition

		[Sql.Function(Name="pg_catalog.ordered_set_transition", ServerSideOnly=true)]
		public static object? OrderedSetTransition(object? par4675, object? par4676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region OrderedSetTransitionMulti

		[Sql.Function(Name="pg_catalog.ordered_set_transition_multi", ServerSideOnly=true)]
		public static object? OrderedSetTransitionMulti(object? par4678, object? par4679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlaps

		[Sql.Function(Name="pg_catalog.overlaps", ServerSideOnly=true)]
		public static bool? Overlaps(NpgsqlDateTime? par4741, NpgsqlTimeSpan? par4742, NpgsqlDateTime? par4743, NpgsqlDateTime? par4744)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Overlay

		[Sql.Function(Name="pg_catalog.overlay", ServerSideOnly=true)]
		public static byte[]? Overlay(byte[]? par4769, byte[]? par4770, int? par4771)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Path

		[Sql.Function(Name="pg_catalog.path", ServerSideOnly=true)]
		public static NpgsqlPath? Path(NpgsqlPolygon? par4773)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAdd

		[Sql.Function(Name="pg_catalog.path_add", ServerSideOnly=true)]
		public static NpgsqlPath? PathAdd(NpgsqlPath? par4775, NpgsqlPath? par4776)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathAddPt

		[Sql.Function(Name="pg_catalog.path_add_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathAddPt(NpgsqlPath? par4778, NpgsqlPoint? par4779)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathCenter

		[Sql.Function(Name="pg_catalog.path_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PathCenter(NpgsqlPath? par4781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathContainPt

		[Sql.Function(Name="pg_catalog.path_contain_pt", ServerSideOnly=true)]
		public static bool? PathContainPt(NpgsqlPath? par4783, NpgsqlPoint? par4784)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDistance

		[Sql.Function(Name="pg_catalog.path_distance", ServerSideOnly=true)]
		public static double? PathDistance(NpgsqlPath? par4786, NpgsqlPath? par4787)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathDivPt

		[Sql.Function(Name="pg_catalog.path_div_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathDivPt(NpgsqlPath? par4789, NpgsqlPoint? par4790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathIn

		[Sql.Function(Name="pg_catalog.path_in", ServerSideOnly=true)]
		public static NpgsqlPath? PathIn(object? par4792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathInter

		[Sql.Function(Name="pg_catalog.path_inter", ServerSideOnly=true)]
		public static bool? PathInter(NpgsqlPath? par4794, NpgsqlPath? par4795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathLength

		[Sql.Function(Name="pg_catalog.path_length", ServerSideOnly=true)]
		public static double? PathLength(NpgsqlPath? par4797)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathMulPt

		[Sql.Function(Name="pg_catalog.path_mul_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathMulPt(NpgsqlPath? par4799, NpgsqlPoint? par4800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNEq

		[Sql.Function(Name="pg_catalog.path_n_eq", ServerSideOnly=true)]
		public static bool? PathNEq(NpgsqlPath? par4802, NpgsqlPath? par4803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGe

		[Sql.Function(Name="pg_catalog.path_n_ge", ServerSideOnly=true)]
		public static bool? PathNGe(NpgsqlPath? par4805, NpgsqlPath? par4806)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNGt

		[Sql.Function(Name="pg_catalog.path_n_gt", ServerSideOnly=true)]
		public static bool? PathNGt(NpgsqlPath? par4808, NpgsqlPath? par4809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLe

		[Sql.Function(Name="pg_catalog.path_n_le", ServerSideOnly=true)]
		public static bool? PathNLe(NpgsqlPath? par4811, NpgsqlPath? par4812)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNLt

		[Sql.Function(Name="pg_catalog.path_n_lt", ServerSideOnly=true)]
		public static bool? PathNLt(NpgsqlPath? par4814, NpgsqlPath? par4815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathNpoints

		[Sql.Function(Name="pg_catalog.path_npoints", ServerSideOnly=true)]
		public static int? PathNpoints(NpgsqlPath? par4817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathOut

		[Sql.Function(Name="pg_catalog.path_out", ServerSideOnly=true)]
		public static object? PathOut(NpgsqlPath? par4819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathRecv

		[Sql.Function(Name="pg_catalog.path_recv", ServerSideOnly=true)]
		public static NpgsqlPath? PathRecv(object? par4821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSend

		[Sql.Function(Name="pg_catalog.path_send", ServerSideOnly=true)]
		public static byte[]? PathSend(NpgsqlPath? par4823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PathSubPt

		[Sql.Function(Name="pg_catalog.path_sub_pt", ServerSideOnly=true)]
		public static NpgsqlPath? PathSubPt(NpgsqlPath? par4825, NpgsqlPoint? par4826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pclose

		[Sql.Function(Name="pg_catalog.pclose", ServerSideOnly=true)]
		public static NpgsqlPath? Pclose(NpgsqlPath? par4828)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRank

		[Sql.Function(Name="pg_catalog.percent_rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? PercentRank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par4831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentRankFinal

		[Sql.Function(Name="pg_catalog.percent_rank_final", ServerSideOnly=true)]
		public static double? PercentRankFinal(object? par4833, object? par4834)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileCont

		[Sql.Function(Name="pg_catalog.percentile_cont", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object? PercentileCont<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par4845, Expression<Func<TSource, NpgsqlTimeSpan?>> par4846)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8Final

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_final", ServerSideOnly=true)]
		public static double? PercentileContFloat8Final(object? par4848, double? par4849)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContFloat8MultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_float8_multi_final", ServerSideOnly=true)]
		public static object? PercentileContFloat8MultiFinal(object? par4851, object? par4852)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_final", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? PercentileContIntervalFinal(object? par4854, double? par4855)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileContIntervalMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_cont_interval_multi_final", ServerSideOnly=true)]
		public static object? PercentileContIntervalMultiFinal(object? par4857, object? par4858)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDisc

		[Sql.Function(Name="pg_catalog.percentile_disc", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static object? PercentileDisc<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par4863, Expression<Func<TSource, object?>> par4864)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_final", ServerSideOnly=true)]
		public static object? PercentileDiscFinal(object? par4866, double? par4867, object? par4868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PercentileDiscMultiFinal

		[Sql.Function(Name="pg_catalog.percentile_disc_multi_final", ServerSideOnly=true)]
		public static object? PercentileDiscMultiFinal(object? par4870, object? par4871, object? par4872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_advisory_lock", ServerSideOnly=true)]
		public static object? PgAdvisoryLock(int? par4874, int? par4875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_lock_shared", ServerSideOnly=true)]
		public static object? PgAdvisoryLockShared(int? par4877, int? par4878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlock

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlock(int? par4882, int? par4883)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockAll

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_all", ServerSideOnly=true)]
		public static object? PgAdvisoryUnlockAll()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryUnlockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_unlock_shared", ServerSideOnly=true)]
		public static bool? PgAdvisoryUnlockShared(int? par4887, int? par4888)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock", ServerSideOnly=true)]
		public static object? PgAdvisoryXactLock(int? par4890, int? par4891)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static object? PgAdvisoryXactLockShared(int? par4893, int? par4894)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackendPid

		[Sql.Function(Name="pg_catalog.pg_backend_pid", ServerSideOnly=true)]
		public static int? PgBackendPid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgBackupStartTime

		[Sql.Function(Name="pg_catalog.pg_backup_start_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgBackupStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCancelBackend

		[Sql.Function(Name="pg_catalog.pg_cancel_backend", ServerSideOnly=true)]
		public static bool? PgCancelBackend(int? par4898)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCharToEncoding

		[Sql.Function(Name="pg_catalog.pg_char_to_encoding", ServerSideOnly=true)]
		public static int? PgCharToEncoding(string? par4900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgClientEncoding

		[Sql.Function(Name="pg_catalog.pg_client_encoding", ServerSideOnly=true)]
		public static string? PgClientEncoding()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationFor

		[Sql.Function(Name="pg_catalog.pg_collation_for", ServerSideOnly=true)]
		public static string? PgCollationFor(object? par4903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCollationIsVisible

		[Sql.Function(Name="pg_catalog.pg_collation_is_visible", ServerSideOnly=true)]
		public static bool? PgCollationIsVisible(int? par4905)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_column_is_updatable", ServerSideOnly=true)]
		public static bool? PgColumnIsUpdatable(object? par4907, short? par4908, bool? par4909)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgColumnSize

		[Sql.Function(Name="pg_catalog.pg_column_size", ServerSideOnly=true)]
		public static int? PgColumnSize(object? par4911)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConfLoadTime

		[Sql.Function(Name="pg_catalog.pg_conf_load_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgConfLoadTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgConversionIsVisible

		[Sql.Function(Name="pg_catalog.pg_conversion_is_visible", ServerSideOnly=true)]
		public static bool? PgConversionIsVisible(int? par4914)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateLogicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_logical_replication_slot", ServerSideOnly=true)]
		public static pg_create_logical_replication_slotResult? PgCreateLogicalReplicationSlot(string? slot_name, string? plugin)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreatePhysicalReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_create_physical_replication_slot", ServerSideOnly=true)]
		public static pg_create_physical_replication_slotResult? PgCreatePhysicalReplicationSlot(string? slot_name)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCreateRestorePoint

		[Sql.Function(Name="pg_catalog.pg_create_restore_point", ServerSideOnly=true)]
		public static object? PgCreateRestorePoint(string? par4916)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentXlogInsertLocation

		[Sql.Function(Name="pg_catalog.pg_current_xlog_insert_location", ServerSideOnly=true)]
		public static object? PgCurrentXlogInsertLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgCurrentXlogLocation

		[Sql.Function(Name="pg_catalog.pg_current_xlog_location", ServerSideOnly=true)]
		public static object? PgCurrentXlogLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDatabaseSize

		[Sql.Function(Name="pg_catalog.pg_database_size", ServerSideOnly=true)]
		public static long? PgDatabaseSize(int? par4922)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandIn

		[Sql.Function(Name="pg_catalog.pg_ddl_command_in", ServerSideOnly=true)]
		public static object? PgDdlCommandIn(object? par4924)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandOut

		[Sql.Function(Name="pg_catalog.pg_ddl_command_out", ServerSideOnly=true)]
		public static object? PgDdlCommandOut(object? par4926)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandRecv

		[Sql.Function(Name="pg_catalog.pg_ddl_command_recv", ServerSideOnly=true)]
		public static object? PgDdlCommandRecv(object? par4928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDdlCommandSend

		[Sql.Function(Name="pg_catalog.pg_ddl_command_send", ServerSideOnly=true)]
		public static byte[]? PgDdlCommandSend(object? par4930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDescribeObject

		[Sql.Function(Name="pg_catalog.pg_describe_object", ServerSideOnly=true)]
		public static string? PgDescribeObject(int? par4932, int? par4933, int? par4934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgDropReplicationSlot

		[Sql.Function(Name="pg_catalog.pg_drop_replication_slot", ServerSideOnly=true)]
		public static object? PgDropReplicationSlot(string? par4935)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingMaxLength

		[Sql.Function(Name="pg_catalog.pg_encoding_max_length", ServerSideOnly=true)]
		public static int? PgEncodingMaxLength(int? par4937)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEncodingToChar

		[Sql.Function(Name="pg_catalog.pg_encoding_to_char", ServerSideOnly=true)]
		public static string? PgEncodingToChar(int? par4939)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteOid

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_oid", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteOid()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgEventTriggerTableRewriteReason

		[Sql.Function(Name="pg_catalog.pg_event_trigger_table_rewrite_reason", ServerSideOnly=true)]
		public static int? PgEventTriggerTableRewriteReason()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExportSnapshot

		[Sql.Function(Name="pg_catalog.pg_export_snapshot", ServerSideOnly=true)]
		public static string? PgExportSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgExtensionConfigDump

		[Sql.Function(Name="pg_catalog.pg_extension_config_dump", ServerSideOnly=true)]
		public static object? PgExtensionConfigDump(object? par4942, string? par4943)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFilenodeRelation

		[Sql.Function(Name="pg_catalog.pg_filenode_relation", ServerSideOnly=true)]
		public static object? PgFilenodeRelation(int? par4945, int? par4946)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgFunctionIsVisible

		[Sql.Function(Name="pg_catalog.pg_function_is_visible", ServerSideOnly=true)]
		public static bool? PgFunctionIsVisible(int? par4948)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetConstraintdef

		[Sql.Function(Name="pg_catalog.pg_get_constraintdef", ServerSideOnly=true)]
		public static string? PgGetConstraintdef(int? par4952, bool? par4953)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetExpr

		[Sql.Function(Name="pg_catalog.pg_get_expr", ServerSideOnly=true)]
		public static string? PgGetExpr(object? par4958, int? par4959, bool? par4960)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArgDefault

		[Sql.Function(Name="pg_catalog.pg_get_function_arg_default", ServerSideOnly=true)]
		public static string? PgGetFunctionArgDefault(int? par4962, int? par4963)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_arguments", ServerSideOnly=true)]
		public static string? PgGetFunctionArguments(int? par4965)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionIdentityArguments

		[Sql.Function(Name="pg_catalog.pg_get_function_identity_arguments", ServerSideOnly=true)]
		public static string? PgGetFunctionIdentityArguments(int? par4967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctionResult

		[Sql.Function(Name="pg_catalog.pg_get_function_result", ServerSideOnly=true)]
		public static string? PgGetFunctionResult(int? par4969)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetFunctiondef

		[Sql.Function(Name="pg_catalog.pg_get_functiondef", ServerSideOnly=true)]
		public static string? PgGetFunctiondef(int? par4971)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetIndexdef

		[Sql.Function(Name="pg_catalog.pg_get_indexdef", ServerSideOnly=true)]
		public static string? PgGetIndexdef(int? par4975, int? par4976, bool? par4977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetObjectAddress

		[Sql.Function(Name="pg_catalog.pg_get_object_address", ServerSideOnly=true)]
		public static pg_get_object_addressResult? PgGetObjectAddress(string? type, object? name, object? args)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetRuledef

		[Sql.Function(Name="pg_catalog.pg_get_ruledef", ServerSideOnly=true)]
		public static string? PgGetRuledef(int? par4981, bool? par4982)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetSerialSequence

		[Sql.Function(Name="pg_catalog.pg_get_serial_sequence", ServerSideOnly=true)]
		public static string? PgGetSerialSequence(string? par4984, string? par4985)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetTriggerdef

		[Sql.Function(Name="pg_catalog.pg_get_triggerdef", ServerSideOnly=true)]
		public static string? PgGetTriggerdef(int? par4989, bool? par4990)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetUserbyid

		[Sql.Function(Name="pg_catalog.pg_get_userbyid", ServerSideOnly=true)]
		public static string? PgGetUserbyid(int? par4992)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgGetViewdef

		[Sql.Function(Name="pg_catalog.pg_get_viewdef", ServerSideOnly=true)]
		public static string? PgGetViewdef(int? par5004, int? par5005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgHasRole

		[Sql.Function(Name="pg_catalog.pg_has_role", ServerSideOnly=true)]
		public static bool? PgHasRole(int? par5026, string? par5027)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObject

		[Sql.Function(Name="pg_catalog.pg_identify_object", ServerSideOnly=true)]
		public static pg_identify_objectResult? PgIdentifyObject(int? classid, int? objid, int? subobjid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIdentifyObjectAsAddress

		[Sql.Function(Name="pg_catalog.pg_identify_object_as_address", ServerSideOnly=true)]
		public static pg_identify_object_as_addressResult? PgIdentifyObjectAsAddress(int? classid, int? objid, int? subobjid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIndexesSize

		[Sql.Function(Name="pg_catalog.pg_indexes_size", ServerSideOnly=true)]
		public static long? PgIndexesSize(object? par5029)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInBackup

		[Sql.Function(Name="pg_catalog.pg_is_in_backup", ServerSideOnly=true)]
		public static bool? PgIsInBackup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsInRecovery

		[Sql.Function(Name="pg_catalog.pg_is_in_recovery", ServerSideOnly=true)]
		public static bool? PgIsInRecovery()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsOtherTempSchema

		[Sql.Function(Name="pg_catalog.pg_is_other_temp_schema", ServerSideOnly=true)]
		public static bool? PgIsOtherTempSchema(int? par5033)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgIsXlogReplayPaused

		[Sql.Function(Name="pg_catalog.pg_is_xlog_replay_paused", ServerSideOnly=true)]
		public static bool? PgIsXlogReplayPaused()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastCommittedXact

		[Sql.Function(Name="pg_catalog.pg_last_committed_xact", ServerSideOnly=true)]
		public static pg_last_committed_xactResult? PgLastCommittedXact()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXactReplayTimestamp

		[Sql.Function(Name="pg_catalog.pg_last_xact_replay_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgLastXactReplayTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXlogReceiveLocation

		[Sql.Function(Name="pg_catalog.pg_last_xlog_receive_location", ServerSideOnly=true)]
		public static object? PgLastXlogReceiveLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLastXlogReplayLocation

		[Sql.Function(Name="pg_catalog.pg_last_xlog_replay_location", ServerSideOnly=true)]
		public static object? PgLastXlogReplayLocation()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnCmp

		[Sql.Function(Name="pg_catalog.pg_lsn_cmp", ServerSideOnly=true)]
		public static int? PgLsnCmp(object? par5043, object? par5044)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnEq

		[Sql.Function(Name="pg_catalog.pg_lsn_eq", ServerSideOnly=true)]
		public static bool? PgLsnEq(object? par5046, object? par5047)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGe

		[Sql.Function(Name="pg_catalog.pg_lsn_ge", ServerSideOnly=true)]
		public static bool? PgLsnGe(object? par5049, object? par5050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnGt

		[Sql.Function(Name="pg_catalog.pg_lsn_gt", ServerSideOnly=true)]
		public static bool? PgLsnGt(object? par5052, object? par5053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnHash

		[Sql.Function(Name="pg_catalog.pg_lsn_hash", ServerSideOnly=true)]
		public static int? PgLsnHash(object? par5055)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnIn

		[Sql.Function(Name="pg_catalog.pg_lsn_in", ServerSideOnly=true)]
		public static object? PgLsnIn(object? par5057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLe

		[Sql.Function(Name="pg_catalog.pg_lsn_le", ServerSideOnly=true)]
		public static bool? PgLsnLe(object? par5059, object? par5060)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnLt

		[Sql.Function(Name="pg_catalog.pg_lsn_lt", ServerSideOnly=true)]
		public static bool? PgLsnLt(object? par5062, object? par5063)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnMi

		[Sql.Function(Name="pg_catalog.pg_lsn_mi", ServerSideOnly=true)]
		public static decimal? PgLsnMi(object? par5065, object? par5066)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnNe

		[Sql.Function(Name="pg_catalog.pg_lsn_ne", ServerSideOnly=true)]
		public static bool? PgLsnNe(object? par5068, object? par5069)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnOut

		[Sql.Function(Name="pg_catalog.pg_lsn_out", ServerSideOnly=true)]
		public static object? PgLsnOut(object? par5071)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnRecv

		[Sql.Function(Name="pg_catalog.pg_lsn_recv", ServerSideOnly=true)]
		public static object? PgLsnRecv(object? par5073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgLsnSend

		[Sql.Function(Name="pg_catalog.pg_lsn_send", ServerSideOnly=true)]
		public static byte[]? PgLsnSend(object? par5075)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgMyTempSchema

		[Sql.Function(Name="pg_catalog.pg_my_temp_schema", ServerSideOnly=true)]
		public static int? PgMyTempSchema()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeIn

		[Sql.Function(Name="pg_catalog.pg_node_tree_in", ServerSideOnly=true)]
		public static object? PgNodeTreeIn(object? par5078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeOut

		[Sql.Function(Name="pg_catalog.pg_node_tree_out", ServerSideOnly=true)]
		public static object? PgNodeTreeOut(object? par5080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeRecv

		[Sql.Function(Name="pg_catalog.pg_node_tree_recv", ServerSideOnly=true)]
		public static object? PgNodeTreeRecv(object? par5082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNodeTreeSend

		[Sql.Function(Name="pg_catalog.pg_node_tree_send", ServerSideOnly=true)]
		public static byte[]? PgNodeTreeSend(object? par5084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgNotify

		[Sql.Function(Name="pg_catalog.pg_notify", ServerSideOnly=true)]
		public static object? PgNotify(string? par5085, string? par5086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpclassIsVisible

		[Sql.Function(Name="pg_catalog.pg_opclass_is_visible", ServerSideOnly=true)]
		public static bool? PgOpclassIsVisible(int? par5088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOperatorIsVisible

		[Sql.Function(Name="pg_catalog.pg_operator_is_visible", ServerSideOnly=true)]
		public static bool? PgOperatorIsVisible(int? par5090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgOpfamilyIsVisible

		[Sql.Function(Name="pg_catalog.pg_opfamily_is_visible", ServerSideOnly=true)]
		public static bool? PgOpfamilyIsVisible(int? par5092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgPostmasterStartTime

		[Sql.Function(Name="pg_catalog.pg_postmaster_start_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgPostmasterStartTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadBinaryFile

		[Sql.Function(Name="pg_catalog.pg_read_binary_file", ServerSideOnly=true)]
		public static byte[]? PgReadBinaryFile(string? par5104)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReadFile

		[Sql.Function(Name="pg_catalog.pg_read_file", ServerSideOnly=true)]
		public static string? PgReadFile(string? par5115)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilenode

		[Sql.Function(Name="pg_catalog.pg_relation_filenode", ServerSideOnly=true)]
		public static int? PgRelationFilenode(object? par5117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationFilepath

		[Sql.Function(Name="pg_catalog.pg_relation_filepath", ServerSideOnly=true)]
		public static string? PgRelationFilepath(object? par5119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationIsUpdatable

		[Sql.Function(Name="pg_catalog.pg_relation_is_updatable", ServerSideOnly=true)]
		public static int? PgRelationIsUpdatable(object? par5121, bool? par5122)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRelationSize

		[Sql.Function(Name="pg_catalog.pg_relation_size", ServerSideOnly=true)]
		public static long? PgRelationSize(object? par5126, string? par5127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReloadConf

		[Sql.Function(Name="pg_catalog.pg_reload_conf", ServerSideOnly=true)]
		public static bool? PgReloadConf()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginAdvance

		[Sql.Function(Name="pg_catalog.pg_replication_origin_advance", ServerSideOnly=true)]
		public static object? PgReplicationOriginAdvance(string? par5129, object? par5130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginCreate

		[Sql.Function(Name="pg_catalog.pg_replication_origin_create", ServerSideOnly=true)]
		public static int? PgReplicationOriginCreate(string? par5132)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginDrop

		[Sql.Function(Name="pg_catalog.pg_replication_origin_drop", ServerSideOnly=true)]
		public static object? PgReplicationOriginDrop(string? par5133)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginOid

		[Sql.Function(Name="pg_catalog.pg_replication_origin_oid", ServerSideOnly=true)]
		public static int? PgReplicationOriginOid(string? par5135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_progress", ServerSideOnly=true)]
		public static object? PgReplicationOriginProgress(string? par5137, bool? par5138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionIsSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_is_setup", ServerSideOnly=true)]
		public static bool? PgReplicationOriginSessionIsSetup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionProgress

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_progress", ServerSideOnly=true)]
		public static object? PgReplicationOriginSessionProgress(bool? par5141)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_reset", ServerSideOnly=true)]
		public static object? PgReplicationOriginSessionReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginSessionSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_session_setup", ServerSideOnly=true)]
		public static object? PgReplicationOriginSessionSetup(string? par5142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactReset

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_reset", ServerSideOnly=true)]
		public static object? PgReplicationOriginXactReset(object? par5143, NpgsqlDateTime? par5144)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgReplicationOriginXactSetup

		[Sql.Function(Name="pg_catalog.pg_replication_origin_xact_setup", ServerSideOnly=true)]
		public static object? PgReplicationOriginXactSetup(object? par5145, NpgsqlDateTime? par5146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgRotateLogfile

		[Sql.Function(Name="pg_catalog.pg_rotate_logfile", ServerSideOnly=true)]
		public static bool? PgRotateLogfile()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSequenceParameters

		[Sql.Function(Name="pg_catalog.pg_sequence_parameters", ServerSideOnly=true)]
		public static pg_sequence_parametersResult? PgSequenceParameters(int? sequence_oid)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSizePretty

		[Sql.Function(Name="pg_catalog.pg_size_pretty", ServerSideOnly=true)]
		public static string? PgSizePretty(decimal? par5151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleep

		[Sql.Function(Name="pg_catalog.pg_sleep", ServerSideOnly=true)]
		public static object? PgSleep(double? par5152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepFor

		[Sql.Function(Name="pg_catalog.pg_sleep_for", ServerSideOnly=true)]
		public static object? PgSleepFor(NpgsqlTimeSpan? par5153)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSleepUntil

		[Sql.Function(Name="pg_catalog.pg_sleep_until", ServerSideOnly=true)]
		public static object? PgSleepUntil(NpgsqlDateTime? par5154)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStartBackup

		[Sql.Function(Name="pg_catalog.pg_start_backup", ServerSideOnly=true)]
		public static object? PgStartBackup(string? label, bool? fast)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatClearSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_clear_snapshot", ServerSideOnly=true)]
		public static object? PgStatClearSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatFile

		[Sql.Function(Name="pg_catalog.pg_stat_file", ServerSideOnly=true)]
		public static pg_stat_fileResult? PgStatFile(string? filename, bool? missing_ok)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAnalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_analyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAnalyzeCount(int? par5157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetArchiver

		[Sql.Function(Name="pg_catalog.pg_stat_get_archiver", ServerSideOnly=true)]
		public static pg_stat_get_archiverResult? PgStatGetArchiver()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutoanalyzeCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autoanalyze_count", ServerSideOnly=true)]
		public static long? PgStatGetAutoanalyzeCount(int? par5159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetAutovacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_autovacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetAutovacuumCount(int? par5161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivity

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity", ServerSideOnly=true)]
		public static string? PgStatGetBackendActivity(int? par5163)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendActivityStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_activity_start", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetBackendActivityStart(int? par5165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientAddr

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_addr", ServerSideOnly=true)]
		public static NpgsqlInet? PgStatGetBackendClientAddr(int? par5167)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendClientPort

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_client_port", ServerSideOnly=true)]
		public static int? PgStatGetBackendClientPort(int? par5169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendDbid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_dbid", ServerSideOnly=true)]
		public static int? PgStatGetBackendDbid(int? par5171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendPid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_pid", ServerSideOnly=true)]
		public static int? PgStatGetBackendPid(int? par5173)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_start", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetBackendStart(int? par5175)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendUserid

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_userid", ServerSideOnly=true)]
		public static int? PgStatGetBackendUserid(int? par5177)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendWaiting

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_waiting", ServerSideOnly=true)]
		public static bool? PgStatGetBackendWaiting(int? par5179)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBackendXactStart

		[Sql.Function(Name="pg_catalog.pg_stat_get_backend_xact_start", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetBackendXactStart(int? par5181)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterBufWrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_buf_written_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterBufWrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterMaxwrittenClean

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_maxwritten_clean", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterMaxwrittenClean()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterRequestedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_requested_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterRequestedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_stat_reset_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetBgwriterStatResetTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBgwriterTimedCheckpoints

		[Sql.Function(Name="pg_catalog.pg_stat_get_bgwriter_timed_checkpoints", ServerSideOnly=true)]
		public static long? PgStatGetBgwriterTimedCheckpoints()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetBlocksFetched(int? par5189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetBlocksHit(int? par5191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufAlloc

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_alloc", ServerSideOnly=true)]
		public static long? PgStatGetBufAlloc()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufFsyncBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_fsync_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufFsyncBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetBufWrittenBackend

		[Sql.Function(Name="pg_catalog.pg_stat_get_buf_written_backend", ServerSideOnly=true)]
		public static long? PgStatGetBufWrittenBackend()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointSyncTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_sync_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointSyncTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetCheckpointWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_checkpoint_write_time", ServerSideOnly=true)]
		public static double? PgStatGetCheckpointWriteTime()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkReadTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_read_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkReadTime(int? par5198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlkWriteTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blk_write_time", ServerSideOnly=true)]
		public static double? PgStatGetDbBlkWriteTime(int? par5200)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksFetched(int? par5202)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetDbBlocksHit(int? par5204)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictAll

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_all", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictAll(int? par5206)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictBufferpin

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_bufferpin", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictBufferpin(int? par5208)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictLock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_lock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictLock(int? par5210)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictSnapshot

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_snapshot", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictSnapshot(int? par5212)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictStartupDeadlock

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_startup_deadlock", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictStartupDeadlock(int? par5214)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbConflictTablespace

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_conflict_tablespace", ServerSideOnly=true)]
		public static long? PgStatGetDbConflictTablespace(int? par5216)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbDeadlocks

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_deadlocks", ServerSideOnly=true)]
		public static long? PgStatGetDbDeadlocks(int? par5218)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbNumbackends

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_numbackends", ServerSideOnly=true)]
		public static int? PgStatGetDbNumbackends(int? par5220)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbStatResetTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_stat_reset_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetDbStatResetTime(int? par5222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempBytes

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_bytes", ServerSideOnly=true)]
		public static long? PgStatGetDbTempBytes(int? par5224)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTempFiles

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_temp_files", ServerSideOnly=true)]
		public static long? PgStatGetDbTempFiles(int? par5226)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesDeleted(int? par5228)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesFetched(int? par5230)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesInserted(int? par5232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesReturned(int? par5234)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetDbTuplesUpdated(int? par5236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactCommit

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_commit", ServerSideOnly=true)]
		public static long? PgStatGetDbXactCommit(int? par5238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDbXactRollback

		[Sql.Function(Name="pg_catalog.pg_stat_get_db_xact_rollback", ServerSideOnly=true)]
		public static long? PgStatGetDbXactRollback(int? par5240)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetDeadTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_dead_tuples", ServerSideOnly=true)]
		public static long? PgStatGetDeadTuples(int? par5242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetFunctionCalls(int? par5244)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionSelfTime(int? par5246)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetFunctionTotalTime(int? par5248)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAnalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_analyze_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetLastAnalyzeTime(int? par5250)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutoanalyzeTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autoanalyze_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetLastAutoanalyzeTime(int? par5252)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastAutovacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_autovacuum_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetLastAutovacuumTime(int? par5254)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLastVacuumTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_last_vacuum_time", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetLastVacuumTime(int? par5256)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetLiveTuples

		[Sql.Function(Name="pg_catalog.pg_stat_get_live_tuples", ServerSideOnly=true)]
		public static long? PgStatGetLiveTuples(int? par5258)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetModSinceAnalyze

		[Sql.Function(Name="pg_catalog.pg_stat_get_mod_since_analyze", ServerSideOnly=true)]
		public static long? PgStatGetModSinceAnalyze(int? par5260)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_numscans", ServerSideOnly=true)]
		public static long? PgStatGetNumscans(int? par5262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetSnapshotTimestamp

		[Sql.Function(Name="pg_catalog.pg_stat_get_snapshot_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgStatGetSnapshotTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesDeleted(int? par5265)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetTuplesFetched(int? par5267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesHotUpdated(int? par5269)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetTuplesInserted(int? par5271)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetTuplesReturned(int? par5273)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetTuplesUpdated(int? par5275)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetVacuumCount

		[Sql.Function(Name="pg_catalog.pg_stat_get_vacuum_count", ServerSideOnly=true)]
		public static long? PgStatGetVacuumCount(int? par5277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksFetched(int? par5279)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactBlocksHit

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_blocks_hit", ServerSideOnly=true)]
		public static long? PgStatGetXactBlocksHit(int? par5281)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionCalls

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_calls", ServerSideOnly=true)]
		public static long? PgStatGetXactFunctionCalls(int? par5283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionSelfTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_self_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionSelfTime(int? par5285)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactFunctionTotalTime

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_function_total_time", ServerSideOnly=true)]
		public static double? PgStatGetXactFunctionTotalTime(int? par5287)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactNumscans

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_numscans", ServerSideOnly=true)]
		public static long? PgStatGetXactNumscans(int? par5289)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesDeleted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_deleted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesDeleted(int? par5291)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesFetched

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_fetched", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesFetched(int? par5293)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesHotUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_hot_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesHotUpdated(int? par5295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesInserted

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_inserted", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesInserted(int? par5297)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesReturned

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_returned", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesReturned(int? par5299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatGetXactTuplesUpdated

		[Sql.Function(Name="pg_catalog.pg_stat_get_xact_tuples_updated", ServerSideOnly=true)]
		public static long? PgStatGetXactTuplesUpdated(int? par5301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatReset

		[Sql.Function(Name="pg_catalog.pg_stat_reset", ServerSideOnly=true)]
		public static object? PgStatReset()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetShared

		[Sql.Function(Name="pg_catalog.pg_stat_reset_shared", ServerSideOnly=true)]
		public static object? PgStatResetShared(string? par5302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleFunctionCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_function_counters", ServerSideOnly=true)]
		public static object? PgStatResetSingleFunctionCounters(int? par5303)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStatResetSingleTableCounters

		[Sql.Function(Name="pg_catalog.pg_stat_reset_single_table_counters", ServerSideOnly=true)]
		public static object? PgStatResetSingleTableCounters(int? par5304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgStopBackup

		[Sql.Function(Name="pg_catalog.pg_stop_backup", ServerSideOnly=true)]
		public static object? PgStopBackup()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgSwitchXlog

		[Sql.Function(Name="pg_catalog.pg_switch_xlog", ServerSideOnly=true)]
		public static object? PgSwitchXlog()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableIsVisible

		[Sql.Function(Name="pg_catalog.pg_table_is_visible", ServerSideOnly=true)]
		public static bool? PgTableIsVisible(int? par5308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTableSize

		[Sql.Function(Name="pg_catalog.pg_table_size", ServerSideOnly=true)]
		public static long? PgTableSize(object? par5310)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceLocation

		[Sql.Function(Name="pg_catalog.pg_tablespace_location", ServerSideOnly=true)]
		public static string? PgTablespaceLocation(int? par5313)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTablespaceSize

		[Sql.Function(Name="pg_catalog.pg_tablespace_size", ServerSideOnly=true)]
		public static long? PgTablespaceSize(string? par5317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTerminateBackend

		[Sql.Function(Name="pg_catalog.pg_terminate_backend", ServerSideOnly=true)]
		public static bool? PgTerminateBackend(int? par5319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTotalRelationSize

		[Sql.Function(Name="pg_catalog.pg_total_relation_size", ServerSideOnly=true)]
		public static long? PgTotalRelationSize(object? par5321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTriggerDepth

		[Sql.Function(Name="pg_catalog.pg_trigger_depth", ServerSideOnly=true)]
		public static int? PgTriggerDepth()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLock(int? par5326, int? par5327)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryLockShared(int? par5331, int? par5332)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLock

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLock(int? par5336, int? par5337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTryAdvisoryXactLockShared

		[Sql.Function(Name="pg_catalog.pg_try_advisory_xact_lock_shared", ServerSideOnly=true)]
		public static bool? PgTryAdvisoryXactLockShared(int? par5341, int? par5342)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsConfigIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_config_is_visible", ServerSideOnly=true)]
		public static bool? PgTsConfigIsVisible(int? par5344)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsDictIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_dict_is_visible", ServerSideOnly=true)]
		public static bool? PgTsDictIsVisible(int? par5346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsParserIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_parser_is_visible", ServerSideOnly=true)]
		public static bool? PgTsParserIsVisible(int? par5348)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTsTemplateIsVisible

		[Sql.Function(Name="pg_catalog.pg_ts_template_is_visible", ServerSideOnly=true)]
		public static bool? PgTsTemplateIsVisible(int? par5350)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeIsVisible

		[Sql.Function(Name="pg_catalog.pg_type_is_visible", ServerSideOnly=true)]
		public static bool? PgTypeIsVisible(int? par5352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgTypeof

		[Sql.Function(Name="pg_catalog.pg_typeof", ServerSideOnly=true)]
		public static object? PgTypeof(object? par5354)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXactCommitTimestamp

		[Sql.Function(Name="pg_catalog.pg_xact_commit_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? PgXactCommitTimestamp(int? par5356)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogLocationDiff

		[Sql.Function(Name="pg_catalog.pg_xlog_location_diff", ServerSideOnly=true)]
		public static decimal? PgXlogLocationDiff(object? par5358, object? par5359)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogReplayPause

		[Sql.Function(Name="pg_catalog.pg_xlog_replay_pause", ServerSideOnly=true)]
		public static object? PgXlogReplayPause()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogReplayResume

		[Sql.Function(Name="pg_catalog.pg_xlog_replay_resume", ServerSideOnly=true)]
		public static object? PgXlogReplayResume()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogfileName

		[Sql.Function(Name="pg_catalog.pg_xlogfile_name", ServerSideOnly=true)]
		public static string? PgXlogfileName(object? par5361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PgXlogfileNameOffset

		[Sql.Function(Name="pg_catalog.pg_xlogfile_name_offset", ServerSideOnly=true)]
		public static pg_xlogfile_name_offsetResult? PgXlogfileNameOffset(object? wal_location)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pi

		[Sql.Function(Name="pg_catalog.pi", ServerSideOnly=true)]
		public static double? Pi()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlaintoTsquery

		[Sql.Function(Name="pg_catalog.plainto_tsquery", ServerSideOnly=true)]
		public static object? PlaintoTsquery(string? par5367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlCallHandler

		[Sql.Function(Name="pg_catalog.plpgsql_call_handler", ServerSideOnly=true)]
		public static object? PlpgsqlCallHandler()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlInlineHandler

		[Sql.Function(Name="pg_catalog.plpgsql_inline_handler", ServerSideOnly=true)]
		public static object? PlpgsqlInlineHandler(object? par5369)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PlpgsqlValidator

		[Sql.Function(Name="pg_catalog.plpgsql_validator", ServerSideOnly=true)]
		public static object? PlpgsqlValidator(int? par5370)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Point

		[Sql.Function(Name="pg_catalog.point", ServerSideOnly=true)]
		public static NpgsqlPoint? Point(NpgsqlPolygon? par5383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAbove

		[Sql.Function(Name="pg_catalog.point_above", ServerSideOnly=true)]
		public static bool? PointAbove(NpgsqlPoint? par5385, NpgsqlPoint? par5386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointAdd

		[Sql.Function(Name="pg_catalog.point_add", ServerSideOnly=true)]
		public static NpgsqlPoint? PointAdd(NpgsqlPoint? par5388, NpgsqlPoint? par5389)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointBelow

		[Sql.Function(Name="pg_catalog.point_below", ServerSideOnly=true)]
		public static bool? PointBelow(NpgsqlPoint? par5391, NpgsqlPoint? par5392)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDistance

		[Sql.Function(Name="pg_catalog.point_distance", ServerSideOnly=true)]
		public static double? PointDistance(NpgsqlPoint? par5394, NpgsqlPoint? par5395)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointDiv

		[Sql.Function(Name="pg_catalog.point_div", ServerSideOnly=true)]
		public static NpgsqlPoint? PointDiv(NpgsqlPoint? par5397, NpgsqlPoint? par5398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointEq

		[Sql.Function(Name="pg_catalog.point_eq", ServerSideOnly=true)]
		public static bool? PointEq(NpgsqlPoint? par5400, NpgsqlPoint? par5401)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointHoriz

		[Sql.Function(Name="pg_catalog.point_horiz", ServerSideOnly=true)]
		public static bool? PointHoriz(NpgsqlPoint? par5403, NpgsqlPoint? par5404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointIn

		[Sql.Function(Name="pg_catalog.point_in", ServerSideOnly=true)]
		public static NpgsqlPoint? PointIn(object? par5406)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointLeft

		[Sql.Function(Name="pg_catalog.point_left", ServerSideOnly=true)]
		public static bool? PointLeft(NpgsqlPoint? par5408, NpgsqlPoint? par5409)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointMul

		[Sql.Function(Name="pg_catalog.point_mul", ServerSideOnly=true)]
		public static NpgsqlPoint? PointMul(NpgsqlPoint? par5411, NpgsqlPoint? par5412)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointNe

		[Sql.Function(Name="pg_catalog.point_ne", ServerSideOnly=true)]
		public static bool? PointNe(NpgsqlPoint? par5414, NpgsqlPoint? par5415)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointOut

		[Sql.Function(Name="pg_catalog.point_out", ServerSideOnly=true)]
		public static object? PointOut(NpgsqlPoint? par5417)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRecv

		[Sql.Function(Name="pg_catalog.point_recv", ServerSideOnly=true)]
		public static NpgsqlPoint? PointRecv(object? par5419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointRight

		[Sql.Function(Name="pg_catalog.point_right", ServerSideOnly=true)]
		public static bool? PointRight(NpgsqlPoint? par5421, NpgsqlPoint? par5422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSend

		[Sql.Function(Name="pg_catalog.point_send", ServerSideOnly=true)]
		public static byte[]? PointSend(NpgsqlPoint? par5424)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointSub

		[Sql.Function(Name="pg_catalog.point_sub", ServerSideOnly=true)]
		public static NpgsqlPoint? PointSub(NpgsqlPoint? par5426, NpgsqlPoint? par5427)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PointVert

		[Sql.Function(Name="pg_catalog.point_vert", ServerSideOnly=true)]
		public static bool? PointVert(NpgsqlPoint? par5429, NpgsqlPoint? par5430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyAbove

		[Sql.Function(Name="pg_catalog.poly_above", ServerSideOnly=true)]
		public static bool? PolyAbove(NpgsqlPolygon? par5432, NpgsqlPolygon? par5433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyBelow

		[Sql.Function(Name="pg_catalog.poly_below", ServerSideOnly=true)]
		public static bool? PolyBelow(NpgsqlPolygon? par5435, NpgsqlPolygon? par5436)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyCenter

		[Sql.Function(Name="pg_catalog.poly_center", ServerSideOnly=true)]
		public static NpgsqlPoint? PolyCenter(NpgsqlPolygon? par5438)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContain

		[Sql.Function(Name="pg_catalog.poly_contain", ServerSideOnly=true)]
		public static bool? PolyContain(NpgsqlPolygon? par5440, NpgsqlPolygon? par5441)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContainPt

		[Sql.Function(Name="pg_catalog.poly_contain_pt", ServerSideOnly=true)]
		public static bool? PolyContainPt(NpgsqlPolygon? par5443, NpgsqlPoint? par5444)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyContained

		[Sql.Function(Name="pg_catalog.poly_contained", ServerSideOnly=true)]
		public static bool? PolyContained(NpgsqlPolygon? par5446, NpgsqlPolygon? par5447)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyDistance

		[Sql.Function(Name="pg_catalog.poly_distance", ServerSideOnly=true)]
		public static double? PolyDistance(NpgsqlPolygon? par5449, NpgsqlPolygon? par5450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyIn

		[Sql.Function(Name="pg_catalog.poly_in", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyIn(object? par5452)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyLeft

		[Sql.Function(Name="pg_catalog.poly_left", ServerSideOnly=true)]
		public static bool? PolyLeft(NpgsqlPolygon? par5454, NpgsqlPolygon? par5455)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyNpoints

		[Sql.Function(Name="pg_catalog.poly_npoints", ServerSideOnly=true)]
		public static int? PolyNpoints(NpgsqlPolygon? par5457)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOut

		[Sql.Function(Name="pg_catalog.poly_out", ServerSideOnly=true)]
		public static object? PolyOut(NpgsqlPolygon? par5459)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverabove

		[Sql.Function(Name="pg_catalog.poly_overabove", ServerSideOnly=true)]
		public static bool? PolyOverabove(NpgsqlPolygon? par5461, NpgsqlPolygon? par5462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverbelow

		[Sql.Function(Name="pg_catalog.poly_overbelow", ServerSideOnly=true)]
		public static bool? PolyOverbelow(NpgsqlPolygon? par5464, NpgsqlPolygon? par5465)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverlap

		[Sql.Function(Name="pg_catalog.poly_overlap", ServerSideOnly=true)]
		public static bool? PolyOverlap(NpgsqlPolygon? par5467, NpgsqlPolygon? par5468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverleft

		[Sql.Function(Name="pg_catalog.poly_overleft", ServerSideOnly=true)]
		public static bool? PolyOverleft(NpgsqlPolygon? par5470, NpgsqlPolygon? par5471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyOverright

		[Sql.Function(Name="pg_catalog.poly_overright", ServerSideOnly=true)]
		public static bool? PolyOverright(NpgsqlPolygon? par5473, NpgsqlPolygon? par5474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRecv

		[Sql.Function(Name="pg_catalog.poly_recv", ServerSideOnly=true)]
		public static NpgsqlPolygon? PolyRecv(object? par5476)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolyRight

		[Sql.Function(Name="pg_catalog.poly_right", ServerSideOnly=true)]
		public static bool? PolyRight(NpgsqlPolygon? par5478, NpgsqlPolygon? par5479)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySame

		[Sql.Function(Name="pg_catalog.poly_same", ServerSideOnly=true)]
		public static bool? PolySame(NpgsqlPolygon? par5481, NpgsqlPolygon? par5482)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PolySend

		[Sql.Function(Name="pg_catalog.poly_send", ServerSideOnly=true)]
		public static byte[]? PolySend(NpgsqlPolygon? par5484)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Polygon

		[Sql.Function(Name="pg_catalog.polygon", ServerSideOnly=true)]
		public static NpgsqlPolygon? Polygon(NpgsqlCircle? par5493)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Popen

		[Sql.Function(Name="pg_catalog.popen", ServerSideOnly=true)]
		public static NpgsqlPath? Popen(NpgsqlPath? par5495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Position

		[Sql.Function(Name="pg_catalog.position", ServerSideOnly=true)]
		public static int? Position(string? par5503, string? par5504)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionjoinsel

		[Sql.Function(Name="pg_catalog.positionjoinsel", ServerSideOnly=true)]
		public static double? Positionjoinsel(object? par5506, int? par5507, object? par5508, short? par5509, object? par5510)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Positionsel

		[Sql.Function(Name="pg_catalog.positionsel", ServerSideOnly=true)]
		public static double? Positionsel(object? par5512, int? par5513, object? par5514, int? par5515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PostgresqlFdwValidator

		[Sql.Function(Name="pg_catalog.postgresql_fdw_validator", ServerSideOnly=true)]
		public static bool? PostgresqlFdwValidator(object? par5517, int? par5518)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Pow

		[Sql.Function(Name="pg_catalog.pow", ServerSideOnly=true)]
		public static decimal? Pow(decimal? par5523, decimal? par5524)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Power

		[Sql.Function(Name="pg_catalog.power", ServerSideOnly=true)]
		public static decimal? Power(decimal? par5529, decimal? par5530)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdEnd

		[Sql.Function(Name="pg_catalog.prsd_end", ServerSideOnly=true)]
		public static object? PrsdEnd(object? par5531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdHeadline

		[Sql.Function(Name="pg_catalog.prsd_headline", ServerSideOnly=true)]
		public static object? PrsdHeadline(object? par5533, object? par5534, object? par5535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdLextype

		[Sql.Function(Name="pg_catalog.prsd_lextype", ServerSideOnly=true)]
		public static object? PrsdLextype(object? par5537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdNexttoken

		[Sql.Function(Name="pg_catalog.prsd_nexttoken", ServerSideOnly=true)]
		public static object? PrsdNexttoken(object? par5539, object? par5540, object? par5541)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PrsdStart

		[Sql.Function(Name="pg_catalog.prsd_start", ServerSideOnly=true)]
		public static object? PrsdStart(object? par5543, int? par5544)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedCircle

		[Sql.Function(Name="pg_catalog.pt_contained_circle", ServerSideOnly=true)]
		public static bool? PtContainedCircle(NpgsqlPoint? par5546, NpgsqlCircle? par5547)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region PtContainedPoly

		[Sql.Function(Name="pg_catalog.pt_contained_poly", ServerSideOnly=true)]
		public static bool? PtContainedPoly(NpgsqlPoint? par5549, NpgsqlPolygon? par5550)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXml

		[Sql.Function(Name="pg_catalog.query_to_xml", ServerSideOnly=true)]
		public static string? QueryToXml(string? query, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string? QueryToXmlAndXmlschema(string? query, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QueryToXmlschema

		[Sql.Function(Name="pg_catalog.query_to_xmlschema", ServerSideOnly=true)]
		public static string? QueryToXmlschema(string? query, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Querytree

		[Sql.Function(Name="pg_catalog.querytree", ServerSideOnly=true)]
		public static string? Querytree(object? par5555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteIdent

		[Sql.Function(Name="pg_catalog.quote_ident", ServerSideOnly=true)]
		public static string? QuoteIdent(string? par5557)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteLiteral

		[Sql.Function(Name="pg_catalog.quote_literal", ServerSideOnly=true)]
		public static string? QuoteLiteral(object? par5561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region QuoteNullable

		[Sql.Function(Name="pg_catalog.quote_nullable", ServerSideOnly=true)]
		public static string? QuoteNullable(object? par5565)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radians

		[Sql.Function(Name="pg_catalog.radians", ServerSideOnly=true)]
		public static double? Radians(double? par5567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Radius

		[Sql.Function(Name="pg_catalog.radius", ServerSideOnly=true)]
		public static double? Radius(NpgsqlCircle? par5569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Random

		[Sql.Function(Name="pg_catalog.random", ServerSideOnly=true)]
		public static double? Random()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAdjacent

		[Sql.Function(Name="pg_catalog.range_adjacent", ServerSideOnly=true)]
		public static bool? RangeAdjacent(object? par5572, object? par5573)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeAfter

		[Sql.Function(Name="pg_catalog.range_after", ServerSideOnly=true)]
		public static bool? RangeAfter(object? par5575, object? par5576)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeBefore

		[Sql.Function(Name="pg_catalog.range_before", ServerSideOnly=true)]
		public static bool? RangeBefore(object? par5578, object? par5579)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeCmp

		[Sql.Function(Name="pg_catalog.range_cmp", ServerSideOnly=true)]
		public static int? RangeCmp(object? par5581, object? par5582)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainedBy

		[Sql.Function(Name="pg_catalog.range_contained_by", ServerSideOnly=true)]
		public static bool? RangeContainedBy(object? par5584, object? par5585)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContains

		[Sql.Function(Name="pg_catalog.range_contains", ServerSideOnly=true)]
		public static bool? RangeContains(object? par5587, object? par5588)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeContainsElem

		[Sql.Function(Name="pg_catalog.range_contains_elem", ServerSideOnly=true)]
		public static bool? RangeContainsElem(object? par5590, object? par5591)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeEq

		[Sql.Function(Name="pg_catalog.range_eq", ServerSideOnly=true)]
		public static bool? RangeEq(object? par5593, object? par5594)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGe

		[Sql.Function(Name="pg_catalog.range_ge", ServerSideOnly=true)]
		public static bool? RangeGe(object? par5596, object? par5597)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistCompress

		[Sql.Function(Name="pg_catalog.range_gist_compress", ServerSideOnly=true)]
		public static object? RangeGistCompress(object? par5599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistConsistent

		[Sql.Function(Name="pg_catalog.range_gist_consistent", ServerSideOnly=true)]
		public static bool? RangeGistConsistent(object? par5601, object? par5602, int? par5603, int? par5604, object? par5605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistDecompress

		[Sql.Function(Name="pg_catalog.range_gist_decompress", ServerSideOnly=true)]
		public static object? RangeGistDecompress(object? par5607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistFetch

		[Sql.Function(Name="pg_catalog.range_gist_fetch", ServerSideOnly=true)]
		public static object? RangeGistFetch(object? par5609)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPenalty

		[Sql.Function(Name="pg_catalog.range_gist_penalty", ServerSideOnly=true)]
		public static object? RangeGistPenalty(object? par5611, object? par5612, object? par5613)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistPicksplit

		[Sql.Function(Name="pg_catalog.range_gist_picksplit", ServerSideOnly=true)]
		public static object? RangeGistPicksplit(object? par5615, object? par5616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistSame

		[Sql.Function(Name="pg_catalog.range_gist_same", ServerSideOnly=true)]
		public static object? RangeGistSame(object? par5618, object? par5619, object? par5620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGistUnion

		[Sql.Function(Name="pg_catalog.range_gist_union", ServerSideOnly=true)]
		public static object? RangeGistUnion(object? par5622, object? par5623)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeGt

		[Sql.Function(Name="pg_catalog.range_gt", ServerSideOnly=true)]
		public static bool? RangeGt(object? par5625, object? par5626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIn

		[Sql.Function(Name="pg_catalog.range_in", ServerSideOnly=true)]
		public static object? RangeIn(object? par5628, int? par5629, int? par5630)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeIntersect

		[Sql.Function(Name="pg_catalog.range_intersect", ServerSideOnly=true)]
		public static object? RangeIntersect(object? par5632, object? par5633)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLe

		[Sql.Function(Name="pg_catalog.range_le", ServerSideOnly=true)]
		public static bool? RangeLe(object? par5635, object? par5636)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeLt

		[Sql.Function(Name="pg_catalog.range_lt", ServerSideOnly=true)]
		public static bool? RangeLt(object? par5638, object? par5639)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMerge

		[Sql.Function(Name="pg_catalog.range_merge", ServerSideOnly=true)]
		public static object? RangeMerge(object? par5641, object? par5642)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeMinus

		[Sql.Function(Name="pg_catalog.range_minus", ServerSideOnly=true)]
		public static object? RangeMinus(object? par5644, object? par5645)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeNe

		[Sql.Function(Name="pg_catalog.range_ne", ServerSideOnly=true)]
		public static bool? RangeNe(object? par5647, object? par5648)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOut

		[Sql.Function(Name="pg_catalog.range_out", ServerSideOnly=true)]
		public static object? RangeOut(object? par5650)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverlaps

		[Sql.Function(Name="pg_catalog.range_overlaps", ServerSideOnly=true)]
		public static bool? RangeOverlaps(object? par5652, object? par5653)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverleft

		[Sql.Function(Name="pg_catalog.range_overleft", ServerSideOnly=true)]
		public static bool? RangeOverleft(object? par5655, object? par5656)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeOverright

		[Sql.Function(Name="pg_catalog.range_overright", ServerSideOnly=true)]
		public static bool? RangeOverright(object? par5658, object? par5659)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeRecv

		[Sql.Function(Name="pg_catalog.range_recv", ServerSideOnly=true)]
		public static object? RangeRecv(object? par5661, int? par5662, int? par5663)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeSend

		[Sql.Function(Name="pg_catalog.range_send", ServerSideOnly=true)]
		public static byte[]? RangeSend(object? par5665)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeTypanalyze

		[Sql.Function(Name="pg_catalog.range_typanalyze", ServerSideOnly=true)]
		public static bool? RangeTypanalyze(object? par5667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RangeUnion

		[Sql.Function(Name="pg_catalog.range_union", ServerSideOnly=true)]
		public static object? RangeUnion(object? par5669, object? par5670)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rangesel

		[Sql.Function(Name="pg_catalog.rangesel", ServerSideOnly=true)]
		public static double? Rangesel(object? par5672, int? par5673, object? par5674, int? par5675)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rank

		[Sql.Function(Name="pg_catalog.rank", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static long? Rank<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, object?>> par5678)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RankFinal

		[Sql.Function(Name="pg_catalog.rank_final", ServerSideOnly=true)]
		public static long? RankFinal(object? par5680, object? par5681)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordEq

		[Sql.Function(Name="pg_catalog.record_eq", ServerSideOnly=true)]
		public static bool? RecordEq(object? par5683, object? par5684)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGe

		[Sql.Function(Name="pg_catalog.record_ge", ServerSideOnly=true)]
		public static bool? RecordGe(object? par5686, object? par5687)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordGt

		[Sql.Function(Name="pg_catalog.record_gt", ServerSideOnly=true)]
		public static bool? RecordGt(object? par5689, object? par5690)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageEq

		[Sql.Function(Name="pg_catalog.record_image_eq", ServerSideOnly=true)]
		public static bool? RecordImageEq(object? par5692, object? par5693)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGe

		[Sql.Function(Name="pg_catalog.record_image_ge", ServerSideOnly=true)]
		public static bool? RecordImageGe(object? par5695, object? par5696)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageGt

		[Sql.Function(Name="pg_catalog.record_image_gt", ServerSideOnly=true)]
		public static bool? RecordImageGt(object? par5698, object? par5699)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLe

		[Sql.Function(Name="pg_catalog.record_image_le", ServerSideOnly=true)]
		public static bool? RecordImageLe(object? par5701, object? par5702)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageLt

		[Sql.Function(Name="pg_catalog.record_image_lt", ServerSideOnly=true)]
		public static bool? RecordImageLt(object? par5704, object? par5705)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordImageNe

		[Sql.Function(Name="pg_catalog.record_image_ne", ServerSideOnly=true)]
		public static bool? RecordImageNe(object? par5707, object? par5708)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordIn

		[Sql.Function(Name="pg_catalog.record_in", ServerSideOnly=true)]
		public static object? RecordIn(object? par5709, int? par5710, int? par5711)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLe

		[Sql.Function(Name="pg_catalog.record_le", ServerSideOnly=true)]
		public static bool? RecordLe(object? par5713, object? par5714)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordLt

		[Sql.Function(Name="pg_catalog.record_lt", ServerSideOnly=true)]
		public static bool? RecordLt(object? par5716, object? par5717)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordNe

		[Sql.Function(Name="pg_catalog.record_ne", ServerSideOnly=true)]
		public static bool? RecordNe(object? par5719, object? par5720)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordOut

		[Sql.Function(Name="pg_catalog.record_out", ServerSideOnly=true)]
		public static object? RecordOut(object? par5722)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordRecv

		[Sql.Function(Name="pg_catalog.record_recv", ServerSideOnly=true)]
		public static object? RecordRecv(object? par5723, int? par5724, int? par5725)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RecordSend

		[Sql.Function(Name="pg_catalog.record_send", ServerSideOnly=true)]
		public static byte[]? RecordSend(object? par5727)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclass

		[Sql.Function(Name="pg_catalog.regclass", ServerSideOnly=true)]
		public static object? Regclass(string? par5729)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassin

		[Sql.Function(Name="pg_catalog.regclassin", ServerSideOnly=true)]
		public static object? Regclassin(object? par5731)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassout

		[Sql.Function(Name="pg_catalog.regclassout", ServerSideOnly=true)]
		public static object? Regclassout(object? par5733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclassrecv

		[Sql.Function(Name="pg_catalog.regclassrecv", ServerSideOnly=true)]
		public static object? Regclassrecv(object? par5735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regclasssend

		[Sql.Function(Name="pg_catalog.regclasssend", ServerSideOnly=true)]
		public static byte[]? Regclasssend(object? par5737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigin

		[Sql.Function(Name="pg_catalog.regconfigin", ServerSideOnly=true)]
		public static object? Regconfigin(object? par5739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigout

		[Sql.Function(Name="pg_catalog.regconfigout", ServerSideOnly=true)]
		public static object? Regconfigout(object? par5741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigrecv

		[Sql.Function(Name="pg_catalog.regconfigrecv", ServerSideOnly=true)]
		public static object? Regconfigrecv(object? par5743)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regconfigsend

		[Sql.Function(Name="pg_catalog.regconfigsend", ServerSideOnly=true)]
		public static byte[]? Regconfigsend(object? par5745)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryin

		[Sql.Function(Name="pg_catalog.regdictionaryin", ServerSideOnly=true)]
		public static object? Regdictionaryin(object? par5747)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryout

		[Sql.Function(Name="pg_catalog.regdictionaryout", ServerSideOnly=true)]
		public static object? Regdictionaryout(object? par5749)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionaryrecv

		[Sql.Function(Name="pg_catalog.regdictionaryrecv", ServerSideOnly=true)]
		public static object? Regdictionaryrecv(object? par5751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regdictionarysend

		[Sql.Function(Name="pg_catalog.regdictionarysend", ServerSideOnly=true)]
		public static byte[]? Regdictionarysend(object? par5753)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqjoinsel

		[Sql.Function(Name="pg_catalog.regexeqjoinsel", ServerSideOnly=true)]
		public static double? Regexeqjoinsel(object? par5755, int? par5756, object? par5757, short? par5758, object? par5759)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexeqsel

		[Sql.Function(Name="pg_catalog.regexeqsel", ServerSideOnly=true)]
		public static double? Regexeqsel(object? par5761, int? par5762, object? par5763, int? par5764)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnejoinsel

		[Sql.Function(Name="pg_catalog.regexnejoinsel", ServerSideOnly=true)]
		public static double? Regexnejoinsel(object? par5766, int? par5767, object? par5768, short? par5769, object? par5770)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regexnesel

		[Sql.Function(Name="pg_catalog.regexnesel", ServerSideOnly=true)]
		public static double? Regexnesel(object? par5772, int? par5773, object? par5774, int? par5775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpReplace

		[Sql.Function(Name="pg_catalog.regexp_replace", ServerSideOnly=true)]
		public static string? RegexpReplace(string? par5786, string? par5787, string? par5788, string? par5789)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegexpSplitToArray

		[Sql.Function(Name="pg_catalog.regexp_split_to_array", ServerSideOnly=true)]
		public static object? RegexpSplitToArray(string? par5794, string? par5795, string? par5796)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacein

		[Sql.Function(Name="pg_catalog.regnamespacein", ServerSideOnly=true)]
		public static object? Regnamespacein(object? par5803)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespaceout

		[Sql.Function(Name="pg_catalog.regnamespaceout", ServerSideOnly=true)]
		public static object? Regnamespaceout(object? par5805)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacerecv

		[Sql.Function(Name="pg_catalog.regnamespacerecv", ServerSideOnly=true)]
		public static object? Regnamespacerecv(object? par5807)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regnamespacesend

		[Sql.Function(Name="pg_catalog.regnamespacesend", ServerSideOnly=true)]
		public static byte[]? Regnamespacesend(object? par5809)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorin

		[Sql.Function(Name="pg_catalog.regoperatorin", ServerSideOnly=true)]
		public static object? Regoperatorin(object? par5811)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorout

		[Sql.Function(Name="pg_catalog.regoperatorout", ServerSideOnly=true)]
		public static object? Regoperatorout(object? par5813)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorrecv

		[Sql.Function(Name="pg_catalog.regoperatorrecv", ServerSideOnly=true)]
		public static object? Regoperatorrecv(object? par5815)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperatorsend

		[Sql.Function(Name="pg_catalog.regoperatorsend", ServerSideOnly=true)]
		public static byte[]? Regoperatorsend(object? par5817)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperin

		[Sql.Function(Name="pg_catalog.regoperin", ServerSideOnly=true)]
		public static object? Regoperin(object? par5819)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperout

		[Sql.Function(Name="pg_catalog.regoperout", ServerSideOnly=true)]
		public static object? Regoperout(object? par5821)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regoperrecv

		[Sql.Function(Name="pg_catalog.regoperrecv", ServerSideOnly=true)]
		public static object? Regoperrecv(object? par5823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regopersend

		[Sql.Function(Name="pg_catalog.regopersend", ServerSideOnly=true)]
		public static byte[]? Regopersend(object? par5825)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurein

		[Sql.Function(Name="pg_catalog.regprocedurein", ServerSideOnly=true)]
		public static object? Regprocedurein(object? par5827)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedureout

		[Sql.Function(Name="pg_catalog.regprocedureout", ServerSideOnly=true)]
		public static object? Regprocedureout(object? par5829)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocedurerecv

		[Sql.Function(Name="pg_catalog.regprocedurerecv", ServerSideOnly=true)]
		public static object? Regprocedurerecv(object? par5831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regproceduresend

		[Sql.Function(Name="pg_catalog.regproceduresend", ServerSideOnly=true)]
		public static byte[]? Regproceduresend(object? par5833)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocin

		[Sql.Function(Name="pg_catalog.regprocin", ServerSideOnly=true)]
		public static object? Regprocin(object? par5835)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocout

		[Sql.Function(Name="pg_catalog.regprocout", ServerSideOnly=true)]
		public static object? Regprocout(object? par5837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocrecv

		[Sql.Function(Name="pg_catalog.regprocrecv", ServerSideOnly=true)]
		public static object? Regprocrecv(object? par5839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regprocsend

		[Sql.Function(Name="pg_catalog.regprocsend", ServerSideOnly=true)]
		public static byte[]? Regprocsend(object? par5841)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgx

		[Sql.Function(Name="pg_catalog.regr_avgx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5843, Expression<Func<TSource, double?>> par5844)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrAvgy

		[Sql.Function(Name="pg_catalog.regr_avgy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrAvgy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5846, Expression<Func<TSource, double?>> par5847)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrCount

		[Sql.Function(Name="pg_catalog.regr_count", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static long? RegrCount<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5849, Expression<Func<TSource, double?>> par5850)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrIntercept

		[Sql.Function(Name="pg_catalog.regr_intercept", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrIntercept<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5852, Expression<Func<TSource, double?>> par5853)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrR2

		[Sql.Function(Name="pg_catalog.regr_r2", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrR2<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5855, Expression<Func<TSource, double?>> par5856)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSlope

		[Sql.Function(Name="pg_catalog.regr_slope", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSlope<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5858, Expression<Func<TSource, double?>> par5859)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxx

		[Sql.Function(Name="pg_catalog.regr_sxx", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxx<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5861, Expression<Func<TSource, double?>> par5862)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSxy

		[Sql.Function(Name="pg_catalog.regr_sxy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSxy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5864, Expression<Func<TSource, double?>> par5865)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RegrSyy

		[Sql.Function(Name="pg_catalog.regr_syy", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static double? RegrSyy<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par5867, Expression<Func<TSource, double?>> par5868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolein

		[Sql.Function(Name="pg_catalog.regrolein", ServerSideOnly=true)]
		public static object? Regrolein(object? par5870)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regroleout

		[Sql.Function(Name="pg_catalog.regroleout", ServerSideOnly=true)]
		public static object? Regroleout(object? par5872)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolerecv

		[Sql.Function(Name="pg_catalog.regrolerecv", ServerSideOnly=true)]
		public static object? Regrolerecv(object? par5874)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regrolesend

		[Sql.Function(Name="pg_catalog.regrolesend", ServerSideOnly=true)]
		public static byte[]? Regrolesend(object? par5876)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypein

		[Sql.Function(Name="pg_catalog.regtypein", ServerSideOnly=true)]
		public static object? Regtypein(object? par5878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypeout

		[Sql.Function(Name="pg_catalog.regtypeout", ServerSideOnly=true)]
		public static object? Regtypeout(object? par5880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtyperecv

		[Sql.Function(Name="pg_catalog.regtyperecv", ServerSideOnly=true)]
		public static object? Regtyperecv(object? par5882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Regtypesend

		[Sql.Function(Name="pg_catalog.regtypesend", ServerSideOnly=true)]
		public static byte[]? Regtypesend(object? par5884)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltime

		[Sql.Function(Name="pg_catalog.reltime", ServerSideOnly=true)]
		public static object? Reltime(NpgsqlTimeSpan? par5886)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimeeq

		[Sql.Function(Name="pg_catalog.reltimeeq", ServerSideOnly=true)]
		public static bool? Reltimeeq(object? par5888, object? par5889)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimege

		[Sql.Function(Name="pg_catalog.reltimege", ServerSideOnly=true)]
		public static bool? Reltimege(object? par5891, object? par5892)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimegt

		[Sql.Function(Name="pg_catalog.reltimegt", ServerSideOnly=true)]
		public static bool? Reltimegt(object? par5894, object? par5895)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimein

		[Sql.Function(Name="pg_catalog.reltimein", ServerSideOnly=true)]
		public static object? Reltimein(object? par5897)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimele

		[Sql.Function(Name="pg_catalog.reltimele", ServerSideOnly=true)]
		public static bool? Reltimele(object? par5899, object? par5900)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimelt

		[Sql.Function(Name="pg_catalog.reltimelt", ServerSideOnly=true)]
		public static bool? Reltimelt(object? par5902, object? par5903)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimene

		[Sql.Function(Name="pg_catalog.reltimene", ServerSideOnly=true)]
		public static bool? Reltimene(object? par5905, object? par5906)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimeout

		[Sql.Function(Name="pg_catalog.reltimeout", ServerSideOnly=true)]
		public static object? Reltimeout(object? par5908)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimerecv

		[Sql.Function(Name="pg_catalog.reltimerecv", ServerSideOnly=true)]
		public static object? Reltimerecv(object? par5910)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reltimesend

		[Sql.Function(Name="pg_catalog.reltimesend", ServerSideOnly=true)]
		public static byte[]? Reltimesend(object? par5912)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Repeat

		[Sql.Function(Name="pg_catalog.repeat", ServerSideOnly=true)]
		public static string? Repeat(string? par5914, int? par5915)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Replace

		[Sql.Function(Name="pg_catalog.replace", ServerSideOnly=true)]
		public static string? Replace(string? par5917, string? par5918, string? par5919)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reverse

		[Sql.Function(Name="pg_catalog.reverse", ServerSideOnly=true)]
		public static string? Reverse(string? par5921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Reverse

		[Sql.Function(Name="public.reverse", ServerSideOnly=true)]
		public static string? Reverse0(string? par5923)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCascadeDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_del\"", ServerSideOnly=true)]
		public static object? RiFKeyCascadeDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCascadeUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_cascade_upd\"", ServerSideOnly=true)]
		public static object? RiFKeyCascadeUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckIns

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_ins\"", ServerSideOnly=true)]
		public static object? RiFKeyCheckIns()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyCheckUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_check_upd\"", ServerSideOnly=true)]
		public static object? RiFKeyCheckUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_del\"", ServerSideOnly=true)]
		public static object? RiFKeyNoactionDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyNoactionUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_noaction_upd\"", ServerSideOnly=true)]
		public static object? RiFKeyNoactionUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_del\"", ServerSideOnly=true)]
		public static object? RiFKeyRestrictDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeyRestrictUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_restrict_upd\"", ServerSideOnly=true)]
		public static object? RiFKeyRestrictUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_del\"", ServerSideOnly=true)]
		public static object? RiFKeySetdefaultDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetdefaultUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setdefault_upd\"", ServerSideOnly=true)]
		public static object? RiFKeySetdefaultUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullDel

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_del\"", ServerSideOnly=true)]
		public static object? RiFKeySetnullDel()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RiFKeySetnullUpd

		[Sql.Function(Name="pg_catalog.\"RI_FKey_setnull_upd\"", ServerSideOnly=true)]
		public static object? RiFKeySetnullUpd()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Right

		[Sql.Function(Name="pg_catalog.right", ServerSideOnly=true)]
		public static string? Right(string? par5937, int? par5938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Round

		[Sql.Function(Name="pg_catalog.round", ServerSideOnly=true)]
		public static decimal? Round(decimal? par5945)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowNumber

		[Sql.Function(Name="pg_catalog.row_number", ServerSideOnly=true)]
		public static long? RowNumber()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowSecurityActive

		[Sql.Function(Name="pg_catalog.row_security_active", ServerSideOnly=true)]
		public static bool? RowSecurityActive(string? par5950)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region RowToJson

		[Sql.Function(Name="pg_catalog.row_to_json", ServerSideOnly=true)]
		public static string? RowToJson(object? par5954, bool? par5955)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rpad

		[Sql.Function(Name="pg_catalog.rpad", ServerSideOnly=true)]
		public static string? Rpad(string? par5961, int? par5962)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Rtrim

		[Sql.Function(Name="pg_catalog.rtrim", ServerSideOnly=true)]
		public static string? Rtrim(string? par5967)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtjoinsel

		[Sql.Function(Name="pg_catalog.scalargtjoinsel", ServerSideOnly=true)]
		public static double? Scalargtjoinsel(object? par5969, int? par5970, object? par5971, short? par5972, object? par5973)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalargtsel

		[Sql.Function(Name="pg_catalog.scalargtsel", ServerSideOnly=true)]
		public static double? Scalargtsel(object? par5975, int? par5976, object? par5977, int? par5978)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltjoinsel

		[Sql.Function(Name="pg_catalog.scalarltjoinsel", ServerSideOnly=true)]
		public static double? Scalarltjoinsel(object? par5980, int? par5981, object? par5982, short? par5983, object? par5984)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Scalarltsel

		[Sql.Function(Name="pg_catalog.scalarltsel", ServerSideOnly=true)]
		public static double? Scalarltsel(object? par5986, int? par5987, object? par5988, int? par5989)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXml

		[Sql.Function(Name="pg_catalog.schema_to_xml", ServerSideOnly=true)]
		public static string? SchemaToXml(string? schema, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string? SchemaToXmlAndXmlschema(string? schema, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SchemaToXmlschema

		[Sql.Function(Name="pg_catalog.schema_to_xmlschema", ServerSideOnly=true)]
		public static string? SchemaToXmlschema(string? schema, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SessionUser

		[Sql.Function(Name="pg_catalog.session_user", ServerSideOnly=true)]
		public static string? SessionUser()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetBit

		[Sql.Function(Name="pg_catalog.set_bit", ServerSideOnly=true)]
		public static byte[]? SetBit(byte[]? par5999, int? par6000, int? par6001)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetByte

		[Sql.Function(Name="pg_catalog.set_byte", ServerSideOnly=true)]
		public static byte[]? SetByte(byte[]? par6003, int? par6004, int? par6005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetConfig

		[Sql.Function(Name="pg_catalog.set_config", ServerSideOnly=true)]
		public static string? SetConfig(string? par6007, string? par6008, bool? par6009)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SetMasklen

		[Sql.Function(Name="pg_catalog.set_masklen", ServerSideOnly=true)]
		public static NpgsqlInet? SetMasklen(NpgsqlInet? par6014, int? par6015)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setseed

		[Sql.Function(Name="pg_catalog.setseed", ServerSideOnly=true)]
		public static object? Setseed(double? par6016)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setval

		[Sql.Function(Name="pg_catalog.setval", ServerSideOnly=true)]
		public static long? Setval(object? par6021, long? par6022, bool? par6023)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Setweight

		[Sql.Function(Name="pg_catalog.setweight", ServerSideOnly=true)]
		public static object? Setweight(object? par6025, object? par6026)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellIn

		[Sql.Function(Name="pg_catalog.shell_in", ServerSideOnly=true)]
		public static object? ShellIn(object? par6028)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShellOut

		[Sql.Function(Name="pg_catalog.shell_out", ServerSideOnly=true)]
		public static object? ShellOut(object? par6030)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToEucJis2004

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_euc_jis_2004", ServerSideOnly=true)]
		public static object? ShiftJis2004ToEucJis2004(int? par6031, int? par6032, object? par6033, object? par6034, int? par6035)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShiftJis2004ToUtf8

		[Sql.Function(Name="pg_catalog.shift_jis_2004_to_utf8", ServerSideOnly=true)]
		public static object? ShiftJis2004ToUtf8(int? par6036, int? par6037, object? par6038, object? par6039, int? par6040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ShobjDescription

		[Sql.Function(Name="pg_catalog.shobj_description", ServerSideOnly=true)]
		public static string? ShobjDescription(int? par6042, string? par6043)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sign

		[Sql.Function(Name="pg_catalog.sign", ServerSideOnly=true)]
		public static double? Sign(double? par6047)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SimilarEscape

		[Sql.Function(Name="pg_catalog.similar_escape", ServerSideOnly=true)]
		public static string? SimilarEscape(string? par6049, string? par6050)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sin

		[Sql.Function(Name="pg_catalog.sin", ServerSideOnly=true)]
		public static double? Sin(double? par6052)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToEucJp

		[Sql.Function(Name="pg_catalog.sjis_to_euc_jp", ServerSideOnly=true)]
		public static object? SjisToEucJp(int? par6053, int? par6054, object? par6055, object? par6056, int? par6057)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToMic

		[Sql.Function(Name="pg_catalog.sjis_to_mic", ServerSideOnly=true)]
		public static object? SjisToMic(int? par6058, int? par6059, object? par6060, object? par6061, int? par6062)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SjisToUtf8

		[Sql.Function(Name="pg_catalog.sjis_to_utf8", ServerSideOnly=true)]
		public static object? SjisToUtf8(int? par6063, int? par6064, object? par6065, object? par6066, int? par6067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Slope

		[Sql.Function(Name="pg_catalog.slope", ServerSideOnly=true)]
		public static double? Slope(NpgsqlPoint? par6069, NpgsqlPoint? par6070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgreq

		[Sql.Function(Name="pg_catalog.smgreq", ServerSideOnly=true)]
		public static bool? Smgreq(object? par6072, object? par6073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrin

		[Sql.Function(Name="pg_catalog.smgrin", ServerSideOnly=true)]
		public static object? Smgrin(object? par6075)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrne

		[Sql.Function(Name="pg_catalog.smgrne", ServerSideOnly=true)]
		public static bool? Smgrne(object? par6077, object? par6078)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Smgrout

		[Sql.Function(Name="pg_catalog.smgrout", ServerSideOnly=true)]
		public static object? Smgrout(object? par6080)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdChoose

		[Sql.Function(Name="pg_catalog.spg_kd_choose", ServerSideOnly=true)]
		public static object? SpgKdChoose(object? par6081, object? par6082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdConfig

		[Sql.Function(Name="pg_catalog.spg_kd_config", ServerSideOnly=true)]
		public static object? SpgKdConfig(object? par6083, object? par6084)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_kd_inner_consistent", ServerSideOnly=true)]
		public static object? SpgKdInnerConsistent(object? par6085, object? par6086)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgKdPicksplit

		[Sql.Function(Name="pg_catalog.spg_kd_picksplit", ServerSideOnly=true)]
		public static object? SpgKdPicksplit(object? par6087, object? par6088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadChoose

		[Sql.Function(Name="pg_catalog.spg_quad_choose", ServerSideOnly=true)]
		public static object? SpgQuadChoose(object? par6089, object? par6090)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadConfig

		[Sql.Function(Name="pg_catalog.spg_quad_config", ServerSideOnly=true)]
		public static object? SpgQuadConfig(object? par6091, object? par6092)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_inner_consistent", ServerSideOnly=true)]
		public static object? SpgQuadInnerConsistent(object? par6093, object? par6094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgQuadLeafConsistent(object? par6096, object? par6097)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_quad_picksplit", ServerSideOnly=true)]
		public static object? SpgQuadPicksplit(object? par6098, object? par6099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadChoose

		[Sql.Function(Name="pg_catalog.spg_range_quad_choose", ServerSideOnly=true)]
		public static object? SpgRangeQuadChoose(object? par6100, object? par6101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadConfig

		[Sql.Function(Name="pg_catalog.spg_range_quad_config", ServerSideOnly=true)]
		public static object? SpgRangeQuadConfig(object? par6102, object? par6103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_inner_consistent", ServerSideOnly=true)]
		public static object? SpgRangeQuadInnerConsistent(object? par6104, object? par6105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_range_quad_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgRangeQuadLeafConsistent(object? par6107, object? par6108)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgRangeQuadPicksplit

		[Sql.Function(Name="pg_catalog.spg_range_quad_picksplit", ServerSideOnly=true)]
		public static object? SpgRangeQuadPicksplit(object? par6109, object? par6110)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextChoose

		[Sql.Function(Name="pg_catalog.spg_text_choose", ServerSideOnly=true)]
		public static object? SpgTextChoose(object? par6111, object? par6112)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextConfig

		[Sql.Function(Name="pg_catalog.spg_text_config", ServerSideOnly=true)]
		public static object? SpgTextConfig(object? par6113, object? par6114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextInnerConsistent

		[Sql.Function(Name="pg_catalog.spg_text_inner_consistent", ServerSideOnly=true)]
		public static object? SpgTextInnerConsistent(object? par6115, object? par6116)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextLeafConsistent

		[Sql.Function(Name="pg_catalog.spg_text_leaf_consistent", ServerSideOnly=true)]
		public static bool? SpgTextLeafConsistent(object? par6118, object? par6119)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SpgTextPicksplit

		[Sql.Function(Name="pg_catalog.spg_text_picksplit", ServerSideOnly=true)]
		public static object? SpgTextPicksplit(object? par6120, object? par6121)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgbeginscan

		[Sql.Function(Name="pg_catalog.spgbeginscan", ServerSideOnly=true)]
		public static object? Spgbeginscan(object? par6123, object? par6124, object? par6125)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgbuild

		[Sql.Function(Name="pg_catalog.spgbuild", ServerSideOnly=true)]
		public static object? Spgbuild(object? par6127, object? par6128, object? par6129)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgbuildempty

		[Sql.Function(Name="pg_catalog.spgbuildempty", ServerSideOnly=true)]
		public static object? Spgbuildempty(object? par6130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgbulkdelete

		[Sql.Function(Name="pg_catalog.spgbulkdelete", ServerSideOnly=true)]
		public static object? Spgbulkdelete(object? par6132, object? par6133, object? par6134, object? par6135)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgcanreturn

		[Sql.Function(Name="pg_catalog.spgcanreturn", ServerSideOnly=true)]
		public static bool? Spgcanreturn(object? par6137, int? par6138)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgcostestimate

		[Sql.Function(Name="pg_catalog.spgcostestimate", ServerSideOnly=true)]
		public static object? Spgcostestimate(object? par6139, object? par6140, object? par6141, object? par6142, object? par6143, object? par6144, object? par6145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgendscan

		[Sql.Function(Name="pg_catalog.spgendscan", ServerSideOnly=true)]
		public static object? Spgendscan(object? par6146)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spggetbitmap

		[Sql.Function(Name="pg_catalog.spggetbitmap", ServerSideOnly=true)]
		public static long? Spggetbitmap(object? par6148, object? par6149)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spggettuple

		[Sql.Function(Name="pg_catalog.spggettuple", ServerSideOnly=true)]
		public static bool? Spggettuple(object? par6151, object? par6152)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spginsert

		[Sql.Function(Name="pg_catalog.spginsert", ServerSideOnly=true)]
		public static bool? Spginsert(object? par6154, object? par6155, object? par6156, object? par6157, object? par6158, object? par6159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgmarkpos

		[Sql.Function(Name="pg_catalog.spgmarkpos", ServerSideOnly=true)]
		public static object? Spgmarkpos(object? par6160)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgoptions

		[Sql.Function(Name="pg_catalog.spgoptions", ServerSideOnly=true)]
		public static byte[]? Spgoptions(object? par6162, bool? par6163)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgrescan

		[Sql.Function(Name="pg_catalog.spgrescan", ServerSideOnly=true)]
		public static object? Spgrescan(object? par6164, object? par6165, object? par6166, object? par6167, object? par6168)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgrestrpos

		[Sql.Function(Name="pg_catalog.spgrestrpos", ServerSideOnly=true)]
		public static object? Spgrestrpos(object? par6169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Spgvacuumcleanup

		[Sql.Function(Name="pg_catalog.spgvacuumcleanup", ServerSideOnly=true)]
		public static object? Spgvacuumcleanup(object? par6171, object? par6172)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SplitPart

		[Sql.Function(Name="pg_catalog.split_part", ServerSideOnly=true)]
		public static string? SplitPart(string? par6174, string? par6175, int? par6176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sqrt

		[Sql.Function(Name="pg_catalog.sqrt", ServerSideOnly=true)]
		public static decimal? Sqrt(decimal? par6180)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StatementTimestamp

		[Sql.Function(Name="pg_catalog.statement_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? StatementTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Stddev

		[Sql.Function(Name="pg_catalog.stddev", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Stddev<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevPop

		[Sql.Function(Name="pg_catalog.stddev_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6205)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StddevSamp

		[Sql.Function(Name="pg_catalog.stddev_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? StddevSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAgg

		[Sql.Function(Name="pg_catalog.string_agg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0, 1 })]
		public static byte[]? StringAgg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, byte[]?>> par6222, Expression<Func<TSource, byte[]?>> par6223)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggFinalfn

		[Sql.Function(Name="pg_catalog.string_agg_finalfn", ServerSideOnly=true)]
		public static string? StringAggFinalfn(object? par6225)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringAggTransfn

		[Sql.Function(Name="pg_catalog.string_agg_transfn", ServerSideOnly=true)]
		public static object? StringAggTransfn(object? par6227, string? par6228, string? par6229)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region StringToArray

		[Sql.Function(Name="pg_catalog.string_to_array", ServerSideOnly=true)]
		public static object? StringToArray(string? par6235, string? par6236)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strip

		[Sql.Function(Name="pg_catalog.strip", ServerSideOnly=true)]
		public static object? Strip(object? par6238)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Strpos

		[Sql.Function(Name="pg_catalog.strpos", ServerSideOnly=true)]
		public static int? Strpos(string? par6240, string? par6241)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substr

		[Sql.Function(Name="pg_catalog.substr", ServerSideOnly=true)]
		public static string? Substr(string? par6254, int? par6255)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Substring

		[Sql.Function(Name="pg_catalog.substring", ServerSideOnly=true)]
		public static string? Substring(string? par6282, int? par6283)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Sum

		[Sql.Function(Name="pg_catalog.sum", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Sum<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par6299)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region SuppressRedundantUpdatesTrigger

		[Sql.Function(Name="pg_catalog.suppress_redundant_updates_trigger", ServerSideOnly=true)]
		public static object? SuppressRedundantUpdatesTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region System

		[Sql.Function(Name="pg_catalog.system", ServerSideOnly=true)]
		public static object? System(object? par6302)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXml

		[Sql.Function(Name="pg_catalog.table_to_xml", ServerSideOnly=true)]
		public static string? TableToXml(object? tbl, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlAndXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xml_and_xmlschema", ServerSideOnly=true)]
		public static string? TableToXmlAndXmlschema(object? tbl, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TableToXmlschema

		[Sql.Function(Name="pg_catalog.table_to_xmlschema", ServerSideOnly=true)]
		public static string? TableToXmlschema(object? tbl, bool? nulls, bool? tableforest, string? targetns)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tan

		[Sql.Function(Name="pg_catalog.tan", ServerSideOnly=true)]
		public static double? Tan(double? par6307)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestAvg

		[Sql.Function(Name="public.test_avg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par6309)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestFunctionParameters

		[Sql.Function(Name="public.\"TestFunctionParameters\"", ServerSideOnly=true)]
		public static TestFunctionParametersResult? TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestScalarFunction

		[Sql.Function(Name="public.\"TestScalarFunction\"", ServerSideOnly=true)]
		public static string? TestScalarFunction(int? param)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TestSingleOutParameterFunction

		[Sql.Function(Name="public.\"TestSingleOutParameterFunction\"", ServerSideOnly=true)]
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Text

		[Sql.Function(Name="pg_catalog.text", ServerSideOnly=true)]
		public static string? Text(object? par6322)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGe

		[Sql.Function(Name="pg_catalog.text_ge", ServerSideOnly=true)]
		public static bool? TextGe(string? par6324, string? par6325)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextGt

		[Sql.Function(Name="pg_catalog.text_gt", ServerSideOnly=true)]
		public static bool? TextGt(string? par6327, string? par6328)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLarger

		[Sql.Function(Name="pg_catalog.text_larger", ServerSideOnly=true)]
		public static string? TextLarger(string? par6330, string? par6331)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLe

		[Sql.Function(Name="pg_catalog.text_le", ServerSideOnly=true)]
		public static bool? TextLe(string? par6333, string? par6334)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextLt

		[Sql.Function(Name="pg_catalog.text_lt", ServerSideOnly=true)]
		public static bool? TextLt(string? par6336, string? par6337)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGe

		[Sql.Function(Name="pg_catalog.text_pattern_ge", ServerSideOnly=true)]
		public static bool? TextPatternGe(string? par6339, string? par6340)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternGt

		[Sql.Function(Name="pg_catalog.text_pattern_gt", ServerSideOnly=true)]
		public static bool? TextPatternGt(string? par6342, string? par6343)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLe

		[Sql.Function(Name="pg_catalog.text_pattern_le", ServerSideOnly=true)]
		public static bool? TextPatternLe(string? par6345, string? par6346)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextPatternLt

		[Sql.Function(Name="pg_catalog.text_pattern_lt", ServerSideOnly=true)]
		public static bool? TextPatternLt(string? par6348, string? par6349)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TextSmaller

		[Sql.Function(Name="pg_catalog.text_smaller", ServerSideOnly=true)]
		public static string? TextSmaller(string? par6351, string? par6352)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textanycat

		[Sql.Function(Name="pg_catalog.textanycat", ServerSideOnly=true)]
		public static string? Textanycat(string? par6354, object? par6355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textcat

		[Sql.Function(Name="pg_catalog.textcat", ServerSideOnly=true)]
		public static string? Textcat(string? par6357, string? par6358)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texteq

		[Sql.Function(Name="pg_catalog.texteq", ServerSideOnly=true)]
		public static bool? Texteq(string? par6360, string? par6361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticlike

		[Sql.Function(Name="pg_catalog.texticlike", ServerSideOnly=true)]
		public static bool? Texticlike(string? par6363, string? par6364)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticnlike

		[Sql.Function(Name="pg_catalog.texticnlike", ServerSideOnly=true)]
		public static bool? Texticnlike(string? par6366, string? par6367)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexeq

		[Sql.Function(Name="pg_catalog.texticregexeq", ServerSideOnly=true)]
		public static bool? Texticregexeq(string? par6369, string? par6370)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Texticregexne

		[Sql.Function(Name="pg_catalog.texticregexne", ServerSideOnly=true)]
		public static bool? Texticregexne(string? par6372, string? par6373)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textin

		[Sql.Function(Name="pg_catalog.textin", ServerSideOnly=true)]
		public static string? Textin(object? par6375)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlen

		[Sql.Function(Name="pg_catalog.textlen", ServerSideOnly=true)]
		public static int? Textlen(string? par6377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textlike

		[Sql.Function(Name="pg_catalog.textlike", ServerSideOnly=true)]
		public static bool? Textlike(string? par6379, string? par6380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textne

		[Sql.Function(Name="pg_catalog.textne", ServerSideOnly=true)]
		public static bool? Textne(string? par6382, string? par6383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textnlike

		[Sql.Function(Name="pg_catalog.textnlike", ServerSideOnly=true)]
		public static bool? Textnlike(string? par6385, string? par6386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textout

		[Sql.Function(Name="pg_catalog.textout", ServerSideOnly=true)]
		public static object? Textout(string? par6388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textrecv

		[Sql.Function(Name="pg_catalog.textrecv", ServerSideOnly=true)]
		public static string? Textrecv(object? par6390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexeq

		[Sql.Function(Name="pg_catalog.textregexeq", ServerSideOnly=true)]
		public static bool? Textregexeq(string? par6392, string? par6393)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textregexne

		[Sql.Function(Name="pg_catalog.textregexne", ServerSideOnly=true)]
		public static bool? Textregexne(string? par6395, string? par6396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Textsend

		[Sql.Function(Name="pg_catalog.textsend", ServerSideOnly=true)]
		public static byte[]? Textsend(string? par6398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusInit

		[Sql.Function(Name="pg_catalog.thesaurus_init", ServerSideOnly=true)]
		public static object? ThesaurusInit(object? par6400)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ThesaurusLexize

		[Sql.Function(Name="pg_catalog.thesaurus_lexize", ServerSideOnly=true)]
		public static object? ThesaurusLexize(object? par6402, object? par6403, object? par6404, object? par6405)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tideq

		[Sql.Function(Name="pg_catalog.tideq", ServerSideOnly=true)]
		public static bool? Tideq(object? par6407, object? par6408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidge

		[Sql.Function(Name="pg_catalog.tidge", ServerSideOnly=true)]
		public static bool? Tidge(object? par6410, object? par6411)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidgt

		[Sql.Function(Name="pg_catalog.tidgt", ServerSideOnly=true)]
		public static bool? Tidgt(object? par6413, object? par6414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidin

		[Sql.Function(Name="pg_catalog.tidin", ServerSideOnly=true)]
		public static object? Tidin(object? par6416)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlarger

		[Sql.Function(Name="pg_catalog.tidlarger", ServerSideOnly=true)]
		public static object? Tidlarger(object? par6418, object? par6419)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidle

		[Sql.Function(Name="pg_catalog.tidle", ServerSideOnly=true)]
		public static bool? Tidle(object? par6421, object? par6422)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidlt

		[Sql.Function(Name="pg_catalog.tidlt", ServerSideOnly=true)]
		public static bool? Tidlt(object? par6424, object? par6425)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidne

		[Sql.Function(Name="pg_catalog.tidne", ServerSideOnly=true)]
		public static bool? Tidne(object? par6427, object? par6428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidout

		[Sql.Function(Name="pg_catalog.tidout", ServerSideOnly=true)]
		public static object? Tidout(object? par6430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidrecv

		[Sql.Function(Name="pg_catalog.tidrecv", ServerSideOnly=true)]
		public static object? Tidrecv(object? par6432)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsend

		[Sql.Function(Name="pg_catalog.tidsend", ServerSideOnly=true)]
		public static byte[]? Tidsend(object? par6434)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tidsmaller

		[Sql.Function(Name="pg_catalog.tidsmaller", ServerSideOnly=true)]
		public static object? Tidsmaller(object? par6436, object? par6437)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Time

		[Sql.Function(Name="pg_catalog.time", ServerSideOnly=true)]
		public static TimeSpan? Time(DateTimeOffset? par6450)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeCmp

		[Sql.Function(Name="pg_catalog.time_cmp", ServerSideOnly=true)]
		public static int? TimeCmp(TimeSpan? par6452, TimeSpan? par6453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeEq

		[Sql.Function(Name="pg_catalog.time_eq", ServerSideOnly=true)]
		public static bool? TimeEq(TimeSpan? par6455, TimeSpan? par6456)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGe

		[Sql.Function(Name="pg_catalog.time_ge", ServerSideOnly=true)]
		public static bool? TimeGe(TimeSpan? par6458, TimeSpan? par6459)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeGt

		[Sql.Function(Name="pg_catalog.time_gt", ServerSideOnly=true)]
		public static bool? TimeGt(TimeSpan? par6461, TimeSpan? par6462)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeHash

		[Sql.Function(Name="pg_catalog.time_hash", ServerSideOnly=true)]
		public static int? TimeHash(TimeSpan? par6464)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeIn

		[Sql.Function(Name="pg_catalog.time_in", ServerSideOnly=true)]
		public static TimeSpan? TimeIn(object? par6466, int? par6467, int? par6468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLarger

		[Sql.Function(Name="pg_catalog.time_larger", ServerSideOnly=true)]
		public static TimeSpan? TimeLarger(TimeSpan? par6470, TimeSpan? par6471)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLe

		[Sql.Function(Name="pg_catalog.time_le", ServerSideOnly=true)]
		public static bool? TimeLe(TimeSpan? par6473, TimeSpan? par6474)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeLt

		[Sql.Function(Name="pg_catalog.time_lt", ServerSideOnly=true)]
		public static bool? TimeLt(TimeSpan? par6476, TimeSpan? par6477)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiInterval

		[Sql.Function(Name="pg_catalog.time_mi_interval", ServerSideOnly=true)]
		public static TimeSpan? TimeMiInterval(TimeSpan? par6479, NpgsqlTimeSpan? par6480)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeMiTime

		[Sql.Function(Name="pg_catalog.time_mi_time", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimeMiTime(TimeSpan? par6482, TimeSpan? par6483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeNe

		[Sql.Function(Name="pg_catalog.time_ne", ServerSideOnly=true)]
		public static bool? TimeNe(TimeSpan? par6485, TimeSpan? par6486)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeOut

		[Sql.Function(Name="pg_catalog.time_out", ServerSideOnly=true)]
		public static object? TimeOut(TimeSpan? par6488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimePlInterval

		[Sql.Function(Name="pg_catalog.time_pl_interval", ServerSideOnly=true)]
		public static TimeSpan? TimePlInterval(TimeSpan? par6490, NpgsqlTimeSpan? par6491)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeRecv

		[Sql.Function(Name="pg_catalog.time_recv", ServerSideOnly=true)]
		public static TimeSpan? TimeRecv(object? par6493, int? par6494, int? par6495)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSend

		[Sql.Function(Name="pg_catalog.time_send", ServerSideOnly=true)]
		public static byte[]? TimeSend(TimeSpan? par6497)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeSmaller

		[Sql.Function(Name="pg_catalog.time_smaller", ServerSideOnly=true)]
		public static TimeSpan? TimeSmaller(TimeSpan? par6499, TimeSpan? par6500)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimeTransform

		[Sql.Function(Name="pg_catalog.time_transform", ServerSideOnly=true)]
		public static object? TimeTransform(object? par6502)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimedatePl

		[Sql.Function(Name="pg_catalog.timedate_pl", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimedatePl(TimeSpan? par6504, NpgsqlDate? par6505)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timemi

		[Sql.Function(Name="pg_catalog.timemi", ServerSideOnly=true)]
		public static object? Timemi(object? par6507, object? par6508)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timenow

		[Sql.Function(Name="pg_catalog.timenow", ServerSideOnly=true)]
		public static object? Timenow()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timeofday

		[Sql.Function(Name="pg_catalog.timeofday", ServerSideOnly=true)]
		public static string? Timeofday()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timepl

		[Sql.Function(Name="pg_catalog.timepl", ServerSideOnly=true)]
		public static object? Timepl(object? par6512, object? par6513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamp

		[Sql.Function(Name="pg_catalog.timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? Timestamp(NpgsqlDateTime? par6525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmp

		[Sql.Function(Name="pg_catalog.timestamp_cmp", ServerSideOnly=true)]
		public static int? TimestampCmp(NpgsqlDateTime? par6527, NpgsqlDateTime? par6528)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpDate

		[Sql.Function(Name="pg_catalog.timestamp_cmp_date", ServerSideOnly=true)]
		public static int? TimestampCmpDate(NpgsqlDateTime? par6530, NpgsqlDate? par6531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampCmpTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_cmp_timestamptz", ServerSideOnly=true)]
		public static int? TimestampCmpTimestamptz(NpgsqlDateTime? par6533, NpgsqlDateTime? par6534)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEq

		[Sql.Function(Name="pg_catalog.timestamp_eq", ServerSideOnly=true)]
		public static bool? TimestampEq(NpgsqlDateTime? par6536, NpgsqlDateTime? par6537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqDate

		[Sql.Function(Name="pg_catalog.timestamp_eq_date", ServerSideOnly=true)]
		public static bool? TimestampEqDate(NpgsqlDateTime? par6539, NpgsqlDate? par6540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampEqTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_eq_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampEqTimestamptz(NpgsqlDateTime? par6542, NpgsqlDateTime? par6543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGe

		[Sql.Function(Name="pg_catalog.timestamp_ge", ServerSideOnly=true)]
		public static bool? TimestampGe(NpgsqlDateTime? par6545, NpgsqlDateTime? par6546)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeDate

		[Sql.Function(Name="pg_catalog.timestamp_ge_date", ServerSideOnly=true)]
		public static bool? TimestampGeDate(NpgsqlDateTime? par6548, NpgsqlDate? par6549)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ge_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGeTimestamptz(NpgsqlDateTime? par6551, NpgsqlDateTime? par6552)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGt

		[Sql.Function(Name="pg_catalog.timestamp_gt", ServerSideOnly=true)]
		public static bool? TimestampGt(NpgsqlDateTime? par6554, NpgsqlDateTime? par6555)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtDate

		[Sql.Function(Name="pg_catalog.timestamp_gt_date", ServerSideOnly=true)]
		public static bool? TimestampGtDate(NpgsqlDateTime? par6557, NpgsqlDate? par6558)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampGtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_gt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampGtTimestamptz(NpgsqlDateTime? par6560, NpgsqlDateTime? par6561)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampHash

		[Sql.Function(Name="pg_catalog.timestamp_hash", ServerSideOnly=true)]
		public static int? TimestampHash(NpgsqlDateTime? par6563)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampIn

		[Sql.Function(Name="pg_catalog.timestamp_in", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampIn(object? par6565, int? par6566, int? par6567)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampIzoneTransform

		[Sql.Function(Name="pg_catalog.timestamp_izone_transform", ServerSideOnly=true)]
		public static object? TimestampIzoneTransform(object? par6569)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLarger

		[Sql.Function(Name="pg_catalog.timestamp_larger", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampLarger(NpgsqlDateTime? par6571, NpgsqlDateTime? par6572)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLe

		[Sql.Function(Name="pg_catalog.timestamp_le", ServerSideOnly=true)]
		public static bool? TimestampLe(NpgsqlDateTime? par6574, NpgsqlDateTime? par6575)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeDate

		[Sql.Function(Name="pg_catalog.timestamp_le_date", ServerSideOnly=true)]
		public static bool? TimestampLeDate(NpgsqlDateTime? par6577, NpgsqlDate? par6578)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_le_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLeTimestamptz(NpgsqlDateTime? par6580, NpgsqlDateTime? par6581)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLt

		[Sql.Function(Name="pg_catalog.timestamp_lt", ServerSideOnly=true)]
		public static bool? TimestampLt(NpgsqlDateTime? par6583, NpgsqlDateTime? par6584)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtDate

		[Sql.Function(Name="pg_catalog.timestamp_lt_date", ServerSideOnly=true)]
		public static bool? TimestampLtDate(NpgsqlDateTime? par6586, NpgsqlDate? par6587)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampLtTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_lt_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampLtTimestamptz(NpgsqlDateTime? par6589, NpgsqlDateTime? par6590)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMi

		[Sql.Function(Name="pg_catalog.timestamp_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestampMi(NpgsqlDateTime? par6592, NpgsqlDateTime? par6593)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampMiInterval

		[Sql.Function(Name="pg_catalog.timestamp_mi_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampMiInterval(NpgsqlDateTime? par6595, NpgsqlTimeSpan? par6596)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNe

		[Sql.Function(Name="pg_catalog.timestamp_ne", ServerSideOnly=true)]
		public static bool? TimestampNe(NpgsqlDateTime? par6598, NpgsqlDateTime? par6599)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeDate

		[Sql.Function(Name="pg_catalog.timestamp_ne_date", ServerSideOnly=true)]
		public static bool? TimestampNeDate(NpgsqlDateTime? par6601, NpgsqlDate? par6602)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampNeTimestamptz

		[Sql.Function(Name="pg_catalog.timestamp_ne_timestamptz", ServerSideOnly=true)]
		public static bool? TimestampNeTimestamptz(NpgsqlDateTime? par6604, NpgsqlDateTime? par6605)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampOut

		[Sql.Function(Name="pg_catalog.timestamp_out", ServerSideOnly=true)]
		public static object? TimestampOut(NpgsqlDateTime? par6607)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampPlInterval

		[Sql.Function(Name="pg_catalog.timestamp_pl_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampPlInterval(NpgsqlDateTime? par6609, NpgsqlTimeSpan? par6610)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampRecv

		[Sql.Function(Name="pg_catalog.timestamp_recv", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampRecv(object? par6612, int? par6613, int? par6614)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSend

		[Sql.Function(Name="pg_catalog.timestamp_send", ServerSideOnly=true)]
		public static byte[]? TimestampSend(NpgsqlDateTime? par6616)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSmaller

		[Sql.Function(Name="pg_catalog.timestamp_smaller", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestampSmaller(NpgsqlDateTime? par6618, NpgsqlDateTime? par6619)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampSortsupport

		[Sql.Function(Name="pg_catalog.timestamp_sortsupport", ServerSideOnly=true)]
		public static object? TimestampSortsupport(object? par6620)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampTransform

		[Sql.Function(Name="pg_catalog.timestamp_transform", ServerSideOnly=true)]
		public static object? TimestampTransform(object? par6622)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestampZoneTransform

		[Sql.Function(Name="pg_catalog.timestamp_zone_transform", ServerSideOnly=true)]
		public static object? TimestampZoneTransform(object? par6624)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodin

		[Sql.Function(Name="pg_catalog.timestamptypmodin", ServerSideOnly=true)]
		public static int? Timestamptypmodin(object? par6626)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptypmodout

		[Sql.Function(Name="pg_catalog.timestamptypmodout", ServerSideOnly=true)]
		public static object? Timestamptypmodout(int? par6628)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptz

		[Sql.Function(Name="pg_catalog.timestamptz", ServerSideOnly=true)]
		public static NpgsqlDateTime? Timestamptz(NpgsqlDateTime? par6643)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp", ServerSideOnly=true)]
		public static int? TimestamptzCmp(NpgsqlDateTime? par6645, NpgsqlDateTime? par6646)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpDate

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_date", ServerSideOnly=true)]
		public static int? TimestamptzCmpDate(NpgsqlDateTime? par6648, NpgsqlDate? par6649)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzCmpTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_cmp_timestamp", ServerSideOnly=true)]
		public static int? TimestamptzCmpTimestamp(NpgsqlDateTime? par6651, NpgsqlDateTime? par6652)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEq

		[Sql.Function(Name="pg_catalog.timestamptz_eq", ServerSideOnly=true)]
		public static bool? TimestamptzEq(NpgsqlDateTime? par6654, NpgsqlDateTime? par6655)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqDate

		[Sql.Function(Name="pg_catalog.timestamptz_eq_date", ServerSideOnly=true)]
		public static bool? TimestamptzEqDate(NpgsqlDateTime? par6657, NpgsqlDate? par6658)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzEqTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_eq_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzEqTimestamp(NpgsqlDateTime? par6660, NpgsqlDateTime? par6661)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGe

		[Sql.Function(Name="pg_catalog.timestamptz_ge", ServerSideOnly=true)]
		public static bool? TimestamptzGe(NpgsqlDateTime? par6663, NpgsqlDateTime? par6664)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ge_date", ServerSideOnly=true)]
		public static bool? TimestamptzGeDate(NpgsqlDateTime? par6666, NpgsqlDate? par6667)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ge_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGeTimestamp(NpgsqlDateTime? par6669, NpgsqlDateTime? par6670)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGt

		[Sql.Function(Name="pg_catalog.timestamptz_gt", ServerSideOnly=true)]
		public static bool? TimestamptzGt(NpgsqlDateTime? par6672, NpgsqlDateTime? par6673)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtDate

		[Sql.Function(Name="pg_catalog.timestamptz_gt_date", ServerSideOnly=true)]
		public static bool? TimestamptzGtDate(NpgsqlDateTime? par6675, NpgsqlDate? par6676)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzGtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_gt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzGtTimestamp(NpgsqlDateTime? par6678, NpgsqlDateTime? par6679)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzIn

		[Sql.Function(Name="pg_catalog.timestamptz_in", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzIn(object? par6681, int? par6682, int? par6683)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLarger

		[Sql.Function(Name="pg_catalog.timestamptz_larger", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzLarger(NpgsqlDateTime? par6685, NpgsqlDateTime? par6686)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLe

		[Sql.Function(Name="pg_catalog.timestamptz_le", ServerSideOnly=true)]
		public static bool? TimestamptzLe(NpgsqlDateTime? par6688, NpgsqlDateTime? par6689)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeDate

		[Sql.Function(Name="pg_catalog.timestamptz_le_date", ServerSideOnly=true)]
		public static bool? TimestamptzLeDate(NpgsqlDateTime? par6691, NpgsqlDate? par6692)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_le_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLeTimestamp(NpgsqlDateTime? par6694, NpgsqlDateTime? par6695)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLt

		[Sql.Function(Name="pg_catalog.timestamptz_lt", ServerSideOnly=true)]
		public static bool? TimestamptzLt(NpgsqlDateTime? par6697, NpgsqlDateTime? par6698)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtDate

		[Sql.Function(Name="pg_catalog.timestamptz_lt_date", ServerSideOnly=true)]
		public static bool? TimestamptzLtDate(NpgsqlDateTime? par6700, NpgsqlDate? par6701)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzLtTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_lt_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzLtTimestamp(NpgsqlDateTime? par6703, NpgsqlDateTime? par6704)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMi

		[Sql.Function(Name="pg_catalog.timestamptz_mi", ServerSideOnly=true)]
		public static NpgsqlTimeSpan? TimestamptzMi(NpgsqlDateTime? par6706, NpgsqlDateTime? par6707)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzMiInterval

		[Sql.Function(Name="pg_catalog.timestamptz_mi_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzMiInterval(NpgsqlDateTime? par6709, NpgsqlTimeSpan? par6710)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNe

		[Sql.Function(Name="pg_catalog.timestamptz_ne", ServerSideOnly=true)]
		public static bool? TimestamptzNe(NpgsqlDateTime? par6712, NpgsqlDateTime? par6713)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeDate

		[Sql.Function(Name="pg_catalog.timestamptz_ne_date", ServerSideOnly=true)]
		public static bool? TimestamptzNeDate(NpgsqlDateTime? par6715, NpgsqlDate? par6716)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzNeTimestamp

		[Sql.Function(Name="pg_catalog.timestamptz_ne_timestamp", ServerSideOnly=true)]
		public static bool? TimestamptzNeTimestamp(NpgsqlDateTime? par6718, NpgsqlDateTime? par6719)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzOut

		[Sql.Function(Name="pg_catalog.timestamptz_out", ServerSideOnly=true)]
		public static object? TimestamptzOut(NpgsqlDateTime? par6721)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzPlInterval

		[Sql.Function(Name="pg_catalog.timestamptz_pl_interval", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzPlInterval(NpgsqlDateTime? par6723, NpgsqlTimeSpan? par6724)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzRecv

		[Sql.Function(Name="pg_catalog.timestamptz_recv", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzRecv(object? par6726, int? par6727, int? par6728)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSend

		[Sql.Function(Name="pg_catalog.timestamptz_send", ServerSideOnly=true)]
		public static byte[]? TimestamptzSend(NpgsqlDateTime? par6730)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimestamptzSmaller

		[Sql.Function(Name="pg_catalog.timestamptz_smaller", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimestamptzSmaller(NpgsqlDateTime? par6732, NpgsqlDateTime? par6733)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodin

		[Sql.Function(Name="pg_catalog.timestamptztypmodin", ServerSideOnly=true)]
		public static int? Timestamptztypmodin(object? par6735)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timestamptztypmodout

		[Sql.Function(Name="pg_catalog.timestamptztypmodout", ServerSideOnly=true)]
		public static object? Timestamptztypmodout(int? par6737)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodin

		[Sql.Function(Name="pg_catalog.timetypmodin", ServerSideOnly=true)]
		public static int? Timetypmodin(object? par6739)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetypmodout

		[Sql.Function(Name="pg_catalog.timetypmodout", ServerSideOnly=true)]
		public static object? Timetypmodout(int? par6741)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetz

		[Sql.Function(Name="pg_catalog.timetz", ServerSideOnly=true)]
		public static DateTimeOffset? Timetz(TimeSpan? par6748)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzCmp

		[Sql.Function(Name="pg_catalog.timetz_cmp", ServerSideOnly=true)]
		public static int? TimetzCmp(DateTimeOffset? par6750, DateTimeOffset? par6751)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzEq

		[Sql.Function(Name="pg_catalog.timetz_eq", ServerSideOnly=true)]
		public static bool? TimetzEq(DateTimeOffset? par6753, DateTimeOffset? par6754)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGe

		[Sql.Function(Name="pg_catalog.timetz_ge", ServerSideOnly=true)]
		public static bool? TimetzGe(DateTimeOffset? par6756, DateTimeOffset? par6757)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzGt

		[Sql.Function(Name="pg_catalog.timetz_gt", ServerSideOnly=true)]
		public static bool? TimetzGt(DateTimeOffset? par6759, DateTimeOffset? par6760)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzHash

		[Sql.Function(Name="pg_catalog.timetz_hash", ServerSideOnly=true)]
		public static int? TimetzHash(DateTimeOffset? par6762)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzIn

		[Sql.Function(Name="pg_catalog.timetz_in", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzIn(object? par6764, int? par6765, int? par6766)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLarger

		[Sql.Function(Name="pg_catalog.timetz_larger", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzLarger(DateTimeOffset? par6768, DateTimeOffset? par6769)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLe

		[Sql.Function(Name="pg_catalog.timetz_le", ServerSideOnly=true)]
		public static bool? TimetzLe(DateTimeOffset? par6771, DateTimeOffset? par6772)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzLt

		[Sql.Function(Name="pg_catalog.timetz_lt", ServerSideOnly=true)]
		public static bool? TimetzLt(DateTimeOffset? par6774, DateTimeOffset? par6775)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzMiInterval

		[Sql.Function(Name="pg_catalog.timetz_mi_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzMiInterval(DateTimeOffset? par6777, NpgsqlTimeSpan? par6778)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzNe

		[Sql.Function(Name="pg_catalog.timetz_ne", ServerSideOnly=true)]
		public static bool? TimetzNe(DateTimeOffset? par6780, DateTimeOffset? par6781)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzOut

		[Sql.Function(Name="pg_catalog.timetz_out", ServerSideOnly=true)]
		public static object? TimetzOut(DateTimeOffset? par6783)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzPlInterval

		[Sql.Function(Name="pg_catalog.timetz_pl_interval", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzPlInterval(DateTimeOffset? par6785, NpgsqlTimeSpan? par6786)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzRecv

		[Sql.Function(Name="pg_catalog.timetz_recv", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzRecv(object? par6788, int? par6789, int? par6790)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSend

		[Sql.Function(Name="pg_catalog.timetz_send", ServerSideOnly=true)]
		public static byte[]? TimetzSend(DateTimeOffset? par6792)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzSmaller

		[Sql.Function(Name="pg_catalog.timetz_smaller", ServerSideOnly=true)]
		public static DateTimeOffset? TimetzSmaller(DateTimeOffset? par6794, DateTimeOffset? par6795)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TimetzdatePl

		[Sql.Function(Name="pg_catalog.timetzdate_pl", ServerSideOnly=true)]
		public static NpgsqlDateTime? TimetzdatePl(DateTimeOffset? par6797, NpgsqlDate? par6798)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodin

		[Sql.Function(Name="pg_catalog.timetztypmodin", ServerSideOnly=true)]
		public static int? Timetztypmodin(object? par6800)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timetztypmodout

		[Sql.Function(Name="pg_catalog.timetztypmodout", ServerSideOnly=true)]
		public static object? Timetztypmodout(int? par6802)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Timezone

		[Sql.Function(Name="pg_catalog.timezone", ServerSideOnly=true)]
		public static NpgsqlDateTime? Timezone(NpgsqlTimeSpan? par6819, NpgsqlDateTime? par6820)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tinterval

		[Sql.Function(Name="pg_catalog.tinterval", ServerSideOnly=true)]
		public static object? Tinterval(object? par6822, object? par6823)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalct

		[Sql.Function(Name="pg_catalog.tintervalct", ServerSideOnly=true)]
		public static bool? Tintervalct(object? par6825, object? par6826)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalend

		[Sql.Function(Name="pg_catalog.tintervalend", ServerSideOnly=true)]
		public static object? Tintervalend(object? par6828)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervaleq

		[Sql.Function(Name="pg_catalog.tintervaleq", ServerSideOnly=true)]
		public static bool? Tintervaleq(object? par6830, object? par6831)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalge

		[Sql.Function(Name="pg_catalog.tintervalge", ServerSideOnly=true)]
		public static bool? Tintervalge(object? par6833, object? par6834)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalgt

		[Sql.Function(Name="pg_catalog.tintervalgt", ServerSideOnly=true)]
		public static bool? Tintervalgt(object? par6836, object? par6837)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalin

		[Sql.Function(Name="pg_catalog.tintervalin", ServerSideOnly=true)]
		public static object? Tintervalin(object? par6839)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalle

		[Sql.Function(Name="pg_catalog.tintervalle", ServerSideOnly=true)]
		public static bool? Tintervalle(object? par6841, object? par6842)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalleneq

		[Sql.Function(Name="pg_catalog.tintervalleneq", ServerSideOnly=true)]
		public static bool? Tintervalleneq(object? par6844, object? par6845)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenge

		[Sql.Function(Name="pg_catalog.tintervallenge", ServerSideOnly=true)]
		public static bool? Tintervallenge(object? par6847, object? par6848)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallengt

		[Sql.Function(Name="pg_catalog.tintervallengt", ServerSideOnly=true)]
		public static bool? Tintervallengt(object? par6850, object? par6851)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenle

		[Sql.Function(Name="pg_catalog.tintervallenle", ServerSideOnly=true)]
		public static bool? Tintervallenle(object? par6853, object? par6854)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenlt

		[Sql.Function(Name="pg_catalog.tintervallenlt", ServerSideOnly=true)]
		public static bool? Tintervallenlt(object? par6856, object? par6857)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallenne

		[Sql.Function(Name="pg_catalog.tintervallenne", ServerSideOnly=true)]
		public static bool? Tintervallenne(object? par6859, object? par6860)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervallt

		[Sql.Function(Name="pg_catalog.tintervallt", ServerSideOnly=true)]
		public static bool? Tintervallt(object? par6862, object? par6863)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalne

		[Sql.Function(Name="pg_catalog.tintervalne", ServerSideOnly=true)]
		public static bool? Tintervalne(object? par6865, object? par6866)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalout

		[Sql.Function(Name="pg_catalog.tintervalout", ServerSideOnly=true)]
		public static object? Tintervalout(object? par6868)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalov

		[Sql.Function(Name="pg_catalog.tintervalov", ServerSideOnly=true)]
		public static bool? Tintervalov(object? par6870, object? par6871)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalrecv

		[Sql.Function(Name="pg_catalog.tintervalrecv", ServerSideOnly=true)]
		public static object? Tintervalrecv(object? par6873)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalrel

		[Sql.Function(Name="pg_catalog.tintervalrel", ServerSideOnly=true)]
		public static object? Tintervalrel(object? par6875)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalsame

		[Sql.Function(Name="pg_catalog.tintervalsame", ServerSideOnly=true)]
		public static bool? Tintervalsame(object? par6877, object? par6878)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalsend

		[Sql.Function(Name="pg_catalog.tintervalsend", ServerSideOnly=true)]
		public static byte[]? Tintervalsend(object? par6880)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tintervalstart

		[Sql.Function(Name="pg_catalog.tintervalstart", ServerSideOnly=true)]
		public static object? Tintervalstart(object? par6882)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToAscii

		[Sql.Function(Name="pg_catalog.to_ascii", ServerSideOnly=true)]
		public static string? ToAscii(string? par6889, string? par6890)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToChar

		[Sql.Function(Name="pg_catalog.to_char", ServerSideOnly=true)]
		public static string? ToChar(NpgsqlDateTime? par6913, string? par6914)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToDate

		[Sql.Function(Name="pg_catalog.to_date", ServerSideOnly=true)]
		public static NpgsqlDate? ToDate(string? par6916, string? par6917)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToHex

		[Sql.Function(Name="pg_catalog.to_hex", ServerSideOnly=true)]
		public static string? ToHex(long? par6921)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJson

		[Sql.Function(Name="pg_catalog.to_json", ServerSideOnly=true)]
		public static string? ToJson(object? par6923)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToJsonb

		[Sql.Function(Name="pg_catalog.to_jsonb", ServerSideOnly=true)]
		public static string? ToJsonb(object? par6925)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToNumber

		[Sql.Function(Name="pg_catalog.to_number", ServerSideOnly=true)]
		public static decimal? ToNumber(string? par6927, string? par6928)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegclass

		[Sql.Function(Name="pg_catalog.to_regclass", ServerSideOnly=true)]
		public static object? ToRegclass(object? par6930)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegnamespace

		[Sql.Function(Name="pg_catalog.to_regnamespace", ServerSideOnly=true)]
		public static object? ToRegnamespace(object? par6932)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoper

		[Sql.Function(Name="pg_catalog.to_regoper", ServerSideOnly=true)]
		public static object? ToRegoper(object? par6934)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegoperator

		[Sql.Function(Name="pg_catalog.to_regoperator", ServerSideOnly=true)]
		public static object? ToRegoperator(object? par6936)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegproc

		[Sql.Function(Name="pg_catalog.to_regproc", ServerSideOnly=true)]
		public static object? ToRegproc(object? par6938)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegprocedure

		[Sql.Function(Name="pg_catalog.to_regprocedure", ServerSideOnly=true)]
		public static object? ToRegprocedure(object? par6940)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegrole

		[Sql.Function(Name="pg_catalog.to_regrole", ServerSideOnly=true)]
		public static object? ToRegrole(object? par6942)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToRegtype

		[Sql.Function(Name="pg_catalog.to_regtype", ServerSideOnly=true)]
		public static object? ToRegtype(object? par6944)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTimestamp

		[Sql.Function(Name="pg_catalog.to_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? ToTimestamp(string? par6948, string? par6949)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsquery

		[Sql.Function(Name="pg_catalog.to_tsquery", ServerSideOnly=true)]
		public static object? ToTsquery(string? par6954)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region ToTsvector

		[Sql.Function(Name="pg_catalog.to_tsvector", ServerSideOnly=true)]
		public static object? ToTsvector(string? par6959)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TransactionTimestamp

		[Sql.Function(Name="pg_catalog.transaction_timestamp", ServerSideOnly=true)]
		public static NpgsqlDateTime? TransactionTimestamp()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Translate

		[Sql.Function(Name="pg_catalog.translate", ServerSideOnly=true)]
		public static string? Translate(string? par6962, string? par6963, string? par6964)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerIn

		[Sql.Function(Name="pg_catalog.trigger_in", ServerSideOnly=true)]
		public static object? TriggerIn(object? par6966)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TriggerOut

		[Sql.Function(Name="pg_catalog.trigger_out", ServerSideOnly=true)]
		public static object? TriggerOut(object? par6968)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Trunc

		[Sql.Function(Name="pg_catalog.trunc", ServerSideOnly=true)]
		public static PhysicalAddress? Trunc(PhysicalAddress? par6977)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsHeadline

		[Sql.Function(Name="pg_catalog.ts_headline", ServerSideOnly=true)]
		public static string? TsHeadline(string? par6992, object? par6993)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsLexize

		[Sql.Function(Name="pg_catalog.ts_lexize", ServerSideOnly=true)]
		public static object? TsLexize(object? par6995, string? par6996)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchQv

		[Sql.Function(Name="pg_catalog.ts_match_qv", ServerSideOnly=true)]
		public static bool? TsMatchQv(object? par6998, object? par6999)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTq

		[Sql.Function(Name="pg_catalog.ts_match_tq", ServerSideOnly=true)]
		public static bool? TsMatchTq(string? par7001, object? par7002)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchTt

		[Sql.Function(Name="pg_catalog.ts_match_tt", ServerSideOnly=true)]
		public static bool? TsMatchTt(string? par7004, string? par7005)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsMatchVq

		[Sql.Function(Name="pg_catalog.ts_match_vq", ServerSideOnly=true)]
		public static bool? TsMatchVq(object? par7007, object? par7008)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRank

		[Sql.Function(Name="pg_catalog.ts_rank", ServerSideOnly=true)]
		public static float? TsRank(object? par7023, object? par7024)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRankCd

		[Sql.Function(Name="pg_catalog.ts_rank_cd", ServerSideOnly=true)]
		public static float? TsRankCd(object? par7039, object? par7040)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsRewrite

		[Sql.Function(Name="pg_catalog.ts_rewrite", ServerSideOnly=true)]
		public static object? TsRewrite(object? par7046, string? par7047)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsTypanalyze

		[Sql.Function(Name="pg_catalog.ts_typanalyze", ServerSideOnly=true)]
		public static bool? TsTypanalyze(object? par7049)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerIn

		[Sql.Function(Name="pg_catalog.tsm_handler_in", ServerSideOnly=true)]
		public static object? TsmHandlerIn(object? par7051)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsmHandlerOut

		[Sql.Function(Name="pg_catalog.tsm_handler_out", ServerSideOnly=true)]
		public static object? TsmHandlerOut(object? par7053)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchjoinsel

		[Sql.Function(Name="pg_catalog.tsmatchjoinsel", ServerSideOnly=true)]
		public static double? Tsmatchjoinsel(object? par7055, int? par7056, object? par7057, short? par7058, object? par7059)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsmatchsel

		[Sql.Function(Name="pg_catalog.tsmatchsel", ServerSideOnly=true)]
		public static double? Tsmatchsel(object? par7061, int? par7062, object? par7063, int? par7064)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontained

		[Sql.Function(Name="pg_catalog.tsq_mcontained", ServerSideOnly=true)]
		public static bool? TsqMcontained(object? par7066, object? par7067)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqMcontains

		[Sql.Function(Name="pg_catalog.tsq_mcontains", ServerSideOnly=true)]
		public static bool? TsqMcontains(object? par7069, object? par7070)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryAnd

		[Sql.Function(Name="pg_catalog.tsquery_and", ServerSideOnly=true)]
		public static object? TsqueryAnd(object? par7072, object? par7073)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryCmp

		[Sql.Function(Name="pg_catalog.tsquery_cmp", ServerSideOnly=true)]
		public static int? TsqueryCmp(object? par7075, object? par7076)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryEq

		[Sql.Function(Name="pg_catalog.tsquery_eq", ServerSideOnly=true)]
		public static bool? TsqueryEq(object? par7078, object? par7079)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGe

		[Sql.Function(Name="pg_catalog.tsquery_ge", ServerSideOnly=true)]
		public static bool? TsqueryGe(object? par7081, object? par7082)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryGt

		[Sql.Function(Name="pg_catalog.tsquery_gt", ServerSideOnly=true)]
		public static bool? TsqueryGt(object? par7084, object? par7085)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLe

		[Sql.Function(Name="pg_catalog.tsquery_le", ServerSideOnly=true)]
		public static bool? TsqueryLe(object? par7087, object? par7088)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryLt

		[Sql.Function(Name="pg_catalog.tsquery_lt", ServerSideOnly=true)]
		public static bool? TsqueryLt(object? par7090, object? par7091)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNe

		[Sql.Function(Name="pg_catalog.tsquery_ne", ServerSideOnly=true)]
		public static bool? TsqueryNe(object? par7093, object? par7094)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryNot

		[Sql.Function(Name="pg_catalog.tsquery_not", ServerSideOnly=true)]
		public static object? TsqueryNot(object? par7096)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsqueryOr

		[Sql.Function(Name="pg_catalog.tsquery_or", ServerSideOnly=true)]
		public static object? TsqueryOr(object? par7098, object? par7099)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryin

		[Sql.Function(Name="pg_catalog.tsqueryin", ServerSideOnly=true)]
		public static object? Tsqueryin(object? par7101)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryout

		[Sql.Function(Name="pg_catalog.tsqueryout", ServerSideOnly=true)]
		public static object? Tsqueryout(object? par7103)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsqueryrecv

		[Sql.Function(Name="pg_catalog.tsqueryrecv", ServerSideOnly=true)]
		public static object? Tsqueryrecv(object? par7105)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsquerysend

		[Sql.Function(Name="pg_catalog.tsquerysend", ServerSideOnly=true)]
		public static byte[]? Tsquerysend(object? par7107)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsrange

		[Sql.Function(Name="pg_catalog.tsrange", ServerSideOnly=true)]
		public static object? Tsrange(NpgsqlDateTime? par7112, NpgsqlDateTime? par7113, string? par7114)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsrangeSubdiff

		[Sql.Function(Name="pg_catalog.tsrange_subdiff", ServerSideOnly=true)]
		public static double? TsrangeSubdiff(NpgsqlDateTime? par7116, NpgsqlDateTime? par7117)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tstzrange

		[Sql.Function(Name="pg_catalog.tstzrange", ServerSideOnly=true)]
		public static object? Tstzrange(NpgsqlDateTime? par7122, NpgsqlDateTime? par7123, string? par7124)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TstzrangeSubdiff

		[Sql.Function(Name="pg_catalog.tstzrange_subdiff", ServerSideOnly=true)]
		public static double? TstzrangeSubdiff(NpgsqlDateTime? par7126, NpgsqlDateTime? par7127)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorCmp

		[Sql.Function(Name="pg_catalog.tsvector_cmp", ServerSideOnly=true)]
		public static int? TsvectorCmp(object? par7129, object? par7130)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorConcat

		[Sql.Function(Name="pg_catalog.tsvector_concat", ServerSideOnly=true)]
		public static object? TsvectorConcat(object? par7132, object? par7133)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorEq

		[Sql.Function(Name="pg_catalog.tsvector_eq", ServerSideOnly=true)]
		public static bool? TsvectorEq(object? par7135, object? par7136)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGe

		[Sql.Function(Name="pg_catalog.tsvector_ge", ServerSideOnly=true)]
		public static bool? TsvectorGe(object? par7138, object? par7139)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorGt

		[Sql.Function(Name="pg_catalog.tsvector_gt", ServerSideOnly=true)]
		public static bool? TsvectorGt(object? par7141, object? par7142)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLe

		[Sql.Function(Name="pg_catalog.tsvector_le", ServerSideOnly=true)]
		public static bool? TsvectorLe(object? par7144, object? par7145)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorLt

		[Sql.Function(Name="pg_catalog.tsvector_lt", ServerSideOnly=true)]
		public static bool? TsvectorLt(object? par7147, object? par7148)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorNe

		[Sql.Function(Name="pg_catalog.tsvector_ne", ServerSideOnly=true)]
		public static bool? TsvectorNe(object? par7150, object? par7151)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTrigger

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger", ServerSideOnly=true)]
		public static object? TsvectorUpdateTrigger()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TsvectorUpdateTriggerColumn

		[Sql.Function(Name="pg_catalog.tsvector_update_trigger_column", ServerSideOnly=true)]
		public static object? TsvectorUpdateTriggerColumn()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorin

		[Sql.Function(Name="pg_catalog.tsvectorin", ServerSideOnly=true)]
		public static object? Tsvectorin(object? par7155)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorout

		[Sql.Function(Name="pg_catalog.tsvectorout", ServerSideOnly=true)]
		public static object? Tsvectorout(object? par7157)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorrecv

		[Sql.Function(Name="pg_catalog.tsvectorrecv", ServerSideOnly=true)]
		public static object? Tsvectorrecv(object? par7159)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Tsvectorsend

		[Sql.Function(Name="pg_catalog.tsvectorsend", ServerSideOnly=true)]
		public static byte[]? Tsvectorsend(object? par7161)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrent

		[Sql.Function(Name="pg_catalog.txid_current", ServerSideOnly=true)]
		public static long? TxidCurrent()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidCurrentSnapshot

		[Sql.Function(Name="pg_catalog.txid_current_snapshot", ServerSideOnly=true)]
		public static object? TxidCurrentSnapshot()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotIn

		[Sql.Function(Name="pg_catalog.txid_snapshot_in", ServerSideOnly=true)]
		public static object? TxidSnapshotIn(object? par7165)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotOut

		[Sql.Function(Name="pg_catalog.txid_snapshot_out", ServerSideOnly=true)]
		public static object? TxidSnapshotOut(object? par7167)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotRecv

		[Sql.Function(Name="pg_catalog.txid_snapshot_recv", ServerSideOnly=true)]
		public static object? TxidSnapshotRecv(object? par7169)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotSend

		[Sql.Function(Name="pg_catalog.txid_snapshot_send", ServerSideOnly=true)]
		public static byte[]? TxidSnapshotSend(object? par7171)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmax

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmax", ServerSideOnly=true)]
		public static long? TxidSnapshotXmax(object? par7174)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidSnapshotXmin

		[Sql.Function(Name="pg_catalog.txid_snapshot_xmin", ServerSideOnly=true)]
		public static long? TxidSnapshotXmin(object? par7176)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region TxidVisibleInSnapshot

		[Sql.Function(Name="pg_catalog.txid_visible_in_snapshot", ServerSideOnly=true)]
		public static bool? TxidVisibleInSnapshot(long? par7178, object? par7179)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UhcToUtf8

		[Sql.Function(Name="pg_catalog.uhc_to_utf8", ServerSideOnly=true)]
		public static object? UhcToUtf8(int? par7180, int? par7181, object? par7182, object? par7183, int? par7184)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UniqueKeyRecheck

		[Sql.Function(Name="pg_catalog.unique_key_recheck", ServerSideOnly=true)]
		public static object? UniqueKeyRecheck()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownin

		[Sql.Function(Name="pg_catalog.unknownin", ServerSideOnly=true)]
		public static object? Unknownin(object? par7187)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownout

		[Sql.Function(Name="pg_catalog.unknownout", ServerSideOnly=true)]
		public static object? Unknownout(object? par7189)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownrecv

		[Sql.Function(Name="pg_catalog.unknownrecv", ServerSideOnly=true)]
		public static object? Unknownrecv(object? par7191)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Unknownsend

		[Sql.Function(Name="pg_catalog.unknownsend", ServerSideOnly=true)]
		public static byte[]? Unknownsend(object? par7193)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Upper

		[Sql.Function(Name="pg_catalog.upper", ServerSideOnly=true)]
		public static string? Upper(string? par7198)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInc

		[Sql.Function(Name="pg_catalog.upper_inc", ServerSideOnly=true)]
		public static bool? UpperInc(object? par7200)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UpperInf

		[Sql.Function(Name="pg_catalog.upper_inf", ServerSideOnly=true)]
		public static bool? UpperInf(object? par7202)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToAscii

		[Sql.Function(Name="pg_catalog.utf8_to_ascii", ServerSideOnly=true)]
		public static object? Utf8ToAscii(int? par7203, int? par7204, object? par7205, object? par7206, int? par7207)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToBig5

		[Sql.Function(Name="pg_catalog.utf8_to_big5", ServerSideOnly=true)]
		public static object? Utf8ToBig5(int? par7208, int? par7209, object? par7210, object? par7211, int? par7212)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucCn

		[Sql.Function(Name="pg_catalog.utf8_to_euc_cn", ServerSideOnly=true)]
		public static object? Utf8ToEucCn(int? par7213, int? par7214, object? par7215, object? par7216, int? par7217)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jis_2004", ServerSideOnly=true)]
		public static object? Utf8ToEucJis2004(int? par7218, int? par7219, object? par7220, object? par7221, int? par7222)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucJp

		[Sql.Function(Name="pg_catalog.utf8_to_euc_jp", ServerSideOnly=true)]
		public static object? Utf8ToEucJp(int? par7223, int? par7224, object? par7225, object? par7226, int? par7227)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucKr

		[Sql.Function(Name="pg_catalog.utf8_to_euc_kr", ServerSideOnly=true)]
		public static object? Utf8ToEucKr(int? par7228, int? par7229, object? par7230, object? par7231, int? par7232)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToEucTw

		[Sql.Function(Name="pg_catalog.utf8_to_euc_tw", ServerSideOnly=true)]
		public static object? Utf8ToEucTw(int? par7233, int? par7234, object? par7235, object? par7236, int? par7237)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGb18030

		[Sql.Function(Name="pg_catalog.utf8_to_gb18030", ServerSideOnly=true)]
		public static object? Utf8ToGb18030(int? par7238, int? par7239, object? par7240, object? par7241, int? par7242)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToGbk

		[Sql.Function(Name="pg_catalog.utf8_to_gbk", ServerSideOnly=true)]
		public static object? Utf8ToGbk(int? par7243, int? par7244, object? par7245, object? par7246, int? par7247)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso88591

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859_1", ServerSideOnly=true)]
		public static object? Utf8ToIso88591(int? par7248, int? par7249, object? par7250, object? par7251, int? par7252)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToIso8859

		[Sql.Function(Name="pg_catalog.utf8_to_iso8859", ServerSideOnly=true)]
		public static object? Utf8ToIso8859(int? par7253, int? par7254, object? par7255, object? par7256, int? par7257)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToJohab

		[Sql.Function(Name="pg_catalog.utf8_to_johab", ServerSideOnly=true)]
		public static object? Utf8ToJohab(int? par7258, int? par7259, object? par7260, object? par7261, int? par7262)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8r

		[Sql.Function(Name="pg_catalog.utf8_to_koi8r", ServerSideOnly=true)]
		public static object? Utf8ToKoi8r(int? par7263, int? par7264, object? par7265, object? par7266, int? par7267)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToKoi8u

		[Sql.Function(Name="pg_catalog.utf8_to_koi8u", ServerSideOnly=true)]
		public static object? Utf8ToKoi8u(int? par7268, int? par7269, object? par7270, object? par7271, int? par7272)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToShiftJis2004

		[Sql.Function(Name="pg_catalog.utf8_to_shift_jis_2004", ServerSideOnly=true)]
		public static object? Utf8ToShiftJis2004(int? par7273, int? par7274, object? par7275, object? par7276, int? par7277)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToSjis

		[Sql.Function(Name="pg_catalog.utf8_to_sjis", ServerSideOnly=true)]
		public static object? Utf8ToSjis(int? par7278, int? par7279, object? par7280, object? par7281, int? par7282)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToUhc

		[Sql.Function(Name="pg_catalog.utf8_to_uhc", ServerSideOnly=true)]
		public static object? Utf8ToUhc(int? par7283, int? par7284, object? par7285, object? par7286, int? par7287)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Utf8ToWin

		[Sql.Function(Name="pg_catalog.utf8_to_win", ServerSideOnly=true)]
		public static object? Utf8ToWin(int? par7288, int? par7289, object? par7290, object? par7291, int? par7292)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidCmp

		[Sql.Function(Name="pg_catalog.uuid_cmp", ServerSideOnly=true)]
		public static int? UuidCmp(Guid? par7294, Guid? par7295)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidEq

		[Sql.Function(Name="pg_catalog.uuid_eq", ServerSideOnly=true)]
		public static bool? UuidEq(Guid? par7297, Guid? par7298)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGe

		[Sql.Function(Name="pg_catalog.uuid_ge", ServerSideOnly=true)]
		public static bool? UuidGe(Guid? par7300, Guid? par7301)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidGt

		[Sql.Function(Name="pg_catalog.uuid_gt", ServerSideOnly=true)]
		public static bool? UuidGt(Guid? par7303, Guid? par7304)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidHash

		[Sql.Function(Name="pg_catalog.uuid_hash", ServerSideOnly=true)]
		public static int? UuidHash(Guid? par7306)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidIn

		[Sql.Function(Name="pg_catalog.uuid_in", ServerSideOnly=true)]
		public static Guid? UuidIn(object? par7308)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLe

		[Sql.Function(Name="pg_catalog.uuid_le", ServerSideOnly=true)]
		public static bool? UuidLe(Guid? par7310, Guid? par7311)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidLt

		[Sql.Function(Name="pg_catalog.uuid_lt", ServerSideOnly=true)]
		public static bool? UuidLt(Guid? par7313, Guid? par7314)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidNe

		[Sql.Function(Name="pg_catalog.uuid_ne", ServerSideOnly=true)]
		public static bool? UuidNe(Guid? par7316, Guid? par7317)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidOut

		[Sql.Function(Name="pg_catalog.uuid_out", ServerSideOnly=true)]
		public static object? UuidOut(Guid? par7319)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidRecv

		[Sql.Function(Name="pg_catalog.uuid_recv", ServerSideOnly=true)]
		public static Guid? UuidRecv(object? par7321)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region UuidSend

		[Sql.Function(Name="pg_catalog.uuid_send", ServerSideOnly=true)]
		public static byte[]? UuidSend(Guid? par7323)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarPop

		[Sql.Function(Name="pg_catalog.var_pop", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarPop<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7335)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarSamp

		[Sql.Function(Name="pg_catalog.var_samp", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? VarSamp<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7347)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbit

		[Sql.Function(Name="pg_catalog.varbit", ServerSideOnly=true)]
		public static BitArray? Varbit(BitArray? par7349, int? par7350, bool? par7351)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitIn

		[Sql.Function(Name="pg_catalog.varbit_in", ServerSideOnly=true)]
		public static BitArray? VarbitIn(object? par7353, int? par7354, int? par7355)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitOut

		[Sql.Function(Name="pg_catalog.varbit_out", ServerSideOnly=true)]
		public static object? VarbitOut(BitArray? par7357)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitRecv

		[Sql.Function(Name="pg_catalog.varbit_recv", ServerSideOnly=true)]
		public static BitArray? VarbitRecv(object? par7359, int? par7360, int? par7361)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitSend

		[Sql.Function(Name="pg_catalog.varbit_send", ServerSideOnly=true)]
		public static byte[]? VarbitSend(BitArray? par7363)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarbitTransform

		[Sql.Function(Name="pg_catalog.varbit_transform", ServerSideOnly=true)]
		public static object? VarbitTransform(object? par7365)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitcmp

		[Sql.Function(Name="pg_catalog.varbitcmp", ServerSideOnly=true)]
		public static int? Varbitcmp(BitArray? par7367, BitArray? par7368)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbiteq

		[Sql.Function(Name="pg_catalog.varbiteq", ServerSideOnly=true)]
		public static bool? Varbiteq(BitArray? par7370, BitArray? par7371)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitge

		[Sql.Function(Name="pg_catalog.varbitge", ServerSideOnly=true)]
		public static bool? Varbitge(BitArray? par7373, BitArray? par7374)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitgt

		[Sql.Function(Name="pg_catalog.varbitgt", ServerSideOnly=true)]
		public static bool? Varbitgt(BitArray? par7376, BitArray? par7377)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitle

		[Sql.Function(Name="pg_catalog.varbitle", ServerSideOnly=true)]
		public static bool? Varbitle(BitArray? par7379, BitArray? par7380)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitlt

		[Sql.Function(Name="pg_catalog.varbitlt", ServerSideOnly=true)]
		public static bool? Varbitlt(BitArray? par7382, BitArray? par7383)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbitne

		[Sql.Function(Name="pg_catalog.varbitne", ServerSideOnly=true)]
		public static bool? Varbitne(BitArray? par7385, BitArray? par7386)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodin

		[Sql.Function(Name="pg_catalog.varbittypmodin", ServerSideOnly=true)]
		public static int? Varbittypmodin(object? par7388)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varbittypmodout

		[Sql.Function(Name="pg_catalog.varbittypmodout", ServerSideOnly=true)]
		public static object? Varbittypmodout(int? par7390)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchar

		[Sql.Function(Name="pg_catalog.varchar", ServerSideOnly=true)]
		public static string? Varchar(string? par7394, int? par7395, bool? par7396)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VarcharTransform

		[Sql.Function(Name="pg_catalog.varchar_transform", ServerSideOnly=true)]
		public static object? VarcharTransform(object? par7398)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharin

		[Sql.Function(Name="pg_catalog.varcharin", ServerSideOnly=true)]
		public static string? Varcharin(object? par7400, int? par7401, int? par7402)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharout

		[Sql.Function(Name="pg_catalog.varcharout", ServerSideOnly=true)]
		public static object? Varcharout(string? par7404)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharrecv

		[Sql.Function(Name="pg_catalog.varcharrecv", ServerSideOnly=true)]
		public static string? Varcharrecv(object? par7406, int? par7407, int? par7408)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varcharsend

		[Sql.Function(Name="pg_catalog.varcharsend", ServerSideOnly=true)]
		public static byte[]? Varcharsend(string? par7410)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodin

		[Sql.Function(Name="pg_catalog.varchartypmodin", ServerSideOnly=true)]
		public static int? Varchartypmodin(object? par7412)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Varchartypmodout

		[Sql.Function(Name="pg_catalog.varchartypmodout", ServerSideOnly=true)]
		public static object? Varchartypmodout(int? par7414)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Variance

		[Sql.Function(Name="pg_catalog.variance", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static decimal? Variance<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, decimal?>> par7426)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Version

		[Sql.Function(Name="pg_catalog.version", ServerSideOnly=true)]
		public static string? Version()
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidIn

		[Sql.Function(Name="pg_catalog.void_in", ServerSideOnly=true)]
		public static object? VoidIn(object? par7428)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidOut

		[Sql.Function(Name="pg_catalog.void_out", ServerSideOnly=true)]
		public static object? VoidOut(object? par7430)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidRecv

		[Sql.Function(Name="pg_catalog.void_recv", ServerSideOnly=true)]
		public static object? VoidRecv(object? par7431)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region VoidSend

		[Sql.Function(Name="pg_catalog.void_send", ServerSideOnly=true)]
		public static byte[]? VoidSend(object? par7433)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Width

		[Sql.Function(Name="pg_catalog.width", ServerSideOnly=true)]
		public static double? Width(NpgsqlBox? par7435)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WidthBucket

		[Sql.Function(Name="pg_catalog.width_bucket", ServerSideOnly=true)]
		public static int? WidthBucket(object? par7447, object? par7448)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region WinToUtf8

		[Sql.Function(Name="pg_catalog.win_to_utf8", ServerSideOnly=true)]
		public static object? WinToUtf8(int? par7449, int? par7450, object? par7451, object? par7452, int? par7453)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToLatin2

		[Sql.Function(Name="pg_catalog.win1250_to_latin2", ServerSideOnly=true)]
		public static object? Win1250ToLatin2(int? par7454, int? par7455, object? par7456, object? par7457, int? par7458)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1250ToMic

		[Sql.Function(Name="pg_catalog.win1250_to_mic", ServerSideOnly=true)]
		public static object? Win1250ToMic(int? par7459, int? par7460, object? par7461, object? par7462, int? par7463)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToIso

		[Sql.Function(Name="pg_catalog.win1251_to_iso", ServerSideOnly=true)]
		public static object? Win1251ToIso(int? par7464, int? par7465, object? par7466, object? par7467, int? par7468)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToKoi8r

		[Sql.Function(Name="pg_catalog.win1251_to_koi8r", ServerSideOnly=true)]
		public static object? Win1251ToKoi8r(int? par7469, int? par7470, object? par7471, object? par7472, int? par7473)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToMic

		[Sql.Function(Name="pg_catalog.win1251_to_mic", ServerSideOnly=true)]
		public static object? Win1251ToMic(int? par7474, int? par7475, object? par7476, object? par7477, int? par7478)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win1251ToWin866

		[Sql.Function(Name="pg_catalog.win1251_to_win866", ServerSideOnly=true)]
		public static object? Win1251ToWin866(int? par7479, int? par7480, object? par7481, object? par7482, int? par7483)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToIso

		[Sql.Function(Name="pg_catalog.win866_to_iso", ServerSideOnly=true)]
		public static object? Win866ToIso(int? par7484, int? par7485, object? par7486, object? par7487, int? par7488)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToKoi8r

		[Sql.Function(Name="pg_catalog.win866_to_koi8r", ServerSideOnly=true)]
		public static object? Win866ToKoi8r(int? par7489, int? par7490, object? par7491, object? par7492, int? par7493)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToMic

		[Sql.Function(Name="pg_catalog.win866_to_mic", ServerSideOnly=true)]
		public static object? Win866ToMic(int? par7494, int? par7495, object? par7496, object? par7497, int? par7498)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Win866ToWin1251

		[Sql.Function(Name="pg_catalog.win866_to_win1251", ServerSideOnly=true)]
		public static object? Win866ToWin1251(int? par7499, int? par7500, object? par7501, object? par7502, int? par7503)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideq

		[Sql.Function(Name="pg_catalog.xideq", ServerSideOnly=true)]
		public static bool? Xideq(int? par7505, int? par7506)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xideqint4

		[Sql.Function(Name="pg_catalog.xideqint4", ServerSideOnly=true)]
		public static bool? Xideqint4(int? par7508, int? par7509)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidin

		[Sql.Function(Name="pg_catalog.xidin", ServerSideOnly=true)]
		public static int? Xidin(object? par7511)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidout

		[Sql.Function(Name="pg_catalog.xidout", ServerSideOnly=true)]
		public static object? Xidout(int? par7513)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidrecv

		[Sql.Function(Name="pg_catalog.xidrecv", ServerSideOnly=true)]
		public static int? Xidrecv(object? par7515)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xidsend

		[Sql.Function(Name="pg_catalog.xidsend", ServerSideOnly=true)]
		public static byte[]? Xidsend(int? par7517)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xml

		[Sql.Function(Name="pg_catalog.xml", ServerSideOnly=true)]
		public static string? Xml(string? par7519)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIn

		[Sql.Function(Name="pg_catalog.xml_in", ServerSideOnly=true)]
		public static string? XmlIn(object? par7521)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormed

		[Sql.Function(Name="pg_catalog.xml_is_well_formed", ServerSideOnly=true)]
		public static bool? XmlIsWellFormed(string? par7523)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedContent

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_content", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedContent(string? par7525)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlIsWellFormedDocument

		[Sql.Function(Name="pg_catalog.xml_is_well_formed_document", ServerSideOnly=true)]
		public static bool? XmlIsWellFormedDocument(string? par7527)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlOut

		[Sql.Function(Name="pg_catalog.xml_out", ServerSideOnly=true)]
		public static object? XmlOut(string? par7529)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlRecv

		[Sql.Function(Name="pg_catalog.xml_recv", ServerSideOnly=true)]
		public static string? XmlRecv(object? par7531)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XmlSend

		[Sql.Function(Name="pg_catalog.xml_send", ServerSideOnly=true)]
		public static byte[]? XmlSend(string? par7533)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlagg

		[Sql.Function(Name="pg_catalog.xmlagg", ServerSideOnly=true, IsAggregate = true, ArgIndices = new[] { 0 })]
		public static string? Xmlagg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, string?>> par7535)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlcomment

		[Sql.Function(Name="pg_catalog.xmlcomment", ServerSideOnly=true)]
		public static string? Xmlcomment(string? par7537)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlconcat2

		[Sql.Function(Name="pg_catalog.xmlconcat2", ServerSideOnly=true)]
		public static string? Xmlconcat2(string? par7539, string? par7540)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlexists

		[Sql.Function(Name="pg_catalog.xmlexists", ServerSideOnly=true)]
		public static bool? Xmlexists(string? par7542, string? par7543)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xmlvalidate

		[Sql.Function(Name="pg_catalog.xmlvalidate", ServerSideOnly=true)]
		public static bool? Xmlvalidate(string? par7545, string? par7546)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region Xpath

		[Sql.Function(Name="pg_catalog.xpath", ServerSideOnly=true)]
		public static object? Xpath(string? par7552, string? par7553)
		{
			throw new InvalidOperationException();
		}

		#endregion

		#region XpathExists

		[Sql.Function(Name="pg_catalog.xpath_exists", ServerSideOnly=true)]
		public static bool? XpathExists(string? par7559, string? par7560)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static _testsamename Find(this ITable<_testsamename> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static AllType Find(this ITable<AllType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static InheritanceChild Find(this ITable<InheritanceChild> table, int InheritanceChildId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceChildId == InheritanceChildId);
		}

		public static InheritanceParent Find(this ITable<InheritanceParent> table, int InheritanceParentId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceParentId == InheritanceParentId);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static SequenceCustomNamingTest Find(this ITable<SequenceCustomNamingTest> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest1 Find(this ITable<SequenceTest1> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest2 Find(this ITable<SequenceTest2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static SequenceTest3 Find(this ITable<SequenceTest3> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestMerge1 Find(this ITable<TestMerge1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMerge2 Find(this ITable<TestMerge2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static test_schema_Testsamename Find(this ITable<test_schema_Testsamename> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static test_schema_TestSchemaIdentity Find(this ITable<test_schema_TestSchemaIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static test_schema_Testserialidentity Find(this ITable<test_schema_Testserialidentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}

#pragma warning restore 1591
