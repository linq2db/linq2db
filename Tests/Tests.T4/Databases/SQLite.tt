<#@ template language="C#" debug="True" hostSpecific="True" compilerOptions="/langversion:6" #>
<#@ output extension=".generated.cs"                                                         #>
<#@ assembly name="$(SolutionDir)Tests\Linq\bin\Debug\net472\System.Data.SQLite.dll"         #>
<#@ include file="..\Shared.ttinclude"                                          once="true"  #>
<#@ include file="..\..\..\Source\LinqToDB.Templates\LinqToDB.SQLite.ttinclude" once="true"  #>
<#
	LoadDatabaseSchema = (dataConnection, schemaOptions) =>
	{
		var sp = dataConnection.DataProvider.GetSchemaProvider();
		var schema = sp.GetSchema(dataConnection, schemaOptions);

		// setup testcase for https://github.com/linq2db/linq2db/issues/4058
		var table      = schema.Tables.First(t => t.TableName == "AllTypes");
		table.TypeName = "class";

		return schema;
	};

	// setup testcase for https://github.com/linq2db/linq2db/issues/4058
	ConvertToCompilable = (name, mayRemoveUnderscore) =>
	{
		if (name == "class")
			name = "struct";
		return ConvertToCompilableDefault(name, mayRemoveUnderscore);
	};

	// setup testcase for https://github.com/linq2db/linq2db/issues/4058
	ToValidName = (name, mayRemoveUnderscore) =>
	{
		if (name == "struct")
			name = "event";
		var result = ToValidNameDefault(name, mayRemoveUnderscore);
		if (result == "Event")
			result = "namespace";
		return result;
	};

	NamespaceName = "SQLiteDataContext";
	BaseDataContextClass = "LinqToDB.DataContext";

	GenerateAssociationExtensions = true;

	var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
	LoadSQLiteMetadata(solutionsPath + @"\Data\", "TestData.sqlite");

	foreach (var t in Tables.Values)
		foreach (var fk in t.ForeignKeys.Values)
			if (fk.MemberName.Length == 0 || char.IsDigit(fk.MemberName[0]))
				fk.MemberName = "FK_" + fk.MemberName;

	GenerateModel();
#>
