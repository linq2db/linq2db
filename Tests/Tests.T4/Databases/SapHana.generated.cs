//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591
#nullable enable

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SapHana;
using LinqToDB.Mapping;

namespace SapHanaDataContext
{
	public partial class SYSTEMDBDB : LinqToDB.Data.DataConnection
	{
		public ITable<AllType>                                            AllTypes                               { get { return this.GetTable<AllType>(); } }
		public ITable<AllTypesGeo>                                        AllTypesGeos                           { get { return this.GetTable<AllTypesGeo>(); } }
		/// <summary>
		/// This table contains a summary of Best Record group master statistics
		/// </summary>
		public ITable<_SYS_TASK_BestRecordGroupMasterStatistic>           BestRecordGroupMasterStatistics0       { get { return this.GetTable<_SYS_TASK_BestRecordGroupMasterStatistic>(); } }
		public ITable<_SYS_TASK_BestRecordGroupMasterStatistics>          BestRecordGroupMasterStatistics1       { get { return this.GetTable<_SYS_TASK_BestRecordGroupMasterStatistics>(); } }
		/// <summary>
		/// This table contains governance information for every column in every record that is updated in the best record process
		/// </summary>
		public ITable<_SYS_TASK_BestRecordResult>                         BestRecordResults0                     { get { return this.GetTable<_SYS_TASK_BestRecordResult>(); } }
		public ITable<_SYS_TASK_BestRecordResults>                        BestRecordResults1                     { get { return this.GetTable<_SYS_TASK_BestRecordResults>(); } }
		public ITable<_SYS_TASK_BestRecordStrategies>                     BestRecordStrategies0                  { get { return this.GetTable<_SYS_TASK_BestRecordStrategies>(); } }
		/// <summary>
		/// This table contains information on which strategies are used in each strategy group and in which order
		/// </summary>
		public ITable<_SYS_TASK_BestRecordSTRATEGy>                       BestRecordStrategies1                  { get { return this.GetTable<_SYS_TASK_BestRecordSTRATEGy>(); } }
		public ITable<_SYS_TASK_BestRecordStrategyGroups>                 BestRecordStrategyGroups               { get { return this.GetTable<_SYS_TASK_BestRecordStrategyGroups>(); } }
		public ITable<BulkInsertLowerCaseColumn>                          BulkInsertLowerCaseColumns             { get { return this.GetTable<BulkInsertLowerCaseColumn>(); } }
		public ITable<BulkInsertUpperCaseColumn>                          BulkInsertUpperCaseColumns             { get { return this.GetTable<BulkInsertUpperCaseColumn>(); } }
		public ITable<_SYS_RT_CdsAnnotation>                              CdsAnnotations                         { get { return this.GetTable<_SYS_RT_CdsAnnotation>(); } }
		public ITable<_SYS_RT_CdsAnnotationAssignment>                    CdsAnnotationAssignments               { get { return this.GetTable<_SYS_RT_CdsAnnotationAssignment>(); } }
		public ITable<_SYS_RT_CdsAnnotationValue>                         CdsAnnotationValues                    { get { return this.GetTable<_SYS_RT_CdsAnnotationValue>(); } }
		public ITable<_SYS_RT_CdsArray>                                   CdsArrays                              { get { return this.GetTable<_SYS_RT_CdsArray>(); } }
		public ITable<_SYS_RT_CdsArtifact>                                CdsArtifacts                           { get { return this.GetTable<_SYS_RT_CdsArtifact>(); } }
		public ITable<_SYS_RT_CdsAspect>                                  CdsAspects                             { get { return this.GetTable<_SYS_RT_CdsAspect>(); } }
		public ITable<_SYS_RT_CdsAssociation>                             CdsAssociations                        { get { return this.GetTable<_SYS_RT_CdsAssociation>(); } }
		public ITable<_SYS_RT_CdsConstant>                                CdsConstants                           { get { return this.GetTable<_SYS_RT_CdsConstant>(); } }
		public ITable<_SYS_RT_CdsDependency>                              CdsDependencies                        { get { return this.GetTable<_SYS_RT_CdsDependency>(); } }
		public ITable<_SYS_RT_CdsDerivedType>                             CdsDerivedTypes                        { get { return this.GetTable<_SYS_RT_CdsDerivedType>(); } }
		public ITable<_SYS_RT_CdsEntity>                                  CdsEntities                            { get { return this.GetTable<_SYS_RT_CdsEntity>(); } }
		public ITable<_SYS_RT_CdsEnum>                                    CdsEnums                               { get { return this.GetTable<_SYS_RT_CdsEnum>(); } }
		public ITable<_SYS_RT_CdsExpression>                              CdsExpressions                         { get { return this.GetTable<_SYS_RT_CdsExpression>(); } }
		public ITable<_SYS_RT_CdsExtPkgDep>                               CdsExtPkgDeps                          { get { return this.GetTable<_SYS_RT_CdsExtPkgDep>(); } }
		public ITable<_SYS_RT_CdsParameter>                               CdsParameters                          { get { return this.GetTable<_SYS_RT_CdsParameter>(); } }
		public ITable<_SYS_RT_CdsRule>                                    CdsRules                               { get { return this.GetTable<_SYS_RT_CdsRule>(); } }
		public ITable<_SYS_RT_CdsScalarType>                              CdsScalarTypes                         { get { return this.GetTable<_SYS_RT_CdsScalarType>(); } }
		public ITable<_SYS_RT_CdsSourceCode>                              CdsSourceCodes                         { get { return this.GetTable<_SYS_RT_CdsSourceCode>(); } }
		public ITable<_SYS_RT_CdsStatistic>                               CdsStatistics                          { get { return this.GetTable<_SYS_RT_CdsStatistic>(); } }
		public ITable<_SYS_RT_CdsStructure>                               CdsStructures                          { get { return this.GetTable<_SYS_RT_CdsStructure>(); } }
		public ITable<_SYS_RT_CdsStructureComponent>                      CdsStructureComponents                 { get { return this.GetTable<_SYS_RT_CdsStructureComponent>(); } }
		public ITable<_SYS_RT_CdsView>                                    CdsViews                               { get { return this.GetTable<_SYS_RT_CdsView>(); } }
		public ITable<Child>                                              Children                               { get { return this.GetTable<Child>(); } }
		/// <summary>
		/// The table tells a user how well an address assigned and the type of address
		/// </summary>
		public ITable<_SYS_TASK_CleanseAddressRecordInfo0>                CleanseAddressRecordInfo0              { get { return this.GetTable<_SYS_TASK_CleanseAddressRecordInfo0>(); } }
		public ITable<_SYS_TASK_CleanseAddressRecordInfo1>                CleanseAddressRecordInfo1              { get { return this.GetTable<_SYS_TASK_CleanseAddressRecordInfo1>(); } }
		public ITable<_SYS_TASK_CleanseChangeInfo0>                       CleanseChangeInfo0                     { get { return this.GetTable<_SYS_TASK_CleanseChangeInfo0>(); } }
		/// <summary>
		/// This table describes the changes made during the cleansing process
		/// </summary>
		public ITable<_SYS_TASK_CleanseChangeInfo1>                       CleanseChangeInfo1                     { get { return this.GetTable<_SYS_TASK_CleanseChangeInfo1>(); } }
		/// <summary>
		/// This table identifies the location of parsed data elements in the input and output
		/// </summary>
		public ITable<_SYS_TASK_CleanseComponentInfo0>                    CleanseComponentInfo0                  { get { return this.GetTable<_SYS_TASK_CleanseComponentInfo0>(); } }
		public ITable<_SYS_TASK_CleanseComponentInfo1>                    CleanseComponentInfo1                  { get { return this.GetTable<_SYS_TASK_CleanseComponentInfo1>(); } }
		/// <summary>
		/// This table contains one row per info code generated by the cleansing process
		/// </summary>
		public ITable<_SYS_TASK_CleanseInfoCode>                          CleanseInfoCodes0                      { get { return this.GetTable<_SYS_TASK_CleanseInfoCode>(); } }
		public ITable<_SYS_TASK_CleanseInfoCodes>                         CleanseInfoCodes1                      { get { return this.GetTable<_SYS_TASK_CleanseInfoCodes>(); } }
		/// <summary>
		/// This table contains a summary of Cleanse statistics
		/// </summary>
		public ITable<_SYS_TASK_CleanseStatistic>                         CleanseStatistics0                     { get { return this.GetTable<_SYS_TASK_CleanseStatistic>(); } }
		public ITable<_SYS_TASK_CleanseStatistics>                        CleanseStatistics1                     { get { return this.GetTable<_SYS_TASK_CleanseStatistics>(); } }
		/// <summary>
		/// Telemetry Client Information
		/// </summary>
		public ITable<_SYS_TELEMETRY_CLIENT>                              Clients                                { get { return this.GetTable<_SYS_TELEMETRY_CLIENT>(); } }
		/// <summary>
		/// Telemetry Configuration Information
		/// </summary>
		public ITable<_SYS_TELEMETRY_CONFIGURATION>                       Configurations                         { get { return this.GetTable<_SYS_TELEMETRY_CONFIGURATION>(); } }
		/// <summary>
		/// This table contains messages generated by create task command
		/// </summary>
		public ITable<_SYS_TASK_CreateTaskMessage>                        CreateTaskMessages0                    { get { return this.GetTable<_SYS_TASK_CreateTaskMessage>(); } }
		public ITable<_SYS_TASK_CreateTaskMessages>                       CreateTaskMessages1                    { get { return this.GetTable<_SYS_TASK_CreateTaskMessages>(); } }
		/// <summary>
		/// Runtime data of column tables
		/// </summary>
		public ITable<_SYS_TELEMETRY_CsTable>                             CsTables                               { get { return this.GetTable<_SYS_TELEMETRY_CsTable>(); } }
		public ITable<_SYS_TASK_CurrentVersions>                          CurrentVersions                        { get { return this.GetTable<_SYS_TASK_CurrentVersions>(); } }
		public ITable<_SYS_XS_DebugPermission>                            DebugPermissions                       { get { return this.GetTable<_SYS_XS_DebugPermission>(); } }
		/// <summary>
		/// Disk usage information on host basis group by usage_types
		/// </summary>
		public ITable<_SYS_TELEMETRY_DiskUsage>                           DiskUsages                             { get { return this.GetTable<_SYS_TELEMETRY_DiskUsage>(); } }
		public ITable<Doctor>                                             Doctors                                { get { return this.GetTable<Doctor>(); } }
		public ITable<_SYS_SQL_ANALYZER_EdgeStatistic>                    EdgeStatistics0                        { get { return this.GetTable<_SYS_SQL_ANALYZER_EdgeStatistic>(); } }
		public ITable<_SYS_SQL_ANALYZER_EdgeStatistics>                   EdgeStatistics1                        { get { return this.GetTable<_SYS_SQL_ANALYZER_EdgeStatistics>(); } }
		/// <summary>
		/// Information about root keys used by persistence encryption, application encryption or log encryption
		/// </summary>
		public ITable<SYS_DATABASES_EncryptionRootKey>                    EncryptionRootKeys                     { get { return this.GetTable<SYS_DATABASES_EncryptionRootKey>(); } }
		/// <summary>
		/// Enterprise Search configuration
		/// </summary>
		public ITable<_SYS_RT_EshModel0>                                  EshModels                              { get { return this.GetTable<_SYS_RT_EshModel0>(); } }
		/// <summary>
		/// Enterprise Search configuration
		/// </summary>
		public ITable<_SYS_RT_EshModel1>                                  EshModel                               { get { return this.GetTable<_SYS_RT_EshModel1>(); } }
		public ITable<_SYS_RT_EshModelAuth>                               EshModelAuth                           { get { return this.GetTable<_SYS_RT_EshModelAuth>(); } }
		/// <summary>
		/// Enterprise Search configuration properties
		/// </summary>
		public ITable<_SYS_RT_EshModelProperty0>                          EshModelProperties                     { get { return this.GetTable<_SYS_RT_EshModelProperty0>(); } }
		/// <summary>
		/// Enterprise Search configuration properties
		/// </summary>
		public ITable<_SYS_RT_EshModelProperty1>                          EshModelProperty                       { get { return this.GetTable<_SYS_RT_EshModelProperty1>(); } }
		/// <summary>
		/// Internal events
		/// </summary>
		public ITable<_SYS_TELEMETRY_EVENT>                               EVENTS                                 { get { return this.GetTable<_SYS_TELEMETRY_EVENT>(); } }
		/// <summary>
		/// Detailed feature usage statistics
		/// </summary>
		public ITable<_SYS_TELEMETRY_FeatureUsage>                        FeatureUsages                          { get { return this.GetTable<_SYS_TELEMETRY_FeatureUsage>(); } }
		/// <summary>
		/// Lists the FSIDs for the current database/tenant
		/// </summary>
		public ITable<SYS_DATABASES_FullSystemInfoDump>                   FullSystemInfoDumps                    { get { return this.GetTable<SYS_DATABASES_FullSystemInfoDump>(); } }
		public ITable<_SYS_AFL_FunctionExecutionCount>                    FunctionExecutionCounts                { get { return this.GetTable<_SYS_AFL_FunctionExecutionCount>(); } }
		public ITable<_SYS_AFL_FunctionExecutionCountsControl>            FunctionExecutionCountsControls        { get { return this.GetTable<_SYS_AFL_FunctionExecutionCountsControl>(); } }
		public ITable<_SYS_AFL_FunctionProgressInAflbfl>                  FunctionProgressInAflbfls              { get { return this.GetTable<_SYS_AFL_FunctionProgressInAflbfl>(); } }
		public ITable<_SYS_AFL_FunctionProgressInAflpal>                  FunctionProgressInAflpals              { get { return this.GetTable<_SYS_AFL_FunctionProgressInAflpal>(); } }
		public ITable<_SYS_AFL_FunctionProgressInHieArea>                 FunctionProgressInHieAreas             { get { return this.GetTable<_SYS_AFL_FunctionProgressInHieArea>(); } }
		public ITable<_SYS_AFL_FunctionProgressInLcappsWrapperArea>       FunctionProgressInLcappsWrapperAreas   { get { return this.GetTable<_SYS_AFL_FunctionProgressInLcappsWrapperArea>(); } }
		public ITable<_SYS_AFL_FunctionProgressInOflArea>                 FunctionProgressInOflAreas             { get { return this.GetTable<_SYS_AFL_FunctionProgressInOflArea>(); } }
		/// <summary>
		/// This table contains one row per info code generated by the geocode transformation process
		/// </summary>
		public ITable<_SYS_TASK_GeocodeInfoCode>                          GeocodeInfoCodes0                      { get { return this.GetTable<_SYS_TASK_GeocodeInfoCode>(); } }
		public ITable<_SYS_TASK_GeocodeInfoCodes>                         GeocodeInfoCodes1                      { get { return this.GetTable<_SYS_TASK_GeocodeInfoCodes>(); } }
		/// <summary>
		/// This table contains a summary of Geocode statistics
		/// </summary>
		public ITable<_SYS_TASK_GeocodeStatistic>                         GeocodeStatistics0                     { get { return this.GetTable<_SYS_TASK_GeocodeStatistic>(); } }
		public ITable<_SYS_TASK_GeocodeStatistics>                        GeocodeStatistics1                     { get { return this.GetTable<_SYS_TASK_GeocodeStatistics>(); } }
		public ITable<GrandChild>                                         GrandChildren                          { get { return this.GetTable<GrandChild>(); } }
		/// <summary>
		/// General HANA feature usage information
		/// </summary>
		public ITable<_SYS_TELEMETRY_HanaUsageOnDemand>                   HanaUsageOnDemands                     { get { return this.GetTable<_SYS_TELEMETRY_HanaUsageOnDemand>(); } }
		/// <summary>
		/// Memory allocator statistics
		/// </summary>
		public ITable<_SYS_TELEMETRY_HeapMemory>                          HeapMemories                           { get { return this.GetTable<_SYS_TELEMETRY_HeapMemory>(); } }
		/// <summary>
		/// Host information such as machine, OS configuration
		/// </summary>
		public ITable<_SYS_TELEMETRY_HostInformation>                     HostInformation                        { get { return this.GetTable<_SYS_TELEMETRY_HostInformation>(); } }
		public ITable<_SYS_XS_HttpDestination>                            HttpDestinations                       { get { return this.GetTable<_SYS_XS_HttpDestination>(); } }
		public ITable<_SYS_RT_InaActiveObject>                            InaActiveObjects                       { get { return this.GetTable<_SYS_RT_InaActiveObject>(); } }
		public ITable<_SYS_RT_InaActiveObjectProperty>                    InaActiveObjectProperties              { get { return this.GetTable<_SYS_RT_InaActiveObjectProperty>(); } }
		public ITable<_SYS_RT_InaActivePerspectiveV>                      InaActivePerspectiveV                  { get { return this.GetTable<_SYS_RT_InaActivePerspectiveV>(); } }
		public ITable<IndexTable>                                         IndexTables                            { get { return this.GetTable<IndexTable>(); } }
		public ITable<IndexTable2>                                        IndexTable2                            { get { return this.GetTable<IndexTable2>(); } }
		public ITable<InheritanceChild>                                   InheritanceChildren                    { get { return this.GetTable<InheritanceChild>(); } }
		public ITable<InheritanceParent>                                  InheritanceParents                     { get { return this.GetTable<InheritanceParent>(); } }
		/// <summary>
		/// Configuration information from inifiles
		/// </summary>
		public ITable<_SYS_TELEMETRY_InifileContent>                      InifileContents                        { get { return this.GetTable<_SYS_TELEMETRY_InifileContent>(); } }
		public ITable<_SYS_XS_JOB>                                        JOBS                                   { get { return this.GetTable<_SYS_XS_JOB>(); } }
		public ITable<_SYS_XS_JobLog>                                     JobLogs                                { get { return this.GetTable<_SYS_XS_JobLog>(); } }
		public ITable<_SYS_XS_JobSchedule>                                JobSchedules                           { get { return this.GetTable<_SYS_XS_JobSchedule>(); } }
		public ITable<_SYS_XS_JsRecompileIssue>                           JsRecompileIssues                      { get { return this.GetTable<_SYS_XS_JsRecompileIssue>(); } }
		/// <summary>
		/// Information on all licenses (if any) so far installed on this system
		/// </summary>
		public ITable<_SYS_TELEMETRY_License>                             LICENSES                               { get { return this.GetTable<_SYS_TELEMETRY_License>(); } }
		public ITable<LinqDataType>                                       LinqDataTypes                          { get { return this.GetTable<LinqDataType>(); } }
		public ITable<_SYS_LDB_LT0000000000000001>                        LT0000000000000001                     { get { return this.GetTable<_SYS_LDB_LT0000000000000001>(); } }
		public ITable<_SYS_LDB_LT0000000000000002>                        LT0000000000000002                     { get { return this.GetTable<_SYS_LDB_LT0000000000000002>(); } }
		/// <summary>
		/// This table contains one row for each match group
		/// </summary>
		public ITable<_SYS_TASK_MatchGroupInfo0>                          MatchGroupInfo0                        { get { return this.GetTable<_SYS_TASK_MatchGroupInfo0>(); } }
		public ITable<_SYS_TASK_MatchGroupInfo1>                          MatchGroupInfo1                        { get { return this.GetTable<_SYS_TASK_MatchGroupInfo1>(); } }
		public ITable<_SYS_TASK_MatchPolicies>                            MatchPolicies                          { get { return this.GetTable<_SYS_TASK_MatchPolicies>(); } }
		/// <summary>
		/// This table contains one row for each matching record per level
		/// </summary>
		public ITable<_SYS_TASK_MatchRecordInfo0>                         MatchRecordInfo0                       { get { return this.GetTable<_SYS_TASK_MatchRecordInfo0>(); } }
		public ITable<_SYS_TASK_MatchRecordInfo1>                         MatchRecordInfo1                       { get { return this.GetTable<_SYS_TASK_MatchRecordInfo1>(); } }
		public ITable<_SYS_TASK_MatchRules>                               MatchRules                             { get { return this.GetTable<_SYS_TASK_MatchRules>(); } }
		public ITable<_SYS_TASK_MatchSourceInfo>                          MatchSourceInfo                        { get { return this.GetTable<_SYS_TASK_MatchSourceInfo>(); } }
		/// <summary>
		/// This table contains counts of matches within and between data sources
		/// </summary>
		public ITable<_SYS_TASK_MatchSourceStatistic>                     MatchSourceStatistics0                 { get { return this.GetTable<_SYS_TASK_MatchSourceStatistic>(); } }
		public ITable<_SYS_TASK_MatchSourceStatistics>                    MatchSourceStatistics1                 { get { return this.GetTable<_SYS_TASK_MatchSourceStatistics>(); } }
		/// <summary>
		/// This table contains statistics regarding the run of the transformation operation
		/// </summary>
		public ITable<_SYS_TASK_MatchStatistic>                           MatchStatistics0                       { get { return this.GetTable<_SYS_TASK_MatchStatistic>(); } }
		public ITable<_SYS_TASK_MatchStatistics>                          MatchStatistics1                       { get { return this.GetTable<_SYS_TASK_MatchStatistics>(); } }
		/// <summary>
		/// This table contains one row for each match decision made during the matching process
		/// </summary>
		public ITable<_SYS_TASK_MatchTracing0>                            MatchTracings                          { get { return this.GetTable<_SYS_TASK_MatchTracing0>(); } }
		public ITable<_SYS_TASK_MatchTracing1>                            MatchTracing                           { get { return this.GetTable<_SYS_TASK_MatchTracing1>(); } }
		/// <summary>
		/// Common data for all backup catalog entries
		/// </summary>
		public ITable<SYS_DATABASES_MBackupCatalog>                       MBackupCatalogs                        { get { return this.GetTable<SYS_DATABASES_MBackupCatalog>(); } }
		/// <summary>
		/// Location information of all backup catalog entries
		/// </summary>
		public ITable<SYS_DATABASES_MBackupCatalogFile>                   MBackupCatalogFiles                    { get { return this.GetTable<SYS_DATABASES_MBackupCatalogFile>(); } }
		/// <summary>
		/// Backup configuration statistics
		/// </summary>
		public ITable<SYS_DATABASES_MBackupConfiguration>                 MBackupConfigurations                  { get { return this.GetTable<SYS_DATABASES_MBackupConfiguration>(); } }
		/// <summary>
		/// Progress of the most recent backup
		/// </summary>
		public ITable<SYS_DATABASES_MBackupProgress>                      MBackupProgresses                      { get { return this.GetTable<SYS_DATABASES_MBackupProgress>(); } }
		/// <summary>
		/// Estimated size of the next data backup
		/// </summary>
		public ITable<SYS_DATABASES_MBackupSizeEstimation>                MBackupSizeEstimations                 { get { return this.GetTable<SYS_DATABASES_MBackupSizeEstimation>(); } }
		/// <summary>
		/// Semaphore statistics
		/// </summary>
		public ITable<SYS_DATABASES_MConditionalVariable>                 MConditionalVariables                  { get { return this.GetTable<SYS_DATABASES_MConditionalVariable>(); } }
		/// <summary>
		/// Semaphore statistics
		/// </summary>
		public ITable<SYS_DATABASES_MConditionalVariablesReset>           MConditionalVariablesResets            { get { return this.GetTable<SYS_DATABASES_MConditionalVariablesReset>(); } }
		/// <summary>
		/// Detailed information on connections between a client and database. Information includes connection status, client information, connection type, resource utilization
		/// </summary>
		public ITable<SYS_DATABASES_MConnection>                          MConnections                           { get { return this.GetTable<SYS_DATABASES_MConnection>(); } }
		/// <summary>
		/// ContainerDirectory statistics
		/// </summary>
		public ITable<SYS_DATABASES_MContainerDirectory>                  MContainerDirectories                  { get { return this.GetTable<SYS_DATABASES_MContainerDirectory>(); } }
		/// <summary>
		/// ContainerNameDirectory statistics
		/// </summary>
		public ITable<SYS_DATABASES_MContainerNameDirectory>              MContainerNameDirectories              { get { return this.GetTable<SYS_DATABASES_MContainerNameDirectory>(); } }
		/// <summary>
		/// Converter statistics
		/// </summary>
		public ITable<SYS_DATABASES_MConverterStatistic>                  MConverterStatistics                   { get { return this.GetTable<SYS_DATABASES_MConverterStatistic>(); } }
		/// <summary>
		/// Converter statistics
		/// </summary>
		public ITable<SYS_DATABASES_MConverterStatisticsReset>            MConverterStatisticsResets             { get { return this.GetTable<SYS_DATABASES_MConverterStatisticsReset>(); } }
		/// <summary>
		/// Statistics of customizable functionalities
		/// </summary>
		public ITable<SYS_DATABASES_MCustomizableFUNCTIONALITy>           MCustomizableFunctionalities           { get { return this.GetTable<SYS_DATABASES_MCustomizableFUNCTIONALITy>(); } }
		/// <summary>
		/// Overview of currently active database replicas where this is either source or target database
		/// </summary>
		public ITable<SYS_DATABASES_MDatabaseReplica>                     MDatabaseReplicas                      { get { return this.GetTable<SYS_DATABASES_MDatabaseReplica>(); } }
		/// <summary>
		/// Service statistics of currently active database replicas
		/// </summary>
		public ITable<SYS_DATABASES_MDatabaseReplicaStatistic>            MDatabaseReplicaStatistics             { get { return this.GetTable<SYS_DATABASES_MDatabaseReplicaStatistic>(); } }
		/// <summary>
		/// DataVolume statistics
		/// </summary>
		public ITable<SYS_DATABASES_MDataVolume>                          MDataVolumes                           { get { return this.GetTable<SYS_DATABASES_MDataVolume>(); } }
		/// <summary>
		/// FreeBlockManager SizeClass statistics
		/// </summary>
		public ITable<SYS_DATABASES_MDataVolumePageStatistic>             MDataVolumePageStatistics              { get { return this.GetTable<SYS_DATABASES_MDataVolumePageStatistic>(); } }
		/// <summary>
		/// FreeBlockManager SizeClass statistics
		/// </summary>
		public ITable<SYS_DATABASES_MDataVolumePageStatisticsReset>       MDataVolumePageStatisticsResets        { get { return this.GetTable<SYS_DATABASES_MDataVolumePageStatisticsReset>(); } }
		/// <summary>
		/// FreeBlockManager Superblock statistics
		/// </summary>
		public ITable<SYS_DATABASES_MDataVolumeSuperblockStatistic>       MDataVolumeSuperblockStatistics        { get { return this.GetTable<SYS_DATABASES_MDataVolumeSuperblockStatistic>(); } }
		/// <summary>
		/// Disk usage information on host basis group by usage_types
		/// </summary>
		public ITable<SYS_DATABASES_MDiskUsage>                           MDiskUsages                            { get { return this.GetTable<SYS_DATABASES_MDiskUsage>(); } }
		public ITable<_SYS_XB_MessagingDestination>                       MessagingDestinations0                 { get { return this.GetTable<_SYS_XB_MessagingDestination>(); } }
		public ITable<_SYS_XB_MessagingDestinations>                      MessagingDestinations1                 { get { return this.GetTable<_SYS_XB_MessagingDestinations>(); } }
		public ITable<_SYS_XB_MessagingSubscription>                      MessagingSubscriptions0                { get { return this.GetTable<_SYS_XB_MessagingSubscription>(); } }
		public ITable<_SYS_XB_MessagingSubscriptions>                     MessagingSubscriptions1                { get { return this.GetTable<_SYS_XB_MessagingSubscriptions>(); } }
		/// <summary>
		/// Information about replicated services
		/// </summary>
		public ITable<SYS_DATABASES_MEsServiceReplication>                MEsServiceReplications                 { get { return this.GetTable<SYS_DATABASES_MEsServiceReplication>(); } }
		/// <summary>
		/// Internal events
		/// </summary>
		public ITable<SYS_DATABASES_MEvent>                               MEvents                                { get { return this.GetTable<SYS_DATABASES_MEvent>(); } }
		/// <summary>
		/// Garbage collection/history manager statistics
		/// </summary>
		public ITable<SYS_DATABASES_MGarbageCollectionStatistic>          MGarbageCollectionStatistics           { get { return this.GetTable<SYS_DATABASES_MGarbageCollectionStatistic>(); } }
		/// <summary>
		/// Garbage collection/history manager statistics
		/// </summary>
		public ITable<SYS_DATABASES_MGarbageCollectionStatisticsReset>    MGarbageCollectionStatisticsResets     { get { return this.GetTable<SYS_DATABASES_MGarbageCollectionStatisticsReset>(); } }
		/// <summary>
		/// Memory allocator statistics
		/// </summary>
		public ITable<SYS_DATABASES_MHeapMemory>                          MHeapMemories                          { get { return this.GetTable<SYS_DATABASES_MHeapMemory>(); } }
		/// <summary>
		/// Memory allocator statistics
		/// </summary>
		public ITable<SYS_DATABASES_MHeapMemoryReset>                     MHeapMemoryResets                      { get { return this.GetTable<SYS_DATABASES_MHeapMemoryReset>(); } }
		/// <summary>
		/// Host resource utilization, CPU time is in milliseconds and added across all cores since system start
		/// </summary>
		public ITable<SYS_DATABASES_MHostResourceUtilization>             MHostResourceUtilizations              { get { return this.GetTable<SYS_DATABASES_MHostResourceUtilization>(); } }
		/// <summary>
		/// Configuration information from inifiles
		/// </summary>
		public ITable<SYS_DATABASES_MInifileContent>                      MInifileContents                       { get { return this.GetTable<SYS_DATABASES_MInifileContent>(); } }
		/// <summary>
		/// Product usage measurements for licensing
		/// </summary>
		public ITable<SYS_DATABASES_MLicenseMeasurement>                  MLicenseMeasurements                   { get { return this.GetTable<SYS_DATABASES_MLicenseMeasurement>(); } }
		/// <summary>
		/// License measurement statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLicenseMeasurementStatistic>         MLicenseMeasurementStatistics          { get { return this.GetTable<SYS_DATABASES_MLicenseMeasurementStatistic>(); } }
		/// <summary>
		/// Log buffer statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogBuffer>                           MLogBuffers                            { get { return this.GetTable<SYS_DATABASES_MLogBuffer>(); } }
		/// <summary>
		/// Log buffer statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogBuffersReset>                     MLogBuffersResets                      { get { return this.GetTable<SYS_DATABASES_MLogBuffersReset>(); } }
		/// <summary>
		/// Log partition statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogPartition>                        MLogPartitions                         { get { return this.GetTable<SYS_DATABASES_MLogPartition>(); } }
		/// <summary>
		/// Log partition statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogPartitionsReset>                  MLogPartitionsResets                   { get { return this.GetTable<SYS_DATABASES_MLogPartitionsReset>(); } }
		/// <summary>
		/// Log replay queue statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogReplayQueueStatistic>             MLogReplayQueueStatistics              { get { return this.GetTable<SYS_DATABASES_MLogReplayQueueStatistic>(); } }
		/// <summary>
		/// Log replay queue statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogReplayQueueStatisticsReset>       MLogReplayQueueStatisticsResets        { get { return this.GetTable<SYS_DATABASES_MLogReplayQueueStatisticsReset>(); } }
		/// <summary>
		/// Log segment statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogSegment>                          MLogSegments                           { get { return this.GetTable<SYS_DATABASES_MLogSegment>(); } }
		/// <summary>
		/// Log segment statistics
		/// </summary>
		public ITable<SYS_DATABASES_MLogSegmentsReset>                    MLogSegmentsResets                     { get { return this.GetTable<SYS_DATABASES_MLogSegmentsReset>(); } }
		/// <summary>
		/// Memory object statistics
		/// </summary>
		public ITable<SYS_DATABASES_MMemoryObject>                        MMemoryObjects                         { get { return this.GetTable<SYS_DATABASES_MMemoryObject>(); } }
		/// <summary>
		/// Disposition specific memory object statistics. The statistics are calculated and reading them may take a while.
		/// </summary>
		public ITable<SYS_DATABASES_MMemoryObjectDisposition>             MMemoryObjectDispositions              { get { return this.GetTable<SYS_DATABASES_MMemoryObjectDisposition>(); } }
		/// <summary>
		/// Memory object statistics
		/// </summary>
		public ITable<SYS_DATABASES_MMemoryObjectsReset>                  MMemoryObjectsResets                   { get { return this.GetTable<SYS_DATABASES_MMemoryObjectsReset>(); } }
		/// <summary>
		/// Mutex statistics
		/// </summary>
		public ITable<SYS_DATABASES_MMutex>                               MMutexes                               { get { return this.GetTable<SYS_DATABASES_MMutex>(); } }
		/// <summary>
		/// Mutex statistics
		/// </summary>
		public ITable<SYS_DATABASES_MMutexesReset>                        MMutexesResets                         { get { return this.GetTable<SYS_DATABASES_MMutexesReset>(); } }
		/// <summary>
		/// PageAccess statistics
		/// </summary>
		public ITable<SYS_DATABASES_MPageaccessStatistic>                 MPageaccessStatistics                  { get { return this.GetTable<SYS_DATABASES_MPageaccessStatistic>(); } }
		/// <summary>
		/// PageAccess statistics
		/// </summary>
		public ITable<SYS_DATABASES_MPageaccessStatisticsReset>           MPageaccessStatisticsResets            { get { return this.GetTable<SYS_DATABASES_MPageaccessStatisticsReset>(); } }
		/// <summary>
		/// Information about encryption page keys
		/// </summary>
		public ITable<SYS_DATABASES_MPersistenceEncryptionKey>            MPersistenceEncryptionKeys             { get { return this.GetTable<SYS_DATABASES_MPersistenceEncryptionKey>(); } }
		/// <summary>
		/// Information about persistence encryption
		/// </summary>
		public ITable<SYS_DATABASES_MPersistenceEncryptionStatus>         MPersistenceEncryptionStatus           { get { return this.GetTable<SYS_DATABASES_MPersistenceEncryptionStatus>(); } }
		/// <summary>
		/// Persistence manager statistics
		/// </summary>
		public ITable<SYS_DATABASES_MPersistenceManager>                  MPersistenceManagers                   { get { return this.GetTable<SYS_DATABASES_MPersistenceManager>(); } }
		/// <summary>
		/// Persistence manager statistics
		/// </summary>
		public ITable<SYS_DATABASES_MPersistenceManagersReset>            MPersistenceManagersResets             { get { return this.GetTable<SYS_DATABASES_MPersistenceManagersReset>(); } }
		/// <summary>
		/// Read/Write lock statistics
		/// </summary>
		public ITable<SYS_DATABASES_MReadwritelock>                       MReadwritelocks                        { get { return this.GetTable<SYS_DATABASES_MReadwritelock>(); } }
		/// <summary>
		/// Read/Write lock statistics
		/// </summary>
		public ITable<SYS_DATABASES_MReadwritelocksReset>                 MReadwritelocksResets                  { get { return this.GetTable<SYS_DATABASES_MReadwritelocksReset>(); } }
		/// <summary>
		/// Progress of the most recent tenant recoveries
		/// </summary>
		public ITable<SYS_DATABASES_MRecoveryProgress>                    MRecoveryProgresses                    { get { return this.GetTable<SYS_DATABASES_MRecoveryProgress>(); } }
		/// <summary>
		/// RS Memory Statistics
		/// </summary>
		public ITable<SYS_DATABASES_MRsMemory>                            MRsMemories                            { get { return this.GetTable<SYS_DATABASES_MRsMemory>(); } }
		/// <summary>
		/// Current and historical savepoint statistics
		/// </summary>
		public ITable<SYS_DATABASES_MSavepoint>                           MSavepoints                            { get { return this.GetTable<SYS_DATABASES_MSavepoint>(); } }
		/// <summary>
		/// Savepoint statistics
		/// </summary>
		public ITable<SYS_DATABASES_MSavepointStatistic>                  MSavepointStatistics                   { get { return this.GetTable<SYS_DATABASES_MSavepointStatistic>(); } }
		/// <summary>
		/// Savepoint statistics
		/// </summary>
		public ITable<SYS_DATABASES_MSavepointStatisticsReset>            MSavepointStatisticsResets             { get { return this.GetTable<SYS_DATABASES_MSavepointStatisticsReset>(); } }
		/// <summary>
		/// Deprecated: please check ENCRYPTION_ROOT_KEYS
		/// </summary>
		public ITable<SYS_DATABASES_MSecurestore>                         MSecurestores                          { get { return this.GetTable<SYS_DATABASES_MSecurestore>(); } }
		/// <summary>
		/// Semaphore statistics
		/// </summary>
		public ITable<SYS_DATABASES_MSemaphore>                           MSemaphores                            { get { return this.GetTable<SYS_DATABASES_MSemaphore>(); } }
		/// <summary>
		/// Semaphore statistics
		/// </summary>
		public ITable<SYS_DATABASES_MSemaphoresReset>                     MSemaphoresResets                      { get { return this.GetTable<SYS_DATABASES_MSemaphoresReset>(); } }
		/// <summary>
		/// Status of all services
		/// </summary>
		public ITable<SYS_DATABASES_MService>                             MServices                              { get { return this.GetTable<SYS_DATABASES_MService>(); } }
		/// <summary>
		/// Service-specific memory usage by logical component
		/// </summary>
		public ITable<SYS_DATABASES_MServiceComponentMemory>              MServiceComponentMemories              { get { return this.GetTable<SYS_DATABASES_MServiceComponentMemory>(); } }
		/// <summary>
		/// Detailed information on memory utilization by services
		/// </summary>
		public ITable<SYS_DATABASES_MServiceMemory>                       MServiceMemories                       { get { return this.GetTable<SYS_DATABASES_MServiceMemory>(); } }
		/// <summary>
		/// Service network I/O statistics
		/// </summary>
		public ITable<SYS_DATABASES_MServiceNetworkIo>                    MServiceNetworkIos                     { get { return this.GetTable<SYS_DATABASES_MServiceNetworkIo>(); } }
		/// <summary>
		/// Service network I/O statistics
		/// </summary>
		public ITable<SYS_DATABASES_MServiceNetworkIoReset>               MServiceNetworkIoResets                { get { return this.GetTable<SYS_DATABASES_MServiceNetworkIoReset>(); } }
		/// <summary>
		/// Information about replicated services
		/// </summary>
		public ITable<SYS_DATABASES_MServiceReplication>                  MServiceReplications                   { get { return this.GetTable<SYS_DATABASES_MServiceReplication>(); } }
		/// <summary>
		/// Statistics on active services
		/// </summary>
		public ITable<SYS_DATABASES_MServiceStatistic>                    MServiceStatistics                     { get { return this.GetTable<SYS_DATABASES_MServiceStatistic>(); } }
		/// <summary>
		/// Existing snapshots
		/// </summary>
		public ITable<SYS_DATABASES_MSnapshot>                            MSnapshots                             { get { return this.GetTable<SYS_DATABASES_MSnapshot>(); } }
		/// <summary>
		/// Information about replicated systems and databases
		/// </summary>
		public ITable<SYS_DATABASES_MSystemReplication>                   MSystemReplications                    { get { return this.GetTable<SYS_DATABASES_MSystemReplication>(); } }
		/// <summary>
		/// Global MVCC Timestamp history in secondary site of System Replication
		/// </summary>
		public ITable<SYS_DATABASES_MSystemReplicationMvccHistory>        MSystemReplicationMvccHistories        { get { return this.GetTable<SYS_DATABASES_MSystemReplicationMvccHistory>(); } }
		/// <summary>
		/// All trace files
		/// </summary>
		public ITable<SYS_DATABASES_MTracefile>                           MTracefiles                            { get { return this.GetTable<SYS_DATABASES_MTracefile>(); } }
		/// <summary>
		/// SAP HANA information from trace files
		/// </summary>
		public ITable<SYS_DATABASES_MTracefileContent>                    MTracefileContents                     { get { return this.GetTable<SYS_DATABASES_MTracefileContent>(); } }
		/// <summary>
		/// Information about undo files and cleanup files
		/// </summary>
		public ITable<SYS_DATABASES_MUndoCleanupFile>                     MUndoCleanupFiles                      { get { return this.GetTable<SYS_DATABASES_MUndoCleanupFile>(); } }
		/// <summary>
		/// Volumes used by SAP HANA servers
		/// </summary>
		public ITable<SYS_DATABASES_MVolume>                              MVolumes                               { get { return this.GetTable<SYS_DATABASES_MVolume>(); } }
		/// <summary>
		/// Information about volume files
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeFile>                          MVolumeFiles                           { get { return this.GetTable<SYS_DATABASES_MVolumeFile>(); } }
		/// <summary>
		/// File access detailed statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoDetailedStatistic>           MVolumeIoDetailedStatistics            { get { return this.GetTable<SYS_DATABASES_MVolumeIoDetailedStatistic>(); } }
		/// <summary>
		/// File access detailed statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoDetailedStatisticsReset>     MVolumeIoDetailedStatisticsResets      { get { return this.GetTable<SYS_DATABASES_MVolumeIoDetailedStatisticsReset>(); } }
		/// <summary>
		/// File access retry statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoRetryStatistic>              MVolumeIoRetryStatistics               { get { return this.GetTable<SYS_DATABASES_MVolumeIoRetryStatistic>(); } }
		/// <summary>
		/// File access retry statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoRetryStatisticsReset>        MVolumeIoRetryStatisticsResets         { get { return this.GetTable<SYS_DATABASES_MVolumeIoRetryStatisticsReset>(); } }
		/// <summary>
		/// File access total statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoTotalStatistic>              MVolumeIoTotalStatistics               { get { return this.GetTable<SYS_DATABASES_MVolumeIoTotalStatistic>(); } }
		/// <summary>
		/// File access total statistics
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeIoTotalStatisticsReset>        MVolumeIoTotalStatisticsResets         { get { return this.GetTable<SYS_DATABASES_MVolumeIoTotalStatisticsReset>(); } }
		/// <summary>
		/// Volume sizes used by SAP HANA servers
		/// </summary>
		public ITable<SYS_DATABASES_MVolumeSize>                          MVolumeSizes                           { get { return this.GetTable<SYS_DATABASES_MVolumeSize>(); } }
		/// <summary>
		/// Database workload collected every minute
		/// </summary>
		public ITable<SYS_DATABASES_MWorkload>                            MWorkloads                             { get { return this.GetTable<SYS_DATABASES_MWorkload>(); } }
		/// <summary>
		/// List of URLs under which this database can be reached.
		/// </summary>
		public ITable<SYS_DATABASES_MXsPublicUrl>                         MXsPublicUrls                          { get { return this.GetTable<SYS_DATABASES_MXsPublicUrl>(); } }
		public ITable<_SYS_XS_OauthAccessToken>                           OauthAccessTokens                      { get { return this.GetTable<_SYS_XS_OauthAccessToken>(); } }
		public ITable<_SYS_XS_OauthAccessTokenScope>                      OauthAccessTokenScopes                 { get { return this.GetTable<_SYS_XS_OauthAccessTokenScope>(); } }
		public ITable<_SYS_XS_OauthAppConfig>                             OauthAppConfigs                        { get { return this.GetTable<_SYS_XS_OauthAppConfig>(); } }
		public ITable<_SYS_XS_OauthAppConfigScope>                        OauthAppConfigScopes                   { get { return this.GetTable<_SYS_XS_OauthAppConfigScope>(); } }
		public ITable<_SYS_XS_OauthClientConfig>                          OauthClientConfigs                     { get { return this.GetTable<_SYS_XS_OauthClientConfig>(); } }
		public ITable<_SYS_XS_OauthClientFlavor>                          OauthClientFlavors                     { get { return this.GetTable<_SYS_XS_OauthClientFlavor>(); } }
		public ITable<_SYS_XS_OdataService>                               OdataServices                          { get { return this.GetTable<_SYS_XS_OdataService>(); } }
		public ITable<_SYS_SQL_ANALYZER_OperatorDetail>                   OperatorDetails0                       { get { return this.GetTable<_SYS_SQL_ANALYZER_OperatorDetail>(); } }
		public ITable<_SYS_SQL_ANALYZER_OperatorDetails>                  OperatorDetails1                       { get { return this.GetTable<_SYS_SQL_ANALYZER_OperatorDetails>(); } }
		public ITable<_SYS_SQL_ANALYZER_OperatorStatistic>                OperatorStatistics0                    { get { return this.GetTable<_SYS_SQL_ANALYZER_OperatorStatistic>(); } }
		public ITable<_SYS_SQL_ANALYZER_OperatorStatistics>               OperatorStatistics1                    { get { return this.GetTable<_SYS_SQL_ANALYZER_OperatorStatistics>(); } }
		/// <summary>
		/// Disposition specific memory object statistics. The statistics are calculated and reading them may take a while.
		/// </summary>
		public ITable<_SYS_TELEMETRY_OutOfMemoryEvent>                    OutOfMemoryEvents                      { get { return this.GetTable<_SYS_TELEMETRY_OutOfMemoryEvent>(); } }
		public ITable<Parent>                                             Parents                                { get { return this.GetTable<Parent>(); } }
		public ITable<ParentChildView>                                    ParentChildViews                       { get { return this.GetTable<ParentChildView>(); } }
		public ITable<ParentView>                                         ParentViews                            { get { return this.GetTable<ParentView>(); } }
		public ITable<Patient>                                            Patients                               { get { return this.GetTable<Patient>(); } }
		public ITable<_SYS_TASK_PendingDropTasks>                         PendingDropTasks                       { get { return this.GetTable<_SYS_TASK_PendingDropTasks>(); } }
		public ITable<Person>                                             People                                 { get { return this.GetTable<Person>(); } }
		public ITable<_SYS_AFL_PluginError>                               PluginErrors                           { get { return this.GetTable<_SYS_AFL_PluginError>(); } }
		public ITable<_SYS_RT_PpAAlgorithm>                               PpAAlgorithms                          { get { return this.GetTable<_SYS_RT_PpAAlgorithm>(); } }
		public ITable<_SYS_RT_PpACha>                                     PpAChas                                { get { return this.GetTable<_SYS_RT_PpACha>(); } }
		public ITable<_SYS_RT_PpADatacontainer>                           PpADatacontainers                      { get { return this.GetTable<_SYS_RT_PpADatacontainer>(); } }
		public ITable<_SYS_RT_PpAKyf>                                     PpAKyfs                                { get { return this.GetTable<_SYS_RT_PpAKyf>(); } }
		public ITable<_SYS_RT_PpASession>                                 PpASessions                            { get { return this.GetTable<_SYS_RT_PpASession>(); } }
		public ITable<PrdGlobalEccCvMara>                                 PrdGlobalEccCvMaras                    { get { return this.GetTable<PrdGlobalEccCvMara>(); } }
		public ITable<_SYS_XS_RuntimeConfiguration>                       RuntimeConfigurations                  { get { return this.GetTable<_SYS_XS_RuntimeConfiguration>(); } }
		public ITable<_SYS_XS_RuntimeJsonExtension>                       RuntimeJsonExtensions                  { get { return this.GetTable<_SYS_XS_RuntimeJsonExtension>(); } }
		public ITable<_SYS_XS_RuntimeJsonObject>                          RuntimeJsonObjects                     { get { return this.GetTable<_SYS_XS_RuntimeJsonObject>(); } }
		public ITable<_SYS_XS_SamlProviderConfig>                         SamlProviderConfigs                    { get { return this.GetTable<_SYS_XS_SamlProviderConfig>(); } }
		public ITable<SapHana>                                            SapHanas                               { get { return this.GetTable<SapHana>(); } }
		public ITable<_SYS_RT_SearchRuleSet>                              SearchRuleSets                         { get { return this.GetTable<_SYS_RT_SearchRuleSet>(); } }
		public ITable<_SYS_XS_SecureStore>                                SecureStores                           { get { return this.GetTable<_SYS_XS_SecureStore>(); } }
		public ITable<_SYS_XS_SecureStoreList>                            SecureStoreLists                       { get { return this.GetTable<_SYS_XS_SecureStoreList>(); } }
		/// <summary>
		/// Telemetry Server Information
		/// </summary>
		public ITable<_SYS_TELEMETRY_SERVER>                              Servers                                { get { return this.GetTable<_SYS_TELEMETRY_SERVER>(); } }
		/// <summary>
		/// Detailed information on memory utilization by services
		/// </summary>
		public ITable<_SYS_TELEMETRY_ServiceMemory>                       ServiceMemories                        { get { return this.GetTable<_SYS_TELEMETRY_ServiceMemory>(); } }
		public ITable<_SYS_XS_SqlConnection>                              SqlConnections                         { get { return this.GetTable<_SYS_XS_SqlConnection>(); } }
		/// <summary>
		/// This table contains messages generated by start task command
		/// </summary>
		public ITable<_SYS_TASK_StartTaskMessage>                         StartTaskMessages0                     { get { return this.GetTable<_SYS_TASK_StartTaskMessage>(); } }
		public ITable<_SYS_TASK_StartTaskMessages>                        StartTaskMessages1                     { get { return this.GetTable<_SYS_TASK_StartTaskMessages>(); } }
		public ITable<_SYS_SQL_ANALYZER_StatementStatistic>               StatementStatistics0                   { get { return this.GetTable<_SYS_SQL_ANALYZER_StatementStatistic>(); } }
		public ITable<_SYS_SQL_ANALYZER_StatementStatistics>              StatementStatistics1                   { get { return this.GetTable<_SYS_SQL_ANALYZER_StatementStatistics>(); } }
		/// <summary>
		/// Alerts issued by the embedded statistics service
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsAlert>                      StatisticsAlerts                       { get { return this.GetTable<SYS_DATABASES_StatisticsAlert>(); } }
		/// <summary>
		/// Definition of alert thresholds for checks of the embedded statistics service
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsAlertThreshold>             StatisticsAlertThresholds              { get { return this.GetTable<SYS_DATABASES_StatisticsAlertThreshold>(); } }
		/// <summary>
		/// Alerts issued by checks during their most recently scheduled execution
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsCurrentAlert>               StatisticsCurrentAlerts                { get { return this.GetTable<SYS_DATABASES_StatisticsCurrentAlert>(); } }
		/// <summary>
		/// Memory allocator statistics
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostHeapAllocator>          StatisticsHostHeapAllocators           { get { return this.GetTable<SYS_DATABASES_StatisticsHostHeapAllocator>(); } }
		/// <summary>
		/// RS Memory Statistics
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostRsMemory>               StatisticsHostRsMemories               { get { return this.GetTable<SYS_DATABASES_StatisticsHostRsMemory>(); } }
		/// <summary>
		/// Service-specific memory usage by logical component
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostServiceComponentMemory> StatisticsHostServiceComponentMemories { get { return this.GetTable<SYS_DATABASES_StatisticsHostServiceComponentMemory>(); } }
		/// <summary>
		/// Detailed information on memory utilization by services
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostServiceMemory>          StatisticsHostServiceMemories          { get { return this.GetTable<SYS_DATABASES_StatisticsHostServiceMemory>(); } }
		/// <summary>
		/// Information about replicated services
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostServiceReplication>     StatisticsHostServiceReplications      { get { return this.GetTable<SYS_DATABASES_StatisticsHostServiceReplication>(); } }
		/// <summary>
		/// File access total statistics
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsHostVolumeIoTotalStatistic> StatisticsHostVolumeIoTotalStatistics  { get { return this.GetTable<SYS_DATABASES_StatisticsHostVolumeIoTotalStatistic>(); } }
		/// <summary>
		/// The frequency with which checks, collectors, and special functions are called by the scheduler of the embedded statistics service
		/// </summary>
		public ITable<SYS_DATABASES_StatisticsSchedule>                   StatisticsSchedules                    { get { return this.GetTable<SYS_DATABASES_StatisticsSchedule>(); } }
		public ITable<_SYS_SECURITY_SysObjectPrivilege>                   SysObjectPrivileges                    { get { return this.GetTable<_SYS_SECURITY_SysObjectPrivilege>(); } }
		public ITable<_SYS_SECURITY_SysPasswordBlacklist>                 SysPasswordBlacklists                  { get { return this.GetTable<_SYS_SECURITY_SysPasswordBlacklist>(); } }
		/// <summary>
		/// Overview of system status including important resource usage information and alerts
		/// </summary>
		public ITable<_SYS_TELEMETRY_SystemOverview>                      SystemOverviews                        { get { return this.GetTable<_SYS_TELEMETRY_SystemOverview>(); } }
		/// <summary>
		/// Provides the client mapping when a task is created by the ABAP API
		/// </summary>
		public ITable<_SYS_TASK_TaskClientMapping0>                       TaskClientMappings                     { get { return this.GetTable<_SYS_TASK_TaskClientMapping0>(); } }
		public ITable<_SYS_TASK_TaskClientMapping1>                       TaskClientMapping                      { get { return this.GetTable<_SYS_TASK_TaskClientMapping1>(); } }
		/// <summary>
		/// Defines the columns present in a particular table
		/// </summary>
		public ITable<_SYS_TASK_TaskColumnDefinition>                     TaskColumnDefinitions0                 { get { return this.GetTable<_SYS_TASK_TaskColumnDefinition>(); } }
		public ITable<_SYS_TASK_TaskColumnDefinitions>                    TaskColumnDefinitions1                 { get { return this.GetTable<_SYS_TASK_TaskColumnDefinitions>(); } }
		/// <summary>
		/// Task Execution Statistics.
		/// </summary>
		public ITable<_SYS_TASK_TaskExecution>                            TaskExecutions0                        { get { return this.GetTable<_SYS_TASK_TaskExecution>(); } }
		public ITable<_SYS_TASK_TaskExecutions>                           TaskExecutions1                        { get { return this.GetTable<_SYS_TASK_TaskExecutions>(); } }
		/// <summary>
		/// Contains localized values for the task framework tables
		/// </summary>
		public ITable<_SYS_TASK_TaskLocalization0>                        TaskLocalizations                      { get { return this.GetTable<_SYS_TASK_TaskLocalization0>(); } }
		public ITable<_SYS_TASK_TaskLocalization1>                        TaskLocalization                       { get { return this.GetTable<_SYS_TASK_TaskLocalization1>(); } }
		/// <summary>
		/// Contains all operations and details about those operations that exist for a given task
		/// </summary>
		public ITable<_SYS_TASK_TaskOperation>                            TaskOperations0                        { get { return this.GetTable<_SYS_TASK_TaskOperation>(); } }
		public ITable<_SYS_TASK_TaskOperations>                           TaskOperations1                        { get { return this.GetTable<_SYS_TASK_TaskOperations>(); } }
		/// <summary>
		/// Task Operations Execution Statistics
		/// </summary>
		public ITable<_SYS_TASK_TaskOperationsExecution>                  TaskOperationsExecutions0              { get { return this.GetTable<_SYS_TASK_TaskOperationsExecution>(); } }
		public ITable<_SYS_TASK_TaskOperationsExecutions>                 TaskOperationsExecutions1              { get { return this.GetTable<_SYS_TASK_TaskOperationsExecutions>(); } }
		/// <summary>
		/// Task Partition Statistics.
		/// </summary>
		public ITable<_SYS_TASK_TaskPartitionExecution>                   TaskPartitionExecutions0               { get { return this.GetTable<_SYS_TASK_TaskPartitionExecution>(); } }
		public ITable<_SYS_TASK_TaskPartitionExecutions>                  TaskPartitionExecutions1               { get { return this.GetTable<_SYS_TASK_TaskPartitionExecutions>(); } }
		/// <summary>
		/// Contains all of the tables used by the various side-effect producing operations
		/// </summary>
		public ITable<_SYS_TASK_TaskTableDefinition>                      TaskTableDefinitions0                  { get { return this.GetTable<_SYS_TASK_TaskTableDefinition>(); } }
		public ITable<_SYS_TASK_TaskTableDefinitions>                     TaskTableDefinitions1                  { get { return this.GetTable<_SYS_TASK_TaskTableDefinitions>(); } }
		/// <summary>
		/// Defines the relationships (if any) between tables within an operation
		/// </summary>
		public ITable<_SYS_TASK_TaskTableRelationship>                    TaskTableRelationships0                { get { return this.GetTable<_SYS_TASK_TaskTableRelationship>(); } }
		public ITable<_SYS_TASK_TaskTableRelationships>                   TaskTableRelationships1                { get { return this.GetTable<_SYS_TASK_TaskTableRelationships>(); } }
		/// <summary>
		/// Last Telemetry Client Information
		/// </summary>
		public ITable<_SYS_TELEMETRY_TelemetryClient>                     TelemetryClients                       { get { return this.GetTable<_SYS_TELEMETRY_TelemetryClient>(); } }
		/// <summary>
		/// Telemetry inifile section
		/// </summary>
		public ITable<_SYS_TELEMETRY_TelemetryInifile>                    TelemetryInifiles                      { get { return this.GetTable<_SYS_TELEMETRY_TelemetryInifile>(); } }
		/// <summary>
		/// General HANA feature usage information
		/// </summary>
		public ITable<_SYS_TELEMETRY_TelHanaUsage>                        TelHanaUsages                          { get { return this.GetTable<_SYS_TELEMETRY_TelHanaUsage>(); } }
		public ITable<Test>                                               Tests                                  { get { return this.GetTable<Test>(); } }
		public ITable<TestIdentity>                                       TestIdentities                         { get { return this.GetTable<TestIdentity>(); } }
		public ITable<Testmerge1>                                         Testmerge1                             { get { return this.GetTable<Testmerge1>(); } }
		public ITable<TestMerge1>                                         TestMerge1                             { get { return this.GetTable<TestMerge1>(); } }
		public ITable<Testmerge2>                                         Testmerge2                             { get { return this.GetTable<Testmerge2>(); } }
		public ITable<TestMerge2>                                         TestMerge2                             { get { return this.GetTable<TestMerge2>(); } }
		public ITable<_SYS_RT_TiImportKey>                                TiImportKeys                           { get { return this.GetTable<_SYS_RT_TiImportKey>(); } }
		public ITable<_SYS_RT_UisAppsite>                                 UisAppsites                            { get { return this.GetTable<_SYS_RT_UisAppsite>(); } }
		public ITable<_SYS_RT_UisAppsitePROPERTy>                         UisAppsiteProperties                   { get { return this.GetTable<_SYS_RT_UisAppsitePROPERTy>(); } }
		public ITable<_SYS_RT_UisAuditLog>                                UisAuditLogs                           { get { return this.GetTable<_SYS_RT_UisAuditLog>(); } }
		public ITable<_SYS_RT_UisPage>                                    UisPages                               { get { return this.GetTable<_SYS_RT_UisPage>(); } }
		public ITable<_SYS_RT_UisPagePROPERTy>                            UisPageProperties                      { get { return this.GetTable<_SYS_RT_UisPagePROPERTy>(); } }
		public ITable<_SYS_RT_UisUserAppsite>                             UisUserAppsites                        { get { return this.GetTable<_SYS_RT_UisUserAppsite>(); } }
		public ITable<_SYS_RT_UisUserAppsitePROPERTy>                     UisUserAppsiteProperties               { get { return this.GetTable<_SYS_RT_UisUserAppsitePROPERTy>(); } }
		public ITable<_SYS_RT_UisUserPage>                                UisUserPages                           { get { return this.GetTable<_SYS_RT_UisUserPage>(); } }
		public ITable<_SYS_RT_UisUserPagePROPERTy>                        UisUserPageProperties                  { get { return this.GetTable<_SYS_RT_UisUserPagePROPERTy>(); } }
		public ITable<_SYS_RT_UisUserWidget>                              UisUserWidgets                         { get { return this.GetTable<_SYS_RT_UisUserWidget>(); } }
		public ITable<_SYS_RT_UisUserWidgetPROPERTy>                      UisUserWidgetProperties                { get { return this.GetTable<_SYS_RT_UisUserWidgetPROPERTy>(); } }
		public ITable<_SYS_RT_UisWidget>                                  UisWidgets                             { get { return this.GetTable<_SYS_RT_UisWidget>(); } }
		public ITable<_SYS_RT_UisWidgetPROPERTy>                          UisWidgetProperties                    { get { return this.GetTable<_SYS_RT_UisWidgetPROPERTy>(); } }
		public ITable<_SYS_RT_UisWidgetTemplate>                          UisWidgetTemplates                     { get { return this.GetTable<_SYS_RT_UisWidgetTemplate>(); } }
		public ITable<_SYS_RT_UisWidgetTemplateList>                      UisWidgetTemplateLists                 { get { return this.GetTable<_SYS_RT_UisWidgetTemplateList>(); } }
		public ITable<_SYS_RT_UisWidgetTemplatePROPERTy>                  UisWidgetTemplateProperties            { get { return this.GetTable<_SYS_RT_UisWidgetTemplatePROPERTy>(); } }
		public ITable<_SYS_XS_UsageMeasuringObject>                       UsageMeasuringObjects                  { get { return this.GetTable<_SYS_XS_UsageMeasuringObject>(); } }
		public ITable<_SYS_XS_UsageStatistic>                             UsageStatistics                        { get { return this.GetTable<_SYS_XS_UsageStatistic>(); } }
		public ITable<_SYS_XS_XsjsUsage>                                  XsjsUsages                             { get { return this.GetTable<_SYS_XS_XsjsUsage>(); } }

		public SYSTEMDBDB()
		{
			InitDataContext();
			InitMappingSchema();
		}

		public SYSTEMDBDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
			InitMappingSchema();
		}

		partial void InitDataContext  ();
		partial void InitMappingSchema();

		#region Table Functions

		#region SeriesGenerateBigint

		#endregion

		#region SeriesGenerateInteger

		#endregion

		#region SeriesGenerateSmallint

		#endregion

		#region SeriesGenerateTinyint

		#endregion

		#region SeriesGenerateDecimal

		#endregion

		#region SeriesGenerateSmalldecimal

		#endregion

		#region SeriesGenerateTimestamp

		#endregion

		#region SeriesGenerateSeconddate

		#endregion

		#region SeriesGenerateDate

		#endregion

		#region SeriesDisaggregateBigint

		#endregion

		#region SeriesDisaggregateInteger

		#endregion

		#region SeriesDisaggregateSmallint

		#endregion

		#region SeriesDisaggregateTinyint

		#endregion

		#region SeriesDisaggregateDecimal

		#endregion

		#region SeriesDisaggregateSmalldecimal

		#endregion

		#region SeriesDisaggregateTimestamp

		#endregion

		#region SeriesDisaggregateSeconddate

		#endregion

		#region SeriesDisaggregateDate

		#endregion

		#region PeGetTraceObjects

		#endregion

		#region CdsArtifactDefinition

		#endregion

		#region TextAccessor

		#endregion

		#region MultiTextAccessor

		#endregion

		#region GetParentByID

		#endregion

		#region GetParentByID

		[Sql.TableFunction(Schema="TESTHANA", Name="GetParentByID")]
		public ITable<Parent> GetParentByID(int? ID)
		{
			return this.GetTable<Parent>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				ID);
		}

		#endregion

		#endregion
	}

	[Table(Schema="TESTHANA", Name="AllTypes")]
	public partial class AllType
	{
		[Column(),                       PrimaryKey, Identity] public int       ID                   { get; set; } // INTEGER
		[Column("bigintDataType"),       Nullable            ] public long?     BigintDataType       { get; set; } // BIGINT
		[Column("smallintDataType"),     Nullable            ] public short?    SmallintDataType     { get; set; } // SMALLINT
		[Column("decimalDataType"),      Nullable            ] public decimal?  DecimalDataType      { get; set; } // DECIMAL(34, 0)
		[Column("smalldecimalDataType"), Nullable            ] public decimal?  SmalldecimalDataType { get; set; } // SMALLDECIMAL(16, 0)
		[Column("intDataType"),          Nullable            ] public int?      IntDataType          { get; set; } // INTEGER
		[Column("tinyintDataType"),      Nullable            ] public byte?     TinyintDataType      { get; set; } // TINYINT
		[Column("floatDataType"),        Nullable            ] public double?   FloatDataType        { get; set; } // DOUBLE
		[Column("realDataType"),         Nullable            ] public float?    RealDataType         { get; set; } // REAL
		[Column("dateDataType"),         Nullable            ] public DateTime? DateDataType         { get; set; } // DATE
		[Column("timeDataType"),         Nullable            ] public TimeSpan? TimeDataType         { get; set; } // TIME
		[Column("seconddateDataType"),   Nullable            ] public DateTime? SeconddateDataType   { get; set; } // SECONDDATE
		[Column("timestampDataType"),    Nullable            ] public DateTime? TimestampDataType    { get; set; } // TIMESTAMP
		[Column("charDataType"),         Nullable            ] public char?     CharDataType         { get; set; } // CHAR(1)
		[Column("char20DataType"),       Nullable            ] public string?   Char20DataType       { get; set; } // CHAR(20)
		[Column("varcharDataType"),      Nullable            ] public string?   VarcharDataType      { get; set; } // VARCHAR(20)
		[Column("textDataType"),         Nullable            ] public string?   TextDataType         { get; set; } // TEXT
		[Column("shorttextDataType"),    Nullable            ] public string?   ShorttextDataType    { get; set; } // SHORTTEXT
		[Column("ncharDataType"),        Nullable            ] public char?     NcharDataType        { get; set; } // NCHAR(1)
		[Column("nchar20DataType"),      Nullable            ] public string?   Nchar20DataType      { get; set; } // NCHAR(20)
		[Column("nvarcharDataType"),     Nullable            ] public string?   NvarcharDataType     { get; set; } // NVARCHAR(20)
		[Column("alphanumDataType"),     Nullable            ] public string?   AlphanumDataType     { get; set; } // ALPHANUM
		[Column("binaryDataType"),       Nullable            ] public byte[]?   BinaryDataType       { get; set; } // BINARY(10)
		[Column("varbinaryDataType"),    Nullable            ] public byte[]?   VarbinaryDataType    { get; set; } // VARBINARY(10)
		[Column("blobDataType"),         Nullable            ] public byte[]?   BlobDataType         { get; set; } // BLOB
		[Column("clobDataType"),         Nullable            ] public string?   ClobDataType         { get; set; } // CLOB
		[Column("nclobDataType"),        Nullable            ] public string?   NclobDataType        { get; set; } // NCLOB
	}

	[Table(Schema="TESTHANA", Name="AllTypesGeo")]
	public partial class AllTypesGeo
	{
		[Column(),                     PrimaryKey, Identity] public int     ID                 { get; set; } // INTEGER
		[Column("dataType"),           Nullable            ] public string? DataType           { get; set; } // VARCHAR(20)
		[Column("stgeometryDataType"), Nullable            ] public object? StgeometryDataType { get; set; } // ST_GEOMETRY
	}

	/// <summary>
	/// This table contains a summary of Best Record group master statistics
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_GROUP_MASTER_STATISTICS", IsView=true)]
	public partial class _SYS_TASK_BestRecordGroupMasterStatistic
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),           NotNull    ] public string  SchemaName         { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),             NotNull    ] public string  TaskName           { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),     NotNull    ] public long    TaskExecutionId    { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),           Nullable] public string? OperationName      { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The total number of records processed
		/// </summary>
		[Column("NUM_RECORDS"),              Nullable] public long?   NumRecords         { get; set; } // BIGINT
		/// <summary>
		/// The number of group master records processed
		/// </summary>
		[Column("NUM_GROUP_MASTERS"),        Nullable] public long?   NumGroupMasters    { get; set; } // BIGINT
		/// <summary>
		/// The number of duplicate records processed
		/// </summary>
		[Column("NUM_DUPLICATES"),           Nullable] public long?   NumDuplicates      { get; set; } // BIGINT
		/// <summary>
		/// The number of surviving records processed
		/// </summary>
		[Column("NUM_SURVIVORS"),            Nullable] public long?   NumSurvivors       { get; set; } // BIGINT
		/// <summary>
		/// The number of non matching records processed
		/// </summary>
		[Column("NUM_NON_MATCH_RECORDS"),    Nullable] public long?   NumNonMatchRecords { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_GROUP_MASTER_STATISTICS_")]
	public partial class _SYS_TASK_BestRecordGroupMasterStatistics
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long  TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int   OperationId     { get; set; } // INTEGER
		[Column("NUM_RECORDS"),          Nullable           ] public long? NumRecords      { get; set; } // BIGINT
		[Column("NUM_GROUP_MASTERS"),    Nullable           ] public long? NumGroupMasters { get; set; } // BIGINT
		[Column("NUM_DUPLICATES"),       Nullable           ] public long? NumDuplicates   { get; set; } // BIGINT
	}

	/// <summary>
	/// This table contains governance information for every column in every record that is updated in the best record process
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_RESULTS", IsView=true)]
	public partial class _SYS_TASK_BestRecordResult
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),         NotNull    ] public string  SchemaName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),           NotNull    ] public string  TaskName          { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),   NotNull    ] public long    TaskExecutionId   { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),         Nullable] public string? OperationName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the destination table for the operation
		/// </summary>
		[Column("DST_TABLE_NAME"),         Nullable] public string? DstTableName      { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID for the destination row
		/// </summary>
		[Column("DST_ROW_ID"),             Nullable] public long?   DstRowId          { get; set; } // BIGINT
		/// <summary>
		/// The name of the destination column in the destination table
		/// </summary>
		[Column("DST_COLUMN_NAME"),        Nullable] public string? DstColumnName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Identifies how the record was updated or if it was newly created
		/// </summary>
		[Column("DST_ROW_TYPE"),           Nullable] public char?   DstRowType        { get; set; } // NVARCHAR(1)
		/// <summary>
		/// The name of the source table for the operation
		/// </summary>
		[Column("SRC_TABLE_NAME"),         Nullable] public string? SrcTableName      { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID for the source row
		/// </summary>
		[Column("SRC_ROW_ID"),          NotNull    ] public long    SrcRowId          { get; set; } // BIGINT
		/// <summary>
		/// The name of the source column in the source table
		/// </summary>
		[Column("SRC_COLUMN_NAME"),        Nullable] public string? SrcColumnName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name that identifies the best record strategy group
		/// </summary>
		[Column("STRATEGY_GROUP_NAME"),    Nullable] public string? StrategyGroupName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The name that identifies each strategy listed in the strategy group
		/// </summary>
		[Column("STRATEGY_NAME"),          Nullable] public string? StrategyName      { get; set; } // NVARCHAR(256)
		#nullable disable
		/// <summary>
		/// The name of the rule that updates one or more columns as it is defined in the best record configuration
		/// </summary>
		[Column("BEST_RECORD_RULE"),    NotNull    ] public string  BestRecordRule    { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the action that updates a column as it is defined in the best record configuration
		/// </summary>
		[Column("ACTION_NAME"),            Nullable] public string? ActionName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The number of times the column was updated in the best record process
		/// </summary>
		[Column("UPDATE_NUM"),          NotNull    ] public int     UpdateNum         { get; set; } // INTEGER
		/// <summary>
		/// Identifies how the record was updated in the best record process
		/// </summary>
		[Column("OPERATION_TYPE"),         Nullable] public char?   OperationType     { get; set; } // NVARCHAR(1)
	}

	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_RESULTS_")]
	public partial class _SYS_TASK_BestRecordResults
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("DST_TABLE_ID"),         Nullable           ] public int?    DstTableId      { get; set; } // INTEGER
		[Column("DST_ROW_ID"),           Nullable           ] public long?   DstRowId        { get; set; } // BIGINT
		[Column("DST_COLUMN_ID"),        Nullable           ] public int?    DstColumnId     { get; set; } // INTEGER
		[Column("DST_ROW_TYPE"),         Nullable           ] public char?   DstRowType      { get; set; } // NVARCHAR(1)
		[Column("SRC_TABLE_ID"),      PrimaryKey(3), NotNull] public int     SrcTableId      { get; set; } // INTEGER
		[Column("SRC_ROW_ID"),        PrimaryKey(4), NotNull] public long    SrcRowId        { get; set; } // BIGINT
		[Column("SRC_COLUMN_ID"),     PrimaryKey(5), NotNull] public int     SrcColumnId     { get; set; } // INTEGER
		[Column("STRATEGY_GROUP_ID"), PrimaryKey(6), NotNull] public int     StrategyGroupId { get; set; } // INTEGER
		[Column("STRATEGY_ID"),       PrimaryKey(7), NotNull] public int     StrategyId      { get; set; } // INTEGER
		#nullable disable
		[Column("BEST_RECORD_RULE"),  PrimaryKey(8), NotNull] public string  BestRecordRule  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("ACTION_NAME"),          Nullable           ] public string? ActionName      { get; set; } // NVARCHAR(256)
		[Column("UPDATE_NUM"),        PrimaryKey(9), NotNull] public int     UpdateNum       { get; set; } // INTEGER
		[Column("OPERATION_TYPE"),       Nullable           ] public char?   OperationType   { get; set; } // NVARCHAR(1)
	}

	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_STRATEGIES_")]
	public partial class _SYS_TASK_BestRecordStrategies
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("STRATEGY_GROUP_ID"), PrimaryKey(3), NotNull] public int     StrategyGroupId { get; set; } // INTEGER
		[Column("STRATEGY_ID"),       PrimaryKey(4), NotNull] public int     StrategyId      { get; set; } // INTEGER
		[Column("STRATEGY_ORDER"),       Nullable           ] public int?    StrategyOrder   { get; set; } // INTEGER
		[Column("STRATEGY_NAME"),        Nullable           ] public string? StrategyName    { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// This table contains information on which strategies are used in each strategy group and in which order
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_STRATEGIES", IsView=true)]
	public partial class _SYS_TASK_BestRecordSTRATEGy
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),         NotNull    ] public string  SchemaName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),           NotNull    ] public string  TaskName          { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),   NotNull    ] public long    TaskExecutionId   { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),         Nullable] public string? OperationName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The strategy group name
		/// </summary>
		[Column("STRATEGY_GROUP_NAME"),    Nullable] public string? StrategyGroupName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Represents the order of the strategy as it is defined in the list of strategies
		/// </summary>
		[Column("STRATEGY_ORDER"),         Nullable] public int?    StrategyOrder     { get; set; } // INTEGER
		/// <summary>
		/// The name of the strategy as it is defined in the best record configuration
		/// </summary>
		[Column("STRATEGY_NAME"),          Nullable] public string? StrategyName      { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_TASK", Name="BEST_RECORD_STRATEGY_GROUPS_")]
	public partial class _SYS_TASK_BestRecordStrategyGroups
	{
		[Column("TASK_EXECUTION_ID"),   PrimaryKey(1), NotNull] public long    TaskExecutionId   { get; set; } // BIGINT
		[Column("OPERATION_ID"),        PrimaryKey(2), NotNull] public int     OperationId       { get; set; } // INTEGER
		[Column("STRATEGY_GROUP_ID"),   PrimaryKey(3), NotNull] public int     StrategyGroupId   { get; set; } // INTEGER
		[Column("STRATEGY_GROUP_NAME"),    Nullable           ] public string? StrategyGroupName { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="TESTHANA", Name="BulkInsertLowerCaseColumns")]
	public partial class BulkInsertLowerCaseColumn
	{
		[Column, Nullable] public int?      ID            { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MoneyValue    { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DateTimeValue { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BoolValue     { get; set; } // TINYINT
		[Column, Nullable] public string?   GuidValue     { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]?   BinaryValue   { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SmallIntValue { get; set; } // SMALLINT
		[Column, Nullable] public int?      IntValue      { get; set; } // INTEGER
		[Column, Nullable] public long?     BigIntValue   { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="BulkInsertUpperCaseColumns")]
	public partial class BulkInsertUpperCaseColumn
	{
		[Column, Nullable] public int?      ID            { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MONEYVALUE    { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DATETIMEVALUE { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BOOLVALUE     { get; set; } // TINYINT
		[Column, Nullable] public string?   GUIDVALUE     { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]?   BINARYVALUE   { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SMALLINTVALUE { get; set; } // SMALLINT
		[Column, Nullable] public int?      INTVALUE      { get; set; } // INTEGER
		[Column, Nullable] public long?     BIGINTVALUE   { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_RT", Name="CDS_ANNOTATION")]
	public partial class _SYS_RT_CdsAnnotation
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ANNOTATION_ASSIGNMENT")]
	public partial class _SYS_RT_CdsAnnotationAssignment
	{
		[Column("imageId"),                    PrimaryKey(1), NotNull] public long     ImageId                   { get; set; } // BIGINT
		#nullable disable
		[Column("artifactName.schema"),        PrimaryKey(2), NotNull] public string   ArtifactNameSchema        { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("artifactName.name"),          PrimaryKey(3), NotNull] public string   ArtifactNameName          { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("artifactName.componentName"), PrimaryKey(4), NotNull] public string   ArtifactNameComponentName { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),                       PrimaryKey(5), NotNull] public string   Name                      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),           PrimaryKey(6), NotNull] public string   ExtensionPackage          { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                               NotNull] public DateTime ModifiedUtc               { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                                     NotNull] public string   State                     { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("format"),                                    NotNull] public string   Format                    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("value"),                                     NotNull] public string   Value                     { get; set; } // NCLOB
		#nullable enable
		#nullable disable
		[Column("checked"),                                   NotNull] public string   @checked                  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("definition.schema"),             Nullable           ] public string?  DefinitionSchema          { get; set; } // NVARCHAR(127)
		[Column("definition.name"),               Nullable           ] public string?  DefinitionName            { get; set; } // NVARCHAR(127)
	}

	[Table(Schema="_SYS_RT", Name="CDS_ANNOTATION_VALUE")]
	public partial class _SYS_RT_CdsAnnotationValue
	{
		[Column("imageId"),               PrimaryKey(1), NotNull] public long     ImageId              { get; set; } // BIGINT
		#nullable disable
		[Column("artifactName.schema"),   PrimaryKey(2), NotNull] public string   ArtifactNameSchema   { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("artifactName.name"),     PrimaryKey(3), NotNull] public string   ArtifactNameName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("annotationName.schema"), PrimaryKey(4), NotNull] public string   AnnotationNameSchema { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("annotationName.name"),   PrimaryKey(5), NotNull] public string   AnnotationNameName   { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),      PrimaryKey(6), NotNull] public string   ExtensionPackage     { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                          NotNull] public DateTime ModifiedUtc          { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                                NotNull] public string   State                { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("valueTree"),                            NotNull] public string   ValueTree            { get; set; } // NCLOB
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ARRAY")]
	public partial class _SYS_RT_CdsArray
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("isAnonymous"),                      NotNull] public byte     IsAnonymous       { get; set; } // TINYINT
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ARTIFACT")]
	public partial class _SYS_RT_CdsArtifact
	{
		[Column("imageId"),     PrimaryKey(1), NotNull] public long     ImageId     { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),      PrimaryKey(2), NotNull] public string   Schema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),        PrimaryKey(3), NotNull] public string   Name        { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                NotNull] public DateTime ModifiedUtc { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                      NotNull] public string   State       { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("kind"),                       NotNull] public string   Kind        { get; set; } // NVARCHAR(127)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ASPECT")]
	public partial class _SYS_RT_CdsAspect
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("definition"),                      NotNull] public string   Definition       { get; set; } // NCLOB
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ASSOCIATION")]
	public partial class _SYS_RT_CdsAssociation
	{
		[Column("imageId"),                 PrimaryKey(1), NotNull] public long     ImageId                { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),                  PrimaryKey(2), NotNull] public string   Schema                 { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),                    PrimaryKey(3), NotNull] public string   Name                   { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                            NotNull] public DateTime ModifiedUtc            { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                                  NotNull] public string   State                  { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                       NotNull] public string   ExtensionPackage       { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("targetEntityName.schema"),                NotNull] public string   TargetEntityNameSchema { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("targetEntityName.name"),                  NotNull] public string   TargetEntityNameName   { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("sourceCardinalityMax"),       Nullable           ] public int?     SourceCardinalityMax   { get; set; } // INTEGER
		[Column("targetCardinalityMin"),       Nullable           ] public int?     TargetCardinalityMin   { get; set; } // INTEGER
		[Column("targetCardinalityMax"),       Nullable           ] public int?     TargetCardinalityMax   { get; set; } // INTEGER
		#nullable disable
		[Column("viaEntityName.schema"),                   NotNull] public string   ViaEntityNameSchema    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("viaEntityName.name"),                     NotNull] public string   ViaEntityNameName      { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("joinCondition"),              Nullable           ] public string?  JoinCondition          { get; set; } // NCLOB
		[Column("associationKind"),            Nullable           ] public string?  AssociationKind        { get; set; } // NVARCHAR(127)
	}

	[Table(Schema="_SYS_RT", Name="CDS_CONSTANT")]
	public partial class _SYS_RT_CdsConstant
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("value"),                Nullable           ] public string?  Value             { get; set; } // NVARCHAR(5000)
		[Column("isEnumValue"),                      NotNull] public byte     IsEnumValue       { get; set; } // TINYINT
	}

	[Table(Schema="_SYS_RT", Name="CDS_DEPENDENCY")]
	public partial class _SYS_RT_CdsDependency
	{
		[Column("imageId"),     PrimaryKey(1), NotNull] public long     ImageId     { get; set; } // BIGINT
		#nullable disable
		[Column("from.schema"), PrimaryKey(2), NotNull] public string   FromSchema  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("from.name"),   PrimaryKey(3), NotNull] public string   FromName    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("to.schema"),   PrimaryKey(4), NotNull] public string   ToSchema    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("to.name"),     PrimaryKey(5), NotNull] public string   ToName      { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                NotNull] public DateTime ModifiedUtc { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                      NotNull] public string   State       { get; set; } // NVARCHAR(10)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_DERIVED_TYPE")]
	public partial class _SYS_RT_CdsDerivedType
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_ENTITY")]
	public partial class _SYS_RT_CdsEntity
	{
		[Column("imageId"),                PrimaryKey(1), NotNull] public long     ImageId               { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),                 PrimaryKey(2), NotNull] public string   Schema                { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),                   PrimaryKey(3), NotNull] public string   Name                  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                           NotNull] public DateTime ModifiedUtc           { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                                 NotNull] public string   State                 { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                      NotNull] public string   ExtensionPackage      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("series.kind"),                           NotNull] public string   SeriesKind            { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("series.definition"),         Nullable           ] public string?  SeriesDefinition      { get; set; } // NCLOB
		[Column("series.queryDefinition"),    Nullable           ] public string?  SeriesQueryDefinition { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_RT", Name="CDS_ENUM")]
	public partial class _SYS_RT_CdsEnum
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("isAnonymous"),                      NotNull] public byte     IsAnonymous       { get; set; } // TINYINT
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_EXPRESSION")]
	public partial class _SYS_RT_CdsExpression
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("definition"),          Nullable           ] public string?  Definition       { get; set; } // NVARCHAR(5000)
		#nullable disable
		[Column("kind"),                            NotNull] public string   Kind             { get; set; } // NVARCHAR(127)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_EXT_PKG_DEP")]
	public partial class _SYS_RT_CdsExtPkgDep
	{
		[Column("imageId"),     PrimaryKey(1), NotNull] public long     ImageId     { get; set; } // BIGINT
		#nullable disable
		[Column("from.schema"), PrimaryKey(2), NotNull] public string   FromSchema  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("from.name"),   PrimaryKey(3), NotNull] public string   FromName    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("to.schema"),   PrimaryKey(4), NotNull] public string   ToSchema    { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("to.name"),     PrimaryKey(5), NotNull] public string   ToName      { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                NotNull] public DateTime ModifiedUtc { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                      NotNull] public string   State       { get; set; } // NVARCHAR(10)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_PARAMETER")]
	public partial class _SYS_RT_CdsParameter
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("parameterName"),     PrimaryKey(4), NotNull] public string   ParameterName     { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("parameterIndex"),                   NotNull] public int      ParameterIndex    { get; set; } // INTEGER
		#nullable disable
		[Column("metaTableSelector"),                NotNull] public string   MetaTableSelector { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                    NotNull] public string   TargetSchema      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                      NotNull] public string   TargetName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("passingMode"),                      NotNull] public string   PassingMode       { get; set; } // NVARCHAR(127)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_RULE")]
	public partial class _SYS_RT_CdsRule
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("definition"),                      NotNull] public string   Definition       { get; set; } // NCLOB
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_SCALAR_TYPE")]
	public partial class _SYS_RT_CdsScalarType
	{
		[Column("imageId"),           PrimaryKey(1), NotNull] public long     ImageId           { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),            PrimaryKey(2), NotNull] public string   Schema            { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),              PrimaryKey(3), NotNull] public string   Name              { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                      NotNull] public DateTime ModifiedUtc       { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                            NotNull] public string   State             { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                 NotNull] public string   ExtensionPackage  { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("isAnonymous"),                      NotNull] public byte     IsAnonymous       { get; set; } // TINYINT
		#nullable disable
		[Column("primitiveTypeName"),                NotNull] public string   PrimitiveTypeName { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("length"),               Nullable           ] public int?     Length            { get; set; } // INTEGER
		[Column("precision"),            Nullable           ] public int?     Precision         { get; set; } // INTEGER
		[Column("scale"),                Nullable           ] public int?     Scale             { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="CDS_SOURCE_CODE")]
	public partial class _SYS_RT_CdsSourceCode
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("sourcecode"),                      NotNull] public string   Sourcecode       { get; set; } // NCLOB
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="CDS_STATISTICS")]
	public partial class _SYS_RT_CdsStatistic
	{
		[Column("activationUtc"),   PrimaryKey(1), NotNull] public DateTime ActivationUtc   { get; set; } // TIMESTAMP
		#nullable disable
		[Column("connection"),      PrimaryKey(2), NotNull] public string   Connection      { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("activationPhase"),                NotNull] public string   ActivationPhase { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("statementNo"),     PrimaryKey(3), NotNull] public int      StatementNo     { get; set; } // INTEGER
		[Column("creationUtc"),     PrimaryKey(4), NotNull] public DateTime CreationUtc     { get; set; } // TIMESTAMP
		[Column("executionUtc"),    PrimaryKey(5), NotNull] public DateTime ExecutionUtc    { get; set; } // TIMESTAMP
		[Column("executionNo"),     PrimaryKey(6), NotNull] public int      ExecutionNo     { get; set; } // INTEGER
		[Column("usecs"),                          NotNull] public int      Usecs           { get; set; } // INTEGER
		#nullable disable
		[Column("rawStatement"),                   NotNull] public string   RawStatement    { get; set; } // NVARCHAR(5000)
		#nullable enable
		[Column("execStatement"),      Nullable           ] public string?  ExecStatement   { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_RT", Name="CDS_STRUCTURE")]
	public partial class _SYS_RT_CdsStructure
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("isAnonymous"),                     NotNull] public byte     IsAnonymous      { get; set; } // TINYINT
	}

	[Table(Schema="_SYS_RT", Name="CDS_STRUCTURE_COMPONENT")]
	public partial class _SYS_RT_CdsStructureComponent
	{
		[Column("imageId"),            PrimaryKey(1), NotNull] public long     ImageId            { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),             PrimaryKey(2), NotNull] public string   Schema             { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),               PrimaryKey(3), NotNull] public string   Name               { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("componentName"),      PrimaryKey(4), NotNull] public string   ComponentName      { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                       NotNull] public DateTime ModifiedUtc        { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                             NotNull] public string   State              { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                  NotNull] public string   ExtensionPackage   { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("componentIndex"),                    NotNull] public int      ComponentIndex     { get; set; } // INTEGER
		#nullable disable
		[Column("metaTableSelector"),                 NotNull] public string   MetaTableSelector  { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.schema"),                     NotNull] public string   TargetSchema       { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("target.name"),                       NotNull] public string   TargetName         { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("target.isNative"),                   NotNull] public byte     TargetIsNative     { get; set; } // TINYINT
		[Column("isKey"),                             NotNull] public byte     IsKey              { get; set; } // TINYINT
		[Column("isNullable"),                        NotNull] public byte     IsNullable         { get; set; } // TINYINT
		[Column("originalDefinition"),    Nullable           ] public string?  OriginalDefinition { get; set; } // NVARCHAR(5000)
	}

	[Table(Schema="_SYS_RT", Name="CDS_VIEW")]
	public partial class _SYS_RT_CdsView
	{
		[Column("imageId"),          PrimaryKey(1), NotNull] public long     ImageId          { get; set; } // BIGINT
		#nullable disable
		[Column("schema"),           PrimaryKey(2), NotNull] public string   Schema           { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("name"),             PrimaryKey(3), NotNull] public string   Name             { get; set; } // NVARCHAR(127)
		#nullable enable
		[Column("modifiedUtc"),                     NotNull] public DateTime ModifiedUtc      { get; set; } // TIMESTAMP
		#nullable disable
		[Column("state"),                           NotNull] public string   State            { get; set; } // NVARCHAR(10)
		#nullable enable
		#nullable disable
		[Column("extensionPackage"),                NotNull] public string   ExtensionPackage { get; set; } // NVARCHAR(127)
		#nullable enable
		#nullable disable
		[Column("definition"),                      NotNull] public string   Definition       { get; set; } // NCLOB
		#nullable enable
	}

	[Table(Schema="TESTHANA", Name="Child")]
	public partial class Child
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	/// <summary>
	/// The table tells a user how well an address assigned and the type of address
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CLEANSE_ADDRESS_RECORD_INFO", IsView=true)]
	public partial class _SYS_TASK_CleanseAddressRecordInfo0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),                NotNull    ] public string  SchemaName               { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                  NotNull    ] public string  TaskName                 { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),          NotNull    ] public long    TaskExecutionId          { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),                Nullable] public string? OperationName            { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),                    Nullable] public string? TableName                { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),                     NotNull    ] public long    RowId                    { get; set; } // BIGINT
		/// <summary>
		/// An ID to differentiate between multiple entities processed in a row
		/// </summary>
		[Column("ENTITY_INSTANCE"),            NotNull    ] public int     EntityInstance           { get; set; } // INTEGER
		/// <summary>
		/// A unique ID to identify the occurrence of an entity
		/// </summary>
		[Column("ENTITY_INSTANCE_OCCURRENCE"), NotNull    ] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		/// <summary>
		/// The source where the data was produced
		/// </summary>
		[Column("DATA_SOURCE"),                   Nullable] public string? DataSource               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The two character country code
		/// </summary>
		[Column("ISO_COUNTRY_2CHAR"),             Nullable] public string? IsoCountry2char          { get; set; } // NVARCHAR(4)
		/// <summary>
		/// A code that represents the type of an address
		/// </summary>
		[Column("ASSIGNMENT_TYPE"),               Nullable] public string? AssignmentType           { get; set; } // NVARCHAR(4)
		/// <summary>
		/// A code that specifies the validity of an address
		/// </summary>
		[Column("ASSIGNMENT_INFORMATION"),        Nullable] public string? AssignmentInformation    { get; set; } // NVARCHAR(4)
		/// <summary>
		/// A code that represents the level to which the address matched data in the address reference data
		/// </summary>
		[Column("ASSIGNMENT_LEVEL"),              Nullable] public string? AssignmentLevel          { get; set; } // NVARCHAR(4)
	}

	[Table(Schema="_SYS_TASK", Name="CLEANSE_ADDRESS_RECORD_INFO_")]
	public partial class _SYS_TASK_CleanseAddressRecordInfo1
	{
		[Column("TASK_EXECUTION_ID"),          PrimaryKey(1), NotNull] public long    TaskExecutionId          { get; set; } // BIGINT
		[Column("OPERATION_ID"),               PrimaryKey(2), NotNull] public int     OperationId              { get; set; } // INTEGER
		[Column("TABLE_ID"),                   PrimaryKey(3), NotNull] public int     TableId                  { get; set; } // INTEGER
		[Column("ROW_ID"),                     PrimaryKey(4), NotNull] public long    RowId                    { get; set; } // BIGINT
		[Column("ENTITY_INSTANCE"),            PrimaryKey(5), NotNull] public int     EntityInstance           { get; set; } // INTEGER
		[Column("ENTITY_INSTANCE_OCCURRENCE"), PrimaryKey(6), NotNull] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		[Column("DATA_SOURCE"),                   Nullable           ] public string? DataSource               { get; set; } // NVARCHAR(256)
		[Column("ISO_COUNTRY_2CHAR"),             Nullable           ] public string? IsoCountry2char          { get; set; } // NVARCHAR(4)
		[Column("ASSIGNMENT_TYPE"),               Nullable           ] public string? AssignmentType           { get; set; } // NVARCHAR(4)
		[Column("ASSIGNMENT_INFORMATION"),        Nullable           ] public string? AssignmentInformation    { get; set; } // NVARCHAR(4)
		[Column("ASSIGNMENT_LEVEL"),              Nullable           ] public string? AssignmentLevel          { get; set; } // NVARCHAR(4)
	}

	[Table(Schema="_SYS_TASK", Name="CLEANSE_CHANGE_INFO_")]
	public partial class _SYS_TASK_CleanseChangeInfo0
	{
		[Column("TASK_EXECUTION_ID"),          PrimaryKey(1), NotNull] public long    TaskExecutionId          { get; set; } // BIGINT
		[Column("OPERATION_ID"),               PrimaryKey(2), NotNull] public int     OperationId              { get; set; } // INTEGER
		[Column("TABLE_ID"),                      Nullable           ] public int?    TableId                  { get; set; } // INTEGER
		[Column("ROW_ID"),                     PrimaryKey(3), NotNull] public long    RowId                    { get; set; } // BIGINT
		#nullable disable
		[Column("ENTITY_ID"),                  PrimaryKey(4), NotNull] public string  EntityId                 { get; set; } // NVARCHAR(12)
		#nullable enable
		[Column("ENTITY_INSTANCE"),            PrimaryKey(5), NotNull] public int     EntityInstance           { get; set; } // INTEGER
		[Column("ENTITY_INSTANCE_OCCURRENCE"), PrimaryKey(6), NotNull] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		[Column("DATA_SOURCE"),                   Nullable           ] public string? DataSource               { get; set; } // NVARCHAR(256)
		#nullable disable
		[Column("COMPONENT_ID"),               PrimaryKey(7), NotNull] public string  ComponentId              { get; set; } // NVARCHAR(12)
		#nullable enable
		#nullable disable
		[Column("COMPONENT_ELEMENT_ID"),       PrimaryKey(8), NotNull] public string  ComponentElementId       { get; set; } // NVARCHAR(12)
		#nullable enable
		#nullable disable
		[Column("CHANGE_CATEGORY_ID"),         PrimaryKey(9), NotNull] public string  ChangeCategoryId         { get; set; } // NVARCHAR(12)
		#nullable enable
		[Column("CHANGE_SIGNIFICANCE_ID"),        Nullable           ] public string? ChangeSignificanceId     { get; set; } // NVARCHAR(12)
	}

	/// <summary>
	/// This table describes the changes made during the cleansing process
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CLEANSE_CHANGE_INFO", IsView=true)]
	public partial class _SYS_TASK_CleanseChangeInfo1
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),                NotNull    ] public string  SchemaName               { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                  NotNull    ] public string  TaskName                 { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),          NotNull    ] public long    TaskExecutionId          { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),                Nullable] public string? OperationName            { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),                    Nullable] public string? TableName                { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),                     NotNull    ] public long    RowId                    { get; set; } // BIGINT
		#nullable disable
		/// <summary>
		/// The ID describing the type of record that was processed
		/// </summary>
		[Column("ENTITY_ID"),                  NotNull    ] public string  EntityId                 { get; set; } // NVARCHAR(12)
		#nullable enable
		/// <summary>
		/// An ID to differentiate between multiple entities processed in a row
		/// </summary>
		[Column("ENTITY_INSTANCE"),            NotNull    ] public int     EntityInstance           { get; set; } // INTEGER
		/// <summary>
		/// A unique ID to identify the occurrence of an entity
		/// </summary>
		[Column("ENTITY_INSTANCE_OCCURRENCE"), NotNull    ] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		/// <summary>
		/// The source where the data was produced
		/// </summary>
		[Column("DATA_SOURCE"),                   Nullable] public string? DataSource               { get; set; } // NVARCHAR(256)
		#nullable disable
		/// <summary>
		/// Identification number that refers to data components
		/// </summary>
		[Column("COMPONENT_ID"),               NotNull    ] public string  ComponentId              { get; set; } // NVARCHAR(12)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Identification number that refers to more granular elements within a component
		/// </summary>
		[Column("COMPONENT_ELEMENT_ID"),       NotNull    ] public string  ComponentElementId       { get; set; } // NVARCHAR(12)
		#nullable enable
		#nullable disable
		[Column("CHANGE_CATEGORY_ID"),         NotNull    ] public string  ChangeCategoryId         { get; set; } // NVARCHAR(12)
		#nullable enable
		/// <summary>
		/// Identification number that refers to the significance of the change
		/// </summary>
		[Column("CHANGE_SIGNIFICANCE_ID"),        Nullable] public string? ChangeSignificanceId     { get; set; } // NVARCHAR(12)
	}

	/// <summary>
	/// This table identifies the location of parsed data elements in the input and output
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CLEANSE_COMPONENT_INFO", IsView=true)]
	public partial class _SYS_TASK_CleanseComponentInfo0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),                  NotNull    ] public string  SchemaName                { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                    NotNull    ] public string  TaskName                  { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),            NotNull    ] public long    TaskExecutionId           { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),                  Nullable] public string? OperationName             { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The ID describing the type of record that was processed
		/// </summary>
		[Column("ENTITY_ID"),                       Nullable] public string? EntityId                  { get; set; } // NVARCHAR(12)
		/// <summary>
		/// An ID to differentiate between multiple entities processed in a row
		/// </summary>
		[Column("ENTITY_INSTANCE"),                 Nullable] public int?    EntityInstance            { get; set; } // INTEGER
		/// <summary>
		/// A unique ID to identify the occurrence of an entity
		/// </summary>
		[Column("ENTITY_INSTANCE_OCCURRENCE"),      Nullable] public int?    EntityInstanceOccurrence  { get; set; } // INTEGER
		/// <summary>
		/// The source where the data was produced
		/// </summary>
		[Column("DATA_SOURCE"),                     Nullable] public string? DataSource                { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Identification number that refers to data components
		/// </summary>
		[Column("COMPONENT_ID"),                    Nullable] public string? ComponentId               { get; set; } // NVARCHAR(12)
		/// <summary>
		/// Identification number that refers to more granular elements within a component
		/// </summary>
		[Column("COMPONENT_ELEMENT_ID"),            Nullable] public string? ComponentElementId        { get; set; } // NVARCHAR(12)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),                      Nullable] public string? TableName                 { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),                          Nullable] public long?   RowId                     { get; set; } // BIGINT
		/// <summary>
		/// Name of the column
		/// </summary>
		[Column("COLUMN_NAME"),                     Nullable] public string? ColumnName                { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Starting character of the component in the column
		/// </summary>
		[Column("COLUMN_START_POSITION"),           Nullable] public int?    ColumnStartPosition       { get; set; } // INTEGER
		/// <summary>
		/// Number of characters of the component in the column
		/// </summary>
		[Column("COLUMN_DATA_LENGTH"),              Nullable] public int?    ColumnDataLength          { get; set; } // INTEGER
		/// <summary>
		/// Name of the output table
		/// </summary>
		[Column("OUTPUT_TABLE_NAME"),               Nullable] public string? OutputTableName           { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Name of the output column
		/// </summary>
		[Column("OUTPUT_COLUMN_NAME"),              Nullable] public string? OutputColumnName          { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Starting character of the component in the output column
		/// </summary>
		[Column("OUTPUT_COLUMN_START_POSITION"),    Nullable] public int?    OutputColumnStartPosition { get; set; } // INTEGER
		/// <summary>
		/// Number of characters of the component in the output column
		/// </summary>
		[Column("OUTPUT_COLUMN_DATA_LENGTH"),       Nullable] public int?    OutputColumnDataLength    { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_TASK", Name="CLEANSE_COMPONENT_INFO_")]
	public partial class _SYS_TASK_CleanseComponentInfo1
	{
		[Column("TASK_EXECUTION_ID"),            Nullable] public long?   TaskExecutionId           { get; set; } // BIGINT
		[Column("OPERATION_ID"),                 Nullable] public int?    OperationId               { get; set; } // INTEGER
		[Column("ENTITY_ID"),                    Nullable] public string? EntityId                  { get; set; } // NVARCHAR(12)
		[Column("ENTITY_INSTANCE"),              Nullable] public int?    EntityInstance            { get; set; } // INTEGER
		[Column("ENTITY_INSTANCE_OCCURRENCE"),   Nullable] public int?    EntityInstanceOccurrence  { get; set; } // INTEGER
		[Column("DATA_SOURCE"),                  Nullable] public string? DataSource                { get; set; } // NVARCHAR(256)
		[Column("COMPONENT_ID"),                 Nullable] public string? ComponentId               { get; set; } // NVARCHAR(12)
		[Column("COMPONENT_ELEMENT_ID"),         Nullable] public string? ComponentElementId        { get; set; } // NVARCHAR(12)
		[Column("TABLE_ID"),                     Nullable] public int?    TableId                   { get; set; } // INTEGER
		[Column("ROW_ID"),                       Nullable] public long?   RowId                     { get; set; } // BIGINT
		[Column("COLUMN_ID"),                    Nullable] public int?    ColumnId                  { get; set; } // INTEGER
		[Column("COLUMN_START_POSITION"),        Nullable] public int?    ColumnStartPosition       { get; set; } // INTEGER
		[Column("COLUMN_DATA_LENGTH"),           Nullable] public int?    ColumnDataLength          { get; set; } // INTEGER
		[Column("OUTPUT_TABLE_ID"),              Nullable] public int?    OutputTableId             { get; set; } // INTEGER
		[Column("OUTPUT_COLUMN_ID"),             Nullable] public int?    OutputColumnId            { get; set; } // INTEGER
		[Column("OUTPUT_COLUMN_START_POSITION"), Nullable] public int?    OutputColumnStartPosition { get; set; } // INTEGER
		[Column("OUTPUT_COLUMN_DATA_LENGTH"),    Nullable] public int?    OutputColumnDataLength    { get; set; } // INTEGER
	}

	/// <summary>
	/// This table contains one row per info code generated by the cleansing process
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CLEANSE_INFO_CODES", IsView=true)]
	public partial class _SYS_TASK_CleanseInfoCode
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),                NotNull    ] public string  SchemaName               { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                  NotNull    ] public string  TaskName                 { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),          NotNull    ] public long    TaskExecutionId          { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),                Nullable] public string? OperationName            { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),                    Nullable] public string? TableName                { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),                        Nullable] public long?   RowId                    { get; set; } // BIGINT
		/// <summary>
		/// The ID describing the type of record that was processed
		/// </summary>
		[Column("ENTITY_ID"),                     Nullable] public string? EntityId                 { get; set; } // NVARCHAR(12)
		/// <summary>
		/// An ID to differentiate between multiple entities processed in a row
		/// </summary>
		[Column("ENTITY_INSTANCE"),               Nullable] public int?    EntityInstance           { get; set; } // INTEGER
		/// <summary>
		/// A unique ID to identify the occurrence of an entity
		/// </summary>
		[Column("ENTITY_INSTANCE_OCCURRENCE"), NotNull    ] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		/// <summary>
		/// The source where the data was produced
		/// </summary>
		[Column("DATA_SOURCE"),                   Nullable] public string? DataSource               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Information code that gives information about the processing of the record
		/// </summary>
		[Column("INFO_CODE"),                     Nullable] public string? InfoCode                 { get; set; } // NVARCHAR(10)
	}

	[Table(Schema="_SYS_TASK", Name="CLEANSE_INFO_CODES_")]
	public partial class _SYS_TASK_CleanseInfoCodes
	{
		[Column("TASK_EXECUTION_ID"),             Nullable] public long?   TaskExecutionId          { get; set; } // BIGINT
		[Column("OPERATION_ID"),                  Nullable] public int?    OperationId              { get; set; } // INTEGER
		[Column("TABLE_ID"),                      Nullable] public int?    TableId                  { get; set; } // INTEGER
		[Column("ROW_ID"),                        Nullable] public long?   RowId                    { get; set; } // BIGINT
		[Column("ENTITY_ID"),                     Nullable] public string? EntityId                 { get; set; } // NVARCHAR(12)
		[Column("ENTITY_INSTANCE"),               Nullable] public int?    EntityInstance           { get; set; } // INTEGER
		[Column("ENTITY_INSTANCE_OCCURRENCE"), NotNull    ] public int     EntityInstanceOccurrence { get; set; } // INTEGER
		[Column("DATA_SOURCE"),                   Nullable] public string? DataSource               { get; set; } // NVARCHAR(256)
		[Column("INFO_CODE"),                     Nullable] public string? InfoCode                 { get; set; } // NVARCHAR(10)
	}

	/// <summary>
	/// This table contains a summary of Cleanse statistics
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CLEANSE_STATISTICS", IsView=true)]
	public partial class _SYS_TASK_CleanseStatistic
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),                  NotNull    ] public string  SchemaName                { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                    NotNull    ] public string  TaskName                  { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),            NotNull    ] public long    TaskExecutionId           { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),                  Nullable] public string? OperationName             { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The ID describing the type of record that was processed
		/// </summary>
		[Column("ENTITY_ID"),                       Nullable] public string? EntityId                  { get; set; } // NVARCHAR(12)
		/// <summary>
		/// An ID to differentiate between multiple entities processed in a row
		/// </summary>
		[Column("ENTITY_INSTANCE"),                 Nullable] public int?    EntityInstance            { get; set; } // INTEGER
		/// <summary>
		/// The total number of records processed for the entity instance
		/// </summary>
		[Column("NUM_RECORDS"),                     Nullable] public long?   NumRecords                { get; set; } // BIGINT
		/// <summary>
		/// The number of valid records processed for the entity instance
		/// </summary>
		[Column("NUM_VALIDS"),                      Nullable] public long?   NumValids                 { get; set; } // BIGINT
		/// <summary>
		/// The number of suspect records processed for the entity instance
		/// </summary>
		[Column("NUM_SUSPECTS"),                    Nullable] public long?   NumSuspects               { get; set; } // BIGINT
		/// <summary>
		/// The number of blank records processed for the entity instance
		/// </summary>
		[Column("NUM_BLANKS"),                      Nullable] public long?   NumBlanks                 { get; set; } // BIGINT
		/// <summary>
		/// The number of records with high significance changes for the entity instance
		/// </summary>
		[Column("NUM_HIGH_SIGNIFICANT_CHANGES"),    Nullable] public long?   NumHighSignificantChanges { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_TASK", Name="CLEANSE_STATISTICS_")]
	public partial class _SYS_TASK_CleanseStatistics
	{
		[Column("TASK_EXECUTION_ID"),            Nullable] public long?   TaskExecutionId           { get; set; } // BIGINT
		[Column("OPERATION_ID"),                 Nullable] public int?    OperationId               { get; set; } // INTEGER
		[Column("ENTITY_ID"),                    Nullable] public string? EntityId                  { get; set; } // NVARCHAR(12)
		[Column("ENTITY_INSTANCE"),              Nullable] public int?    EntityInstance            { get; set; } // INTEGER
		[Column("NUM_RECORDS"),                  Nullable] public long?   NumRecords                { get; set; } // BIGINT
		[Column("NUM_SUSPECTS"),                 Nullable] public long?   NumSuspects               { get; set; } // BIGINT
		[Column("NUM_BLANKS"),                   Nullable] public long?   NumBlanks                 { get; set; } // BIGINT
		[Column("NUM_HIGH_SIGNIFICANT_CHANGES"), Nullable] public long?   NumHighSignificantChanges { get; set; } // BIGINT
	}

	/// <summary>
	/// Telemetry Client Information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="CLIENT")]
	public partial class _SYS_TELEMETRY_CLIENT
	{
		/// <summary>
		/// Unique ID of the client
		/// </summary>
		[Column("CLIENT_ID"),                        PrimaryKey,  NotNull] public long      ClientId                       { get; set; } // BIGINT
		/// <summary>
		/// Activation timestamp of the client ID
		/// </summary>
		[Column("FIRST_TRANSMISSION_TIMESTAMP"),                  NotNull] public DateTime  FirstTransmissionTimestamp     { get; set; } // TIMESTAMP
		/// <summary>
		/// Timestamp of last transmission
		/// </summary>
		[Column("LAST_TRANSMISSION_TIMESTAMP"),                   NotNull] public DateTime  LastTransmissionTimestamp      { get; set; } // TIMESTAMP
		/// <summary>
		/// Transmission interval in minute
		/// </summary>
		[Column("TRANSMISSION_INTERVAL"),               Nullable         ] public short?    TransmissionInterval           { get; set; } // SMALLINT
		/// <summary>
		/// Default transmission interval in minute
		/// </summary>
		[Column("DEFAULT_TRANSMISSION_INTERVAL"),       Nullable         ] public short?    DefaultTransmissionInterval    { get; set; } // SMALLINT
		/// <summary>
		/// Minimum transmission interval in minute
		/// </summary>
		[Column("MIN_TRANSMISSION_INTERVAL"),           Nullable         ] public short?    MinTransmissionInterval        { get; set; } // SMALLINT
		/// <summary>
		/// Maximum transmission interval in minute
		/// </summary>
		[Column("MAX_TRANSMISSION_INTERVAL"),           Nullable         ] public short?    MaxTransmissionInterval        { get; set; } // SMALLINT
		#nullable disable
		/// <summary>
		/// System ID of the client
		/// </summary>
		[Column("CLIENT_SYSTEM_ID"),                              NotNull] public string    ClientSystemId                 { get; set; } // VARCHAR(3)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Database Name of the client
		/// </summary>
		[Column("CLIENT_DATABASE_NAME"),                          NotNull] public string    ClientDatabaseName             { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Hardware key of the client
		/// </summary>
		[Column("CLIENT_HARDWARE_KEY"),                           NotNull] public string    ClientHardwareKey              { get; set; } // VARCHAR(11)
		#nullable enable
		/// <summary>
		/// Private key of the client
		/// </summary>
		[Column("PRIVATE_KEY"),                         Nullable         ] public string?   PrivateKey                     { get; set; } // VARCHAR(5000)
		/// <summary>
		/// Personal certificate of the client
		/// </summary>
		[Column("PERSONAL_CERTIFICATE"),                Nullable         ] public string?   PersonalCertificate            { get; set; } // VARCHAR(5000)
		/// <summary>
		/// Expiration timestamp of the Personal certificate
		/// </summary>
		[Column("CERTIFICATE_EXPIRATION_TIMESTAMP"),    Nullable         ] public DateTime? CertificateExpirationTimestamp { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// Telemetry Configuration Information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="CONFIGURATION")]
	public partial class _SYS_TELEMETRY_CONFIGURATION
	{
		/// <summary>
		/// Unique ID of telemetry collector
		/// </summary>
		[Column("COLLECTOR_ID"),                PrimaryKey, NotNull] public short  CollectorId               { get; set; } // SMALLINT
		#nullable disable
		/// <summary>
		/// Name of telemetry collector
		/// </summary>
		[Column("COLLECTOR_NAME"),                          NotNull] public string CollectorName             { get; set; } // VARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Status of telemetry collector
		/// </summary>
		[Column("COLLECTOR_STATUS"),                        NotNull] public object CollectorStatus           { get; set; } // BOOLEAN
		#nullable enable
		/// <summary>
		/// Version of telemetry collector
		/// </summary>
		[Column("COLLECTOR_VERSION"),                       NotNull] public short  CollectorVersion          { get; set; } // SMALLINT
		/// <summary>
		/// ID of statistics service data collector
		/// </summary>
		[Column("BASE_COLLECTOR_ID"),                       NotNull] public short  BaseCollectorId           { get; set; } // SMALLINT
		/// <summary>
		/// Collection interval of telemetry collector in hour
		/// </summary>
		[Column("COLLECTION_INTERVAL"),                     NotNull] public byte   CollectionInterval        { get; set; } // TINYINT
		/// <summary>
		/// Default collection interval of telemetry collector in hour
		/// </summary>
		[Column("DEFAULT_COLLECTION_INTERVAL"),             NotNull] public byte   DefaultCollectionInterval { get; set; } // TINYINT
		/// <summary>
		/// Minimum collection interval of telemetry collector in hour
		/// </summary>
		[Column("MIN_COLLECTION_INTERVAL"),                 NotNull] public byte   MinCollectionInterval     { get; set; } // TINYINT
		/// <summary>
		/// Maximum collection interval of telemetry collector in hour
		/// </summary>
		[Column("MAX_COLLECTION_INTERVAL"),                 NotNull] public byte   MaxCollectionInterval     { get; set; } // TINYINT
	}

	/// <summary>
	/// This table contains messages generated by create task command
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="CREATE_TASK_MESSAGES", IsView=true)]
	public partial class _SYS_TASK_CreateTaskMessage
	{
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),    Nullable] public string?   SchemaName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),      Nullable] public string?   TaskName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The task plan operation producing the message
		/// </summary>
		[Column("OPERATION_NAME"), Nullable] public string?   OperationName { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Error, warning, or information
		/// </summary>
		[Column(),                 Nullable] public string?   SEVERITY      { get; set; } // NVARCHAR(12)
		/// <summary>
		/// The ID of the message
		/// </summary>
		[Column("MESSAGE_ID"),     Nullable] public string?   MessageId     { get; set; } // NVARCHAR(8)
		/// <summary>
		/// The message text
		/// </summary>
		[Column("MESSAGE_TEXT"),   Nullable] public string?   MessageText   { get; set; } // NVARCHAR(2048)
		/// <summary>
		/// The time the message was issued
		/// </summary>
		[Column("MESSAGE_TIME"),   Nullable] public DateTime? MessageTime   { get; set; } // SECONDDATE
	}

	[Table(Schema="_SYS_TASK", Name="CREATE_TASK_MESSAGES_")]
	public partial class _SYS_TASK_CreateTaskMessages
	{
		[Column("SCHEMA_NAME"),    Nullable] public string?   SchemaName    { get; set; } // NVARCHAR(256)
		[Column("TASK_NAME"),      Nullable] public string?   TaskName      { get; set; } // NVARCHAR(256)
		[Column("OPERATION_NAME"), Nullable] public string?   OperationName { get; set; } // NVARCHAR(128)
		[Column(),                 Nullable] public string?   SEVERITY      { get; set; } // NVARCHAR(12)
		[Column("MESSAGE_ID"),     Nullable] public string?   MessageId     { get; set; } // NVARCHAR(8)
		[Column("MESSAGE_TEXT"),   Nullable] public string?   MessageText   { get; set; } // NVARCHAR(2048)
		[Column("MESSAGE_TIME"),   Nullable] public DateTime? MessageTime   { get; set; } // SECONDDATE
	}

	/// <summary>
	/// Runtime data of column tables
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="CS_TABLES", IsView=true)]
	public partial class _SYS_TELEMETRY_CsTable
	{
		/// <summary>
		/// Timestamp (UTC) identifying when the statistics service performed a data collection. Data collections scheduled for the same time have the same snapshot ID.
		/// </summary>
		[Column("SNAPSHOT_ID"),                        NotNull    ] public DateTime SnapshotId                    { get; set; } // TIMESTAMP
		/// <summary>
		/// Total memory size is the sum of memory size in main, delta, and history parts
		/// </summary>
		[Column("MEMORY_SIZE_IN_TOTAL"),                  Nullable] public long?    MemorySizeInTotal             { get; set; } // BIGINT
		/// <summary>
		/// Estimated maximum memory consumption in total for table fully loaded (not including data for open transactions)
		/// </summary>
		[Column("ESTIMATED_MAX_MEMORY_SIZE_IN_TOTAL"),    Nullable] public long?    EstimatedMaxMemorySizeInTotal { get; set; } // BIGINT
		/// <summary>
		/// Record count
		/// </summary>
		[Column("RECORD_COUNT"),                          Nullable] public long?    RecordCount                   { get; set; } // BIGINT
		/// <summary>
		/// Number of read accesses on the table or partition. Note: This is not the number of SELECT statements against this table. A SELECT may involve several read accesses.
		/// </summary>
		[Column("READ_COUNT"),                            Nullable] public long?    ReadCount                     { get; set; } // BIGINT
		/// <summary>
		/// Number of write accesses on the table or partition. Note: This is not the number of DML & DDL statements against this table.  A DML or DDL statement may involve several write accesses.
		/// </summary>
		[Column("WRITE_COUNT"),                           Nullable] public long?    WriteCount                    { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_TASK", Name="CURRENT_VERSIONS_")]
	public partial class _SYS_TASK_CurrentVersions
	{
		#nullable disable
		[Column("VERSION_ID"),  PrimaryKey,  NotNull] public string VersionId  { get; set; } // NVARCHAR(20)
		#nullable enable
		[Column("VERSION_NUM"),    Nullable         ] public int?   VersionNum { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_XS", Name="DEBUG_PERMISSIONS")]
	public partial class _SYS_XS_DebugPermission
	{
		#nullable disable
		[Column, NotNull    ] public string   GRANTOR  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column, NotNull    ] public string   GRANTEE  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column, NotNull    ] public DateTime STARTING { get; set; } // TIMESTAMP
		[Column, NotNull    ] public DateTime UNTIL    { get; set; } // TIMESTAMP
		[Column,    Nullable] public string?  TOKEN    { get; set; } // NVARCHAR(32)
	}

	/// <summary>
	/// Disk usage information on host basis group by usage_types
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="DISK_USAGE", IsView=true)]
	public partial class _SYS_TELEMETRY_DiskUsage
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime SnapshotId { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Resource type like LOG, DATA, TRACE, DATA_BACKUP, LOG_BACKUP and CATALOG_BACKUP
		/// </summary>
		[Column("USAGE_TYPE"),  NotNull    ] public string   UsageType  { get; set; } // VARCHAR(32)
		#nullable enable
		/// <summary>
		/// Size of used disk space in bytes
		/// </summary>
		[Column("USED_SIZE"),      Nullable] public long?    UsedSize   { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="Doctor")]
	public partial class Doctor
	{
		[PrimaryKey, NotNull] public int    PersonID { get; set; } // INTEGER
		#nullable disable
		[Column,     NotNull] public string Taxonomy { get; set; } // NVARCHAR(50)
		#nullable enable

		#region Associations

		#nullable disable
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Doctor_Person", BackReferenceName="Doctor")]
		public Person Person { get; set; }

		#nullable enable

		#endregion
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="EDGE_STATISTICS", IsView=true)]
	public partial class _SYS_SQL_ANALYZER_EdgeStatistic
	{
		#nullable disable
		[Column("USER_NAME"),                    NotNull    ] public string    UserName                  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("STATEMENT_EXECUTION_ID"),          Nullable] public string?   StatementExecutionId      { get; set; } // VARCHAR(32)
		[Column("PLAN_ID"),                         Nullable] public string?   PlanId                    { get; set; } // VARCHAR(256)
		[Column("PARENT_OPERATOR_ID"),              Nullable] public string?   ParentOperatorId          { get; set; } // VARCHAR(256)
		[Column("CHILD_OPERATOR_ID"),               Nullable] public string?   ChildOperatorId           { get; set; } // VARCHAR(256)
		[Column("EDGE_NAME"),                       Nullable] public string?   EdgeName                  { get; set; } // VARCHAR(512)
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"),    Nullable] public long?     ExecutedOutputRecordCount { get; set; } // BIGINT
		[Column("OUTPUT_PAYLOAD_SIZE"),             Nullable] public long?     OutputPayloadSize         { get; set; } // BIGINT
		[Column("FETCH_CALL_COUNT"),                Nullable] public long?     FetchCallCount            { get; set; } // BIGINT
		[Column("NETWORK_IO_START_TIME"),           Nullable] public DateTime? NetworkIoStartTime        { get; set; } // TIMESTAMP
		[Column("NETWORK_IO_END_TIME"),             Nullable] public DateTime? NetworkIoEndTime          { get; set; } // TIMESTAMP
		[Column("ACCESSED_TABLE_NAMES"),            Nullable] public string?   AccessedTableNames        { get; set; } // NVARCHAR(5000)
		[Column("EDGE_DETAILS"),                    Nullable] public string?   EdgeDetails               { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="EDGE_STATISTICS_")]
	public partial class _SYS_SQL_ANALYZER_EdgeStatistics
	{
		[Column("USER_NAME"),                    Nullable] public string?   UserName                  { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"),       Nullable] public string?   StatementExecutionId      { get; set; } // VARCHAR(32)
		[Column("PLAN_ID"),                      Nullable] public string?   PlanId                    { get; set; } // VARCHAR(256)
		[Column("PARENT_OPERATOR_ID"),           Nullable] public string?   ParentOperatorId          { get; set; } // VARCHAR(256)
		[Column("CHILD_OPERATOR_ID"),            Nullable] public string?   ChildOperatorId           { get; set; } // VARCHAR(256)
		[Column("EDGE_NAME"),                    Nullable] public string?   EdgeName                  { get; set; } // VARCHAR(512)
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"), Nullable] public long?     ExecutedOutputRecordCount { get; set; } // BIGINT
		[Column("OUTPUT_PAYLOAD_SIZE"),          Nullable] public long?     OutputPayloadSize         { get; set; } // BIGINT
		[Column("FETCH_CALL_COUNT"),             Nullable] public long?     FetchCallCount            { get; set; } // BIGINT
		[Column("NETWORK_IO_START_TIME"),        Nullable] public DateTime? NetworkIoStartTime        { get; set; } // TIMESTAMP
		[Column("NETWORK_IO_END_TIME"),          Nullable] public DateTime? NetworkIoEndTime          { get; set; } // TIMESTAMP
		[Column("ACCESSED_TABLE_NAMES"),         Nullable] public string?   AccessedTableNames        { get; set; } // NVARCHAR(5000)
		[Column("EDGE_DETAILS"),                 Nullable] public string?   EdgeDetails               { get; set; } // NCLOB
	}

	/// <summary>
	/// Information about root keys used by persistence encryption, application encryption or log encryption
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="ENCRYPTION_ROOT_KEYS", IsView=true)]
	public partial class SYS_DATABASES_EncryptionRootKey
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Usage type of the root key:'PERSISTENCE','DPAPI'
		/// </summary>
		[Column("ROOT_KEY_TYPE"),       Nullable] public string?   RootKeyType     { get; set; } // VARCHAR(16)
		/// <summary>
		/// Version of the root key created for this root key type
		/// </summary>
		[Column("ROOT_KEY_VERSION"),    Nullable] public int?      RootKeyVersion  { get; set; } // INTEGER
		/// <summary>
		/// Creation time of the root key (UTC)
		/// </summary>
		[Column("CREATE_TIMESTAMP"),    Nullable] public DateTime? CreateTimestamp { get; set; } // TIMESTAMP
		/// <summary>
		/// TRUE if key is consistent between persistence and SSFS file, FALSE otherwise
		/// </summary>
		[Column("IS_CONSISTENT"),       Nullable] public string?   IsConsistent    { get; set; } // VARCHAR(5)
		/// <summary>
		/// Number of consistency resets
		/// </summary>
		[Column("RESET_COUNT"),         Nullable] public int?      ResetCount      { get; set; } // INTEGER
		/// <summary>
		/// TRUE if the key version is the version used for encryption, FALSE otherwise
		/// </summary>
		[Column("IS_USED"),             Nullable] public string?   IsUsed          { get; set; } // VARCHAR(5)
		#nullable disable
		/// <summary>
		/// The key state is ACTIVE, PREACTIVE or DEACTIVATED
		/// </summary>
		[Column("ROOT_KEY_STATUS"),  NotNull    ] public string    RootKeyStatus   { get; set; } // VARCHAR(11)
		#nullable enable
	}

	/// <summary>
	/// Enterprise Search configuration
	/// </summary>
	[Table(Schema="_SYS_RT", Name="ESH_MODEL", IsView=true)]
	public partial class _SYS_RT_EshModel0
	{
		#nullable disable
		/// <summary>
		/// Schema name
		/// </summary>
		[Column("SCHEMA_NAME"),               NotNull    ] public string   SchemaName              { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View name
		/// </summary>
		[Column("VIEW_NAME"),                 NotNull    ] public string   ViewName                { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// Repository package id
		/// </summary>
		[Column("PACKAGE_ID"),                   Nullable] public string?  PackageId               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Repository object name
		/// </summary>
		[Column("OBJECT_NAME"),                  Nullable] public string?  ObjectName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Repository object suffix
		/// </summary>
		[Column("OBJECT_SUFFIX"),                Nullable] public string?  ObjectSuffix            { get; set; } // NVARCHAR(255)
		/// <summary>
		/// Timestamp of last change (UTC)
		/// </summary>
		[Column("LAST_CHANGED"),              NotNull    ] public DateTime LastChanged             { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Enables CDS views for enterprise search
		/// </summary>
		[Column("ENTERPRISE_SEARCH_ENABLED"), NotNull    ] public object   EnterpriseSearchEnabled { get; set; } // BOOLEAN
		#nullable enable
		/// <summary>
		/// Odata identifier
		/// </summary>
		[Column("ODATA_ID"),                     Nullable] public string?  OdataId                 { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Configuration identifier
		/// </summary>
		[Column("CONFIGURATION_ID"),             Nullable] public string?  ConfigurationId         { get; set; } // NVARCHAR(5000)
	}

	/// <summary>
	/// Enterprise Search configuration
	/// </summary>
	[Table(Schema="_SYS_RT", Name="ESH_MODEL_")]
	public partial class _SYS_RT_EshModel1
	{
		#nullable disable
		/// <summary>
		/// Schema name
		/// </summary>
		[Column("SCHEMA_NAME"),               PrimaryKey(1), NotNull] public string   SchemaName              { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View name
		/// </summary>
		[Column("VIEW_NAME"),                 PrimaryKey(2), NotNull] public string   ViewName                { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// Repository package id
		/// </summary>
		[Column("PACKAGE_ID"),                   Nullable           ] public string?  PackageId               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Repository object name
		/// </summary>
		[Column("OBJECT_NAME"),                  Nullable           ] public string?  ObjectName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Repository object suffix
		/// </summary>
		[Column("OBJECT_SUFFIX"),                Nullable           ] public string?  ObjectSuffix            { get; set; } // NVARCHAR(255)
		/// <summary>
		/// Timestamp of last change (UTC)
		/// </summary>
		[Column("LAST_CHANGED"),                             NotNull] public DateTime LastChanged             { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Enables CDS views for enterprise search
		/// </summary>
		[Column("ENTERPRISE_SEARCH_ENABLED"),                NotNull] public object   EnterpriseSearchEnabled { get; set; } // BOOLEAN
		#nullable enable
		/// <summary>
		/// Odata identifier
		/// </summary>
		[Column("ODATA_ID"),                     Nullable           ] public string?  OdataId                 { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Configuration identifier
		/// </summary>
		[Column("CONFIGURATION_ID"),             Nullable           ] public string?  ConfigurationId         { get; set; } // NVARCHAR(5000)
	}

	[Table(Schema="_SYS_RT", Name="ESH_MODEL_AUTH_")]
	public partial class _SYS_RT_EshModelAuth
	{
		#nullable disable
		[Column("SCHEMA_NAME"),      NotNull    ] public string  SchemaName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("VIEW_NAME"),        NotNull    ] public string  ViewName       { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                   NotNull    ] public string  CHECKID        { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("AUTH_OBJCT"),          Nullable] public string? AuthObjct      { get; set; } // NVARCHAR(256)
		[Column("AUTH_COLUMN_NAME"),    Nullable] public string? AuthColumnName { get; set; } // NVARCHAR(256)
		[Column("VIEW_COLUMN_NAME"),    Nullable] public string? ViewColumnName { get; set; } // NVARCHAR(256)
		#nullable disable
		[Column(),                   NotNull    ] public string  TYPE           { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                      Nullable] public string? VALUE          { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// Enterprise Search configuration properties
	/// </summary>
	[Table(Schema="_SYS_RT", Name="ESH_MODEL_PROPERTY", IsView=true)]
	public partial class _SYS_RT_EshModelProperty0
	{
		#nullable disable
		/// <summary>
		/// Schema name
		/// </summary>
		[Column("SCHEMA_NAME"), NotNull] public string SchemaName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View name
		/// </summary>
		[Column("VIEW_NAME"),   NotNull] public string ViewName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View column name
		/// </summary>
		[Column("COLUMN_NAME"), NotNull] public string ColumnName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Property name
		/// </summary>
		[Column(),              NotNull] public string PROPERTY   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Property value
		/// </summary>
		[Column(),              NotNull] public string VALUE      { get; set; } // NVARCHAR(5000)
		#nullable enable
	}

	/// <summary>
	/// Enterprise Search configuration properties
	/// </summary>
	[Table(Schema="_SYS_RT", Name="ESH_MODEL_PROPERTY_")]
	public partial class _SYS_RT_EshModelProperty1
	{
		#nullable disable
		/// <summary>
		/// Schema name
		/// </summary>
		[Column("SCHEMA_NAME"), PrimaryKey(1), NotNull] public string SchemaName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View name
		/// </summary>
		[Column("VIEW_NAME"),   PrimaryKey(2), NotNull] public string ViewName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// View column name
		/// </summary>
		[Column("COLUMN_NAME"), PrimaryKey(3), NotNull] public string ColumnName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Property name
		/// </summary>
		[Column(),              PrimaryKey(4), NotNull] public string PROPERTY   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Property value
		/// </summary>
		[Column(),                             NotNull] public string VALUE      { get; set; } // NVARCHAR(5000)
		#nullable enable
	}

	/// <summary>
	/// Internal events
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="EVENTS", IsView=true)]
	public partial class _SYS_TELEMETRY_EVENT
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime  SnapshotId { get; set; } // TIMESTAMP
		/// <summary>
		/// Type of event
		/// </summary>
		[Column(),                 Nullable] public string?   TYPE       { get; set; } // VARCHAR(256)
		/// <summary>
		/// ID of event
		/// </summary>
		[Column(),              NotNull    ] public long      ID         { get; set; } // BIGINT
		/// <summary>
		/// Time event was created
		/// </summary>
		[Column("CREATE_TIME"),    Nullable] public DateTime? CreateTime { get; set; } // TIMESTAMP
		/// <summary>
		/// Time event was handled
		/// </summary>
		[Column("HANDLE_TIME"),    Nullable] public DateTime? HandleTime { get; set; } // TIMESTAMP
		/// <summary>
		/// State of event
		/// </summary>
		[Column(),                 Nullable] public string?   STATE      { get; set; } // VARCHAR(256)
	}

	/// <summary>
	/// Detailed feature usage statistics
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="FEATURE_USAGE", IsView=true)]
	public partial class _SYS_TELEMETRY_FeatureUsage
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),    NotNull    ] public DateTime  SnapshotId    { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Component name (see M_FEATURES)
		/// </summary>
		[Column("COMPONENT_NAME"), NotNull    ] public string    ComponentName { get; set; } // VARCHAR(32)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Feature name (see M_FEATURES)
		/// </summary>
		[Column("FEATURE_NAME"),   NotNull    ] public string    FeatureName   { get; set; } // VARCHAR(64)
		#nullable enable
		/// <summary>
		/// Counter tracking the number of times, the feature was used since the last start of the indexserver (e.g. number of accesses to any history table).
		/// </summary>
		[Column("CALL_COUNT"),        Nullable] public long?     CallCount     { get; set; } // BIGINT
		/// <summary>
		/// Last point in time when the feature was used.
		/// </summary>
		[Column("LAST_TIMESTAMP"),    Nullable] public DateTime? LastTimestamp { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// Lists the FSIDs for the current database/tenant
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="FULL_SYSTEM_INFO_DUMPS", IsView=true)]
	public partial class SYS_DATABASES_FullSystemInfoDump
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string?   DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// File name of the collection
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string?   FileName     { get; set; } // NVARCHAR(512)
		/// <summary>
		/// File size in Bytes
		/// </summary>
		[Column("FILE_SIZE"),     Nullable] public long?     FileSize     { get; set; } // BIGINT
		/// <summary>
		/// File modification date
		/// </summary>
		[Column("FILE_MTIME"),    Nullable] public DateTime? FileMtime    { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_EXECUTION_COUNTS")]
	public partial class _SYS_AFL_FunctionExecutionCount
	{
		#nullable disable
		[Column("AREA_NAME"),       PrimaryKey(1), NotNull] public string    AreaName       { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("FUNCTION_NAME"),   PrimaryKey(2), NotNull] public string    FunctionName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                  PrimaryKey(3), NotNull] public string    HOST           { get; set; } // VARCHAR(64)
		#nullable enable
		[Column(),                  PrimaryKey(4), NotNull] public int       PORT           { get; set; } // INTEGER
		[Column("EXECUTION_COUNT"),    Nullable           ] public long?     ExecutionCount { get; set; } // BIGINT
		[Column("LAST_EXECUTION"),     Nullable           ] public DateTime? LastExecution  { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_EXECUTION_COUNTS_CONTROL")]
	public partial class _SYS_AFL_FunctionExecutionCountsControl
	{
		#nullable disable
		[PrimaryKey, NotNull    ] public string KEY   { get; set; } // VARCHAR(64)
		#nullable enable
		[Column,        Nullable] public long?  VALUE { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_PROGRESS_IN_AFLBFL")]
	public partial class _SYS_AFL_FunctionProgressInAflbfl
	{
		[Column("EXECUTION_ID"),         Nullable] public string?   ExecutionId         { get; set; } // VARCHAR(64)
		[Column("FUNCTION_NAME"),        Nullable] public string?   FunctionName        { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		[Column(),                       Nullable] public int?      PORT                { get; set; } // INTEGER
		[Column("CONNECTION_ID"),        Nullable] public int?      ConnectionId        { get; set; } // INTEGER
		[Column("PROGRESS_TIMESTAMP"),   Nullable] public DateTime? ProgressTimestamp   { get; set; } // TIMESTAMP
		[Column("PROGRESS_ELAPSEDTIME"), Nullable] public int?      ProgressElapsedtime { get; set; } // INTEGER
		[Column("PROGRESS_CURRENT"),     Nullable] public int?      ProgressCurrent     { get; set; } // INTEGER
		[Column("PROGRESS_MAX"),         Nullable] public int?      ProgressMax         { get; set; } // INTEGER
		[Column("PROGRESS_LEVEL"),       Nullable] public string?   ProgressLevel       { get; set; } // VARCHAR(16)
		[Column("PROGRESS_MESSAGE"),     Nullable] public string?   ProgressMessage     { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_PROGRESS_IN_AFLPAL")]
	public partial class _SYS_AFL_FunctionProgressInAflpal
	{
		[Column("EXECUTION_ID"),         Nullable] public string?   ExecutionId         { get; set; } // VARCHAR(64)
		[Column("FUNCTION_NAME"),        Nullable] public string?   FunctionName        { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		[Column(),                       Nullable] public int?      PORT                { get; set; } // INTEGER
		[Column("CONNECTION_ID"),        Nullable] public int?      ConnectionId        { get; set; } // INTEGER
		[Column("PROGRESS_TIMESTAMP"),   Nullable] public DateTime? ProgressTimestamp   { get; set; } // TIMESTAMP
		[Column("PROGRESS_ELAPSEDTIME"), Nullable] public int?      ProgressElapsedtime { get; set; } // INTEGER
		[Column("PROGRESS_CURRENT"),     Nullable] public int?      ProgressCurrent     { get; set; } // INTEGER
		[Column("PROGRESS_MAX"),         Nullable] public int?      ProgressMax         { get; set; } // INTEGER
		[Column("PROGRESS_LEVEL"),       Nullable] public string?   ProgressLevel       { get; set; } // VARCHAR(16)
		[Column("PROGRESS_MESSAGE"),     Nullable] public string?   ProgressMessage     { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_PROGRESS_IN_HIE_AREA")]
	public partial class _SYS_AFL_FunctionProgressInHieArea
	{
		[Column("EXECUTION_ID"),         Nullable] public string?   ExecutionId         { get; set; } // VARCHAR(64)
		[Column("FUNCTION_NAME"),        Nullable] public string?   FunctionName        { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		[Column(),                       Nullable] public int?      PORT                { get; set; } // INTEGER
		[Column("CONNECTION_ID"),        Nullable] public int?      ConnectionId        { get; set; } // INTEGER
		[Column("PROGRESS_TIMESTAMP"),   Nullable] public DateTime? ProgressTimestamp   { get; set; } // TIMESTAMP
		[Column("PROGRESS_ELAPSEDTIME"), Nullable] public int?      ProgressElapsedtime { get; set; } // INTEGER
		[Column("PROGRESS_CURRENT"),     Nullable] public int?      ProgressCurrent     { get; set; } // INTEGER
		[Column("PROGRESS_MAX"),         Nullable] public int?      ProgressMax         { get; set; } // INTEGER
		[Column("PROGRESS_LEVEL"),       Nullable] public string?   ProgressLevel       { get; set; } // VARCHAR(16)
		[Column("PROGRESS_MESSAGE"),     Nullable] public string?   ProgressMessage     { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_PROGRESS_IN_LCAPPS_WRAPPER_AREA")]
	public partial class _SYS_AFL_FunctionProgressInLcappsWrapperArea
	{
		[Column("EXECUTION_ID"),         Nullable] public string?   ExecutionId         { get; set; } // VARCHAR(64)
		[Column("FUNCTION_NAME"),        Nullable] public string?   FunctionName        { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		[Column(),                       Nullable] public int?      PORT                { get; set; } // INTEGER
		[Column("CONNECTION_ID"),        Nullable] public int?      ConnectionId        { get; set; } // INTEGER
		[Column("PROGRESS_TIMESTAMP"),   Nullable] public DateTime? ProgressTimestamp   { get; set; } // TIMESTAMP
		[Column("PROGRESS_ELAPSEDTIME"), Nullable] public int?      ProgressElapsedtime { get; set; } // INTEGER
		[Column("PROGRESS_CURRENT"),     Nullable] public int?      ProgressCurrent     { get; set; } // INTEGER
		[Column("PROGRESS_MAX"),         Nullable] public int?      ProgressMax         { get; set; } // INTEGER
		[Column("PROGRESS_LEVEL"),       Nullable] public string?   ProgressLevel       { get; set; } // VARCHAR(16)
		[Column("PROGRESS_MESSAGE"),     Nullable] public string?   ProgressMessage     { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_AFL", Name="FUNCTION_PROGRESS_IN_OFL_AREA")]
	public partial class _SYS_AFL_FunctionProgressInOflArea
	{
		[Column("EXECUTION_ID"),         Nullable] public string?   ExecutionId         { get; set; } // VARCHAR(64)
		[Column("FUNCTION_NAME"),        Nullable] public string?   FunctionName        { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		[Column(),                       Nullable] public int?      PORT                { get; set; } // INTEGER
		[Column("CONNECTION_ID"),        Nullable] public int?      ConnectionId        { get; set; } // INTEGER
		[Column("PROGRESS_TIMESTAMP"),   Nullable] public DateTime? ProgressTimestamp   { get; set; } // TIMESTAMP
		[Column("PROGRESS_ELAPSEDTIME"), Nullable] public int?      ProgressElapsedtime { get; set; } // INTEGER
		[Column("PROGRESS_CURRENT"),     Nullable] public int?      ProgressCurrent     { get; set; } // INTEGER
		[Column("PROGRESS_MAX"),         Nullable] public int?      ProgressMax         { get; set; } // INTEGER
		[Column("PROGRESS_LEVEL"),       Nullable] public string?   ProgressLevel       { get; set; } // VARCHAR(16)
		[Column("PROGRESS_MESSAGE"),     Nullable] public string?   ProgressMessage     { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// This table contains one row per info code generated by the geocode transformation process
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="GEOCODE_INFO_CODES", IsView=true)]
	public partial class _SYS_TASK_GeocodeInfoCode
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),       NotNull    ] public string  SchemaName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),         NotNull    ] public string  TaskName        { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"), NotNull    ] public long    TaskExecutionId { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),       Nullable] public string? OperationName   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),           Nullable] public string? TableName       { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),            NotNull    ] public long    RowId           { get; set; } // BIGINT
		/// <summary>
		/// The source where the data was produced
		/// </summary>
		[Column("DATA_SOURCE"),          Nullable] public string? DataSource      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The informational code generated by the geocode transformation operation
		/// </summary>
		[Column("INFO_CODE"),            Nullable] public string? InfoCode        { get; set; } // NVARCHAR(10)
	}

	[Table(Schema="_SYS_TASK", Name="GEOCODE_INFO_CODES_")]
	public partial class _SYS_TASK_GeocodeInfoCodes
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("TABLE_ID"),          PrimaryKey(3), NotNull] public int     TableId         { get; set; } // INTEGER
		[Column("ROW_ID"),            PrimaryKey(4), NotNull] public long    RowId           { get; set; } // BIGINT
		[Column("DATA_SOURCE"),          Nullable           ] public string? DataSource      { get; set; } // NVARCHAR(256)
		[Column("INFO_CODE"),            Nullable           ] public string? InfoCode        { get; set; } // NVARCHAR(10)
	}

	/// <summary>
	/// This table contains a summary of Geocode statistics
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="GEOCODE_STATISTICS", IsView=true)]
	public partial class _SYS_TASK_GeocodeStatistic
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),       NotNull    ] public string  SchemaName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),         NotNull    ] public string  TaskName        { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"), NotNull    ] public long    TaskExecutionId { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),       Nullable] public string? OperationName   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The total number of records processed
		/// </summary>
		[Column("NUM_RECORDS"),          Nullable] public long?   NumRecords      { get; set; } // BIGINT
		/// <summary>
		/// The number of assigned records processed
		/// </summary>
		[Column("NUM_ASSIGNED"),         Nullable] public long?   NumAssigned     { get; set; } // BIGINT
		/// <summary>
		/// The number of unassigned records processed
		/// </summary>
		[Column("NUM_UNASSIGNED"),       Nullable] public long?   NumUnassigned   { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_TASK", Name="GEOCODE_STATISTICS_")]
	public partial class _SYS_TASK_GeocodeStatistics
	{
		[Column("TASK_EXECUTION_ID"), Nullable] public long? TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      Nullable] public int?  OperationId     { get; set; } // INTEGER
		[Column("NUM_RECORDS"),       Nullable] public long? NumRecords      { get; set; } // BIGINT
		[Column("NUM_ASSIGNED"),      Nullable] public long? NumAssigned     { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column, Nullable] public int? ParentID     { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID      { get; set; } // INTEGER
		[Column, Nullable] public int? GrandChildID { get; set; } // INTEGER
	}

	/// <summary>
	/// General HANA feature usage information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="HANA_USAGE_ON_DEMAND", IsView=true)]
	public partial class _SYS_TELEMETRY_HanaUsageOnDemand
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime SnapshotId { get; set; } // TIMESTAMP
		/// <summary>
		/// HANA feature name
		/// </summary>
		[Column("0SM_FEAT"),       Nullable] public string?  _0smFeat   { get; set; } // NVARCHAR(256)
		#nullable disable
		/// <summary>
		/// HANA feature type
		/// </summary>
		[Column("0SM_TYPE"),    NotNull    ] public string   _0smType   { get; set; } // VARCHAR(11)
		#nullable enable
		#nullable disable
		/// <summary>
		/// HANA feature subtype
		/// </summary>
		[Column("0SM_SUBT"),    NotNull    ] public string   _0smSubt   { get; set; } // VARCHAR(18)
		#nullable enable
		/// <summary>
		/// HANA feature usage
		/// </summary>
		[Column("0SM_TRAF"),       Nullable] public long?    _0smTraf   { get; set; } // BIGINT
		/// <summary>
		/// HANA feature subtype instance number
		/// </summary>
		[Column("0SM_NORM"),    NotNull    ] public long     _0smNorm   { get; set; } // BIGINT
	}

	/// <summary>
	/// Memory allocator statistics
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="HEAP_MEMORY", IsView=true)]
	public partial class _SYS_TELEMETRY_HeapMemory
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),           NotNull    ] public DateTime SnapshotId         { get; set; } // TIMESTAMP
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                        NotNull    ] public int      PORT               { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),             NotNull    ] public int      VolumeId           { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// Allocator name
		/// </summary>
		[Column(),                        NotNull    ] public string   CATEGORY           { get; set; } // VARCHAR(128)
		#nullable enable
		/// <summary>
		/// Current size of this allocator
		/// </summary>
		[Column("EXCLUSIVE_SIZE_IN_USE"),    Nullable] public long?    ExclusiveSizeInUse { get; set; } // BIGINT
	}

	/// <summary>
	/// Host information such as machine, OS configuration
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="HOST_INFORMATION", IsView=true)]
	public partial class _SYS_TELEMETRY_HostInformation
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime SnapshotId { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Key
		/// </summary>
		[Column(),              NotNull    ] public string   KEY        { get; set; } // VARCHAR(32)
		#nullable enable
		/// <summary>
		/// Value
		/// </summary>
		[Column(),                 Nullable] public string?  VALUE      { get; set; } // VARCHAR(256)
	}

	[Table(Schema="_SYS_XS", Name="HTTP_DESTINATIONS")]
	public partial class _SYS_XS_HttpDestination
	{
		#nullable disable
		[Column("PACKAGE_ID"),               PrimaryKey(1), NotNull] public string  PackageId             { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),              PrimaryKey(2), NotNull] public string  ObjectName            { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                              Nullable           ] public string? DESCRIPTION           { get; set; } // NVARCHAR(512)
		#nullable disable
		[Column(),                                          NotNull] public string  HOST                  { get; set; } // NVARCHAR(2048)
		#nullable enable
		[Column(),                                          NotNull] public int     PORT                  { get; set; } // INTEGER
		[Column("PATH_PREFIX"),                 Nullable           ] public string? PathPrefix            { get; set; } // NVARCHAR(2048)
		[Column("PROXY_TYPE"),                              NotNull] public byte    ProxyType             { get; set; } // TINYINT
		[Column("PROXY_HOST"),                  Nullable           ] public string? ProxyHost             { get; set; } // NVARCHAR(2048)
		[Column("PROXY_PORT"),                              NotNull] public int     ProxyPort             { get; set; } // INTEGER
		[Column("AUTHENTICATION_TYPE"),                     NotNull] public byte    AuthenticationType    { get; set; } // TINYINT
		[Column("USE_SSL"),                                 NotNull] public byte    UseSsl                { get; set; } // TINYINT
		[Column(),                                          NotNull] public short   TIMEOUT               { get; set; } // SMALLINT
		[Column("REMOTE_SID"),                  Nullable           ] public string? RemoteSid             { get; set; } // NVARCHAR(12)
		[Column("REMOTE_CLIENT"),               Nullable           ] public string? RemoteClient          { get; set; } // NVARCHAR(12)
		[Column("SAML_PROVIDER"),               Nullable           ] public string? SamlProvider          { get; set; } // NVARCHAR(1024)
		[Column("SAML_NAMEID"),                             NotNull] public int     SamlNameid            { get; set; } // INTEGER
		[Column("SAML_ACS"),                    Nullable           ] public string? SamlAcs               { get; set; } // NVARCHAR(2048)
		[Column("SAML_ATTRIBUTES"),             Nullable           ] public string? SamlAttributes        { get; set; } // NVARCHAR(2048)
		[Column("OAUTH_APP_CONFIG_PACKAGE"),    Nullable           ] public string? OauthAppConfigPackage { get; set; } // NVARCHAR(256)
		[Column("OAUTH_APP_CONFIG"),            Nullable           ] public string? OauthAppConfig        { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_RT", Name="_INA_ACTIVE_OBJECT")]
	public partial class _SYS_RT_InaActiveObject
	{
		#nullable disable
		[Column("PACKAGE_ID"),            PrimaryKey(1), NotNull] public string PackageId           { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),           PrimaryKey(2), NotNull] public string ObjectName          { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_SUFFIX"),         PrimaryKey(3), NotNull] public string ObjectSuffix        { get; set; } // NVARCHAR(255)
		#nullable enable
		[Column("IS_SEARCH_SUPPORTED"),      Nullable           ] public char?  IsSearchSupported   { get; set; } // VARCHAR(1)
		[Column("SCHEMA_VERSION_NUMBER"),    Nullable           ] public int?   SchemaVersionNumber { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="_INA_ACTIVE_OBJECT_PROPERTY")]
	public partial class _SYS_RT_InaActiveObjectProperty
	{
		#nullable disable
		[Column("PACKAGE_ID"),    PrimaryKey(1), NotNull] public string PackageId    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),   PrimaryKey(2), NotNull] public string ObjectName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_SUFFIX"), PrimaryKey(3), NotNull] public string ObjectSuffix { get; set; } // NVARCHAR(255)
		#nullable enable
		#nullable disable
		[Column(),                PrimaryKey(4), NotNull] public string KEY          { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                PrimaryKey(5), NotNull] public string VALUE        { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="_INA_ACTIVE_PERSPECTIVE_V", IsView=true)]
	public partial class _SYS_RT_InaActivePerspectiveV
	{
		[Column("PACKAGE_ID"),            Nullable] public string?   PackageId           { get; set; } // NVARCHAR(256)
		[Column("PERSPECTIVE_ID"),        Nullable] public string?   PerspectiveId       { get; set; } // NVARCHAR(256)
		[Column("SCHEMA_VERSION_NUMBER"), Nullable] public int?      SchemaVersionNumber { get; set; } // INTEGER
		[Column("IS_SEARCH_SUPPORTED"),   Nullable] public char?     IsSearchSupported   { get; set; } // VARCHAR(1)
		[Column("PROPERTY_KEY"),          Nullable] public string?   PropertyKey         { get; set; } // NVARCHAR(256)
		[Column("PROPERTY_VALUE"),        Nullable] public string?   PropertyValue       { get; set; } // NVARCHAR(256)
		[Column(),                        Nullable] public DateTime? TIMESTAMP           { get; set; } // TIMESTAMP
		[Column("USER_ID"),               Nullable] public string?   UserId              { get; set; } // NVARCHAR(256)
		[Column("CONTENT_TEXT_ID"),       Nullable] public string?   ContentTextId       { get; set; } // NVARCHAR(256)
		[Column("CONTENT_TEXT_TYPE"),     Nullable] public string?   ContentTextType     { get; set; } // NVARCHAR(32)
		[Column("CONTENT_TEXT_LANGUAGE"), Nullable] public string?   ContentTextLanguage { get; set; } // NVARCHAR(256)
		[Column("CONTENT_TEXT"),          Nullable] public string?   ContentText         { get; set; } // NVARCHAR(4000)
		[Column("DATASOURCE_OBJECT_ID"),  Nullable] public string?   DatasourceObjectId  { get; set; } // NVARCHAR(256)
		[Column("DATASOURCE_PACKAGE_ID"), Nullable] public string?   DatasourcePackageId { get; set; } // NVARCHAR(256)
		[Column("DATASOURCE_SCHEMA_ID"),  Nullable] public string?   DatasourceSchemaId  { get; set; } // NVARCHAR(256)
		[Column("TITLE_TEXT_LANGUAGE"),   Nullable] public string?   TitleTextLanguage   { get; set; } // NVARCHAR(256)
		[Column("TITLE_TEXT"),            Nullable] public string?   TitleText           { get; set; } // NVARCHAR(4000)
		[Column("SUMMARY_TEXT_LANGUAGE"), Nullable] public string?   SummaryTextLanguage { get; set; } // NVARCHAR(256)
		[Column("SUMMARY_TEXT"),          Nullable] public string?   SummaryText         { get; set; } // NVARCHAR(4000)
	}

	[Table(Schema="TESTHANA", Name="IndexTable")]
	public partial class IndexTable
	{
		[PrimaryKey(1), NotNull] public int PKField1    { get; set; } // INTEGER
		[PrimaryKey(2), NotNull] public int PKField2    { get; set; } // INTEGER
		[Column,        NotNull] public int UniqueField { get; set; } // INTEGER
		[Column,        NotNull] public int IndexField  { get; set; } // INTEGER

		#region Associations

		/// <summary>
		/// FK_Patient2_IndexTable_BackReference
		/// </summary>
		[Association(ThisKey="PKField1, PKField2", OtherKey="PKField1, PKField2", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public IndexTable2? Patient { get; set; }

		#endregion
	}

	[Table(Schema="TESTHANA", Name="IndexTable2")]
	public partial class IndexTable2
	{
		[PrimaryKey(1), NotNull] public int PKField1 { get; set; } // INTEGER
		[PrimaryKey(2), NotNull] public int PKField2 { get; set; } // INTEGER

		#region Associations

		#nullable disable
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(ThisKey="PKField1, PKField2", OtherKey="PKField1, PKField2", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient2_IndexTable", BackReferenceName="Patient")]
		public IndexTable Patient2IndexTable { get; set; }

		#nullable enable

		#endregion
	}

	[Table(Schema="TESTHANA", Name="InheritanceChild")]
	public partial class InheritanceChild
	{
		[PrimaryKey, NotNull    ] public int     InheritanceChildId  { get; set; } // INTEGER
		[Column,     NotNull    ] public int     InheritanceParentId { get; set; } // INTEGER
		[Column,        Nullable] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column,        Nullable] public string? Name                { get; set; } // NVARCHAR(50)
	}

	[Table(Schema="TESTHANA", Name="InheritanceParent")]
	public partial class InheritanceParent
	{
		[PrimaryKey, NotNull    ] public int     InheritanceParentId { get; set; } // INTEGER
		[Column,        Nullable] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column,        Nullable] public string? Name                { get; set; } // NVARCHAR(50)
	}

	/// <summary>
	/// Configuration information from inifiles
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="INIFILE_CONTENTS", IsView=true)]
	public partial class _SYS_TELEMETRY_InifileContent
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime SnapshotId { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Configuration file name
		/// </summary>
		[Column("FILE_NAME"),   NotNull    ] public string   FileName   { get; set; } // VARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Configuration layer: DEFAULT, SYSTEM, HOST, DATABASE
		/// </summary>
		[Column("LAYER_NAME"),  NotNull    ] public string   LayerName  { get; set; } // VARCHAR(16)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Configuration section name
		/// </summary>
		[Column(),              NotNull    ] public string   SECTION    { get; set; } // VARCHAR(128)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Configuration key name
		/// </summary>
		[Column(),              NotNull    ] public string   KEY        { get; set; } // VARCHAR(128)
		#nullable enable
		/// <summary>
		/// Configuration value
		/// </summary>
		[Column(),                 Nullable] public string?  VALUE      { get; set; } // VARCHAR(5000)
	}

	[Table(Schema="_SYS_XS", Name="JOBS")]
	public partial class _SYS_XS_JOB
	{
		#nullable disable
		[Column(),                    PrimaryKey,  NotNull] public string    NAME             { get; set; } // NVARCHAR(512)
		#nullable enable
		#nullable disable
		[Column(),                                 NotNull] public string    DESCRIPTION      { get; set; } // NVARCHAR(512)
		#nullable enable
		#nullable disable
		[Column(),                                 NotNull] public string    ACTION           { get; set; } // NVARCHAR(512)
		#nullable enable
		[Column(),                       Nullable         ] public string?   USER             { get; set; } // NVARCHAR(256)
		[Column(),                       Nullable         ] public string?   LOCALE           { get; set; } // VARCHAR(64)
		#nullable disable
		[Column(),                                 NotNull] public string    STATUS           { get; set; } // VARCHAR(16)
		#nullable enable
		[Column("START_TIME"),           Nullable         ] public DateTime? StartTime        { get; set; } // TIMESTAMP
		[Column("END_TIME"),             Nullable         ] public DateTime? EndTime          { get; set; } // TIMESTAMP
		[Column("SESSION_TIMEOUT"),      Nullable         ] public int?      SessionTimeout   { get; set; } // INTEGER
		[Column("SIGNATURE_VERSION"),    Nullable         ] public int?      SignatureVersion { get; set; } // INTEGER
		[Column("ACTIVATED_BY"),         Nullable         ] public string?   ActivatedBy      { get; set; } // NVARCHAR(256)
		[Column("ACTIVATED_AT"),         Nullable         ] public DateTime? ActivatedAt      { get; set; } // TIMESTAMP
		[Column("CONFIGURED_BY"),        Nullable         ] public string?   ConfiguredBy     { get; set; } // NVARCHAR(256)
		[Column("CONFIGURED_AT"),        Nullable         ] public DateTime? ConfiguredAt     { get; set; } // TIMESTAMP
		[Column("SCHEMA_NAME"),          Nullable         ] public string?   SchemaName       { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XS", Name="JOB_LOG")]
	public partial class _SYS_XS_JobLog
	{
		#nullable disable
		[Column(),                PrimaryKey(1), NotNull] public string    NAME         { get; set; } // NVARCHAR(512)
		#nullable enable
		[Column(),                PrimaryKey(2), NotNull] public long      ID           { get; set; } // BIGINT
		[Column("PLANNED_TIME"),  PrimaryKey(3), NotNull] public DateTime  PlannedTime  { get; set; } // TIMESTAMP
		#nullable disable
		[Column(),                               NotNull] public string    STATUS       { get; set; } // VARCHAR(16)
		#nullable enable
		[Column("ERROR_MESSAGE"),    Nullable           ] public string?   ErrorMessage { get; set; } // NVARCHAR(2048)
		[Column("STARTED_AT"),       Nullable           ] public DateTime? StartedAt    { get; set; } // TIMESTAMP
		[Column("FINISHED_AT"),      Nullable           ] public DateTime? FinishedAt   { get; set; } // TIMESTAMP
		[Column(),                   Nullable           ] public string?   HOST         { get; set; } // NVARCHAR(256)
		[Column(),                   Nullable           ] public string?   PORT         { get; set; } // VARCHAR(5)
		[Column(),                   Nullable           ] public string?   ACTION       { get; set; } // NVARCHAR(512)
		[Column(),                   Nullable           ] public string?   USER         { get; set; } // NVARCHAR(256)
		[Column(),                   Nullable           ] public string?   LOCALE       { get; set; } // VARCHAR(64)
		[Column("THREAD_ID"),        Nullable           ] public long?     ThreadId     { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_XS", Name="JOB_SCHEDULES")]
	public partial class _SYS_XS_JobSchedule
	{
		[Column(),             PrimaryKey,  NotNull] public long      ID          { get; set; } // BIGINT
		#nullable disable
		[Column("JOB_NAME"),                NotNull] public string    JobName     { get; set; } // NVARCHAR(512)
		#nullable enable
		#nullable disable
		[Column(),                          NotNull] public string    XSCRON      { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                Nullable         ] public string?   DESCRIPTION { get; set; } // NVARCHAR(512)
		[Column(),                Nullable         ] public string?   PARAMETER   { get; set; } // NCLOB
		[Column(),                Nullable         ] public string?   ORIGIN      { get; set; } // VARCHAR(11)
		#nullable disable
		[Column(),                          NotNull] public string    STATUS      { get; set; } // VARCHAR(16)
		#nullable enable
		[Column("CHANGED_BY"),    Nullable         ] public string?   ChangedBy   { get; set; } // NVARCHAR(256)
		[Column("CHANGED_AT"),    Nullable         ] public DateTime? ChangedAt   { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="JS_RECOMPILE_ISSUES")]
	public partial class _SYS_XS_JsRecompileIssue
	{
		#nullable disable
		[Column("PACKAGE_ID"),    PrimaryKey(1), NotNull] public string   PackageId    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),   PrimaryKey(2), NotNull] public string   ObjectName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_SUFFIX"), PrimaryKey(3), NotNull] public string   ObjectSuffix { get; set; } // NVARCHAR(255)
		#nullable enable
		[Column(),                PrimaryKey(4), NotNull] public DateTime STAMP        { get; set; } // TIMESTAMP
		#nullable disable
		[Column(),                               NotNull] public string   MESSAGE      { get; set; } // NVARCHAR(2048)
		#nullable enable
	}

	/// <summary>
	/// Information on all licenses (if any) so far installed on this system
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="LICENSES", IsView=true)]
	public partial class _SYS_TELEMETRY_License
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),             NotNull    ] public DateTime  SnapshotId            { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Name of the licensed software product, e.g. SAP HANA
		/// </summary>
		[Column("PRODUCT_NAME"),            NotNull    ] public string    ProductName           { get; set; } // VARCHAR(256)
		#nullable enable
		/// <summary>
		/// Allowed product usage as specified by the license (e.g. main memory)
		/// </summary>
		[Column("PRODUCT_LIMIT"),              Nullable] public long?     ProductLimit          { get; set; } // BIGINT
		/// <summary>
		/// Date of the first installation of the license
		/// </summary>
		[Column("FIRST_INSTALLATION_TIME"),    Nullable] public DateTime? FirstInstallationTime { get; set; } // TIMESTAMP
		/// <summary>
		/// Start date of the validity period of the license
		/// </summary>
		[Column("START_DATE"),                 Nullable] public DateTime? StartDate             { get; set; } // TIMESTAMP
		/// <summary>
		/// Expiration date of the validity period of the license
		/// </summary>
		[Column("EXPIRATION_DATE"),            Nullable] public DateTime? ExpirationDate        { get; set; } // TIMESTAMP
		/// <summary>
		/// TRUE if the license is a permanent one, FALSE if the license is a temporary one
		/// </summary>
		[Column(),                             Nullable] public string?   PERMANENT             { get; set; } // VARCHAR(5)
		/// <summary>
		/// TRUE if the license is currently valid, otherwise FALSE
		/// </summary>
		[Column(),                             Nullable] public string?   VALID                 { get; set; } // VARCHAR(5)
		/// <summary>
		/// TRUE if the license has a product usage limit (license type is enforced), otherwise FALSE
		/// </summary>
		[Column(),                             Nullable] public string?   ENFORCED              { get; set; } // VARCHAR(5)
	}

	[Table(Schema="TESTHANA", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column, Nullable] public int?      ID             { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MoneyValue     { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column, Nullable] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BoolValue      { get; set; } // TINYINT
		[Column, Nullable] public string?   GuidValue      { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]?   BinaryValue    { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column, Nullable] public int?      IntValue       { get; set; } // INTEGER
		[Column, Nullable] public long?     BigIntValue    { get; set; } // BIGINT
		[Column, Nullable] public string?   StringValue    { get; set; } // NVARCHAR(50)
	}

	[Table(Schema="_SYS_LDB", Name="LT0000000000000001")]
	public partial class _SYS_LDB_LT0000000000000001
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_LDB", Name="LT0000000000000002")]
	public partial class _SYS_LDB_LT0000000000000002
	{
		[Column, Nullable] public int?      ID             { get; set; } // INTEGER
		[Column, Nullable] public decimal?  MoneyValue     { get; set; } // DECIMAL(10, 4)
		[Column, Nullable] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column, Nullable] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column, Nullable] public byte?     BoolValue      { get; set; } // TINYINT
		[Column, Nullable] public string?   GuidValue      { get; set; } // VARCHAR(36)
		[Column, Nullable] public byte[]?   BinaryValue    { get; set; } // VARBINARY(5000)
		[Column, Nullable] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column, Nullable] public int?      IntValue       { get; set; } // INTEGER
		[Column, Nullable] public long?     BigIntValue    { get; set; } // BIGINT
		[Column, Nullable] public string?   StringValue    { get; set; } // NVARCHAR(50)
	}

	/// <summary>
	/// This table contains one row for each match group
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="MATCH_GROUP_INFO", IsView=true)]
	public partial class _SYS_TASK_MatchGroupInfo0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),       NotNull    ] public string  SchemaName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),         NotNull    ] public string  TaskName        { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"), NotNull    ] public long    TaskExecutionId { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),       Nullable] public string? OperationName   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The group identification number
		/// </summary>
		[Column("GROUP_ID"),          NotNull    ] public int     GroupId         { get; set; } // INTEGER
		/// <summary>
		/// The number of records in the match group
		/// </summary>
		[Column("GROUP_COUNT"),          Nullable] public int?    GroupCount      { get; set; } // INTEGER
		/// <summary>
		/// The number of sources represented in the match group
		/// </summary>
		[Column("SOURCE_COUNT"),         Nullable] public int?    SourceCount     { get; set; } // INTEGER
		/// <summary>
		/// Contains whether the group is flagged for review
		/// </summary>
		[Column("REVIEW_GROUP"),         Nullable] public char?   ReviewGroup     { get; set; } // NVARCHAR(1)
		/// <summary>
		/// Contains whether the group is flagged for conflict
		/// </summary>
		[Column("CONFLICT_GROUP"),       Nullable] public char?   ConflictGroup   { get; set; } // NVARCHAR(1)
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_GROUP_INFO_")]
	public partial class _SYS_TASK_MatchGroupInfo1
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long  TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int   OperationId     { get; set; } // INTEGER
		[Column("GROUP_ID"),          PrimaryKey(3), NotNull] public int   GroupId         { get; set; } // INTEGER
		[Column("GROUP_COUNT"),          Nullable           ] public int?  GroupCount      { get; set; } // INTEGER
		[Column("SOURCE_COUNT"),         Nullable           ] public int?  SourceCount     { get; set; } // INTEGER
		[Column("REVIEW_GROUP"),         Nullable           ] public char? ReviewGroup     { get; set; } // NVARCHAR(1)
		[Column("CONFLICT_GROUP"),       Nullable           ] public char? ConflictGroup   { get; set; } // NVARCHAR(1)
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_POLICIES_")]
	public partial class _SYS_TASK_MatchPolicies
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("POLICY_ID"),         PrimaryKey(3), NotNull] public int     PolicyId        { get; set; } // INTEGER
		[Column("POLICY_NAME"),          Nullable           ] public string? PolicyName      { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// This table contains one row for each matching record per level
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="MATCH_RECORD_INFO", IsView=true)]
	public partial class _SYS_TASK_MatchRecordInfo0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),       NotNull    ] public string  SchemaName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),         NotNull    ] public string  TaskName        { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"), NotNull    ] public long    TaskExecutionId { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),       Nullable] public string? OperationName   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),           Nullable] public string? TableName       { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),            NotNull    ] public long    RowId           { get; set; } // BIGINT
		/// <summary>
		/// The group identification number
		/// </summary>
		[Column("GROUP_ID"),             Nullable] public int?    GroupId         { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_RECORD_INFO_")]
	public partial class _SYS_TASK_MatchRecordInfo1
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int  OperationId     { get; set; } // INTEGER
		[Column("TABLE_ID"),          PrimaryKey(3), NotNull] public int  TableId         { get; set; } // INTEGER
		[Column("ROW_ID"),            PrimaryKey(4), NotNull] public long RowId           { get; set; } // BIGINT
		[Column("GROUP_ID"),             Nullable           ] public int? GroupId         { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_RULES_")]
	public partial class _SYS_TASK_MatchRules
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		#nullable disable
		[Column("RULE_ID"),           PrimaryKey(3), NotNull] public string  RuleId          { get; set; } // NVARCHAR(20)
		#nullable enable
		[Column("RULE_NAME"),            Nullable           ] public string? RuleName        { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_SOURCE_INFO_")]
	public partial class _SYS_TASK_MatchSourceInfo
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("SOURCE_ID"),         PrimaryKey(3), NotNull] public int     SourceId        { get; set; } // INTEGER
		[Column("SOURCE_NAME"),          Nullable           ] public string? SourceName      { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// This table contains counts of matches within and between data sources
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="MATCH_SOURCE_STATISTICS", IsView=true)]
	public partial class _SYS_TASK_MatchSourceStatistic
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),         NotNull    ] public string  SchemaName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),           NotNull    ] public string  TaskName          { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),   NotNull    ] public long    TaskExecutionId   { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),         Nullable] public string? OperationName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The data source name
		/// </summary>
		[Column("SOURCE_NAME"),            Nullable] public string? SourceName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The related data source name
		/// </summary>
		[Column("RELATED_SOURCE_NAME"),    Nullable] public string? RelatedSourceName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The number of comparisons resulting in a match decision between records in each SOURCE_NAME / RELATED_SOURCE_NAME pair
		/// </summary>
		[Column("NUM_MATCH_DECISIONS"),    Nullable] public int?    NumMatchDecisions { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_SOURCE_STATISTICS_")]
	public partial class _SYS_TASK_MatchSourceStatistics
	{
		[Column("TASK_EXECUTION_ID"),   PrimaryKey(1), NotNull] public long   TaskExecutionId   { get; set; } // BIGINT
		[Column("OPERATION_ID"),        PrimaryKey(2), NotNull] public int    OperationId       { get; set; } // INTEGER
		#nullable disable
		[Column("SOURCE_ID"),           PrimaryKey(3), NotNull] public string SourceId          { get; set; } // NVARCHAR(12)
		#nullable enable
		#nullable disable
		[Column("RELATED_SOURCE_ID"),   PrimaryKey(4), NotNull] public string RelatedSourceId   { get; set; } // NVARCHAR(12)
		#nullable enable
		[Column("NUM_MATCH_DECISIONS"),    Nullable           ] public int?   NumMatchDecisions { get; set; } // INTEGER
	}

	/// <summary>
	/// This table contains statistics regarding the run of the transformation operation
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="MATCH_STATISTICS", IsView=true)]
	public partial class _SYS_TASK_MatchStatistic
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),               NotNull    ] public string  SchemaName              { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),                 NotNull    ] public string  TaskName                { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),         NotNull    ] public long    TaskExecutionId         { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),               Nullable] public string? OperationName           { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Total number of records in the input data sources
		/// </summary>
		[Column("NUM_RECORDS"),                  Nullable] public long?   NumRecords              { get; set; } // BIGINT
		/// <summary>
		/// Number of records selected for the matching process
		/// </summary>
		[Column("NUM_SELECTED_RECORDS"),         Nullable] public long?   NumSelectedRecords      { get; set; } // BIGINT
		/// <summary>
		/// Number of records that reside in match groups
		/// </summary>
		[Column("NUM_MATCH_RECORDS"),            Nullable] public long?   NumMatchRecords         { get; set; } // BIGINT
		/// <summary>
		/// Number of non-matching records that do not reside in match groups
		/// </summary>
		[Column("NUM_NON_MATCH_RECORDS"),        Nullable] public long?   NumNonMatchRecords      { get; set; } // BIGINT
		/// <summary>
		/// Number of match groups identified
		/// </summary>
		[Column("NUM_MATCH_GROUPS"),             Nullable] public long?   NumMatchGroups          { get; set; } // BIGINT
		/// <summary>
		/// Number of  match groups flagged for review
		/// </summary>
		[Column("NUM_REVIEW_GROUPS"),            Nullable] public long?   NumReviewGroups         { get; set; } // BIGINT
		/// <summary>
		/// Number of  match groups not flagged for review
		/// </summary>
		[Column("NUM_NON_REVIEW_GROUPS"),        Nullable] public long?   NumNonReviewGroups      { get; set; } // BIGINT
		/// <summary>
		/// Number of  match groups flagged with conflicts
		/// </summary>
		[Column("NUM_CONFLICT_GROUPS"),          Nullable] public long?   NumConflictGroups       { get; set; } // BIGINT
		/// <summary>
		///  Number of comparisons performed by the transformation operation
		/// </summary>
		[Column("NUM_COMPARISONS_PERFORMED"),    Nullable] public long?   NumComparisonsPerformed { get; set; } // BIGINT
		/// <summary>
		/// Number of comparisons resulting in a match decision
		/// </summary>
		[Column("NUM_MATCH_DECISIONS"),          Nullable] public long?   NumMatchDecisions       { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_STATISTICS_")]
	public partial class _SYS_TASK_MatchStatistics
	{
		[Column("TASK_EXECUTION_ID"),         PrimaryKey(1), NotNull] public long  TaskExecutionId         { get; set; } // BIGINT
		[Column("OPERATION_ID"),              PrimaryKey(2), NotNull] public int   OperationId             { get; set; } // INTEGER
		[Column("NUM_RECORDS"),                  Nullable           ] public long? NumRecords              { get; set; } // BIGINT
		[Column("NUM_MATCH_RECORDS"),            Nullable           ] public long? NumMatchRecords         { get; set; } // BIGINT
		[Column("NUM_MATCH_GROUPS"),             Nullable           ] public long? NumMatchGroups          { get; set; } // BIGINT
		[Column("NUM_REVIEW_GROUPS"),            Nullable           ] public long? NumReviewGroups         { get; set; } // BIGINT
		[Column("NUM_CONFLICT_GROUPS"),          Nullable           ] public long? NumConflictGroups       { get; set; } // BIGINT
		[Column("NUM_COMPARISONS_PERFORMED"),    Nullable           ] public long? NumComparisonsPerformed { get; set; } // BIGINT
		[Column("NUM_MATCH_DECISIONS"),          Nullable           ] public long? NumMatchDecisions       { get; set; } // BIGINT
		[Column("NUM_SELECTED_RECORDS"),         Nullable           ] public long? NumSelectedRecords      { get; set; } // BIGINT
	}

	/// <summary>
	/// This table contains one row for each match decision made during the matching process
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="MATCH_TRACING", IsView=true)]
	public partial class _SYS_TASK_MatchTracing0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),        NotNull    ] public string  SchemaName       { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),          NotNull    ] public string  TaskName         { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"),  NotNull    ] public long    TaskExecutionId  { get; set; } // BIGINT
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),        Nullable] public string? OperationName    { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),            Nullable] public string? TableName        { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("ROW_ID"),             NotNull    ] public long    RowId            { get; set; } // BIGINT
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("RELATED_TABLE_NAME"),    Nullable] public string? RelatedTableName { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The unique ID of the row processed for this execution of the task plan
		/// </summary>
		[Column("RELATED_ROW_ID"),     NotNull    ] public long    RelatedRowId     { get; set; } // BIGINT
		/// <summary>
		/// The name of the match policy that processed the related rows
		/// </summary>
		[Column("POLICY_NAME"),           Nullable] public string? PolicyName       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The name of the match rule that processed the related rows
		/// </summary>
		[Column("RULE_NAME"),             Nullable] public string? RuleName         { get; set; } // NVARCHAR(256)
		/// <summary>
		/// The similarity score of the related rows
		/// </summary>
		[Column(),                        Nullable] public int?    SCORE            { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_TASK", Name="MATCH_TRACING_")]
	public partial class _SYS_TASK_MatchTracing1
	{
		[Column("TASK_EXECUTION_ID"), PrimaryKey(1), NotNull] public long    TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_ID"),      PrimaryKey(2), NotNull] public int     OperationId     { get; set; } // INTEGER
		[Column("TABLE_ID"),          PrimaryKey(3), NotNull] public int     TableId         { get; set; } // INTEGER
		[Column("ROW_ID"),            PrimaryKey(4), NotNull] public long    RowId           { get; set; } // BIGINT
		[Column("RELATED_TABLE_ID"),  PrimaryKey(5), NotNull] public int     RelatedTableId  { get; set; } // INTEGER
		[Column("RELATED_ROW_ID"),    PrimaryKey(6), NotNull] public long    RelatedRowId    { get; set; } // BIGINT
		[Column("POLICY_ID"),            Nullable           ] public int?    PolicyId        { get; set; } // INTEGER
		[Column("RULE_ID"),              Nullable           ] public string? RuleId          { get; set; } // NVARCHAR(20)
		[Column(),                       Nullable           ] public int?    SCORE           { get; set; } // INTEGER
	}

	/// <summary>
	/// Common data for all backup catalog entries
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_BACKUP_CATALOG", IsView=true)]
	public partial class SYS_DATABASES_MBackupCatalog
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),            Nullable] public string?   DatabaseName          { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of a backup catalog entry
		/// </summary>
		[Column("ENTRY_ID"),                 Nullable] public long?     EntryId               { get; set; } // BIGINT
		/// <summary>
		/// Classification of backup catalog entries. The following types are supported: 'complete data backup'/'data snapshot'/'log backup'/'log missing'
		/// </summary>
		[Column("ENTRY_TYPE_NAME"),          Nullable] public string?   EntryTypeName         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Unique ID of a data backup or a log backup respectively. All backup files of a single data backup share the same BACKUP_ID
		/// </summary>
		[Column("BACKUP_ID"),                Nullable] public long?     BackupId              { get; set; } // BIGINT
		/// <summary>
		/// Start time given in server local time
		/// </summary>
		[Column("SYS_START_TIME"),           Nullable] public DateTime? SysStartTime          { get; set; } // TIMESTAMP
		/// <summary>
		/// Start time given in UTC
		/// </summary>
		[Column("UTC_START_TIME"),           Nullable] public DateTime? UtcStartTime          { get; set; } // TIMESTAMP
		/// <summary>
		/// Stop time given in server local time
		/// </summary>
		[Column("SYS_END_TIME"),             Nullable] public DateTime? SysEndTime            { get; set; } // TIMESTAMP
		/// <summary>
		/// Stop time given in UTC
		/// </summary>
		[Column("UTC_END_TIME"),             Nullable] public DateTime? UtcEndTime            { get; set; } // TIMESTAMP
		/// <summary>
		/// Result of corresponding action: 'successful'/'failed'/'running'/'cancel pending'/'canceled'
		/// </summary>
		[Column("STATE_NAME"),               Nullable] public string?   StateName             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Additional information
		/// </summary>
		[Column(),                           Nullable] public string?   COMMENT               { get; set; } // VARCHAR(256)
		/// <summary>
		/// Additional information
		/// </summary>
		[Column(),                           Nullable] public string?   MESSAGE               { get; set; } // VARCHAR(512)
		/// <summary>
		/// System identifier (SID) of the SAP HANA database
		/// </summary>
		[Column("SYSTEM_ID"),                Nullable] public string?   SystemId              { get; set; } // VARCHAR(3)
		/// <summary>
		/// Key used for encrypting this backup, if any
		/// </summary>
		[Column("ENCRYPTION_ROOT_KEY_HASH"), Nullable] public string?   EncryptionRootKeyHash { get; set; } // VARCHAR(64)
		/// <summary>
		/// Name of the database which creates the backup
		/// </summary>
		[Column("SOURCE_DATABASE_NAME"),     Nullable] public string?   SourceDatabaseName    { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// Location information of all backup catalog entries
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_BACKUP_CATALOG_FILES", IsView=true)]
	public partial class SYS_DATABASES_MBackupCatalogFile
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),           Nullable] public string? DatabaseName         { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of a backup catalog entry
		/// </summary>
		[Column("ENTRY_ID"),                Nullable] public long?   EntryId              { get; set; } // BIGINT
		/// <summary>
		/// Unique ID of a data backup and log backup respectively. All backup files of a single data backup share the same BACKUP_ID
		/// </summary>
		[Column("BACKUP_ID"),               Nullable] public long?   BackupId             { get; set; } // BIGINT
		/// <summary>
		/// Persistence volume ID
		/// </summary>
		[Column("SOURCE_ID"),               Nullable] public long?   SourceId             { get; set; } // BIGINT
		/// <summary>
		/// Type of persistence to be backed up: 'volume'/'topology'
		/// </summary>
		[Column("SOURCE_TYPE_NAME"),        Nullable] public string? SourceTypeName       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                          Nullable] public string? HOST                 { get; set; } // VARCHAR(64)
		/// <summary>
		/// Type of database service: 'indexserver'/'nameserver'/'statisticsserver'
		/// </summary>
		[Column("SERVICE_TYPE_NAME"),       Nullable] public string? ServiceTypeName      { get; set; } // VARCHAR(64)
		/// <summary>
		/// In case of a data backup this value specifies the log position that must be processed next when a log recovery is requested after restoring the data backup
		/// </summary>
		[Column("REDO_LOG_POSITION"),       Nullable] public long?   RedoLogPosition      { get; set; } // BIGINT
		/// <summary>
		/// In case of a log backup this value specifies the log position of the oldest log entry contained in the backup
		/// </summary>
		[Column("FIRST_REDO_LOG_POSITION"), Nullable] public long?   FirstRedoLogPosition { get; set; } // BIGINT
		/// <summary>
		/// In case of a log backup this value specifies the log position of the newest log entry contained in the backup
		/// </summary>
		[Column("LAST_REDO_LOG_POSITION"),  Nullable] public long?   LastRedoLogPosition  { get; set; } // BIGINT
		/// <summary>
		/// Specifies the size of the backup
		/// </summary>
		[Column("BACKUP_SIZE"),             Nullable] public long?   BackupSize           { get; set; } // BIGINT
		/// <summary>
		/// Data or log backup was written to this location
		/// </summary>
		[Column("DESTINATION_PATH"),        Nullable] public string? DestinationPath      { get; set; } // VARCHAR(512)
		/// <summary>
		/// Type of location: 'file'/'backint'
		/// </summary>
		[Column("DESTINATION_TYPE_NAME"),   Nullable] public string? DestinationTypeName  { get; set; } // VARCHAR(16)
		/// <summary>
		/// Identifier of backup received from a backup tool
		/// </summary>
		[Column("EXTERNAL_BACKUP_ID"),      Nullable] public string? ExternalBackupId     { get; set; } // VARCHAR(64)
		/// <summary>
		/// In case of a log backup this value specifies the number of log segments contained in the backup
		/// </summary>
		[Column("LOG_SEGMENT_COUNT"),       Nullable] public int?    LogSegmentCount      { get; set; } // INTEGER
	}

	/// <summary>
	/// Backup configuration statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_BACKUP_CONFIGURATION", IsView=true)]
	public partial class SYS_DATABASES_MBackupConfiguration
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                 Nullable] public string? DatabaseName               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Max recovery file age
		/// </summary>
		[Column("MAX_RECOVERY_FILE_AGE"),         Nullable] public long?   MaxRecoveryFileAge         { get; set; } // BIGINT
		/// <summary>
		/// Log replay step size in bytes
		/// </summary>
		[Column("LOG_REPLAY_STEP_SIZE"),          Nullable] public long?   LogReplayStepSize          { get; set; } // BIGINT
		/// <summary>
		/// Max number of backint channels per request during recovery
		/// </summary>
		[Column("MAX_RECOVERY_BACKINT_CHANNELS"), Nullable] public long?   MaxRecoveryBackintChannels { get; set; } // BIGINT
		/// <summary>
		/// Linkname of the backint executable
		/// </summary>
		[Column("BACKINT_EXECUTABLE_LINK"),       Nullable] public string? BackintExecutableLink      { get; set; } // VARCHAR(256)
		/// <summary>
		/// Real filename of the backint executable
		/// </summary>
		[Column("BACKINT_EXECUTABLE"),            Nullable] public string? BackintExecutable          { get; set; } // VARCHAR(256)
		/// <summary>
		/// Directory for backint-based data backups
		/// </summary>
		[Column("BACKINT_DATA_BACKUP_PATH"),      Nullable] public string? BackintDataBackupPath      { get; set; } // VARCHAR(256)
		/// <summary>
		/// Directory for backint-based log backups
		/// </summary>
		[Column("BACKINT_LOG_BACKUP_PATH"),       Nullable] public string? BackintLogBackupPath       { get; set; } // VARCHAR(256)
		/// <summary>
		/// Directory for backint-based catalog backups
		/// </summary>
		[Column("BACKINT_CATALOG_BACKUP_PATH"),   Nullable] public string? BackintCatalogBackupPath   { get; set; } // VARCHAR(256)
		/// <summary>
		/// Default directory for file-based data backups
		/// </summary>
		[Column("FILE_DATA_BACKUP_PATH"),         Nullable] public string? FileDataBackupPath         { get; set; } // VARCHAR(256)
		/// <summary>
		/// Directory for file-based log backups
		/// </summary>
		[Column("FILE_LOG_BACKUP_PATH"),          Nullable] public string? FileLogBackupPath          { get; set; } // VARCHAR(256)
		/// <summary>
		/// Directory for file-based catalog backups
		/// </summary>
		[Column("FILE_CATALOG_BACKUP_PATH"),      Nullable] public string? FileCatalogBackupPath      { get; set; } // VARCHAR(256)
		/// <summary>
		/// Log backup timeout
		/// </summary>
		[Column("LOG_BACKUP_TIMEOUT"),            Nullable] public long?   LogBackupTimeout           { get; set; } // BIGINT
		/// <summary>
		/// Log backup interval mode
		/// </summary>
		[Column("LOG_BACKUP_INTERVAL_MODE"),      Nullable] public string? LogBackupIntervalMode      { get; set; } // VARCHAR(16)
	}

	/// <summary>
	/// Progress of the most recent backup
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_BACKUP_PROGRESS", IsView=true)]
	public partial class SYS_DATABASES_MBackupProgress
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of a data backup. All backup files of a single data backup share the same BACKUP_ID
		/// </summary>
		[Column("BACKUP_ID"),        Nullable] public long?     BackupId        { get; set; } // BIGINT
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                   Nullable] public string?   HOST            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                   Nullable] public int?      PORT            { get; set; } // INTEGER
		/// <summary>
		/// Name of the service
		/// </summary>
		[Column("SERVICE_NAME"),     Nullable] public string?   ServiceName     { get; set; } // VARCHAR(32)
		/// <summary>
		/// Classification of the type of backup. Currently only 'complete data backup' is supported
		/// </summary>
		[Column("ENTRY_TYPE_NAME"),  Nullable] public string?   EntryTypeName   { get; set; } // VARCHAR(64)
		/// <summary>
		/// The local server time the backup started
		/// </summary>
		[Column("SYS_START_TIME"),   Nullable] public DateTime? SysStartTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// The time the backup started
		/// </summary>
		[Column("UTC_START_TIME"),   Nullable] public DateTime? UtcStartTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// The local server time the backup was terminated
		/// </summary>
		[Column("SYS_END_TIME"),     Nullable] public DateTime? SysEndTime      { get; set; } // TIMESTAMP
		/// <summary>
		/// The time the backup was terminated
		/// </summary>
		[Column("UTC_END_TIME"),     Nullable] public DateTime? UtcEndTime      { get; set; } // TIMESTAMP
		/// <summary>
		/// Current state of the backup
		/// </summary>
		[Column("STATE_NAME"),       Nullable] public string?   StateName       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Total amount of data
		/// </summary>
		[Column("BACKUP_SIZE"),      Nullable] public long?     BackupSize      { get; set; } // BIGINT
		/// <summary>
		/// Amount of data transferred
		/// </summary>
		[Column("TRANSFERRED_SIZE"), Nullable] public long?     TransferredSize { get; set; } // BIGINT
	}

	/// <summary>
	/// Estimated size of the next data backup
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_BACKUP_SIZE_ESTIMATIONS", IsView=true)]
	public partial class SYS_DATABASES_MBackupSizeEstimation
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),   Nullable] public string? DatabaseName  { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                  Nullable] public string? HOST          { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                  Nullable] public int?    PORT          { get; set; } // INTEGER
		/// <summary>
		/// Name of the service
		/// </summary>
		[Column("SERVICE_NAME"),    Nullable] public string? ServiceName   { get; set; } // NVARCHAR(32)
		/// <summary>
		/// Classification of the type of backup
		/// </summary>
		[Column("ENTRY_TYPE_NAME"), Nullable] public string? EntryTypeName { get; set; } // NVARCHAR(64)
		/// <summary>
		/// The estimated size of the backup
		/// </summary>
		[Column("ESTIMATED_SIZE"),  Nullable] public long?   EstimatedSize { get; set; } // BIGINT
	}

	/// <summary>
	/// Semaphore statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONDITIONAL_VARIABLES", IsView=true)]
	public partial class SYS_DATABASES_MConditionalVariable
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string? DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string? HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?    PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?    VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),    Nullable] public string? StatisticsName   { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),      Nullable] public long?   StatisticsId     { get; set; } // BIGINT
		/// <summary>
		/// Count of wait calls
		/// </summary>
		[Column("WAIT_COUNT"),         Nullable] public long?   WaitCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking wait calls
		/// </summary>
		[Column("BLOCKING_COUNT"),     Nullable] public long?   BlockingCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timeouts
		/// </summary>
		[Column("TIMEOUT_COUNT"),      Nullable] public long?   TimeoutCount     { get; set; } // BIGINT
		/// <summary>
		/// Wait rate
		/// </summary>
		[Column("WAIT_RATE"),          Nullable] public double? WaitRate         { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking wait calls (last)
		/// </summary>
		[Column("LAST_BLOCKING_TIME"), Nullable] public long?   LastBlockingTime { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (max)
		/// </summary>
		[Column("MAX_BLOCKING_TIME"),  Nullable] public long?   MaxBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (min)
		/// </summary>
		[Column("MIN_BLOCKING_TIME"),  Nullable] public long?   MinBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (total)
		/// </summary>
		[Column("SUM_BLOCKING_TIME"),  Nullable] public long?   SumBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (avg)
		/// </summary>
		[Column("AVG_BLOCKING_TIME"),  Nullable] public long?   AvgBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),       Nullable] public long?   CreateCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),      Nullable] public long?   DestroyCount     { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                     Nullable] public string? COMPONENT        { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Semaphore statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONDITIONAL_VARIABLES_RESET", IsView=true)]
	public partial class SYS_DATABASES_MConditionalVariablesReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string?   DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),         Nullable] public DateTime? ResetTime        { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string?   HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?      PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?      VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),    Nullable] public string?   StatisticsName   { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),      Nullable] public long?     StatisticsId     { get; set; } // BIGINT
		/// <summary>
		/// Count of wait calls
		/// </summary>
		[Column("WAIT_COUNT"),         Nullable] public long?     WaitCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking wait calls
		/// </summary>
		[Column("BLOCKING_COUNT"),     Nullable] public long?     BlockingCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timeouts
		/// </summary>
		[Column("TIMEOUT_COUNT"),      Nullable] public long?     TimeoutCount     { get; set; } // BIGINT
		/// <summary>
		/// Wait rate
		/// </summary>
		[Column("WAIT_RATE"),          Nullable] public double?   WaitRate         { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking wait calls (last)
		/// </summary>
		[Column("LAST_BLOCKING_TIME"), Nullable] public long?     LastBlockingTime { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (max)
		/// </summary>
		[Column("MAX_BLOCKING_TIME"),  Nullable] public long?     MaxBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (min)
		/// </summary>
		[Column("MIN_BLOCKING_TIME"),  Nullable] public long?     MinBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (total)
		/// </summary>
		[Column("SUM_BLOCKING_TIME"),  Nullable] public long?     SumBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (avg)
		/// </summary>
		[Column("AVG_BLOCKING_TIME"),  Nullable] public long?     AvgBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),       Nullable] public long?     CreateCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),      Nullable] public long?     DestroyCount     { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                     Nullable] public string?   COMPONENT        { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Detailed information on connections between a client and database. Information includes connection status, client information, connection type, resource utilization
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONNECTIONS", IsView=true)]
	public partial class SYS_DATABASES_MConnection
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),     Nullable] public string? DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                    Nullable] public string? HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                    Nullable] public int?    PORT             { get; set; } // INTEGER
		/// <summary>
		/// Connection status: 'RUNNING'/'IDLE'
		/// </summary>
		[Column("CONNECTION_STATUS"), Nullable] public string? ConnectionStatus { get; set; } // VARCHAR(128)
		/// <summary>
		/// Host name of client machine
		/// </summary>
		[Column("CLIENT_HOST"),       Nullable] public string? ClientHost       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// IP of client machine
		/// </summary>
		[Column("CLIENT_IP"),         Nullable] public string? ClientIp         { get; set; } // VARCHAR(45)
		/// <summary>
		/// Client process ID
		/// </summary>
		[Column("CLIENT_PID"),        Nullable] public long?   ClientPid        { get; set; } // BIGINT
		/// <summary>
		/// Connection type: Remote, Local, History (remote), History (local)
		/// </summary>
		[Column("CONNECTION_TYPE"),   Nullable] public string? ConnectionType   { get; set; } // VARCHAR(128)
		/// <summary>
		/// Own connection: TRUE if own connection, FALSE if not
		/// </summary>
		[Column(),                    Nullable] public string? OWN              { get; set; } // VARCHAR(5)
	}

	/// <summary>
	/// ContainerDirectory statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONTAINER_DIRECTORY", IsView=true)]
	public partial class SYS_DATABASES_MContainerDirectory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),        Nullable] public string? DatabaseName       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                       Nullable] public string? HOST               { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                       Nullable] public int?    PORT               { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),            Nullable] public int?    VolumeId           { get; set; } // INTEGER
		/// <summary>
		/// Count of creates
		/// </summary>
		[Column("CNT_CREATE"),           Nullable] public long?   CntCreate          { get; set; } // BIGINT
		/// <summary>
		/// Count of rolled back creates
		/// </summary>
		[Column("CNT_CREATE_ROLLBACK"),  Nullable] public long?   CntCreateRollback  { get; set; } // BIGINT
		/// <summary>
		/// Count of removes
		/// </summary>
		[Column("CNT_REMOVE"),           Nullable] public long?   CntRemove          { get; set; } // BIGINT
		/// <summary>
		/// Count of failed removes
		/// </summary>
		[Column("CNT_REMOVE_FAIL"),      Nullable] public long?   CntRemoveFail      { get; set; } // BIGINT
		/// <summary>
		/// Count of rolled back removes
		/// </summary>
		[Column("CNT_REMOVE_ROLLBACK"),  Nullable] public long?   CntRemoveRollback  { get; set; } // BIGINT
		/// <summary>
		/// Count of moves
		/// </summary>
		[Column("CNT_MOVE"),             Nullable] public long?   CntMove            { get; set; } // BIGINT
		/// <summary>
		/// Count of getPhysicalSize
		/// </summary>
		[Column("CNT_GET_PHYSICALSIZE"), Nullable] public long?   CntGetPhysicalsize { get; set; } // BIGINT
		/// <summary>
		/// Count of retrieved containers
		/// </summary>
		[Column("CNT_GET"),              Nullable] public long?   CntGet             { get; set; } // BIGINT
		/// <summary>
		/// Count of failed gets
		/// </summary>
		[Column("CNT_GET_FAIL"),         Nullable] public long?   CntGetFail         { get; set; } // BIGINT
		/// <summary>
		/// Count of used iterators
		/// </summary>
		[Column("CNT_BEGIN"),            Nullable] public long?   CntBegin           { get; set; } // BIGINT
		/// <summary>
		/// Count of iterated containers
		/// </summary>
		[Column("CNT_ITERATED"),         Nullable] public long?   CntIterated        { get; set; } // BIGINT
		/// <summary>
		/// Count of cache hits
		/// </summary>
		[Column("CNT_CACHEHIT"),         Nullable] public long?   CntCachehit        { get; set; } // BIGINT
		/// <summary>
		/// Count of cache misses
		/// </summary>
		[Column("CNT_CACHEMISS"),        Nullable] public long?   CntCachemiss       { get; set; } // BIGINT
		/// <summary>
		/// Count of existing containers
		/// </summary>
		[Column("CNT_CONTAINERS"),       Nullable] public long?   CntContainers      { get; set; } // BIGINT
	}

	/// <summary>
	/// ContainerNameDirectory statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONTAINER_NAME_DIRECTORY", IsView=true)]
	public partial class SYS_DATABASES_MContainerNameDirectory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string? DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string? HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?    PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?    VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Count of creates
		/// </summary>
		[Column("CNT_CREATE"),         Nullable] public long?   CntCreate        { get; set; } // BIGINT
		/// <summary>
		/// Count of failed creates
		/// </summary>
		[Column("CNT_CREATE_FAIL"),    Nullable] public long?   CntCreateFail    { get; set; } // BIGINT
		/// <summary>
		/// Count of creates on load
		/// </summary>
		[Column("CNT_INITIAL_CREATE"), Nullable] public long?   CntInitialCreate { get; set; } // BIGINT
		/// <summary>
		/// Count of skips on load
		/// </summary>
		[Column("CNT_INITIAL_SKIP"),   Nullable] public long?   CntInitialSkip   { get; set; } // BIGINT
		/// <summary>
		/// Count of removes
		/// </summary>
		[Column("CNT_REMOVE"),         Nullable] public long?   CntRemove        { get; set; } // BIGINT
		/// <summary>
		/// Count of failed removes
		/// </summary>
		[Column("CNT_REMOVE_FAIL"),    Nullable] public long?   CntRemoveFail    { get; set; } // BIGINT
		/// <summary>
		/// Count of removeAll
		/// </summary>
		[Column("CNT_REMOVE_ALL"),     Nullable] public long?   CntRemoveAll     { get; set; } // BIGINT
		/// <summary>
		/// Count of renames
		/// </summary>
		[Column("CNT_RENAME"),         Nullable] public long?   CntRename        { get; set; } // BIGINT
		/// <summary>
		/// Count of failed renames
		/// </summary>
		[Column("CNT_RENAME_FAIL"),    Nullable] public long?   CntRenameFail    { get; set; } // BIGINT
		/// <summary>
		/// Count of checked containers
		/// </summary>
		[Column("CNT_EXISTS"),         Nullable] public long?   CntExists        { get; set; } // BIGINT
		/// <summary>
		/// Count of retrieved containers
		/// </summary>
		[Column("CNT_GET"),            Nullable] public long?   CntGet           { get; set; } // BIGINT
		/// <summary>
		/// Count of failed gets
		/// </summary>
		[Column("CNT_GET_FAIL"),       Nullable] public long?   CntGetFail       { get; set; } // BIGINT
		/// <summary>
		/// Count of used iterators
		/// </summary>
		[Column("CNT_BEGIN"),          Nullable] public long?   CntBegin         { get; set; } // BIGINT
		/// <summary>
		/// Count of iterated containers
		/// </summary>
		[Column("CNT_ITERATE"),        Nullable] public long?   CntIterate       { get; set; } // BIGINT
		/// <summary>
		/// Count of existing containers
		/// </summary>
		[Column("CNT_CONTAINERS"),     Nullable] public long?   CntContainers    { get; set; } // BIGINT
	}

	/// <summary>
	/// Converter statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONVERTER_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MConverterStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                                     Nullable] public string? DatabaseName                                { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                                    Nullable] public string? HOST                                        { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                                    Nullable] public int?    PORT                                        { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                         Nullable] public int?    VolumeId                                    { get; set; } // INTEGER
		/// <summary>
		/// Type of converter
		/// </summary>
		[Column(),                                                    Nullable] public string? TYPE                                        { get; set; } // VARCHAR(32)
		/// <summary>
		/// Maximum level, e.g. level of root page
		/// </summary>
		[Column("MAX_LEVEL"),                                         Nullable] public long?   MaxLevel                                    { get; set; } // BIGINT
		/// <summary>
		/// Maximum page number
		/// </summary>
		[Column("MAX_PAGENUMBER"),                                    Nullable] public long?   MaxPagenumber                               { get; set; } // BIGINT
		/// <summary>
		/// Number of currently allocated pages
		/// </summary>
		[Column("ALLOCATED_PAGE_COUNT"),                              Nullable] public long?   AllocatedPageCount                          { get; set; } // BIGINT
		/// <summary>
		/// Total size [bytes] of currently allocated pages
		/// </summary>
		[Column("ALLOCATED_PAGE_SIZE"),                               Nullable] public long?   AllocatedPageSize                           { get; set; } // BIGINT
		/// <summary>
		/// Maximum number of allocated pages
		/// </summary>
		[Column("MAX_ALLOCATED_PAGE_COUNT"),                          Nullable] public long?   MaxAllocatedPageCount                       { get; set; } // BIGINT
		/// <summary>
		/// Maximum size [bytes] of allocated pages
		/// </summary>
		[Column("MAX_ALLOCATED_PAGE_SIZE"),                           Nullable] public long?   MaxAllocatedPageSize                        { get; set; } // BIGINT
		/// <summary>
		/// Number of page allocations
		/// </summary>
		[Column("ALLOCATE_PAGE_COUNT"),                               Nullable] public long?   AllocatePageCount                           { get; set; } // BIGINT
		/// <summary>
		/// Number of page allocations or retrievals during static phase
		/// </summary>
		[Column("ALLOCATE_OR_GET_STATIC_PAGE_COUNT"),                 Nullable] public long?   AllocateOrGetStaticPageCount                { get; set; } // BIGINT
		/// <summary>
		/// Number of page deallocations
		/// </summary>
		[Column("DEALLOCATE_PAGE_COUNT"),                             Nullable] public long?   DeallocatePageCount                         { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page assignments
		/// </summary>
		[Column("ASSIGN_PHYSICAL_PAGE_COUNT"),                        Nullable] public long?   AssignPhysicalPageCount                     { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page unassignments
		/// </summary>
		[Column("UNASSIGN_PHYSICAL_PAGE_COUNT"),                      Nullable] public long?   UnassignPhysicalPageCount                   { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page unassignments during drop snapshot
		/// </summary>
		[Column("UNASSIGN_PHYSICAL_PAGE_COUNT_DURING_DROP_SNAPSHOT"), Nullable] public long?   UnassignPhysicalPageCountDuringDropSnapshot { get; set; } // BIGINT
		/// <summary>
		/// Number of snapshots created
		/// </summary>
		[Column("CREATE_SNAPSHOT_COUNT"),                             Nullable] public long?   CreateSnapshotCount                         { get; set; } // BIGINT
		/// <summary>
		/// Number of snapshots dropped
		/// </summary>
		[Column("DROP_SNAPSHOT_COUNT"),                               Nullable] public long?   DropSnapshotCount                           { get; set; } // BIGINT
		/// <summary>
		/// Number of level 0 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL0_COUNT"),                  Nullable] public long?   WriteConverterpageLEVEL0Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 1 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL1_COUNT"),                  Nullable] public long?   WriteConverterpageLEVEL1Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 2 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL2_COUNT"),                  Nullable] public long?   WriteConverterpageLEVEL2Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 3 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL3_COUNT"),                  Nullable] public long?   WriteConverterpageLEVEL3Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 4 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL4_COUNT"),                  Nullable] public long?   WriteConverterpageLEVEL4Count               { get; set; } // BIGINT
	}

	/// <summary>
	/// Converter statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CONVERTER_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MConverterStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                                     Nullable] public string?   DatabaseName                                { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                                        Nullable] public DateTime? ResetTime                                   { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                                    Nullable] public string?   HOST                                        { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                                    Nullable] public int?      PORT                                        { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                         Nullable] public int?      VolumeId                                    { get; set; } // INTEGER
		/// <summary>
		/// Type of converter
		/// </summary>
		[Column(),                                                    Nullable] public string?   TYPE                                        { get; set; } // VARCHAR(32)
		/// <summary>
		/// Maximum level, e.g. level of root page
		/// </summary>
		[Column("MAX_LEVEL"),                                         Nullable] public long?     MaxLevel                                    { get; set; } // BIGINT
		/// <summary>
		/// Maximum page number
		/// </summary>
		[Column("MAX_PAGENUMBER"),                                    Nullable] public long?     MaxPagenumber                               { get; set; } // BIGINT
		/// <summary>
		/// Number of currently allocated pages
		/// </summary>
		[Column("ALLOCATED_PAGE_COUNT"),                              Nullable] public long?     AllocatedPageCount                          { get; set; } // BIGINT
		/// <summary>
		/// Total size [bytes] of currently allocated pages
		/// </summary>
		[Column("ALLOCATED_PAGE_SIZE"),                               Nullable] public long?     AllocatedPageSize                           { get; set; } // BIGINT
		/// <summary>
		/// Maximum number of allocated pages
		/// </summary>
		[Column("MAX_ALLOCATED_PAGE_COUNT"),                          Nullable] public long?     MaxAllocatedPageCount                       { get; set; } // BIGINT
		/// <summary>
		/// Maximum size [bytes] of allocated pages
		/// </summary>
		[Column("MAX_ALLOCATED_PAGE_SIZE"),                           Nullable] public long?     MaxAllocatedPageSize                        { get; set; } // BIGINT
		/// <summary>
		/// Number of page allocations
		/// </summary>
		[Column("ALLOCATE_PAGE_COUNT"),                               Nullable] public long?     AllocatePageCount                           { get; set; } // BIGINT
		/// <summary>
		/// Number of page allocations or retrievals during static phase
		/// </summary>
		[Column("ALLOCATE_OR_GET_STATIC_PAGE_COUNT"),                 Nullable] public long?     AllocateOrGetStaticPageCount                { get; set; } // BIGINT
		/// <summary>
		/// Number of page deallocations
		/// </summary>
		[Column("DEALLOCATE_PAGE_COUNT"),                             Nullable] public long?     DeallocatePageCount                         { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page assignments
		/// </summary>
		[Column("ASSIGN_PHYSICAL_PAGE_COUNT"),                        Nullable] public long?     AssignPhysicalPageCount                     { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page unassignments
		/// </summary>
		[Column("UNASSIGN_PHYSICAL_PAGE_COUNT"),                      Nullable] public long?     UnassignPhysicalPageCount                   { get; set; } // BIGINT
		/// <summary>
		/// Number of physical page unassignments during drop snapshot
		/// </summary>
		[Column("UNASSIGN_PHYSICAL_PAGE_COUNT_DURING_DROP_SNAPSHOT"), Nullable] public long?     UnassignPhysicalPageCountDuringDropSnapshot { get; set; } // BIGINT
		/// <summary>
		/// Number of snapshots created
		/// </summary>
		[Column("CREATE_SNAPSHOT_COUNT"),                             Nullable] public long?     CreateSnapshotCount                         { get; set; } // BIGINT
		/// <summary>
		/// Number of snapshots dropped
		/// </summary>
		[Column("DROP_SNAPSHOT_COUNT"),                               Nullable] public long?     DropSnapshotCount                           { get; set; } // BIGINT
		/// <summary>
		/// Number of level 0 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL0_COUNT"),                  Nullable] public long?     WriteConverterpageLEVEL0Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 1 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL1_COUNT"),                  Nullable] public long?     WriteConverterpageLEVEL1Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 2 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL2_COUNT"),                  Nullable] public long?     WriteConverterpageLEVEL2Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 3 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL3_COUNT"),                  Nullable] public long?     WriteConverterpageLEVEL3Count               { get; set; } // BIGINT
		/// <summary>
		/// Number of level 4 converter pages written to disk
		/// </summary>
		[Column("WRITE_CONVERTERPAGE_LEVEL4_COUNT"),                  Nullable] public long?     WriteConverterpageLEVEL4Count               { get; set; } // BIGINT
	}

	/// <summary>
	/// Statistics of customizable functionalities
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_CUSTOMIZABLE_FUNCTIONALITIES", IsView=true)]
	public partial class SYS_DATABASES_MCustomizableFUNCTIONALITy
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Customizable functionality name
		/// </summary>
		[Column(),                Nullable] public string? NAME         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Customizable functionality description
		/// </summary>
		[Column(),                Nullable] public string? DESCRIPTION  { get; set; } // VARCHAR(256)
		/// <summary>
		/// Customizable functionality is enabled: 'TRUE'/'FALSE'
		/// </summary>
		[Column("IS_ENABLED"),    Nullable] public string? IsEnabled    { get; set; } // VARCHAR(5)
	}

	/// <summary>
	/// Overview of currently active database replicas where this is either source or target database
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATABASE_REPLICAS", IsView=true)]
	public partial class SYS_DATABASES_MDatabaseReplica
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),           Nullable] public string? DatabaseName       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Name of source database
		/// </summary>
		[Column("SOURCE_DATABASE_NAME"),    Nullable] public string? SourceDatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host of source system database
		/// </summary>
		[Column("SOURCE_SYSTEMDB_HOST"),    Nullable] public string? SourceSystemdbHost { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port of source system database
		/// </summary>
		[Column("SOURCE_SYSTEMDB_PORT"),    Nullable] public int?    SourceSystemdbPort { get; set; } // INTEGER
		/// <summary>
		/// Name of target database
		/// </summary>
		[Column("TARGET_DATABASE_NAME"),    Nullable] public string? TargetDatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host of target system database
		/// </summary>
		[Column("TARGET_SYSTEMDB_HOST"),    Nullable] public string? TargetSystemdbHost { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port of target system database
		/// </summary>
		[Column("TARGET_SYSTEMDB_PORT"),    Nullable] public int?    TargetSystemdbPort { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// Aggregated replication status of database services
		/// </summary>
		[Column("REPLICATION_STATUS"),   NotNull    ] public string  ReplicationStatus  { get; set; } // VARCHAR(12)
		#nullable enable
	}

	/// <summary>
	/// Service statistics of currently active database replicas
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATABASE_REPLICA_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MDatabaseReplicaStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string?   DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Name of source database
		/// </summary>
		[Column("SOURCE_DATABASE_NAME"),         Nullable] public string?   SourceDatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Source host name
		/// </summary>
		[Column("SOURCE_HOST"),                  Nullable] public string?   SourceHost                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Source internal port
		/// </summary>
		[Column("SOURCE_PORT"),                  Nullable] public int?      SourcePort                { get; set; } // INTEGER
		/// <summary>
		/// Source volume ID
		/// </summary>
		[Column("SOURCE_VOLUME_ID"),             Nullable] public int?      SourceVolumeId            { get; set; } // INTEGER
		/// <summary>
		/// Name of target database
		/// </summary>
		[Column("TARGET_DATABASE_NAME"),         Nullable] public string?   TargetDatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Target host name
		/// </summary>
		[Column("TARGET_HOST"),                  Nullable] public string?   TargetHost                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Target port
		/// </summary>
		[Column("TARGET_PORT"),                  Nullable] public int?      TargetPort                { get; set; } // INTEGER
		/// <summary>
		/// Target active status
		/// </summary>
		[Column("TARGET_ACTIVE_STATUS"),         Nullable] public string?   TargetActiveStatus        { get; set; } // VARCHAR(16)
		/// <summary>
		/// Time the connection was established from the target
		/// </summary>
		[Column("TARGET_CONNECT_TIME"),          Nullable] public DateTime? TargetConnectTime         { get; set; } // TIMESTAMP
		/// <summary>
		/// Target reconnect count
		/// </summary>
		[Column("TARGET_RECONNECT_COUNT"),       Nullable] public int?      TargetReconnectCount      { get; set; } // INTEGER
		/// <summary>
		/// Target failover count
		/// </summary>
		[Column("TARGET_FAILOVER_COUNT"),        Nullable] public int?      TargetFailoverCount       { get; set; } // INTEGER
		/// <summary>
		/// Indicates if target is fully recoverable.
		/// </summary>
		[Column("TARGET_FULLY_RECOVERABLE"),     Nullable] public string?   TargetFullyRecoverable    { get; set; } // VARCHAR(5)
		/// <summary>
		/// Replication mode
		/// </summary>
		[Column("REPLICATION_MODE"),             Nullable] public string?   ReplicationMode           { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status
		/// </summary>
		[Column("REPLICATION_STATUS"),           Nullable] public string?   ReplicationStatus         { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status details
		/// </summary>
		[Column("REPLICATION_STATUS_DETAILS"),   Nullable] public string?   ReplicationStatusDetails  { get; set; } // VARCHAR(1024)
		/// <summary>
		/// Current log position
		/// </summary>
		[Column("LAST_LOG_POSITION"),            Nullable] public long?     LastLogPosition           { get; set; } // BIGINT
		/// <summary>
		/// Current log position timestamp
		/// </summary>
		[Column("LAST_LOG_POSITION_TIME"),       Nullable] public DateTime? LastLogPositionTime       { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log position
		/// </summary>
		[Column("SHIPPED_LOG_POSITION"),         Nullable] public long?     ShippedLogPosition        { get; set; } // BIGINT
		/// <summary>
		/// Shipped log position timestamp
		/// </summary>
		[Column("SHIPPED_LOG_POSITION_TIME"),    Nullable] public DateTime? ShippedLogPositionTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log buffers count
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_COUNT"),    Nullable] public long?     ShippedLogBuffersCount    { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers size in bytes
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_SIZE"),     Nullable] public long?     ShippedLogBuffersSize     { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffer duration in microseconds
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_DURATION"), Nullable] public long?     ShippedLogBuffersDuration { get; set; } // BIGINT
		/// <summary>
		/// Number of times, the asynchronous replication buffer got full
		/// </summary>
		[Column("ASYNC_BUFFER_FULL_COUNT"),      Nullable] public long?     AsyncBufferFullCount      { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in bytes
		/// </summary>
		[Column("BACKLOG_SIZE"),                 Nullable] public long?     BacklogSize               { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in bytes
		/// </summary>
		[Column("MAX_BACKLOG_SIZE"),             Nullable] public long?     MaxBacklogSize            { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in microseconds
		/// </summary>
		[Column("BACKLOG_TIME"),                 Nullable] public long?     BacklogTime               { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in microseconds
		/// </summary>
		[Column("MAX_BACKLOG_TIME"),             Nullable] public long?     MaxBacklogTime            { get; set; } // BIGINT
	}

	/// <summary>
	/// DataVolume statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATA_VOLUMES", IsView=true)]
	public partial class SYS_DATABASES_MDataVolume
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                Nullable] public string? HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                Nullable] public int?    PORT         { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),     Nullable] public int?    VolumeId     { get; set; } // INTEGER
		/// <summary>
		/// Filename of DataVolume
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string? FileName     { get; set; } // VARCHAR(512)
		/// <summary>
		/// FileID of DataVolume
		/// </summary>
		[Column("FILE_ID"),       Nullable] public long?   FileId       { get; set; } // BIGINT
		/// <summary>
		/// Size of DataVolume
		/// </summary>
		[Column(),                Nullable] public long?   SIZE         { get; set; } // BIGINT
		/// <summary>
		/// Max. size of DataVolume
		/// </summary>
		[Column("MAX_SIZE"),      Nullable] public long?   MaxSize      { get; set; } // BIGINT
	}

	/// <summary>
	/// FreeBlockManager SizeClass statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATA_VOLUME_PAGE_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MDataVolumePageStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                              Nullable] public string? DatabaseName                         { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                             Nullable] public string? HOST                                 { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                             Nullable] public int?    PORT                                 { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                  Nullable] public int?    VolumeId                             { get; set; } // INTEGER
		/// <summary>
		/// DataVolume name
		/// </summary>
		[Column("DATA_VOLUME_NAME"),                           Nullable] public string? DataVolumeName                       { get; set; } // VARCHAR(512)
		/// <summary>
		/// Page size class
		/// </summary>
		[Column("PAGE_SIZECLASS"),                             Nullable] public string? PageSizeclass                        { get; set; } // VARCHAR(16)
		/// <summary>
		/// Page size
		/// </summary>
		[Column("PAGE_SIZE"),                                  Nullable] public long?   PageSize                             { get; set; } // BIGINT
		/// <summary>
		/// Superblock size
		/// </summary>
		[Column("SUPERBLOCK_SIZE"),                            Nullable] public long?   SuperblockSize                       { get; set; } // BIGINT
		/// <summary>
		/// Count of init pages
		/// </summary>
		[Column("INITIAL_BLOCK_COUNT"),                        Nullable] public long?   InitialBlockCount                    { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group allocated blocks
		/// </summary>
		[Column("TOTAL_ALLOCATE_BLOCK_COUNT"),                 Nullable] public long?   TotalAllocateBlockCount              { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group freed blocks
		/// </summary>
		[Column("TOTAL_SET_BLOCK_FREE_COUNT"),                 Nullable] public long?   TotalSetBlockFreeCount               { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group freed-after-savepoint blocks
		/// </summary>
		[Column("TOTAL_SET_BLOCK_FREE_AFTER_SAVEPOINT_COUNT"), Nullable] public long?   TotalSetBlockFreeAfterSavepointCount { get; set; } // BIGINT
		/// <summary>
		/// Number of used Superblocks
		/// </summary>
		[Column("SUPERBLOCK_COUNT"),                           Nullable] public long?   SuperblockCount                      { get; set; } // BIGINT
		/// <summary>
		/// Count of used blocks
		/// </summary>
		[Column("USED_BLOCK_COUNT"),                           Nullable] public long?   UsedBlockCount                       { get; set; } // BIGINT
		/// <summary>
		/// Count of shadow blocks
		/// </summary>
		[Column("SHADOW_BLOCK_COUNT"),                         Nullable] public long?   ShadowBlockCount                     { get; set; } // BIGINT
		/// <summary>
		/// Fill ratio
		/// </summary>
		[Column("FILL_RATIO"),                                 Nullable] public double? FillRatio                            { get; set; } // DOUBLE
	}

	/// <summary>
	/// FreeBlockManager SizeClass statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATA_VOLUME_PAGE_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MDataVolumePageStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                              Nullable] public string?   DatabaseName                         { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                                 Nullable] public DateTime? ResetTime                            { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                             Nullable] public string?   HOST                                 { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                             Nullable] public int?      PORT                                 { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                  Nullable] public int?      VolumeId                             { get; set; } // INTEGER
		/// <summary>
		/// DataVolume name
		/// </summary>
		[Column("DATA_VOLUME_NAME"),                           Nullable] public string?   DataVolumeName                       { get; set; } // VARCHAR(512)
		/// <summary>
		/// Page size class
		/// </summary>
		[Column("PAGE_SIZECLASS"),                             Nullable] public string?   PageSizeclass                        { get; set; } // VARCHAR(16)
		/// <summary>
		/// Page size
		/// </summary>
		[Column("PAGE_SIZE"),                                  Nullable] public long?     PageSize                             { get; set; } // BIGINT
		/// <summary>
		/// Superblock size
		/// </summary>
		[Column("SUPERBLOCK_SIZE"),                            Nullable] public long?     SuperblockSize                       { get; set; } // BIGINT
		/// <summary>
		/// Count of init pages
		/// </summary>
		[Column("INITIAL_BLOCK_COUNT"),                        Nullable] public long?     InitialBlockCount                    { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group allocated blocks
		/// </summary>
		[Column("TOTAL_ALLOCATE_BLOCK_COUNT"),                 Nullable] public long?     TotalAllocateBlockCount              { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group freed blocks
		/// </summary>
		[Column("TOTAL_SET_BLOCK_FREE_COUNT"),                 Nullable] public long?     TotalSetBlockFreeCount               { get; set; } // BIGINT
		/// <summary>
		/// Number of single and group freed-after-savepoint blocks
		/// </summary>
		[Column("TOTAL_SET_BLOCK_FREE_AFTER_SAVEPOINT_COUNT"), Nullable] public long?     TotalSetBlockFreeAfterSavepointCount { get; set; } // BIGINT
		/// <summary>
		/// Number of used Superblocks
		/// </summary>
		[Column("SUPERBLOCK_COUNT"),                           Nullable] public long?     SuperblockCount                      { get; set; } // BIGINT
		/// <summary>
		/// Count of used blocks
		/// </summary>
		[Column("USED_BLOCK_COUNT"),                           Nullable] public long?     UsedBlockCount                       { get; set; } // BIGINT
		/// <summary>
		/// Count of shadow blocks
		/// </summary>
		[Column("SHADOW_BLOCK_COUNT"),                         Nullable] public long?     ShadowBlockCount                     { get; set; } // BIGINT
		/// <summary>
		/// Fill ratio
		/// </summary>
		[Column("FILL_RATIO"),                                 Nullable] public double?   FillRatio                            { get; set; } // DOUBLE
	}

	/// <summary>
	/// FreeBlockManager Superblock statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DATA_VOLUME_SUPERBLOCK_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MDataVolumeSuperblockStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),         Nullable] public string? DatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                        Nullable] public string? HOST                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                        Nullable] public int?    PORT                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),             Nullable] public int?    VolumeId            { get; set; } // INTEGER
		/// <summary>
		/// DataVolume name
		/// </summary>
		[Column("DATA_VOLUME_NAME"),      Nullable] public string? DataVolumeName      { get; set; } // VARCHAR(512)
		/// <summary>
		/// Superblock size
		/// </summary>
		[Column("SUPERBLOCK_SIZE"),       Nullable] public long?   SuperblockSize      { get; set; } // BIGINT
		/// <summary>
		/// Count of used Superblocks
		/// </summary>
		[Column("USED_SUPERBLOCK_COUNT"), Nullable] public long?   UsedSuperblockCount { get; set; } // BIGINT
		/// <summary>
		/// Count of Superblocks
		/// </summary>
		[Column("SUPERBLOCK_COUNT"),      Nullable] public long?   SuperblockCount     { get; set; } // BIGINT
		/// <summary>
		/// Fill ratio
		/// </summary>
		[Column("FILL_RATIO"),            Nullable] public double? FillRatio           { get; set; } // DOUBLE
	}

	/// <summary>
	/// Disk usage information on host basis group by usage_types
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_DISK_USAGE", IsView=true)]
	public partial class SYS_DATABASES_MDiskUsage
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		#nullable disable
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                NotNull    ] public string  HOST         { get; set; } // VARCHAR(64)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Resource type like LOG, DATA, TRACE, DATA_BACKUP, LOG_BACKUP and CATALOG_BACKUP
		/// </summary>
		[Column("USAGE_TYPE"),    NotNull    ] public string  UsageType    { get; set; } // VARCHAR(32)
		#nullable enable
		/// <summary>
		/// Size of used disk space in bytes
		/// </summary>
		[Column("USED_SIZE"),        Nullable] public long?   UsedSize     { get; set; } // BIGINT
		/// <summary>
		/// Total size of disk space in bytes
		/// </summary>
		[Column("TOTAL_SIZE"),       Nullable] public long?   TotalSize    { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_XB", Name="MESSAGING_DESTINATIONS", IsView=true)]
	public partial class _SYS_XB_MessagingDestination
	{
		#nullable disable
		[Column("USER_NAME"),        NotNull    ] public string  UserName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_ID"),   NotNull    ] public string  DestinationId   { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_TYPE"), NotNull    ] public string  DestinationType { get; set; } // VARCHAR(20)
		#nullable enable
		[Column(),                      Nullable] public string? CONFIGURATION   { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XB", Name="MESSAGING_DESTINATIONS_")]
	public partial class _SYS_XB_MessagingDestinations
	{
		#nullable disable
		[Column("USER_NAME"),        PrimaryKey(1), NotNull] public string  UserName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_ID"),   PrimaryKey(2), NotNull] public string  DestinationId   { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_TYPE"),                NotNull] public string  DestinationType { get; set; } // VARCHAR(20)
		#nullable enable
		[Column(),                      Nullable           ] public string? CONFIGURATION   { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XB", Name="MESSAGING_SUBSCRIPTIONS", IsView=true)]
	public partial class _SYS_XB_MessagingSubscription
	{
		#nullable disable
		[Column("USER_NAME"),      NotNull    ] public string  UserName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_ID"), NotNull    ] public string  DestinationId { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("TOPIC_PATTERN"),  NotNull    ] public string  TopicPattern  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                 NotNull    ] public byte    QOS           { get; set; } // TINYINT
		#nullable disable
		[Column("SCHEMA_NAME"),    NotNull    ] public string  SchemaName    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TABLE_NAME"),     NotNull    ] public string  TableName     { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                    Nullable] public string? FORMAT        { get; set; } // VARCHAR(4)
		[Column(),                    Nullable] public string? SETTINGS      { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XB", Name="MESSAGING_SUBSCRIPTIONS_")]
	public partial class _SYS_XB_MessagingSubscriptions
	{
		#nullable disable
		[Column("USER_NAME"),      PrimaryKey(1), NotNull] public string  UserName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_ID"), PrimaryKey(2), NotNull] public string  DestinationId { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("TOPIC_PATTERN"),  PrimaryKey(3), NotNull] public string  TopicPattern  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                 PrimaryKey(4), NotNull] public byte    QOS           { get; set; } // TINYINT
		#nullable disable
		[Column("SCHEMA_NAME"),                   NotNull] public string  SchemaName    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TABLE_NAME"),                    NotNull] public string  TableName     { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                    Nullable           ] public string? FORMAT        { get; set; } // VARCHAR(4)
		[Column(),                    Nullable           ] public string? SETTINGS      { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// Information about replicated services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_ES_SERVICE_REPLICATION", IsView=true)]
	public partial class SYS_DATABASES_MEsServiceReplication
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                        Nullable] public string?   DatabaseName                    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Name of the store
		/// </summary>
		[Column("STORE_NAME"),                           Nullable] public string?   StoreName                       { get; set; } // VARCHAR(256)
		/// <summary>
		/// Time the connection was established from the secondary
		/// </summary>
		[Column("SECONDARY_CONNECT_TIME"),               Nullable] public DateTime? SecondaryConnectTime            { get; set; } // TIMESTAMP
		/// <summary>
		/// Secondary reconnect count
		/// </summary>
		[Column("SECONDARY_RECONNECT_COUNT"),            Nullable] public int?      SecondaryReconnectCount         { get; set; } // INTEGER
		/// <summary>
		/// Secondary failover count
		/// </summary>
		[Column("SECONDARY_FAILOVER_COUNT"),             Nullable] public int?      SecondaryFailoverCount          { get; set; } // INTEGER
		/// <summary>
		/// Indicates if secondary is fully recoverable.
		/// </summary>
		[Column("SECONDARY_FULLY_RECOVERABLE"),          Nullable] public string?   SecondaryFullyRecoverable       { get; set; } // VARCHAR(5)
		/// <summary>
		/// Replication mode
		/// </summary>
		[Column("REPLICATION_MODE"),                     Nullable] public string?   ReplicationMode                 { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status
		/// </summary>
		[Column("REPLICATION_STATUS"),                   Nullable] public string?   ReplicationStatus               { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status details
		/// </summary>
		[Column("REPLICATION_STATUS_DETAILS"),           Nullable] public string?   ReplicationStatusDetails        { get; set; } // VARCHAR(1024)
		/// <summary>
		/// Replication Full sync status
		/// </summary>
		[Column("FULL_SYNC"),                            Nullable] public string?   FullSync                        { get; set; } // VARCHAR(16)
		/// <summary>
		/// Last log position
		/// </summary>
		[Column("LAST_LOG_POSITION"),                    Nullable] public long?     LastLogPosition                 { get; set; } // BIGINT
		/// <summary>
		/// Last log position timestamp
		/// </summary>
		[Column("LAST_LOG_POSITION_TIME"),               Nullable] public DateTime? LastLogPositionTime             { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log position
		/// </summary>
		[Column("SHIPPED_LOG_POSITION"),                 Nullable] public long?     ShippedLogPosition              { get; set; } // BIGINT
		/// <summary>
		/// Shipped log position timestamp
		/// </summary>
		[Column("SHIPPED_LOG_POSITION_TIME"),            Nullable] public DateTime? ShippedLogPositionTime          { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log buffers count
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_COUNT"),            Nullable] public long?     ShippedLogBuffersCount          { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers size in bytes
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_SIZE"),             Nullable] public long?     ShippedLogBuffersSize           { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffer duration in microseconds
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_DURATION"),         Nullable] public long?     ShippedLogBuffersDuration       { get; set; } // BIGINT
		/// <summary>
		/// Log end position of the last known replayed log buffer on secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION"),                Nullable] public long?     ReplayedLogPosition             { get; set; } // BIGINT
		/// <summary>
		/// Timestamp of the last known replayed log buffer on the secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION_TIME"),           Nullable] public DateTime? ReplayedLogPositionTime         { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped full replica count
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_COUNT"),           Nullable] public long?     ShippedFullReplicaCount         { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica size in bytes
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_SIZE"),            Nullable] public long?     ShippedFullReplicaSize          { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica duration in microseconds
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_DURATION"),        Nullable] public long?     ShippedFullReplicaDuration      { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica size in bytes
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_SIZE"),       Nullable] public long?     ShippedLastFullReplicaSize      { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica start time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_START_TIME"), Nullable] public DateTime? ShippedLastFullReplicaStartTime { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped last full replica end time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_END_TIME"),   Nullable] public DateTime? ShippedLastFullReplicaEndTime   { get; set; } // TIMESTAMP
		/// <summary>
		/// Number of times, the asynchronous replication buffer got full
		/// </summary>
		[Column("ASYNC_BUFFER_FULL_COUNT"),              Nullable] public long?     AsyncBufferFullCount            { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in bytes
		/// </summary>
		[Column("BACKLOG_SIZE"),                         Nullable] public long?     BacklogSize                     { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in microseconds
		/// </summary>
		[Column("BACKLOG_TIME"),                         Nullable] public long?     BacklogTime                     { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in bytes
		/// </summary>
		[Column("MAX_BACKLOG_SIZE"),                     Nullable] public long?     MaxBacklogSize                  { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in microseconds
		/// </summary>
		[Column("MAX_BACKLOG_TIME"),                     Nullable] public long?     MaxBacklogTime                  { get; set; } // BIGINT
	}

	/// <summary>
	/// Internal events
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_EVENTS", IsView=true)]
	public partial class SYS_DATABASES_MEvent
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),  Nullable] public string?   DatabaseName  { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                 Nullable] public string?   HOST          { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                 Nullable] public int?      PORT          { get; set; } // INTEGER
		/// <summary>
		/// Type of event
		/// </summary>
		[Column(),                 Nullable] public string?   TYPE          { get; set; } // VARCHAR(256)
		/// <summary>
		/// ID of event
		/// </summary>
		[Column(),                 Nullable] public long?     ID            { get; set; } // BIGINT
		/// <summary>
		/// Additional info freetext
		/// </summary>
		[Column(),                 Nullable] public string?   INFOTEXT      { get; set; } // VARCHAR(2000)
		/// <summary>
		/// Time event was created
		/// </summary>
		[Column("CREATE_TIME"),    Nullable] public DateTime? CreateTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Time event was updated
		/// </summary>
		[Column("UPDATE_TIME"),    Nullable] public DateTime? UpdateTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Time event was handled
		/// </summary>
		[Column("HANDLE_TIME"),    Nullable] public DateTime? HandleTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// State of event
		/// </summary>
		[Column(),                 Nullable] public string?   STATE         { get; set; } // VARCHAR(256)
		/// <summary>
		/// Event acknowledged: 'TRUE'/'FALSE'
		/// </summary>
		[Column(),                 Nullable] public string?   ACKNOWLEDGED  { get; set; } // VARCHAR(5)
		/// <summary>
		/// Number of failed handle attempts
		/// </summary>
		[Column("FAILED_HANDLES"), Nullable] public long?     FailedHandles { get; set; } // BIGINT
	}

	/// <summary>
	/// Garbage collection/history manager statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_GARBAGE_COLLECTION_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MGarbageCollectionStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string? DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                               Nullable] public string? HOST                      { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                               Nullable] public int?    PORT                      { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                    Nullable] public int?    VolumeId                  { get; set; } // INTEGER
		/// <summary>
		/// type of storage handled (COLUMN STORE, LIVECACHE)
		/// </summary>
		[Column("STORE_TYPE"),                   Nullable] public string? StoreType                 { get; set; } // VARCHAR(16)
		/// <summary>
		/// Current count of history files in GC
		/// </summary>
		[Column("HISTORY_COUNT"),                Nullable] public int?    HistoryCount              { get; set; } // INTEGER
		/// <summary>
		/// Current count of GC waiters
		/// </summary>
		[Column("WAITER_COUNT"),                 Nullable] public int?    WaiterCount               { get; set; } // INTEGER
		/// <summary>
		/// Last known minimum TID of a reading transaction at EOT
		/// </summary>
		[Column("MIN_READ_TID"),                 Nullable] public long?   MinReadTid                { get; set; } // BIGINT
		/// <summary>
		/// TID of the last started cleanup job
		/// </summary>
		[Column("LAST_STARTED_TID"),             Nullable] public long?   LastStartedTid            { get; set; } // BIGINT
		/// <summary>
		/// TID of the last started postcommit job
		/// </summary>
		[Column("LAST_STARTED_TID_POSTCOMMIT"),  Nullable] public long?   LastStartedTidPostcommit  { get; set; } // BIGINT
		/// <summary>
		/// TID of the first waiting cleanup job
		/// </summary>
		[Column("FIRST_WAITING_TID"),            Nullable] public long?   FirstWaitingTid           { get; set; } // BIGINT
		/// <summary>
		/// TID of the first waiting postcommit job
		/// </summary>
		[Column("FIRST_WAITING_TID_POSTCOMMIT"), Nullable] public long?   FirstWaitingTidPostcommit { get; set; } // BIGINT
		/// <summary>
		/// Count of history files which entered the queue for cleanup
		/// </summary>
		[Column(),                               Nullable] public long?   ENTERS                    { get; set; } // BIGINT
		/// <summary>
		/// Count of history files which entered the queue for postcommit
		/// </summary>
		[Column("ENTERS_POSTCOMMIT"),            Nullable] public long?   EntersPostcommit          { get; set; } // BIGINT
		/// <summary>
		/// Count of garbage collection (cleanup) jobs started
		/// </summary>
		[Column("STARTED_JOBS"),                 Nullable] public long?   StartedJobs               { get; set; } // BIGINT
		/// <summary>
		/// Count of postcommit jobs started
		/// </summary>
		[Column("STARTED_JOBS_POSTCOMMIT"),      Nullable] public long?   StartedJobsPostcommit     { get; set; } // BIGINT
		/// <summary>
		/// Count of undo files processed for cleanup
		/// </summary>
		[Column("PROCESSED_JOBS"),               Nullable] public long?   ProcessedJobs             { get; set; } // BIGINT
		/// <summary>
		/// Count of undo files processed for postcommit
		/// </summary>
		[Column("PROCESSED_JOBS_POSTCOMMIT"),    Nullable] public long?   ProcessedJobsPostcommit   { get; set; } // BIGINT
		/// <summary>
		/// Count of all GC queue loads
		/// </summary>
		[Column("QUEUE_LOADS"),                  Nullable] public long?   QueueLoads                { get; set; } // BIGINT
		/// <summary>
		/// Count of GC queue loads which found some elements
		/// </summary>
		[Column("QUEUE_LOADS_NONEMPTY"),         Nullable] public long?   QueueLoadsNonempty        { get; set; } // BIGINT
		/// <summary>
		/// Count of queue empty states after GC finished
		/// </summary>
		[Column("QUEUE_EMPTY_COUNT"),            Nullable] public long?   QueueEmptyCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of savepoints
		/// </summary>
		[Column(),                               Nullable] public long?   SAVEPOINTS                { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (last)
		/// </summary>
		[Column("LAST_HISTORY_SIZE_AT_SVP"),     Nullable] public long?   LastHistorySizeAtSvp      { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (max)
		/// </summary>
		[Column("MAX_HISTORY_SIZE_AT_SVP"),      Nullable] public long?   MaxHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (min)
		/// </summary>
		[Column("MIN_HISTORY_SIZE_AT_SVP"),      Nullable] public long?   MinHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (total)
		/// </summary>
		[Column("SUM_HISTORY_SIZE_AT_SVP"),      Nullable] public long?   SumHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (avg)
		/// </summary>
		[Column("AVG_HISTORY_SIZE_AT_SVP"),      Nullable] public double? AvgHistorySizeAtSvp       { get; set; } // DOUBLE
		/// <summary>
		/// Count of savepoints finding empty queue
		/// </summary>
		[Column("EMPTY_HISTORY_AT_SVP_COUNT"),   Nullable] public long?   EmptyHistoryAtSvpCount    { get; set; } // BIGINT
	}

	/// <summary>
	/// Garbage collection/history manager statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_GARBAGE_COLLECTION_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MGarbageCollectionStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string?   DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                   Nullable] public DateTime? ResetTime                 { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                               Nullable] public string?   HOST                      { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                               Nullable] public int?      PORT                      { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                    Nullable] public int?      VolumeId                  { get; set; } // INTEGER
		/// <summary>
		/// type of storage handled (COLUMN STORE, LIVECACHE)
		/// </summary>
		[Column("STORE_TYPE"),                   Nullable] public string?   StoreType                 { get; set; } // VARCHAR(16)
		/// <summary>
		/// Current count of history files in GC
		/// </summary>
		[Column("HISTORY_COUNT"),                Nullable] public int?      HistoryCount              { get; set; } // INTEGER
		/// <summary>
		/// Current count of GC waiters
		/// </summary>
		[Column("WAITER_COUNT"),                 Nullable] public int?      WaiterCount               { get; set; } // INTEGER
		/// <summary>
		/// Last known minimum TID of a reading transaction at EOT
		/// </summary>
		[Column("MIN_READ_TID"),                 Nullable] public long?     MinReadTid                { get; set; } // BIGINT
		/// <summary>
		/// TID of the last started cleanup job
		/// </summary>
		[Column("LAST_STARTED_TID"),             Nullable] public long?     LastStartedTid            { get; set; } // BIGINT
		/// <summary>
		/// TID of the last started postcommit job
		/// </summary>
		[Column("LAST_STARTED_TID_POSTCOMMIT"),  Nullable] public long?     LastStartedTidPostcommit  { get; set; } // BIGINT
		/// <summary>
		/// TID of the first waiting cleanup job
		/// </summary>
		[Column("FIRST_WAITING_TID"),            Nullable] public long?     FirstWaitingTid           { get; set; } // BIGINT
		/// <summary>
		/// TID of the first waiting postcommit job
		/// </summary>
		[Column("FIRST_WAITING_TID_POSTCOMMIT"), Nullable] public long?     FirstWaitingTidPostcommit { get; set; } // BIGINT
		/// <summary>
		/// Count of history files which entered the queue for cleanup
		/// </summary>
		[Column(),                               Nullable] public long?     ENTERS                    { get; set; } // BIGINT
		/// <summary>
		/// Count of history files which entered the queue for postcommit
		/// </summary>
		[Column("ENTERS_POSTCOMMIT"),            Nullable] public long?     EntersPostcommit          { get; set; } // BIGINT
		/// <summary>
		/// Count of garbage collection (cleanup) jobs started
		/// </summary>
		[Column("STARTED_JOBS"),                 Nullable] public long?     StartedJobs               { get; set; } // BIGINT
		/// <summary>
		/// Count of postcommit jobs started
		/// </summary>
		[Column("STARTED_JOBS_POSTCOMMIT"),      Nullable] public long?     StartedJobsPostcommit     { get; set; } // BIGINT
		/// <summary>
		/// Count of undo files processed for cleanup
		/// </summary>
		[Column("PROCESSED_JOBS"),               Nullable] public long?     ProcessedJobs             { get; set; } // BIGINT
		/// <summary>
		/// Count of undo files processed for postcommit
		/// </summary>
		[Column("PROCESSED_JOBS_POSTCOMMIT"),    Nullable] public long?     ProcessedJobsPostcommit   { get; set; } // BIGINT
		/// <summary>
		/// Count of all GC queue loads
		/// </summary>
		[Column("QUEUE_LOADS"),                  Nullable] public long?     QueueLoads                { get; set; } // BIGINT
		/// <summary>
		/// Count of GC queue loads which found some elements
		/// </summary>
		[Column("QUEUE_LOADS_NONEMPTY"),         Nullable] public long?     QueueLoadsNonempty        { get; set; } // BIGINT
		/// <summary>
		/// Count of queue empty states after GC finished
		/// </summary>
		[Column("QUEUE_EMPTY_COUNT"),            Nullable] public long?     QueueEmptyCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of savepoints
		/// </summary>
		[Column(),                               Nullable] public long?     SAVEPOINTS                { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (last)
		/// </summary>
		[Column("LAST_HISTORY_SIZE_AT_SVP"),     Nullable] public long?     LastHistorySizeAtSvp      { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (max)
		/// </summary>
		[Column("MAX_HISTORY_SIZE_AT_SVP"),      Nullable] public long?     MaxHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (min)
		/// </summary>
		[Column("MIN_HISTORY_SIZE_AT_SVP"),      Nullable] public long?     MinHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (total)
		/// </summary>
		[Column("SUM_HISTORY_SIZE_AT_SVP"),      Nullable] public long?     SumHistorySizeAtSvp       { get; set; } // BIGINT
		/// <summary>
		/// Count of history files present at savepoint (avg)
		/// </summary>
		[Column("AVG_HISTORY_SIZE_AT_SVP"),      Nullable] public double?   AvgHistorySizeAtSvp       { get; set; } // DOUBLE
		/// <summary>
		/// Count of savepoints finding empty queue
		/// </summary>
		[Column("EMPTY_HISTORY_AT_SVP_COUNT"),   Nullable] public long?     EmptyHistoryAtSvpCount    { get; set; } // BIGINT
	}

	/// <summary>
	/// Memory allocator statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_HEAP_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_MHeapMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                        Nullable] public string? DatabaseName                     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                       Nullable] public string? HOST                             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                       Nullable] public int?    PORT                             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                            Nullable] public int?    VolumeId                         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),                        Nullable] public long?   StatisticsId                     { get; set; } // BIGINT
		/// <summary>
		/// Allocator name
		/// </summary>
		[Column(),                                       Nullable] public string? CATEGORY                         { get; set; } // VARCHAR(128)
		/// <summary>
		/// Depth
		/// </summary>
		[Column(),                                       Nullable] public long?   DEPTH                            { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator, including suballocators
		/// </summary>
		[Column("INCLUSIVE_SIZE_IN_USE"),                Nullable] public long?   InclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use, including suballocators
		/// </summary>
		[Column("INCLUSIVE_COUNT_IN_USE"),               Nullable] public long?   InclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?   InclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?   InclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Count of allocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?   InclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?   InclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?   InclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator and suballocators (estimate)
		/// </summary>
		[Column("INCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?   InclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Maximum allowed memory size of this allocator and suballocators. The limit is not a hard limit and may therefore be violated slightly. Currently it is not possible for the user to set limits for each allocator individually.
		/// </summary>
		[Column("INCLUSIVE_LIMIT"),                      Nullable] public long?   InclusiveLimit                   { get; set; } // BIGINT
		/// <summary>
		/// Average allocated memory by this allocator and its suballocators, multiplied by time since start of measurement (sample based rough estimate), this is usually deactivated, only activate in case this is requested by SAP support. Unit is 1 byte times 1 second (may change in future).
		/// </summary>
		[Column("INCLUSIVE_IN_USE_INTEGRAL"),            Nullable] public long?   InclusiveInUseIntegral           { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator
		/// </summary>
		[Column("EXCLUSIVE_SIZE_IN_USE"),                Nullable] public long?   ExclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use
		/// </summary>
		[Column("EXCLUSIVE_COUNT_IN_USE"),               Nullable] public long?   ExclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?   ExclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?   ExclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Count of allocations
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?   ExclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?   ExclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?   ExclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator (estimate)
		/// </summary>
		[Column("EXCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?   ExclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Count of allocation errors
		/// </summary>
		[Column("EXCLUSIVE_ALLOC_ERRORS"),               Nullable] public long?   ExclusiveAllocErrors             { get; set; } // BIGINT
		/// <summary>
		/// Average allocated memory by this allocator, multiplied by time since start of measurement (sample based rough estimate), this is usually deactivated, only activate in case this is requested by SAP support. Unit is 1 byte times 1 second (may change in future).
		/// </summary>
		[Column("EXCLUSIVE_IN_USE_INTEGRAL"),            Nullable] public long?   ExclusiveInUseIntegral           { get; set; } // BIGINT
		/// <summary>
		/// Deprecated
		/// </summary>
		[Column("MALLOC_PROXY_CACHE_MISSES"),            Nullable] public long?   MallocProxyCacheMisses           { get; set; } // BIGINT
		/// <summary>
		/// Allocator flags
		/// </summary>
		[Column(),                                       Nullable] public string? FLAGS                            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Name of SAP HANA component of this allocator
		/// </summary>
		[Column(),                                       Nullable] public string? COMPONENT                        { get; set; } // VARCHAR(64)
	}

	/// <summary>
	/// Memory allocator statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_HEAP_MEMORY_RESET", IsView=true)]
	public partial class SYS_DATABASES_MHeapMemoryReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                        Nullable] public string?   DatabaseName                     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                           Nullable] public DateTime? ResetTime                        { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                       Nullable] public string?   HOST                             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                       Nullable] public int?      PORT                             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                            Nullable] public int?      VolumeId                         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),                        Nullable] public long?     StatisticsId                     { get; set; } // BIGINT
		/// <summary>
		/// Allocator name
		/// </summary>
		[Column(),                                       Nullable] public string?   CATEGORY                         { get; set; } // VARCHAR(128)
		/// <summary>
		/// Depth
		/// </summary>
		[Column(),                                       Nullable] public long?     DEPTH                            { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator, including suballocators
		/// </summary>
		[Column("INCLUSIVE_SIZE_IN_USE"),                Nullable] public long?     InclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use, including suballocators
		/// </summary>
		[Column("INCLUSIVE_COUNT_IN_USE"),               Nullable] public long?     InclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?     InclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?     InclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Count of allocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?     InclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?     InclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?     InclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator and suballocators (estimate)
		/// </summary>
		[Column("INCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?     InclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Maximum allowed memory size of this allocator and suballocators. The limit is not a hard limit and may therefore be violated slightly. Currently it is not possible for the user to set limits for each allocator individually.
		/// </summary>
		[Column("INCLUSIVE_LIMIT"),                      Nullable] public long?     InclusiveLimit                   { get; set; } // BIGINT
		/// <summary>
		/// Average allocated memory by this allocator and its suballocators, multiplied by time since start of measurement (sample based rough estimate), this is usually deactivated, only activate in case this is requested by SAP support. Unit is 1 byte times 1 second (may change in future).
		/// </summary>
		[Column("INCLUSIVE_IN_USE_INTEGRAL"),            Nullable] public long?     InclusiveInUseIntegral           { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator
		/// </summary>
		[Column("EXCLUSIVE_SIZE_IN_USE"),                Nullable] public long?     ExclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use
		/// </summary>
		[Column("EXCLUSIVE_COUNT_IN_USE"),               Nullable] public long?     ExclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?     ExclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?     ExclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Count of allocations
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?     ExclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?     ExclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?     ExclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator (estimate)
		/// </summary>
		[Column("EXCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?     ExclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Count of allocation errors
		/// </summary>
		[Column("EXCLUSIVE_ALLOC_ERRORS"),               Nullable] public long?     ExclusiveAllocErrors             { get; set; } // BIGINT
		/// <summary>
		/// Average allocated memory by this allocator, multiplied by time since start of measurement (sample based rough estimate), this is usually deactivated, only activate in case this is requested by SAP support. Unit is 1 byte times 1 second (may change in future).
		/// </summary>
		[Column("EXCLUSIVE_IN_USE_INTEGRAL"),            Nullable] public long?     ExclusiveInUseIntegral           { get; set; } // BIGINT
		/// <summary>
		/// Deprecated
		/// </summary>
		[Column("MALLOC_PROXY_CACHE_MISSES"),            Nullable] public long?     MallocProxyCacheMisses           { get; set; } // BIGINT
		/// <summary>
		/// Allocator flags
		/// </summary>
		[Column(),                                       Nullable] public string?   FLAGS                            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Name of SAP HANA component of this allocator
		/// </summary>
		[Column(),                                       Nullable] public string?   COMPONENT                        { get; set; } // VARCHAR(64)
	}

	/// <summary>
	/// Host resource utilization, CPU time is in milliseconds and added across all cores since system start
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_HOST_RESOURCE_UTILIZATION", IsView=true)]
	public partial class SYS_DATABASES_MHostResourceUtilization
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                         Nullable] public string?   DatabaseName                      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                        Nullable] public string?   HOST                              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Free physical memory on the host
		/// </summary>
		[Column("FREE_PHYSICAL_MEMORY"),                  Nullable] public long?     FreePhysicalMemory                { get; set; } // BIGINT
		/// <summary>
		/// Used physical memory on the host
		/// </summary>
		[Column("USED_PHYSICAL_MEMORY"),                  Nullable] public long?     UsedPhysicalMemory                { get; set; } // BIGINT
		/// <summary>
		/// Free swap memory on the host
		/// </summary>
		[Column("FREE_SWAP_SPACE"),                       Nullable] public long?     FreeSwapSpace                     { get; set; } // BIGINT
		/// <summary>
		/// Used swap memory on the host
		/// </summary>
		[Column("USED_SWAP_SPACE"),                       Nullable] public long?     UsedSwapSpace                     { get; set; } // BIGINT
		/// <summary>
		/// Allocation limit for all processes
		/// </summary>
		[Column("ALLOCATION_LIMIT"),                      Nullable] public long?     AllocationLimit                   { get; set; } // BIGINT
		/// <summary>
		/// Amount of memory from the memory pool that is currently in actual use by SAP HANA processes
		/// </summary>
		[Column("INSTANCE_TOTAL_MEMORY_USED_SIZE"),       Nullable] public long?     InstanceTotalMemoryUsedSize       { get; set; } // BIGINT
		/// <summary>
		/// Size of the memory pool for all SAP HANA processes
		/// </summary>
		[Column("INSTANCE_TOTAL_MEMORY_ALLOCATED_SIZE"),  Nullable] public long?     InstanceTotalMemoryAllocatedSize  { get; set; } // BIGINT
		/// <summary>
		/// Code size, including shared libraries of SAP HANA processes
		/// </summary>
		[Column("INSTANCE_CODE_SIZE"),                    Nullable] public long?     InstanceCodeSize                  { get; set; } // BIGINT
		/// <summary>
		/// Shared memory size of SAP HANA processes
		/// </summary>
		[Column("INSTANCE_SHARED_MEMORY_ALLOCATED_SIZE"), Nullable] public long?     InstanceSharedMemoryAllocatedSize { get; set; } // BIGINT
		/// <summary>
		/// CPU time spent in user mode
		/// </summary>
		[Column("TOTAL_CPU_USER_TIME"),                   Nullable] public long?     TotalCpuUserTime                  { get; set; } // BIGINT
		/// <summary>
		/// CPU time spent in kernel mode
		/// </summary>
		[Column("TOTAL_CPU_SYSTEM_TIME"),                 Nullable] public long?     TotalCpuSystemTime                { get; set; } // BIGINT
		/// <summary>
		/// CPU time spent in wait IO (Linux only, Windows always 0)
		/// </summary>
		[Column("TOTAL_CPU_WIO_TIME"),                    Nullable] public long?     TotalCpuWioTime                   { get; set; } // BIGINT
		/// <summary>
		/// CPU idle time
		/// </summary>
		[Column("TOTAL_CPU_IDLE_TIME"),                   Nullable] public long?     TotalCpuIdleTime                  { get; set; } // BIGINT
		/// <summary>
		/// Host timestamp in local time zone
		/// </summary>
		[Column("SYS_TIMESTAMP"),                         Nullable] public DateTime? SysTimestamp                      { get; set; } // TIMESTAMP
		/// <summary>
		/// Host timestamp in UTC
		/// </summary>
		[Column("UTC_TIMESTAMP"),                         Nullable] public DateTime? UtcTimestamp                      { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// Configuration information from inifiles
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_INIFILE_CONTENTS", IsView=true)]
	public partial class SYS_DATABASES_MInifileContent
	{
		/// <summary>
		/// Configuration file name
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string? FileName     { get; set; } // VARCHAR(256)
		/// <summary>
		/// Configuration layer: DEFAULT, SYSTEM, HOST, DATABASE
		/// </summary>
		[Column("LAYER_NAME"),    Nullable] public string? LayerName    { get; set; } // VARCHAR(16)
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name, if layer is HOST
		/// </summary>
		[Column(),                Nullable] public string? HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Configuration section name
		/// </summary>
		[Column(),                Nullable] public string? SECTION      { get; set; } // VARCHAR(128)
		/// <summary>
		/// Configuration key name
		/// </summary>
		[Column(),                Nullable] public string? KEY          { get; set; } // VARCHAR(128)
		/// <summary>
		/// Configuration value
		/// </summary>
		[Column(),                Nullable] public string? VALUE        { get; set; } // VARCHAR(5000)
	}

	/// <summary>
	/// Product usage measurements for licensing
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LICENSE_MEASUREMENTS", IsView=true)]
	public partial class SYS_DATABASES_MLicenseMeasurement
	{
		#nullable disable
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       NotNull    ] public string   DatabaseName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// GLAS application ID
		/// </summary>
		[Column("GLAS_APPLICATION_ID"), NotNull    ] public string   GlasApplicationId { get; set; } // VARCHAR(6)
		#nullable enable
		/// <summary>
		/// Time when the measurement was done
		/// </summary>
		[Column("MEASURE_TIME"),        NotNull    ] public DateTime MeasureTime       { get; set; } // TIMESTAMP
		/// <summary>
		/// The measured value (can be NULL in case the measurement failed)
		/// </summary>
		[Column(),                         Nullable] public long?    VALUE             { get; set; } // BIGINT
		#nullable disable
		/// <summary>
		/// 'TRUE' for successful, 'FALSE' for failed measurement
		/// </summary>
		[Column(),                      NotNull    ] public string   SUCCESSFUL        { get; set; } // VARCHAR(5)
		#nullable enable
	}

	/// <summary>
	/// License measurement statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LICENSE_MEASUREMENT_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MLicenseMeasurementStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string? DatabaseName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Year
		/// </summary>
		[Column(),                      Nullable] public int?    YEAR              { get; set; } // INTEGER
		/// <summary>
		/// Month
		/// </summary>
		[Column(),                      Nullable] public int?    MONTH             { get; set; } // INTEGER
		/// <summary>
		/// GLAS Application ID
		/// </summary>
		[Column("GLAS_APPLICATION_ID"), Nullable] public string? GlasApplicationId { get; set; } // VARCHAR(6)
		/// <summary>
		/// Peak value of the application for the given month, year
		/// </summary>
		[Column("PEAK_VALUE"),          Nullable] public long?   PeakValue         { get; set; } // BIGINT
	}

	/// <summary>
	/// Log buffer statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_BUFFERS", IsView=true)]
	public partial class SYS_DATABASES_MLogBuffer
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string? DatabaseName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                      Nullable] public string? HOST              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                      Nullable] public int?    PORT              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),           Nullable] public int?    VolumeId          { get; set; } // INTEGER
		/// <summary>
		/// Log mode
		/// </summary>
		[Column("LOG_MODE"),            Nullable] public string? LogMode           { get; set; } // VARCHAR(16)
		/// <summary>
		/// Size of one log buffer in memory
		/// </summary>
		[Column("BUFFER_SIZE"),         Nullable] public long?   BufferSize        { get; set; } // BIGINT
		/// <summary>
		/// Count of log buffers in memory
		/// </summary>
		[Column("BUFFER_COUNT"),        Nullable] public long?   BufferCount       { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of one log segment
		/// </summary>
		[Column("SEGMENT_SIZE"),        Nullable] public long?   SegmentSize       { get; set; } // BIGINT
		/// <summary>
		/// Log segment backup enabled: 'TRUE'/'FALSE' ('FALSE' on log backup history broken)
		/// </summary>
		[Column("BACKUP_ENABLED"),      Nullable] public string? BackupEnabled     { get; set; } // VARCHAR(5)
		/// <summary>
		/// Log segment backup timeout
		/// </summary>
		[Column("BACKUP_TIMEOUT"),      Nullable] public long?   BackupTimeout     { get; set; } // BIGINT
		/// <summary>
		/// Count of buffer switches without blocking on buffer semaphore
		/// </summary>
		[Column("SWITCH_NOWAIT_COUNT"), Nullable] public long?   SwitchNowaitCount { get; set; } // BIGINT
		/// <summary>
		/// Count of buffer switches with blocking on buffer semaphore
		/// </summary>
		[Column("SWITCH_WAIT_COUNT"),   Nullable] public long?   SwitchWaitCount   { get; set; } // BIGINT
		/// <summary>
		/// Count of ignored still-open buffer switches (resolved races)
		/// </summary>
		[Column("SWITCH_OPEN_COUNT"),   Nullable] public long?   SwitchOpenCount   { get; set; } // BIGINT
	}

	/// <summary>
	/// Log buffer statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_BUFFERS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MLogBuffersReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string?   DatabaseName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),          Nullable] public DateTime? ResetTime         { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                      Nullable] public string?   HOST              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                      Nullable] public int?      PORT              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),           Nullable] public int?      VolumeId          { get; set; } // INTEGER
		/// <summary>
		/// Log mode
		/// </summary>
		[Column("LOG_MODE"),            Nullable] public string?   LogMode           { get; set; } // VARCHAR(16)
		/// <summary>
		/// Size of one log buffer in memory
		/// </summary>
		[Column("BUFFER_SIZE"),         Nullable] public long?     BufferSize        { get; set; } // BIGINT
		/// <summary>
		/// Count of log buffers in memory
		/// </summary>
		[Column("BUFFER_COUNT"),        Nullable] public long?     BufferCount       { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of one log segment
		/// </summary>
		[Column("SEGMENT_SIZE"),        Nullable] public long?     SegmentSize       { get; set; } // BIGINT
		/// <summary>
		/// Log segment backup enabled: 'TRUE'/'FALSE' ('FALSE' on log backup history broken)
		/// </summary>
		[Column("BACKUP_ENABLED"),      Nullable] public string?   BackupEnabled     { get; set; } // VARCHAR(5)
		/// <summary>
		/// Log segment backup timeout
		/// </summary>
		[Column("BACKUP_TIMEOUT"),      Nullable] public long?     BackupTimeout     { get; set; } // BIGINT
		/// <summary>
		/// Count of buffer switches without blocking on buffer semaphore
		/// </summary>
		[Column("SWITCH_NOWAIT_COUNT"), Nullable] public long?     SwitchNowaitCount { get; set; } // BIGINT
		/// <summary>
		/// Count of buffer switches with blocking on buffer semaphore
		/// </summary>
		[Column("SWITCH_WAIT_COUNT"),   Nullable] public long?     SwitchWaitCount   { get; set; } // BIGINT
		/// <summary>
		/// Count of ignored still-open buffer switches (resolved races)
		/// </summary>
		[Column("SWITCH_OPEN_COUNT"),   Nullable] public long?     SwitchOpenCount   { get; set; } // BIGINT
	}

	/// <summary>
	/// Log partition statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_PARTITIONS", IsView=true)]
	public partial class SYS_DATABASES_MLogPartition
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                      Nullable] public string? DatabaseName                   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                     Nullable] public string? HOST                           { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                     Nullable] public int?    PORT                           { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                          Nullable] public int?    VolumeId                       { get; set; } // INTEGER
		/// <summary>
		/// Log partition ID
		/// </summary>
		[Column("PARTITION_ID"),                       Nullable] public long?   PartitionId                    { get; set; } // BIGINT
		/// <summary>
		/// Log partition root path
		/// </summary>
		[Column(),                                     Nullable] public string? PATH                           { get; set; } // VARCHAR(512)
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (last)
		/// </summary>
		[Column("LAST_BUFFER_PREPARE_SIZE"),           Nullable] public long?   LastBufferPrepareSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (max)
		/// </summary>
		[Column("MAX_BUFFER_PREPARE_SIZE"),            Nullable] public long?   MaxBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (min)
		/// </summary>
		[Column("MIN_BUFFER_PREPARE_SIZE"),            Nullable] public long?   MinBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (total)
		/// </summary>
		[Column("SUM_BUFFER_PREPARE_SIZE"),            Nullable] public long?   SumBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (avg)
		/// </summary>
		[Column("AVG_BUFFER_PREPARE_SIZE"),            Nullable] public long?   AvgBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (last)
		/// </summary>
		[Column("LAST_BUFFER_OVERHEAD_SIZE"),          Nullable] public long?   LastBufferOverheadSize         { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (max)
		/// </summary>
		[Column("MAX_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?   MaxBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (min)
		/// </summary>
		[Column("MIN_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?   MinBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (total)
		/// </summary>
		[Column("SUM_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?   SumBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (avg)
		/// </summary>
		[Column("AVG_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?   AvgBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (last)
		/// </summary>
		[Column("LAST_BUFFER_IO_SIZE"),                Nullable] public long?   LastBufferIoSize               { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (max)
		/// </summary>
		[Column("MAX_BUFFER_IO_SIZE"),                 Nullable] public long?   MaxBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (min)
		/// </summary>
		[Column("MIN_BUFFER_IO_SIZE"),                 Nullable] public long?   MinBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (total)
		/// </summary>
		[Column("SUM_BUFFER_IO_SIZE"),                 Nullable] public long?   SumBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (avg)
		/// </summary>
		[Column("AVG_BUFFER_IO_SIZE"),                 Nullable] public long?   AvgBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (last)
		/// </summary>
		[Column("LAST_GROUP_COMMIT_FREQUENCY"),        Nullable] public long?   LastGroupCommitFrequency       { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (max)
		/// </summary>
		[Column("MAX_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?   MaxGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (min)
		/// </summary>
		[Column("MIN_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?   MinGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (total)
		/// </summary>
		[Column("SUM_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?   SumGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (avg)
		/// </summary>
		[Column("AVG_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?   AvgGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (last)
		/// </summary>
		[Column("LAST_CALLBACK_TIME"),                 Nullable] public long?   LastCallbackTime               { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (max)
		/// </summary>
		[Column("MAX_CALLBACK_TIME"),                  Nullable] public long?   MaxCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (min)
		/// </summary>
		[Column("MIN_CALLBACK_TIME"),                  Nullable] public long?   MinCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (total)
		/// </summary>
		[Column("SUM_CALLBACK_TIME"),                  Nullable] public long?   SumCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (avg)
		/// </summary>
		[Column("AVG_CALLBACK_TIME"),                  Nullable] public long?   AvgCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Count of buffers prepared for I/O
		/// </summary>
		[Column("PREPARED_BUFFERS"),                   Nullable] public long?   PreparedBuffers                { get; set; } // BIGINT
		/// <summary>
		/// Count of completed and written buffers
		/// </summary>
		[Column("WRITTEN_BUFFERS"),                    Nullable] public long?   WrittenBuffers                 { get; set; } // BIGINT
		/// <summary>
		/// Count of buffers written out-of-order
		/// </summary>
		[Column("WRITTEN_BUFFERS_OOO"),                Nullable] public long?   WrittenBuffersOoo              { get; set; } // BIGINT
		/// <summary>
		/// Count of new log segment requests
		/// </summary>
		[Column("NEW_SEGMENT_REQUEST_COUNT"),          Nullable] public long?   NewSegmentRequestCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of currently free log segments
		/// </summary>
		[Column("FREE_SEGMENTS"),                      Nullable] public long?   FreeSegments                   { get; set; } // BIGINT
		/// <summary>
		/// Count of currently in-backup log segments
		/// </summary>
		[Column("IN_BACKUP_SEGMENTS"),                 Nullable] public long?   InBackupSegments               { get; set; } // BIGINT
		/// <summary>
		/// Count of currently in-backup truncated log segments
		/// </summary>
		[Column("IN_BACKUP_TRUNCATED_SEGMENTS"),       Nullable] public long?   InBackupTruncatedSegments      { get; set; } // BIGINT
		/// <summary>
		/// Count of log segments backed up so far
		/// </summary>
		[Column("BACKED_UP_SEGMENTS"),                 Nullable] public long?   BackedUpSegments               { get; set; } // BIGINT
		/// <summary>
		/// Total log segment count in the partition
		/// </summary>
		[Column("TOTAL_SEGMENTS"),                     Nullable] public long?   TotalSegments                  { get; set; } // BIGINT
		/// <summary>
		/// Count of segments in-load during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_IN_LOAD"),          Nullable] public long?   RecoverySegmentsInLoad         { get; set; } // BIGINT
		/// <summary>
		/// Count of segments waiting for load during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_WAITING_FOR_LOAD"), Nullable] public long?   RecoverySegmentsWaitingForLoad { get; set; } // BIGINT
		/// <summary>
		/// Count of segments in process during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_IN_PROCESS"),       Nullable] public long?   RecoverySegmentsInProcess      { get; set; } // BIGINT
		/// <summary>
		/// Count of segments processed during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_PROCESSED"),        Nullable] public long?   RecoverySegmentsProcessed      { get; set; } // BIGINT
		/// <summary>
		/// Count of commits
		/// </summary>
		[Column("COMMIT_COUNT"),                       Nullable] public long?   CommitCount                    { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (last)
		/// </summary>
		[Column("LAST_COMMIT_IO_LATENCY"),             Nullable] public long?   LastCommitIoLatency            { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (max)
		/// </summary>
		[Column("MAX_COMMIT_IO_LATENCY"),              Nullable] public long?   MaxCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (min)
		/// </summary>
		[Column("MIN_COMMIT_IO_LATENCY"),              Nullable] public long?   MinCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (total)
		/// </summary>
		[Column("SUM_COMMIT_IO_LATENCY"),              Nullable] public long?   SumCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (avg)
		/// </summary>
		[Column("AVG_COMMIT_IO_LATENCY"),              Nullable] public long?   AvgCommitIoLatency             { get; set; } // BIGINT
	}

	/// <summary>
	/// Log partition statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_PARTITIONS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MLogPartitionsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                      Nullable] public string?   DatabaseName                   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                         Nullable] public DateTime? ResetTime                      { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                     Nullable] public string?   HOST                           { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                     Nullable] public int?      PORT                           { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                          Nullable] public int?      VolumeId                       { get; set; } // INTEGER
		/// <summary>
		/// Log partition ID
		/// </summary>
		[Column("PARTITION_ID"),                       Nullable] public long?     PartitionId                    { get; set; } // BIGINT
		/// <summary>
		/// Log partition root path
		/// </summary>
		[Column(),                                     Nullable] public string?   PATH                           { get; set; } // VARCHAR(512)
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (last)
		/// </summary>
		[Column("LAST_BUFFER_PREPARE_SIZE"),           Nullable] public long?     LastBufferPrepareSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (max)
		/// </summary>
		[Column("MAX_BUFFER_PREPARE_SIZE"),            Nullable] public long?     MaxBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (min)
		/// </summary>
		[Column("MIN_BUFFER_PREPARE_SIZE"),            Nullable] public long?     MinBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (total)
		/// </summary>
		[Column("SUM_BUFFER_PREPARE_SIZE"),            Nullable] public long?     SumBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at prepare time (actual log data size) (avg)
		/// </summary>
		[Column("AVG_BUFFER_PREPARE_SIZE"),            Nullable] public long?     AvgBufferPrepareSize           { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (last)
		/// </summary>
		[Column("LAST_BUFFER_OVERHEAD_SIZE"),          Nullable] public long?     LastBufferOverheadSize         { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (max)
		/// </summary>
		[Column("MAX_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?     MaxBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (min)
		/// </summary>
		[Column("MIN_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?     MinBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (total)
		/// </summary>
		[Column("SUM_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?     SumBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer alignment overhead at I/O time (avg)
		/// </summary>
		[Column("AVG_BUFFER_OVERHEAD_SIZE"),           Nullable] public long?     AvgBufferOverheadSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (last)
		/// </summary>
		[Column("LAST_BUFFER_IO_SIZE"),                Nullable] public long?     LastBufferIoSize               { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (max)
		/// </summary>
		[Column("MAX_BUFFER_IO_SIZE"),                 Nullable] public long?     MaxBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (min)
		/// </summary>
		[Column("MIN_BUFFER_IO_SIZE"),                 Nullable] public long?     MinBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (total)
		/// </summary>
		[Column("SUM_BUFFER_IO_SIZE"),                 Nullable] public long?     SumBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of log buffer at I/O time (actual data plus alignment overhead) (avg)
		/// </summary>
		[Column("AVG_BUFFER_IO_SIZE"),                 Nullable] public long?     AvgBufferIoSize                { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (last)
		/// </summary>
		[Column("LAST_GROUP_COMMIT_FREQUENCY"),        Nullable] public long?     LastGroupCommitFrequency       { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (max)
		/// </summary>
		[Column("MAX_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?     MaxGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (min)
		/// </summary>
		[Column("MIN_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?     MinGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (total)
		/// </summary>
		[Column("SUM_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?     SumGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Group commit frequency (callback count per buffer with sync callback) (avg)
		/// </summary>
		[Column("AVG_GROUP_COMMIT_FREQUENCY"),         Nullable] public long?     AvgGroupCommitFrequency        { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (last)
		/// </summary>
		[Column("LAST_CALLBACK_TIME"),                 Nullable] public long?     LastCallbackTime               { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (max)
		/// </summary>
		[Column("MAX_CALLBACK_TIME"),                  Nullable] public long?     MaxCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (min)
		/// </summary>
		[Column("MIN_CALLBACK_TIME"),                  Nullable] public long?     MinCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (total)
		/// </summary>
		[Column("SUM_CALLBACK_TIME"),                  Nullable] public long?     SumCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Callback time per buffer with sync callback (avg)
		/// </summary>
		[Column("AVG_CALLBACK_TIME"),                  Nullable] public long?     AvgCallbackTime                { get; set; } // BIGINT
		/// <summary>
		/// Count of buffers prepared for I/O
		/// </summary>
		[Column("PREPARED_BUFFERS"),                   Nullable] public long?     PreparedBuffers                { get; set; } // BIGINT
		/// <summary>
		/// Count of completed and written buffers
		/// </summary>
		[Column("WRITTEN_BUFFERS"),                    Nullable] public long?     WrittenBuffers                 { get; set; } // BIGINT
		/// <summary>
		/// Count of buffers written out-of-order
		/// </summary>
		[Column("WRITTEN_BUFFERS_OOO"),                Nullable] public long?     WrittenBuffersOoo              { get; set; } // BIGINT
		/// <summary>
		/// Count of new log segment requests
		/// </summary>
		[Column("NEW_SEGMENT_REQUEST_COUNT"),          Nullable] public long?     NewSegmentRequestCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of currently free log segments
		/// </summary>
		[Column("FREE_SEGMENTS"),                      Nullable] public long?     FreeSegments                   { get; set; } // BIGINT
		/// <summary>
		/// Count of currently in-backup log segments
		/// </summary>
		[Column("IN_BACKUP_SEGMENTS"),                 Nullable] public long?     InBackupSegments               { get; set; } // BIGINT
		/// <summary>
		/// Count of currently in-backup truncated log segments
		/// </summary>
		[Column("IN_BACKUP_TRUNCATED_SEGMENTS"),       Nullable] public long?     InBackupTruncatedSegments      { get; set; } // BIGINT
		/// <summary>
		/// Count of log segments backed up so far
		/// </summary>
		[Column("BACKED_UP_SEGMENTS"),                 Nullable] public long?     BackedUpSegments               { get; set; } // BIGINT
		/// <summary>
		/// Total log segment count in the partition
		/// </summary>
		[Column("TOTAL_SEGMENTS"),                     Nullable] public long?     TotalSegments                  { get; set; } // BIGINT
		/// <summary>
		/// Count of segments in-load during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_IN_LOAD"),          Nullable] public long?     RecoverySegmentsInLoad         { get; set; } // BIGINT
		/// <summary>
		/// Count of segments waiting for load during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_WAITING_FOR_LOAD"), Nullable] public long?     RecoverySegmentsWaitingForLoad { get; set; } // BIGINT
		/// <summary>
		/// Count of segments in process during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_IN_PROCESS"),       Nullable] public long?     RecoverySegmentsInProcess      { get; set; } // BIGINT
		/// <summary>
		/// Count of segments processed during recovery
		/// </summary>
		[Column("RECOVERY_SEGMENTS_PROCESSED"),        Nullable] public long?     RecoverySegmentsProcessed      { get; set; } // BIGINT
		/// <summary>
		/// Count of commits
		/// </summary>
		[Column("COMMIT_COUNT"),                       Nullable] public long?     CommitCount                    { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (last)
		/// </summary>
		[Column("LAST_COMMIT_IO_LATENCY"),             Nullable] public long?     LastCommitIoLatency            { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (max)
		/// </summary>
		[Column("MAX_COMMIT_IO_LATENCY"),              Nullable] public long?     MaxCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (min)
		/// </summary>
		[Column("MIN_COMMIT_IO_LATENCY"),              Nullable] public long?     MinCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (total)
		/// </summary>
		[Column("SUM_COMMIT_IO_LATENCY"),              Nullable] public long?     SumCommitIoLatency             { get; set; } // BIGINT
		/// <summary>
		/// Time needed to synchronize flush of commit log entries. (avg)
		/// </summary>
		[Column("AVG_COMMIT_IO_LATENCY"),              Nullable] public long?     AvgCommitIoLatency             { get; set; } // BIGINT
	}

	/// <summary>
	/// Log replay queue statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_REPLAY_QUEUE_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MLogReplayQueueStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),          Nullable] public string? DatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                         Nullable] public string? HOST                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                         Nullable] public int?    PORT                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),              Nullable] public int?    VolumeId            { get; set; } // INTEGER
		/// <summary>
		/// ID of log replay queue
		/// </summary>
		[Column("LOG_REPLAY_QUEUE_ID"),    Nullable] public int?    LogReplayQueueId    { get; set; } // INTEGER
		/// <summary>
		/// Type of redo log record
		/// </summary>
		[Column("LOG_RECORD_TYPE"),        Nullable] public string? LogRecordType       { get; set; } // VARCHAR(40)
		/// <summary>
		/// Total number of replayed log entries
		/// </summary>
		[Column("TOTAL_LOG_RECORD_COUNT"), Nullable] public long?   TotalLogRecordCount { get; set; } // BIGINT
		/// <summary>
		/// Accumulated execution time to replay log entries
		/// </summary>
		[Column("TOTAL_EXECUTION_TIME"),   Nullable] public long?   TotalExecutionTime  { get; set; } // BIGINT
		/// <summary>
		/// Accumulated local wait time during replay of log entries
		/// </summary>
		[Column("TOTAL_WAIT_TIME"),        Nullable] public long?   TotalWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Accumulated log size of replayed log entries
		/// </summary>
		[Column("TOTAL_LOG_RECORD_SIZE"),  Nullable] public long?   TotalLogRecordSize  { get; set; } // BIGINT
	}

	/// <summary>
	/// Log replay queue statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_REPLAY_QUEUE_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MLogReplayQueueStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),          Nullable] public string?   DatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),             Nullable] public DateTime? ResetTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                         Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                         Nullable] public int?      PORT                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),              Nullable] public int?      VolumeId            { get; set; } // INTEGER
		/// <summary>
		/// ID of log replay queue
		/// </summary>
		[Column("LOG_REPLAY_QUEUE_ID"),    Nullable] public int?      LogReplayQueueId    { get; set; } // INTEGER
		/// <summary>
		/// Type of redo log record
		/// </summary>
		[Column("LOG_RECORD_TYPE"),        Nullable] public string?   LogRecordType       { get; set; } // VARCHAR(40)
		/// <summary>
		/// Total number of replayed log entries
		/// </summary>
		[Column("TOTAL_LOG_RECORD_COUNT"), Nullable] public long?     TotalLogRecordCount { get; set; } // BIGINT
		/// <summary>
		/// Accumulated execution time to replay log entries
		/// </summary>
		[Column("TOTAL_EXECUTION_TIME"),   Nullable] public long?     TotalExecutionTime  { get; set; } // BIGINT
		/// <summary>
		/// Accumulated local wait time during replay of log entries
		/// </summary>
		[Column("TOTAL_WAIT_TIME"),        Nullable] public long?     TotalWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Accumulated log size of replayed log entries
		/// </summary>
		[Column("TOTAL_LOG_RECORD_SIZE"),  Nullable] public long?     TotalLogRecordSize  { get; set; } // BIGINT
	}

	/// <summary>
	/// Log segment statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_SEGMENTS", IsView=true)]
	public partial class SYS_DATABASES_MLogSegment
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string?   DatabaseName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                      Nullable] public string?   HOST              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                      Nullable] public int?      PORT              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),           Nullable] public int?      VolumeId          { get; set; } // INTEGER
		/// <summary>
		/// Log partition ID
		/// </summary>
		[Column("PARTITION_ID"),        Nullable] public long?     PartitionId       { get; set; } // BIGINT
		/// <summary>
		/// Log segment ID within partition
		/// </summary>
		[Column("SEGMENT_ID"),          Nullable] public long?     SegmentId         { get; set; } // BIGINT
		/// <summary>
		/// Log segment file name
		/// </summary>
		[Column("FILE_NAME"),           Nullable] public string?   FileName          { get; set; } // VARCHAR(512)
		/// <summary>
		/// Start position of log segment in the file
		/// </summary>
		[Column("FILE_OFFSET"),         Nullable] public long?     FileOffset        { get; set; } // BIGINT
		/// <summary>
		/// Log segment state
		/// </summary>
		[Column(),                      Nullable] public string?   STATE             { get; set; } // VARCHAR(16)
		/// <summary>
		/// First position contained in this log segment
		/// </summary>
		[Column("MIN_POSITION"),        Nullable] public long?     MinPosition       { get; set; } // BIGINT
		/// <summary>
		/// Position behind the last log record in this log segment (closed log segments only)
		/// </summary>
		[Column("MAX_POSITION"),        Nullable] public long?     MaxPosition       { get; set; } // BIGINT
		/// <summary>
		/// Start position of the log hole before this log segment (equal to min position if no hole)
		/// </summary>
		[Column("HOLE_POSITION"),       Nullable] public long?     HolePosition      { get; set; } // BIGINT
		/// <summary>
		/// Used log segment size in bytes
		/// </summary>
		[Column("USED_SIZE"),           Nullable] public long?     UsedSize          { get; set; } // BIGINT
		/// <summary>
		/// Total log segment size in bytes
		/// </summary>
		[Column("TOTAL_SIZE"),          Nullable] public long?     TotalSize         { get; set; } // BIGINT
		/// <summary>
		/// Flag for log segment in backup: 'TRUE'/'FALSE'
		/// </summary>
		[Column("IN_BACKUP"),           Nullable] public string?   InBackup          { get; set; } // VARCHAR(5)
		/// <summary>
		/// Timestamp of the last commit in this log segment
		/// </summary>
		[Column("LAST_COMMIT_TIME"),    Nullable] public DateTime? LastCommitTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Hash of key used for log segment encryption
		/// </summary>
		[Column("ENCRYPTION_KEY_HASH"), Nullable] public string?   EncryptionKeyHash { get; set; } // VARCHAR(64)
	}

	/// <summary>
	/// Log segment statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_LOG_SEGMENTS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MLogSegmentsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string?   DatabaseName      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),          Nullable] public DateTime? ResetTime         { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                      Nullable] public string?   HOST              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                      Nullable] public int?      PORT              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),           Nullable] public int?      VolumeId          { get; set; } // INTEGER
		/// <summary>
		/// Log partition ID
		/// </summary>
		[Column("PARTITION_ID"),        Nullable] public long?     PartitionId       { get; set; } // BIGINT
		/// <summary>
		/// Log segment ID within partition
		/// </summary>
		[Column("SEGMENT_ID"),          Nullable] public long?     SegmentId         { get; set; } // BIGINT
		/// <summary>
		/// Log segment file name
		/// </summary>
		[Column("FILE_NAME"),           Nullable] public string?   FileName          { get; set; } // VARCHAR(512)
		/// <summary>
		/// Start position of log segment in the file
		/// </summary>
		[Column("FILE_OFFSET"),         Nullable] public long?     FileOffset        { get; set; } // BIGINT
		/// <summary>
		/// Log segment state
		/// </summary>
		[Column(),                      Nullable] public string?   STATE             { get; set; } // VARCHAR(16)
		/// <summary>
		/// First position contained in this log segment
		/// </summary>
		[Column("MIN_POSITION"),        Nullable] public long?     MinPosition       { get; set; } // BIGINT
		/// <summary>
		/// Position behind the last log record in this log segment (closed log segments only)
		/// </summary>
		[Column("MAX_POSITION"),        Nullable] public long?     MaxPosition       { get; set; } // BIGINT
		/// <summary>
		/// Start position of the log hole before this log segment (equal to min position if no hole)
		/// </summary>
		[Column("HOLE_POSITION"),       Nullable] public long?     HolePosition      { get; set; } // BIGINT
		/// <summary>
		/// Used log segment size in bytes
		/// </summary>
		[Column("USED_SIZE"),           Nullable] public long?     UsedSize          { get; set; } // BIGINT
		/// <summary>
		/// Total log segment size in bytes
		/// </summary>
		[Column("TOTAL_SIZE"),          Nullable] public long?     TotalSize         { get; set; } // BIGINT
		/// <summary>
		/// Flag for log segment in backup: 'TRUE'/'FALSE'
		/// </summary>
		[Column("IN_BACKUP"),           Nullable] public string?   InBackup          { get; set; } // VARCHAR(5)
		/// <summary>
		/// Timestamp of the last commit in this log segment
		/// </summary>
		[Column("LAST_COMMIT_TIME"),    Nullable] public DateTime? LastCommitTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Hash of key used for log segment encryption
		/// </summary>
		[Column("ENCRYPTION_KEY_HASH"), Nullable] public string?   EncryptionKeyHash { get; set; } // VARCHAR(64)
	}

	/// <summary>
	/// Memory object statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_MEMORY_OBJECTS", IsView=true)]
	public partial class SYS_DATABASES_MMemoryObject
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                            Nullable] public string? DatabaseName                        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                           Nullable] public string? HOST                                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                           Nullable] public int?    PORT                                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                Nullable] public int?    VolumeId                            { get; set; } // INTEGER
		/// <summary>
		/// Object (statistic) type
		/// </summary>
		[Column(),                                           Nullable] public string? TYPE                                { get; set; } // VARCHAR(128)
		/// <summary>
		/// Number of objects currently in memory object container
		/// </summary>
		[Column("OBJECT_COUNT"),                             Nullable] public long?   ObjectCount                         { get; set; } // BIGINT
		/// <summary>
		/// Size of objects currently in memory object container
		/// </summary>
		[Column("OBJECT_SIZE"),                              Nullable] public long?   ObjectSize                          { get; set; } // BIGINT
		/// <summary>
		/// Size of non swappable objects currently in memory object container
		/// </summary>
		[Column("NON_SWAPPABLE_SIZE"),                       Nullable] public long?   NonSwappableSize                    { get; set; } // BIGINT
		/// <summary>
		/// Size of swappable objects currently in memory object container
		/// </summary>
		[Column("SWAPPABLE_SIZE"),                           Nullable] public long?   SwappableSize                       { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects put into memory object container
		/// </summary>
		[Column("PUT_COUNT"),                                Nullable] public long?   PutCount                            { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects put into memory object container
		/// </summary>
		[Column("PUT_SIZE"),                                 Nullable] public long?   PutSize                             { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects moved in from a different statistic
		/// </summary>
		[Column("MOVE_IN_COUNT"),                            Nullable] public long?   MoveInCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects moved in from a different statistic
		/// </summary>
		[Column("MOVE_IN_SIZE"),                             Nullable] public long?   MoveInSize                          { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects moved out to a different statistic
		/// </summary>
		[Column("MOVE_OUT_COUNT"),                           Nullable] public long?   MoveOutCount                        { get; set; } // BIGINT
		/// <summary>
		/// Total size objects moved out to a different statistic
		/// </summary>
		[Column("MOVE_OUT_SIZE"),                            Nullable] public long?   MoveOutSize                         { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects evicted from memory object container
		/// </summary>
		[Column("EVICT_COUNT"),                              Nullable] public long?   EvictCount                          { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects evicted from memory object container
		/// </summary>
		[Column("EVICT_SIZE"),                               Nullable] public long?   EvictSize                           { get; set; } // BIGINT
		/// <summary>
		/// Total number of temp-evicted objects
		/// </summary>
		[Column("TEMP_EVICT_COUNT"),                         Nullable] public long?   TempEvictCount                      { get; set; } // BIGINT
		/// <summary>
		/// Total size of temp-evicted objects
		/// </summary>
		[Column("TEMP_EVICT_SIZE"),                          Nullable] public long?   TempEvictSize                       { get; set; } // BIGINT
		/// <summary>
		/// Total number of resizes
		/// </summary>
		[Column("RESIZE_COUNT"),                             Nullable] public long?   ResizeCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size delta changed by resize of objects
		/// </summary>
		[Column("RESIZE_DELTA_SIZE"),                        Nullable] public long?   ResizeDeltaSize                     { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects
		/// </summary>
		[Column("SHRINK_COUNT"),                             Nullable] public long?   ShrinkCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects
		/// </summary>
		[Column("SHRINK_SIZE"),                              Nullable] public long?   ShrinkSize                          { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects due to unused retention period
		/// </summary>
		[Column("RETENTION_PERIOD_SHRINK_COUNT"),            Nullable] public long?   RetentionPeriodShrinkCount          { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects due to unused retention period
		/// </summary>
		[Column("RETENTION_PERIOD_SHRINK_SIZE"),             Nullable] public long?   RetentionPeriodShrinkSize           { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects due to paged attribute limit violation
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_LIMIT_SHRINK_COUNT"), Nullable] public long?   PageLoadableColumnsLimitShrinkCount { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects due to paged attribute limit violation
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_LIMIT_SHRINK_SIZE"),  Nullable] public long?   PageLoadableColumnsLimitShrinkSize  { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects shrink (and retention period and page loadable columns limit issues) failed to remove
		/// </summary>
		[Column("FAILED_SHRINK_COUNT"),                      Nullable] public long?   FailedShrinkCount                   { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects shrink (and retention period and page loadable columns limit issues) failed to remove
		/// </summary>
		[Column("FAILED_SHRINK_SIZE"),                       Nullable] public long?   FailedShrinkSize                    { get; set; } // BIGINT
	}

	/// <summary>
	/// Disposition specific memory object statistics. The statistics are calculated and reading them may take a while.
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_MEMORY_OBJECT_DISPOSITIONS", IsView=true)]
	public partial class SYS_DATABASES_MMemoryObjectDisposition
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                      Nullable] public string? DatabaseName                   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                     Nullable] public string? HOST                           { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                     Nullable] public int?    PORT                           { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                          Nullable] public int?    VolumeId                       { get; set; } // INTEGER
		/// <summary>
		/// Object (statistic) type)
		/// </summary>
		[Column(),                                     Nullable] public string? TYPE                           { get; set; } // VARCHAR(128)
		/// <summary>
		/// Allocator category, the corresponding allocator and/or some of its sub allocators were used to allocate the memory objects
		/// </summary>
		[Column(),                                     Nullable] public string? CATEGORY                       { get; set; } // VARCHAR(128)
		/// <summary>
		/// Number of temporary objects
		/// </summary>
		[Column("TEMPORARY_OBJECT_COUNT"),             Nullable] public long?   TemporaryObjectCount           { get; set; } // BIGINT
		/// <summary>
		/// Number of page loadable columns objects
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_OBJECT_COUNT"), Nullable] public long?   PageLoadableColumnsObjectCount { get; set; } // BIGINT
		/// <summary>
		/// Number of early unload objects
		/// </summary>
		[Column("EARLY_UNLOAD_OBJECT_COUNT"),          Nullable] public long?   EarlyUnloadObjectCount         { get; set; } // BIGINT
		/// <summary>
		/// Number of internal short term objects
		/// </summary>
		[Column("INTERNAL_SHORT_TERM_OBJECT_COUNT"),   Nullable] public long?   InternalShortTermObjectCount   { get; set; } // BIGINT
		/// <summary>
		/// Number of short term objects
		/// </summary>
		[Column("SHORT_TERM_OBJECT_COUNT"),            Nullable] public long?   ShortTermObjectCount           { get; set; } // BIGINT
		/// <summary>
		/// Number of mid term objects
		/// </summary>
		[Column("MID_TERM_OBJECT_COUNT"),              Nullable] public long?   MidTermObjectCount             { get; set; } // BIGINT
		/// <summary>
		/// Number of long term objects
		/// </summary>
		[Column("LONG_TERM_OBJECT_COUNT"),             Nullable] public long?   LongTermObjectCount            { get; set; } // BIGINT
		/// <summary>
		/// Number of non swappable objects
		/// </summary>
		[Column("NON_SWAPPABLE_OBJECT_COUNT"),         Nullable] public long?   NonSwappableObjectCount        { get; set; } // BIGINT
		/// <summary>
		/// Size of temporary objects
		/// </summary>
		[Column("TEMPORARY_OBJECT_SIZE"),              Nullable] public long?   TemporaryObjectSize            { get; set; } // BIGINT
		/// <summary>
		/// Size of page loadable columns objects
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_OBJECT_SIZE"),  Nullable] public long?   PageLoadableColumnsObjectSize  { get; set; } // BIGINT
		/// <summary>
		/// Size of early unload objects
		/// </summary>
		[Column("EARLY_UNLOAD_OBJECT_SIZE"),           Nullable] public long?   EarlyUnloadObjectSize          { get; set; } // BIGINT
		/// <summary>
		/// Size of internal short term objects
		/// </summary>
		[Column("INTERNAL_SHORT_TERM_OBJECT_SIZE"),    Nullable] public long?   InternalShortTermObjectSize    { get; set; } // BIGINT
		/// <summary>
		/// Size of short term objects
		/// </summary>
		[Column("SHORT_TERM_OBJECT_SIZE"),             Nullable] public long?   ShortTermObjectSize            { get; set; } // BIGINT
		/// <summary>
		/// Size of mid term objects
		/// </summary>
		[Column("MID_TERM_OBJECT_SIZE"),               Nullable] public long?   MidTermObjectSize              { get; set; } // BIGINT
		/// <summary>
		/// Size of long term objects
		/// </summary>
		[Column("LONG_TERM_OBJECT_SIZE"),              Nullable] public long?   LongTermObjectSize             { get; set; } // BIGINT
		/// <summary>
		/// Size of non swappable objects
		/// </summary>
		[Column("NON_SWAPPABLE_OBJECT_SIZE"),          Nullable] public long?   NonSwappableObjectSize         { get; set; } // BIGINT
	}

	/// <summary>
	/// Memory object statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_MEMORY_OBJECTS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MMemoryObjectsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                            Nullable] public string?   DatabaseName                        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                               Nullable] public DateTime? ResetTime                           { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                           Nullable] public string?   HOST                                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                           Nullable] public int?      PORT                                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                Nullable] public int?      VolumeId                            { get; set; } // INTEGER
		/// <summary>
		/// Object (statistic) type
		/// </summary>
		[Column(),                                           Nullable] public string?   TYPE                                { get; set; } // VARCHAR(128)
		/// <summary>
		/// Number of objects currently in memory object container
		/// </summary>
		[Column("OBJECT_COUNT"),                             Nullable] public long?     ObjectCount                         { get; set; } // BIGINT
		/// <summary>
		/// Size of objects currently in memory object container
		/// </summary>
		[Column("OBJECT_SIZE"),                              Nullable] public long?     ObjectSize                          { get; set; } // BIGINT
		/// <summary>
		/// Size of non swappable objects currently in memory object container
		/// </summary>
		[Column("NON_SWAPPABLE_SIZE"),                       Nullable] public long?     NonSwappableSize                    { get; set; } // BIGINT
		/// <summary>
		/// Size of swappable objects currently in memory object container
		/// </summary>
		[Column("SWAPPABLE_SIZE"),                           Nullable] public long?     SwappableSize                       { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects put into memory object container
		/// </summary>
		[Column("PUT_COUNT"),                                Nullable] public long?     PutCount                            { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects put into memory object container
		/// </summary>
		[Column("PUT_SIZE"),                                 Nullable] public long?     PutSize                             { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects moved in from a different statistic
		/// </summary>
		[Column("MOVE_IN_COUNT"),                            Nullable] public long?     MoveInCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects moved in from a different statistic
		/// </summary>
		[Column("MOVE_IN_SIZE"),                             Nullable] public long?     MoveInSize                          { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects moved out to a different statistic
		/// </summary>
		[Column("MOVE_OUT_COUNT"),                           Nullable] public long?     MoveOutCount                        { get; set; } // BIGINT
		/// <summary>
		/// Total size objects moved out to a different statistic
		/// </summary>
		[Column("MOVE_OUT_SIZE"),                            Nullable] public long?     MoveOutSize                         { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects evicted from memory object container
		/// </summary>
		[Column("EVICT_COUNT"),                              Nullable] public long?     EvictCount                          { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects evicted from memory object container
		/// </summary>
		[Column("EVICT_SIZE"),                               Nullable] public long?     EvictSize                           { get; set; } // BIGINT
		/// <summary>
		/// Total number of temp-evicted objects
		/// </summary>
		[Column("TEMP_EVICT_COUNT"),                         Nullable] public long?     TempEvictCount                      { get; set; } // BIGINT
		/// <summary>
		/// Total size of temp-evicted objects
		/// </summary>
		[Column("TEMP_EVICT_SIZE"),                          Nullable] public long?     TempEvictSize                       { get; set; } // BIGINT
		/// <summary>
		/// Total number of resizes
		/// </summary>
		[Column("RESIZE_COUNT"),                             Nullable] public long?     ResizeCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size delta changed by resize of objects
		/// </summary>
		[Column("RESIZE_DELTA_SIZE"),                        Nullable] public long?     ResizeDeltaSize                     { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects
		/// </summary>
		[Column("SHRINK_COUNT"),                             Nullable] public long?     ShrinkCount                         { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects
		/// </summary>
		[Column("SHRINK_SIZE"),                              Nullable] public long?     ShrinkSize                          { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects due to unused retention period
		/// </summary>
		[Column("RETENTION_PERIOD_SHRINK_COUNT"),            Nullable] public long?     RetentionPeriodShrinkCount          { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects due to unused retention period
		/// </summary>
		[Column("RETENTION_PERIOD_SHRINK_SIZE"),             Nullable] public long?     RetentionPeriodShrinkSize           { get; set; } // BIGINT
		/// <summary>
		/// Total number of shrunk objects due to paged attribute limit violation
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_LIMIT_SHRINK_COUNT"), Nullable] public long?     PageLoadableColumnsLimitShrinkCount { get; set; } // BIGINT
		/// <summary>
		/// Total size of shrunk objects due to paged attribute limit violation
		/// </summary>
		[Column("PAGE_LOADABLE_COLUMNS_LIMIT_SHRINK_SIZE"),  Nullable] public long?     PageLoadableColumnsLimitShrinkSize  { get; set; } // BIGINT
		/// <summary>
		/// Total number of objects shrink (and retention period and page loadable columns limit issues) failed to remove
		/// </summary>
		[Column("FAILED_SHRINK_COUNT"),                      Nullable] public long?     FailedShrinkCount                   { get; set; } // BIGINT
		/// <summary>
		/// Total size of objects shrink (and retention period and page loadable columns limit issues) failed to remove
		/// </summary>
		[Column("FAILED_SHRINK_SIZE"),                       Nullable] public long?     FailedShrinkSize                    { get; set; } // BIGINT
	}

	/// <summary>
	/// Mutex statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_MUTEXES", IsView=true)]
	public partial class SYS_DATABASES_MMutex
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),         Nullable] public string? DatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                        Nullable] public string? HOST                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                        Nullable] public int?    PORT                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),             Nullable] public int?    VolumeId            { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),       Nullable] public string? StatisticsName      { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),         Nullable] public long?   StatisticsId        { get; set; } // BIGINT
		/// <summary>
		/// Count of lock calls
		/// </summary>
		[Column("LOCK_COUNT"),            Nullable] public long?   LockCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking lock calls
		/// </summary>
		[Column("WAIT_COUNT"),            Nullable] public long?   WaitCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of spurious wakeups (collisions on futex)
		/// </summary>
		[Column("SPURIOUS_WAKEUP_COUNT"), Nullable] public long?   SpuriousWakeupCount { get; set; } // BIGINT
		/// <summary>
		/// Collision rate in percent
		/// </summary>
		[Column("COLLISION_RATE"),        Nullable] public double? CollisionRate       { get; set; } // DOUBLE
		/// <summary>
		/// Context ID of the owner context
		/// </summary>
		[Column("OWNER_ID"),              Nullable] public long?   OwnerId             { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (last)
		/// </summary>
		[Column("LAST_WAIT_TIME"),        Nullable] public long?   LastWaitTime        { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (max)
		/// </summary>
		[Column("MAX_WAIT_TIME"),         Nullable] public long?   MaxWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (min)
		/// </summary>
		[Column("MIN_WAIT_TIME"),         Nullable] public long?   MinWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (total)
		/// </summary>
		[Column("SUM_WAIT_TIME"),         Nullable] public long?   SumWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (avg)
		/// </summary>
		[Column("AVG_WAIT_TIME"),         Nullable] public long?   AvgWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Count of mutex creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),          Nullable] public long?   CreateCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of mutex destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),         Nullable] public long?   DestroyCount        { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                        Nullable] public string? COMPONENT           { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Mutex statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_MUTEXES_RESET", IsView=true)]
	public partial class SYS_DATABASES_MMutexesReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),         Nullable] public string?   DatabaseName        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),            Nullable] public DateTime? ResetTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                        Nullable] public string?   HOST                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                        Nullable] public int?      PORT                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),             Nullable] public int?      VolumeId            { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),       Nullable] public string?   StatisticsName      { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),         Nullable] public long?     StatisticsId        { get; set; } // BIGINT
		/// <summary>
		/// Count of lock calls
		/// </summary>
		[Column("LOCK_COUNT"),            Nullable] public long?     LockCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking lock calls
		/// </summary>
		[Column("WAIT_COUNT"),            Nullable] public long?     WaitCount           { get; set; } // BIGINT
		/// <summary>
		/// Count of spurious wakeups (collisions on futex)
		/// </summary>
		[Column("SPURIOUS_WAKEUP_COUNT"), Nullable] public long?     SpuriousWakeupCount { get; set; } // BIGINT
		/// <summary>
		/// Collision rate in percent
		/// </summary>
		[Column("COLLISION_RATE"),        Nullable] public double?   CollisionRate       { get; set; } // DOUBLE
		/// <summary>
		/// Context ID of the owner context
		/// </summary>
		[Column("OWNER_ID"),              Nullable] public long?     OwnerId             { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (last)
		/// </summary>
		[Column("LAST_WAIT_TIME"),        Nullable] public long?     LastWaitTime        { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (max)
		/// </summary>
		[Column("MAX_WAIT_TIME"),         Nullable] public long?     MaxWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (min)
		/// </summary>
		[Column("MIN_WAIT_TIME"),         Nullable] public long?     MinWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (total)
		/// </summary>
		[Column("SUM_WAIT_TIME"),         Nullable] public long?     SumWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking lock calls (avg)
		/// </summary>
		[Column("AVG_WAIT_TIME"),         Nullable] public long?     AvgWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Count of mutex creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),          Nullable] public long?     CreateCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of mutex destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),         Nullable] public long?     DestroyCount        { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                        Nullable] public string?   COMPONENT           { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// PageAccess statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PAGEACCESS_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MPageaccessStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string? DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string? HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?    PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?    VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Type of pageaccess
		/// </summary>
		[Column(),                     Nullable] public string? TYPE             { get; set; } // VARCHAR(32)
		/// <summary>
		/// Chunk size
		/// </summary>
		[Column("CHUNK_SIZE"),         Nullable] public int?    ChunkSize        { get; set; } // INTEGER
		/// <summary>
		/// Number of allocations
		/// </summary>
		[Column("ALLOCATE_COUNT"),     Nullable] public long?   AllocateCount    { get; set; } // BIGINT
		/// <summary>
		/// Number of gets
		/// </summary>
		[Column("GET_COUNT"),          Nullable] public long?   GetCount         { get; set; } // BIGINT
		/// <summary>
		/// Number of synchronous loads
		/// </summary>
		[Column("LOAD_COUNT"),         Nullable] public long?   LoadCount        { get; set; } // BIGINT
		/// <summary>
		/// Number of asynchronous loads
		/// </summary>
		[Column("TRIGGER_LOAD_COUNT"), Nullable] public long?   TriggerLoadCount { get; set; } // BIGINT
		/// <summary>
		/// Number of deallocations
		/// </summary>
		[Column("DEALLOCATE_COUNT"),   Nullable] public long?   DeallocateCount  { get; set; } // BIGINT
	}

	/// <summary>
	/// PageAccess statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PAGEACCESS_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MPageaccessStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string?   DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),         Nullable] public DateTime? ResetTime        { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string?   HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?      PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?      VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Type of pageaccess
		/// </summary>
		[Column(),                     Nullable] public string?   TYPE             { get; set; } // VARCHAR(32)
		/// <summary>
		/// Chunk size
		/// </summary>
		[Column("CHUNK_SIZE"),         Nullable] public int?      ChunkSize        { get; set; } // INTEGER
		/// <summary>
		/// Number of allocations
		/// </summary>
		[Column("ALLOCATE_COUNT"),     Nullable] public long?     AllocateCount    { get; set; } // BIGINT
		/// <summary>
		/// Number of gets
		/// </summary>
		[Column("GET_COUNT"),          Nullable] public long?     GetCount         { get; set; } // BIGINT
		/// <summary>
		/// Number of synchronous loads
		/// </summary>
		[Column("LOAD_COUNT"),         Nullable] public long?     LoadCount        { get; set; } // BIGINT
		/// <summary>
		/// Number of asynchronous loads
		/// </summary>
		[Column("TRIGGER_LOAD_COUNT"), Nullable] public long?     TriggerLoadCount { get; set; } // BIGINT
		/// <summary>
		/// Number of deallocations
		/// </summary>
		[Column("DEALLOCATE_COUNT"),   Nullable] public long?     DeallocateCount  { get; set; } // BIGINT
	}

	/// <summary>
	/// Information about encryption page keys
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PERSISTENCE_ENCRYPTION_KEYS", IsView=true)]
	public partial class SYS_DATABASES_MPersistenceEncryptionKey
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),        Nullable] public string?   DatabaseName       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                       Nullable] public string?   HOST               { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                       Nullable] public int?      PORT               { get; set; } // INTEGER
		/// <summary>
		/// Valid from savepoint version
		/// </summary>
		[Column("VALID_FROM_SAVEPOINT"), Nullable] public int?      ValidFromSavepoint { get; set; } // INTEGER
		/// <summary>
		/// Valid from timestamp given in UTC
		/// </summary>
		[Column("VALID_FROM_TIMESTAMP"), Nullable] public DateTime? ValidFromTimestamp { get; set; } // TIMESTAMP
		/// <summary>
		/// Persistence encryption is active: 'TRUE'/'FALSE'
		/// </summary>
		[Column("IS_ENCRYPTED"),         Nullable] public string?   IsEncrypted        { get; set; } // VARCHAR(5)
	}

	/// <summary>
	/// Information about persistence encryption
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PERSISTENCE_ENCRYPTION_STATUS", IsView=true)]
	public partial class SYS_DATABASES_MPersistenceEncryptionStatus
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                          Nullable] public string? DatabaseName                       { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                         Nullable] public string? HOST                               { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                         Nullable] public int?    PORT                               { get; set; } // INTEGER
		/// <summary>
		/// Encryption is currently active for writing into persistence: 'TRUE'/'FALSE'
		/// </summary>
		[Column("ENCRYPTION_ACTIVE"),                      Nullable] public string? EncryptionActive                   { get; set; } // VARCHAR(5)
		/// <summary>
		/// Encryption will be active for writing into persistence after next savepoint: 'TRUE'/'FALSE'
		/// </summary>
		[Column("ENCRYPTION_ACTIVE_AFTER_NEXT_SAVEPOINT"), Nullable] public string? EncryptionActiveAfterNextSavepoint { get; set; } // VARCHAR(5)
		/// <summary>
		/// Next savepoint will activate a new key: 'TRUE'/'FALSE'
		/// </summary>
		[Column("KEY_CHANGE_WITH_NEXT_SAVEPOINT"),         Nullable] public string? KeyChangeWithNextSavepoint         { get; set; } // VARCHAR(5)
		/// <summary>
		/// Next savepoint will activate a new root key: 'TRUE'/'FALSE'
		/// </summary>
		[Column("ROOT_KEY_CHANGE_WITH_NEXT_SAVEPOINT"),    Nullable] public string? RootKeyChangeWithNextSavepoint     { get; set; } // VARCHAR(5)
		/// <summary>
		/// Specifies if the used root key version is the newest one: 'TRUE'/'FALSE'
		/// </summary>
		[Column("IS_LATEST_ROOT_KEY_VERSION"),             Nullable] public string? IsLatestRootKeyVersion             { get; set; } // VARCHAR(5)
		/// <summary>
		/// The version of the root key this service is using
		/// </summary>
		[Column("USED_ROOT_KEY_VERSION"),                  Nullable] public int?    UsedRootKeyVersion                 { get; set; } // INTEGER
		/// <summary>
		/// Conversion of data to latest encryption status or key active: 'TRUE'/'FALSE'
		/// </summary>
		[Column("DATA_CONVERSION_ACTIVE"),                 Nullable] public string? DataConversionActive               { get; set; } // VARCHAR(5)
		/// <summary>
		/// Number of entries within key page
		/// </summary>
		[Column("KEY_PAGE_ENTRY_COUNT"),                   Nullable] public long?   KeyPageEntryCount                  { get; set; } // BIGINT
	}

	/// <summary>
	/// Persistence manager statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PERSISTENCE_MANAGERS", IsView=true)]
	public partial class SYS_DATABASES_MPersistenceManager
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),              Nullable] public string? DatabaseName             { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                             Nullable] public string? HOST                     { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                             Nullable] public int?    PORT                     { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                  Nullable] public int?    VolumeId                 { get; set; } // INTEGER
		/// <summary>
		/// Maximum known TID
		/// </summary>
		[Column("MAX_TID"),                    Nullable] public long?   MaxTid                   { get; set; } // BIGINT
		/// <summary>
		/// Count of normal consistent changes (terminated sessions)
		/// </summary>
		[Column("CCH_COUNT"),                  Nullable] public long?   CchCount                 { get; set; } // BIGINT
		/// <summary>
		/// Count of consistent changes for mass operations (terminated sessions)
		/// </summary>
		[Column("MASS_CCH_COUNT"),             Nullable] public long?   MassCchCount             { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (last)
		/// </summary>
		[Column("LAST_CCH_TIME"),              Nullable] public long?   LastCchTime              { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (max)
		/// </summary>
		[Column("MAX_CCH_TIME"),               Nullable] public long?   MaxCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (min)
		/// </summary>
		[Column("MIN_CCH_TIME"),               Nullable] public long?   MinCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (total)
		/// </summary>
		[Column("SUM_CCH_TIME"),               Nullable] public long?   SumCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (avg)
		/// </summary>
		[Column("AVG_CCH_TIME"),               Nullable] public long?   AvgCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (last)
		/// </summary>
		[Column("LAST_MASS_CCH_TIME"),         Nullable] public long?   LastMassCchTime          { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (max)
		/// </summary>
		[Column("MAX_MASS_CCH_TIME"),          Nullable] public long?   MaxMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (min)
		/// </summary>
		[Column("MIN_MASS_CCH_TIME"),          Nullable] public long?   MinMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (total)
		/// </summary>
		[Column("SUM_MASS_CCH_TIME"),          Nullable] public long?   SumMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (avg)
		/// </summary>
		[Column("AVG_MASS_CCH_TIME"),          Nullable] public long?   AvgMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Newest known log position of prepare commit (slave only)
		/// </summary>
		[Column("PREPARE_COMMIT_POS"),         Nullable] public long?   PrepareCommitPos         { get; set; } // BIGINT
		/// <summary>
		/// Newest known log position of commit record on transaction master from the point of view of this node
		/// </summary>
		[Column("MASTER_COMMIT_POS"),          Nullable] public long?   MasterCommitPos          { get; set; } // BIGINT
		/// <summary>
		/// Count of in-doubt waiters for currently-running COMMIT (master only)
		/// </summary>
		[Column("INDOUBT_WAITERS"),            Nullable] public long?   IndoubtWaiters           { get; set; } // BIGINT
		/// <summary>
		/// Count of open in-doubt transactions before restart (master only)
		/// </summary>
		[Column("INDOUBT_RESTART_COUNT"),      Nullable] public long?   IndoubtRestartCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of open in-doubt transactions since last restart (master only)
		/// </summary>
		[Column("INDOUBT_ONLINE_COUNT"),       Nullable] public long?   IndoubtOnlineCount       { get; set; } // BIGINT
		/// <summary>
		/// Configured savepoint frequency
		/// </summary>
		[Column("SAVEPOINT_CONFIG_FREQUENCY"), Nullable] public long?   SavepointConfigFrequency { get; set; } // BIGINT
		/// <summary>
		/// Currently active savepoint frequency
		/// </summary>
		[Column("SAVEPOINT_ACTIVE_FREQUENCY"), Nullable] public long?   SavepointActiveFrequency { get; set; } // BIGINT
		/// <summary>
		/// Currently used checksum algorithm for modified pages and log buffers
		/// </summary>
		[Column("CHECKSUM_ALGORITHM"),         Nullable] public string? ChecksumAlgorithm        { get; set; } // VARCHAR(16)
	}

	/// <summary>
	/// Persistence manager statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_PERSISTENCE_MANAGERS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MPersistenceManagersReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),              Nullable] public string?   DatabaseName             { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                 Nullable] public DateTime? ResetTime                { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                             Nullable] public string?   HOST                     { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                             Nullable] public int?      PORT                     { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                  Nullable] public int?      VolumeId                 { get; set; } // INTEGER
		/// <summary>
		/// Maximum known TID
		/// </summary>
		[Column("MAX_TID"),                    Nullable] public long?     MaxTid                   { get; set; } // BIGINT
		/// <summary>
		/// Count of normal consistent changes (terminated sessions)
		/// </summary>
		[Column("CCH_COUNT"),                  Nullable] public long?     CchCount                 { get; set; } // BIGINT
		/// <summary>
		/// Count of consistent changes for mass operations (terminated sessions)
		/// </summary>
		[Column("MASS_CCH_COUNT"),             Nullable] public long?     MassCchCount             { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (last)
		/// </summary>
		[Column("LAST_CCH_TIME"),              Nullable] public long?     LastCchTime              { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (max)
		/// </summary>
		[Column("MAX_CCH_TIME"),               Nullable] public long?     MaxCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (min)
		/// </summary>
		[Column("MIN_CCH_TIME"),               Nullable] public long?     MinCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (total)
		/// </summary>
		[Column("SUM_CCH_TIME"),               Nullable] public long?     SumCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in normal consistent changes (terminated sessions) (avg)
		/// </summary>
		[Column("AVG_CCH_TIME"),               Nullable] public long?     AvgCchTime               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (last)
		/// </summary>
		[Column("LAST_MASS_CCH_TIME"),         Nullable] public long?     LastMassCchTime          { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (max)
		/// </summary>
		[Column("MAX_MASS_CCH_TIME"),          Nullable] public long?     MaxMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (min)
		/// </summary>
		[Column("MIN_MASS_CCH_TIME"),          Nullable] public long?     MinMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (total)
		/// </summary>
		[Column("SUM_MASS_CCH_TIME"),          Nullable] public long?     SumMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Time spent in consistent changes for mass operations (terminated sessions) (avg)
		/// </summary>
		[Column("AVG_MASS_CCH_TIME"),          Nullable] public long?     AvgMassCchTime           { get; set; } // BIGINT
		/// <summary>
		/// Newest known log position of prepare commit (slave only)
		/// </summary>
		[Column("PREPARE_COMMIT_POS"),         Nullable] public long?     PrepareCommitPos         { get; set; } // BIGINT
		/// <summary>
		/// Newest known log position of commit record on transaction master from the point of view of this node
		/// </summary>
		[Column("MASTER_COMMIT_POS"),          Nullable] public long?     MasterCommitPos          { get; set; } // BIGINT
		/// <summary>
		/// Count of in-doubt waiters for currently-running COMMIT (master only)
		/// </summary>
		[Column("INDOUBT_WAITERS"),            Nullable] public long?     IndoubtWaiters           { get; set; } // BIGINT
		/// <summary>
		/// Count of open in-doubt transactions before restart (master only)
		/// </summary>
		[Column("INDOUBT_RESTART_COUNT"),      Nullable] public long?     IndoubtRestartCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of open in-doubt transactions since last restart (master only)
		/// </summary>
		[Column("INDOUBT_ONLINE_COUNT"),       Nullable] public long?     IndoubtOnlineCount       { get; set; } // BIGINT
		/// <summary>
		/// Configured savepoint frequency
		/// </summary>
		[Column("SAVEPOINT_CONFIG_FREQUENCY"), Nullable] public long?     SavepointConfigFrequency { get; set; } // BIGINT
		/// <summary>
		/// Currently active savepoint frequency
		/// </summary>
		[Column("SAVEPOINT_ACTIVE_FREQUENCY"), Nullable] public long?     SavepointActiveFrequency { get; set; } // BIGINT
		/// <summary>
		/// Currently used checksum algorithm for modified pages and log buffers
		/// </summary>
		[Column("CHECKSUM_ALGORITHM"),         Nullable] public string?   ChecksumAlgorithm        { get; set; } // VARCHAR(16)
	}

	/// <summary>
	/// Read/Write lock statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_READWRITELOCKS", IsView=true)]
	public partial class SYS_DATABASES_MReadwritelock
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                 Nullable] public string? DatabaseName               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                Nullable] public string? HOST                       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                Nullable] public int?    PORT                       { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                     Nullable] public int?    VolumeId                   { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),               Nullable] public string? StatisticsName             { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),                 Nullable] public long?   StatisticsId               { get; set; } // BIGINT
		/// <summary>
		/// Context ID of the owner context (for exclusive/intent locks)
		/// </summary>
		[Column("OWNER_ID"),                      Nullable] public long?   OwnerId                    { get; set; } // BIGINT
		/// <summary>
		/// Count of exclusive lock calls
		/// </summary>
		[Column("EXCLUSIVE_LOCK_COUNT"),          Nullable] public long?   ExclusiveLockCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking exclusive lock calls
		/// </summary>
		[Column("EXCLUSIVE_WAIT_COUNT"),          Nullable] public long?   ExclusiveWaitCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on exclusive lock
		/// </summary>
		[Column("EXCLUSIVE_CAS_COLLISION_COUNT"), Nullable] public long?   ExclusiveCasCollisionCount { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on exclusive lock in percent
		/// </summary>
		[Column("EXCLUSIVE_COLLISION_RATE"),      Nullable] public double? ExclusiveCollisionRate     { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking exclusive lock calls (last)
		/// </summary>
		[Column("LAST_EXCLUSIVE_WAIT_TIME"),      Nullable] public long?   LastExclusiveWaitTime      { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (max)
		/// </summary>
		[Column("MAX_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?   MaxExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (min)
		/// </summary>
		[Column("MIN_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?   MinExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (total)
		/// </summary>
		[Column("SUM_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?   SumExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (avg)
		/// </summary>
		[Column("AVG_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?   AvgExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Count of intent lock calls
		/// </summary>
		[Column("INTENT_LOCK_COUNT"),             Nullable] public long?   IntentLockCount            { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking intent lock calls
		/// </summary>
		[Column("INTENT_WAIT_COUNT"),             Nullable] public long?   IntentWaitCount            { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on intent lock
		/// </summary>
		[Column("INTENT_CAS_COLLISION_COUNT"),    Nullable] public long?   IntentCasCollisionCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timed out intent lock calls
		/// </summary>
		[Column("INTENT_TIMEOUT_COUNT"),          Nullable] public long?   IntentTimeoutCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on intent lock in percent
		/// </summary>
		[Column("INTENT_COLLISION_RATE"),         Nullable] public double? IntentCollisionRate        { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking intent lock calls (last)
		/// </summary>
		[Column("LAST_INTENT_WAIT_TIME"),         Nullable] public long?   LastIntentWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (max)
		/// </summary>
		[Column("MAX_INTENT_WAIT_TIME"),          Nullable] public long?   MaxIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (min)
		/// </summary>
		[Column("MIN_INTENT_WAIT_TIME"),          Nullable] public long?   MinIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (total)
		/// </summary>
		[Column("SUM_INTENT_WAIT_TIME"),          Nullable] public long?   SumIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (avg)
		/// </summary>
		[Column("AVG_INTENT_WAIT_TIME"),          Nullable] public long?   AvgIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Count of shared lock calls
		/// </summary>
		[Column("SHARED_LOCK_COUNT"),             Nullable] public long?   SharedLockCount            { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking shared lock calls
		/// </summary>
		[Column("SHARED_WAIT_COUNT"),             Nullable] public long?   SharedWaitCount            { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on shared lock
		/// </summary>
		[Column("SHARED_CAS_COLLISION_COUNT"),    Nullable] public long?   SharedCasCollisionCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timed out shared lock calls
		/// </summary>
		[Column("SHARED_TIMEOUT_COUNT"),          Nullable] public long?   SharedTimeoutCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on shared lock in percent
		/// </summary>
		[Column("SHARED_COLLISION_RATE"),         Nullable] public double? SharedCollisionRate        { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking shared lock calls (last)
		/// </summary>
		[Column("LAST_SHARED_WAIT_TIME"),         Nullable] public long?   LastSharedWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (max)
		/// </summary>
		[Column("MAX_SHARED_WAIT_TIME"),          Nullable] public long?   MaxSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (min)
		/// </summary>
		[Column("MIN_SHARED_WAIT_TIME"),          Nullable] public long?   MinSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (total)
		/// </summary>
		[Column("SUM_SHARED_WAIT_TIME"),          Nullable] public long?   SumSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (avg)
		/// </summary>
		[Column("AVG_SHARED_WAIT_TIME"),          Nullable] public long?   AvgSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Global collision rate
		/// </summary>
		[Column("COLLISION_RATE"),                Nullable] public double? CollisionRate              { get; set; } // DOUBLE
		/// <summary>
		/// Count of read/write lock creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),                  Nullable] public long?   CreateCount                { get; set; } // BIGINT
		/// <summary>
		/// Count of read/write lock destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),                 Nullable] public long?   DestroyCount               { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                                Nullable] public string? COMPONENT                  { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Read/Write lock statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_READWRITELOCKS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MReadwritelocksReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                 Nullable] public string?   DatabaseName               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                    Nullable] public DateTime? ResetTime                  { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                Nullable] public string?   HOST                       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                Nullable] public int?      PORT                       { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                     Nullable] public int?      VolumeId                   { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),               Nullable] public string?   StatisticsName             { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),                 Nullable] public long?     StatisticsId               { get; set; } // BIGINT
		/// <summary>
		/// Context ID of the owner context (for exclusive/intent locks)
		/// </summary>
		[Column("OWNER_ID"),                      Nullable] public long?     OwnerId                    { get; set; } // BIGINT
		/// <summary>
		/// Count of exclusive lock calls
		/// </summary>
		[Column("EXCLUSIVE_LOCK_COUNT"),          Nullable] public long?     ExclusiveLockCount         { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking exclusive lock calls
		/// </summary>
		[Column("EXCLUSIVE_WAIT_COUNT"),          Nullable] public long?     ExclusiveWaitCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on exclusive lock
		/// </summary>
		[Column("EXCLUSIVE_CAS_COLLISION_COUNT"), Nullable] public long?     ExclusiveCasCollisionCount { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on exclusive lock in percent
		/// </summary>
		[Column("EXCLUSIVE_COLLISION_RATE"),      Nullable] public double?   ExclusiveCollisionRate     { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking exclusive lock calls (last)
		/// </summary>
		[Column("LAST_EXCLUSIVE_WAIT_TIME"),      Nullable] public long?     LastExclusiveWaitTime      { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (max)
		/// </summary>
		[Column("MAX_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?     MaxExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (min)
		/// </summary>
		[Column("MIN_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?     MinExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (total)
		/// </summary>
		[Column("SUM_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?     SumExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking exclusive lock calls (avg)
		/// </summary>
		[Column("AVG_EXCLUSIVE_WAIT_TIME"),       Nullable] public long?     AvgExclusiveWaitTime       { get; set; } // BIGINT
		/// <summary>
		/// Count of intent lock calls
		/// </summary>
		[Column("INTENT_LOCK_COUNT"),             Nullable] public long?     IntentLockCount            { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking intent lock calls
		/// </summary>
		[Column("INTENT_WAIT_COUNT"),             Nullable] public long?     IntentWaitCount            { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on intent lock
		/// </summary>
		[Column("INTENT_CAS_COLLISION_COUNT"),    Nullable] public long?     IntentCasCollisionCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timed out intent lock calls
		/// </summary>
		[Column("INTENT_TIMEOUT_COUNT"),          Nullable] public long?     IntentTimeoutCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on intent lock in percent
		/// </summary>
		[Column("INTENT_COLLISION_RATE"),         Nullable] public double?   IntentCollisionRate        { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking intent lock calls (last)
		/// </summary>
		[Column("LAST_INTENT_WAIT_TIME"),         Nullable] public long?     LastIntentWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (max)
		/// </summary>
		[Column("MAX_INTENT_WAIT_TIME"),          Nullable] public long?     MaxIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (min)
		/// </summary>
		[Column("MIN_INTENT_WAIT_TIME"),          Nullable] public long?     MinIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (total)
		/// </summary>
		[Column("SUM_INTENT_WAIT_TIME"),          Nullable] public long?     SumIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking intent lock calls (avg)
		/// </summary>
		[Column("AVG_INTENT_WAIT_TIME"),          Nullable] public long?     AvgIntentWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Count of shared lock calls
		/// </summary>
		[Column("SHARED_LOCK_COUNT"),             Nullable] public long?     SharedLockCount            { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking shared lock calls
		/// </summary>
		[Column("SHARED_WAIT_COUNT"),             Nullable] public long?     SharedWaitCount            { get; set; } // BIGINT
		/// <summary>
		/// Collision count on atomic operation on shared lock
		/// </summary>
		[Column("SHARED_CAS_COLLISION_COUNT"),    Nullable] public long?     SharedCasCollisionCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timed out shared lock calls
		/// </summary>
		[Column("SHARED_TIMEOUT_COUNT"),          Nullable] public long?     SharedTimeoutCount         { get; set; } // BIGINT
		/// <summary>
		/// Collision rate on shared lock in percent
		/// </summary>
		[Column("SHARED_COLLISION_RATE"),         Nullable] public double?   SharedCollisionRate        { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking shared lock calls (last)
		/// </summary>
		[Column("LAST_SHARED_WAIT_TIME"),         Nullable] public long?     LastSharedWaitTime         { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (max)
		/// </summary>
		[Column("MAX_SHARED_WAIT_TIME"),          Nullable] public long?     MaxSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (min)
		/// </summary>
		[Column("MIN_SHARED_WAIT_TIME"),          Nullable] public long?     MinSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (total)
		/// </summary>
		[Column("SUM_SHARED_WAIT_TIME"),          Nullable] public long?     SumSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking shared lock calls (avg)
		/// </summary>
		[Column("AVG_SHARED_WAIT_TIME"),          Nullable] public long?     AvgSharedWaitTime          { get; set; } // BIGINT
		/// <summary>
		/// Global collision rate
		/// </summary>
		[Column("COLLISION_RATE"),                Nullable] public double?   CollisionRate              { get; set; } // DOUBLE
		/// <summary>
		/// Count of read/write lock creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),                  Nullable] public long?     CreateCount                { get; set; } // BIGINT
		/// <summary>
		/// Count of read/write lock destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),                 Nullable] public long?     DestroyCount               { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                                Nullable] public string?   COMPONENT                  { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Progress of the most recent tenant recoveries
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_RECOVERY_PROGRESS", IsView=true)]
	public partial class SYS_DATABASES_MRecoveryProgress
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of the recovery
		/// </summary>
		[Column("BACKUP_ID"),        Nullable] public long?     BackupId        { get; set; } // BIGINT
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                   Nullable] public string?   HOST            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                   Nullable] public short?    PORT            { get; set; } // SMALLINT
		/// <summary>
		/// Name of the service
		/// </summary>
		[Column("SERVICE_NAME"),     Nullable] public string?   ServiceName     { get; set; } // VARCHAR(32)
		/// <summary>
		/// The local server time the recovery started
		/// </summary>
		[Column("SYS_START_TIME"),   Nullable] public DateTime? SysStartTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// The time the recovery started
		/// </summary>
		[Column("UTC_START_TIME"),   Nullable] public DateTime? UtcStartTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// The local server time the recovery was terminated
		/// </summary>
		[Column("SYS_END_TIME"),     Nullable] public DateTime? SysEndTime      { get; set; } // TIMESTAMP
		/// <summary>
		/// The time the recovery was terminated
		/// </summary>
		[Column("UTC_END_TIME"),     Nullable] public DateTime? UtcEndTime      { get; set; } // TIMESTAMP
		/// <summary>
		/// Current state of the recovery
		/// </summary>
		[Column("STATE_NAME"),       Nullable] public string?   StateName       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Current phase of the phase
		/// </summary>
		[Column("PHASE_NAME"),       Nullable] public string?   PhaseName       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Number of phases to pass
		/// </summary>
		[Column("MAX_PHASE"),        Nullable] public byte?     MaxPhase        { get; set; } // TINYINT
		/// <summary>
		/// Number of the current phase
		/// </summary>
		[Column("CURRENT_PHASE"),    Nullable] public byte?     CurrentPhase    { get; set; } // TINYINT
		/// <summary>
		/// Point in time reached in local server time
		/// </summary>
		[Column("SYS_REACHED_TIME"), Nullable] public DateTime? SysReachedTime  { get; set; } // TIMESTAMP
		/// <summary>
		/// Point in time reached
		/// </summary>
		[Column("UTC_REACHED_TIME"), Nullable] public DateTime? UtcReachedTime  { get; set; } // TIMESTAMP
		/// <summary>
		/// Message text
		/// </summary>
		[Column(),                   Nullable] public string?   MESSAGE         { get; set; } // VARCHAR(512)
		/// <summary>
		/// Value reached meanwhile
		/// </summary>
		[Column("MAX_PROGRESS"),     Nullable] public long?     MaxProgress     { get; set; } // BIGINT
		/// <summary>
		/// Value to reach
		/// </summary>
		[Column("CURRENT_PROGRESS"), Nullable] public long?     CurrentProgress { get; set; } // BIGINT
	}

	/// <summary>
	/// RS Memory Statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_RS_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_MRsMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),  Nullable] public string? DatabaseName  { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                 Nullable] public string? HOST          { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                 Nullable] public int?    PORT          { get; set; } // INTEGER
		/// <summary>
		/// Module name
		/// </summary>
		[Column(),                 Nullable] public string? CATEGORY      { get; set; } // VARCHAR(128)
		/// <summary>
		/// Allocated memory size of the module
		/// </summary>
		[Column("ALLOCATED_SIZE"), Nullable] public long?   AllocatedSize { get; set; } // BIGINT
		/// <summary>
		/// Used memory size of the module
		/// </summary>
		[Column("USED_SIZE"),      Nullable] public long?   UsedSize      { get; set; } // BIGINT
		/// <summary>
		/// Free memory size of the module
		/// </summary>
		[Column("FREE_SIZE"),      Nullable] public long?   FreeSize      { get; set; } // BIGINT
	}

	/// <summary>
	/// Current and historical savepoint statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SAVEPOINTS", IsView=true)]
	public partial class SYS_DATABASES_MSavepoint
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                            Nullable] public string?   DatabaseName                        { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                           Nullable] public string?   HOST                                { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                           Nullable] public int?      PORT                                { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                Nullable] public int?      VolumeId                            { get; set; } // INTEGER
		/// <summary>
		/// Savepoint start time
		/// </summary>
		[Column("START_TIME"),                               Nullable] public DateTime? StartTime                           { get; set; } // TIMESTAMP
		/// <summary>
		/// Reason why the savepoint was executed
		/// </summary>
		[Column(),                                           Nullable] public string?   INITIATION                          { get; set; } // VARCHAR(24)
		/// <summary>
		/// Purpose for that the savepoint was executed
		/// </summary>
		[Column(),                                           Nullable] public string?   PURPOSE                             { get; set; } // VARCHAR(24)
		/// <summary>
		/// Savepoint state
		/// </summary>
		[Column(),                                           Nullable] public string?   STATE                               { get; set; } // VARCHAR(20)
		/// <summary>
		/// Savepoint version
		/// </summary>
		[Column(),                                           Nullable] public int?      VERSION                             { get; set; } // INTEGER
		/// <summary>
		/// Configured savepoint frequency
		/// </summary>
		[Column("REQUESTED_FREQUENCY"),                      Nullable] public long?     RequestedFrequency                  { get; set; } // BIGINT
		/// <summary>
		/// Time between previous and this savepoint
		/// </summary>
		[Column("TIME_SINCE_PREVIOUS"),                      Nullable] public long?     TimeSincePrevious                   { get; set; } // BIGINT
		/// <summary>
		/// Total time spent for creating savepoint
		/// </summary>
		[Column(),                                           Nullable] public long?     DURATION                            { get; set; } // BIGINT
		/// <summary>
		/// Count of how often pages had been flushed in non-critical phase before entering critical phase.
		/// </summary>
		[Column("PREPARE_FLUSH_RETRY_COUNT"),                Nullable] public long?     PrepareFlushRetryCount              { get; set; } // BIGINT
		/// <summary>
		/// Last blocking phase start time clock)
		/// </summary>
		[Column("BLOCKING_PHASE_START_TIME"),                Nullable] public DateTime? BlockingPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Blocking phase duration
		/// </summary>
		[Column("BLOCKING_PHASE_DURATION"),                  Nullable] public long?     BlockingPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Last critical phase start time)
		/// </summary>
		[Column("CRITICAL_PHASE_START_TIME"),                Nullable] public DateTime? CriticalPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Time spent in critical phase (updates are blocked during this)
		/// </summary>
		[Column("CRITICAL_PHASE_DURATION"),                  Nullable] public long?     CriticalPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Wait time for critical phase
		/// </summary>
		[Column("CRITICAL_PHASE_WAIT_TIME"),                 Nullable] public long?     CriticalPhaseWaitTime               { get; set; } // BIGINT
		/// <summary>
		/// Total amount of bytes written for this savepoint
		/// </summary>
		[Column("TOTAL_SIZE"),                               Nullable] public long?     TotalSize                           { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed pages
		/// </summary>
		[Column("FLUSHED_PAGES"),                            Nullable] public long?     FlushedPages                        { get; set; } // BIGINT
		/// <summary>
		/// Count of pages flushed in critical phase
		/// </summary>
		[Column("FLUSHED_PAGES_IN_CRITICAL_PHASE"),          Nullable] public long?     FlushedPagesInCriticalPhase         { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed row store pages
		/// </summary>
		[Column("FLUSHED_ROWSTORE_PAGES"),                   Nullable] public long?     FlushedRowstorePages                { get; set; } // BIGINT
		/// <summary>
		/// Count of row store pages flushed in critical phase
		/// </summary>
		[Column("FLUSHED_ROWSTORE_PAGES_IN_CRITICAL_PHASE"), Nullable] public long?     FlushedRowstorePagesInCriticalPhase { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed pages
		/// </summary>
		[Column("FLUSHED_SIZE"),                             Nullable] public long?     FlushedSize                         { get; set; } // BIGINT
		/// <summary>
		/// Size of pages flushed in critical phase
		/// </summary>
		[Column("FLUSHED_SIZE_IN_CRITICAL_PHASE"),           Nullable] public long?     FlushedSizeInCriticalPhase          { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed row store pages
		/// </summary>
		[Column("FLUSHED_ROWSTORE_SIZE"),                    Nullable] public long?     FlushedRowstoreSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of row store pages flushed in critical phase
		/// </summary>
		[Column("FLUSHED_ROWSTORE_SIZE_IN_CRITICAL_PHASE"),  Nullable] public long?     FlushedRowstoreSizeInCriticalPhase  { get; set; } // BIGINT
		/// <summary>
		/// Total size of rollback transaction table at this savepoint
		/// </summary>
		[Column("RTT_SIZE"),                                 Nullable] public long?     RttSize                             { get; set; } // BIGINT
	}

	/// <summary>
	/// Savepoint statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SAVEPOINT_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MSavepointStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                                 Nullable] public string?   DatabaseName                            { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                                Nullable] public string?   HOST                                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                                Nullable] public int?      PORT                                    { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                     Nullable] public int?      VolumeId                                { get; set; } // INTEGER
		/// <summary>
		/// Count of executed savepoints
		/// </summary>
		[Column(),                                                Nullable] public long?     SAVEPOINTS                              { get; set; } // BIGINT
		/// <summary>
		/// Last savepoint start time clock)
		/// </summary>
		[Column("START_TIME"),                                    Nullable] public DateTime? StartTime                               { get; set; } // TIMESTAMP
		/// <summary>
		/// Last reason why the savepoint is executed
		/// </summary>
		[Column(),                                                Nullable] public string?   INITIATION                              { get; set; } // VARCHAR(24)
		/// <summary>
		/// Last purpose for that the savepoint is executed
		/// </summary>
		[Column(),                                                Nullable] public string?   PURPOSE                                 { get; set; } // VARCHAR(24)
		/// <summary>
		/// Last savepoint state
		/// </summary>
		[Column(),                                                Nullable] public string?   STATE                                   { get; set; } // VARCHAR(20)
		/// <summary>
		/// Last savepoint version
		/// </summary>
		[Column(),                                                Nullable] public int?      VERSION                                 { get; set; } // INTEGER
		/// <summary>
		/// Currently active configured savepoint frequency
		/// </summary>
		[Column("REQUESTED_FREQUENCY"),                           Nullable] public long?     RequestedFrequency                      { get; set; } // BIGINT
		/// <summary>
		/// Actual savepoint frequency (time between last two savepoints) (last)
		/// </summary>
		[Column("LAST_FREQUENCY"),                                Nullable] public long?     LastFrequency                           { get; set; } // BIGINT
		/// <summary>
		/// Actual savepoint frequency (time between last two savepoints) (avg)
		/// </summary>
		[Column("AVG_FREQUENCY"),                                 Nullable] public long?     AvgFrequency                            { get; set; } // BIGINT
		/// <summary>
		/// Total time spent creating savepoint (last)
		/// </summary>
		[Column("LAST_DURATION"),                                 Nullable] public long?     LastDuration                            { get; set; } // BIGINT
		/// <summary>
		/// Total time spent creating savepoint (avg)
		/// </summary>
		[Column("AVG_DURATION"),                                  Nullable] public long?     AvgDuration                             { get; set; } // BIGINT
		/// <summary>
		/// Last blocking phase start time clock
		/// </summary>
		[Column("LAST_BLOCKING_PHASE_START_TIME"),                Nullable] public DateTime? LastBlockingPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Last blocking phase duration
		/// </summary>
		[Column("LAST_BLOCKING_PHASE_DURATION"),                  Nullable] public long?     LastBlockingPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Last critical phase start time clock
		/// </summary>
		[Column("LAST_CRITICAL_PHASE_START_TIME"),                Nullable] public DateTime? LastCriticalPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Time spent in critical phase (updates are blocked during this phase) (last)
		/// </summary>
		[Column("LAST_CRITICAL_PHASE_DURATION"),                  Nullable] public long?     LastCriticalPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in critical phase (updates are blocked during this phase) (avg)
		/// </summary>
		[Column("AVG_CRITICAL_PHASE_DURATION"),                   Nullable] public long?     AvgCriticalPhaseDuration                { get; set; } // BIGINT
		/// <summary>
		/// Total amount of bytes written for a savepoint (last)
		/// </summary>
		[Column("LAST_TOTAL_SIZE"),                               Nullable] public long?     LastTotalSize                           { get; set; } // BIGINT
		/// <summary>
		/// Total amount of bytes written for a savepoint (avg)
		/// </summary>
		[Column("AVG_TOTAL_SIZE"),                                Nullable] public long?     AvgTotalSize                            { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_PAGES"),                            Nullable] public long?     LastFlushedPages                        { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_PAGES"),                             Nullable] public double?   AvgFlushedPages                         { get; set; } // DOUBLE
		/// <summary>
		/// Count of pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_PAGES_IN_CRITICAL_PHASE"),          Nullable] public long?     LastFlushedPagesInCriticalPhase         { get; set; } // BIGINT
		/// <summary>
		/// Count of pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_PAGES_IN_CRITICAL_PHASE"),           Nullable] public double?   AvgFlushedPagesInCriticalPhase          { get; set; } // DOUBLE
		/// <summary>
		/// Count of asynchronously flushed row store pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_PAGES"),                   Nullable] public long?     LastFlushedRowstorePages                { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed row store pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_PAGES"),                    Nullable] public double?   AvgFlushedRowstorePages                 { get; set; } // DOUBLE
		/// <summary>
		/// Count of row store pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_PAGES_IN_CRITICAL_PHASE"), Nullable] public long?     LastFlushedRowstorePagesInCriticalPhase { get; set; } // BIGINT
		/// <summary>
		/// Count of row store pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_PAGES_IN_CRITICAL_PHASE"),  Nullable] public double?   AvgFlushedRowstorePagesInCriticalPhase  { get; set; } // DOUBLE
		/// <summary>
		/// Size of asynchronously flushed pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_SIZE"),                             Nullable] public long?     LastFlushedSize                         { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_SIZE"),                              Nullable] public long?     AvgFlushedSize                          { get; set; } // BIGINT
		/// <summary>
		/// Size of pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_SIZE_IN_CRITICAL_PHASE"),           Nullable] public long?     LastFlushedSizeInCriticalPhase          { get; set; } // BIGINT
		/// <summary>
		/// Size of pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_SIZE_IN_CRITICAL_PHASE"),            Nullable] public long?     AvgFlushedSizeInCriticalPhase           { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed row store pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_SIZE"),                    Nullable] public long?     LastFlushedRowstoreSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed row store pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_SIZE"),                     Nullable] public long?     AvgFlushedRowstoreSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of row store pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_SIZE_IN_CRITICAL_PHASE"),  Nullable] public long?     LastFlushedRowstoreSizeInCriticalPhase  { get; set; } // BIGINT
		/// <summary>
		/// Size of row store pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_SIZE_IN_CRITICAL_PHASE"),   Nullable] public long?     AvgFlushedRowstoreSizeInCriticalPhase   { get; set; } // BIGINT
		/// <summary>
		/// Total size of rollback transaction table at last savepoint (may be less than sum of components if there are duplicate TIDs)
		/// </summary>
		[Column("LAST_RTT_SIZE"),                                 Nullable] public long?     LastRttSize                             { get; set; } // BIGINT
	}

	/// <summary>
	/// Savepoint statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SAVEPOINT_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MSavepointStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                                 Nullable] public string?   DatabaseName                            { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                                    Nullable] public DateTime? ResetTime                               { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                                Nullable] public string?   HOST                                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                                Nullable] public int?      PORT                                    { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                                     Nullable] public int?      VolumeId                                { get; set; } // INTEGER
		/// <summary>
		/// Count of executed savepoints
		/// </summary>
		[Column(),                                                Nullable] public long?     SAVEPOINTS                              { get; set; } // BIGINT
		/// <summary>
		/// Last savepoint start time clock)
		/// </summary>
		[Column("START_TIME"),                                    Nullable] public DateTime? StartTime                               { get; set; } // TIMESTAMP
		/// <summary>
		/// Last reason why the savepoint is executed
		/// </summary>
		[Column(),                                                Nullable] public string?   INITIATION                              { get; set; } // VARCHAR(24)
		/// <summary>
		/// Last purpose for that the savepoint is executed
		/// </summary>
		[Column(),                                                Nullable] public string?   PURPOSE                                 { get; set; } // VARCHAR(24)
		/// <summary>
		/// Last savepoint state
		/// </summary>
		[Column(),                                                Nullable] public string?   STATE                                   { get; set; } // VARCHAR(20)
		/// <summary>
		/// Last savepoint version
		/// </summary>
		[Column(),                                                Nullable] public int?      VERSION                                 { get; set; } // INTEGER
		/// <summary>
		/// Currently active configured savepoint frequency
		/// </summary>
		[Column("REQUESTED_FREQUENCY"),                           Nullable] public long?     RequestedFrequency                      { get; set; } // BIGINT
		/// <summary>
		/// Actual savepoint frequency (time between last two savepoints) (last)
		/// </summary>
		[Column("LAST_FREQUENCY"),                                Nullable] public long?     LastFrequency                           { get; set; } // BIGINT
		/// <summary>
		/// Actual savepoint frequency (time between last two savepoints) (avg)
		/// </summary>
		[Column("AVG_FREQUENCY"),                                 Nullable] public long?     AvgFrequency                            { get; set; } // BIGINT
		/// <summary>
		/// Total time spent creating savepoint (last)
		/// </summary>
		[Column("LAST_DURATION"),                                 Nullable] public long?     LastDuration                            { get; set; } // BIGINT
		/// <summary>
		/// Total time spent creating savepoint (avg)
		/// </summary>
		[Column("AVG_DURATION"),                                  Nullable] public long?     AvgDuration                             { get; set; } // BIGINT
		/// <summary>
		/// Last blocking phase start time clock
		/// </summary>
		[Column("LAST_BLOCKING_PHASE_START_TIME"),                Nullable] public DateTime? LastBlockingPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Last blocking phase duration
		/// </summary>
		[Column("LAST_BLOCKING_PHASE_DURATION"),                  Nullable] public long?     LastBlockingPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Last critical phase start time clock
		/// </summary>
		[Column("LAST_CRITICAL_PHASE_START_TIME"),                Nullable] public DateTime? LastCriticalPhaseStartTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Time spent in critical phase (updates are blocked during this phase) (last)
		/// </summary>
		[Column("LAST_CRITICAL_PHASE_DURATION"),                  Nullable] public long?     LastCriticalPhaseDuration               { get; set; } // BIGINT
		/// <summary>
		/// Time spent in critical phase (updates are blocked during this phase) (avg)
		/// </summary>
		[Column("AVG_CRITICAL_PHASE_DURATION"),                   Nullable] public long?     AvgCriticalPhaseDuration                { get; set; } // BIGINT
		/// <summary>
		/// Total amount of bytes written for a savepoint (last)
		/// </summary>
		[Column("LAST_TOTAL_SIZE"),                               Nullable] public long?     LastTotalSize                           { get; set; } // BIGINT
		/// <summary>
		/// Total amount of bytes written for a savepoint (avg)
		/// </summary>
		[Column("AVG_TOTAL_SIZE"),                                Nullable] public long?     AvgTotalSize                            { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_PAGES"),                            Nullable] public long?     LastFlushedPages                        { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_PAGES"),                             Nullable] public double?   AvgFlushedPages                         { get; set; } // DOUBLE
		/// <summary>
		/// Count of pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_PAGES_IN_CRITICAL_PHASE"),          Nullable] public long?     LastFlushedPagesInCriticalPhase         { get; set; } // BIGINT
		/// <summary>
		/// Count of pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_PAGES_IN_CRITICAL_PHASE"),           Nullable] public double?   AvgFlushedPagesInCriticalPhase          { get; set; } // DOUBLE
		/// <summary>
		/// Count of asynchronously flushed row store pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_PAGES"),                   Nullable] public long?     LastFlushedRowstorePages                { get; set; } // BIGINT
		/// <summary>
		/// Count of asynchronously flushed row store pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_PAGES"),                    Nullable] public double?   AvgFlushedRowstorePages                 { get; set; } // DOUBLE
		/// <summary>
		/// Count of row store pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_PAGES_IN_CRITICAL_PHASE"), Nullable] public long?     LastFlushedRowstorePagesInCriticalPhase { get; set; } // BIGINT
		/// <summary>
		/// Count of row store pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_PAGES_IN_CRITICAL_PHASE"),  Nullable] public double?   AvgFlushedRowstorePagesInCriticalPhase  { get; set; } // DOUBLE
		/// <summary>
		/// Size of asynchronously flushed pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_SIZE"),                             Nullable] public long?     LastFlushedSize                         { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_SIZE"),                              Nullable] public long?     AvgFlushedSize                          { get; set; } // BIGINT
		/// <summary>
		/// Size of pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_SIZE_IN_CRITICAL_PHASE"),           Nullable] public long?     LastFlushedSizeInCriticalPhase          { get; set; } // BIGINT
		/// <summary>
		/// Size of pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_SIZE_IN_CRITICAL_PHASE"),            Nullable] public long?     AvgFlushedSizeInCriticalPhase           { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed row store pages (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_SIZE"),                    Nullable] public long?     LastFlushedRowstoreSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of asynchronously flushed row store pages (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_SIZE"),                     Nullable] public long?     AvgFlushedRowstoreSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of row store pages flushed in critical phase (last)
		/// </summary>
		[Column("LAST_FLUSHED_ROWSTORE_SIZE_IN_CRITICAL_PHASE"),  Nullable] public long?     LastFlushedRowstoreSizeInCriticalPhase  { get; set; } // BIGINT
		/// <summary>
		/// Size of row store pages flushed in critical phase (avg)
		/// </summary>
		[Column("AVG_FLUSHED_ROWSTORE_SIZE_IN_CRITICAL_PHASE"),   Nullable] public long?     AvgFlushedRowstoreSizeInCriticalPhase   { get; set; } // BIGINT
		/// <summary>
		/// Total size of rollback transaction table at last savepoint (may be less than sum of components if there are duplicate TIDs)
		/// </summary>
		[Column("LAST_RTT_SIZE"),                                 Nullable] public long?     LastRttSize                             { get; set; } // BIGINT
	}

	/// <summary>
	/// Deprecated: please check ENCRYPTION_ROOT_KEYS
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SECURESTORE", IsView=true)]
	public partial class SYS_DATABASES_MSecurestore
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Type of encryption key
		/// </summary>
		[Column("KEY_TYPE"),      Nullable] public string? KeyType      { get; set; } // VARCHAR(12)
		/// <summary>
		/// TRUE if key is consistent between persistence and SSFS file, FALSE otherwise
		/// </summary>
		[Column("IS_CONSISTENT"), Nullable] public string? IsConsistent { get; set; } // VARCHAR(5)
		/// <summary>
		/// Number of consistency resets
		/// </summary>
		[Column("RESET_COUNT"),   Nullable] public int?    ResetCount   { get; set; } // INTEGER
		/// <summary>
		/// Version of the key
		/// </summary>
		[Column(),                Nullable] public int?    VERSION      { get; set; } // INTEGER
		/// <summary>
		/// TRUE if the key version is the current version in the SSFS
		/// </summary>
		[Column("IS_CURRENT"),    Nullable] public string? IsCurrent    { get; set; } // VARCHAR(5)
	}

	/// <summary>
	/// Semaphore statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SEMAPHORES", IsView=true)]
	public partial class SYS_DATABASES_MSemaphore
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string? DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string? HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?    PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?    VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),    Nullable] public string? StatisticsName   { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),      Nullable] public long?   StatisticsId     { get; set; } // BIGINT
		/// <summary>
		/// Count of wait calls
		/// </summary>
		[Column("WAIT_COUNT"),         Nullable] public long?   WaitCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking wait calls
		/// </summary>
		[Column("BLOCKING_COUNT"),     Nullable] public long?   BlockingCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timeouts
		/// </summary>
		[Column("TIMEOUT_COUNT"),      Nullable] public long?   TimeoutCount     { get; set; } // BIGINT
		/// <summary>
		/// Wait rate
		/// </summary>
		[Column("WAIT_RATE"),          Nullable] public double? WaitRate         { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking wait calls (last)
		/// </summary>
		[Column("LAST_BLOCKING_TIME"), Nullable] public long?   LastBlockingTime { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (max)
		/// </summary>
		[Column("MAX_BLOCKING_TIME"),  Nullable] public long?   MaxBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (min)
		/// </summary>
		[Column("MIN_BLOCKING_TIME"),  Nullable] public long?   MinBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (total)
		/// </summary>
		[Column("SUM_BLOCKING_TIME"),  Nullable] public long?   SumBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (avg)
		/// </summary>
		[Column("AVG_BLOCKING_TIME"),  Nullable] public long?   AvgBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),       Nullable] public long?   CreateCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),      Nullable] public long?   DestroyCount     { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                     Nullable] public string? COMPONENT        { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Semaphore statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SEMAPHORES_RESET", IsView=true)]
	public partial class SYS_DATABASES_MSemaphoresReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),      Nullable] public string?   DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),         Nullable] public DateTime? ResetTime        { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                     Nullable] public string?   HOST             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                     Nullable] public int?      PORT             { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),          Nullable] public int?      VolumeId         { get; set; } // INTEGER
		/// <summary>
		/// Statistics object name
		/// </summary>
		[Column("STATISTICS_NAME"),    Nullable] public string?   StatisticsName   { get; set; } // VARCHAR(128)
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),      Nullable] public long?     StatisticsId     { get; set; } // BIGINT
		/// <summary>
		/// Count of wait calls
		/// </summary>
		[Column("WAIT_COUNT"),         Nullable] public long?     WaitCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of blocking wait calls
		/// </summary>
		[Column("BLOCKING_COUNT"),     Nullable] public long?     BlockingCount    { get; set; } // BIGINT
		/// <summary>
		/// Count of timeouts
		/// </summary>
		[Column("TIMEOUT_COUNT"),      Nullable] public long?     TimeoutCount     { get; set; } // BIGINT
		/// <summary>
		/// Wait rate
		/// </summary>
		[Column("WAIT_RATE"),          Nullable] public double?   WaitRate         { get; set; } // DOUBLE
		/// <summary>
		/// Time of blocking wait calls (last)
		/// </summary>
		[Column("LAST_BLOCKING_TIME"), Nullable] public long?     LastBlockingTime { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (max)
		/// </summary>
		[Column("MAX_BLOCKING_TIME"),  Nullable] public long?     MaxBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (min)
		/// </summary>
		[Column("MIN_BLOCKING_TIME"),  Nullable] public long?     MinBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (total)
		/// </summary>
		[Column("SUM_BLOCKING_TIME"),  Nullable] public long?     SumBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Time of blocking wait calls (avg)
		/// </summary>
		[Column("AVG_BLOCKING_TIME"),  Nullable] public long?     AvgBlockingTime  { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore creation (for shared statistics only)
		/// </summary>
		[Column("CREATE_COUNT"),       Nullable] public long?     CreateCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of semaphore destruction (for shared statistics only)
		/// </summary>
		[Column("DESTROY_COUNT"),      Nullable] public long?     DestroyCount     { get; set; } // BIGINT
		/// <summary>
		/// Component
		/// </summary>
		[Column(),                     Nullable] public string?   COMPONENT        { get; set; } // VARCHAR(32)
	}

	/// <summary>
	/// Status of all services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICES", IsView=true)]
	public partial class SYS_DATABASES_MService
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string? DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                   Nullable] public string? HOST            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                   Nullable] public int?    PORT            { get; set; } // INTEGER
		/// <summary>
		/// Service name. See M_SERVICE_TYPES for all known service names
		/// </summary>
		[Column("SERVICE_NAME"),     Nullable] public string? ServiceName     { get; set; } // VARCHAR(32)
		/// <summary>
		/// Process ID
		/// </summary>
		[Column("PROCESS_ID"),       Nullable] public int?    ProcessId       { get; set; } // INTEGER
		/// <summary>
		/// Only for display. Use COORDINATOR_TYPE to test service role
		/// </summary>
		[Column(),                   Nullable] public string? DETAIL          { get; set; } // VARCHAR(128)
		/// <summary>
		/// NO, YES, UNKNOWN, STARTING, STOPPING
		/// </summary>
		[Column("ACTIVE_STATUS"),    Nullable] public string? ActiveStatus    { get; set; } // VARCHAR(16)
		/// <summary>
		/// SQL port
		/// </summary>
		[Column("SQL_PORT"),         Nullable] public int?    SqlPort         { get; set; } // INTEGER
		/// <summary>
		/// Coordinator type in distributed landscape: MASTER, SLAVE, STANDBY, NONE
		/// </summary>
		[Column("COORDINATOR_TYPE"), Nullable] public string? CoordinatorType { get; set; } // VARCHAR(16)
	}

	/// <summary>
	/// Service-specific memory usage by logical component
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_COMPONENT_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_MServiceComponentMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),       Nullable] public string? DatabaseName   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host where the service is running
		/// </summary>
		[Column(),                      Nullable] public string? HOST           { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port where the service is running
		/// </summary>
		[Column(),                      Nullable] public int?    PORT           { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// The logical component for which memory usage is reported
		/// </summary>
		[Column(),                   NotNull    ] public string  COMPONENT      { get; set; } // VARCHAR(64)
		#nullable enable
		/// <summary>
		/// Amount of memory which is currently actually used for the logical component
		/// </summary>
		[Column("USED_MEMORY_SIZE"),    Nullable] public long?   UsedMemorySize { get; set; } // BIGINT
	}

	/// <summary>
	/// Detailed information on memory utilization by services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_MServiceMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string? DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                               Nullable] public string? HOST                      { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                               Nullable] public int?    PORT                      { get; set; } // INTEGER
		/// <summary>
		/// Service name
		/// </summary>
		[Column("SERVICE_NAME"),                 Nullable] public string? ServiceName               { get; set; } // VARCHAR(32)
		/// <summary>
		/// Process ID
		/// </summary>
		[Column("PROCESS_ID"),                   Nullable] public int?    ProcessId                 { get; set; } // INTEGER
		/// <summary>
		/// Virtual memory size (operating system perspective)
		/// </summary>
		[Column("LOGICAL_MEMORY_SIZE"),          Nullable] public long?   LogicalMemorySize         { get; set; } // BIGINT
		/// <summary>
		/// Physical/resident memory size (operating system perspective)
		/// </summary>
		[Column("PHYSICAL_MEMORY_SIZE"),         Nullable] public long?   PhysicalMemorySize        { get; set; } // BIGINT
		/// <summary>
		/// Code size, including shared libraries
		/// </summary>
		[Column("CODE_SIZE"),                    Nullable] public long?   CodeSize                  { get; set; } // BIGINT
		/// <summary>
		/// Stack size
		/// </summary>
		[Column("STACK_SIZE"),                   Nullable] public long?   StackSize                 { get; set; } // BIGINT
		/// <summary>
		/// Heap part of the memory pool
		/// </summary>
		[Column("HEAP_MEMORY_ALLOCATED_SIZE"),   Nullable] public long?   HeapMemoryAllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool heap memory that is currently actually in use
		/// </summary>
		[Column("HEAP_MEMORY_USED_SIZE"),        Nullable] public long?   HeapMemoryUsedSize        { get; set; } // BIGINT
		/// <summary>
		/// Shared memory part of the memory pool
		/// </summary>
		[Column("SHARED_MEMORY_ALLOCATED_SIZE"), Nullable] public long?   SharedMemoryAllocatedSize { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool shared memory that is currently actually in use
		/// </summary>
		[Column("SHARED_MEMORY_USED_SIZE"),      Nullable] public long?   SharedMemoryUsedSize      { get; set; } // BIGINT
		/// <summary>
		/// Part of the memory pool that can potentially (=if unpinned) be freed on memory shortage
		/// </summary>
		[Column("COMPACTORS_ALLOCATED_SIZE"),    Nullable] public long?   CompactorsAllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Memory which can actually be freed on memory shortage
		/// </summary>
		[Column("COMPACTORS_FREEABLE_SIZE"),     Nullable] public long?   CompactorsFreeableSize    { get; set; } // BIGINT
		/// <summary>
		/// Maximum memory pool size (configurable value)
		/// </summary>
		[Column("ALLOCATION_LIMIT"),             Nullable] public long?   AllocationLimit           { get; set; } // BIGINT
		/// <summary>
		/// Effective maximum memory pool size, considering pool sizes of other processes (computed value)
		/// </summary>
		[Column("EFFECTIVE_ALLOCATION_LIMIT"),   Nullable] public long?   EffectiveAllocationLimit  { get; set; } // BIGINT
		/// <summary>
		/// Amount of memory from the memory pool that is currently actually in use
		/// </summary>
		[Column("TOTAL_MEMORY_USED_SIZE"),       Nullable] public long?   TotalMemoryUsedSize       { get; set; } // BIGINT
	}

	/// <summary>
	/// Service network I/O statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_NETWORK_IO", IsView=true)]
	public partial class SYS_DATABASES_MServiceNetworkIo
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string? DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name of the sending service
		/// </summary>
		[Column("SENDER_HOST"),      Nullable] public string? SenderHost      { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port that the sending service listens on
		/// </summary>
		[Column("SENDER_PORT"),      Nullable] public int?    SenderPort      { get; set; } // INTEGER
		/// <summary>
		/// Host name of the receiving service
		/// </summary>
		[Column("RECEIVER_HOST"),    Nullable] public string? ReceiverHost    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port that the receiving service listens on
		/// </summary>
		[Column("RECEIVER_PORT"),    Nullable] public int?    ReceiverPort    { get; set; } // INTEGER
		/// <summary>
		/// Number of bytes sent
		/// </summary>
		[Column("SEND_SIZE"),        Nullable] public long?   SendSize        { get; set; } // BIGINT
		/// <summary>
		/// Number of bytes received
		/// </summary>
		[Column("RECEIVE_SIZE"),     Nullable] public long?   ReceiveSize     { get; set; } // BIGINT
		/// <summary>
		/// Time spent sending
		/// </summary>
		[Column("SEND_DURATION"),    Nullable] public long?   SendDuration    { get; set; } // BIGINT
		/// <summary>
		/// Time spent receiving
		/// </summary>
		[Column("RECEIVE_DURATION"), Nullable] public long?   ReceiveDuration { get; set; } // BIGINT
		/// <summary>
		/// Number of requests handled
		/// </summary>
		[Column("REQUEST_COUNT"),    Nullable] public long?   RequestCount    { get; set; } // BIGINT
	}

	/// <summary>
	/// Service network I/O statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_NETWORK_IO_RESET", IsView=true)]
	public partial class SYS_DATABASES_MServiceNetworkIoReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),       Nullable] public DateTime? ResetTime       { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name of the sending service
		/// </summary>
		[Column("SENDER_HOST"),      Nullable] public string?   SenderHost      { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port that the sending service listens on
		/// </summary>
		[Column("SENDER_PORT"),      Nullable] public int?      SenderPort      { get; set; } // INTEGER
		/// <summary>
		/// Host name of the receiving service
		/// </summary>
		[Column("RECEIVER_HOST"),    Nullable] public string?   ReceiverHost    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Port that the receiving service listens on
		/// </summary>
		[Column("RECEIVER_PORT"),    Nullable] public int?      ReceiverPort    { get; set; } // INTEGER
		/// <summary>
		/// Number of bytes sent
		/// </summary>
		[Column("SEND_SIZE"),        Nullable] public long?     SendSize        { get; set; } // BIGINT
		/// <summary>
		/// Number of bytes received
		/// </summary>
		[Column("RECEIVE_SIZE"),     Nullable] public long?     ReceiveSize     { get; set; } // BIGINT
		/// <summary>
		/// Time spent sending
		/// </summary>
		[Column("SEND_DURATION"),    Nullable] public long?     SendDuration    { get; set; } // BIGINT
		/// <summary>
		/// Time spent receiving
		/// </summary>
		[Column("RECEIVE_DURATION"), Nullable] public long?     ReceiveDuration { get; set; } // BIGINT
		/// <summary>
		/// Number of requests handled
		/// </summary>
		[Column("REQUEST_COUNT"),    Nullable] public long?     RequestCount    { get; set; } // BIGINT
	}

	/// <summary>
	/// Information about replicated services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_REPLICATION", IsView=true)]
	public partial class SYS_DATABASES_MServiceReplication
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                         Nullable] public string?   DatabaseName                     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                        Nullable] public string?   HOST                             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                        Nullable] public int?      PORT                             { get; set; } // INTEGER
		/// <summary>
		/// Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                             Nullable] public int?      VolumeId                         { get; set; } // INTEGER
		/// <summary>
		/// Generated site ID
		/// </summary>
		[Column("SITE_ID"),                               Nullable] public int?      SiteId                           { get; set; } // INTEGER
		/// <summary>
		/// Logical site name
		/// </summary>
		[Column("SITE_NAME"),                             Nullable] public string?   SiteName                         { get; set; } // VARCHAR(256)
		/// <summary>
		/// Secondary host name
		/// </summary>
		[Column("SECONDARY_HOST"),                        Nullable] public string?   SecondaryHost                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Secondary port
		/// </summary>
		[Column("SECONDARY_PORT"),                        Nullable] public int?      SecondaryPort                    { get; set; } // INTEGER
		/// <summary>
		/// Generated ID of secondary site
		/// </summary>
		[Column("SECONDARY_SITE_ID"),                     Nullable] public int?      SecondarySiteId                  { get; set; } // INTEGER
		/// <summary>
		/// Secondary logical site name
		/// </summary>
		[Column("SECONDARY_SITE_NAME"),                   Nullable] public string?   SecondarySiteName                { get; set; } // VARCHAR(256)
		/// <summary>
		/// Secondary active status
		/// </summary>
		[Column("SECONDARY_ACTIVE_STATUS"),               Nullable] public string?   SecondaryActiveStatus            { get; set; } // VARCHAR(16)
		/// <summary>
		/// Time the connection was established from the secondary
		/// </summary>
		[Column("SECONDARY_CONNECT_TIME"),                Nullable] public DateTime? SecondaryConnectTime             { get; set; } // TIMESTAMP
		/// <summary>
		/// Secondary reconnect count
		/// </summary>
		[Column("SECONDARY_RECONNECT_COUNT"),             Nullable] public int?      SecondaryReconnectCount          { get; set; } // INTEGER
		/// <summary>
		/// Secondary failover count
		/// </summary>
		[Column("SECONDARY_FAILOVER_COUNT"),              Nullable] public int?      SecondaryFailoverCount           { get; set; } // INTEGER
		/// <summary>
		/// Indicates if secondary is fully recoverable.
		/// </summary>
		[Column("SECONDARY_FULLY_RECOVERABLE"),           Nullable] public string?   SecondaryFullyRecoverable        { get; set; } // VARCHAR(5)
		/// <summary>
		/// Replication mode
		/// </summary>
		[Column("REPLICATION_MODE"),                      Nullable] public string?   ReplicationMode                  { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status
		/// </summary>
		[Column("REPLICATION_STATUS"),                    Nullable] public string?   ReplicationStatus                { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status details
		/// </summary>
		[Column("REPLICATION_STATUS_DETAILS"),            Nullable] public string?   ReplicationStatusDetails         { get; set; } // VARCHAR(1024)
		/// <summary>
		/// Full sync status
		/// </summary>
		[Column("FULL_SYNC"),                             Nullable] public string?   FullSync                         { get; set; } // VARCHAR(16)
		/// <summary>
		/// Current log position
		/// </summary>
		[Column("LAST_LOG_POSITION"),                     Nullable] public long?     LastLogPosition                  { get; set; } // BIGINT
		/// <summary>
		/// Current log position timestamp
		/// </summary>
		[Column("LAST_LOG_POSITION_TIME"),                Nullable] public DateTime? LastLogPositionTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Current savepoint version
		/// </summary>
		[Column("LAST_SAVEPOINT_VERSION"),                Nullable] public int?      LastSavepointVersion             { get; set; } // INTEGER
		/// <summary>
		/// Current savepoint log position
		/// </summary>
		[Column("LAST_SAVEPOINT_LOG_POSITION"),           Nullable] public long?     LastSavepointLogPosition         { get; set; } // BIGINT
		/// <summary>
		/// Current savepoint timestamp
		/// </summary>
		[Column("LAST_SAVEPOINT_START_TIME"),             Nullable] public DateTime? LastSavepointStartTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log position
		/// </summary>
		[Column("SHIPPED_LOG_POSITION"),                  Nullable] public long?     ShippedLogPosition               { get; set; } // BIGINT
		/// <summary>
		/// Shipped log position timestamp
		/// </summary>
		[Column("SHIPPED_LOG_POSITION_TIME"),             Nullable] public DateTime? ShippedLogPositionTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log buffers count
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_COUNT"),             Nullable] public long?     ShippedLogBuffersCount           { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers size in bytes
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_SIZE"),              Nullable] public long?     ShippedLogBuffersSize            { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffer duration in microseconds
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_DURATION"),          Nullable] public long?     ShippedLogBuffersDuration        { get; set; } // BIGINT
		/// <summary>
		/// Log end position of the last known replayed log buffer on secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION"),                 Nullable] public long?     ReplayedLogPosition              { get; set; } // BIGINT
		/// <summary>
		/// Timestamp of the last known replayed log buffer on the secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION_TIME"),            Nullable] public DateTime? ReplayedLogPositionTime          { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped savepoint version
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_VERSION"),             Nullable] public int?      ShippedSavepointVersion          { get; set; } // INTEGER
		/// <summary>
		/// Shipped savepoint log position
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_LOG_POSITION"),        Nullable] public long?     ShippedSavepointLogPosition      { get; set; } // BIGINT
		/// <summary>
		/// Shipped savepoint start time
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_START_TIME"),          Nullable] public DateTime? ShippedSavepointStartTime        { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped full replica count
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_COUNT"),            Nullable] public long?     ShippedFullReplicaCount          { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica size in bytes
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_SIZE"),             Nullable] public long?     ShippedFullReplicaSize           { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica duration in microseconds
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_DURATION"),         Nullable] public long?     ShippedFullReplicaDuration       { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica size in bytes
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_SIZE"),        Nullable] public long?     ShippedLastFullReplicaSize       { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica start time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_START_TIME"),  Nullable] public DateTime? ShippedLastFullReplicaStartTime  { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped last full replica end time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_END_TIME"),    Nullable] public DateTime? ShippedLastFullReplicaEndTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped delta replica count
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_COUNT"),           Nullable] public long?     ShippedDeltaReplicaCount         { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica size in bytes
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_SIZE"),            Nullable] public long?     ShippedDeltaReplicaSize          { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica duration in microseconds
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_DURATION"),        Nullable] public long?     ShippedDeltaReplicaDuration      { get; set; } // BIGINT
		/// <summary>
		/// Shipped last delta replica size in bytes
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_SIZE"),       Nullable] public long?     ShippedLastDeltaReplicaSize      { get; set; } // BIGINT
		/// <summary>
		/// Shipped last delta replica start time
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_START_TIME"), Nullable] public DateTime? ShippedLastDeltaReplicaStartTime { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped last delta replica end time
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_END_TIME"),   Nullable] public DateTime? ShippedLastDeltaReplicaEndTime   { get; set; } // TIMESTAMP
		/// <summary>
		/// Number of times, the asynchronous replication buffer got full
		/// </summary>
		[Column("ASYNC_BUFFER_FULL_COUNT"),               Nullable] public long?     AsyncBufferFullCount             { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in bytes
		/// </summary>
		[Column("BACKLOG_SIZE"),                          Nullable] public long?     BacklogSize                      { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in bytes
		/// </summary>
		[Column("MAX_BACKLOG_SIZE"),                      Nullable] public long?     MaxBacklogSize                   { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in microseconds
		/// </summary>
		[Column("BACKLOG_TIME"),                          Nullable] public long?     BacklogTime                      { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in microseconds
		/// </summary>
		[Column("MAX_BACKLOG_TIME"),                      Nullable] public long?     MaxBacklogTime                   { get; set; } // BIGINT
	}

	/// <summary>
	/// Statistics on active services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SERVICE_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MServiceStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                       Nullable] public string?   DatabaseName                    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                      Nullable] public string?   HOST                            { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                      Nullable] public int?      PORT                            { get; set; } // INTEGER
		/// <summary>
		/// Service name
		/// </summary>
		[Column("SERVICE_NAME"),                        Nullable] public string?   ServiceName                     { get; set; } // VARCHAR(32)
		/// <summary>
		/// Process ID
		/// </summary>
		[Column("PROCESS_ID"),                          Nullable] public int?      ProcessId                       { get; set; } // INTEGER
		/// <summary>
		/// Detail information, similar to COORDINATOR_TYPE in M_SERVICES
		/// </summary>
		[Column(),                                      Nullable] public string?   DETAIL                          { get; set; } // VARCHAR(128)
		/// <summary>
		/// NO, YES, UNKNOWN, STARTING, STOPPING
		/// </summary>
		[Column("ACTIVE_STATUS"),                       Nullable] public string?   ActiveStatus                    { get; set; } // VARCHAR(16)
		/// <summary>
		/// Process start timestamp
		/// </summary>
		[Column("START_TIME"),                          Nullable] public DateTime? StartTime                       { get; set; } // TIMESTAMP
		/// <summary>
		/// Current system timestamp
		/// </summary>
		[Column("SYS_TIMESTAMP"),                       Nullable] public DateTime? SysTimestamp                    { get; set; } // TIMESTAMP
		/// <summary>
		/// CPU usage of current process since last M_SERVICE_STATISTICS access
		/// </summary>
		[Column("PROCESS_CPU"),                         Nullable] public short?    ProcessCpu                      { get; set; } // SMALLINT
		/// <summary>
		/// CPU usage of current process since start (normalized to a single cpu)
		/// </summary>
		[Column("PROCESS_CPU_TIME"),                    Nullable] public long?     ProcessCpuTime                  { get; set; } // BIGINT
		/// <summary>
		/// CPU usage of all processes since last M_SERVICE_STATISTICS access
		/// </summary>
		[Column("TOTAL_CPU"),                           Nullable] public short?    TotalCpu                        { get; set; } // SMALLINT
		/// <summary>
		/// CPU usage of all processes since start (normalized to a single cpu). Similar values can be found in M_HOST_RESOURCE_UTILIZATION
		/// </summary>
		[Column("TOTAL_CPU_TIME"),                      Nullable] public long?     TotalCpuTime                    { get; set; } // BIGINT
		/// <summary>
		/// Process logical memory usage
		/// </summary>
		[Column("PROCESS_MEMORY"),                      Nullable] public long?     ProcessMemory                   { get; set; } // BIGINT
		/// <summary>
		/// Process physical memory usage
		/// </summary>
		[Column("PROCESS_PHYSICAL_MEMORY"),             Nullable] public long?     ProcessPhysicalMemory           { get; set; } // BIGINT
		/// <summary>
		/// Host physical+swap memory usage
		/// </summary>
		[Column("TOTAL_MEMORY"),                        Nullable] public long?     TotalMemory                     { get; set; } // BIGINT
		/// <summary>
		/// Host physical+swap memory size
		/// </summary>
		[Column("AVAILABLE_MEMORY"),                    Nullable] public long?     AvailableMemory                 { get; set; } // BIGINT
		/// <summary>
		/// Host physical memory size
		/// </summary>
		[Column("PHYSICAL_MEMORY"),                     Nullable] public long?     PhysicalMemory                  { get; set; } // BIGINT
		/// <summary>
		/// Requests per second. Average over last 1000 requests
		/// </summary>
		[Column("REQUESTS_PER_SEC"),                    Nullable] public double?   RequestsPerSec                  { get; set; } // DOUBLE
		/// <summary>
		/// Request response time. Average over last 1000 requests
		/// </summary>
		[Column("RESPONSE_TIME"),                       Nullable] public int?      ResponseTime                    { get; set; } // INTEGER
		/// <summary>
		/// Finished requests
		/// </summary>
		[Column("FINISHED_NON_INTERNAL_REQUEST_COUNT"), Nullable] public long?     FinishedNonInternalRequestCount { get; set; } // BIGINT
		/// <summary>
		/// Finished requests including internal requests
		/// </summary>
		[Column("ALL_FINISHED_REQUEST_COUNT"),          Nullable] public long?     AllFinishedRequestCount         { get; set; } // BIGINT
		/// <summary>
		/// Number of active requests
		/// </summary>
		[Column("ACTIVE_REQUEST_COUNT"),                Nullable] public int?      ActiveRequestCount              { get; set; } // INTEGER
		/// <summary>
		/// Number of pending requests
		/// </summary>
		[Column("PENDING_REQUEST_COUNT"),               Nullable] public int?      PendingRequestCount             { get; set; } // INTEGER
		/// <summary>
		/// Number of active threads
		/// </summary>
		[Column("ACTIVE_THREAD_COUNT"),                 Nullable] public int?      ActiveThreadCount               { get; set; } // INTEGER
		/// <summary>
		/// Number of total threads
		/// </summary>
		[Column("THREAD_COUNT"),                        Nullable] public int?      ThreadCount                     { get; set; } // INTEGER
		/// <summary>
		/// Number of open files
		/// </summary>
		[Column("OPEN_FILE_COUNT"),                     Nullable] public int?      OpenFileCount                   { get; set; } // INTEGER
	}

	/// <summary>
	/// Existing snapshots
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SNAPSHOTS", IsView=true)]
	public partial class SYS_DATABASES_MSnapshot
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string?   DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                Nullable] public string?   HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                Nullable] public int?      PORT         { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),     Nullable] public int?      VolumeId     { get; set; } // INTEGER
		/// <summary>
		/// Snapshot ID
		/// </summary>
		[Column(),                Nullable] public long?     ID           { get; set; } // BIGINT
		/// <summary>
		/// Creation time
		/// </summary>
		[Column(),                Nullable] public DateTime? TIMESTAMP    { get; set; } // TIMESTAMP
		/// <summary>
		/// Created for backup: 'TRUE'/'FALSE'
		/// </summary>
		[Column("FOR_BACKUP"),    Nullable] public string?   ForBackup    { get; set; } // VARCHAR(5)
		/// <summary>
		/// Anchor
		/// </summary>
		[Column(),                Nullable] public long?     ANCHOR       { get; set; } // BIGINT
	}

	/// <summary>
	/// Information about replicated systems and databases
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SYSTEM_REPLICATION", IsView=true)]
	public partial class SYS_DATABASES_MSystemReplication
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                   Nullable] public string? DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Generated site ID
		/// </summary>
		[Column("SITE_ID"),                         Nullable] public int?    SiteId                    { get; set; } // INTEGER
		/// <summary>
		/// Logical site name
		/// </summary>
		[Column("SITE_NAME"),                       Nullable] public string? SiteName                  { get; set; } // VARCHAR(256)
		/// <summary>
		/// Generated site ID of secondary site
		/// </summary>
		[Column("SECONDARY_SITE_ID"),               Nullable] public int?    SecondarySiteId           { get; set; } // INTEGER
		/// <summary>
		/// Secondary logical site name
		/// </summary>
		[Column("SECONDARY_SITE_NAME"),             Nullable] public string? SecondarySiteName         { get; set; } // VARCHAR(256)
		#nullable disable
		/// <summary>
		/// Replication mode
		/// </summary>
		[Column("REPLICATION_MODE"),             NotNull    ] public string  ReplicationMode           { get; set; } // VARCHAR(7)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Replication status
		/// </summary>
		[Column("REPLICATION_STATUS"),           NotNull    ] public string  ReplicationStatus         { get; set; } // VARCHAR(12)
		#nullable enable
		/// <summary>
		/// Operation mode
		/// </summary>
		[Column("OPERATION_MODE"),                  Nullable] public string? OperationMode             { get; set; } // VARCHAR(32)
		#nullable disable
		/// <summary>
		/// Secondary read access status
		/// </summary>
		[Column("SECONDARY_READ_ACCESS_STATUS"), NotNull    ] public string  SecondaryReadAccessStatus { get; set; } // VARCHAR(16)
		#nullable enable
		/// <summary>
		/// Tier
		/// </summary>
		[Column(),                                  Nullable] public int?    TIER                      { get; set; } // INTEGER
	}

	/// <summary>
	/// Global MVCC Timestamp history in secondary site of System Replication
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_SYSTEM_REPLICATION_MVCC_HISTORY", IsView=true)]
	public partial class SYS_DATABASES_MSystemReplicationMvccHistory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                  Nullable] public string?   DatabaseName                { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Global MVCC Timestamp
		/// </summary>
		[Column("GLOBAL_MVCC_TIMESTAMP"),          Nullable] public long?     GlobalMvccTimestamp         { get; set; } // BIGINT
		/// <summary>
		/// Global MVCC Timestamp updated time of secondary site
		/// </summary>
		[Column("SECONDARY_SITE_TIME"),            Nullable] public DateTime? SecondarySiteTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Global MVCC Timestamp updated time of primary site
		/// </summary>
		[Column("PRIMARY_SITE_TIME"),              Nullable] public DateTime? PrimarySiteTime             { get; set; } // TIMESTAMP
		/// <summary>
		/// Global MVCC Timestamp update duration of secondary site in millisecond
		/// </summary>
		[Column("SECONDARY_SITE_UPDATE_DURATION"), Nullable] public long?     SecondarySiteUpdateDuration { get; set; } // BIGINT
	}

	/// <summary>
	/// All trace files
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_TRACEFILES", IsView=true)]
	public partial class SYS_DATABASES_MTracefile
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string?   DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                Nullable] public string?   HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// File name
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string?   FileName     { get; set; } // VARCHAR(256)
		/// <summary>
		/// File size
		/// </summary>
		[Column("FILE_SIZE"),     Nullable] public long?     FileSize     { get; set; } // BIGINT
		/// <summary>
		/// File date
		/// </summary>
		[Column("FILE_MTIME"),    Nullable] public DateTime? FileMtime    { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// SAP HANA information from trace files
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_TRACEFILE_CONTENTS", IsView=true)]
	public partial class SYS_DATABASES_MTracefileContent
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                Nullable] public string? HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// File name
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string? FileName     { get; set; } // VARCHAR(256)
		/// <summary>
		/// File offset
		/// </summary>
		[Column(),                Nullable] public long?   OFFSET       { get; set; } // BIGINT
		/// <summary>
		/// File content at offset
		/// </summary>
		[Column(),                Nullable] public string? CONTENT      { get; set; } // NVARCHAR(1000)
	}

	/// <summary>
	/// Information about undo files and cleanup files
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_UNDO_CLEANUP_FILES", IsView=true)]
	public partial class SYS_DATABASES_MUndoCleanupFile
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string? DatabaseName               { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                               Nullable] public string? HOST                       { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                               Nullable] public int?    PORT                       { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                    Nullable] public int?    VolumeId                   { get; set; } // INTEGER
		/// <summary>
		/// File type (UNDO, CLEANUP, FREE)
		/// </summary>
		[Column(),                               Nullable] public string? TYPE                       { get; set; } // VARCHAR(16)
		/// <summary>
		/// Transaction ID
		/// </summary>
		[Column(),                               Nullable] public long?   TID                        { get; set; } // BIGINT
		/// <summary>
		/// Page count
		/// </summary>
		[Column("PAGE_COUNT"),                   Nullable] public long?   PageCount                  { get; set; } // BIGINT
		/// <summary>
		/// Raw size
		/// </summary>
		[Column("RAW_SIZE"),                     Nullable] public long?   RawSize                    { get; set; } // BIGINT
		/// <summary>
		/// Cleanup position mark
		/// </summary>
		[Column("CLEANUP_MARK"),                 Nullable] public long?   CleanupMark                { get; set; } // BIGINT
		/// <summary>
		/// Nested session ID
		/// </summary>
		[Column("NESTED_SESSION_ID"),            Nullable] public int?    NestedSessionId            { get; set; } // INTEGER
		/// <summary>
		/// Nested session parent ID
		/// </summary>
		[Column("NESTED_SESSION_PARENT_ID"),     Nullable] public int?    NestedSessionParentId      { get; set; } // INTEGER
		/// <summary>
		/// Dependent index during redo
		/// </summary>
		[Column("DEPENDENT_INDEX"),              Nullable] public int?    DependentIndex             { get; set; } // INTEGER
		/// <summary>
		/// Indoubt flag for distributed transaction: 'TRUE'/'FALSE'
		/// </summary>
		[Column("INDOUBT_FLAG"),                 Nullable] public string? IndoubtFlag                { get; set; } // VARCHAR(5)
		/// <summary>
		/// Tentative precommit position
		/// </summary>
		[Column("TENTATIVE_PRECOMMIT_POSITION"), Nullable] public long?   TentativePrecommitPosition { get; set; } // BIGINT
		/// <summary>
		/// Commit ID
		/// </summary>
		[Column("COMMIT_ID"),                    Nullable] public long?   CommitId                   { get; set; } // BIGINT
	}

	/// <summary>
	/// Volumes used by SAP HANA servers
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUMES", IsView=true)]
	public partial class SYS_DATABASES_MVolume
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),   Nullable] public string? DatabaseName   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                  Nullable] public string? HOST           { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                  Nullable] public int?    PORT           { get; set; } // INTEGER
		/// <summary>
		/// Service name
		/// </summary>
		[Column("SERVICE_NAME"),    Nullable] public string? ServiceName    { get; set; } // VARCHAR(32)
		/// <summary>
		/// Volume ID
		/// </summary>
		[Column("VOLUME_ID"),       Nullable] public int?    VolumeId       { get; set; } // INTEGER
		/// <summary>
		/// Subpath appended to M_DISKS.PATH
		/// </summary>
		[Column(),                  Nullable] public string? SUBPATH        { get; set; } // VARCHAR(512)
		/// <summary>
		/// Livecache is enabled
		/// </summary>
		[Column("LIVECACHE_STORE"), Nullable] public string? LivecacheStore { get; set; } // VARCHAR(10)
		/// <summary>
		/// Remove progress
		/// </summary>
		[Column("REMOVE_STATUS"),   Nullable] public string? RemoveStatus   { get; set; } // VARCHAR(16)
	}

	/// <summary>
	/// Information about volume files
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_FILES", IsView=true)]
	public partial class SYS_DATABASES_MVolumeFile
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                Nullable] public string? HOST         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                Nullable] public int?    PORT         { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),     Nullable] public int?    VolumeId     { get; set; } // INTEGER
		/// <summary>
		/// Type of file (DATA, LOG, ...)
		/// </summary>
		[Column("FILE_TYPE"),     Nullable] public string? FileType     { get; set; } // VARCHAR(16)
		/// <summary>
		/// File name
		/// </summary>
		[Column("FILE_NAME"),     Nullable] public string? FileName     { get; set; } // VARCHAR(256)
		/// <summary>
		/// Size of used data within file
		/// </summary>
		[Column("USED_SIZE"),     Nullable] public long?   UsedSize     { get; set; } // BIGINT
		/// <summary>
		/// Total file size
		/// </summary>
		[Column("TOTAL_SIZE"),    Nullable] public long?   TotalSize    { get; set; } // BIGINT
	}

	/// <summary>
	/// File access detailed statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_DETAILED_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoDetailedStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                    Nullable] public string? DatabaseName                 { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                   Nullable] public string? HOST                         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                   Nullable] public int?    PORT                         { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                        Nullable] public int?    VolumeId                     { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                                   Nullable] public string? PATH                         { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),                  Nullable] public string? FilesystemType               { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                                   Nullable] public string? TYPE                         { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                                   Nullable] public string? CONFIGURATION                { get; set; } // VARCHAR(256)
		/// <summary>
		/// Max. I/O buffer size
		/// </summary>
		[Column("MAX_IO_BUFFER_SIZE"),               Nullable] public long?   MaxIoBufferSize              { get; set; } // BIGINT
		/// <summary>
		/// Count of appends
		/// </summary>
		[Column("APPEND_COUNT"),                     Nullable] public long?   AppendCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of active appends
		/// </summary>
		[Column("ACTIVE_APPEND_COUNT"),              Nullable] public long?   ActiveAppendCount            { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (min)
		/// </summary>
		[Column("MIN_APPEND_SIZE"),                  Nullable] public long?   MinAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (avg)
		/// </summary>
		[Column("AVG_APPEND_SIZE"),                  Nullable] public long?   AvgAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (max)
		/// </summary>
		[Column("MAX_APPEND_SIZE"),                  Nullable] public long?   MaxAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (total)
		/// </summary>
		[Column("SUM_APPEND_SIZE"),                  Nullable] public long?   SumAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (min)
		/// </summary>
		[Column("MIN_APPEND_TIME"),                  Nullable] public long?   MinAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (avg)
		/// </summary>
		[Column("AVG_APPEND_TIME"),                  Nullable] public long?   AvgAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (max)
		/// </summary>
		[Column("MAX_APPEND_TIME"),                  Nullable] public long?   MaxAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (total)
		/// </summary>
		[Column("SUM_APPEND_TIME"),                  Nullable] public long?   SumAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Count of writes
		/// </summary>
		[Column("WRITE_COUNT"),                      Nullable] public long?   WriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of active writes
		/// </summary>
		[Column("ACTIVE_WRITE_COUNT"),               Nullable] public long?   ActiveWriteCount             { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (min)
		/// </summary>
		[Column("MIN_WRITE_SIZE"),                   Nullable] public long?   MinWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (avg)
		/// </summary>
		[Column("AVG_WRITE_SIZE"),                   Nullable] public long?   AvgWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (max)
		/// </summary>
		[Column("MAX_WRITE_SIZE"),                   Nullable] public long?   MaxWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (total)
		/// </summary>
		[Column("SUM_WRITE_SIZE"),                   Nullable] public long?   SumWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (min)
		/// </summary>
		[Column("MIN_WRITE_TIME"),                   Nullable] public long?   MinWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (avg)
		/// </summary>
		[Column("AVG_WRITE_TIME"),                   Nullable] public long?   AvgWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (max)
		/// </summary>
		[Column("MAX_WRITE_TIME"),                   Nullable] public long?   MaxWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (total)
		/// </summary>
		[Column("SUM_WRITE_TIME"),                   Nullable] public long?   SumWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Count of trigger asynchronous writes
		/// </summary>
		[Column("TRIGGER_ASYNC_WRITE_COUNT"),        Nullable] public long?   TriggerAsyncWriteCount       { get; set; } // BIGINT
		/// <summary>
		/// Count of active trigger asynchronous writes
		/// </summary>
		[Column("ACTIVE_TRIGGER_ASYNC_WRITE_COUNT"), Nullable] public long?   ActiveTriggerAsyncWriteCount { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?   MinTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?   AvgTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?   MaxTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?   SumTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?   MinTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?   AvgTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?   MaxTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?   SumTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Count of reads
		/// </summary>
		[Column("READ_COUNT"),                       Nullable] public long?   ReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of active reads
		/// </summary>
		[Column("ACTIVE_READ_COUNT"),                Nullable] public long?   ActiveReadCount              { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (min)
		/// </summary>
		[Column("MIN_READ_SIZE"),                    Nullable] public long?   MinReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (avg)
		/// </summary>
		[Column("AVG_READ_SIZE"),                    Nullable] public long?   AvgReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (max)
		/// </summary>
		[Column("MAX_READ_SIZE"),                    Nullable] public long?   MaxReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (total)
		/// </summary>
		[Column("SUM_READ_SIZE"),                    Nullable] public long?   SumReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (min)
		/// </summary>
		[Column("MIN_READ_TIME"),                    Nullable] public long?   MinReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (avg)
		/// </summary>
		[Column("AVG_READ_TIME"),                    Nullable] public long?   AvgReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (max)
		/// </summary>
		[Column("MAX_READ_TIME"),                    Nullable] public long?   MaxReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (total)
		/// </summary>
		[Column("SUM_READ_TIME"),                    Nullable] public long?   SumReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Count of trigger asynchronous reads
		/// </summary>
		[Column("TRIGGER_ASYNC_READ_COUNT"),         Nullable] public long?   TriggerAsyncReadCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of active trigger asynchronous reads
		/// </summary>
		[Column("ACTIVE_TRIGGER_ASYNC_READ_COUNT"),  Nullable] public long?   ActiveTriggerAsyncReadCount  { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?   MinTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?   AvgTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?   MaxTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?   SumTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?   MinTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?   AvgTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?   MaxTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?   SumTriggerAsyncReadTime      { get; set; } // BIGINT
	}

	/// <summary>
	/// File access detailed statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_DETAILED_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoDetailedStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                    Nullable] public string?   DatabaseName                 { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                       Nullable] public DateTime? ResetTime                    { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                   Nullable] public string?   HOST                         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                   Nullable] public int?      PORT                         { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                        Nullable] public int?      VolumeId                     { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                                   Nullable] public string?   PATH                         { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),                  Nullable] public string?   FilesystemType               { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                                   Nullable] public string?   TYPE                         { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                                   Nullable] public string?   CONFIGURATION                { get; set; } // VARCHAR(256)
		/// <summary>
		/// Max. I/O buffer size
		/// </summary>
		[Column("MAX_IO_BUFFER_SIZE"),               Nullable] public long?     MaxIoBufferSize              { get; set; } // BIGINT
		/// <summary>
		/// Count of appends
		/// </summary>
		[Column("APPEND_COUNT"),                     Nullable] public long?     AppendCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of active appends
		/// </summary>
		[Column("ACTIVE_APPEND_COUNT"),              Nullable] public long?     ActiveAppendCount            { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (min)
		/// </summary>
		[Column("MIN_APPEND_SIZE"),                  Nullable] public long?     MinAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (avg)
		/// </summary>
		[Column("AVG_APPEND_SIZE"),                  Nullable] public long?     AvgAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (max)
		/// </summary>
		[Column("MAX_APPEND_SIZE"),                  Nullable] public long?     MaxAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Size of appended data (total)
		/// </summary>
		[Column("SUM_APPEND_SIZE"),                  Nullable] public long?     SumAppendSize                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (min)
		/// </summary>
		[Column("MIN_APPEND_TIME"),                  Nullable] public long?     MinAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (avg)
		/// </summary>
		[Column("AVG_APPEND_TIME"),                  Nullable] public long?     AvgAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (max)
		/// </summary>
		[Column("MAX_APPEND_TIME"),                  Nullable] public long?     MaxAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Time for appends (total)
		/// </summary>
		[Column("SUM_APPEND_TIME"),                  Nullable] public long?     SumAppendTime                { get; set; } // BIGINT
		/// <summary>
		/// Count of writes
		/// </summary>
		[Column("WRITE_COUNT"),                      Nullable] public long?     WriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of active writes
		/// </summary>
		[Column("ACTIVE_WRITE_COUNT"),               Nullable] public long?     ActiveWriteCount             { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (min)
		/// </summary>
		[Column("MIN_WRITE_SIZE"),                   Nullable] public long?     MinWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (avg)
		/// </summary>
		[Column("AVG_WRITE_SIZE"),                   Nullable] public long?     AvgWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (max)
		/// </summary>
		[Column("MAX_WRITE_SIZE"),                   Nullable] public long?     MaxWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Size of written data (total)
		/// </summary>
		[Column("SUM_WRITE_SIZE"),                   Nullable] public long?     SumWriteSize                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (min)
		/// </summary>
		[Column("MIN_WRITE_TIME"),                   Nullable] public long?     MinWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (avg)
		/// </summary>
		[Column("AVG_WRITE_TIME"),                   Nullable] public long?     AvgWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (max)
		/// </summary>
		[Column("MAX_WRITE_TIME"),                   Nullable] public long?     MaxWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Time for writes (total)
		/// </summary>
		[Column("SUM_WRITE_TIME"),                   Nullable] public long?     SumWriteTime                 { get; set; } // BIGINT
		/// <summary>
		/// Count of trigger asynchronous writes
		/// </summary>
		[Column("TRIGGER_ASYNC_WRITE_COUNT"),        Nullable] public long?     TriggerAsyncWriteCount       { get; set; } // BIGINT
		/// <summary>
		/// Count of active trigger asynchronous writes
		/// </summary>
		[Column("ACTIVE_TRIGGER_ASYNC_WRITE_COUNT"), Nullable] public long?     ActiveTriggerAsyncWriteCount { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?     MinTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?     AvgTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?     MaxTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous write data (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_WRITE_SIZE"),     Nullable] public long?     SumTriggerAsyncWriteSize     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?     MinTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?     AvgTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?     MaxTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous writes (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_WRITE_TIME"),     Nullable] public long?     SumTriggerAsyncWriteTime     { get; set; } // BIGINT
		/// <summary>
		/// Count of reads
		/// </summary>
		[Column("READ_COUNT"),                       Nullable] public long?     ReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of active reads
		/// </summary>
		[Column("ACTIVE_READ_COUNT"),                Nullable] public long?     ActiveReadCount              { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (min)
		/// </summary>
		[Column("MIN_READ_SIZE"),                    Nullable] public long?     MinReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (avg)
		/// </summary>
		[Column("AVG_READ_SIZE"),                    Nullable] public long?     AvgReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (max)
		/// </summary>
		[Column("MAX_READ_SIZE"),                    Nullable] public long?     MaxReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Size of read data (total)
		/// </summary>
		[Column("SUM_READ_SIZE"),                    Nullable] public long?     SumReadSize                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (min)
		/// </summary>
		[Column("MIN_READ_TIME"),                    Nullable] public long?     MinReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (avg)
		/// </summary>
		[Column("AVG_READ_TIME"),                    Nullable] public long?     AvgReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (max)
		/// </summary>
		[Column("MAX_READ_TIME"),                    Nullable] public long?     MaxReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Time for reads (total)
		/// </summary>
		[Column("SUM_READ_TIME"),                    Nullable] public long?     SumReadTime                  { get; set; } // BIGINT
		/// <summary>
		/// Count of trigger asynchronous reads
		/// </summary>
		[Column("TRIGGER_ASYNC_READ_COUNT"),         Nullable] public long?     TriggerAsyncReadCount        { get; set; } // BIGINT
		/// <summary>
		/// Count of active trigger asynchronous reads
		/// </summary>
		[Column("ACTIVE_TRIGGER_ASYNC_READ_COUNT"),  Nullable] public long?     ActiveTriggerAsyncReadCount  { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?     MinTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?     AvgTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?     MaxTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Size of trigger asynchronous read data (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_READ_SIZE"),      Nullable] public long?     SumTriggerAsyncReadSize      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (min)
		/// </summary>
		[Column("MIN_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?     MinTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (avg)
		/// </summary>
		[Column("AVG_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?     AvgTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (max)
		/// </summary>
		[Column("MAX_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?     MaxTriggerAsyncReadTime      { get; set; } // BIGINT
		/// <summary>
		/// Time for trigger asynchronous reads (total)
		/// </summary>
		[Column("SUM_TRIGGER_ASYNC_READ_TIME"),      Nullable] public long?     SumTriggerAsyncReadTime      { get; set; } // BIGINT
	}

	/// <summary>
	/// File access retry statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_RETRY_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoRetryStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                           Nullable] public string? DatabaseName                      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                          Nullable] public string? HOST                              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                          Nullable] public int?    PORT                              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                               Nullable] public int?    VolumeId                          { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                                          Nullable] public string? PATH                              { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),                         Nullable] public string? FilesystemType                    { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                                          Nullable] public string? TYPE                              { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                                          Nullable] public string? CONFIGURATION                     { get; set; } // VARCHAR(256)
		/// <summary>
		/// Max. I/O buffer size
		/// </summary>
		[Column("MAX_IO_BUFFER_SIZE"),                      Nullable] public long?   MaxIoBufferSize                   { get; set; } // BIGINT
		/// <summary>
		/// Count of all appends
		/// </summary>
		[Column("TOTAL_APPEND_COUNT"),                      Nullable] public long?   TotalAppendCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of failed appends
		/// </summary>
		[Column("FAILED_APPEND_COUNT"),                     Nullable] public long?   FailedAppendCount                 { get; set; } // BIGINT
		/// <summary>
		/// Count of all writes
		/// </summary>
		[Column("TOTAL_WRITE_COUNT"),                       Nullable] public long?   TotalWriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("FAILED_WRITE_COUNT"),                      Nullable] public long?   FailedWriteCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes
		/// </summary>
		[Column("SHORT_WRITE_COUNT"),                       Nullable] public long?   ShortWriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with short writes
		/// </summary>
		[Column("REQUESTS_WITH_SHORT_WRITES_COUNT"),        Nullable] public long?   RequestsWithShortWritesCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes per request with short writes (avg)
		/// </summary>
		[Column("AVG_SHORT_WRITES_PER_REQUEST_COUNT"),      Nullable] public long?   AvgShortWritesPerRequestCount     { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes per request (max)
		/// </summary>
		[Column("MAX_SHORT_WRITES_PER_REQUEST_COUNT"),      Nullable] public long?   MaxShortWritesPerRequestCount     { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes
		/// </summary>
		[Column("FULL_RETRY_WRITE_COUNT"),                  Nullable] public long?   FullRetryWriteCount               { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with full retry writes
		/// </summary>
		[Column("REQUESTS_WITH_FULL_RETRY_WRITES_COUNT"),   Nullable] public long?   RequestsWithFullRetryWritesCount  { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes per request with full retry writes (avg)
		/// </summary>
		[Column("AVG_FULL_RETRY_WRITES_PER_REQUEST_COUNT"), Nullable] public long?   AvgFullRetryWritesPerRequestCount { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes per request (max)
		/// </summary>
		[Column("MAX_FULL_RETRY_WRITES_PER_REQUEST_COUNT"), Nullable] public long?   MaxFullRetryWritesPerRequestCount { get; set; } // BIGINT
		/// <summary>
		/// Count of all reads
		/// </summary>
		[Column("TOTAL_READ_COUNT"),                        Nullable] public long?   TotalReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("FAILED_READ_COUNT"),                       Nullable] public long?   FailedReadCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads
		/// </summary>
		[Column("SHORT_READ_COUNT"),                        Nullable] public long?   ShortReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with short reads
		/// </summary>
		[Column("REQUESTS_WITH_SHORT_READS_COUNT"),         Nullable] public long?   RequestsWithShortReadsCount       { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads per request with short reads (avg)
		/// </summary>
		[Column("AVG_SHORT_READS_PER_REQUEST_COUNT"),       Nullable] public long?   AvgShortReadsPerRequestCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads per request (max)
		/// </summary>
		[Column("MAX_SHORT_READS_PER_REQUEST_COUNT"),       Nullable] public long?   MaxShortReadsPerRequestCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads
		/// </summary>
		[Column("FULL_RETRY_READ_COUNT"),                   Nullable] public long?   FullRetryReadCount                { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with full retry reads
		/// </summary>
		[Column("REQUESTS_WITH_FULL_RETRY_READS_COUNT"),    Nullable] public long?   RequestsWithFullRetryReadsCount   { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads per request with full retry reads (avg)
		/// </summary>
		[Column("AVG_FULL_RETRY_READS_PER_REQUEST_COUNT"),  Nullable] public long?   AvgFullRetryReadsPerRequestCount  { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads per request (max)
		/// </summary>
		[Column("MAX_FULL_RETRY_READS_PER_REQUEST_COUNT"),  Nullable] public long?   MaxFullRetryReadsPerRequestCount  { get; set; } // BIGINT
	}

	/// <summary>
	/// File access retry statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_RETRY_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoRetryStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                           Nullable] public string?   DatabaseName                      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                              Nullable] public DateTime? ResetTime                         { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                          Nullable] public string?   HOST                              { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                          Nullable] public int?      PORT                              { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                               Nullable] public int?      VolumeId                          { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                                          Nullable] public string?   PATH                              { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),                         Nullable] public string?   FilesystemType                    { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                                          Nullable] public string?   TYPE                              { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                                          Nullable] public string?   CONFIGURATION                     { get; set; } // VARCHAR(256)
		/// <summary>
		/// Max. I/O buffer size
		/// </summary>
		[Column("MAX_IO_BUFFER_SIZE"),                      Nullable] public long?     MaxIoBufferSize                   { get; set; } // BIGINT
		/// <summary>
		/// Count of all appends
		/// </summary>
		[Column("TOTAL_APPEND_COUNT"),                      Nullable] public long?     TotalAppendCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of failed appends
		/// </summary>
		[Column("FAILED_APPEND_COUNT"),                     Nullable] public long?     FailedAppendCount                 { get; set; } // BIGINT
		/// <summary>
		/// Count of all writes
		/// </summary>
		[Column("TOTAL_WRITE_COUNT"),                       Nullable] public long?     TotalWriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("FAILED_WRITE_COUNT"),                      Nullable] public long?     FailedWriteCount                  { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes
		/// </summary>
		[Column("SHORT_WRITE_COUNT"),                       Nullable] public long?     ShortWriteCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with short writes
		/// </summary>
		[Column("REQUESTS_WITH_SHORT_WRITES_COUNT"),        Nullable] public long?     RequestsWithShortWritesCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes per request with short writes (avg)
		/// </summary>
		[Column("AVG_SHORT_WRITES_PER_REQUEST_COUNT"),      Nullable] public long?     AvgShortWritesPerRequestCount     { get; set; } // BIGINT
		/// <summary>
		/// Count of short writes per request (max)
		/// </summary>
		[Column("MAX_SHORT_WRITES_PER_REQUEST_COUNT"),      Nullable] public long?     MaxShortWritesPerRequestCount     { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes
		/// </summary>
		[Column("FULL_RETRY_WRITE_COUNT"),                  Nullable] public long?     FullRetryWriteCount               { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with full retry writes
		/// </summary>
		[Column("REQUESTS_WITH_FULL_RETRY_WRITES_COUNT"),   Nullable] public long?     RequestsWithFullRetryWritesCount  { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes per request with full retry writes (avg)
		/// </summary>
		[Column("AVG_FULL_RETRY_WRITES_PER_REQUEST_COUNT"), Nullable] public long?     AvgFullRetryWritesPerRequestCount { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes per request (max)
		/// </summary>
		[Column("MAX_FULL_RETRY_WRITES_PER_REQUEST_COUNT"), Nullable] public long?     MaxFullRetryWritesPerRequestCount { get; set; } // BIGINT
		/// <summary>
		/// Count of all reads
		/// </summary>
		[Column("TOTAL_READ_COUNT"),                        Nullable] public long?     TotalReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("FAILED_READ_COUNT"),                       Nullable] public long?     FailedReadCount                   { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads
		/// </summary>
		[Column("SHORT_READ_COUNT"),                        Nullable] public long?     ShortReadCount                    { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with short reads
		/// </summary>
		[Column("REQUESTS_WITH_SHORT_READS_COUNT"),         Nullable] public long?     RequestsWithShortReadsCount       { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads per request with short reads (avg)
		/// </summary>
		[Column("AVG_SHORT_READS_PER_REQUEST_COUNT"),       Nullable] public long?     AvgShortReadsPerRequestCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of short reads per request (max)
		/// </summary>
		[Column("MAX_SHORT_READS_PER_REQUEST_COUNT"),       Nullable] public long?     MaxShortReadsPerRequestCount      { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads
		/// </summary>
		[Column("FULL_RETRY_READ_COUNT"),                   Nullable] public long?     FullRetryReadCount                { get; set; } // BIGINT
		/// <summary>
		/// Count of requests with full retry reads
		/// </summary>
		[Column("REQUESTS_WITH_FULL_RETRY_READS_COUNT"),    Nullable] public long?     RequestsWithFullRetryReadsCount   { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads per request with full retry reads (avg)
		/// </summary>
		[Column("AVG_FULL_RETRY_READS_PER_REQUEST_COUNT"),  Nullable] public long?     AvgFullRetryReadsPerRequestCount  { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads per request (max)
		/// </summary>
		[Column("MAX_FULL_RETRY_READS_PER_REQUEST_COUNT"),  Nullable] public long?     MaxFullRetryReadsPerRequestCount  { get; set; } // BIGINT
	}

	/// <summary>
	/// File access total statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_TOTAL_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoTotalStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),              Nullable] public string? DatabaseName            { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                             Nullable] public string? HOST                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                             Nullable] public int?    PORT                    { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                  Nullable] public int?    VolumeId                { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                             Nullable] public string? PATH                    { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),            Nullable] public string? FilesystemType          { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                             Nullable] public string? TYPE                    { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                             Nullable] public string? CONFIGURATION           { get; set; } // VARCHAR(256)
		/// <summary>
		/// Count of blocked write requests
		/// </summary>
		[Column("BLOCKED_WRITE_REQUESTS"),     Nullable] public long?   BlockedWriteRequests    { get; set; } // BIGINT
		/// <summary>
		/// Max. count of blocked write requests
		/// </summary>
		[Column("MAX_BLOCKED_WRITE_REQUESTS"), Nullable] public long?   MaxBlockedWriteRequests { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous reads
		/// </summary>
		[Column("TOTAL_READS"),                Nullable] public long?   TotalReads              { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous reads
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_READS"),  Nullable] public long?   TotalTriggerAsyncReads  { get; set; } // BIGINT
		/// <summary>
		/// Count of active asynchronous reads
		/// </summary>
		[Column("ACTIVE_ASYNC_READS_COUNT"),   Nullable] public long?   ActiveAsyncReadsCount   { get; set; } // BIGINT
		/// <summary>
		/// Trigger-Ratio of asynchronous reads
		/// </summary>
		[Column("TRIGGER_READ_RATIO"),         Nullable] public double? TriggerReadRatio        { get; set; } // DOUBLE
		/// <summary>
		/// Count of reads that read less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_READS"),          Nullable] public long?   TotalShortReads         { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads
		/// </summary>
		[Column("TOTAL_FULL_RETRY_READS"),     Nullable] public long?   TotalFullRetryReads     { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("TOTAL_FAILED_READS"),         Nullable] public long?   TotalFailedReads        { get; set; } // BIGINT
		/// <summary>
		/// Size of read data
		/// </summary>
		[Column("TOTAL_READ_SIZE"),            Nullable] public long?   TotalReadSize           { get; set; } // BIGINT
		/// <summary>
		/// Total read time
		/// </summary>
		[Column("TOTAL_READ_TIME"),            Nullable] public long?   TotalReadTime           { get; set; } // BIGINT
		/// <summary>
		/// Count of appends
		/// </summary>
		[Column("TOTAL_APPENDS"),              Nullable] public long?   TotalAppends            { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous writes
		/// </summary>
		[Column("TOTAL_WRITES"),               Nullable] public long?   TotalWrites             { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous writes
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_WRITES"), Nullable] public long?   TotalTriggerAsyncWrites { get; set; } // BIGINT
		/// <summary>
		/// Count of active asynchronous writes
		/// </summary>
		[Column("ACTIVE_ASYNC_WRITES_COUNT"),  Nullable] public long?   ActiveAsyncWritesCount  { get; set; } // BIGINT
		/// <summary>
		/// Trigger-Ratio of asynchronous writes
		/// </summary>
		[Column("TRIGGER_WRITE_RATIO"),        Nullable] public double? TriggerWriteRatio       { get; set; } // DOUBLE
		/// <summary>
		/// Count of writes that wrote less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_WRITES"),         Nullable] public long?   TotalShortWrites        { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes
		/// </summary>
		[Column("TOTAL_FULL_RETRY_WRITES"),    Nullable] public long?   TotalFullRetryWrites    { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("TOTAL_FAILED_WRITES"),        Nullable] public long?   TotalFailedWrites       { get; set; } // BIGINT
		/// <summary>
		/// Size of written data
		/// </summary>
		[Column("TOTAL_WRITE_SIZE"),           Nullable] public long?   TotalWriteSize          { get; set; } // BIGINT
		/// <summary>
		/// Total write time
		/// </summary>
		[Column("TOTAL_WRITE_TIME"),           Nullable] public long?   TotalWriteTime          { get; set; } // BIGINT
		/// <summary>
		/// Total IO time
		/// </summary>
		[Column("TOTAL_IO_TIME"),              Nullable] public long?   TotalIoTime             { get; set; } // BIGINT
	}

	/// <summary>
	/// File access total statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_IO_TOTAL_STATISTICS_RESET", IsView=true)]
	public partial class SYS_DATABASES_MVolumeIoTotalStatisticsReset
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),              Nullable] public string?   DatabaseName            { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Last reset timestamp
		/// </summary>
		[Column("RESET_TIME"),                 Nullable] public DateTime? ResetTime               { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                             Nullable] public string?   HOST                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                             Nullable] public int?      PORT                    { get; set; } // INTEGER
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                  Nullable] public int?      VolumeId                { get; set; } // INTEGER
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                             Nullable] public string?   PATH                    { get; set; } // VARCHAR(512)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),            Nullable] public string?   FilesystemType          { get; set; } // VARCHAR(32)
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                             Nullable] public string?   TYPE                    { get; set; } // VARCHAR(16)
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                             Nullable] public string?   CONFIGURATION           { get; set; } // VARCHAR(256)
		/// <summary>
		/// Count of blocked write requests
		/// </summary>
		[Column("BLOCKED_WRITE_REQUESTS"),     Nullable] public long?     BlockedWriteRequests    { get; set; } // BIGINT
		/// <summary>
		/// Max. count of blocked write requests
		/// </summary>
		[Column("MAX_BLOCKED_WRITE_REQUESTS"), Nullable] public long?     MaxBlockedWriteRequests { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous reads
		/// </summary>
		[Column("TOTAL_READS"),                Nullable] public long?     TotalReads              { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous reads
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_READS"),  Nullable] public long?     TotalTriggerAsyncReads  { get; set; } // BIGINT
		/// <summary>
		/// Count of active asynchronous reads
		/// </summary>
		[Column("ACTIVE_ASYNC_READS_COUNT"),   Nullable] public long?     ActiveAsyncReadsCount   { get; set; } // BIGINT
		/// <summary>
		/// Trigger-Ratio of asynchronous reads
		/// </summary>
		[Column("TRIGGER_READ_RATIO"),         Nullable] public double?   TriggerReadRatio        { get; set; } // DOUBLE
		/// <summary>
		/// Count of reads that read less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_READS"),          Nullable] public long?     TotalShortReads         { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads
		/// </summary>
		[Column("TOTAL_FULL_RETRY_READS"),     Nullable] public long?     TotalFullRetryReads     { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("TOTAL_FAILED_READS"),         Nullable] public long?     TotalFailedReads        { get; set; } // BIGINT
		/// <summary>
		/// Size of read data
		/// </summary>
		[Column("TOTAL_READ_SIZE"),            Nullable] public long?     TotalReadSize           { get; set; } // BIGINT
		/// <summary>
		/// Total read time
		/// </summary>
		[Column("TOTAL_READ_TIME"),            Nullable] public long?     TotalReadTime           { get; set; } // BIGINT
		/// <summary>
		/// Count of appends
		/// </summary>
		[Column("TOTAL_APPENDS"),              Nullable] public long?     TotalAppends            { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous writes
		/// </summary>
		[Column("TOTAL_WRITES"),               Nullable] public long?     TotalWrites             { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous writes
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_WRITES"), Nullable] public long?     TotalTriggerAsyncWrites { get; set; } // BIGINT
		/// <summary>
		/// Count of active asynchronous writes
		/// </summary>
		[Column("ACTIVE_ASYNC_WRITES_COUNT"),  Nullable] public long?     ActiveAsyncWritesCount  { get; set; } // BIGINT
		/// <summary>
		/// Trigger-Ratio of asynchronous writes
		/// </summary>
		[Column("TRIGGER_WRITE_RATIO"),        Nullable] public double?   TriggerWriteRatio       { get; set; } // DOUBLE
		/// <summary>
		/// Count of writes that wrote less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_WRITES"),         Nullable] public long?     TotalShortWrites        { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes
		/// </summary>
		[Column("TOTAL_FULL_RETRY_WRITES"),    Nullable] public long?     TotalFullRetryWrites    { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("TOTAL_FAILED_WRITES"),        Nullable] public long?     TotalFailedWrites       { get; set; } // BIGINT
		/// <summary>
		/// Size of written data
		/// </summary>
		[Column("TOTAL_WRITE_SIZE"),           Nullable] public long?     TotalWriteSize          { get; set; } // BIGINT
		/// <summary>
		/// Total write time
		/// </summary>
		[Column("TOTAL_WRITE_TIME"),           Nullable] public long?     TotalWriteTime          { get; set; } // BIGINT
		/// <summary>
		/// Total IO time
		/// </summary>
		[Column("TOTAL_IO_TIME"),              Nullable] public long?     TotalIoTime             { get; set; } // BIGINT
	}

	/// <summary>
	/// Volume sizes used by SAP HANA servers
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_VOLUME_SIZES", IsView=true)]
	public partial class SYS_DATABASES_MVolumeSize
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Volume ID. See M_VOLUMES
		/// </summary>
		[Column("VOLUME_ID"),     Nullable] public int?    VolumeId     { get; set; } // INTEGER
		/// <summary>
		/// Disk ID. See M_DISKS
		/// </summary>
		[Column("DISK_ID"),       Nullable] public int?    DiskId       { get; set; } // INTEGER
		/// <summary>
		/// Data area size
		/// </summary>
		[Column("DATA_SIZE"),     Nullable] public long?   DataSize     { get; set; } // BIGINT
		/// <summary>
		/// Log area size
		/// </summary>
		[Column("LOG_SIZE"),      Nullable] public long?   LogSize      { get; set; } // BIGINT
	}

	/// <summary>
	/// Database workload collected every minute
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_WORKLOAD", IsView=true)]
	public partial class SYS_DATABASES_MWorkload
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                   Nullable] public string? DatabaseName                 { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                  Nullable] public string? HOST                         { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                  Nullable] public int?    PORT                         { get; set; } // INTEGER
		/// <summary>
		/// Total count of all executed statements for data manipulation, data definition, and system control
		/// </summary>
		[Column("EXECUTION_COUNT"),                 Nullable] public long?   ExecutionCount               { get; set; } // BIGINT
		/// <summary>
		/// Number of statement preparation
		/// </summary>
		[Column("COMPILATION_COUNT"),               Nullable] public long?   CompilationCount             { get; set; } // BIGINT
		/// <summary>
		/// Number of update transactions
		/// </summary>
		[Column("UPDATE_TRANSACTION_COUNT"),        Nullable] public long?   UpdateTransactionCount       { get; set; } // BIGINT
		/// <summary>
		/// Number of transaction commits
		/// </summary>
		[Column("COMMIT_COUNT"),                    Nullable] public long?   CommitCount                  { get; set; } // BIGINT
		/// <summary>
		/// Number of transaction rollbacks
		/// </summary>
		[Column("ROLLBACK_COUNT"),                  Nullable] public long?   RollbackCount                { get; set; } // BIGINT
		/// <summary>
		/// Current statement execution count per minute
		/// </summary>
		[Column("CURRENT_EXECUTION_RATE"),          Nullable] public double? CurrentExecutionRate         { get; set; } // DOUBLE
		/// <summary>
		/// Peak statement execution count per minute
		/// </summary>
		[Column("PEAK_EXECUTION_RATE"),             Nullable] public double? PeakExecutionRate            { get; set; } // DOUBLE
		/// <summary>
		/// Current statement preparation count per minute
		/// </summary>
		[Column("CURRENT_COMPILATION_RATE"),        Nullable] public double? CurrentCompilationRate       { get; set; } // DOUBLE
		/// <summary>
		/// Peak statement preparation count per minute
		/// </summary>
		[Column("PEAK_COMPILATION_RATE"),           Nullable] public double? PeakCompilationRate          { get; set; } // DOUBLE
		/// <summary>
		/// Current update transaction count per minute
		/// </summary>
		[Column("CURRENT_UPDATE_TRANSACTION_RATE"), Nullable] public double? CurrentUpdateTransactionRate { get; set; } // DOUBLE
		/// <summary>
		/// Peak update transaction count per minute
		/// </summary>
		[Column("PEAK_UPDATE_TRANSACTION_RATE"),    Nullable] public double? PeakUpdateTransactionRate    { get; set; } // DOUBLE
		/// <summary>
		/// Current transaction count per minute
		/// </summary>
		[Column("CURRENT_TRANSACTION_RATE"),        Nullable] public double? CurrentTransactionRate       { get; set; } // DOUBLE
		/// <summary>
		/// Peak transaction count per minute
		/// </summary>
		[Column("PEAK_TRANSACTION_RATE"),           Nullable] public double? PeakTransactionRate          { get; set; } // DOUBLE
		/// <summary>
		/// Total number of commits per minute
		/// </summary>
		[Column("CURRENT_COMMIT_RATE"),             Nullable] public double? CurrentCommitRate            { get; set; } // DOUBLE
		/// <summary>
		/// Peak commit counts per minute
		/// </summary>
		[Column("PEAK_COMMIT_RATE"),                Nullable] public double? PeakCommitRate               { get; set; } // DOUBLE
		/// <summary>
		/// Total number of rollbacks per minute
		/// </summary>
		[Column("CURRENT_ROLLBACK_RATE"),           Nullable] public double? CurrentRollbackRate          { get; set; } // DOUBLE
		/// <summary>
		/// Peak rollback count per minute
		/// </summary>
		[Column("PEAK_ROLLBACK_RATE"),              Nullable] public double? PeakRollbackRate             { get; set; } // DOUBLE
		/// <summary>
		/// Total size of used memory per minute
		/// </summary>
		[Column("CURRENT_MEMORY_USAGE_RATE"),       Nullable] public double? CurrentMemoryUsageRate       { get; set; } // DOUBLE
		/// <summary>
		/// Peak size of used memory per minute
		/// </summary>
		[Column("PEAK_MEMORY_USAGE_RATE"),          Nullable] public double? PeakMemoryUsageRate          { get; set; } // DOUBLE
	}

	/// <summary>
	/// List of URLs under which this database can be reached.
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="M_XS_PUBLIC_URLS", IsView=true)]
	public partial class SYS_DATABASES_MXsPublicUrl
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string? DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Public HTTP URL of the XS Engine
		/// </summary>
		[Column("HTTP_URL"),      Nullable] public string? HttpUrl      { get; set; } // VARCHAR(270)
		/// <summary>
		/// Public HTTPS URL of the XS Engine
		/// </summary>
		[Column("HTTPS_URL"),     Nullable] public string? HttpsUrl     { get; set; } // VARCHAR(270)
		/// <summary>
		/// Purpose of these URLs
		/// </summary>
		[Column(),                Nullable] public string? PURPOSE      { get; set; } // VARCHAR(32)
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_ACCESS_TOKEN")]
	public partial class _SYS_XS_OauthAccessToken
	{
		#nullable disable
		[Column("CLIENT_PACKAGE"),   PrimaryKey(1), NotNull] public string    ClientPackage  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CLIENT_NAME"),      PrimaryKey(2), NotNull] public string    ClientName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                   PrimaryKey(3), NotNull] public string    USER           { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("TOKEN_TYPE"),       PrimaryKey(4), NotNull] public byte      TokenType      { get; set; } // TINYINT
		[Column("TOKEN_LIFETIME"),      Nullable           ] public int?      TokenLifetime  { get; set; } // INTEGER
		[Column("TOKEN_GRANT_TIME"),    Nullable           ] public DateTime? TokenGrantTime { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_ACCESS_TOKEN_SCOPES")]
	public partial class _SYS_XS_OauthAccessTokenScope
	{
		#nullable disable
		[Column("CLIENT_PACKAGE"), PrimaryKey(1), NotNull] public string ClientPackage { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CLIENT_NAME"),    PrimaryKey(2), NotNull] public string ClientName    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                 PrimaryKey(3), NotNull] public string USER          { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("TOKEN_TYPE"),     PrimaryKey(4), NotNull] public byte   TokenType     { get; set; } // TINYINT
		#nullable disable
		[Column(),                 PrimaryKey(5), NotNull] public string SCOPE         { get; set; } // NVARCHAR(512)
		#nullable enable
		[Column("SCOPE_TYPE"),        Nullable           ] public byte?  ScopeType     { get; set; } // TINYINT
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_APP_CONFIG")]
	public partial class _SYS_XS_OauthAppConfig
	{
		#nullable disable
		[Column("PACKAGE_ID"),     PrimaryKey(1), NotNull] public string    PackageId     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),    PrimaryKey(2), NotNull] public string    ObjectName    { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("CLIENT_PACKAGE"),    Nullable           ] public string?   ClientPackage { get; set; } // NVARCHAR(256)
		[Column("CLIENT_NAME"),       Nullable           ] public string?   ClientName    { get; set; } // NVARCHAR(256)
		[Column(),                    Nullable           ] public string?   DESCRIPTION   { get; set; } // NVARCHAR(512)
		[Column("CHANGED_BY"),        Nullable           ] public string?   ChangedBy     { get; set; } // NVARCHAR(256)
		[Column("CHANGED_AT"),        Nullable           ] public DateTime? ChangedAt     { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_APP_CONFIG_SCOPES")]
	public partial class _SYS_XS_OauthAppConfigScope
	{
		#nullable disable
		[Column("PACKAGE_ID"),     PrimaryKey(1), NotNull] public string  PackageId     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),    PrimaryKey(2), NotNull] public string  ObjectName    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                 PrimaryKey(3), NotNull] public string  SCOPE         { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                    Nullable           ] public byte?   MANDATORY     { get; set; } // TINYINT
		[Column("CLIENT_PACKAGE"),    Nullable           ] public string? ClientPackage { get; set; } // NVARCHAR(256)
		[Column("CLIENT_NAME"),       Nullable           ] public string? ClientName    { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_CLIENT_CONFIG")]
	public partial class _SYS_XS_OauthClientConfig
	{
		#nullable disable
		[Column("CLIENT_PACKAGE"),             PrimaryKey(1), NotNull] public string    ClientPackage            { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CLIENT_NAME"),                PrimaryKey(2), NotNull] public string    ClientName               { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("FLAVOR_PACKAGE"),                Nullable           ] public string?   FlavorPackage            { get; set; } // NVARCHAR(256)
		[Column("FLAVOR_NAME"),                   Nullable           ] public string?   FlavorName               { get; set; } // NVARCHAR(256)
		[Column("CLIENT_ID"),                     Nullable           ] public string?   ClientId                 { get; set; } // NVARCHAR(512)
		[Column("CLIENT_AUTHENTICATION_TYPE"),                NotNull] public byte      ClientAuthenticationType { get; set; } // TINYINT
		[Column("URL_TOKEN_ENDPOINT"),            Nullable           ] public string?   UrlTokenEndpoint         { get; set; } // NVARCHAR(2048)
		[Column("URL_REVOCATION_ENDPOINT"),       Nullable           ] public string?   UrlRevocationEndpoint    { get; set; } // NVARCHAR(2048)
		[Column("URL_AUTHORIZATION_ENDPOINT"),    Nullable           ] public string?   UrlAuthorizationEndpoint { get; set; } // NVARCHAR(2048)
		[Column("SAML_ISSUER"),                   Nullable           ] public string?   SamlIssuer               { get; set; } // NVARCHAR(512)
		[Column(),                                            NotNull] public byte      FLOW                     { get; set; } // TINYINT
		[Column("URL_REDIRECT"),                  Nullable           ] public string?   UrlRedirect              { get; set; } // NVARCHAR(2048)
		[Column(),                                            NotNull] public byte      SHARED                   { get; set; } // TINYINT
		[Column("SCOPE_REQUEST"),                             NotNull] public byte      ScopeRequest             { get; set; } // TINYINT
		[Column(),                                Nullable           ] public string?   DESCRIPTION              { get; set; } // NVARCHAR(512)
		[Column("CHANGED_BY"),                    Nullable           ] public string?   ChangedBy                { get; set; } // NVARCHAR(256)
		[Column("CHANGED_AT"),                    Nullable           ] public DateTime? ChangedAt                { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="OAUTH_CLIENT_FLAVOR")]
	public partial class _SYS_XS_OauthClientFlavor
	{
		#nullable disable
		[Column("FLAVOR_PACKAGE"),  PrimaryKey(1), NotNull] public string    FlavorPackage  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("FLAVOR_NAME"),     PrimaryKey(2), NotNull] public string    FlavorName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("FLAVOR_STEP"),     PrimaryKey(3), NotNull] public string    FlavorStep     { get; set; } // NVARCHAR(4)
		#nullable enable
		#nullable disable
		[Column("PARAM_LOCATION"),  PrimaryKey(4), NotNull] public string    ParamLocation  { get; set; } // NVARCHAR(4)
		#nullable enable
		#nullable disable
		[Column("PARAM_NAME"),      PrimaryKey(5), NotNull] public string    ParamName      { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("PARAM_VALUE"),        Nullable           ] public string?   ParamValue     { get; set; } // NVARCHAR(2048)
		[Column("VALUE_TYPE"),         Nullable           ] public string?   ValueType      { get; set; } // NVARCHAR(4)
		[Column("PARAM_MANDATORY"),                NotNull] public byte      ParamMandatory { get; set; } // TINYINT
		[Column("CHANGED_BY"),         Nullable           ] public string?   ChangedBy      { get; set; } // NVARCHAR(256)
		[Column("CHANGED_AT"),         Nullable           ] public DateTime? ChangedAt      { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="ODATA_SERVICES", IsView=true)]
	public partial class _SYS_XS_OdataService
	{
		#nullable disable
		[Column(),                NotNull    ] public string   PACKAGE      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("SERVICE_NAME"),  NotNull    ] public string   ServiceName  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                NotNull    ] public string   TYPE         { get; set; } // NVARCHAR(255)
		#nullable enable
		[Column("ACTIVATED_AT"),  NotNull    ] public DateTime ActivatedAt  { get; set; } // TIMESTAMP
		#nullable disable
		[Column("DELIVERY_UNIT"), NotNull    ] public string   DeliveryUnit { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                   Nullable] public string?  AUTHOR       { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="OPERATOR_DETAILS", IsView=true)]
	public partial class _SYS_SQL_ANALYZER_OperatorDetail
	{
		#nullable disable
		[Column("USER_NAME"),              NotNull    ] public string  UserName             { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("STATEMENT_EXECUTION_ID"),    Nullable] public string? StatementExecutionId { get; set; } // VARCHAR(32)
		[Column("OPERATOR_ID"),               Nullable] public string? OperatorId           { get; set; } // VARCHAR(256)
		[Column("OPERATOR_DETAILS_KEY"),      Nullable] public string? OperatorDetailsKey   { get; set; } // NVARCHAR(512)
		[Column("OPERATOR_DETAILS_VALUE"),    Nullable] public string? OperatorDetailsValue { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="OPERATOR_DETAILS_")]
	public partial class _SYS_SQL_ANALYZER_OperatorDetails
	{
		[Column("USER_NAME"),              Nullable] public string? UserName             { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"), Nullable] public string? StatementExecutionId { get; set; } // VARCHAR(32)
		[Column("OPERATOR_ID"),            Nullable] public string? OperatorId           { get; set; } // VARCHAR(256)
		[Column("OPERATOR_DETAILS_KEY"),   Nullable] public string? OperatorDetailsKey   { get; set; } // NVARCHAR(512)
		[Column("OPERATOR_DETAILS_VALUE"), Nullable] public string? OperatorDetailsValue { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="OPERATOR_STATISTICS", IsView=true)]
	public partial class _SYS_SQL_ANALYZER_OperatorStatistic
	{
		[Column("FROM_PLV"),                        Nullable] public string?   FromPlv                   { get; set; } // VARCHAR(5)
		#nullable disable
		[Column("USER_NAME"),                    NotNull    ] public string    UserName                  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("SCHEMA_NAME"),                     Nullable] public string?   SchemaName                { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"),          Nullable] public string?   StatementExecutionId      { get; set; } // VARCHAR(32)
		[Column("OPERATOR_ID"),                     Nullable] public string?   OperatorId                { get; set; } // VARCHAR(256)
		[Column("OPERATOR_NAME"),                   Nullable] public string?   OperatorName              { get; set; } // VARCHAR(256)
		[Column("OPERATOR_TYPE"),                   Nullable] public string?   OperatorType              { get; set; } // VARCHAR(32)
		[Column("IS_LOGICAL"),                      Nullable] public string?   IsLogical                 { get; set; } // VARCHAR(5)
		[Column("EXECUTION_ENGINE"),                Nullable] public string?   ExecutionEngine           { get; set; } // VARCHAR(64)
		[Column("PLAN_ID"),                         Nullable] public string?   PlanId                    { get; set; } // VARCHAR(256)
		[Column("SUB_PLAN"),                        Nullable] public string?   SubPlan                   { get; set; } // CLOB
		[Column("CHILD_OPERATOR_ID"),               Nullable] public string?   ChildOperatorId           { get; set; } // CLOB
		[Column("EXECUTION_STATUS"),                Nullable] public string?   ExecutionStatus           { get; set; } // VARCHAR(32)
		[Column("ACCESSED_OBJECT_NAMES"),           Nullable] public string?   AccessedObjectNames       { get; set; } // NVARCHAR(5000)
		[Column("TABLE_TYPE"),                      Nullable] public string?   TableType                 { get; set; } // VARCHAR(256)
		[Column("HOST_EXECUTED"),                   Nullable] public string?   HostExecuted              { get; set; } // VARCHAR(64)
		[Column("PORT_EXECUTED"),                   Nullable] public int?      PortExecuted              { get; set; } // INTEGER
		[Column("ACCESSED_PARTITION"),              Nullable] public string?   AccessedPartition         { get; set; } // VARCHAR(256)
		[Column("EXCLUSIVE_EXECUTION_TIME"),        Nullable] public long?     ExclusiveExecutionTime    { get; set; } // BIGINT
		[Column("EXECUTION_START_TIME"),            Nullable] public DateTime? ExecutionStartTime        { get; set; } // TIMESTAMP
		[Column("EXECUTION_END_TIME"),              Nullable] public DateTime? ExecutionEndTime          { get; set; } // TIMESTAMP
		[Column("EXECUTION_TIMESTAMPS"),            Nullable] public string?   ExecutionTimestamps       { get; set; } // CLOB
		[Column("CPU_TIME_SELF"),                   Nullable] public long?     CpuTimeSelf               { get; set; } // BIGINT
		[Column("ESTIMATED_OUTPUT_SIZE"),           Nullable] public double?   EstimatedOutputSize       { get; set; } // DOUBLE
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"),    Nullable] public long?     ExecutedOutputRecordCount { get; set; } // BIGINT
		[Column("OUTPUT_PAYLOAD_SIZE"),             Nullable] public long?     OutputPayloadSize         { get; set; } // BIGINT
		[Column("OPERATOR_DETAILS_SUMMARY"),        Nullable] public string?   OperatorDetailsSummary    { get; set; } // NCLOB
		[Column("OPERATOR_DETAILS"),                Nullable] public string?   OperatorDetails           { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="OPERATOR_STATISTICS_")]
	public partial class _SYS_SQL_ANALYZER_OperatorStatistics
	{
		[Column("FROM_PLV"),                     Nullable] public string?   FromPlv                   { get; set; } // VARCHAR(5)
		[Column("USER_NAME"),                    Nullable] public string?   UserName                  { get; set; } // NVARCHAR(256)
		[Column("SCHEMA_NAME"),                  Nullable] public string?   SchemaName                { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"),       Nullable] public string?   StatementExecutionId      { get; set; } // VARCHAR(32)
		[Column("OPERATOR_ID"),                  Nullable] public string?   OperatorId                { get; set; } // VARCHAR(256)
		[Column("OPERATOR_NAME"),                Nullable] public string?   OperatorName              { get; set; } // VARCHAR(256)
		[Column("OPERATOR_TYPE"),                Nullable] public string?   OperatorType              { get; set; } // VARCHAR(32)
		[Column("IS_LOGICAL"),                   Nullable] public string?   IsLogical                 { get; set; } // VARCHAR(5)
		[Column("EXECUTION_ENGINE"),             Nullable] public string?   ExecutionEngine           { get; set; } // VARCHAR(64)
		[Column("PLAN_ID"),                      Nullable] public string?   PlanId                    { get; set; } // VARCHAR(256)
		[Column("SUB_PLAN"),                     Nullable] public string?   SubPlan                   { get; set; } // CLOB
		[Column("CHILD_OPERATOR_ID"),            Nullable] public string?   ChildOperatorId           { get; set; } // CLOB
		[Column("EXECUTION_STATUS"),             Nullable] public string?   ExecutionStatus           { get; set; } // VARCHAR(32)
		[Column("ACCESSED_OBJECT_NAMES"),        Nullable] public string?   AccessedObjectNames       { get; set; } // NVARCHAR(5000)
		[Column("TABLE_TYPE"),                   Nullable] public string?   TableType                 { get; set; } // VARCHAR(256)
		[Column("HOST_EXECUTED"),                Nullable] public string?   HostExecuted              { get; set; } // VARCHAR(64)
		[Column("PORT_EXECUTED"),                Nullable] public int?      PortExecuted              { get; set; } // INTEGER
		[Column("ACCESSED_PARTITION"),           Nullable] public string?   AccessedPartition         { get; set; } // VARCHAR(256)
		[Column("EXCLUSIVE_EXECUTION_TIME"),     Nullable] public long?     ExclusiveExecutionTime    { get; set; } // BIGINT
		[Column("EXECUTION_START_TIME"),         Nullable] public DateTime? ExecutionStartTime        { get; set; } // TIMESTAMP
		[Column("EXECUTION_END_TIME"),           Nullable] public DateTime? ExecutionEndTime          { get; set; } // TIMESTAMP
		[Column("EXECUTION_TIMESTAMPS"),         Nullable] public string?   ExecutionTimestamps       { get; set; } // CLOB
		[Column("CPU_TIME_SELF"),                Nullable] public long?     CpuTimeSelf               { get; set; } // BIGINT
		[Column("ESTIMATED_OUTPUT_SIZE"),        Nullable] public double?   EstimatedOutputSize       { get; set; } // DOUBLE
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"), Nullable] public long?     ExecutedOutputRecordCount { get; set; } // BIGINT
		[Column("OUTPUT_PAYLOAD_SIZE"),          Nullable] public long?     OutputPayloadSize         { get; set; } // BIGINT
		[Column("OPERATOR_DETAILS_SUMMARY"),     Nullable] public string?   OperatorDetailsSummary    { get; set; } // NCLOB
		[Column("OPERATOR_DETAILS"),             Nullable] public string?   OperatorDetails           { get; set; } // NCLOB
	}

	/// <summary>
	/// Disposition specific memory object statistics. The statistics are calculated and reading them may take a while.
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="OUT_OF_MEMORY_EVENTS", IsView=true)]
	public partial class _SYS_TELEMETRY_OutOfMemoryEvent
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),          NotNull    ] public DateTime SnapshotId         { get; set; } // TIMESTAMP
		/// <summary>
		/// Time of OOM
		/// </summary>
		[Column(),                       NotNull    ] public DateTime TIME               { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Prepared statement ID
		/// </summary>
		[Column("STATEMENT_ID"),         NotNull    ] public string   StatementId        { get; set; } // VARCHAR(20)
		#nullable enable
		/// <summary>
		/// Allocator name in case of a heap memory failure
		/// </summary>
		[Column("HEAP_MEMORY_CATEGORY"),    Nullable] public string?  HeapMemoryCategory { get; set; } // VARCHAR(128)
		/// <summary>
		/// The size in bytes of the failed memory allocation
		/// </summary>
		[Column("MEMORY_REQUEST_SIZE"),     Nullable] public long?    MemoryRequestSize  { get; set; } // BIGINT
		/// <summary>
		/// The size in bytes currently allocated, depends on EVENT_REASON
		/// </summary>
		[Column("MEMORY_USED_SIZE"),        Nullable] public long?    MemoryUsedSize     { get; set; } // BIGINT
		/// <summary>
		/// Reason for OOM, e.g. GLOBAL ALLOCATION LIMIT, PROCESS ALLOCATION LIMIT, STATEMENT MEMORY LIMIT
		/// </summary>
		[Column("EVENT_REASON"),            Nullable] public string?  EventReason        { get; set; } // VARCHAR(32)
		/// <summary>
		/// The size of the limit, depends on EVENT_REASON
		/// </summary>
		[Column("MEMORY_LIMIT_SIZE"),       Nullable] public long?    MemoryLimitSize    { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="Parent")]
	public partial class Parent
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="ParentChildView", IsView=true)]
	public partial class ParentChildView
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
		[Column, Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="ParentView", IsView=true)]
	public partial class ParentView
	{
		[Column, Nullable] public int? ParentID { get; set; } // INTEGER
		[Column, Nullable] public int? Value1   { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="Patient")]
	public partial class Patient
	{
		[PrimaryKey, NotNull] public int    PersonID  { get; set; } // INTEGER
		#nullable disable
		[Column,     NotNull] public string Diagnosis { get; set; } // NVARCHAR(256)
		#nullable enable

		#region Associations

		#nullable disable
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient_Person", BackReferenceName="Patient")]
		public Person Person { get; set; }

		#nullable enable

		#endregion
	}

	[Table(Schema="_SYS_TASK", Name="PENDING_DROP_TASKS_")]
	public partial class _SYS_TASK_PendingDropTasks
	{
		[Column("TASK_OID"), Nullable] public long? TaskOid { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="Person")]
	public partial class Person
	{
		[PrimaryKey, Identity   ] public int     PersonID   { get; set; } // INTEGER
		#nullable disable
		[Column,     NotNull    ] public string  FirstName  { get; set; } // NVARCHAR(50)
		#nullable enable
		#nullable disable
		[Column,     NotNull    ] public string  LastName   { get; set; } // NVARCHAR(50)
		#nullable enable
		[Column,        Nullable] public string? MiddleName { get; set; } // NVARCHAR(50)
		[Column,     NotNull    ] public char    Gender     { get; set; } // CHAR(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Patient? Patient { get; set; }

		#endregion
	}

	[Table(Schema="_SYS_AFL", Name="PLUGIN_ERRORS")]
	public partial class _SYS_AFL_PluginError
	{
		[Column("PLUGIN_NAME"),    Nullable] public string? PluginName    { get; set; } // VARCHAR(32)
		[Column("ERROR_TEXT"),     Nullable] public string? ErrorText     { get; set; } // NVARCHAR(1024)
		[Column("AREA_NAME"),      Nullable] public string? AreaName      { get; set; } // NVARCHAR(256)
		[Column("AREA_STATUS"),    Nullable] public string? AreaStatus    { get; set; } // VARCHAR(32)
		[Column("PACKAGE_NAME"),   Nullable] public string? PackageName   { get; set; } // NVARCHAR(256)
		[Column("PACKAGE_STATUS"), Nullable] public string? PackageStatus { get; set; } // VARCHAR(32)
	}

	[Table(Schema="_SYS_RT", Name="PP_A_ALGORITHM")]
	public partial class _SYS_RT_PpAAlgorithm
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string  PackageId   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string  ObjectName  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("PDC_NAME"),       Nullable           ] public string? PdcName     { get; set; } // NVARCHAR(256)
		[Column("PDC_PACKAGE"),    Nullable           ] public string? PdcPackage  { get; set; } // NVARCHAR(256)
		[Column(),                 Nullable           ] public string? DESCRIPTION { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_RT", Name="PP_A_CHA")]
	public partial class _SYS_RT_PpACha
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string  PackageId   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string  ObjectName  { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                 Nullable           ] public string? DESCRIPTION { get; set; } // NVARCHAR(256)
		[Column("MSD_TABLE"),      Nullable           ] public string? MsdTable    { get; set; } // NVARCHAR(256)
		[Column(),                 Nullable           ] public long?   DATATYPE    { get; set; } // BIGINT
		[Column(),                 Nullable           ] public long?   LENGTH      { get; set; } // BIGINT
		[Column("READ_VIEW"),      Nullable           ] public string? ReadView    { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_RT", Name="PP_A_DATACONTAINER")]
	public partial class _SYS_RT_PpADatacontainer
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string  PackageId  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string  ObjectName { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("FACT_TABLE"),     Nullable           ] public string? FactTable  { get; set; } // NVARCHAR(256)
		[Column("READ_VIEW"),      Nullable           ] public string? ReadView   { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_RT", Name="PP_A_KYF")]
	public partial class _SYS_RT_PpAKyf
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string  PackageId     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string  ObjectName    { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                 Nullable           ] public string? DESCRIPTION   { get; set; } // NVARCHAR(256)
		[Column(),                 Nullable           ] public string? UNITDIMENSION { get; set; } // NVARCHAR(256)
		[Column(),                 Nullable           ] public string? CHARGEDUNIT   { get; set; } // NVARCHAR(256)
		[Column(),                 Nullable           ] public long?   DATATYPE      { get; set; } // BIGINT
		[Column(),                 Nullable           ] public long?   LENGTH        { get; set; } // BIGINT
		[Column(),                 Nullable           ] public long?   SCALE         { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_RT", Name="PP_A_SESSION")]
	public partial class _SYS_RT_PpASession
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string  PackageId  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string  ObjectName { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),              PrimaryKey(4), NotNull] public int     VERSION    { get; set; } // INTEGER
		#nullable disable
		[Column("READ_VIEW"),   PrimaryKey(3), NotNull] public string  ReadView   { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                 Nullable           ] public string? USER       { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="TESTHANA", Name="prd.global.ecc/CV_MARA")]
	public partial class PrdGlobalEccCvMara
	{
		[PrimaryKey, NotNull] public int Id { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_XS", Name="RUNTIME_CONFIGURATION")]
	public partial class _SYS_XS_RuntimeConfiguration
	{
		#nullable disable
		[Column("PACKAGE_ID"), PrimaryKey,  NotNull] public string    PackageId     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),                          NotNull] public string    CONFIGURATION { get; set; } // NVARCHAR(2048)
		#nullable enable
		[Column("CHANGED_BY"),    Nullable         ] public string?   ChangedBy     { get; set; } // NVARCHAR(256)
		[Column("CHANGED_AT"),    Nullable         ] public DateTime? ChangedAt     { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_XS", Name="RUNTIME_JSON_EXTENSIONS")]
	public partial class _SYS_XS_RuntimeJsonExtension
	{
		#nullable disable
		[Column("PACKAGE_ID"),    PrimaryKey(1), NotNull] public string  PackageId    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),   PrimaryKey(2), NotNull] public string  ObjectName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_SUFFIX"), PrimaryKey(3), NotNull] public string  ObjectSuffix { get; set; } // NVARCHAR(255)
		#nullable enable
		[Column(),                   Nullable           ] public string? CONTENT      { get; set; } // NVARCHAR(4096)
		[Column(),                   Nullable           ] public string? DESCRIPTION  { get; set; } // NVARCHAR(512)
	}

	[Table(Schema="_SYS_XS", Name="RUNTIME_JSON_OBJECTS")]
	public partial class _SYS_XS_RuntimeJsonObject
	{
		#nullable disable
		[Column("PACKAGE_ID"),    PrimaryKey(1), NotNull] public string  PackageId    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),   PrimaryKey(2), NotNull] public string  ObjectName   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_SUFFIX"), PrimaryKey(3), NotNull] public string  ObjectSuffix { get; set; } // NVARCHAR(255)
		#nullable enable
		[Column(),                   Nullable           ] public string? CONTENT      { get; set; } // NVARCHAR(4096)
	}

	[Table(Schema="_SYS_XS", Name="SAML_PROVIDER_CONFIG")]
	public partial class _SYS_XS_SamlProviderConfig
	{
		#nullable disable
		[Column("SAML_PROVIDER"),       PrimaryKey(1), NotNull] public string  SamlProvider       { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("PROFILE_TYPE"),        PrimaryKey(2), NotNull] public byte    ProfileType        { get; set; } // TINYINT
		[Column("BINDING_TYPE"),        PrimaryKey(3), NotNull] public byte    BindingType        { get; set; } // TINYINT
		#nullable disable
		[Column("DESTINATION_PACKAGE"),                NotNull] public string  DestinationPackage { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("DESTINATION_NAME"),                   NotNull] public string  DestinationName    { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                         Nullable           ] public string? PATH               { get; set; } // NVARCHAR(2048)
	}

	[Table(Schema="TESTHANA", Name="SapHana")]
	public partial class SapHana
	{
		[PrimaryKey, NotNull    ] public int     Id            { get; set; } // INTEGER
		[Column,        Nullable] public string? DuplicateData { get; set; } // NVARCHAR(255)
		[Column,     NotNull    ] public int     OrderData1    { get; set; } // INTEGER
		[Column,     NotNull    ] public int     OrderData2    { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="SEARCH_RULE_SETS")]
	public partial class _SYS_RT_SearchRuleSet
	{
		[Column("SCHEMA_NAME"), Nullable] public string? SchemaName { get; set; } // NVARCHAR(256)
		[Column("PACKAGE_ID"),  Nullable] public string? PackageId  { get; set; } // NVARCHAR(256)
		[Column("RULE_SET"),    Nullable] public string? RuleSet    { get; set; } // NVARCHAR(256)
		[Column("RULE_ID"),     Nullable] public string? RuleId     { get; set; } // NVARCHAR(256)
		[Column("ORDER_"),      Nullable] public int?    Order      { get; set; } // INTEGER
		[Column(),              Nullable] public string? COLUMN     { get; set; } // NVARCHAR(256)
		[Column(),              Nullable] public string? PARAMETER  { get; set; } // NVARCHAR(256)
		[Column(),              Nullable] public string? VALUE      { get; set; } // NVARCHAR(256)
	}

	[Table(Schema="_SYS_XS", Name="SECURE_STORE")]
	public partial class _SYS_XS_SecureStore
	{
		#nullable disable
		[Column("STORE_ID"),   PrimaryKey(1), NotNull] public string StoreId   { get; set; } // NVARCHAR(530)
		#nullable enable
		[Column("USER_ID"),    PrimaryKey(2), NotNull] public long   UserId    { get; set; } // BIGINT
		#nullable disable
		[Column("DATA_ID"),    PrimaryKey(3), NotNull] public string DataId    { get; set; } // NVARCHAR(1024)
		#nullable enable
		#nullable disable
		[Column("DATA_VALUE"),                NotNull] public byte[] DataValue { get; set; } // VARBINARY(5000)
		#nullable enable
	}

	[Table(Schema="_SYS_XS", Name="SECURE_STORE_LIST")]
	public partial class _SYS_XS_SecureStoreList
	{
		#nullable disable
		[Column("PACKAGE_ID"),  PrimaryKey(1), NotNull] public string PackageId  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"), PrimaryKey(2), NotNull] public string ObjectName { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("IS_ACTIVE"),                  NotNull] public byte   IsActive   { get; set; } // TINYINT
	}

	/// <summary>
	/// Telemetry Server Information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="SERVER")]
	public partial class _SYS_TELEMETRY_SERVER
	{
		#nullable disable
		/// <summary>
		/// Telemetry central server URL.
		/// </summary>
		[Column("SERVER_URL"), NotNull] public string ServerUrl { get; set; } // VARCHAR(2083)
		#nullable enable
	}

	/// <summary>
	/// Detailed information on memory utilization by services
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="SERVICE_MEMORY", IsView=true)]
	public partial class _SYS_TELEMETRY_ServiceMemory
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),                  NotNull    ] public DateTime SnapshotId                { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Service name
		/// </summary>
		[Column("SERVICE_NAME"),                 NotNull    ] public string   ServiceName               { get; set; } // VARCHAR(32)
		#nullable enable
		/// <summary>
		/// Virtual memory size (operating system perspective)
		/// </summary>
		[Column("LOGICAL_MEMORY_SIZE"),             Nullable] public long?    LogicalMemorySize         { get; set; } // BIGINT
		/// <summary>
		/// Physical/resident memory size (operating system perspective)
		/// </summary>
		[Column("PHYSICAL_MEMORY_SIZE"),            Nullable] public long?    PhysicalMemorySize        { get; set; } // BIGINT
		/// <summary>
		/// Stack size
		/// </summary>
		[Column("STACK_SIZE"),                      Nullable] public long?    StackSize                 { get; set; } // BIGINT
		/// <summary>
		/// Heap part of the memory pool
		/// </summary>
		[Column("HEAP_MEMORY_ALLOCATED_SIZE"),      Nullable] public long?    HeapMemoryAllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool heap memory that is currently actually in use
		/// </summary>
		[Column("HEAP_MEMORY_USED_SIZE"),           Nullable] public long?    HeapMemoryUsedSize        { get; set; } // BIGINT
		/// <summary>
		/// Shared memory part of the memory pool
		/// </summary>
		[Column("SHARED_MEMORY_ALLOCATED_SIZE"),    Nullable] public long?    SharedMemoryAllocatedSize { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool shared memory that is currently actually in use
		/// </summary>
		[Column("SHARED_MEMORY_USED_SIZE"),         Nullable] public long?    SharedMemoryUsedSize      { get; set; } // BIGINT
		/// <summary>
		/// Effective maximum memory pool size, considering pool sizes of other processes (computed value)
		/// </summary>
		[Column("EFFECTIVE_ALLOCATION_LIMIT"),      Nullable] public long?    EffectiveAllocationLimit  { get; set; } // BIGINT
		/// <summary>
		/// Amount of memory from the memory pool that is currently actually in use
		/// </summary>
		[Column("TOTAL_MEMORY_USED_SIZE"),          Nullable] public long?    TotalMemoryUsedSize       { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_XS", Name="SQL_CONNECTIONS")]
	public partial class _SYS_XS_SqlConnection
	{
		#nullable disable
		[Column(),                 PrimaryKey,  NotNull] public string    NAME         { get; set; } // NVARCHAR(512)
		#nullable enable
		#nullable disable
		[Column("PACKAGE_ID"),                  NotNull] public string    PackageId    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("OBJECT_NAME"),                 NotNull] public string    ObjectName   { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                    Nullable         ] public string?   USERNAME     { get; set; } // NVARCHAR(256)
		#nullable disable
		[Column(),                              NotNull] public string    DESCRIPTION  { get; set; } // NVARCHAR(2048)
		#nullable enable
		[Column("ASSIGNED_BY"),       Nullable         ] public string?   AssignedBy   { get; set; } // NVARCHAR(256)
		[Column("ASSIGNED_AT"),       Nullable         ] public DateTime? AssignedAt   { get; set; } // TIMESTAMP
		[Column("AUTO_USER_ROLE"),    Nullable         ] public string?   AutoUserRole { get; set; } // NVARCHAR(256)
		#nullable disable
		[Column(),                              NotNull] public string    STATUS       { get; set; } // VARCHAR(16)
		#nullable enable
	}

	/// <summary>
	/// This table contains messages generated by start task command
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="START_TASK_MESSAGES", IsView=true)]
	public partial class _SYS_TASK_StartTaskMessage
	{
		/// <summary>
		/// The unique ID for a particular run of a task plan created when "START TASK" is called
		/// </summary>
		[Column("TASK_EXECUTION_ID"), NotNull    ] public long      TaskExecutionId { get; set; } // BIGINT
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),       NotNull    ] public string    SchemaName      { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),         NotNull    ] public string    TaskName        { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the operation producing the message
		/// </summary>
		[Column("OPERATION_NAME"),       Nullable] public string?   OperationName   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Error, warning, or information
		/// </summary>
		[Column(),                       Nullable] public string?   SEVERITY        { get; set; } // NVARCHAR(12)
		/// <summary>
		/// The ID of the message
		/// </summary>
		[Column("MESSAGE_ID"),           Nullable] public string?   MessageId       { get; set; } // NVARCHAR(8)
		/// <summary>
		/// The message text
		/// </summary>
		[Column("MESSAGE_TEXT"),         Nullable] public string?   MessageText     { get; set; } // NVARCHAR(2048)
		/// <summary>
		/// The time the message was issued
		/// </summary>
		[Column("MESSAGE_TIME"),         Nullable] public DateTime? MessageTime     { get; set; } // SECONDDATE
	}

	[Table(Schema="_SYS_TASK", Name="START_TASK_MESSAGES_")]
	public partial class _SYS_TASK_StartTaskMessages
	{
		[Column("TASK_EXECUTION_ID"), Nullable] public long?     TaskExecutionId { get; set; } // BIGINT
		[Column("OPERATION_NAME"),    Nullable] public string?   OperationName   { get; set; } // NVARCHAR(128)
		[Column(),                    Nullable] public string?   SEVERITY        { get; set; } // NVARCHAR(12)
		[Column("MESSAGE_ID"),        Nullable] public string?   MessageId       { get; set; } // NVARCHAR(8)
		[Column("MESSAGE_TEXT"),      Nullable] public string?   MessageText     { get; set; } // NVARCHAR(2048)
		[Column("MESSAGE_TIME"),      Nullable] public DateTime? MessageTime     { get; set; } // SECONDDATE
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="STATEMENT_STATISTICS", IsView=true)]
	public partial class _SYS_SQL_ANALYZER_StatementStatistic
	{
		[Column("FROM_PLV"),                          Nullable] public string?   FromPlv                      { get; set; } // VARCHAR(5)
		[Column("FEATURE_VERSION"),                   Nullable] public int?      FeatureVersion               { get; set; } // INTEGER
		[Column("SYSTEM_VERSION"),                    Nullable] public string?   SystemVersion                { get; set; } // VARCHAR(512)
		[Column("CONNECTION_ID"),                     Nullable] public int?      ConnectionId                 { get; set; } // INTEGER
		#nullable disable
		[Column("USER_NAME"),                      NotNull    ] public string    UserName                     { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column("SCHEMA_NAME"),                       Nullable] public string?   SchemaName                   { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"),            Nullable] public string?   StatementExecutionId         { get; set; } // VARCHAR(32)
		[Column("CHILD_STATEMENT_EXECUTION_ID"),      Nullable] public string?   ChildStatementExecutionId    { get; set; } // CLOB
		[Column("STATEMENT_HASH"),                    Nullable] public string?   StatementHash                { get; set; } // VARCHAR(32)
		[Column("STATEMENT_STRING"),                  Nullable] public string?   StatementString              { get; set; } // NCLOB
		[Column("COMPILATION_START_TIME"),            Nullable] public DateTime? CompilationStartTime         { get; set; } // TIMESTAMP
		[Column("COMPILATION_END_TIME"),              Nullable] public DateTime? CompilationEndTime           { get; set; } // TIMESTAMP
		[Column("COMPILATION_SUMMARY"),               Nullable] public string?   CompilationSummary           { get; set; } // NCLOB
		[Column("EXECUTION_STATUS"),                  Nullable] public string?   ExecutionStatus              { get; set; } // VARCHAR(32)
		[Column("EXECUTION_START_TIME"),              Nullable] public DateTime? ExecutionStartTime           { get; set; } // TIMESTAMP
		[Column("EXECUTION_END_TIME"),                Nullable] public DateTime? ExecutionEndTime             { get; set; } // TIMESTAMP
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"),      Nullable] public long?     ExecutedOutputRecordCount    { get; set; } // BIGINT
		[Column("USED_MEMORY_SIZE"),                  Nullable] public string?   UsedMemorySize               { get; set; } // NCLOB
		[Column("SQLSCRIPT_STATEMENT_STATISTICS"),    Nullable] public string?   SqlscriptStatementStatistics { get; set; } // NCLOB
	}

	[Table(Schema="_SYS_SQL_ANALYZER", Name="STATEMENT_STATISTICS_")]
	public partial class _SYS_SQL_ANALYZER_StatementStatistics
	{
		[Column("FROM_PLV"),                       Nullable] public string?   FromPlv                      { get; set; } // VARCHAR(5)
		[Column("FEATURE_VERSION"),                Nullable] public int?      FeatureVersion               { get; set; } // INTEGER
		[Column("SYSTEM_VERSION"),                 Nullable] public string?   SystemVersion                { get; set; } // VARCHAR(512)
		[Column("CONNECTION_ID"),                  Nullable] public int?      ConnectionId                 { get; set; } // INTEGER
		[Column("USER_NAME"),                      Nullable] public string?   UserName                     { get; set; } // NVARCHAR(256)
		[Column("SCHEMA_NAME"),                    Nullable] public string?   SchemaName                   { get; set; } // NVARCHAR(256)
		[Column("STATEMENT_EXECUTION_ID"),         Nullable] public string?   StatementExecutionId         { get; set; } // VARCHAR(32)
		[Column("CHILD_STATEMENT_EXECUTION_ID"),   Nullable] public string?   ChildStatementExecutionId    { get; set; } // CLOB
		[Column("STATEMENT_HASH"),                 Nullable] public string?   StatementHash                { get; set; } // VARCHAR(32)
		[Column("STATEMENT_STRING"),               Nullable] public string?   StatementString              { get; set; } // NCLOB
		[Column("COMPILATION_START_TIME"),         Nullable] public DateTime? CompilationStartTime         { get; set; } // TIMESTAMP
		[Column("COMPILATION_END_TIME"),           Nullable] public DateTime? CompilationEndTime           { get; set; } // TIMESTAMP
		[Column("COMPILATION_SUMMARY"),            Nullable] public string?   CompilationSummary           { get; set; } // NCLOB
		[Column("EXECUTION_STATUS"),               Nullable] public string?   ExecutionStatus              { get; set; } // VARCHAR(32)
		[Column("EXECUTION_START_TIME"),           Nullable] public DateTime? ExecutionStartTime           { get; set; } // TIMESTAMP
		[Column("EXECUTION_END_TIME"),             Nullable] public DateTime? ExecutionEndTime             { get; set; } // TIMESTAMP
		[Column("EXECUTED_OUTPUT_RECORD_COUNT"),   Nullable] public long?     ExecutedOutputRecordCount    { get; set; } // BIGINT
		[Column("USED_MEMORY_SIZE"),               Nullable] public string?   UsedMemorySize               { get; set; } // NCLOB
		[Column("SQLSCRIPT_STATEMENT_STATISTICS"), Nullable] public string?   SqlscriptStatementStatistics { get; set; } // NCLOB
	}

	/// <summary>
	/// Alerts issued by the embedded statistics service
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_ALERTS", IsView=true)]
	public partial class SYS_DATABASES_StatisticsAlert
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),   Nullable] public string?   DatabaseName   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Time at which the alert occurred (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),     Nullable] public DateTime? SnapshotId     { get; set; } // TIMESTAMP
		/// <summary>
		/// Unique check ID
		/// </summary>
		[Column("ALERT_ID"),        Nullable] public int?      AlertId        { get; set; } // INTEGER
		/// <summary>
		/// Index that distinguishes multiple occurrences of the same alert in a SNAPSHOT_ID. For example, if a check that examines database tables issues an alert for several tables, the index is the table name.
		/// </summary>
		[Column(),                  Nullable] public string?   INDEX          { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Host name on which the alert occurred.
		/// </summary>
		[Column("ALERT_HOST"),      Nullable] public string?   AlertHost      { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Port number on which the alert occurred.
		/// </summary>
		[Column("ALERT_PORT"),      Nullable] public int?      AlertPort      { get; set; } // INTEGER
		/// <summary>
		/// Severity of the alert occurrence. This may be different for each INDEX (per ALERT_ID+SNAPSHOT_ID). The following values are possible: 1 (info), 2 (warning1), 3 (warning2), 4 (warning3), 5 (error).
		/// </summary>
		[Column("ALERT_RATING"),    Nullable] public byte?     AlertRating    { get; set; } // TINYINT
		/// <summary>
		/// Time at which the alert occurred in the local server time (convenience field)
		/// </summary>
		[Column("ALERT_TIMESTAMP"), Nullable] public DateTime? AlertTimestamp { get; set; } // TIMESTAMP
		/// <summary>
		/// Human-readable alert text
		/// </summary>
		[Column("ALERT_DETAILS"),   Nullable] public string?   AlertDetails   { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Column for the management of external processing of alert. Not used by the embedded statistics service
		/// </summary>
		[Column("PROCESS_STATE"),   Nullable] public byte?     ProcessState   { get; set; } // TINYINT
		/// <summary>
		/// Column for the management of external processing of alert. Not used by the embedded statistics service
		/// </summary>
		[Column("PROCESS_TIME"),    Nullable] public DateTime? ProcessTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Column for the management of external processing of alert. Not used by the embedded statistics service
		/// </summary>
		[Column("PROCESS_AGENT"),   Nullable] public string?   ProcessAgent   { get; set; } // NVARCHAR(256)
	}

	/// <summary>
	/// Definition of alert thresholds for checks of the embedded statistics service
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_ALERT_THRESHOLDS", IsView=true)]
	public partial class SYS_DATABASES_StatisticsAlertThreshold
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"), Nullable] public string?   DatabaseName { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of check
		/// </summary>
		[Column("ALERT_ID"),      Nullable] public int?      AlertId      { get; set; } // INTEGER
		/// <summary>
		/// Severity of the alert issued when the threshold value is reached. The following values are possible: 1 (info), 2 (warning1), 3 (warning2), 4 (warning3) , 5 (error).
		/// </summary>
		[Column(),                Nullable] public int?      SEVERITY     { get; set; } // INTEGER
		/// <summary>
		/// Unit of the threshold value (for example, millisecond, percent, and so on). This value is freely definable and used for information only.
		/// </summary>
		[Column(),                Nullable] public string?   UNIT         { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Default threshold value. This value cannot be changed. It is used when there is no value specified in the CURRENT_VALUE column.
		/// </summary>
		[Column("DEFAULT_VALUE"), Nullable] public string?   DefaultValue { get; set; } // NVARCHAR(256)
		/// <summary>
		/// User-defined threshold value. This value overrides the value in the DEFAULT_VALUE column.
		/// </summary>
		[Column("CURRENT_VALUE"), Nullable] public string?   CurrentValue { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Time (UTC) at which the threshold value was reached
		/// </summary>
		[Column("REACHED_AT"),    Nullable] public DateTime? ReachedAt    { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// Alerts issued by checks during their most recently scheduled execution
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_CURRENT_ALERTS", IsView=true)]
	public partial class SYS_DATABASES_StatisticsCurrentAlert
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),     Nullable] public string?   DatabaseName     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique check ID
		/// </summary>
		[Column("ALERT_ID"),          Nullable] public int?      AlertId          { get; set; } // INTEGER
		/// <summary>
		/// Index that distinguishes multiple occurrences of the same alert in a SNAPSHOT_ID. For example, if a check that examines database tables issues an alert for several tables, the index is the table name.
		/// </summary>
		[Column(),                    Nullable] public string?   INDEX            { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Host name on which the alert occurred.
		/// </summary>
		[Column("ALERT_HOST"),        Nullable] public string?   AlertHost        { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Port number on which the alert occurred.
		/// </summary>
		[Column("ALERT_PORT"),        Nullable] public int?      AlertPort        { get; set; } // INTEGER
		/// <summary>
		/// Time at which the alert occurred (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),       Nullable] public DateTime? SnapshotId       { get; set; } // TIMESTAMP
		/// <summary>
		/// Check description
		/// </summary>
		[Column("ALERT_DESCRIPTION"), Nullable] public string?   AlertDescription { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Human-readable alert text
		/// </summary>
		[Column("ALERT_DETAILS"),     Nullable] public string?   AlertDetails     { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Short name of check
		/// </summary>
		[Column("ALERT_NAME"),        Nullable] public string?   AlertName        { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Severity of the alert occurrence. This may be different for each INDEX (per ALERT_ID+SNAPSHOT_ID). The following values are possible: 1 (info), 2 (warning1), 3 (warning2), 4 (warning3), 5 (error).
		/// </summary>
		[Column("ALERT_RATING"),      Nullable] public byte?     AlertRating      { get; set; } // TINYINT
		/// <summary>
		/// Time at which the alert occurred in the local server time (convenience field)
		/// </summary>
		[Column("ALERT_TIMESTAMP"),   Nullable] public DateTime? AlertTimestamp   { get; set; } // TIMESTAMP
		/// <summary>
		/// Recommended action to be taken by an administrator when the check issues an alert
		/// </summary>
		[Column("ALERT_USERACTION"),  Nullable] public string?   AlertUseraction  { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Indicates whether the check was triggered by the scheduler ('Timer') or by the user ('Manual')
		/// </summary>
		[Column(),                    Nullable] public string?   SCHEDULE         { get; set; } // VARCHAR(6)
	}

	/// <summary>
	/// Memory allocator statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_HEAP_ALLOCATORS", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostHeapAllocator
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                        Nullable] public string?   DatabaseName                     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),                          Nullable] public DateTime? SnapshotId                       { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"),                     Nullable] public DateTime? ServerTimestamp                  { get; set; } // TIMESTAMP
		/// <summary>
		/// Allocator name
		/// </summary>
		[Column(),                                       Nullable] public string?   CATEGORY                         { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Depth
		/// </summary>
		[Column(),                                       Nullable] public long?     DEPTH                            { get; set; } // BIGINT
		/// <summary>
		/// Count of allocations
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?     ExclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?     ExclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Count of allocation errors
		/// </summary>
		[Column("EXCLUSIVE_ALLOC_ERRORS"),               Nullable] public long?     ExclusiveAllocErrors             { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use
		/// </summary>
		[Column("EXCLUSIVE_COUNT_IN_USE"),               Nullable] public long?     ExclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?     ExclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?     ExclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator
		/// </summary>
		[Column("EXCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?     ExclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator (estimate)
		/// </summary>
		[Column("EXCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?     ExclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator
		/// </summary>
		[Column("EXCLUSIVE_SIZE_IN_USE"),                Nullable] public long?     ExclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Allocator flags
		/// </summary>
		[Column(),                                       Nullable] public string?   FLAGS                            { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Count of allocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_COUNT"),            Nullable] public long?     InclusiveAllocatedCount          { get; set; } // BIGINT
		/// <summary>
		/// Total allocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_ALLOCATED_SIZE"),             Nullable] public long?     InclusiveAllocatedSize           { get; set; } // BIGINT
		/// <summary>
		/// Number of blocks currently in use, including suballocators
		/// </summary>
		[Column("INCLUSIVE_COUNT_IN_USE"),               Nullable] public long?     InclusiveCountInUse              { get; set; } // BIGINT
		/// <summary>
		/// Count of deallocations, including suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_COUNT"),          Nullable] public long?     InclusiveDeallocatedCount        { get; set; } // BIGINT
		/// <summary>
		/// Total deallocated size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_DEALLOCATED_SIZE"),           Nullable] public long?     InclusiveDeallocatedSize         { get; set; } // BIGINT
		/// <summary>
		/// Maximum ever allocated block size in this allocator and suballocators
		/// </summary>
		[Column("INCLUSIVE_MAX_SINGLE_ALLOCATION_SIZE"), Nullable] public long?     InclusiveMaxSingleAllocationSize { get; set; } // BIGINT
		/// <summary>
		/// Maximum size of this allocator and suballocators (estimate)
		/// </summary>
		[Column("INCLUSIVE_PEAK_ALLOCATION_SIZE"),       Nullable] public long?     InclusivePeakAllocationSize      { get; set; } // BIGINT
		/// <summary>
		/// Current size of this allocator, including suballocators
		/// </summary>
		[Column("INCLUSIVE_SIZE_IN_USE"),                Nullable] public long?     InclusiveSizeInUse               { get; set; } // BIGINT
		/// <summary>
		/// Deprecated
		/// </summary>
		[Column("MALLOC_PROXY_CACHE_MISSES"),            Nullable] public long?     MallocProxyCacheMisses           { get; set; } // BIGINT
		/// <summary>
		/// Statistics object unique ID
		/// </summary>
		[Column("STATISTICS_ID"),                        Nullable] public long?     StatisticsId                     { get; set; } // BIGINT
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                            Nullable] public int?      VolumeId                         { get; set; } // INTEGER
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                       Nullable] public string?   HOST                             { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                       Nullable] public int?      PORT                             { get; set; } // INTEGER
	}

	/// <summary>
	/// RS Memory Statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_RS_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostRsMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),      Nullable] public DateTime? SnapshotId      { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"), Nullable] public DateTime? ServerTimestamp { get; set; } // TIMESTAMP
		/// <summary>
		/// Allocated memory size of the module
		/// </summary>
		[Column("ALLOCATED_SIZE"),   Nullable] public long?     AllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Module name
		/// </summary>
		[Column(),                   Nullable] public string?   CATEGORY        { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Free memory size of the module
		/// </summary>
		[Column("FREE_SIZE"),        Nullable] public long?     FreeSize        { get; set; } // BIGINT
		/// <summary>
		/// Used memory size of the module
		/// </summary>
		[Column("USED_SIZE"),        Nullable] public long?     UsedSize        { get; set; } // BIGINT
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                   Nullable] public string?   HOST            { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                   Nullable] public int?      PORT            { get; set; } // INTEGER
	}

	/// <summary>
	/// Service-specific memory usage by logical component
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_SERVICE_COMPONENT_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostServiceComponentMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),    Nullable] public string?   DatabaseName    { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),      Nullable] public DateTime? SnapshotId      { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"), Nullable] public DateTime? ServerTimestamp { get; set; } // TIMESTAMP
		/// <summary>
		/// The logical component for which memory usage is reported
		/// </summary>
		[Column(),                   Nullable] public string?   COMPONENT       { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Amount of memory which is currently actually used for the logical component
		/// </summary>
		[Column("USED_MEMORY_SIZE"), Nullable] public long?     UsedMemorySize  { get; set; } // BIGINT
		/// <summary>
		/// Host where the service is running
		/// </summary>
		[Column(),                   Nullable] public string?   HOST            { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Port where the service is running
		/// </summary>
		[Column(),                   Nullable] public int?      PORT            { get; set; } // INTEGER
	}

	/// <summary>
	/// Detailed information on memory utilization by services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_SERVICE_MEMORY", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostServiceMemory
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                Nullable] public string?   DatabaseName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),                  Nullable] public DateTime? SnapshotId                { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"),             Nullable] public DateTime? ServerTimestamp           { get; set; } // TIMESTAMP
		/// <summary>
		/// Maximum memory pool size (configurable value)
		/// </summary>
		[Column("ALLOCATION_LIMIT"),             Nullable] public long?     AllocationLimit           { get; set; } // BIGINT
		/// <summary>
		/// Code size, including shared libraries
		/// </summary>
		[Column("CODE_SIZE"),                    Nullable] public long?     CodeSize                  { get; set; } // BIGINT
		/// <summary>
		/// Part of the memory pool that can potentially (=if unpinned) be freed on memory shortage
		/// </summary>
		[Column("COMPACTORS_ALLOCATED_SIZE"),    Nullable] public long?     CompactorsAllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Memory which can actually be freed on memory shortage
		/// </summary>
		[Column("COMPACTORS_FREEABLE_SIZE"),     Nullable] public long?     CompactorsFreeableSize    { get; set; } // BIGINT
		/// <summary>
		/// Effective maximum memory pool size, considering pool sizes of other processes (computed value)
		/// </summary>
		[Column("EFFECTIVE_ALLOCATION_LIMIT"),   Nullable] public long?     EffectiveAllocationLimit  { get; set; } // BIGINT
		/// <summary>
		/// Heap part of the memory pool
		/// </summary>
		[Column("HEAP_MEMORY_ALLOCATED_SIZE"),   Nullable] public long?     HeapMemoryAllocatedSize   { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool heap memory that is currently actually in use
		/// </summary>
		[Column("HEAP_MEMORY_USED_SIZE"),        Nullable] public long?     HeapMemoryUsedSize        { get; set; } // BIGINT
		/// <summary>
		/// Virtual memory size (operating system perspective)
		/// </summary>
		[Column("LOGICAL_MEMORY_SIZE"),          Nullable] public long?     LogicalMemorySize         { get; set; } // BIGINT
		/// <summary>
		/// Physical/resident memory size (operating system perspective)
		/// </summary>
		[Column("PHYSICAL_MEMORY_SIZE"),         Nullable] public long?     PhysicalMemorySize        { get; set; } // BIGINT
		/// <summary>
		/// Process ID
		/// </summary>
		[Column("PROCESS_ID"),                   Nullable] public int?      ProcessId                 { get; set; } // INTEGER
		/// <summary>
		/// Service name
		/// </summary>
		[Column("SERVICE_NAME"),                 Nullable] public string?   ServiceName               { get; set; } // NVARCHAR(32)
		/// <summary>
		/// Shared memory part of the memory pool
		/// </summary>
		[Column("SHARED_MEMORY_ALLOCATED_SIZE"), Nullable] public long?     SharedMemoryAllocatedSize { get; set; } // BIGINT
		/// <summary>
		/// Amount of pool shared memory that is currently actually in use
		/// </summary>
		[Column("SHARED_MEMORY_USED_SIZE"),      Nullable] public long?     SharedMemoryUsedSize      { get; set; } // BIGINT
		/// <summary>
		/// Stack size
		/// </summary>
		[Column("STACK_SIZE"),                   Nullable] public long?     StackSize                 { get; set; } // BIGINT
		/// <summary>
		/// Amount of memory from the memory pool that is currently actually in use
		/// </summary>
		[Column("TOTAL_MEMORY_USED_SIZE"),       Nullable] public long?     TotalMemoryUsedSize       { get; set; } // BIGINT
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                               Nullable] public string?   HOST                      { get; set; } // NVARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                               Nullable] public int?      PORT                      { get; set; } // INTEGER
	}

	/// <summary>
	/// Information about replicated services
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_SERVICE_REPLICATION", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostServiceReplication
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                         Nullable] public string?   DatabaseName                     { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),                           Nullable] public DateTime? SnapshotId                       { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"),                      Nullable] public DateTime? ServerTimestamp                  { get; set; } // TIMESTAMP
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                        Nullable] public string?   HOST                             { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                        Nullable] public int?      PORT                             { get; set; } // INTEGER
		/// <summary>
		/// Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                             Nullable] public int?      VolumeId                         { get; set; } // INTEGER
		/// <summary>
		/// Generated site ID
		/// </summary>
		[Column("SITE_ID"),                               Nullable] public int?      SiteId                           { get; set; } // INTEGER
		/// <summary>
		/// Logical site name
		/// </summary>
		[Column("SITE_NAME"),                             Nullable] public string?   SiteName                         { get; set; } // VARCHAR(256)
		/// <summary>
		/// Secondary host name
		/// </summary>
		[Column("SECONDARY_HOST"),                        Nullable] public string?   SecondaryHost                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Secondary port
		/// </summary>
		[Column("SECONDARY_PORT"),                        Nullable] public int?      SecondaryPort                    { get; set; } // INTEGER
		/// <summary>
		/// Generated ID of secondary site
		/// </summary>
		[Column("SECONDARY_SITE_ID"),                     Nullable] public int?      SecondarySiteId                  { get; set; } // INTEGER
		/// <summary>
		/// Secondary logical site name
		/// </summary>
		[Column("SECONDARY_SITE_NAME"),                   Nullable] public string?   SecondarySiteName                { get; set; } // VARCHAR(256)
		/// <summary>
		/// Secondary active status
		/// </summary>
		[Column("SECONDARY_ACTIVE_STATUS"),               Nullable] public string?   SecondaryActiveStatus            { get; set; } // VARCHAR(16)
		/// <summary>
		/// Time the connection was established from the secondary
		/// </summary>
		[Column("SECONDARY_CONNECT_TIME"),                Nullable] public DateTime? SecondaryConnectTime             { get; set; } // TIMESTAMP
		/// <summary>
		/// Secondary reconnect count
		/// </summary>
		[Column("SECONDARY_RECONNECT_COUNT"),             Nullable] public int?      SecondaryReconnectCount          { get; set; } // INTEGER
		/// <summary>
		/// Secondary failover count
		/// </summary>
		[Column("SECONDARY_FAILOVER_COUNT"),              Nullable] public int?      SecondaryFailoverCount           { get; set; } // INTEGER
		/// <summary>
		/// Indicates if secondary is fully recoverable.
		/// </summary>
		[Column("SECONDARY_FULLY_RECOVERABLE"),           Nullable] public string?   SecondaryFullyRecoverable        { get; set; } // VARCHAR(5)
		/// <summary>
		/// Replication mode
		/// </summary>
		[Column("REPLICATION_MODE"),                      Nullable] public string?   ReplicationMode                  { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status
		/// </summary>
		[Column("REPLICATION_STATUS"),                    Nullable] public string?   ReplicationStatus                { get; set; } // VARCHAR(16)
		/// <summary>
		/// Replication status details
		/// </summary>
		[Column("REPLICATION_STATUS_DETAILS"),            Nullable] public string?   ReplicationStatusDetails         { get; set; } // VARCHAR(1024)
		/// <summary>
		/// Full sync status
		/// </summary>
		[Column("FULL_SYNC"),                             Nullable] public string?   FullSync                         { get; set; } // VARCHAR(16)
		/// <summary>
		/// Current log position
		/// </summary>
		[Column("LAST_LOG_POSITION"),                     Nullable] public long?     LastLogPosition                  { get; set; } // BIGINT
		/// <summary>
		/// Current log position timestamp
		/// </summary>
		[Column("LAST_LOG_POSITION_TIME"),                Nullable] public DateTime? LastLogPositionTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Current savepoint version
		/// </summary>
		[Column("LAST_SAVEPOINT_VERSION"),                Nullable] public int?      LastSavepointVersion             { get; set; } // INTEGER
		/// <summary>
		/// Current savepoint log position
		/// </summary>
		[Column("LAST_SAVEPOINT_LOG_POSITION"),           Nullable] public long?     LastSavepointLogPosition         { get; set; } // BIGINT
		/// <summary>
		/// Current savepoint timestamp
		/// </summary>
		[Column("LAST_SAVEPOINT_START_TIME"),             Nullable] public DateTime? LastSavepointStartTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log position
		/// </summary>
		[Column("SHIPPED_LOG_POSITION"),                  Nullable] public long?     ShippedLogPosition               { get; set; } // BIGINT
		/// <summary>
		/// Shipped log position timestamp
		/// </summary>
		[Column("SHIPPED_LOG_POSITION_TIME"),             Nullable] public DateTime? ShippedLogPositionTime           { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped log buffers count
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_COUNT"),             Nullable] public long?     ShippedLogBuffersCount           { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers size in bytes
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_SIZE"),              Nullable] public long?     ShippedLogBuffersSize            { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffer duration in microseconds
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_DURATION"),          Nullable] public long?     ShippedLogBuffersDuration        { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers count (delta)
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_COUNT_DELTA"),       Nullable] public long?     ShippedLogBuffersCountDelta      { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffers size in bytes (delta)
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_SIZE_DELTA"),        Nullable] public long?     ShippedLogBuffersSizeDelta       { get; set; } // BIGINT
		/// <summary>
		/// Shipped log buffer duration in microseconds (delta)
		/// </summary>
		[Column("SHIPPED_LOG_BUFFERS_DURATION_DELTA"),    Nullable] public long?     ShippedLogBuffersDurationDelta   { get; set; } // BIGINT
		/// <summary>
		/// Log end position of the last known replayed log buffer on secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION"),                 Nullable] public long?     ReplayedLogPosition              { get; set; } // BIGINT
		/// <summary>
		/// Timestamp of the last known replayed log buffer on the secondary site
		/// </summary>
		[Column("REPLAYED_LOG_POSITION_TIME"),            Nullable] public DateTime? ReplayedLogPositionTime          { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped savepoint version
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_VERSION"),             Nullable] public int?      ShippedSavepointVersion          { get; set; } // INTEGER
		/// <summary>
		/// Shipped savepoint log position
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_LOG_POSITION"),        Nullable] public long?     ShippedSavepointLogPosition      { get; set; } // BIGINT
		/// <summary>
		/// Shipped savepoint start time
		/// </summary>
		[Column("SHIPPED_SAVEPOINT_START_TIME"),          Nullable] public DateTime? ShippedSavepointStartTime        { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped full replica count
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_COUNT"),            Nullable] public long?     ShippedFullReplicaCount          { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica size in bytes
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_SIZE"),             Nullable] public long?     ShippedFullReplicaSize           { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica duration in microseconds
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_DURATION"),         Nullable] public long?     ShippedFullReplicaDuration       { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica count (delta)
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_COUNT_DELTA"),      Nullable] public long?     ShippedFullReplicaCountDelta     { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica size in bytes (delta)
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_SIZE_DELTA"),       Nullable] public long?     ShippedFullReplicaSizeDelta      { get; set; } // BIGINT
		/// <summary>
		/// Shipped full replica duration in microseconds (delta)
		/// </summary>
		[Column("SHIPPED_FULL_REPLICA_DURATION_DELTA"),   Nullable] public long?     ShippedFullReplicaDurationDelta  { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica size in bytes
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_SIZE"),        Nullable] public long?     ShippedLastFullReplicaSize       { get; set; } // BIGINT
		/// <summary>
		/// Shipped last full replica start time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_START_TIME"),  Nullable] public DateTime? ShippedLastFullReplicaStartTime  { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped last full replica end time
		/// </summary>
		[Column("SHIPPED_LAST_FULL_REPLICA_END_TIME"),    Nullable] public DateTime? ShippedLastFullReplicaEndTime    { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped delta replica count
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_COUNT"),           Nullable] public long?     ShippedDeltaReplicaCount         { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica size in bytes
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_SIZE"),            Nullable] public long?     ShippedDeltaReplicaSize          { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica duration in microseconds
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_DURATION"),        Nullable] public long?     ShippedDeltaReplicaDuration      { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica count (delta)
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_COUNT_DELTA"),     Nullable] public long?     ShippedDeltaReplicaCountDelta    { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica size in bytes (delta)
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_SIZE_DELTA"),      Nullable] public long?     ShippedDeltaReplicaSizeDelta     { get; set; } // BIGINT
		/// <summary>
		/// Shipped delta replica duration in microseconds (delta)
		/// </summary>
		[Column("SHIPPED_DELTA_REPLICA_DURATION_DELTA"),  Nullable] public long?     ShippedDeltaReplicaDurationDelta { get; set; } // BIGINT
		/// <summary>
		/// Shipped last delta replica size in bytes
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_SIZE"),       Nullable] public long?     ShippedLastDeltaReplicaSize      { get; set; } // BIGINT
		/// <summary>
		/// Shipped last delta replica start time
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_START_TIME"), Nullable] public DateTime? ShippedLastDeltaReplicaStartTime { get; set; } // TIMESTAMP
		/// <summary>
		/// Shipped last delta replica end time
		/// </summary>
		[Column("SHIPPED_LAST_DELTA_REPLICA_END_TIME"),   Nullable] public DateTime? ShippedLastDeltaReplicaEndTime   { get; set; } // TIMESTAMP
		/// <summary>
		/// Number of times, the asynchronous replication buffer got full
		/// </summary>
		[Column("ASYNC_BUFFER_FULL_COUNT"),               Nullable] public long?     AsyncBufferFullCount             { get; set; } // BIGINT
		/// <summary>
		/// Number of times, the asynchronous replication buffer got full (delta)
		/// </summary>
		[Column("ASYNC_BUFFER_FULL_COUNT_DELTA"),         Nullable] public long?     AsyncBufferFullCountDelta        { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in bytes
		/// </summary>
		[Column("BACKLOG_SIZE"),                          Nullable] public long?     BacklogSize                      { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in bytes
		/// </summary>
		[Column("MAX_BACKLOG_SIZE"),                      Nullable] public long?     MaxBacklogSize                   { get; set; } // BIGINT
		/// <summary>
		/// Current replication backlog in microseconds
		/// </summary>
		[Column("BACKLOG_TIME"),                          Nullable] public long?     BacklogTime                      { get; set; } // BIGINT
		/// <summary>
		/// Max replication backlog in microseconds
		/// </summary>
		[Column("MAX_BACKLOG_TIME"),                      Nullable] public long?     MaxBacklogTime                   { get; set; } // BIGINT
	}

	/// <summary>
	/// File access total statistics
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_HOST_VOLUME_IO_TOTAL_STATISTICS", IsView=true)]
	public partial class SYS_DATABASES_StatisticsHostVolumeIoTotalStatistic
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),              Nullable] public string?   DatabaseName            { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),                Nullable] public DateTime? SnapshotId              { get; set; } // TIMESTAMP
		/// <summary>
		/// Processing Timestamp (local time)
		/// </summary>
		[Column("SERVER_TIMESTAMP"),           Nullable] public DateTime? ServerTimestamp         { get; set; } // TIMESTAMP
		/// <summary>
		/// Total IO time
		/// </summary>
		[Column("TOTAL_IO_TIME_DELTA"),        Nullable] public long?     TotalIoTimeDelta        { get; set; } // BIGINT
		/// <summary>
		/// Total size of data read
		/// </summary>
		[Column("TOTAL_READ_SIZE_DELTA"),      Nullable] public long?     TotalReadSizeDelta      { get; set; } // BIGINT
		/// <summary>
		/// Total read time
		/// </summary>
		[Column("TOTAL_READ_TIME_DELTA"),      Nullable] public long?     TotalReadTimeDelta      { get; set; } // BIGINT
		/// <summary>
		/// Total size of data written
		/// </summary>
		[Column("TOTAL_WRITE_SIZE_DELTA"),     Nullable] public long?     TotalWriteSizeDelta     { get; set; } // BIGINT
		/// <summary>
		/// Total write time
		/// </summary>
		[Column("TOTAL_WRITE_TIME_DELTA"),     Nullable] public long?     TotalWriteTimeDelta     { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("TOTAL_FAILED_READS_DELTA"),   Nullable] public long?     TotalFailedReadsDelta   { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("TOTAL_FAILED_WRITES_DELTA"),  Nullable] public long?     TotalFailedWritesDelta  { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous reads
		/// </summary>
		[Column("TOTAL_READS_DELTA"),          Nullable] public long?     TotalReadsDelta         { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous writes
		/// </summary>
		[Column("TOTAL_WRITES_DELTA"),         Nullable] public long?     TotalWritesDelta        { get; set; } // BIGINT
		/// <summary>
		/// Count of blocked write requests
		/// </summary>
		[Column("BLOCKED_WRITE_REQUESTS"),     Nullable] public long?     BlockedWriteRequests    { get; set; } // BIGINT
		/// <summary>
		/// Configuration parameters
		/// </summary>
		[Column(),                             Nullable] public string?   CONFIGURATION           { get; set; } // VARCHAR(256)
		/// <summary>
		/// Filesystem type
		/// </summary>
		[Column("FILESYSTEM_TYPE"),            Nullable] public string?   FilesystemType          { get; set; } // VARCHAR(16)
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                             Nullable] public string?   HOST                    { get; set; } // VARCHAR(64)
		/// <summary>
		/// Max. count of blocked write requests
		/// </summary>
		[Column("MAX_BLOCKED_WRITE_REQUESTS"), Nullable] public long?     MaxBlockedWriteRequests { get; set; } // BIGINT
		/// <summary>
		/// Filesystem path
		/// </summary>
		[Column(),                             Nullable] public string?   PATH                    { get; set; } // VARCHAR(512)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                             Nullable] public int?      PORT                    { get; set; } // INTEGER
		/// <summary>
		/// Count of appends
		/// </summary>
		[Column("TOTAL_APPENDS"),              Nullable] public long?     TotalAppends            { get; set; } // BIGINT
		/// <summary>
		/// Count of failed reads
		/// </summary>
		[Column("TOTAL_FAILED_READS"),         Nullable] public long?     TotalFailedReads        { get; set; } // BIGINT
		/// <summary>
		/// Count of failed writes
		/// </summary>
		[Column("TOTAL_FAILED_WRITES"),        Nullable] public long?     TotalFailedWrites       { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry reads
		/// </summary>
		[Column("TOTAL_FULL_RETRY_READS"),     Nullable] public long?     TotalFullRetryReads     { get; set; } // BIGINT
		/// <summary>
		/// Count of full retry writes
		/// </summary>
		[Column("TOTAL_FULL_RETRY_WRITES"),    Nullable] public long?     TotalFullRetryWrites    { get; set; } // BIGINT
		/// <summary>
		/// Total IO time
		/// </summary>
		[Column("TOTAL_IO_TIME"),              Nullable] public long?     TotalIoTime             { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous reads
		/// </summary>
		[Column("TOTAL_READS"),                Nullable] public long?     TotalReads              { get; set; } // BIGINT
		/// <summary>
		/// Size of read data
		/// </summary>
		[Column("TOTAL_READ_SIZE"),            Nullable] public long?     TotalReadSize           { get; set; } // BIGINT
		/// <summary>
		/// Total read time
		/// </summary>
		[Column("TOTAL_READ_TIME"),            Nullable] public long?     TotalReadTime           { get; set; } // BIGINT
		/// <summary>
		/// Count of reads that read less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_READS"),          Nullable] public long?     TotalShortReads         { get; set; } // BIGINT
		/// <summary>
		/// Count of writes that wrote less bytes than requested
		/// </summary>
		[Column("TOTAL_SHORT_WRITES"),         Nullable] public long?     TotalShortWrites        { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous reads
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_READS"),  Nullable] public long?     TotalTriggerAsyncReads  { get; set; } // BIGINT
		/// <summary>
		/// Count of triggered asynchronous writes
		/// </summary>
		[Column("TOTAL_TRIGGER_ASYNC_WRITES"), Nullable] public long?     TotalTriggerAsyncWrites { get; set; } // BIGINT
		/// <summary>
		/// Count of synchronous writes
		/// </summary>
		[Column("TOTAL_WRITES"),               Nullable] public long?     TotalWrites             { get; set; } // BIGINT
		/// <summary>
		/// Size of written data
		/// </summary>
		[Column("TOTAL_WRITE_SIZE"),           Nullable] public long?     TotalWriteSize          { get; set; } // BIGINT
		/// <summary>
		/// Total write time
		/// </summary>
		[Column("TOTAL_WRITE_TIME"),           Nullable] public long?     TotalWriteTime          { get; set; } // BIGINT
		/// <summary>
		/// Trigger-Ratio of asynchronous reads
		/// </summary>
		[Column("TRIGGER_READ_RATIO"),         Nullable] public double?   TriggerReadRatio        { get; set; } // DOUBLE
		/// <summary>
		/// Trigger-Ratio of asynchronous writes
		/// </summary>
		[Column("TRIGGER_WRITE_RATIO"),        Nullable] public double?   TriggerWriteRatio       { get; set; } // DOUBLE
		/// <summary>
		/// Type of contained files
		/// </summary>
		[Column(),                             Nullable] public string?   TYPE                    { get; set; } // VARCHAR(16)
		/// <summary>
		/// Persistence Volume ID
		/// </summary>
		[Column("VOLUME_ID"),                  Nullable] public int?      VolumeId                { get; set; } // INTEGER
	}

	/// <summary>
	/// The frequency with which checks, collectors, and special functions are called by the scheduler of the embedded statistics service
	/// </summary>
	[Table(Schema="SYS_DATABASES", Name="STATISTICS_SCHEDULE", IsView=true)]
	public partial class SYS_DATABASES_StatisticsSchedule
	{
		/// <summary>
		/// Database name
		/// </summary>
		[Column("DATABASE_NAME"),                  Nullable] public string?   DatabaseName                { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Unique ID of check, collector or special function.
		/// </summary>
		[Column(),                                 Nullable] public int?      ID                          { get; set; } // INTEGER
		/// <summary>
		/// Scheduling status of the check, collector or special function. The following values are possible: Idle, Scheduled, Manual, Disabled, Inactive.
		/// </summary>
		[Column(),                                 Nullable] public string?   STATUS                      { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Reason if STATUS is Disabled. This column is empty for other scheduling statuses.
		/// </summary>
		[Column(),                                 Nullable] public string?   STATUSREASON                { get; set; } // NVARCHAR(1024)
		/// <summary>
		/// Number of seconds between 2 scheduled calls of the check, collector, or special function
		/// </summary>
		[Column(),                                 Nullable] public int?      INTERVALLENGTH              { get; set; } // INTEGER
		/// <summary>
		/// Minimum number of seconds between 2 scheduled calls. This value cannot be changed.
		/// </summary>
		[Column(),                                 Nullable] public int?      MINIMALINTERVALLENGTH       { get; set; } // INTEGER
		/// <summary>
		/// Number of days for which data in statistics data tables is retained. Older data collected is deleted. This value is used for collectors only.
		/// </summary>
		[Column("RETENTION_DAYS_CURRENT"),         Nullable] public int?      RetentionDaysCurrent        { get; set; } // INTEGER
		/// <summary>
		/// Default number of days for which data in statistics data tables is retained. See RETENTION_DAYS_CURRENT.
		/// </summary>
		[Column("RETENTION_DAYS_DEFAULT"),         Nullable] public int?      RetentionDaysDefault        { get; set; } // INTEGER
		/// <summary>
		/// Time (UTC) used as the basis for calculating the execution times of checks, collectors, or special functions with INTERVALLENGTH of 1 hour, 6 hours, 12 hours, or 24 hours.
		/// </summary>
		[Column("EXECUTION_TIME_OF_DAY"),          Nullable] public DateTime? ExecutionTimeOfDay          { get; set; } // TIMESTAMP
		/// <summary>
		/// Time (UTC) at which the scheduler last actually called the check, collector, or special function
		/// </summary>
		[Column("LATEST_START_SNAPSHOT_ID"),       Nullable] public DateTime? LatestStartSnapshotId       { get; set; } // TIMESTAMP
		/// <summary>
		/// Time (local server time) at which the scheduler last actually called the check, collector, or special function (convenience field)
		/// </summary>
		[Column("LATEST_START_SERVERTIME"),        Nullable] public DateTime? LatestStartServertime       { get; set; } // TIMESTAMP
		/// <summary>
		/// Duration in milliseconds of the most recently scheduled call of the check, collector, or special function
		/// </summary>
		[Column("LATEST_DURATION"),                Nullable] public long?     LatestDuration              { get; set; } // BIGINT
		/// <summary>
		/// Time (local server time) at which the user last called the check, collector, or special function (convenience field)
		/// </summary>
		[Column("LATEST_START_SERVERTIME_MANUAL"), Nullable] public DateTime? LatestStartServertimeManual { get; set; } // TIMESTAMP
		/// <summary>
		/// Number of times the check, collector, or special function has timed out.
		/// </summary>
		[Column("START_COUNT"),                    Nullable] public int?      StartCount                  { get; set; } // INTEGER
		/// <summary>
		/// Length of time that a check or collector stays in status Disabled. This time is expressed as a multiple of interval length.
		/// </summary>
		[Column("SKIP_INTERVAL_ON_DISABLE"),       Nullable] public int?      SkipIntervalOnDisable       { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_SECURITY", Name="_SYS_OBJECT_PRIVILEGES")]
	public partial class _SYS_SECURITY_SysObjectPrivilege
	{
		#nullable disable
		[Column("OBJECT_TYPE"), PrimaryKey(1), NotNull] public string ObjectType { get; set; } // VARCHAR(32)
		#nullable enable
		#nullable disable
		[Column(),              PrimaryKey(2), NotNull] public string PRIVILEGE  { get; set; } // VARCHAR(40)
		#nullable enable
	}

	[Table(Schema="_SYS_SECURITY", Name="_SYS_PASSWORD_BLACKLIST")]
	public partial class _SYS_SECURITY_SysPasswordBlacklist
	{
		#nullable disable
		[Column("BLACKLIST_TERM"),         PrimaryKey(3), NotNull] public string BlacklistTerm        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CHECK_PARTIAL_PASSWORD"), PrimaryKey(1), NotNull] public string CheckPartialPassword { get; set; } // VARCHAR(6)
		#nullable enable
		#nullable disable
		[Column("CHECK_CASE_SENSITIVE"),   PrimaryKey(2), NotNull] public string CheckCaseSensitive   { get; set; } // VARCHAR(6)
		#nullable enable
	}

	/// <summary>
	/// Overview of system status including important resource usage information and alerts
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="SYSTEM_OVERVIEW", IsView=true)]
	public partial class _SYS_TELEMETRY_SystemOverview
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"), NotNull    ] public DateTime SnapshotId { get; set; } // TIMESTAMP
		#nullable disable
		/// <summary>
		/// Section name
		/// </summary>
		[Column(),              NotNull    ] public string   SECTION    { get; set; } // VARCHAR(16)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Key name in section
		/// </summary>
		[Column(),              NotNull    ] public string   NAME       { get; set; } // VARCHAR(32)
		#nullable enable
		/// <summary>
		/// Status value: OK, ERROR, WARNING or empty for info items
		/// </summary>
		[Column(),                 Nullable] public string?  STATUS     { get; set; } // VARCHAR(8)
		/// <summary>
		/// Key value in section
		/// </summary>
		[Column(),                 Nullable] public string?  VALUE      { get; set; } // VARCHAR(256)
	}

	/// <summary>
	/// Provides the client mapping when a task is created by the ABAP API
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_CLIENT_MAPPING", IsView=true)]
	public partial class _SYS_TASK_TaskClientMapping0
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"), NotNull    ] public string  SchemaName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),   NotNull    ] public string  TaskName   { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The client name that created the task by the ABAP API
		/// </summary>
		[Column(),                 Nullable] public string? CLIENT     { get; set; } // NVARCHAR(128)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_CLIENT_MAPPING_")]
	public partial class _SYS_TASK_TaskClientMapping1
	{
		[Column("TASK_OID"), PrimaryKey,  NotNull] public long    TaskOid { get; set; } // BIGINT
		[Column(),              Nullable         ] public string? CLIENT  { get; set; } // NVARCHAR(128)
	}

	/// <summary>
	/// Defines the columns present in a particular table
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_COLUMN_DEFINITIONS", IsView=true)]
	public partial class _SYS_TASK_TaskColumnDefinition
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),    NotNull    ] public string  SchemaName    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),      NotNull    ] public string  TaskName      { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),    Nullable] public string? OperationName { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),        Nullable] public string? TableName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the column used in the task plan within a table
		/// </summary>
		[Column("COLUMN_NAME"),       Nullable] public string? ColumnName    { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The mapped name of the column used in a task plan within a table
		/// </summary>
		[Column("MAPPED_NAME"),       Nullable] public string? MappedName    { get; set; } // NVARCHAR(128)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_COLUMN_DEFINITIONS_")]
	public partial class _SYS_TASK_TaskColumnDefinitions
	{
		[Column("TASK_OID"),     PrimaryKey(1), NotNull] public long    TaskOid     { get; set; } // BIGINT
		[Column("OPERATION_ID"), PrimaryKey(2), NotNull] public int     OperationId { get; set; } // INTEGER
		[Column("TABLE_ID"),     PrimaryKey(3), NotNull] public int     TableId     { get; set; } // INTEGER
		[Column("COLUMN_ID"),    PrimaryKey(4), NotNull] public int     ColumnId    { get; set; } // INTEGER
		[Column("COLUMN_NAME"),     Nullable           ] public string? ColumnName  { get; set; } // NVARCHAR(128)
		[Column("MAPPED_NAME"),     Nullable           ] public string? MappedName  { get; set; } // NVARCHAR(128)
	}

	/// <summary>
	/// Task Execution Statistics.
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_EXECUTIONS", IsView=true)]
	public partial class _SYS_TASK_TaskExecution
	{
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                              Nullable] public string?   HOST                  { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                              Nullable] public int?      PORT                  { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// Schema name used in the task
		/// </summary>
		[Column("SCHEMA_NAME"),              NotNull    ] public string    SchemaName            { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Name of the task
		/// </summary>
		[Column("TASK_NAME"),                NotNull    ] public string    TaskName              { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// Connection Identifier
		/// </summary>
		[Column("CONNECTION_ID"),               Nullable] public int?      ConnectionId          { get; set; } // INTEGER
		/// <summary>
		/// Transaction Identifier used for the task execution
		/// </summary>
		[Column("TRANSACTION_ID"),              Nullable] public int?      TransactionId         { get; set; } // INTEGER
		/// <summary>
		/// Task execution unique identifier
		/// </summary>
		[Column("TASK_EXECUTION_ID"),        NotNull    ] public long      TaskExecutionId       { get; set; } // BIGINT
		/// <summary>
		/// Parent Task identifier
		/// </summary>
		[Column("PARENT_TASK_EXECUTION_ID"),    Nullable] public long?     ParentTaskExecutionId { get; set; } // BIGINT
		/// <summary>
		/// 'TRUE' if the task is asynchronous task, else 'FALSE'
		/// </summary>
		[Column("IS_ASYNC"),                    Nullable] public string?   IsAsync               { get; set; } // VARCHAR(5)
		/// <summary>
		/// Input parameters for the task
		/// </summary>
		[Column(),                              Nullable] public string?   PARAMETERS            { get; set; } // NVARCHAR(5000)
		/// <summary>
		/// Input procedure parameters for the task
		/// </summary>
		[Column("PROCEDURE_PARAMETERS"),        Nullable] public string?   ProcedureParameters   { get; set; } // NVARCHAR(5000)
		/// <summary>
		/// Start time of the task
		/// </summary>
		[Column("START_TIME"),                  Nullable] public DateTime? StartTime             { get; set; } // TIMESTAMP
		/// <summary>
		/// End time of the task
		/// </summary>
		[Column("END_TIME"),                    Nullable] public DateTime? EndTime               { get; set; } // TIMESTAMP
		/// <summary>
		/// Execution time of the task (microseconds)
		/// </summary>
		[Column(),                              Nullable] public long?     DURATION              { get; set; } // BIGINT
		/// <summary>
		/// Status of the task: STARTING/RUNNING/FAILED/COMPLETED
		/// </summary>
		[Column(),                              Nullable] public string?   STATUS                { get; set; } // VARCHAR(16)
		/// <summary>
		/// Current operation of the task
		/// </summary>
		[Column("CURRENT_OPERATION"),           Nullable] public string?   CurrentOperation      { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Total number of records processed
		/// </summary>
		[Column("PROCESSED_RECORDS"),           Nullable] public long?     ProcessedRecords      { get; set; } // BIGINT
		/// <summary>
		/// Total number of task partitions for a task execution (1 if no task partitioning)
		/// </summary>
		[Column("PARTITION_COUNT"),             Nullable] public int?      PartitionCount        { get; set; } // INTEGER
		/// <summary>
		/// Total task progress (percent)
		/// </summary>
		[Column("TOTAL_PROGRESS_PERCENT"),      Nullable] public double?   TotalProgressPercent  { get; set; } // DOUBLE
		/// <summary>
		/// User name
		/// </summary>
		[Column("USER_NAME"),                   Nullable] public string?   UserName              { get; set; } // NVARCHAR(256)
		/// <summary>
		/// Application user name
		/// </summary>
		[Column("APPLICATION_USER_NAME"),       Nullable] public string?   ApplicationUserName   { get; set; } // NVARCHAR(256)
		/// <summary>
		/// 'TRUE' if the task produces side effect data, else 'FALSE'
		/// </summary>
		[Column("HAS_SIDE_EFFECTS"),            Nullable] public string?   HasSideEffects        { get; set; } // VARCHAR(5)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_EXECUTIONS_")]
	public partial class _SYS_TASK_TaskExecutions
	{
		[Column("TASK_OID"),                 PrimaryKey(1), NotNull] public long      TaskOid               { get; set; } // BIGINT
		[Column(),                              Nullable           ] public string?   HOST                  { get; set; } // VARCHAR(64)
		[Column(),                              Nullable           ] public int?      PORT                  { get; set; } // INTEGER
		[Column("CONNECTION_ID"),               Nullable           ] public int?      ConnectionId          { get; set; } // INTEGER
		[Column("TRANSACTION_ID"),              Nullable           ] public int?      TransactionId         { get; set; } // INTEGER
		[Column("TASK_EXECUTION_ID"),        PrimaryKey(2), NotNull] public long      TaskExecutionId       { get; set; } // BIGINT
		[Column("PARENT_TASK_EXECUTION_ID"),    Nullable           ] public long?     ParentTaskExecutionId { get; set; } // BIGINT
		[Column("IS_ASYNC"),                    Nullable           ] public string?   IsAsync               { get; set; } // VARCHAR(5)
		[Column(),                              Nullable           ] public string?   PARAMETERS            { get; set; } // NVARCHAR(5000)
		[Column("PROCEDURE_PARAMETERS"),        Nullable           ] public string?   ProcedureParameters   { get; set; } // NVARCHAR(5000)
		[Column("START_TIME"),                  Nullable           ] public DateTime? StartTime             { get; set; } // TIMESTAMP
		[Column("END_TIME"),                    Nullable           ] public DateTime? EndTime               { get; set; } // TIMESTAMP
		[Column(),                              Nullable           ] public string?   STATUS                { get; set; } // VARCHAR(16)
		[Column("CURRENT_OPERATION"),           Nullable           ] public string?   CurrentOperation      { get; set; } // NVARCHAR(128)
		[Column("PROCESSED_RECORDS"),           Nullable           ] public long?     ProcessedRecords      { get; set; } // BIGINT
		[Column("PARTITION_COUNT"),             Nullable           ] public int?      PartitionCount        { get; set; } // INTEGER
		[Column("TOTAL_OPERATIONS"),            Nullable           ] public int?      TotalOperations       { get; set; } // INTEGER
		[Column("TOTAL_PROGRESS_PERCENT"),      Nullable           ] public double?   TotalProgressPercent  { get; set; } // DOUBLE
		[Column("USER_NAME"),                   Nullable           ] public string?   UserName              { get; set; } // NVARCHAR(256)
		[Column("APPLICATION_USER_NAME"),       Nullable           ] public string?   ApplicationUserName   { get; set; } // NVARCHAR(256)
		[Column("HAS_SIDE_EFFECTS"),            Nullable           ] public string?   HasSideEffects        { get; set; } // VARCHAR(5)
		[Column("STATEMENT_EXECUTION_ID"),      Nullable           ] public long?     StatementExecutionId  { get; set; } // BIGINT
		[Column("LOGICAL_CONNECTION_ID"),       Nullable           ] public int?      LogicalConnectionId   { get; set; } // INTEGER
	}

	/// <summary>
	/// Contains localized values for the task framework tables
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_LOCALIZATION", IsView=true)]
	public partial class _SYS_TASK_TaskLocalization0
	{
		/// <summary>
		/// The ID of the type of entity being localized
		/// </summary>
		[Column("LOC_TYPE_ID"), NotNull    ] public int     LocTypeId   { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// The ID of the entity being localized
		/// </summary>
		[Column("LOC_ID"),      NotNull    ] public string  LocId       { get; set; } // NVARCHAR(64)
		#nullable enable
		/// <summary>
		/// The one character code of the localized language
		/// </summary>
		[Column(),              NotNull    ] public char    LANGUAGE    { get; set; } // NVARCHAR(1)
		/// <summary>
		/// The localized description
		/// </summary>
		[Column(),                 Nullable] public string? DESCRIPTION { get; set; } // NVARCHAR(1024)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_LOCALIZATION_")]
	public partial class _SYS_TASK_TaskLocalization1
	{
		[Column("LOC_TYPE_ID"), PrimaryKey(1), NotNull] public int     LocTypeId   { get; set; } // INTEGER
		#nullable disable
		[Column("LOC_ID"),      PrimaryKey(2), NotNull] public string  LocId       { get; set; } // NVARCHAR(64)
		#nullable enable
		[Column(),              PrimaryKey(3), NotNull] public char    LANGUAGE    { get; set; } // NVARCHAR(1)
		[Column(),                 Nullable           ] public string? DESCRIPTION { get; set; } // NVARCHAR(1024)
	}

	/// <summary>
	/// Contains all operations and details about those operations that exist for a given task
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_OPERATIONS", IsView=true)]
	public partial class _SYS_TASK_TaskOperation
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),      NotNull    ] public string  SchemaName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),        NotNull    ] public string  TaskName       { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),      Nullable] public string? OperationName  { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Comments made on the operation
		/// </summary>
		[Column(),                      Nullable] public string? COMMENTS       { get; set; } // NVARCHAR(512)
		/// <summary>
		/// Whether the operation has side-effect data
		/// </summary>
		[Column("HAS_SIDE_EFFECTS"),    Nullable] public byte?   HasSideEffects { get; set; } // TINYINT
		/// <summary>
		/// The type of operation in the task plan
		/// </summary>
		[Column("OPERATION_TYPE"),      Nullable] public string? OperationType  { get; set; } // NVARCHAR(128)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_OPERATIONS_")]
	public partial class _SYS_TASK_TaskOperations
	{
		[Column("TASK_OID"),         PrimaryKey(1), NotNull] public int     TaskOid        { get; set; } // INTEGER
		[Column("OPERATION_ID"),     PrimaryKey(2), NotNull] public int     OperationId    { get; set; } // INTEGER
		[Column("OPERATION_NAME"),      Nullable           ] public string? OperationName  { get; set; } // NVARCHAR(128)
		[Column(),                      Nullable           ] public string? COMMENTS       { get; set; } // NVARCHAR(512)
		[Column("HAS_SIDE_EFFECTS"),    Nullable           ] public byte?   HasSideEffects { get; set; } // TINYINT
		[Column("OPERATION_TYPE"),      Nullable           ] public string? OperationType  { get; set; } // NVARCHAR(128)
	}

	/// <summary>
	/// Task Operations Execution Statistics
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_OPERATIONS_EXECUTIONS", IsView=true)]
	public partial class _SYS_TASK_TaskOperationsExecution
	{
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                                Nullable] public string?   HOST                     { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                                Nullable] public int?      PORT                     { get; set; } // INTEGER
		/// <summary>
		/// Task execution unique identifier
		/// </summary>
		[Column("TASK_EXECUTION_ID"),          NotNull    ] public long      TaskExecutionId          { get; set; } // BIGINT
		[Column("PARTITION_ID"),                  Nullable] public long?     PartitionId              { get; set; } // BIGINT
		/// <summary>
		/// Connection Identifier
		/// </summary>
		[Column("CONNECTION_ID"),                 Nullable] public int?      ConnectionId             { get; set; } // INTEGER
		/// <summary>
		/// Transaction Identifier used for the task execution
		/// </summary>
		[Column("TRANSACTION_ID"),                Nullable] public int?      TransactionId            { get; set; } // INTEGER
		/// <summary>
		/// Name of operation
		/// </summary>
		[Column("CURRENT_OPERATION"),             Nullable] public string?   CurrentOperation         { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Type of operation
		/// </summary>
		[Column("OPERATION_TYPE"),                Nullable] public string?   OperationType            { get; set; } // NVARCHAR(128)
		#nullable disable
		/// <summary>
		/// Internal name of operation
		/// </summary>
		[Column("OPERATION_NAME"),             NotNull    ] public string    OperationName            { get; set; } // NVARCHAR(128)
		#nullable enable
		/// <summary>
		/// Start time of operation
		/// </summary>
		[Column("START_TIME"),                    Nullable] public DateTime? StartTime                { get; set; } // TIMESTAMP
		/// <summary>
		/// End time of operation
		/// </summary>
		[Column("END_TIME"),                      Nullable] public DateTime? EndTime                  { get; set; } // TIMESTAMP
		/// <summary>
		/// Execution time of operation (microseconds)
		/// </summary>
		[Column(),                                Nullable] public decimal?  DURATION                 { get; set; } // DECIMAL(25, 6)
		/// <summary>
		/// Status of the operation: STARTING/RUNNING/FAILED/COMPLETED
		/// </summary>
		[Column(),                                Nullable] public string?   STATUS                   { get; set; } // VARCHAR(16)
		/// <summary>
		/// Total number of records processed
		/// </summary>
		[Column("PROCESSED_RECORDS"),             Nullable] public long?     ProcessedRecords         { get; set; } // BIGINT
		/// <summary>
		/// Operation progress (percent)
		/// </summary>
		[Column("OPERATION_PROGRESS_PERCENT"),    Nullable] public double?   OperationProgressPercent { get; set; } // DOUBLE
		/// <summary>
		/// 'TRUE' if the operation produces side effect data, else 'FALSE'
		/// </summary>
		[Column("HAS_SIDE_EFFECTS"),              Nullable] public string?   HasSideEffects           { get; set; } // VARCHAR(5)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_OPERATIONS_EXECUTIONS_")]
	public partial class _SYS_TASK_TaskOperationsExecutions
	{
		[Column(),                                Nullable           ] public string?   HOST                     { get; set; } // VARCHAR(64)
		[Column(),                                Nullable           ] public int?      PORT                     { get; set; } // INTEGER
		[Column("CONNECTION_ID"),                 Nullable           ] public int?      ConnectionId             { get; set; } // INTEGER
		[Column("TRANSACTION_ID"),                Nullable           ] public int?      TransactionId            { get; set; } // INTEGER
		[Column("TASK_EXECUTION_ID"),          PrimaryKey(1), NotNull] public long      TaskExecutionId          { get; set; } // BIGINT
		[Column("PARTITION_ID"),               PrimaryKey(2), NotNull] public int       PartitionId              { get; set; } // INTEGER
		#nullable disable
		[Column("OPERATION_NAME"),             PrimaryKey(3), NotNull] public string    OperationName            { get; set; } // NVARCHAR(128)
		#nullable enable
		[Column("CURRENT_OPERATION"),             Nullable           ] public string?   CurrentOperation         { get; set; } // NVARCHAR(128)
		[Column("OPERATION_TYPE"),                Nullable           ] public string?   OperationType            { get; set; } // NVARCHAR(128)
		[Column("START_TIME"),                    Nullable           ] public DateTime? StartTime                { get; set; } // TIMESTAMP
		[Column("END_TIME"),                      Nullable           ] public DateTime? EndTime                  { get; set; } // TIMESTAMP
		[Column(),                                Nullable           ] public string?   STATUS                   { get; set; } // VARCHAR(16)
		[Column("PROCESSED_RECORDS"),             Nullable           ] public long?     ProcessedRecords         { get; set; } // BIGINT
		[Column("OPERATION_PROGRESS_PERCENT"),    Nullable           ] public double?   OperationProgressPercent { get; set; } // DOUBLE
		[Column("HAS_SIDE_EFFECTS"),              Nullable           ] public string?   HasSideEffects           { get; set; } // VARCHAR(5)
	}

	/// <summary>
	/// Task Partition Statistics.
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_PARTITION_EXECUTIONS", IsView=true)]
	public partial class _SYS_TASK_TaskPartitionExecution
	{
		/// <summary>
		/// Host name
		/// </summary>
		[Column(),                            Nullable] public string?   HOST                 { get; set; } // VARCHAR(64)
		/// <summary>
		/// Internal port
		/// </summary>
		[Column(),                            Nullable] public int?      PORT                 { get; set; } // INTEGER
		#nullable disable
		/// <summary>
		/// Schema name of the task
		/// </summary>
		[Column("SCHEMA_NAME"),            NotNull    ] public string    SchemaName           { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Name of the task
		/// </summary>
		[Column("TASK_NAME"),              NotNull    ] public string    TaskName             { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// Connection Identifier
		/// </summary>
		[Column("CONNECTION_ID"),             Nullable] public int?      ConnectionId         { get; set; } // INTEGER
		/// <summary>
		/// Transaction Identifier used for the task execution
		/// </summary>
		[Column("TRANSACTION_ID"),            Nullable] public int?      TransactionId        { get; set; } // INTEGER
		/// <summary>
		/// Task execution unique identifier
		/// </summary>
		[Column("TASK_EXECUTION_ID"),      NotNull    ] public long      TaskExecutionId      { get; set; } // BIGINT
		/// <summary>
		/// Task partition unique identifier
		/// </summary>
		[Column("PARTITION_ID"),           NotNull    ] public long      PartitionId          { get; set; } // BIGINT
		/// <summary>
		/// Name of the partition
		/// </summary>
		[Column("PARTITION_NAME"),            Nullable] public string?   PartitionName        { get; set; } // NVARCHAR(5000)
		/// <summary>
		/// Start time of the partition
		/// </summary>
		[Column("START_TIME"),                Nullable] public DateTime? StartTime            { get; set; } // TIMESTAMP
		/// <summary>
		/// End time of the partition
		/// </summary>
		[Column("END_TIME"),                  Nullable] public DateTime? EndTime              { get; set; } // TIMESTAMP
		/// <summary>
		/// Execution time of the partition (microseconds)
		/// </summary>
		[Column(),                            Nullable] public long?     DURATION             { get; set; } // BIGINT
		/// <summary>
		/// Status of the task: STARTING/RUNNING/FAILED/COMPLETED
		/// </summary>
		[Column(),                            Nullable] public string?   STATUS               { get; set; } // VARCHAR(16)
		/// <summary>
		/// Total number of records processed
		/// </summary>
		[Column("PROCESSED_RECORDS"),         Nullable] public long?     ProcessedRecords     { get; set; } // BIGINT
		/// <summary>
		/// Total partition progress (percent)
		/// </summary>
		[Column("TOTAL_PROGRESS_PERCENT"),    Nullable] public double?   TotalProgressPercent { get; set; } // DOUBLE
	}

	[Table(Schema="_SYS_TASK", Name="TASK_PARTITION_EXECUTIONS_")]
	public partial class _SYS_TASK_TaskPartitionExecutions
	{
		[Column("TASK_OID"),               PrimaryKey(1), NotNull] public long      TaskOid              { get; set; } // BIGINT
		[Column(),                            Nullable           ] public string?   HOST                 { get; set; } // VARCHAR(64)
		[Column(),                            Nullable           ] public int?      PORT                 { get; set; } // INTEGER
		[Column("CONNECTION_ID"),             Nullable           ] public int?      ConnectionId         { get; set; } // INTEGER
		[Column("TRANSACTION_ID"),            Nullable           ] public int?      TransactionId        { get; set; } // INTEGER
		[Column("TASK_EXECUTION_ID"),      PrimaryKey(2), NotNull] public long      TaskExecutionId      { get; set; } // BIGINT
		[Column("PARTITION_ID"),           PrimaryKey(3), NotNull] public long      PartitionId          { get; set; } // BIGINT
		[Column("PARTITION_NAME"),            Nullable           ] public string?   PartitionName        { get; set; } // NVARCHAR(5000)
		[Column("START_TIME"),                Nullable           ] public DateTime? StartTime            { get; set; } // TIMESTAMP
		[Column("END_TIME"),                  Nullable           ] public DateTime? EndTime              { get; set; } // TIMESTAMP
		[Column(),                            Nullable           ] public string?   STATUS               { get; set; } // VARCHAR(16)
		[Column("PROCESSED_RECORDS"),         Nullable           ] public long?     ProcessedRecords     { get; set; } // BIGINT
		[Column("TOTAL_PROGRESS_PERCENT"),    Nullable           ] public double?   TotalProgressPercent { get; set; } // DOUBLE
	}

	/// <summary>
	/// Contains all of the tables used by the various side-effect producing operations
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_TABLE_DEFINITIONS", IsView=true)]
	public partial class _SYS_TASK_TaskTableDefinition
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),          NotNull    ] public string  SchemaName         { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),            NotNull    ] public string  TaskName           { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),          Nullable] public string? OperationName      { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Unique ID for the table
		/// </summary>
		[Column("TABLE_ID"),             NotNull    ] public int     TableId            { get; set; } // INTEGER
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),              Nullable] public string? TableName          { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The schema where the generated side-effect table is located
		/// </summary>
		[Column("SIDE_EFFECT_SCHEMA"),      Nullable] public string? SideEffectSchema   { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the generated side-effect table
		/// </summary>
		[Column("SIDE_EFFECT_NAME"),        Nullable] public string? SideEffectName     { get; set; } // NVARCHAR(128)
		/// <summary>
		/// Whether this table is the primary table in a relationship
		/// </summary>
		[Column("IS_PRIMARY_TABLE"),        Nullable] public byte?   IsPrimaryTable     { get; set; } // TINYINT
		/// <summary>
		/// The type of operation this table is used within
		/// </summary>
		[Column("OPERATION_TABLE_TYPE"),    Nullable] public string? OperationTableType { get; set; } // NVARCHAR(20)
	}

	[Table(Schema="_SYS_TASK", Name="TASK_TABLE_DEFINITIONS_")]
	public partial class _SYS_TASK_TaskTableDefinitions
	{
		[Column("TASK_OID"),             PrimaryKey(1), NotNull] public long    TaskOid            { get; set; } // BIGINT
		[Column("OPERATION_ID"),         PrimaryKey(2), NotNull] public int     OperationId        { get; set; } // INTEGER
		[Column("TABLE_ID"),             PrimaryKey(3), NotNull] public int     TableId            { get; set; } // INTEGER
		[Column("TABLE_NAME"),              Nullable           ] public string? TableName          { get; set; } // NVARCHAR(128)
		[Column("SIDE_EFFECT_SCHEMA"),      Nullable           ] public string? SideEffectSchema   { get; set; } // NVARCHAR(128)
		[Column("SIDE_EFFECT_NAME"),        Nullable           ] public string? SideEffectName     { get; set; } // NVARCHAR(128)
		[Column("IS_PRIMARY_TABLE"),        Nullable           ] public byte?   IsPrimaryTable     { get; set; } // TINYINT
		[Column("OPERATION_TABLE_TYPE"),    Nullable           ] public string? OperationTableType { get; set; } // NVARCHAR(20)
	}

	/// <summary>
	/// Defines the relationships (if any) between tables within an operation
	/// </summary>
	[Table(Schema="_SYS_TASK", Name="TASK_TABLE_RELATIONSHIPS", IsView=true)]
	public partial class _SYS_TASK_TaskTableRelationship
	{
		#nullable disable
		/// <summary>
		/// The name of the schema where the task is located
		/// </summary>
		[Column("SCHEMA_NAME"),        NotNull    ] public string  SchemaName       { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the task
		/// </summary>
		[Column("TASK_NAME"),          NotNull    ] public string  TaskName         { get; set; } // NVARCHAR(256)
		#nullable enable
		/// <summary>
		/// The name of the operation in the task plan
		/// </summary>
		[Column("OPERATION_NAME"),        Nullable] public string? OperationName    { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table defined in the task plan for an operation
		/// </summary>
		[Column("TABLE_NAME"),            Nullable] public string? TableName        { get; set; } // NVARCHAR(128)
		/// <summary>
		/// The name of the table with which the "TABLE NAME" table is related
		/// </summary>
		[Column("RELATED_TABLE_NAME"),    Nullable] public string? RelatedTableName { get; set; } // NVARCHAR(128)
		#nullable disable
		/// <summary>
		/// The name of the column in the "TABLE_NAME" table that relates to the "TO_ATTRIBUTE"
		/// </summary>
		[Column("FROM_ATTRIBUTE"),     NotNull    ] public string  FromAttribute    { get; set; } // NVARCHAR(128)
		#nullable enable
		#nullable disable
		/// <summary>
		/// The name of the column in the "RELATED_TABLE_NAME" that relates to the "FROM_ATTRIBUTE"
		/// </summary>
		[Column("TO_ATTRIBUTE"),       NotNull    ] public string  ToAttribute      { get; set; } // NVARCHAR(128)
		#nullable enable
	}

	[Table(Schema="_SYS_TASK", Name="TASK_TABLE_RELATIONSHIPS_")]
	public partial class _SYS_TASK_TaskTableRelationships
	{
		[Column("TASK_OID"),         PrimaryKey(1), NotNull] public long   TaskOid        { get; set; } // BIGINT
		[Column("OPERATION_ID"),     PrimaryKey(2), NotNull] public int    OperationId    { get; set; } // INTEGER
		[Column("TABLE_ID"),         PrimaryKey(3), NotNull] public int    TableId        { get; set; } // INTEGER
		[Column("RELATED_TABLE_ID"), PrimaryKey(4), NotNull] public int    RelatedTableId { get; set; } // INTEGER
		#nullable disable
		[Column("FROM_ATTRIBUTE"),   PrimaryKey(5), NotNull] public string FromAttribute  { get; set; } // NVARCHAR(128)
		#nullable enable
		#nullable disable
		[Column("TO_ATTRIBUTE"),     PrimaryKey(6), NotNull] public string ToAttribute    { get; set; } // NVARCHAR(128)
		#nullable enable
	}

	/// <summary>
	/// Last Telemetry Client Information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="TELEMETRY_CLIENT", IsView=true)]
	public partial class _SYS_TELEMETRY_TelemetryClient
	{
		/// <summary>
		/// Unique ID of the client
		/// </summary>
		[Column("CLIENT_ID"),                        NotNull    ] public long      ClientId                       { get; set; } // BIGINT
		/// <summary>
		/// Activation timestamp of the client id
		/// </summary>
		[Column("FIRST_TRANSMISSION_TIMESTAMP"),     NotNull    ] public DateTime  FirstTransmissionTimestamp     { get; set; } // TIMESTAMP
		/// <summary>
		/// Timestamp of last transmission
		/// </summary>
		[Column("LAST_TRANSMISSION_TIMESTAMP"),      NotNull    ] public DateTime  LastTransmissionTimestamp      { get; set; } // TIMESTAMP
		/// <summary>
		/// Transmission interval in minute
		/// </summary>
		[Column("TRANSMISSION_INTERVAL"),               Nullable] public short?    TransmissionInterval           { get; set; } // SMALLINT
		/// <summary>
		/// Default transmission interval in minute
		/// </summary>
		[Column("DEFAULT_TRANSMISSION_INTERVAL"),       Nullable] public short?    DefaultTransmissionInterval    { get; set; } // SMALLINT
		/// <summary>
		/// Minimum transmission interval in minute
		/// </summary>
		[Column("MIN_TRANSMISSION_INTERVAL"),           Nullable] public short?    MinTransmissionInterval        { get; set; } // SMALLINT
		/// <summary>
		/// Maximum transmission interval in minute
		/// </summary>
		[Column("MAX_TRANSMISSION_INTERVAL"),           Nullable] public short?    MaxTransmissionInterval        { get; set; } // SMALLINT
		#nullable disable
		/// <summary>
		/// System ID of the client
		/// </summary>
		[Column("CLIENT_SYSTEM_ID"),                 NotNull    ] public string    ClientSystemId                 { get; set; } // VARCHAR(3)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Database Name of the client
		/// </summary>
		[Column("CLIENT_DATABASE_NAME"),             NotNull    ] public string    ClientDatabaseName             { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Hardware key of the client
		/// </summary>
		[Column("CLIENT_HARDWARE_KEY"),              NotNull    ] public string    ClientHardwareKey              { get; set; } // VARCHAR(11)
		#nullable enable
		/// <summary>
		/// Private key of the client
		/// </summary>
		[Column("PRIVATE_KEY"),                         Nullable] public string?   PrivateKey                     { get; set; } // VARCHAR(5000)
		/// <summary>
		/// Personal certificate of the client
		/// </summary>
		[Column("PERSONAL_CERTIFICATE"),                Nullable] public string?   PersonalCertificate            { get; set; } // VARCHAR(5000)
		/// <summary>
		/// Expiration timestamp of the Personal certificate
		/// </summary>
		[Column("CERTIFICATE_EXPIRATION_TIMESTAMP"),    Nullable] public DateTime? CertificateExpirationTimestamp { get; set; } // TIMESTAMP
	}

	/// <summary>
	/// Telemetry inifile section
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="TELEMETRY_INIFILE", IsView=true)]
	public partial class _SYS_TELEMETRY_TelemetryInifile
	{
		#nullable disable
		/// <summary>
		/// Configuration key name
		/// </summary>
		[Column("INI_KEY"),        NotNull    ] public string  IniKey       { get; set; } // VARCHAR(128)
		#nullable enable
		#nullable disable
		/// <summary>
		/// Configuration layer: DEFAULT, SYSTEM, HOST, DATABASE
		/// </summary>
		[Column("INI_LAYER_NAME"), NotNull    ] public string  IniLayerName { get; set; } // VARCHAR(16)
		#nullable enable
		/// <summary>
		/// Configuration value
		/// </summary>
		[Column("INI_VALUE"),         Nullable] public string? IniValue     { get; set; } // VARCHAR(5000)
	}

	/// <summary>
	/// General HANA feature usage information
	/// </summary>
	[Table(Schema="_SYS_TELEMETRY", Name="TEL_HANA_USAGE", IsView=true)]
	public partial class _SYS_TELEMETRY_TelHanaUsage
	{
		/// <summary>
		/// Timestamp ID (UTC)
		/// </summary>
		[Column("SNAPSHOT_ID"),    Nullable] public DateTime? SnapshotId { get; set; } // TIMESTAMP
		/// <summary>
		/// HANA feature name
		/// </summary>
		[Column("0SM_FEAT"),       Nullable] public string?   _0smFeat   { get; set; } // NVARCHAR(256)
		#nullable disable
		/// <summary>
		/// HANA feature type
		/// </summary>
		[Column("0SM_TYPE"),    NotNull    ] public string    _0smType   { get; set; } // VARCHAR(11)
		#nullable enable
		#nullable disable
		/// <summary>
		/// HANA feature subtype
		/// </summary>
		[Column("0SM_SUBT"),    NotNull    ] public string    _0smSubt   { get; set; } // VARCHAR(18)
		#nullable enable
		/// <summary>
		/// HANA feature usage
		/// </summary>
		[Column("0SM_TRAF"),       Nullable] public long?     _0smTraf   { get; set; } // BIGINT
		/// <summary>
		/// HANA feature subtype instance number
		/// </summary>
		[Column("0SM_NORM"),    NotNull    ] public long      _0smNorm   { get; set; } // BIGINT
	}

	[Table(Schema="TESTHANA", Name="Test")]
	public partial class Test
	{
		[Column, NotNull    ] public int  Id           { get; set; } // INTEGER
		[Column,    Nullable] public int? TestAnimalId { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[PrimaryKey, Identity] public int ID { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="testmerge1")]
	public partial class Testmerge1
	{
		[Column("id"),     PrimaryKey,  NotNull] public int  Id     { get; set; } // INTEGER
		[Column("field1"),    Nullable         ] public int? Field1 { get; set; } // INTEGER
		[Column("field2"),    Nullable         ] public int? Field2 { get; set; } // INTEGER
		[Column("field3"),    Nullable         ] public int? Field3 { get; set; } // INTEGER
		[Column("field4"),    Nullable         ] public int? Field4 { get; set; } // INTEGER
		[Column("field5"),    Nullable         ] public int? Field5 { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="TestMerge1")]
	public partial class TestMerge1
	{
		[PrimaryKey, NotNull    ] public int       Id              { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field1          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field2          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field3          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field4          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field5          { get; set; } // INTEGER
		[Column,        Nullable] public long?     FieldInt64      { get; set; } // BIGINT
		[Column,        Nullable] public byte?     FieldBoolean    { get; set; } // TINYINT
		[Column,        Nullable] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column,        Nullable] public string?   FieldNString    { get; set; } // NVARCHAR(20)
		[Column,        Nullable] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column,        Nullable] public char?     FieldNChar      { get; set; } // NCHAR(1)
		[Column,        Nullable] public float?    FieldFloat      { get; set; } // REAL
		[Column,        Nullable] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column,        Nullable] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column,        Nullable] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column,        Nullable] public string?   FieldGuid       { get; set; } // CHAR(36)
		[Column,        Nullable] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column,        Nullable] public DateTime? FieldDate       { get; set; } // DATE
		[Column,        Nullable] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column,        Nullable] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column,        Nullable] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="testmerge2")]
	public partial class Testmerge2
	{
		[Column("id"),     PrimaryKey,  NotNull] public int  Id     { get; set; } // INTEGER
		[Column("field1"),    Nullable         ] public int? Field1 { get; set; } // INTEGER
		[Column("field2"),    Nullable         ] public int? Field2 { get; set; } // INTEGER
		[Column("field3"),    Nullable         ] public int? Field3 { get; set; } // INTEGER
		[Column("field4"),    Nullable         ] public int? Field4 { get; set; } // INTEGER
		[Column("field5"),    Nullable         ] public int? Field5 { get; set; } // INTEGER
	}

	[Table(Schema="TESTHANA", Name="TestMerge2")]
	public partial class TestMerge2
	{
		[PrimaryKey, NotNull    ] public int       Id              { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field1          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field2          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field3          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field4          { get; set; } // INTEGER
		[Column,        Nullable] public int?      Field5          { get; set; } // INTEGER
		[Column,        Nullable] public long?     FieldInt64      { get; set; } // BIGINT
		[Column,        Nullable] public byte?     FieldBoolean    { get; set; } // TINYINT
		[Column,        Nullable] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column,        Nullable] public string?   FieldNString    { get; set; } // NVARCHAR(20)
		[Column,        Nullable] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column,        Nullable] public char?     FieldNChar      { get; set; } // NCHAR(1)
		[Column,        Nullable] public float?    FieldFloat      { get; set; } // REAL
		[Column,        Nullable] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column,        Nullable] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column,        Nullable] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column,        Nullable] public string?   FieldGuid       { get; set; } // CHAR(36)
		[Column,        Nullable] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column,        Nullable] public DateTime? FieldDate       { get; set; } // DATE
		[Column,        Nullable] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column,        Nullable] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column,        Nullable] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="TI_IMPORT_KEYS")]
	public partial class _SYS_RT_TiImportKey
	{
		#nullable disable
		[Column("TABLE_SCHEMA"),    PrimaryKey(1),  NotNull] public string TableSchema   { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TABLE_NAME"),      PrimaryKey(2),  NotNull] public string TableName     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TI_PACKAGE"),      PrimaryKey(3),  NotNull] public string TiPackage     { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TI_NAME"),         PrimaryKey(4),  NotNull] public string TiName        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("TI_TYPE"),         PrimaryKey(5),  NotNull] public string TiType        { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CSV_PACKAGE"),     PrimaryKey(6),  NotNull] public string CsvPackage    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CSV_NAME"),        PrimaryKey(7),  NotNull] public string CsvName       { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("CSV_FILEEXT"),     PrimaryKey(8),  NotNull] public string CsvFileext    { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("KEY_COLUMN_NAME"), PrimaryKey(9),  NotNull] public string KeyColumnName { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column("KEY_VALUE"),       PrimaryKey(10), NotNull] public string KeyValue      { get; set; } // NVARCHAR(5000)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="_UIS_APPSITES")]
	public partial class _SYS_RT_UisAppsite
	{
		#nullable disable
		[Column(),             PrimaryKey(3), NotNull] public string    ID          { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column(),                Nullable           ] public string?   NAME        { get; set; } // NVARCHAR(300)
		[Column(),                Nullable           ] public string?   DESCRIPTION { get; set; } // NVARCHAR(5000)
		[Column(),                Nullable           ] public string?   LAYOUT      { get; set; } // CLOB
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId    { get; set; } // VARCHAR(50)
		#nullable enable
		[Column(),                Nullable           ] public string?   ALIAS       { get; set; } // NVARCHAR(5000)
		#nullable disable
		[Column(),             PrimaryKey(2), NotNull] public string    DTYPE       { get; set; } // VARCHAR(20)
		#nullable enable
		[Column(),                Nullable           ] public int?      VERSION     { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED     { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED     { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),    Nullable           ] public string?   UpdatedBy   { get; set; } // NVARCHAR(300)
		[Column("THEME_ID"),      Nullable           ] public string?   ThemeId     { get; set; } // VARCHAR(50)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_APPSITE_PROPERTIES")]
	public partial class _SYS_RT_UisAppsitePROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(4), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),             PrimaryKey(2), NotNull] public string    DTYPE     { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column(),                            NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NCLOB
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),    Nullable           ] public string?   UpdatedBy { get; set; } // NVARCHAR(300)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_AUDIT_LOG")]
	public partial class _SYS_RT_UisAuditLog
	{
		[Column(),            NotNull] public DateTime TIMESTAMP { get; set; } // TIMESTAMP
		#nullable disable
		[Column("USER_NAME"), NotNull] public string   UserName  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[Column(),            NotNull] public string   HOST      { get; set; } // NVARCHAR(2048)
		#nullable enable
		#nullable disable
		[Column(),            NotNull] public string   MESSAGE   { get; set; } // NCLOB
		#nullable enable
		#nullable disable
		[Column(),            NotNull] public string   STATUS    { get; set; } // VARCHAR(128)
		#nullable enable
	}

	[Table(Schema="_SYS_RT", Name="_UIS_PAGES")]
	public partial class _SYS_RT_UisPage
	{
		#nullable disable
		[Column(),                    PrimaryKey(4), NotNull] public string    ID              { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),         PrimaryKey(1), NotNull] public string    TenantId        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                    PrimaryKey(2), NotNull] public string    DTYPE           { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),           PrimaryKey(3), NotNull] public string    SiteId          { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column("PARENT_ID"),            Nullable           ] public string?   ParentId        { get; set; } // VARCHAR(50)
		[Column(),                       Nullable           ] public string?   NAME            { get; set; } // NVARCHAR(300)
		[Column(),                       Nullable           ] public string?   DESCRIPTION     { get; set; } // NVARCHAR(5000)
		[Column(),                       Nullable           ] public string?   LAYOUT          { get; set; } // CLOB
		[Column("LAYOUT_ID"),            Nullable           ] public string?   LayoutId        { get; set; } // VARCHAR(50)
		[Column(),                       Nullable           ] public string?   ALIAS           { get; set; } // NVARCHAR(5000)
		[Column(),                       Nullable           ] public int?      VERSION         { get; set; } // INTEGER
		[Column(),                       Nullable           ] public DateTime? CREATED         { get; set; } // TIMESTAMP
		[Column(),                       Nullable           ] public DateTime? UPDATED         { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),           Nullable           ] public string?   UpdatedBy       { get; set; } // NVARCHAR(300)
		[Column("IS_PERMISSION_HUB"),    Nullable           ] public int?      IsPermissionHub { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="_UIS_PAGE_PROPERTIES")]
	public partial class _SYS_RT_UisPagePROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(5), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("PAGE_ID"),    PrimaryKey(4), NotNull] public string    PageId    { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                            NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),             PrimaryKey(2), NotNull] public string    DTYPE     { get; set; } // VARCHAR(20)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NVARCHAR(5000)
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),    Nullable           ] public string?   UpdatedBy { get; set; } // NVARCHAR(300)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_APPSITES")]
	public partial class _SYS_RT_UisUserAppsite
	{
		#nullable disable
		[Column(),            PrimaryKey(3), NotNull] public string    ID          { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"), PrimaryKey(2), NotNull] public string    UserName    { get; set; } // NVARCHAR(300)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"), PrimaryKey(1), NotNull] public string    TenantId    { get; set; } // VARCHAR(50)
		#nullable enable
		[Column(),               Nullable           ] public string?   NAME        { get; set; } // NVARCHAR(300)
		[Column(),               Nullable           ] public string?   DESCRIPTION { get; set; } // NVARCHAR(5000)
		[Column(),               Nullable           ] public string?   LAYOUT      { get; set; } // CLOB
		[Column(),               Nullable           ] public string?   ALIAS       { get; set; } // NVARCHAR(5000)
		[Column(),               Nullable           ] public int?      VERSION     { get; set; } // INTEGER
		[Column(),               Nullable           ] public DateTime? CREATED     { get; set; } // TIMESTAMP
		[Column(),               Nullable           ] public DateTime? UPDATED     { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_APPSITE_PROPERTIES")]
	public partial class _SYS_RT_UisUserAppsitePROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(5), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"),  PrimaryKey(2), NotNull] public string    UserName  { get; set; } // NVARCHAR(300)
		#nullable enable
		#nullable disable
		[Column(),             PrimaryKey(4), NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NCLOB
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_PAGES")]
	public partial class _SYS_RT_UisUserPage
	{
		#nullable disable
		[Column(),            PrimaryKey(4), NotNull] public string    ID          { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"), PrimaryKey(2), NotNull] public string    UserName    { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),               Nullable           ] public string?   NAME        { get; set; } // NVARCHAR(300)
		[Column(),               Nullable           ] public string?   DESCRIPTION { get; set; } // NVARCHAR(5000)
		[Column(),               Nullable           ] public string?   LAYOUT      { get; set; } // CLOB
		[Column("LAYOUT_ID"),    Nullable           ] public string?   LayoutId    { get; set; } // VARCHAR(50)
		[Column("PARENT_ID"),    Nullable           ] public string?   ParentId    { get; set; } // VARCHAR(50)
		#nullable disable
		[Column("SITE_ID"),   PrimaryKey(3), NotNull] public string    SiteId      { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"), PrimaryKey(1), NotNull] public string    TenantId    { get; set; } // VARCHAR(50)
		#nullable enable
		[Column(),               Nullable           ] public int?      VERSION     { get; set; } // INTEGER
		[Column(),               Nullable           ] public string?   ALIAS       { get; set; } // NVARCHAR(5000)
		[Column(),               Nullable           ] public DateTime? CREATED     { get; set; } // TIMESTAMP
		[Column(),               Nullable           ] public DateTime? UPDATED     { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_PAGE_PROPERTIES")]
	public partial class _SYS_RT_UisUserPagePROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(5), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("PAGE_ID"),    PrimaryKey(4), NotNull] public string    PageId    { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"),  PrimaryKey(2), NotNull] public string    UserName  { get; set; } // NVARCHAR(300)
		#nullable enable
		#nullable disable
		[Column(),                            NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NVARCHAR(5000)
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_WIDGETS")]
	public partial class _SYS_RT_UisUserWidget
	{
		#nullable disable
		[Column(),                          PrimaryKey(4), NotNull] public string    ID                   { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"),               PrimaryKey(2), NotNull] public string    UserName             { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                             Nullable           ] public string?   NAME                 { get; set; } // NVARCHAR(300)
		[Column(),                             Nullable           ] public string?   DESCRIPTION          { get; set; } // NVARCHAR(5000)
		[Column(),                             Nullable           ] public string?   SRC                  { get; set; } // VARCHAR(5000)
		[Column(),                             Nullable           ] public string?   ICON                 { get; set; } // CLOB
		[Column(),                             Nullable           ] public DateTime? UPDATED              { get; set; } // TIMESTAMP
		[Column("TEMPLATE_ID"),                Nullable           ] public string?   TemplateId           { get; set; } // NVARCHAR(5000)
		[Column("WIDGET_TEMPLATE_LIST_ID"),    Nullable           ] public string?   WidgetTemplateListId { get; set; } // NVARCHAR(2000)
		[Column(),                             Nullable           ] public string?   TYPE                 { get; set; } // NVARCHAR(300)
		#nullable disable
		[Column("SITE_ID"),                 PrimaryKey(3), NotNull] public string    SiteId               { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column("LAYOUT_ID"),                  Nullable           ] public string?   LayoutId             { get; set; } // VARCHAR(50)
		#nullable disable
		[Column("TENANT_ID"),               PrimaryKey(1), NotNull] public string    TenantId             { get; set; } // VARCHAR(50)
		#nullable enable
		[Column("PARENT_ID"),                  Nullable           ] public string?   ParentId             { get; set; } // VARCHAR(50)
		[Column(),                             Nullable           ] public int?      VERSION              { get; set; } // INTEGER
		[Column(),                             Nullable           ] public DateTime? CREATED              { get; set; } // TIMESTAMP
	}

	[Table(Schema="_SYS_RT", Name="_UIS_USER_WIDGET_PROPERTIES")]
	public partial class _SYS_RT_UisUserWidgetPROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(5), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("USER_NAME"),  PrimaryKey(2), NotNull] public string    UserName  { get; set; } // NVARCHAR(300)
		#nullable enable
		#nullable disable
		[Column("WIDGET_ID"),  PrimaryKey(4), NotNull] public string    WidgetId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                            NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NVARCHAR(5000)
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_WIDGETS")]
	public partial class _SYS_RT_UisWidget
	{
		#nullable disable
		[Column(),                          PrimaryKey(4), NotNull] public string    ID                   { get; set; } // VARCHAR(50)
		#nullable enable
		[Column(),                             Nullable           ] public string?   NAME                 { get; set; } // NVARCHAR(300)
		[Column(),                             Nullable           ] public string?   DESCRIPTION          { get; set; } // NVARCHAR(5000)
		[Column(),                             Nullable           ] public string?   SRC                  { get; set; } // VARCHAR(5000)
		[Column(),                             Nullable           ] public string?   ICON                 { get; set; } // CLOB
		[Column("TEMPLATE_ID"),                Nullable           ] public string?   TemplateId           { get; set; } // NVARCHAR(5000)
		[Column("WIDGET_TEMPLATE_LIST_ID"),    Nullable           ] public string?   WidgetTemplateListId { get; set; } // NVARCHAR(2000)
		[Column(),                             Nullable           ] public string?   TYPE                 { get; set; } // NVARCHAR(300)
		#nullable disable
		[Column("TENANT_ID"),               PrimaryKey(1), NotNull] public string    TenantId             { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                          PrimaryKey(2), NotNull] public string    DTYPE                { get; set; } // VARCHAR(20)
		#nullable enable
		#nullable disable
		[Column("SITE_ID"),                 PrimaryKey(3), NotNull] public string    SiteId               { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column("PARENT_ID"),                  Nullable           ] public string?   ParentId             { get; set; } // VARCHAR(50)
		[Column("LAYOUT_ID"),                  Nullable           ] public string?   LayoutId             { get; set; } // VARCHAR(50)
		[Column(),                             Nullable           ] public int?      VERSION              { get; set; } // INTEGER
		[Column(),                             Nullable           ] public DateTime? CREATED              { get; set; } // TIMESTAMP
		[Column(),                             Nullable           ] public DateTime? UPDATED              { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),                 Nullable           ] public string?   UpdatedBy            { get; set; } // NVARCHAR(300)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_WIDGET_PROPERTIES")]
	public partial class _SYS_RT_UisWidgetPROPERTy
	{
		#nullable disable
		[Column(),             PrimaryKey(5), NotNull] public string    ID        { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("WIDGET_ID"),  PrimaryKey(4), NotNull] public string    WidgetId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                            NotNull] public string    KEY       { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                Nullable           ] public string?   VALUE     { get; set; } // NVARCHAR(5000)
		#nullable disable
		[Column("SITE_ID"),    PrimaryKey(3), NotNull] public string    SiteId    { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),  PrimaryKey(1), NotNull] public string    TenantId  { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),             PrimaryKey(2), NotNull] public string    DTYPE     { get; set; } // VARCHAR(20)
		#nullable enable
		[Column(),                Nullable           ] public int?      VERSION   { get; set; } // INTEGER
		[Column(),                Nullable           ] public DateTime? CREATED   { get; set; } // TIMESTAMP
		[Column(),                Nullable           ] public DateTime? UPDATED   { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),    Nullable           ] public string?   UpdatedBy { get; set; } // NVARCHAR(300)
		[Column("VALUE_TYPE"),    Nullable           ] public string?   ValueType { get; set; } // NVARCHAR(20)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_WIDGET_TEMPLATES")]
	public partial class _SYS_RT_UisWidgetTemplate
	{
		#nullable disable
		[Column(),                PrimaryKey(3), NotNull] public string    ID           { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),     PrimaryKey(1), NotNull] public string    TenantId     { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("REPOSITORY_ID"), PrimaryKey(2), NotNull] public string    RepositoryId { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column(),                   Nullable           ] public string?   NAME         { get; set; } // NVARCHAR(300)
		[Column(),                   Nullable           ] public string?   DESCRIPTION  { get; set; } // NVARCHAR(5000)
		[Column(),                   Nullable           ] public string?   SPECXMLURL   { get; set; } // NVARCHAR(5000)
		[Column(),                   Nullable           ] public string?   THUMBNAIL    { get; set; } // CLOB
		[Column(),                   Nullable           ] public string?   CATEGORIES   { get; set; } // VARCHAR(300)
		[Column(),                   Nullable           ] public string?   TYPE         { get; set; } // NVARCHAR(300)
		[Column(),                   Nullable           ] public int?      VERSION      { get; set; } // INTEGER
		[Column(),                   Nullable           ] public DateTime? CREATED      { get; set; } // TIMESTAMP
		[Column(),                   Nullable           ] public DateTime? UPDATED      { get; set; } // TIMESTAMP
		[Column("UPDATED_BY"),       Nullable           ] public string?   UpdatedBy    { get; set; } // NVARCHAR(300)
	}

	[Table(Schema="_SYS_RT", Name="_UIS_WIDGET_TEMPLATE_LISTS")]
	public partial class _SYS_RT_UisWidgetTemplateList
	{
		#nullable disable
		[Column("TENANT_ID"),     PrimaryKey(1), NotNull] public string  TenantId     { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("REPOSITORY_ID"), PrimaryKey(2), NotNull] public string  RepositoryId { get; set; } // NVARCHAR(2000)
		#nullable enable
		[Column(),                   Nullable           ] public string? NAME         { get; set; } // NVARCHAR(300)
		[Column(),                   Nullable           ] public string? TYPE         { get; set; } // VARCHAR(10)
		[Column(),                   Nullable           ] public int?    VERSION      { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_RT", Name="_UIS_WIDGET_TEMPLATE_PROPERTIES")]
	public partial class _SYS_RT_UisWidgetTemplatePROPERTy
	{
		#nullable disable
		[Column(),                     PrimaryKey(5), NotNull] public string  ID               { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("TENANT_ID"),          PrimaryKey(1), NotNull] public string  TenantId         { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column("REPOSITORY_ID"),      PrimaryKey(2), NotNull] public string  RepositoryId     { get; set; } // NVARCHAR(2000)
		#nullable enable
		#nullable disable
		[Column("WIDGET_TEMPLATE_ID"), PrimaryKey(3), NotNull] public string  WidgetTemplateId { get; set; } // VARCHAR(50)
		#nullable enable
		#nullable disable
		[Column(),                     PrimaryKey(4), NotNull] public string  KEY              { get; set; } // NVARCHAR(300)
		#nullable enable
		[Column(),                        Nullable           ] public string? VALUE            { get; set; } // NVARCHAR(5000)
		[Column("VALUE_TYPE"),            Nullable           ] public string? ValueType        { get; set; } // NVARCHAR(20)
		[Column(),                        Nullable           ] public int?    VERSION          { get; set; } // INTEGER
	}

	[Table(Schema="_SYS_XS", Name="USAGE_MEASURING_OBJECTS")]
	public partial class _SYS_XS_UsageMeasuringObject
	{
		#nullable disable
		[PrimaryKey(1), NotNull] public string APP  { get; set; } // NVARCHAR(256)
		#nullable enable
		#nullable disable
		[PrimaryKey(2), NotNull] public string NAME { get; set; } // NVARCHAR(1024)
		#nullable enable
	}

	[Table(Schema="_SYS_XS", Name="USAGE_STATISTICS")]
	public partial class _SYS_XS_UsageStatistic
	{
		#nullable disable
		[Column("APPLICATION_NAME"), NotNull] public string   ApplicationName { get; set; } // NVARCHAR(256)
		#nullable enable
		[Column(),                   NotNull] public DateTime UNTIL           { get; set; } // TIMESTAMP
		[Column(),                   NotNull] public long     COUNTER         { get; set; } // BIGINT
	}

	[Table(Schema="_SYS_XS", Name="XSJS_USAGE")]
	public partial class _SYS_XS_XsjsUsage
	{
		#nullable disable
		[Column, NotNull] public string   FEATURE   { get; set; } // NVARCHAR(1024)
		#nullable enable
		[Column, NotNull] public double   TRAFFIC   { get; set; } // DOUBLE
		[Column, NotNull] public DateTime TIMESTAMP { get; set; } // TIMESTAMP
		#nullable disable
		[Column, NotNull] public string   APP       { get; set; } // NVARCHAR(256)
		#nullable enable
	}

	public static partial class SYSTEMDBDBStoredProcedures
	{
		#region FindNologgingTable

		public static int FindNologgingTable(this SYSTEMDBDB dataConnection, string? SCHEMANAME, string? TABLENAME, out int? RESULT)
		{
			var ret = dataConnection.ExecuteProc("\"SYS\".\"FIND_NOLOGGING_TABLE\"",
				new DataParameter("SCHEMANAME", SCHEMANAME, DataType.VarChar),
				new DataParameter("TABLENAME", TABLENAME, DataType.VarChar),
				new DataParameter("RESULT", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			RESULT = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["RESULT"]).Value);

			return ret;
		}

		#endregion

		#region DsoRehash

		public static int DsoRehash(this SYSTEMDBDB dataConnection, string? DSONAME, string? HASHFUNCTION)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"DSO_REHASH\"",
				new DataParameter("DSONAME",      DSONAME,      DataType.VarChar),
				new DataParameter("HASHFUNCTION", HASHFUNCTION, DataType.VarChar));
		}

		#endregion

		#region DsoVersion

		public static int DsoVersion(this SYSTEMDBDB dataConnection, out string? DSOVERSION)
		{
			var ret = dataConnection.ExecuteProc("\"SYS\".\"DSO_VERSION\"",
				new DataParameter("DSOVERSION", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 20 });

			DSOVERSION = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["DSOVERSION"]).Value);

			return ret;
		}

		#endregion

		#region ResetCeDebugJsons

		public static int ResetCeDebugJsons(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"RESET_CE_DEBUG_JSONS\"");
		}

		#endregion

		#region ResetCeDebugNodeMapping

		public static int ResetCeDebugNodeMapping(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"RESET_CE_DEBUG_NODE_MAPPING\"");
		}

		#endregion

		#region ResetCeDebugInfos

		public static int ResetCeDebugInfos(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"RESET_CE_DEBUG_INFOS\"");
		}

		#endregion

		#region TruncateProcedureObjects

		public static int TruncateProcedureObjects(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"TRUNCATE_PROCEDURE_OBJECTS\"");
		}

		#endregion

		#region TruncateSqlscriptTrace

		public static int TruncateSqlscriptTrace(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"TRUNCATE_SQLSCRIPT_TRACE\"");
		}

		#endregion

		#region UnsetSqlscriptTrace

		public static int UnsetSqlscriptTrace(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"UNSET_SQLSCRIPT_TRACE\"");
		}

		#endregion

		#region GetObjectDefinition

		public static IEnumerable<GetObjectDEFINITIONResult> GetObjectDefinition(this SYSTEMDBDB dataConnection, string? SCHEMA, string? OBJECT)
		{
			return dataConnection.QueryProc<GetObjectDEFINITIONResult>("\"SYS\".\"GET_OBJECT_DEFINITION\"",
				new DataParameter("SCHEMA", SCHEMA, DataType.NVarChar),
				new DataParameter("OBJECT", OBJECT, DataType.NVarChar));
		}

		public partial class GetObjectDEFINITIONResult
		{
			public string? SCHEMA_NAME               { get; set; }
			public string? OBJECT_NAME               { get; set; }
			public string? OBJECT_TYPE               { get; set; }
			public string? OBJECT_OID                { get; set; }
			public string? OBJECT_CREATION_STATEMENT { get; set; }
		}

		#endregion

		#region ReorgClearLogs

		public static int ReorgClearLogs(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"REORG_CLEAR_LOGS\"");
		}

		#endregion

		#region AnalyzeColumnsToMaterialize

		public static IEnumerable<AnalyzeColumnsToMATERIALIZEResult> AnalyzeColumnsToMaterialize(this SYSTEMDBDB dataConnection, string? SELECT_STMT)
		{
			return dataConnection.QueryProc<AnalyzeColumnsToMATERIALIZEResult>("\"SYS\".\"ANALYZE_COLUMNS_TO_MATERIALIZE\"",
				new DataParameter("SELECT_STMT", SELECT_STMT, DataType.Text));
		}

		public partial class AnalyzeColumnsToMATERIALIZEResult
		{
			public string? SCHEMA_NAME              { get; set; }
			public string? TABLE_NAME               { get; set; }
			public string? EXPRESSION               { get; set; }
			public string? RESULT_TYPE              { get; set; }
			public int?    RESULT_LENGTH            { get; set; }
			public int?    RESULT_SCALE             { get; set; }
			public string? USAGE                    { get; set; }
			public string? ALREADY_EXISTS           { get; set; }
			public string? MATERIALIZED_COLUMN_NAME { get; set; }
		}

		#endregion

		#region GetTypeMap

		public static IEnumerable<GetTypeMAPResult> GetTypeMap(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetTypeMAPResult>("\"SYS\".\"GET_TYPE_MAP\"");
		}

		public partial class GetTypeMAPResult
		{
			public string? TYPE_CODE           { get; set; }
			public string? TYPE_NAME           { get; set; }
			public string? EVAL_TYPE_NAME      { get; set; }
			public string? TYPE_SIZE           { get; set; }
			public string? TYPE_ALIGNMENT      { get; set; }
			public string? TYPE_DISPLAY_LENGTH { get; set; }
		}

		#endregion

		#region GetFunctionMap

		public static IEnumerable<GetFunctionMAPResult> GetFunctionMap(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetFunctionMAPResult>("\"SYS\".\"GET_FUNCTION_MAP\"");
		}

		public partial class GetFunctionMAPResult
		{
			public string? FUNCTION_NAME { get; set; }
			public string? RETURN_TYPE   { get; set; }
			public string? ARGUMENT_TYPE { get; set; }
		}

		#endregion

		#region GetFunctionDictionaryFromRsToCsEngine

		public static IEnumerable<GetFunctionDictionaryFromRsToCsENGINEResult> GetFunctionDictionaryFromRsToCsEngine(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetFunctionDictionaryFromRsToCsENGINEResult>("\"SYS\".\"GET_FUNCTION_DICTIONARY_FROM_RS_TO_CS_ENGINE\"");
		}

		public partial class GetFunctionDictionaryFromRsToCsENGINEResult
		{
			public string? FUNCTION_NAME { get; set; }
			public string? USE_TEMPLATE  { get; set; }
			public string? TEMPLATE      { get; set; }
		}

		#endregion

		#region GetFunctionsForRsCsEngines

		public static IEnumerable<GetFunctionsForRsCsENGINESResult> GetFunctionsForRsCsEngines(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetFunctionsForRsCsENGINESResult>("\"SYS\".\"GET_FUNCTIONS_FOR_RS_CS_ENGINES\"");
		}

		public partial class GetFunctionsForRsCsENGINESResult
		{
			public string? FUNCTION_NAME { get; set; }
			public string? RETURN_TYPE   { get; set; }
			public string? ARGUMENT_TYPE { get; set; }
		}

		#endregion

		#region GetFunctionsForRsEngineOnly

		public static IEnumerable<GetFunctionsForRsEngineONLYResult> GetFunctionsForRsEngineOnly(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetFunctionsForRsEngineONLYResult>("\"SYS\".\"GET_FUNCTIONS_FOR_RS_ENGINE_ONLY\"");
		}

		public partial class GetFunctionsForRsEngineONLYResult
		{
			public string? FUNCTION_NAME { get; set; }
			public string? RETURN_TYPE   { get; set; }
			public string? ARGUMENT_TYPE { get; set; }
		}

		#endregion

		#region CheckFunctionFromRsToCsEngine

		public static IEnumerable<CheckFunctionFromRsToCsENGINEResult> CheckFunctionFromRsToCsEngine(this SYSTEMDBDB dataConnection, string? FUNCTION_NAME)
		{
			return dataConnection.QueryProc<CheckFunctionFromRsToCsENGINEResult>("\"SYS\".\"CHECK_FUNCTION_FROM_RS_TO_CS_ENGINE\"",
				new DataParameter("FUNCTION_NAME", FUNCTION_NAME, DataType.VarChar));
		}

		public partial class CheckFunctionFromRsToCsENGINEResult
		{
			public string? FUNCTION_NAME { get; set; }
			public string? USE_TEMPLATE  { get; set; }
			public string? TEMPLATE      { get; set; }
		}

		#endregion

		#region GetDbversionAndGithashForAutomigration

		public static IEnumerable<GetDbversionAndGithashForAUTOMIGRATIONResult> GetDbversionAndGithashForAutomigration(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<GetDbversionAndGithashForAUTOMIGRATIONResult>("\"SYS\".\"GET_DBVERSION_AND_GITHASH_FOR_AUTOMIGRATION\"");
		}

		public partial class GetDbversionAndGithashForAUTOMIGRATIONResult
		{
			public string? DB_VERSION { get; set; }
			public string? GIT_HASH   { get; set; }
		}

		#endregion

		#region TableStatistics

		public static int TableStatistics(this SYSTEMDBDB dataConnection, string? TABLE_IN, string? TABLE_OUT)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"TABLE_STATISTICS\"",
				new DataParameter("TABLE_IN",  TABLE_IN,  DataType.NVarChar),
				new DataParameter("TABLE_OUT", TABLE_OUT, DataType.NVarChar));
		}

		#endregion

		#region ReorganizeRowstore

		public static int ReorganizeRowstore(this SYSTEMDBDB dataConnection, string? ACTION_NAME, string? SCHEMA_NAME, string? TABLE_NAME)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"REORGANIZE_ROWSTORE\"",
				new DataParameter("ACTION_NAME", ACTION_NAME, DataType.VarChar),
				new DataParameter("SCHEMA_NAME", SCHEMA_NAME, DataType.NVarChar),
				new DataParameter("TABLE_NAME",  TABLE_NAME,  DataType.NVarChar));
		}

		#endregion

		#region IsValidUserName

		public static int IsValidUserName(this SYSTEMDBDB dataConnection, string? USER_NAME, out int? ERROR_CODE, out string? ERROR_MESSAGE)
		{
			var ret = dataConnection.ExecuteProc("\"SYS\".\"IS_VALID_USER_NAME\"",
				new DataParameter("USER_NAME",     USER_NAME,     DataType.NVarChar),
				new DataParameter("ERROR_CODE", null,    DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("ERROR_MESSAGE", null, DataType.NVarChar) { Direction = ParameterDirection.Output, Size = 128 });

			ERROR_CODE    = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["ERROR_CODE"]).   Value);
			ERROR_MESSAGE = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["ERROR_MESSAGE"]).Value);

			return ret;
		}

		#endregion

		#region IsValidPassword

		public static int IsValidPassword(this SYSTEMDBDB dataConnection, string? PASSWORD, out int? ERROR_CODE, out string? ERROR_MESSAGE)
		{
			var ret = dataConnection.ExecuteProc("\"SYS\".\"IS_VALID_PASSWORD\"",
				new DataParameter("PASSWORD",      PASSWORD,      DataType.NVarChar),
				new DataParameter("ERROR_CODE", null,    DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("ERROR_MESSAGE", null, DataType.NVarChar) { Direction = ParameterDirection.Output, Size = 128 });

			ERROR_CODE    = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["ERROR_CODE"]).   Value);
			ERROR_MESSAGE = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["ERROR_MESSAGE"]).Value);

			return ret;
		}

		#endregion

		#region GetNextNumberFromNumberRange

		public static int GetNextNumberFromNumberRange(this SYSTEMDBDB dataConnection, string? SCHEMA_NAME, string? TABLE_NAME, string? CLIENT_ID, string? NUMBER_RANGE, string? NUMBER_RANGE_OBJECT, string? NUMBER_RANGE_SUBOBJECT, string? NUMBER_RANGE_TO_YEAR, int? QUANTITY, int? AUTONOMOUS_TRANSACTION, int? NUMBER_RANGE_CYCLE, decimal? WARNING_PERCENTAGE, out decimal? NEW_NUMBER, out int? NEW_QUANTITY, out int? RC)
		{
			var ret = dataConnection.ExecuteProc("\"SYS\".\"GET_NEXT_NUMBER_FROM_NUMBER_RANGE\"",
				new DataParameter("SCHEMA_NAME",  SCHEMA_NAME,  DataType.NVarChar),
				new DataParameter("TABLE_NAME",   TABLE_NAME,   DataType.NVarChar),
				new DataParameter("CLIENT_ID",    CLIENT_ID,    DataType.NVarChar),
				new DataParameter("NUMBER_RANGE", NUMBER_RANGE, DataType.NVarChar),
				new DataParameter("NUMBER_RANGE_OBJECT", NUMBER_RANGE_OBJECT, DataType.NVarChar),
				new DataParameter("NUMBER_RANGE_SUBOBJECT", NUMBER_RANGE_SUBOBJECT, DataType.NVarChar),
				new DataParameter("NUMBER_RANGE_TO_YEAR", NUMBER_RANGE_TO_YEAR, DataType.NVarChar),
				new DataParameter("QUANTITY",     QUANTITY,     DataType.Int32),
				new DataParameter("AUTONOMOUS_TRANSACTION", AUTONOMOUS_TRANSACTION, DataType.Int32),
				new DataParameter("NUMBER_RANGE_CYCLE", NUMBER_RANGE_CYCLE, DataType.Int32),
				new DataParameter("WARNING_PERCENTAGE", WARNING_PERCENTAGE, DataType.Decimal),
				new DataParameter("NEW_NUMBER", null,   DataType.Decimal) { Direction = ParameterDirection.Output, Size = 65535 },
				new DataParameter("NEW_QUANTITY", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("RC", null,           DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			NEW_NUMBER   = Converter.ChangeTypeTo<decimal?>(((IDbDataParameter)dataConnection.Command.Parameters["NEW_NUMBER"]).  Value);
			NEW_QUANTITY = Converter.ChangeTypeTo<int?>    (((IDbDataParameter)dataConnection.Command.Parameters["NEW_QUANTITY"]).Value);
			RC           = Converter.ChangeTypeTo<int?>    (((IDbDataParameter)dataConnection.Command.Parameters["RC"]).          Value);

			return ret;
		}

		#endregion

		#region TextConfigurationDrop

		public static int TextConfigurationDrop(this SYSTEMDBDB dataConnection, string? SCHEMA_NAME, string? NAME, string? TYPE)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"TEXT_CONFIGURATION_DROP\"",
				new DataParameter("SCHEMA_NAME", SCHEMA_NAME, DataType.NVarChar),
				new DataParameter("NAME",        NAME,        DataType.NVarChar),
				new DataParameter("TYPE",        TYPE,        DataType.VarChar));
		}

		#endregion

		#region GetDynamicResultCacheImplicitMatchCandidatesInStatement

		public static IEnumerable<GetDynamicResultCacheImplicitMatchCandidatesInSTATEMENTResult> GetDynamicResultCacheImplicitMatchCandidatesInStatement(this SYSTEMDBDB dataConnection, string? SQL_STATEMENT)
		{
			return dataConnection.QueryProc<GetDynamicResultCacheImplicitMatchCandidatesInSTATEMENTResult>("\"SYS\".\"GET_DYNAMIC_RESULT_CACHE_IMPLICIT_MATCH_CANDIDATES_IN_STATEMENT\"",
				new DataParameter("SQL_STATEMENT", SQL_STATEMENT, DataType.NText));
		}

		public partial class GetDynamicResultCacheImplicitMatchCandidatesInSTATEMENTResult
		{
			public string? RESULT { get; set; }
		}

		#endregion

		#region CdsCatalogCleanup

		public static int CdsCatalogCleanup(this SYSTEMDBDB dataConnection, out byte? SUCCESS, out string? MESSAGE, string? SCHEMA_NAME, string? NAMESPACE_FILTER)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_RT\".\"CDS_CATALOG_CLEANUP\"",
				new DataParameter("SUCCESS", null, DataType.Byte) { Direction = ParameterDirection.Output, Size = 3 },
				new DataParameter("MESSAGE", null, DataType.NVarChar) { Direction = ParameterDirection.Output, Size = 3000 },
				new DataParameter("SCHEMA_NAME", SCHEMA_NAME, DataType.NVarChar),
				new DataParameter("NAMESPACE_FILTER", NAMESPACE_FILTER, DataType.NVarChar));

			SUCCESS = Converter.ChangeTypeTo<byte?>  (((IDbDataParameter)dataConnection.Command.Parameters["SUCCESS"]).Value);
			MESSAGE = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["MESSAGE"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGVIEW

		public static int DROPEXISTINGVIEW0(this SYSTEMDBDB dataConnection, string? VIEWNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"DROPEXISTINGVIEW\"",
				new DataParameter("VIEWNAME",   VIEWNAME,   DataType.VarChar),
				new DataParameter("SCHEMANAME", SCHEMANAME, DataType.VarChar));
		}

		#endregion

		#region PersonSelectByKey

		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this SYSTEMDBDB dataConnection, int? ID)
		{
			return dataConnection.QueryProc<PersonSelectByKeyResult>("\"TESTHANA\".\"Person_SelectByKey\"",
				new DataParameter("ID", ID, DataType.Int32));
		}

		public partial class PersonSelectByKeyResult
		{
			public int     PersonID   { get; set; }
			#nullable disable
			public string  FirstName  { get; set; }
			#nullable enable
			#nullable disable
			public string  LastName   { get; set; }
			#nullable enable
			public string? MiddleName { get; set; }
			#nullable disable
			public string  Gender     { get; set; }
			#nullable enable
		}

		#endregion

		#region PersonSelectListByName

		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this SYSTEMDBDB dataConnection, string? FIRSTNAME, string? LASTNAME)
		{
			return dataConnection.QueryProc<PersonSelectListByNameResult>("\"TESTHANA\".\"Person_SelectListByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME, DataType.NVarChar),
				new DataParameter("LASTNAME",  LASTNAME,  DataType.NVarChar));
		}

		public partial class PersonSelectListByNameResult
		{
			public int     PersonID   { get; set; }
			#nullable disable
			public string  FirstName  { get; set; }
			#nullable enable
			#nullable disable
			public string  LastName   { get; set; }
			#nullable enable
			public string? MiddleName { get; set; }
			#nullable disable
			public string  Gender     { get; set; }
			#nullable enable
		}

		#endregion

		#region PersonUpdate

		public static int PersonUpdate(this SYSTEMDBDB dataConnection, int? PERSONID, string? FIRSTNAME, string? LASTNAME, string? MIDDLENAME, char? GENDER)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"Person_Update\"",
				new DataParameter("PERSONID",   PERSONID,   DataType.Int32),
				new DataParameter("FIRSTNAME",  FIRSTNAME,  DataType.NVarChar),
				new DataParameter("LASTNAME",   LASTNAME,   DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",     GENDER,     DataType.Char));
		}

		#endregion

		#region PersonDelete

		public static int PersonDelete(this SYSTEMDBDB dataConnection, int? PERSONID)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"Person_Delete\"",
				new DataParameter("PERSONID", PERSONID, DataType.Int32));
		}

		#endregion

		#region PatientSelectAll

		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectAllResult>("\"TESTHANA\".\"Patient_SelectAll\"");
		}

		public partial class PatientSelectAllResult
		{
			public int?    PersonID   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public string? Gender     { get; set; }
			public string? Diagnosis  { get; set; }
		}

		#endregion

		#region PatientSelectByName

		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this SYSTEMDBDB dataConnection, string? FIRSTNAME, string? LASTNAME)
		{
			return dataConnection.QueryProc<PatientSelectByNameResult>("\"TESTHANA\".\"Patient_SelectByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME, DataType.NVarChar),
				new DataParameter("LASTNAME",  LASTNAME,  DataType.NVarChar));
		}

		public partial class PatientSelectByNameResult
		{
			public int?    PersonID   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public string? Gender     { get; set; }
			public string? Diagnosis  { get; set; }
		}

		#endregion

		#region OutRefTest

		public static int OutRefTest0(this SYSTEMDBDB dataConnection, int? ID, out int? OUTPUTID, ref int? INPUTOUTPUTID, string? STR, out string? OUTPUTSTR, ref string? INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"TESTHANA\".\"OutRefTest\"",
				new DataParameter("ID",             ID,             DataType.Int32),
				new DataParameter("OUTPUTID", null,       DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("INPUTOUTPUTID",  INPUTOUTPUTID,  DataType.Int32) { Direction = ParameterDirection.InputOutput, Size = 10 },
				new DataParameter("STR",            STR,            DataType.VarChar),
				new DataParameter("OUTPUTSTR", null,      DataType.VarChar) { Direction = ParameterDirection.Output, Size = 50 },
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTID       = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTID"]).      Value);
			INPUTOUTPUTID  = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTID"]). Value);
			OUTPUTSTR      = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region OutRefEnumTest

		public static int OutRefEnumTest0(this SYSTEMDBDB dataConnection, string? STR, out string? OUTPUTSTR, ref string? INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"TESTHANA\".\"OutRefEnumTest\"",
				new DataParameter("STR",            STR,            DataType.VarChar),
				new DataParameter("OUTPUTSTR", null,      DataType.VarChar) { Direction = ParameterDirection.Output, Size = 50 },
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTSTR      = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region SelectImplicitColumn

		public static IEnumerable<SelectImplicitColumnResult0> SelectImplicitColumn0(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<SelectImplicitColumnResult0>("\"TESTHANA\".\"SelectImplicitColumn\"");
		}

		public partial class SelectImplicitColumnResult0
		{
			[Column("123")] public int? _123 { get; set; }
		}

		#endregion

		#region DuplicateColumnNames

		public static IEnumerable<DuplicateColumnNamesResult0> DuplicateColumnNames0(this SYSTEMDBDB dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new DuplicateColumnNamesResult0
				{
					id      = Converter.ChangeTypeTo<int?>   (dataReader.GetValue(0), ms),
					Column2 = Converter.ChangeTypeTo<string?>(dataReader.GetValue(1), ms),
				},
				"\"TESTHANA\".\"DuplicateColumnNames\"");
		}

		public partial class DuplicateColumnNamesResult0
		{
			               public int?    id      { get; set; }
			[Column("id")] public string? Column2 { get; set; }
		}

		#endregion

		#region AddIssue792Record

		public static int AddIssue792Record(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"AddIssue792Record\"");
		}

		#endregion

		#region PrdGlobalEccCvMARAproc

		public static IEnumerable<PrdGlobalEccCvMARAprocResult> PrdGlobalEccCvMARAproc(this SYSTEMDBDB dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new PrdGlobalEccCvMARAprocResult
				{
					id      = Converter.ChangeTypeTo<int?>   (dataReader.GetValue(0), ms),
					Column2 = Converter.ChangeTypeTo<string?>(dataReader.GetValue(1), ms),
				},
				"\"TESTHANA\".\"prd.global.ecc/CV_MARAproc\"");
		}

		public partial class PrdGlobalEccCvMARAprocResult
		{
			               public int?    id      { get; set; }
			[Column("id")] public string? Column2 { get; set; }
		}

		#endregion

		#region TelemetryHanaUsage

		public static int TelemetryHanaUsage(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_HANA_USAGE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region SpecialFunctionEmailManagement

		public static int SpecialFunctionEmailManagement(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SPECIAL_FUNCTION_EMAIL_MANAGEMENT\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGTABLE

		public static int DROPEXISTINGTABLE0(this SYSTEMDBDB dataConnection, string? TABLENAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"DROPEXISTINGTABLE\"",
				new DataParameter("TABLENAME",  TABLENAME,  DataType.VarChar),
				new DataParameter("SCHEMANAME", SCHEMANAME, DataType.VarChar));
		}

		#endregion

		#region SpecialFunctionActivateObjects

		public static int SpecialFunctionActivateObjects(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SPECIAL_FUNCTION_ACTIVATE_OBJECTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region OutRefTest

		public static int OutRefTest1(this SYSTEMDBDB dataConnection, int? ID, out int? OUTPUTID, ref int? INPUTOUTPUTID, string? STR, out string? OUTPUTSTR, ref string? INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"SYSTEM\".\"OutRefTest\"",
				new DataParameter("ID",             ID,             DataType.Int32),
				new DataParameter("OUTPUTID", null,       DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("INPUTOUTPUTID",  INPUTOUTPUTID,  DataType.Int32) { Direction = ParameterDirection.InputOutput, Size = 10 },
				new DataParameter("STR",            STR,            DataType.VarChar),
				new DataParameter("OUTPUTSTR", null,      DataType.VarChar) { Direction = ParameterDirection.Output, Size = 50 },
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTID       = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTID"]).      Value);
			INPUTOUTPUTID  = Converter.ChangeTypeTo<int?>   (((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTID"]). Value);
			OUTPUTSTR      = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region SpecialFunctionDeleteAlerts

		public static int SpecialFunctionDeleteAlerts(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SPECIAL_FUNCTION_DELETE_ALERTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region OutRefEnumTest

		public static int OutRefEnumTest1(this SYSTEMDBDB dataConnection, string? STR, out string? OUTPUTSTR, ref string? INPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("\"SYSTEM\".\"OutRefEnumTest\"",
				new DataParameter("STR",            STR,            DataType.VarChar),
				new DataParameter("OUTPUTSTR", null,      DataType.VarChar) { Direction = ParameterDirection.Output, Size = 50 },
				new DataParameter("INPUTOUTPUTSTR", INPUTOUTPUTSTR, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			OUTPUTSTR      = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region RemoveStatisticsStoreUsedValues

		public static int RemoveStatisticsStoreUsedValues(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"REMOVE_STATISTICS_STORE_USED_VALUES\"");
		}

		#endregion

		#region StartupAppendix

		public static IEnumerable<StartupAPPENDIXResult> StartupAppendix(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<StartupAPPENDIXResult>("\"_SYS_STATISTICS\".\"STARTUP_APPENDIX\"");
		}

		public partial class StartupAPPENDIXResult
		{
			[Column("1")] public int? _1 { get; set; }
		}

		#endregion

		#region SelectImplicitColumn

		public static IEnumerable<SelectImplicitColumnResult1> SelectImplicitColumn1(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<SelectImplicitColumnResult1>("\"SYSTEM\".\"SelectImplicitColumn\"");
		}

		public partial class SelectImplicitColumnResult1
		{
			[Column("123")] public int? _123 { get; set; }
		}

		#endregion

		#region TelemetrySystemOverview

		public static int TelemetrySystemOverview(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_SYSTEM_OVERVIEW\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DuplicateColumnNames

		public static IEnumerable<DuplicateColumnNamesResult1> DuplicateColumnNames1(this SYSTEMDBDB dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new DuplicateColumnNamesResult1
				{
					id      = Converter.ChangeTypeTo<int?>   (dataReader.GetValue(0), ms),
					Column2 = Converter.ChangeTypeTo<string?>(dataReader.GetValue(1), ms),
				},
				"\"SYSTEM\".\"DuplicateColumnNames\"");
		}

		public partial class DuplicateColumnNamesResult1
		{
			               public int?    id      { get; set; }
			[Column("id")] public string? Column2 { get; set; }
		}

		#endregion

		#region PersonInsert

		public static int PersonInsert(this SYSTEMDBDB dataConnection, string? FIRSTNAME, string? LASTNAME, string? MIDDLENAME, char? GENDER)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"Person_Insert\"",
				new DataParameter("FIRSTNAME",  FIRSTNAME,  DataType.NVarChar),
				new DataParameter("LASTNAME",   LASTNAME,   DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",     GENDER,     DataType.Char));
		}

		#endregion

		#region TelemetryHostInformation

		public static int TelemetryHostInformation(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_HOST_INFORMATION\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGPROCEDURE

		public static int DROPEXISTINGPROCEDURE0(this SYSTEMDBDB dataConnection, string? PROCEDURENAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"DROPEXISTINGPROCEDURE\"",
				new DataParameter("PROCEDURENAME", PROCEDURENAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",    SCHEMANAME,    DataType.VarChar));
		}

		#endregion

		#region DROPEXISTINGFUNCTION

		public static int DROPEXISTINGFUNCTION0(this SYSTEMDBDB dataConnection, string? FUNCTIONNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"DROPEXISTINGFUNCTION\"",
				new DataParameter("FUNCTIONNAME", FUNCTIONNAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",   SCHEMANAME,   DataType.VarChar));
		}

		#endregion

		#region TelemetryLicenses

		public static int TelemetryLicenses(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_LICENSES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DROPCONSTRAINTFROMTABLE

		public static int DROPCONSTRAINTFROMTABLE0(this SYSTEMDBDB dataConnection, string? TABLENAME, string? CONSTRAINTNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"TESTHANA\".\"DROPCONSTRAINTFROMTABLE\"",
				new DataParameter("TABLENAME",      TABLENAME,      DataType.VarChar),
				new DataParameter("CONSTRAINTNAME", CONSTRAINTNAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",     SCHEMANAME,     DataType.VarChar));
		}

		#endregion

		#region PersonSelectAll

		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<PersonSelectAllResult>("\"TESTHANA\".\"Person_SelectAll\"");
		}

		public partial class PersonSelectAllResult
		{
			public int     PersonID   { get; set; }
			#nullable disable
			public string  FirstName  { get; set; }
			#nullable enable
			#nullable disable
			public string  LastName   { get; set; }
			#nullable enable
			public string? MiddleName { get; set; }
			#nullable disable
			public string  Gender     { get; set; }
			#nullable enable
		}

		#endregion

		#region TelemetryInifileContents

		public static int TelemetryInifileContents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_INIFILE_CONTENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region PersonSelectByName

		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this SYSTEMDBDB dataConnection, string? FIRSTNAME, string? LASTNAME)
		{
			return dataConnection.QueryProc<PersonSelectByNameResult>("\"TESTHANA\".\"Person_SelectByName\"",
				new DataParameter("FIRSTNAME", FIRSTNAME, DataType.NVarChar),
				new DataParameter("LASTNAME",  LASTNAME,  DataType.NVarChar));
		}

		public partial class PersonSelectByNameResult
		{
			public int     PersonID   { get; set; }
			#nullable disable
			public string  FirstName  { get; set; }
			#nullable enable
			#nullable disable
			public string  LastName   { get; set; }
			#nullable enable
			public string? MiddleName { get; set; }
			#nullable disable
			public string  Gender     { get; set; }
			#nullable enable
		}

		#endregion

		#region PersonInsertOutputParameter

		public static int PersonInsertOutputParameter(this SYSTEMDBDB dataConnection, string? FIRSTNAME, string? LASTNAME, string? MIDDLENAME, char? GENDER, out int? PERSONID)
		{
			var ret = dataConnection.ExecuteProc("\"TESTHANA\".\"Person_Insert_OutputParameter\"",
				new DataParameter("FIRSTNAME", FIRSTNAME, DataType.NVarChar),
				new DataParameter("LASTNAME", LASTNAME, DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",   GENDER,   DataType.Char),
				new DataParameter("PERSONID", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			PERSONID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).Value);

			return ret;
		}

		#endregion

		#region TelemetryFeatureUsage

		public static int TelemetryFeatureUsage(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_FEATURE_USAGE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGPROCEDURE

		public static int DROPEXISTINGPROCEDURE1(this SYSTEMDBDB dataConnection, string? PROCEDURENAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"DROPEXISTINGPROCEDURE\"",
				new DataParameter("PROCEDURENAME", PROCEDURENAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",    SCHEMANAME,    DataType.VarChar));
		}

		#endregion

		#region DROPEXISTINGFUNCTION

		public static int DROPEXISTINGFUNCTION1(this SYSTEMDBDB dataConnection, string? FUNCTIONNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"DROPEXISTINGFUNCTION\"",
				new DataParameter("FUNCTIONNAME", FUNCTIONNAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",   SCHEMANAME,   DataType.VarChar));
		}

		#endregion

		#region TelemetryOutOfMemoryEvents

		public static int TelemetryOutOfMemoryEvents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_OUT_OF_MEMORY_EVENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGVIEW

		public static int DROPEXISTINGVIEW1(this SYSTEMDBDB dataConnection, string? VIEWNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"DROPEXISTINGVIEW\"",
				new DataParameter("VIEWNAME",   VIEWNAME,   DataType.VarChar),
				new DataParameter("SCHEMANAME", SCHEMANAME, DataType.VarChar));
		}

		#endregion

		#region DROPCONSTRAINTFROMTABLE

		public static int DROPCONSTRAINTFROMTABLE1(this SYSTEMDBDB dataConnection, string? TABLENAME, string? CONSTRAINTNAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"DROPCONSTRAINTFROMTABLE\"",
				new DataParameter("TABLENAME",      TABLENAME,      DataType.VarChar),
				new DataParameter("CONSTRAINTNAME", CONSTRAINTNAME, DataType.VarChar),
				new DataParameter("SCHEMANAME",     SCHEMANAME,     DataType.VarChar));
		}

		#endregion

		#region TelemetryDiskUsage

		public static int TelemetryDiskUsage(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_DISK_USAGE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region TelemetryServiceMemory

		public static int TelemetryServiceMemory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_SERVICE_MEMORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region TelemetryHeapMemory

		public static int TelemetryHeapMemory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_HEAP_MEMORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region TelemetryCsTables

		public static int TelemetryCsTables(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_CS_TABLES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region TelemetryEvents

		public static int TelemetryEvents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"TELEMETRY_EVENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region SharedSetRecommendedSp

		public static int SharedSetRecommendedSp(this SYSTEMDBDB dataConnection, int? SP, DateTime? RELEASE_DATE)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_SET_RECOMMENDED_SP\"",
				new DataParameter("SP",           SP,           DataType.Int32),
				new DataParameter("RELEASE_DATE", RELEASE_DATE, DataType.Date));
		}

		#endregion

		#region CollectorTelOutOfMemoryEvents

		public static int CollectorTelOutOfMemoryEvents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_OUT_OF_MEMORY_EVENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorStreamingSubscribersStatistics

		public static int CollectorStreamingSubscribersStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_STREAMING_SUBSCRIBERS_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostJobHistory

		public static int CollectorHostJobHistory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_JOB_HISTORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelDiskUsage

		public static int CollectorTelDiskUsage(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_DISK_USAGE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostLoadHistoryHost

		public static int CollectorHostLoadHistoryHost(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_LOAD_HISTORY_HOST\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorStreamingStreamsStatistics

		public static int CollectorStreamingStreamsStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_STREAMING_STREAMS_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostLoadHistoryService

		public static int CollectorHostLoadHistoryService(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_LOAD_HISTORY_SERVICE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorStreamingProjectConnectionsStatistics

		public static int CollectorStreamingProjectConnectionsStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_STREAMING_PROJECT_CONNECTIONS_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceThreadSamplesStatements

		public static int CollectorHostServiceThreadSamplesStatements(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_THREAD_SAMPLES_STATEMENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostCsLobSpaceReclaims

		public static int CollectorHostCsLobSpaceReclaims(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_CS_LOB_SPACE_RECLAIMS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelSystemOverview

		public static int CollectorTelSystemOverview(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_SYSTEM_OVERVIEW\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelHostInformation

		public static int CollectorTelHostInformation(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_HOST_INFORMATION\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorStreamingProjectsStatistics

		public static int CollectorStreamingProjectsStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_STREAMING_PROJECTS_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelLicenses

		public static int CollectorTelLicenses(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_LICENSES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelInifileContents

		public static int CollectorTelInifileContents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_INIFILE_CONTENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorStreamingPublishersStatistics

		public static int CollectorStreamingPublishersStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_STREAMING_PUBLISHERS_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorTelFeatureUsage

		public static int CollectorTelFeatureUsage(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_TEL_FEATURE_USAGE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region AflWrapperEraser

		public static int AflWrapperEraser(this SYSTEMDBDB dataConnection, string? PROCORIG)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"AFL_WRAPPER_ERASER\"",
				new DataParameter("PROCORIG", PROCORIG, DataType.VarChar));
		}

		#endregion

		#region CollectorHostRsIndexes

		public static int CollectorHostRsIndexes(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_RS_INDEXES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostMvccOverview

		public static int CollectorHostMvccOverview(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_MVCC_OVERVIEW\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorLivecacheSchemaStatistics

		public static int CollectorLivecacheSchemaStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_LIVECACHE_SCHEMA_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceReplication

		public static int CollectorHostServiceReplication(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_REPLICATION\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalTableConsistency

		public static int CollectorGlobalTableConsistency(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_TABLE_CONSISTENCY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorLivecacheProcedureStatistics

		public static int CollectorLivecacheProcedureStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_LIVECACHE_PROCEDURE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostWorkload

		public static int CollectorHostWorkload(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_WORKLOAD\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorLivecacheOmsversions

		public static int CollectorLivecacheOmsversions(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_LIVECACHE_OMSVERSIONS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorLivecacheContainerStatistics

		public static int CollectorLivecacheContainerStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_LIVECACHE_CONTAINER_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostObjectLockStatistics

		public static int CollectorHostObjectLockStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_OBJECT_LOCK_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostRecordLocks

		public static int CollectorHostRecordLocks(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_RECORD_LOCKS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceThreadSamples

		public static int CollectorHostServiceThreadSamples(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_THREAD_SAMPLES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostCsUnloads

		public static int CollectorHostCsUnloads(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_CS_UNLOADS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostDeltaMergeStatistics

		public static int CollectorHostDeltaMergeStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_DELTA_MERGE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostDataVolumeSuperblockStatistics

		public static int CollectorHostDataVolumeSuperblockStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_DATA_VOLUME_SUPERBLOCK_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostRsMemory

		public static int CollectorHostRsMemory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_RS_MEMORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region SharedMailRecipients

		public static int SharedMailRecipients(this SYSTEMDBDB dataConnection, int? ALERT_ID, string? FREQUENCY, out string? RECIPIENTS)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_MAIL_RECIPIENTS\"",
				new DataParameter("ALERT_ID",   ALERT_ID,   DataType.Int32),
				new DataParameter("FREQUENCY",  FREQUENCY,  DataType.VarChar),
				new DataParameter("RECIPIENTS", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			RECIPIENTS = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["RECIPIENTS"]).Value);

			return ret;
		}

		#endregion

		#region SharedMailBody

		public static int SharedMailBody(this SYSTEMDBDB dataConnection, string? SNAPSHOT, string? ALERT_NAME, string? RATING, string? DETAILS, string? USER_ACTION, out string? BODY)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_MAIL_BODY\"",
				new DataParameter("SNAPSHOT", SNAPSHOT, DataType.VarChar),
				new DataParameter("ALERT_NAME", ALERT_NAME, DataType.VarChar),
				new DataParameter("RATING", RATING, DataType.VarChar),
				new DataParameter("DETAILS", DETAILS, DataType.VarChar),
				new DataParameter("USER_ACTION", USER_ACTION, DataType.VarChar),
				new DataParameter("BODY", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			BODY = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["BODY"]).Value);

			return ret;
		}

		#endregion

		#region SharedColumnComments

		public static int SharedColumnComments(this SYSTEMDBDB dataConnection, string? SYS_SCHEMA, string? SYS_VIEW, string? STAT_SCHEMA, string? STAT_VIEW)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_COLUMN_COMMENTS\"",
				new DataParameter("SYS_SCHEMA",  SYS_SCHEMA,  DataType.VarChar),
				new DataParameter("SYS_VIEW",    SYS_VIEW,    DataType.VarChar),
				new DataParameter("STAT_SCHEMA", STAT_SCHEMA, DataType.VarChar),
				new DataParameter("STAT_VIEW",   STAT_VIEW,   DataType.VarChar));
		}

		#endregion

		#region SharedViewComments

		public static int SharedViewComments(this SYSTEMDBDB dataConnection, string? SYS_SCHEMA, string? SYS_VIEW, string? STAT_SCHEMA, string? STAT_VIEW)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_VIEW_COMMENTS\"",
				new DataParameter("SYS_SCHEMA",  SYS_SCHEMA,  DataType.VarChar),
				new DataParameter("SYS_VIEW",    SYS_VIEW,    DataType.VarChar),
				new DataParameter("STAT_SCHEMA", STAT_SCHEMA, DataType.VarChar),
				new DataParameter("STAT_VIEW",   STAT_VIEW,   DataType.VarChar));
		}

		#endregion

		#region SharedAssignComments

		public static int SharedAssignComments(this SYSTEMDBDB dataConnection, string? SYS_SCHEMA, string? SYS_VIEW, string? SYS_COLUMN, string? STAT_SCHEMA, string? STAT_VIEW, string? STAT_COLUMN)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_ASSIGN_COMMENTS\"",
				new DataParameter("SYS_SCHEMA",  SYS_SCHEMA,  DataType.VarChar),
				new DataParameter("SYS_VIEW",    SYS_VIEW,    DataType.VarChar),
				new DataParameter("SYS_COLUMN",  SYS_COLUMN,  DataType.VarChar),
				new DataParameter("STAT_SCHEMA", STAT_SCHEMA, DataType.VarChar),
				new DataParameter("STAT_VIEW",   STAT_VIEW,   DataType.VarChar),
				new DataParameter("STAT_COLUMN", STAT_COLUMN, DataType.VarChar));
		}

		#endregion

		#region SharedFollowUpActions

		public static int SharedFollowUpActions(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, int? ALERT_ID)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_FOLLOW_UP_ACTIONS\"",
				new DataParameter("SNAPSHOT_ID", SNAPSHOT_ID, DataType.Timestamp),
				new DataParameter("ALERT_ID",    ALERT_ID,    DataType.Int32));
		}

		#endregion

		#region SharedCreateUnionView

		public static int SharedCreateUnionView(this SYSTEMDBDB dataConnection, string? PREFIX, string? VIEW_NAME, string? SYNONYM_NAME)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_CREATE_UNION_VIEW\"",
				new DataParameter("PREFIX",       PREFIX,       DataType.VarChar),
				new DataParameter("VIEW_NAME",    VIEW_NAME,    DataType.VarChar),
				new DataParameter("SYNONYM_NAME", SYNONYM_NAME, DataType.VarChar));
		}

		#endregion

		#region SharedDropUnionView

		public static int SharedDropUnionView(this SYSTEMDBDB dataConnection, string? VIEW_NAME, string? SYNONYM_NAME)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_DROP_UNION_VIEW\"",
				new DataParameter("VIEW_NAME",    VIEW_NAME,    DataType.VarChar),
				new DataParameter("SYNONYM_NAME", SYNONYM_NAME, DataType.VarChar));
		}

		#endregion

		#region SharedCopyProfiles

		public static int SharedCopyProfiles(this SYSTEMDBDB dataConnection, string? OLD_PROFILE, string? NEW_PROFILE)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_COPY_PROFILES\"",
				new DataParameter("OLD_PROFILE", OLD_PROFILE, DataType.VarChar),
				new DataParameter("NEW_PROFILE", NEW_PROFILE, DataType.VarChar));
		}

		#endregion

		#region SharedBuildViews

		public static int SharedBuildViews(this SYSTEMDBDB dataConnection, string? CMD, string? PREFIX, string? EX_TYPE)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_BUILD_VIEWS\"",
				new DataParameter("CMD",     CMD,     DataType.VarChar),
				new DataParameter("PREFIX",  PREFIX,  DataType.VarChar),
				new DataParameter("EX_TYPE", EX_TYPE, DataType.VarChar));
		}

		#endregion

		#region CollectorHostBlockedTransactions

		public static int CollectorHostBlockedTransactions(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_BLOCKED_TRANSACTIONS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region SharedBuildSrViews

		public static int SharedBuildSrViews(this SYSTEMDBDB dataConnection, string? CMD, string? PREFIX)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_BUILD_SR_VIEWS\"",
				new DataParameter("CMD",    CMD,    DataType.VarChar),
				new DataParameter("PREFIX", PREFIX, DataType.VarChar));
		}

		#endregion

		#region SharedBuildAaViews

		public static int SharedBuildAaViews(this SYSTEMDBDB dataConnection, string? CMD, string? PREFIX)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_BUILD_AA_VIEWS\"",
				new DataParameter("CMD",    CMD,    DataType.VarChar),
				new DataParameter("PREFIX", PREFIX, DataType.VarChar));
		}

		#endregion

		#region SharedStoreUsedValues

		public static int SharedStoreUsedValues(this SYSTEMDBDB dataConnection, int? STORE)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_STORE_USED_VALUES\"",
				new DataParameter("STORE", STORE, DataType.Int32));
		}

		#endregion

		#region CollectorHostResourceUtilizationStatistics

		public static int CollectorHostResourceUtilizationStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_RESOURCE_UTILIZATION_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostDataVolumePageStatistics

		public static int CollectorHostDataVolumePageStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_DATA_VOLUME_PAGE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostLongIdleCursor

		public static int CollectorHostLongIdleCursor(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_LONG_IDLE_CURSOR\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostOneDayFileCount

		public static int CollectorHostOneDayFileCount(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_ONE_DAY_FILE_COUNT\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostUncommittedWriteTransaction

		public static int CollectorHostUncommittedWriteTransaction(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_UNCOMMITTED_WRITE_TRANSACTION\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalRowstoreTablesSize

		public static int CollectorGlobalRowstoreTablesSize(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_ROWSTORE_TABLES_SIZE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostHeapAllocators

		public static int CollectorHostHeapAllocators(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_HEAP_ALLOCATORS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostVolumeIoRetryStatistics

		public static int CollectorHostVolumeIoRetryStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_VOLUME_IO_RETRY_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostConnectionStatistics

		public static int CollectorHostConnectionStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_CONNECTION_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceComponentMemory

		public static int CollectorHostServiceComponentMemory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_COMPONENT_MEMORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostSavepoints

		public static int CollectorHostSavepoints(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SAVEPOINTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalTablePersistenceStatistics

		public static int CollectorGlobalTablePersistenceStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_TABLE_PERSISTENCE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostConnections

		public static int CollectorHostConnections(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_CONNECTIONS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceMemory

		public static int CollectorHostServiceMemory(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_MEMORY\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostSqlPlanCacheOverview

		public static int CollectorHostSqlPlanCacheOverview(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SQL_PLAN_CACHE_OVERVIEW\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostColumnTablesPartSize

		public static int CollectorHostColumnTablesPartSize(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_COLUMN_TABLES_PART_SIZE\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostLongSerializableTransaction

		public static int CollectorHostLongSerializableTransaction(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_LONG_SERIALIZABLE_TRANSACTION\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalPersistenceStatistics

		public static int CollectorGlobalPersistenceStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_PERSISTENCE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostObjectLocks

		public static int CollectorHostObjectLocks(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_OBJECT_LOCKS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostServiceStatistics

		public static int CollectorHostServiceStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_SERVICE_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostLongRunningStatements

		public static int CollectorHostLongRunningStatements(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_LONG_RUNNING_STATEMENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalDecExtractorStatus

		public static int CollectorGlobalDecExtractorStatus(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_DEC_EXTRACTOR_STATUS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostVolumeIoDetailedStatistics

		public static int CollectorHostVolumeIoDetailedStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_VOLUME_IO_DETAILED_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostVolumeFiles

		public static int CollectorHostVolumeFiles(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_VOLUME_FILES\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalInternalEvents

		public static int CollectorGlobalInternalEvents(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_INTERNAL_EVENTS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorHostVolumeIoTotalStatistics

		public static int CollectorHostVolumeIoTotalStatistics(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_HOST_VOLUME_IO_TOTAL_STATISTICS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region CollectorGlobalDisks

		public static int CollectorGlobalDisks(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, byte? DELETE_HISTORY, out int? WAS_CANCELLED)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"COLLECTOR_GLOBAL_DISKS\"",
				new DataParameter("SNAPSHOT_ID",   SNAPSHOT_ID,   DataType.Timestamp),
				new DataParameter("DELETE_HISTORY", DELETE_HISTORY, DataType.Byte),
				new DataParameter("WAS_CANCELLED", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			WAS_CANCELLED = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["WAS_CANCELLED"]).Value);

			return ret;
		}

		#endregion

		#region SearchCatalogCleanup

		public static int SearchCatalogCleanup(this SYSTEMDBDB dataConnection, out byte? SUCCESS, out string? MESSAGE, string? SCHEMA_NAME)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_RT\".\"SEARCH_CATALOG_CLEANUP\"",
				new DataParameter("SUCCESS", null, DataType.Byte) { Direction = ParameterDirection.Output, Size = 3 },
				new DataParameter("MESSAGE", null, DataType.NVarChar) { Direction = ParameterDirection.Output, Size = 3000 },
				new DataParameter("SCHEMA_NAME", SCHEMA_NAME, DataType.NVarChar));

			SUCCESS = Converter.ChangeTypeTo<byte?>  (((IDbDataParameter)dataConnection.Command.Parameters["SUCCESS"]).Value);
			MESSAGE = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["MESSAGE"]).Value);

			return ret;
		}

		#endregion

		#region DeleteSchemaFromBimcTables

		public static int DeleteSchemaFromBimcTables(this SYSTEMDBDB dataConnection, string? SCHEMA_NAME)
		{
			return dataConnection.ExecuteProc("\"_SYS_BI\".\"DELETE_SCHEMA_FROM_BIMC_TABLES\"",
				new DataParameter("SCHEMA_NAME", SCHEMA_NAME, DataType.NVarChar));
		}

		#endregion

		#region AflpmOnlineRegistrationCleanup

		public static int AflpmOnlineRegistrationCleanup(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"AFLPM_ONLINE_REGISTRATION_CLEANUP\"");
		}

		#endregion

		#region AflpmEraser

		public static int AflpmEraser(this SYSTEMDBDB dataConnection, string? PROC)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"AFLPM_ERASER\"",
				new DataParameter("PROC", PROC, DataType.VarChar));
		}

		#endregion

		#region AfllangWrapperProcedureDrop

		public static int AfllangWrapperProcedureDrop(this SYSTEMDBDB dataConnection, string? SCHEMA_NAME, string? PROCEDURE_NAME)
		{
			return dataConnection.ExecuteProc("\"SYS\".\"AFLLANG_WRAPPER_PROCEDURE_DROP\"",
				new DataParameter("SCHEMA_NAME",    SCHEMA_NAME,    DataType.NVarChar),
				new DataParameter("PROCEDURE_NAME", PROCEDURE_NAME, DataType.NVarChar));
		}

		#endregion

		#region SharedConstraintColumnNames

		public static int SharedConstraintColumnNames(this SYSTEMDBDB dataConnection, string? TABLE_NAME1, string? TABLE_NAME2, out string? COLUMN_NAMES)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_CONSTRAINT_COLUMN_NAMES\"",
				new DataParameter("TABLE_NAME1",  TABLE_NAME1,  DataType.VarChar),
				new DataParameter("TABLE_NAME2",  TABLE_NAME2,  DataType.VarChar),
				new DataParameter("COLUMN_NAMES", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			COLUMN_NAMES = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["COLUMN_NAMES"]).Value);

			return ret;
		}

		#endregion

		#region MessagingDESTINATIONS__insert

		public static int MessagingDESTINATIONS__insert(this SYSTEMDBDB dataConnection, string? DESTINATION_ID, string? DESTINATION_TYPE, string? CONFIGURATION)
		{
			return dataConnection.ExecuteProc("\"_SYS_XB\".\"MESSAGING_DESTINATIONS::insert\"",
				new DataParameter("DESTINATION_ID",   DESTINATION_ID,   DataType.VarChar),
				new DataParameter("DESTINATION_TYPE", DESTINATION_TYPE, DataType.VarChar),
				new DataParameter("CONFIGURATION",    CONFIGURATION,    DataType.NVarChar));
		}

		#endregion

		#region MessagingDESTINATIONS__delete

		public static int MessagingDESTINATIONS__delete(this SYSTEMDBDB dataConnection, string? DESTINATION_ID)
		{
			return dataConnection.ExecuteProc("\"_SYS_XB\".\"MESSAGING_DESTINATIONS::delete\"",
				new DataParameter("DESTINATION_ID", DESTINATION_ID, DataType.VarChar));
		}

		#endregion

		#region MessagingSUBSCRIPTIONS__insert

		public static int MessagingSUBSCRIPTIONS__insert(this SYSTEMDBDB dataConnection, string? DESTINATION_ID, string? TOPIC_PATTERN, byte? QOS, string? SCHEMA_NAME, string? TABLE_NAME, string? FORMAT, string? SETTINGS)
		{
			return dataConnection.ExecuteProc("\"_SYS_XB\".\"MESSAGING_SUBSCRIPTIONS::insert\"",
				new DataParameter("DESTINATION_ID", DESTINATION_ID, DataType.VarChar),
				new DataParameter("TOPIC_PATTERN",  TOPIC_PATTERN,  DataType.NVarChar),
				new DataParameter("QOS",            QOS,            DataType.Byte),
				new DataParameter("SCHEMA_NAME",    SCHEMA_NAME,    DataType.NVarChar),
				new DataParameter("TABLE_NAME",     TABLE_NAME,     DataType.NVarChar),
				new DataParameter("FORMAT",         FORMAT,         DataType.VarChar),
				new DataParameter("SETTINGS",       SETTINGS,       DataType.NVarChar));
		}

		#endregion

		#region MessagingSUBSCRIPTIONS__delete

		public static int MessagingSUBSCRIPTIONS__delete(this SYSTEMDBDB dataConnection, string? DESTINATION_ID, string? TOPIC_PATTERN, byte? QOS)
		{
			return dataConnection.ExecuteProc("\"_SYS_XB\".\"MESSAGING_SUBSCRIPTIONS::delete\"",
				new DataParameter("DESTINATION_ID", DESTINATION_ID, DataType.VarChar),
				new DataParameter("TOPIC_PATTERN",  TOPIC_PATTERN,  DataType.NVarChar),
				new DataParameter("QOS",            QOS,            DataType.Byte));
		}

		#endregion

		#region StatisticsPrepareCallTimer

		public static int StatisticsPrepareCallTimer(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOT_ID, int? SCHEDULABLE_ID, out int? CAN_CALL)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"STATISTICS_PREPARE_CALL_TIMER\"",
				new DataParameter("SNAPSHOT_ID", SNAPSHOT_ID, DataType.Timestamp),
				new DataParameter("SCHEDULABLE_ID", SCHEDULABLE_ID, DataType.Int32),
				new DataParameter("CAN_CALL", null, DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 });

			CAN_CALL = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["CAN_CALL"]).Value);

			return ret;
		}

		#endregion

		#region DROPEXISTINGTABLE

		public static int DROPEXISTINGTABLE1(this SYSTEMDBDB dataConnection, string? TABLENAME, string? SCHEMANAME)
		{
			return dataConnection.ExecuteProc("\"SYSTEM\".\"DROPEXISTINGTABLE\"",
				new DataParameter("TABLENAME",  TABLENAME,  DataType.VarChar),
				new DataParameter("SCHEMANAME", SCHEMANAME, DataType.VarChar));
		}

		#endregion

		#region StatisticsPrepareCallManual

		public static int StatisticsPrepareCallManual(this SYSTEMDBDB dataConnection, int? SCHEDULABLE_ID, out int? CAN_CALL, out DateTime? CALLTIME_UTC)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"STATISTICS_PREPARE_CALL_MANUAL\"",
				new DataParameter("SCHEDULABLE_ID", SCHEDULABLE_ID, DataType.Int32),
				new DataParameter("CAN_CALL", null,     DataType.Int32) { Direction = ParameterDirection.Output, Size = 10 },
				new DataParameter("CALLTIME_UTC", null, DataType.Timestamp) { Direction = ParameterDirection.Output });

			CAN_CALL     = Converter.ChangeTypeTo<int?>     (((IDbDataParameter)dataConnection.Command.Parameters["CAN_CALL"]).    Value);
			CALLTIME_UTC = Converter.ChangeTypeTo<DateTime?>(((IDbDataParameter)dataConnection.Command.Parameters["CALLTIME_UTC"]).Value);

			return ret;
		}

		#endregion

		#region StartupPreamble

		public static IEnumerable<StartupPREAMBLEResult> StartupPreamble(this SYSTEMDBDB dataConnection)
		{
			return dataConnection.QueryProc<StartupPREAMBLEResult>("\"_SYS_STATISTICS\".\"STARTUP_PREAMBLE\"");
		}

		public partial class StartupPREAMBLEResult
		{
			[Column("1")] public int? _1 { get; set; }
		}

		#endregion

		#region SharedPrepareCollector

		public static int SharedPrepareCollector(this SYSTEMDBDB dataConnection, string? ID, string? TABLE_NAME, string? VIEW_COLUMNS, string? SELECT_COLUMNS)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_PREPARE_COLLECTOR\"",
				new DataParameter("ID",             ID,             DataType.VarChar),
				new DataParameter("TABLE_NAME",     TABLE_NAME,     DataType.VarChar),
				new DataParameter("VIEW_COLUMNS",   VIEW_COLUMNS,   DataType.VarChar),
				new DataParameter("SELECT_COLUMNS", SELECT_COLUMNS, DataType.VarChar));
		}

		#endregion

		#region SharedMigrateCollector

		public static int SharedMigrateCollector(this SYSTEMDBDB dataConnection, string? ID, string? TABLE_NAME, string? SELECT_LIST, string? INSERT_LIST)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_MIGRATE_COLLECTOR\"",
				new DataParameter("ID",          ID,          DataType.VarChar),
				new DataParameter("TABLE_NAME",  TABLE_NAME,  DataType.VarChar),
				new DataParameter("SELECT_LIST", SELECT_LIST, DataType.VarChar),
				new DataParameter("INSERT_LIST", INSERT_LIST, DataType.VarChar));
		}

		#endregion

		#region SharedTruncateCollector

		public static int SharedTruncateCollector(this SYSTEMDBDB dataConnection, int? ID, string? TABLE_NAME)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_TRUNCATE_COLLECTOR\"",
				new DataParameter("ID",         ID,         DataType.Int32),
				new DataParameter("TABLE_NAME", TABLE_NAME, DataType.VarChar));
		}

		#endregion

		#region SharedWriteInternalAlert

		public static int SharedWriteInternalAlert(this SYSTEMDBDB dataConnection, DateTime? SNAPSHOTID, string? ALERTDETAILS)
		{
			return dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_WRITE_INTERNAL_ALERT\"",
				new DataParameter("SNAPSHOTID",   SNAPSHOTID,   DataType.Timestamp),
				new DataParameter("ALERTDETAILS", ALERTDETAILS, DataType.VarChar));
		}

		#endregion

		#region SharedColumnNames

		public static int SharedColumnNames(this SYSTEMDBDB dataConnection, string? TABLE_NAME, out string? COLUMN_NAMES)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_COLUMN_NAMES\"",
				new DataParameter("TABLE_NAME",   TABLE_NAME,   DataType.VarChar),
				new DataParameter("COLUMN_NAMES", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			COLUMN_NAMES = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["COLUMN_NAMES"]).Value);

			return ret;
		}

		#endregion

		#region SharedKeyColumnNames

		public static int SharedKeyColumnNames(this SYSTEMDBDB dataConnection, string? TABLE_NAME, out string? COLUMN_NAMES)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_KEY_COLUMN_NAMES\"",
				new DataParameter("TABLE_NAME",   TABLE_NAME,   DataType.VarChar),
				new DataParameter("COLUMN_NAMES", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			COLUMN_NAMES = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["COLUMN_NAMES"]).Value);

			return ret;
		}

		#endregion

		#region SharedCommonColumnNames

		public static int SharedCommonColumnNames(this SYSTEMDBDB dataConnection, string? TABLE_NAME1, string? TABLE_NAME2, out string? COLUMN_NAMES)
		{
			var ret = dataConnection.ExecuteProc("\"_SYS_STATISTICS\".\"SHARED_COMMON_COLUMN_NAMES\"",
				new DataParameter("TABLE_NAME1",  TABLE_NAME1,  DataType.VarChar),
				new DataParameter("TABLE_NAME2",  TABLE_NAME2,  DataType.VarChar),
				new DataParameter("COLUMN_NAMES", null, DataType.VarChar) { Direction = ParameterDirection.Output, Size = 5000 });

			COLUMN_NAMES = Converter.ChangeTypeTo<string?>(((IDbDataParameter)dataConnection.Command.Parameters["COLUMN_NAMES"]).Value);

			return ret;
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region CdsSchemaLastModifiedTime

		[Sql.Function(Name="SYS.CDS_SCHEMA_LAST_MODIFIED_TIME", ServerSideOnly=true)]
		public static DateTime? CdsSchemaLastModifiedTime(string? SCHEMA_NAME)
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AllType Find(this ITable<AllType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static AllTypesGeo Find(this ITable<AllTypesGeo> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static _SYS_TASK_BestRecordGroupMasterStatistics Find(this ITable<_SYS_TASK_BestRecordGroupMasterStatistics> table, long TaskExecutionId, int OperationId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId);
		}

		public static _SYS_TASK_BestRecordResults Find(this ITable<_SYS_TASK_BestRecordResults> table, long TaskExecutionId, int OperationId, int SrcTableId, long SrcRowId, int SrcColumnId, int StrategyGroupId, int StrategyId, string BestRecordRule, int UpdateNum)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.SrcTableId      == SrcTableId      &&
				t.SrcRowId        == SrcRowId        &&
				t.SrcColumnId     == SrcColumnId     &&
				t.StrategyGroupId == StrategyGroupId &&
				t.StrategyId      == StrategyId      &&
				t.BestRecordRule  == BestRecordRule  &&
				t.UpdateNum       == UpdateNum);
		}

		public static _SYS_TASK_BestRecordStrategies Find(this ITable<_SYS_TASK_BestRecordStrategies> table, long TaskExecutionId, int OperationId, int StrategyGroupId, int StrategyId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.StrategyGroupId == StrategyGroupId &&
				t.StrategyId      == StrategyId);
		}

		public static _SYS_TASK_BestRecordStrategyGroups Find(this ITable<_SYS_TASK_BestRecordStrategyGroups> table, long TaskExecutionId, int OperationId, int StrategyGroupId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.StrategyGroupId == StrategyGroupId);
		}

		public static _SYS_RT_CdsAnnotation Find(this ITable<_SYS_RT_CdsAnnotation> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsAnnotationAssignment Find(this ITable<_SYS_RT_CdsAnnotationAssignment> table, long ImageId, string ArtifactNameSchema, string ArtifactNameName, string ArtifactNameComponentName, string Name, string ExtensionPackage)
		{
			return table.FirstOrDefault(t =>
				t.ImageId                   == ImageId                   &&
				t.ArtifactNameSchema        == ArtifactNameSchema        &&
				t.ArtifactNameName          == ArtifactNameName          &&
				t.ArtifactNameComponentName == ArtifactNameComponentName &&
				t.Name                      == Name                      &&
				t.ExtensionPackage          == ExtensionPackage);
		}

		public static _SYS_RT_CdsAnnotationValue Find(this ITable<_SYS_RT_CdsAnnotationValue> table, long ImageId, string ArtifactNameSchema, string ArtifactNameName, string AnnotationNameSchema, string AnnotationNameName, string ExtensionPackage)
		{
			return table.FirstOrDefault(t =>
				t.ImageId              == ImageId              &&
				t.ArtifactNameSchema   == ArtifactNameSchema   &&
				t.ArtifactNameName     == ArtifactNameName     &&
				t.AnnotationNameSchema == AnnotationNameSchema &&
				t.AnnotationNameName   == AnnotationNameName   &&
				t.ExtensionPackage     == ExtensionPackage);
		}

		public static _SYS_RT_CdsArray Find(this ITable<_SYS_RT_CdsArray> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsArtifact Find(this ITable<_SYS_RT_CdsArtifact> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsAspect Find(this ITable<_SYS_RT_CdsAspect> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsAssociation Find(this ITable<_SYS_RT_CdsAssociation> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsConstant Find(this ITable<_SYS_RT_CdsConstant> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsDependency Find(this ITable<_SYS_RT_CdsDependency> table, long ImageId, string FromSchema, string FromName, string ToSchema, string ToName)
		{
			return table.FirstOrDefault(t =>
				t.ImageId    == ImageId    &&
				t.FromSchema == FromSchema &&
				t.FromName   == FromName   &&
				t.ToSchema   == ToSchema   &&
				t.ToName     == ToName);
		}

		public static _SYS_RT_CdsDerivedType Find(this ITable<_SYS_RT_CdsDerivedType> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsEntity Find(this ITable<_SYS_RT_CdsEntity> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsEnum Find(this ITable<_SYS_RT_CdsEnum> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsExpression Find(this ITable<_SYS_RT_CdsExpression> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsExtPkgDep Find(this ITable<_SYS_RT_CdsExtPkgDep> table, long ImageId, string FromSchema, string FromName, string ToSchema, string ToName)
		{
			return table.FirstOrDefault(t =>
				t.ImageId    == ImageId    &&
				t.FromSchema == FromSchema &&
				t.FromName   == FromName   &&
				t.ToSchema   == ToSchema   &&
				t.ToName     == ToName);
		}

		public static _SYS_RT_CdsParameter Find(this ITable<_SYS_RT_CdsParameter> table, long ImageId, string Schema, string Name, string ParameterName)
		{
			return table.FirstOrDefault(t =>
				t.ImageId       == ImageId &&
				t.Schema        == Schema  &&
				t.Name          == Name    &&
				t.ParameterName == ParameterName);
		}

		public static _SYS_RT_CdsRule Find(this ITable<_SYS_RT_CdsRule> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsScalarType Find(this ITable<_SYS_RT_CdsScalarType> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsSourceCode Find(this ITable<_SYS_RT_CdsSourceCode> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsStatistic Find(this ITable<_SYS_RT_CdsStatistic> table, DateTime ActivationUtc, string Connection, int StatementNo, DateTime CreationUtc, DateTime ExecutionUtc, int ExecutionNo)
		{
			return table.FirstOrDefault(t =>
				t.ActivationUtc == ActivationUtc &&
				t.Connection    == Connection    &&
				t.StatementNo   == StatementNo   &&
				t.CreationUtc   == CreationUtc   &&
				t.ExecutionUtc  == ExecutionUtc  &&
				t.ExecutionNo   == ExecutionNo);
		}

		public static _SYS_RT_CdsStructure Find(this ITable<_SYS_RT_CdsStructure> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_RT_CdsStructureComponent Find(this ITable<_SYS_RT_CdsStructureComponent> table, long ImageId, string Schema, string Name, string ComponentName)
		{
			return table.FirstOrDefault(t =>
				t.ImageId       == ImageId &&
				t.Schema        == Schema  &&
				t.Name          == Name    &&
				t.ComponentName == ComponentName);
		}

		public static _SYS_RT_CdsView Find(this ITable<_SYS_RT_CdsView> table, long ImageId, string Schema, string Name)
		{
			return table.FirstOrDefault(t =>
				t.ImageId == ImageId &&
				t.Schema  == Schema  &&
				t.Name    == Name);
		}

		public static _SYS_TASK_CleanseAddressRecordInfo1 Find(this ITable<_SYS_TASK_CleanseAddressRecordInfo1> table, long TaskExecutionId, int OperationId, int TableId, long RowId, int EntityInstance, int EntityInstanceOccurrence)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId          == TaskExecutionId &&
				t.OperationId              == OperationId     &&
				t.TableId                  == TableId         &&
				t.RowId                    == RowId           &&
				t.EntityInstance           == EntityInstance  &&
				t.EntityInstanceOccurrence == EntityInstanceOccurrence);
		}

		public static _SYS_TASK_CleanseChangeInfo0 Find(this ITable<_SYS_TASK_CleanseChangeInfo0> table, long TaskExecutionId, int OperationId, long RowId, string EntityId, int EntityInstance, int EntityInstanceOccurrence, string ComponentId, string ComponentElementId, string ChangeCategoryId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId          == TaskExecutionId          &&
				t.OperationId              == OperationId              &&
				t.RowId                    == RowId                    &&
				t.EntityId                 == EntityId                 &&
				t.EntityInstance           == EntityInstance           &&
				t.EntityInstanceOccurrence == EntityInstanceOccurrence &&
				t.ComponentId              == ComponentId              &&
				t.ComponentElementId       == ComponentElementId       &&
				t.ChangeCategoryId         == ChangeCategoryId);
		}

		public static _SYS_TELEMETRY_CLIENT Find(this ITable<_SYS_TELEMETRY_CLIENT> table, long ClientId)
		{
			return table.FirstOrDefault(t =>
				t.ClientId == ClientId);
		}

		public static _SYS_TELEMETRY_CONFIGURATION Find(this ITable<_SYS_TELEMETRY_CONFIGURATION> table, short CollectorId)
		{
			return table.FirstOrDefault(t =>
				t.CollectorId == CollectorId);
		}

		public static _SYS_TASK_CurrentVersions Find(this ITable<_SYS_TASK_CurrentVersions> table, string VersionId)
		{
			return table.FirstOrDefault(t =>
				t.VersionId == VersionId);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static _SYS_RT_EshModel1 Find(this ITable<_SYS_RT_EshModel1> table, string SchemaName, string ViewName)
		{
			return table.FirstOrDefault(t =>
				t.SchemaName == SchemaName &&
				t.ViewName   == ViewName);
		}

		public static _SYS_RT_EshModelProperty1 Find(this ITable<_SYS_RT_EshModelProperty1> table, string SchemaName, string ViewName, string ColumnName, string PROPERTY)
		{
			return table.FirstOrDefault(t =>
				t.SchemaName == SchemaName &&
				t.ViewName   == ViewName   &&
				t.ColumnName == ColumnName &&
				t.PROPERTY   == PROPERTY);
		}

		public static _SYS_AFL_FunctionExecutionCount Find(this ITable<_SYS_AFL_FunctionExecutionCount> table, string AreaName, string FunctionName, string HOST, int PORT)
		{
			return table.FirstOrDefault(t =>
				t.AreaName     == AreaName     &&
				t.FunctionName == FunctionName &&
				t.HOST         == HOST         &&
				t.PORT         == PORT);
		}

		public static _SYS_AFL_FunctionExecutionCountsControl Find(this ITable<_SYS_AFL_FunctionExecutionCountsControl> table, string KEY)
		{
			return table.FirstOrDefault(t =>
				t.KEY == KEY);
		}

		public static _SYS_TASK_GeocodeInfoCodes Find(this ITable<_SYS_TASK_GeocodeInfoCodes> table, long TaskExecutionId, int OperationId, int TableId, long RowId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.TableId         == TableId         &&
				t.RowId           == RowId);
		}

		public static _SYS_XS_HttpDestination Find(this ITable<_SYS_XS_HttpDestination> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_RT_InaActiveObject Find(this ITable<_SYS_RT_InaActiveObject> table, string PackageId, string ObjectName, string ObjectSuffix)
		{
			return table.FirstOrDefault(t =>
				t.PackageId    == PackageId  &&
				t.ObjectName   == ObjectName &&
				t.ObjectSuffix == ObjectSuffix);
		}

		public static _SYS_RT_InaActiveObjectProperty Find(this ITable<_SYS_RT_InaActiveObjectProperty> table, string PackageId, string ObjectName, string ObjectSuffix, string KEY, string VALUE)
		{
			return table.FirstOrDefault(t =>
				t.PackageId    == PackageId    &&
				t.ObjectName   == ObjectName   &&
				t.ObjectSuffix == ObjectSuffix &&
				t.KEY          == KEY          &&
				t.VALUE        == VALUE);
		}

		public static IndexTable Find(this ITable<IndexTable> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static IndexTable2 Find(this ITable<IndexTable2> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static InheritanceChild Find(this ITable<InheritanceChild> table, int InheritanceChildId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceChildId == InheritanceChildId);
		}

		public static InheritanceParent Find(this ITable<InheritanceParent> table, int InheritanceParentId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceParentId == InheritanceParentId);
		}

		public static _SYS_XS_JOB Find(this ITable<_SYS_XS_JOB> table, string NAME)
		{
			return table.FirstOrDefault(t =>
				t.NAME == NAME);
		}

		public static _SYS_XS_JobLog Find(this ITable<_SYS_XS_JobLog> table, string NAME, long ID, DateTime PlannedTime)
		{
			return table.FirstOrDefault(t =>
				t.NAME        == NAME &&
				t.ID          == ID   &&
				t.PlannedTime == PlannedTime);
		}

		public static _SYS_XS_JobSchedule Find(this ITable<_SYS_XS_JobSchedule> table, long ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static _SYS_XS_JsRecompileIssue Find(this ITable<_SYS_XS_JsRecompileIssue> table, string PackageId, string ObjectName, string ObjectSuffix, DateTime STAMP)
		{
			return table.FirstOrDefault(t =>
				t.PackageId    == PackageId    &&
				t.ObjectName   == ObjectName   &&
				t.ObjectSuffix == ObjectSuffix &&
				t.STAMP        == STAMP);
		}

		public static _SYS_TASK_MatchGroupInfo1 Find(this ITable<_SYS_TASK_MatchGroupInfo1> table, long TaskExecutionId, int OperationId, int GroupId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.GroupId         == GroupId);
		}

		public static _SYS_TASK_MatchPolicies Find(this ITable<_SYS_TASK_MatchPolicies> table, long TaskExecutionId, int OperationId, int PolicyId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.PolicyId        == PolicyId);
		}

		public static _SYS_TASK_MatchRecordInfo1 Find(this ITable<_SYS_TASK_MatchRecordInfo1> table, long TaskExecutionId, int OperationId, int TableId, long RowId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.TableId         == TableId         &&
				t.RowId           == RowId);
		}

		public static _SYS_TASK_MatchRules Find(this ITable<_SYS_TASK_MatchRules> table, long TaskExecutionId, int OperationId, string RuleId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.RuleId          == RuleId);
		}

		public static _SYS_TASK_MatchSourceInfo Find(this ITable<_SYS_TASK_MatchSourceInfo> table, long TaskExecutionId, int OperationId, int SourceId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.SourceId        == SourceId);
		}

		public static _SYS_TASK_MatchSourceStatistics Find(this ITable<_SYS_TASK_MatchSourceStatistics> table, long TaskExecutionId, int OperationId, string SourceId, string RelatedSourceId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.SourceId        == SourceId        &&
				t.RelatedSourceId == RelatedSourceId);
		}

		public static _SYS_TASK_MatchStatistics Find(this ITable<_SYS_TASK_MatchStatistics> table, long TaskExecutionId, int OperationId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId);
		}

		public static _SYS_TASK_MatchTracing1 Find(this ITable<_SYS_TASK_MatchTracing1> table, long TaskExecutionId, int OperationId, int TableId, long RowId, int RelatedTableId, long RelatedRowId)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.OperationId     == OperationId     &&
				t.TableId         == TableId         &&
				t.RowId           == RowId           &&
				t.RelatedTableId  == RelatedTableId  &&
				t.RelatedRowId    == RelatedRowId);
		}

		public static _SYS_XB_MessagingDestinations Find(this ITable<_SYS_XB_MessagingDestinations> table, string UserName, string DestinationId)
		{
			return table.FirstOrDefault(t =>
				t.UserName      == UserName &&
				t.DestinationId == DestinationId);
		}

		public static _SYS_XB_MessagingSubscriptions Find(this ITable<_SYS_XB_MessagingSubscriptions> table, string UserName, string DestinationId, string TopicPattern, byte QOS)
		{
			return table.FirstOrDefault(t =>
				t.UserName      == UserName      &&
				t.DestinationId == DestinationId &&
				t.TopicPattern  == TopicPattern  &&
				t.QOS           == QOS);
		}

		public static _SYS_XS_OauthAccessToken Find(this ITable<_SYS_XS_OauthAccessToken> table, string ClientPackage, string ClientName, string USER, byte TokenType)
		{
			return table.FirstOrDefault(t =>
				t.ClientPackage == ClientPackage &&
				t.ClientName    == ClientName    &&
				t.USER          == USER          &&
				t.TokenType     == TokenType);
		}

		public static _SYS_XS_OauthAccessTokenScope Find(this ITable<_SYS_XS_OauthAccessTokenScope> table, string ClientPackage, string ClientName, string USER, byte TokenType, string SCOPE)
		{
			return table.FirstOrDefault(t =>
				t.ClientPackage == ClientPackage &&
				t.ClientName    == ClientName    &&
				t.USER          == USER          &&
				t.TokenType     == TokenType     &&
				t.SCOPE         == SCOPE);
		}

		public static _SYS_XS_OauthAppConfig Find(this ITable<_SYS_XS_OauthAppConfig> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_XS_OauthAppConfigScope Find(this ITable<_SYS_XS_OauthAppConfigScope> table, string PackageId, string ObjectName, string SCOPE)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId  &&
				t.ObjectName == ObjectName &&
				t.SCOPE      == SCOPE);
		}

		public static _SYS_XS_OauthClientConfig Find(this ITable<_SYS_XS_OauthClientConfig> table, string ClientPackage, string ClientName)
		{
			return table.FirstOrDefault(t =>
				t.ClientPackage == ClientPackage &&
				t.ClientName    == ClientName);
		}

		public static _SYS_XS_OauthClientFlavor Find(this ITable<_SYS_XS_OauthClientFlavor> table, string FlavorPackage, string FlavorName, string FlavorStep, string ParamLocation, string ParamName)
		{
			return table.FirstOrDefault(t =>
				t.FlavorPackage == FlavorPackage &&
				t.FlavorName    == FlavorName    &&
				t.FlavorStep    == FlavorStep    &&
				t.ParamLocation == ParamLocation &&
				t.ParamName     == ParamName);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static _SYS_RT_PpAAlgorithm Find(this ITable<_SYS_RT_PpAAlgorithm> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_RT_PpACha Find(this ITable<_SYS_RT_PpACha> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_RT_PpADatacontainer Find(this ITable<_SYS_RT_PpADatacontainer> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_RT_PpAKyf Find(this ITable<_SYS_RT_PpAKyf> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_RT_PpASession Find(this ITable<_SYS_RT_PpASession> table, string PackageId, string ObjectName, int VERSION, string ReadView)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId  &&
				t.ObjectName == ObjectName &&
				t.VERSION    == VERSION    &&
				t.ReadView   == ReadView);
		}

		public static PrdGlobalEccCvMara Find(this ITable<PrdGlobalEccCvMara> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static _SYS_XS_RuntimeConfiguration Find(this ITable<_SYS_XS_RuntimeConfiguration> table, string PackageId)
		{
			return table.FirstOrDefault(t =>
				t.PackageId == PackageId);
		}

		public static _SYS_XS_RuntimeJsonExtension Find(this ITable<_SYS_XS_RuntimeJsonExtension> table, string PackageId, string ObjectName, string ObjectSuffix)
		{
			return table.FirstOrDefault(t =>
				t.PackageId    == PackageId  &&
				t.ObjectName   == ObjectName &&
				t.ObjectSuffix == ObjectSuffix);
		}

		public static _SYS_XS_RuntimeJsonObject Find(this ITable<_SYS_XS_RuntimeJsonObject> table, string PackageId, string ObjectName, string ObjectSuffix)
		{
			return table.FirstOrDefault(t =>
				t.PackageId    == PackageId  &&
				t.ObjectName   == ObjectName &&
				t.ObjectSuffix == ObjectSuffix);
		}

		public static _SYS_XS_SamlProviderConfig Find(this ITable<_SYS_XS_SamlProviderConfig> table, string SamlProvider, byte ProfileType, byte BindingType)
		{
			return table.FirstOrDefault(t =>
				t.SamlProvider == SamlProvider &&
				t.ProfileType  == ProfileType  &&
				t.BindingType  == BindingType);
		}

		public static SapHana Find(this ITable<SapHana> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static _SYS_XS_SecureStore Find(this ITable<_SYS_XS_SecureStore> table, string StoreId, long UserId, string DataId)
		{
			return table.FirstOrDefault(t =>
				t.StoreId == StoreId &&
				t.UserId  == UserId  &&
				t.DataId  == DataId);
		}

		public static _SYS_XS_SecureStoreList Find(this ITable<_SYS_XS_SecureStoreList> table, string PackageId, string ObjectName)
		{
			return table.FirstOrDefault(t =>
				t.PackageId  == PackageId &&
				t.ObjectName == ObjectName);
		}

		public static _SYS_XS_SqlConnection Find(this ITable<_SYS_XS_SqlConnection> table, string NAME)
		{
			return table.FirstOrDefault(t =>
				t.NAME == NAME);
		}

		public static _SYS_SECURITY_SysObjectPrivilege Find(this ITable<_SYS_SECURITY_SysObjectPrivilege> table, string ObjectType, string PRIVILEGE)
		{
			return table.FirstOrDefault(t =>
				t.ObjectType == ObjectType &&
				t.PRIVILEGE  == PRIVILEGE);
		}

		public static _SYS_SECURITY_SysPasswordBlacklist Find(this ITable<_SYS_SECURITY_SysPasswordBlacklist> table, string BlacklistTerm, string CheckPartialPassword, string CheckCaseSensitive)
		{
			return table.FirstOrDefault(t =>
				t.BlacklistTerm        == BlacklistTerm        &&
				t.CheckPartialPassword == CheckPartialPassword &&
				t.CheckCaseSensitive   == CheckCaseSensitive);
		}

		public static _SYS_TASK_TaskClientMapping1 Find(this ITable<_SYS_TASK_TaskClientMapping1> table, long TaskOid)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid == TaskOid);
		}

		public static _SYS_TASK_TaskColumnDefinitions Find(this ITable<_SYS_TASK_TaskColumnDefinitions> table, long TaskOid, int OperationId, int TableId, int ColumnId)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid     == TaskOid     &&
				t.OperationId == OperationId &&
				t.TableId     == TableId     &&
				t.ColumnId    == ColumnId);
		}

		public static _SYS_TASK_TaskExecutions Find(this ITable<_SYS_TASK_TaskExecutions> table, long TaskOid, long TaskExecutionId)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid         == TaskOid &&
				t.TaskExecutionId == TaskExecutionId);
		}

		public static _SYS_TASK_TaskLocalization1 Find(this ITable<_SYS_TASK_TaskLocalization1> table, int LocTypeId, string LocId, char LANGUAGE)
		{
			return table.FirstOrDefault(t =>
				t.LocTypeId == LocTypeId &&
				t.LocId     == LocId     &&
				t.LANGUAGE  == LANGUAGE);
		}

		public static _SYS_TASK_TaskOperations Find(this ITable<_SYS_TASK_TaskOperations> table, int TaskOid, int OperationId)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid     == TaskOid &&
				t.OperationId == OperationId);
		}

		public static _SYS_TASK_TaskOperationsExecutions Find(this ITable<_SYS_TASK_TaskOperationsExecutions> table, long TaskExecutionId, int PartitionId, string OperationName)
		{
			return table.FirstOrDefault(t =>
				t.TaskExecutionId == TaskExecutionId &&
				t.PartitionId     == PartitionId     &&
				t.OperationName   == OperationName);
		}

		public static _SYS_TASK_TaskPartitionExecutions Find(this ITable<_SYS_TASK_TaskPartitionExecutions> table, long TaskOid, long TaskExecutionId, long PartitionId)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid         == TaskOid         &&
				t.TaskExecutionId == TaskExecutionId &&
				t.PartitionId     == PartitionId);
		}

		public static _SYS_TASK_TaskTableDefinitions Find(this ITable<_SYS_TASK_TaskTableDefinitions> table, long TaskOid, int OperationId, int TableId)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid     == TaskOid     &&
				t.OperationId == OperationId &&
				t.TableId     == TableId);
		}

		public static _SYS_TASK_TaskTableRelationships Find(this ITable<_SYS_TASK_TaskTableRelationships> table, long TaskOid, int OperationId, int TableId, int RelatedTableId, string FromAttribute, string ToAttribute)
		{
			return table.FirstOrDefault(t =>
				t.TaskOid        == TaskOid        &&
				t.OperationId    == OperationId    &&
				t.TableId        == TableId        &&
				t.RelatedTableId == RelatedTableId &&
				t.FromAttribute  == FromAttribute  &&
				t.ToAttribute    == ToAttribute);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Testmerge1 Find(this ITable<Testmerge1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMerge1 Find(this ITable<TestMerge1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Testmerge2 Find(this ITable<Testmerge2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMerge2 Find(this ITable<TestMerge2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static _SYS_RT_TiImportKey Find(this ITable<_SYS_RT_TiImportKey> table, string TableSchema, string TableName, string TiPackage, string TiName, string TiType, string CsvPackage, string CsvName, string CsvFileext, string KeyColumnName, string KeyValue)
		{
			return table.FirstOrDefault(t =>
				t.TableSchema   == TableSchema   &&
				t.TableName     == TableName     &&
				t.TiPackage     == TiPackage     &&
				t.TiName        == TiName        &&
				t.TiType        == TiType        &&
				t.CsvPackage    == CsvPackage    &&
				t.CsvName       == CsvName       &&
				t.CsvFileext    == CsvFileext    &&
				t.KeyColumnName == KeyColumnName &&
				t.KeyValue      == KeyValue);
		}

		public static _SYS_RT_UisAppsite Find(this ITable<_SYS_RT_UisAppsite> table, string ID, string TenantId, string DTYPE)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE);
		}

		public static _SYS_RT_UisAppsitePROPERTy Find(this ITable<_SYS_RT_UisAppsitePROPERTy> table, string ID, string TenantId, string DTYPE, string SiteId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE    &&
				t.SiteId   == SiteId);
		}

		public static _SYS_RT_UisPage Find(this ITable<_SYS_RT_UisPage> table, string ID, string TenantId, string DTYPE, string SiteId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE    &&
				t.SiteId   == SiteId);
		}

		public static _SYS_RT_UisPagePROPERTy Find(this ITable<_SYS_RT_UisPagePROPERTy> table, string ID, string SiteId, string PageId, string TenantId, string DTYPE)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.SiteId   == SiteId   &&
				t.PageId   == PageId   &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE);
		}

		public static _SYS_RT_UisUserAppsite Find(this ITable<_SYS_RT_UisUserAppsite> table, string ID, string UserName, string TenantId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.UserName == UserName &&
				t.TenantId == TenantId);
		}

		public static _SYS_RT_UisUserAppsitePROPERTy Find(this ITable<_SYS_RT_UisUserAppsitePROPERTy> table, string ID, string TenantId, string SiteId, string UserName, string KEY)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.SiteId   == SiteId   &&
				t.UserName == UserName &&
				t.KEY      == KEY);
		}

		public static _SYS_RT_UisUserPage Find(this ITable<_SYS_RT_UisUserPage> table, string ID, string UserName, string SiteId, string TenantId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.UserName == UserName &&
				t.SiteId   == SiteId   &&
				t.TenantId == TenantId);
		}

		public static _SYS_RT_UisUserPagePROPERTy Find(this ITable<_SYS_RT_UisUserPagePROPERTy> table, string ID, string TenantId, string SiteId, string PageId, string UserName)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.SiteId   == SiteId   &&
				t.PageId   == PageId   &&
				t.UserName == UserName);
		}

		public static _SYS_RT_UisUserWidget Find(this ITable<_SYS_RT_UisUserWidget> table, string ID, string UserName, string SiteId, string TenantId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.UserName == UserName &&
				t.SiteId   == SiteId   &&
				t.TenantId == TenantId);
		}

		public static _SYS_RT_UisUserWidgetPROPERTy Find(this ITable<_SYS_RT_UisUserWidgetPROPERTy> table, string ID, string UserName, string WidgetId, string SiteId, string TenantId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.UserName == UserName &&
				t.WidgetId == WidgetId &&
				t.SiteId   == SiteId   &&
				t.TenantId == TenantId);
		}

		public static _SYS_RT_UisWidget Find(this ITable<_SYS_RT_UisWidget> table, string ID, string TenantId, string DTYPE, string SiteId)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE    &&
				t.SiteId   == SiteId);
		}

		public static _SYS_RT_UisWidgetPROPERTy Find(this ITable<_SYS_RT_UisWidgetPROPERTy> table, string ID, string WidgetId, string SiteId, string TenantId, string DTYPE)
		{
			return table.FirstOrDefault(t =>
				t.ID       == ID       &&
				t.WidgetId == WidgetId &&
				t.SiteId   == SiteId   &&
				t.TenantId == TenantId &&
				t.DTYPE    == DTYPE);
		}

		public static _SYS_RT_UisWidgetTemplate Find(this ITable<_SYS_RT_UisWidgetTemplate> table, string ID, string TenantId, string RepositoryId)
		{
			return table.FirstOrDefault(t =>
				t.ID           == ID       &&
				t.TenantId     == TenantId &&
				t.RepositoryId == RepositoryId);
		}

		public static _SYS_RT_UisWidgetTemplateList Find(this ITable<_SYS_RT_UisWidgetTemplateList> table, string TenantId, string RepositoryId)
		{
			return table.FirstOrDefault(t =>
				t.TenantId     == TenantId &&
				t.RepositoryId == RepositoryId);
		}

		public static _SYS_RT_UisWidgetTemplatePROPERTy Find(this ITable<_SYS_RT_UisWidgetTemplatePROPERTy> table, string ID, string TenantId, string RepositoryId, string WidgetTemplateId, string KEY)
		{
			return table.FirstOrDefault(t =>
				t.ID               == ID               &&
				t.TenantId         == TenantId         &&
				t.RepositoryId     == RepositoryId     &&
				t.WidgetTemplateId == WidgetTemplateId &&
				t.KEY              == KEY);
		}

		public static _SYS_XS_UsageMeasuringObject Find(this ITable<_SYS_XS_UsageMeasuringObject> table, string APP, string NAME)
		{
			return table.FirstOrDefault(t =>
				t.APP  == APP &&
				t.NAME == NAME);
		}
	}
}

#nullable restore
#pragma warning restore 1591
