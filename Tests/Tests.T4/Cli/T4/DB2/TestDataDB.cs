// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.DB2
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(LinqToDBConnectionOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(LinqToDBConnectionOptions<TestDataDB> options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Alltype>           Alltypes            => this.GetTable<Alltype>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Mastertable>       Mastertables        => this.GetTable<Mastertable>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<Slavetable>        Slavetables         => this.GetTable<Slavetable>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<Personview>        Personviews         => this.GetTable<Personview>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Schema = "DB2INST1")]
		public ITable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			[Column("O")] public int? O { get; set; }
		}
		#endregion

		#region TestModule1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule1TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_MODULE1", Schema = "DB2INST1")]
		public ITable<TestModule1TestTableFunctionResult> TestModule1TestTableFunction(int? i)
		{
			return this.GetTable<TestModule1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestModule1TestTableFunctionResult
		{
			[Column("O")] public int? O { get; set; }
		}
		#endregion

		#region TestModule2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule2TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_MODULE2", Schema = "DB2INST1")]
		public ITable<TestModule2TestTableFunctionResult> TestModule2TestTableFunction(int? i)
		{
			return this.GetTable<TestModule2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestModule2TestTableFunctionResult
		{
			[Column("O")] public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	[Table("ALLTYPES", Schema = "DB2INST1")]
	public partial class Alltype
	{
		[Column("ID"               , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                { get; set; } // INTEGER
		[Column("BIGINTDATATYPE"                                                                                     )] public long?     Bigintdatatype    { get; set; } // BIGINT
		[Column("INTDATATYPE"                                                                                        )] public int?      Intdatatype       { get; set; } // INTEGER
		[Column("SMALLINTDATATYPE"                                                                                   )] public short?    Smallintdatatype  { get; set; } // SMALLINT
		[Column("DECIMALDATATYPE"                                                                                    )] public decimal?  Decimaldatatype   { get; set; } // DECIMAL
		[Column("DECFLOATDATATYPE"                                                                                   )] public decimal?  Decfloatdatatype  { get; set; } // DECFLOAT(16)
		[Column("REALDATATYPE"                                                                                       )] public float?    Realdatatype      { get; set; } // REAL
		[Column("DOUBLEDATATYPE"                                                                                     )] public double?   Doubledatatype    { get; set; } // DOUBLE
		[Column("CHARDATATYPE"                                                                                       )] public char?     Chardatatype      { get; set; } // CHARACTER(1)
		[Column("CHAR20DATATYPE"                                                                                     )] public string?   Char20Datatype    { get; set; } // CHARACTER(20)
		[Column("VARCHARDATATYPE"                                                                                    )] public string?   Varchardatatype   { get; set; } // VARCHAR(20)
		[Column("CLOBDATATYPE"                                                                                       )] public string?   Clobdatatype      { get; set; } // CLOB(1048576)
		[Column("DBCLOBDATATYPE"                                                                                     )] public string?   Dbclobdatatype    { get; set; } // DBCLOB(100)
		[Column("BINARYDATATYPE"                                                                                     )] public byte[]?   Binarydatatype    { get; set; } // CHAR (5) FOR BIT DATA
		[Column("VARBINARYDATATYPE"                                                                                  )] public byte[]?   Varbinarydatatype { get; set; } // VARCHAR (5) FOR BIT DATA
		[Column("BLOBDATATYPE"                                                                                       )] public byte[]?   Blobdatatype      { get; set; } // BLOB(1048576)
		[Column("GRAPHICDATATYPE"                                                                                    )] public string?   Graphicdatatype   { get; set; } // GRAPHIC(10)
		[Column("DATEDATATYPE"                                                                                       )] public DateTime? Datedatatype      { get; set; } // DATE
		[Column("TIMEDATATYPE"                                                                                       )] public TimeSpan? Timedatatype      { get; set; } // TIME
		[Column("TIMESTAMPDATATYPE"                                                                                  )] public DateTime? Timestampdatatype { get; set; } // TIMESTAMP
		[Column("XMLDATATYPE"                                                                                        )] public string?   Xmldatatype       { get; set; } // XML
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Alltype? Find(this ITable<Alltype> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static KeepIdentityTest? Find(this ITable<KeepIdentityTest> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Mastertable? Find(this ITable<Mastertable> table, int id1, int id2)
		{
			return table.FirstOrDefault(e => e.ID1 == id1 && e.ID2 == id2);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("DB2INST1.ADDISSUE792RECORD");
		}
		#endregion

		#region PersonSelectbykey
		public static int PersonSelectbykey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProc("DB2INST1.PERSON_SELECTBYKEY", parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("DB2INST1.TEST_PROCEDURE", parameters);
		}
		#endregion

		#region TestModule1TestProcedure
		public static int TestModule1TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("DB2INST1.TEST_MODULE1.TEST_PROCEDURE", parameters);
		}
		#endregion

		#region TestModule2TestProcedure
		public static int TestModule2TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("DB2INST1.TEST_MODULE2.TEST_PROCEDURE", parameters);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		[Sql.Function("DB2INST1.TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule1TestFunction
		[Sql.Function("DB2INST1.TEST_MODULE1.TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestModule1TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule2TestFunction
		[Sql.Function("DB2INST1.TEST_MODULE2.TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestModule2TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}

	[Table("Child", Schema = "DB2INST1")]
	public partial class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("ChildID" )] public int? ChildID  { get; set; } // INTEGER
	}

	[Table("CollatedTable", Schema = "DB2INST1")]
	public partial class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // INTEGER
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // VARCHAR(80)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // VARCHAR(80)
	}

	[Table("Doctor", Schema = "DB2INST1")]
	public partial class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // INTEGER
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // VARCHAR(50)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(DB2.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("GrandChild", Schema = "DB2INST1")]
	public partial class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // INTEGER
		[Column("ChildID"     )] public int? ChildID      { get; set; } // INTEGER
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table("InheritanceChild", Schema = "DB2INST1")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // INTEGER
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("InheritanceParent", Schema = "DB2INST1")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("KeepIdentityTest", Schema = "DB2INST1")]
	public partial class KeepIdentityTest
	{
		[Column("ID"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID    { get; set; } // INTEGER
		[Column("Value"                                                                                  )] public int? Value { get; set; } // INTEGER
	}

	[Table("LinqDataTypes", Schema = "DB2INST1")]
	public partial class LinqDataType
	{
		[Column("ID"            )] public int?      ID             { get; set; } // INTEGER
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // DECIMAL(10,4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column("BoolValue"     )] public short?    BoolValue      { get; set; } // SMALLINT
		[Column("GuidValue"     )] public byte[]?   GuidValue      { get; set; } // CHAR (16) FOR BIT DATA
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // BLOB(5000)
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // INTEGER
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // BIGINT
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // VARCHAR(50)
	}

	[Table("MASTERTABLE", Schema = "DB2INST1")]
	public partial class Mastertable
	{
		[Column("ID1", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int ID1 { get; set; } // INTEGER
		[Column("ID2", IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int ID2 { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE backreference
		/// </summary>
		[Association(ThisKey = nameof(ID1) + "," + nameof(ID2), OtherKey = nameof(Slavetable.ID222222222222222222222222) + "," + nameof(Slavetable.ID1))]
		public IEnumerable<Slavetable> Slavetables { get; set; } = null!;
		#endregion
	}

	[Table("Parent", Schema = "DB2INST1")]
	public partial class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
	}

	[Table("Patient", Schema = "DB2INST1")]
	public partial class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // INTEGER
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // VARCHAR(256)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(DB2.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person", Schema = "DB2INST1")]
	public partial class Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // INTEGER
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // VARCHAR(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // VARCHAR(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // CHARACTER(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(DB2.Doctor.PersonID))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(DB2.Patient.PersonID))]
		public Patient? Patient { get; set; }
		#endregion
	}

	[Table("SLAVETABLE", Schema = "DB2INST1")]
	public partial class Slavetable
	{
		[Column("ID1"                          )] public int ID1                        { get; set; } // INTEGER
		[Column("ID 2222222222222222222222  22")] public int ID222222222222222222222222 { get; set; } // INTEGER
		[Column("ID 2222222222222222"          )] public int ID2222222222222222         { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ID222222222222222222222222) + "," + nameof(ID1), OtherKey = nameof(DB2.Mastertable.ID1) + "," + nameof(DB2.Mastertable.ID2))]
		public Mastertable Mastertable { get; set; } = null!;
		#endregion
	}

	[Table("TestIdentity", Schema = "DB2INST1")]
	public partial class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // INTEGER
	}

	[Table("TestMerge1", Schema = "DB2INST1")]
	public partial class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public short?    FieldBoolean    { get; set; } // SMALLINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // VARCHAR(80)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHARACTER(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // CHARACTER(4)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARCHAR (20) FOR BIT DATA
		[Column("FieldGuid"                           )] public byte[]?   FieldGuid       { get; set; } // CHAR (16) FOR BIT DATA
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("TestMerge2", Schema = "DB2INST1")]
	public partial class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public short?    FieldBoolean    { get; set; } // SMALLINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // VARCHAR(80)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHARACTER(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // CHARACTER(4)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARCHAR (20) FOR BIT DATA
		[Column("FieldGuid"                           )] public byte[]?   FieldGuid       { get; set; } // CHAR (16) FOR BIT DATA
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("PERSONVIEW", Schema = "DB2INST1", IsView = true)]
	public partial class Personview
	{
		[Column("PersonID"                     )] public int     PersonID   { get; set; } // INTEGER
		[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!; // VARCHAR(50)
		[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!; // VARCHAR(50)
		[Column("MiddleName"                   )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                       )] public char    Gender     { get; set; } // CHARACTER(1)
	}
}
