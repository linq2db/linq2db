// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Linq;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.DB2
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(LinqToDBConnectionOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(LinqToDBConnectionOptions<TestDataDB> options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<DB2ADMIN_Alltype>                Alltypes                => this.GetTable<DB2ADMIN_Alltype>();
		public ITable<DB2ADMIN_Child>                  Children                => this.GetTable<DB2ADMIN_Child>();
		public ITable<DB2ADMIN_CollatedTable>          CollatedTables          => this.GetTable<DB2ADMIN_CollatedTable>();
		public ITable<DB2ADMIN_CreateIfNotExistsTable> CreateIfNotExistsTables => this.GetTable<DB2ADMIN_CreateIfNotExistsTable>();
		public ITable<DB2ADMIN_Doctor>                 Doctors                 => this.GetTable<DB2ADMIN_Doctor>();
		public ITable<DB2ADMIN_GrandChild>             GrandChildren           => this.GetTable<DB2ADMIN_GrandChild>();
		public ITable<DB2ADMIN_InheritanceChild>       InheritanceChildren     => this.GetTable<DB2ADMIN_InheritanceChild>();
		public ITable<DB2ADMIN_InheritanceParent>      InheritanceParents      => this.GetTable<DB2ADMIN_InheritanceParent>();
		public ITable<DB2ADMIN_Int>                    Ints                    => this.GetTable<DB2ADMIN_Int>();
		public ITable<DB2ADMIN_KeepIdentityTest>       KeepIdentityTests       => this.GetTable<DB2ADMIN_KeepIdentityTest>();
		public ITable<DB2ADMIN_LinqDataType>           LinqDataTypes           => this.GetTable<DB2ADMIN_LinqDataType>();
		public ITable<DB2ADMIN_Mastertable>            Mastertables            => this.GetTable<DB2ADMIN_Mastertable>();
		public ITable<DB2ADMIN_Parent>                 Parents                 => this.GetTable<DB2ADMIN_Parent>();
		public ITable<DB2ADMIN_Patient>                Patients                => this.GetTable<DB2ADMIN_Patient>();
		public ITable<DB2ADMIN_Person>                 People                  => this.GetTable<DB2ADMIN_Person>();
		public ITable<DB2ADMIN_Slavetable>             Slavetables             => this.GetTable<DB2ADMIN_Slavetable>();
		public ITable<DB2ADMIN_TagTestTable>           TagTestTables           => this.GetTable<DB2ADMIN_TagTestTable>();
		public ITable<DB2ADMIN_Test>                   Tests                   => this.GetTable<DB2ADMIN_Test>();
		public ITable<DB2ADMIN_TestIdentity>           TestIdentities          => this.GetTable<DB2ADMIN_TestIdentity>();
		public ITable<DB2ADMIN_TestMerge1>             TestMerge1              => this.GetTable<DB2ADMIN_TestMerge1>();
		public ITable<DB2ADMIN_TestMerge2>             TestMerge2              => this.GetTable<DB2ADMIN_TestMerge2>();
		public ITable<DB2ADMIN_Testmerge1>             Testmerge1              => this.GetTable<DB2ADMIN_Testmerge1>();
		public ITable<DB2ADMIN_Testmerge2>             Testmerge2              => this.GetTable<DB2ADMIN_Testmerge2>();
		public ITable<DB2ADMIN_Personview>             Personviews             => this.GetTable<DB2ADMIN_Personview>();
	}

	[Table("ALLTYPES", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Alltype
	{
		[Column("ID"               , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                { get; set; } // INTEGER
		[Column("BIGINTDATATYPE"                                                                                     )] public long?     Bigintdatatype    { get; set; } // BIGINT
		[Column("INTDATATYPE"                                                                                        )] public int?      Intdatatype       { get; set; } // INTEGER
		[Column("SMALLINTDATATYPE"                                                                                   )] public short?    Smallintdatatype  { get; set; } // SMALLINT
		[Column("DECIMALDATATYPE"                                                                                    )] public decimal?  Decimaldatatype   { get; set; } // DECIMAL
		[Column("DECFLOATDATATYPE"                                                                                   )] public decimal?  Decfloatdatatype  { get; set; } // DECFLOAT(16)
		[Column("REALDATATYPE"                                                                                       )] public float?    Realdatatype      { get; set; } // REAL
		[Column("DOUBLEDATATYPE"                                                                                     )] public double?   Doubledatatype    { get; set; } // DOUBLE
		[Column("CHARDATATYPE"                                                                                       )] public char?     Chardatatype      { get; set; } // CHARACTER(1)
		[Column("CHAR20DATATYPE"                                                                                     )] public string?   Char20Datatype    { get; set; } // CHARACTER(20)
		[Column("VARCHARDATATYPE"                                                                                    )] public string?   Varchardatatype   { get; set; } // VARCHAR(20)
		[Column("CLOBDATATYPE"                                                                                       )] public string?   Clobdatatype      { get; set; } // CLOB(1048576)
		[Column("DBCLOBDATATYPE"                                                                                     )] public string?   Dbclobdatatype    { get; set; } // DBCLOB(100)
		[Column("BINARYDATATYPE"                                                                                     )] public byte[]?   Binarydatatype    { get; set; } // CHAR (5) FOR BIT DATA
		[Column("VARBINARYDATATYPE"                                                                                  )] public byte[]?   Varbinarydatatype { get; set; } // VARCHAR (5) FOR BIT DATA
		[Column("BLOBDATATYPE"                                                                                       )] public byte[]?   Blobdatatype      { get; set; } // BLOB(1048576)
		[Column("GRAPHICDATATYPE"                                                                                    )] public string?   Graphicdatatype   { get; set; } // GRAPHIC(10)
		[Column("DATEDATATYPE"                                                                                       )] public DateTime? Datedatatype      { get; set; } // DATE
		[Column("TIMEDATATYPE"                                                                                       )] public TimeSpan? Timedatatype      { get; set; } // TIME
		[Column("TIMESTAMPDATATYPE"                                                                                  )] public DateTime? Timestampdatatype { get; set; } // TIMESTAMP
		[Column("XMLDATATYPE"                                                                                        )] public string?   Xmldatatype       { get; set; } // XML
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static DB2ADMIN_Alltype? Find(this ITable<DB2ADMIN_Alltype> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static DB2ADMIN_Doctor? Find(this ITable<DB2ADMIN_Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static DB2ADMIN_InheritanceChild? Find(this ITable<DB2ADMIN_InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static DB2ADMIN_InheritanceParent? Find(this ITable<DB2ADMIN_InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static DB2ADMIN_KeepIdentityTest? Find(this ITable<DB2ADMIN_KeepIdentityTest> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static DB2ADMIN_Mastertable? Find(this ITable<DB2ADMIN_Mastertable> table, int id1, int id2)
		{
			return table.FirstOrDefault(e => e.ID1 == id1 && e.ID2 == id2);
		}

		public static DB2ADMIN_Patient? Find(this ITable<DB2ADMIN_Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static DB2ADMIN_Person? Find(this ITable<DB2ADMIN_Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static DB2ADMIN_TestIdentity? Find(this ITable<DB2ADMIN_TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static DB2ADMIN_TestMerge1? Find(this ITable<DB2ADMIN_TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static DB2ADMIN_TestMerge2? Find(this ITable<DB2ADMIN_TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static DB2ADMIN_Testmerge1? Find(this ITable<DB2ADMIN_Testmerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static DB2ADMIN_Testmerge2? Find(this ITable<DB2ADMIN_Testmerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("DB2ADMIN.ADDISSUE792RECORD");
		}
		#endregion

		#region PersonSelectbykey
		public static int PersonSelectbykey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProc("DB2ADMIN.PERSON_SELECTBYKEY", parameters);
		}
		#endregion
		#endregion
	}

	[Table("Child", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("ChildID" )] public int? ChildID  { get; set; } // INTEGER
	}

	[Table("CollatedTable", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // INTEGER
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // VARCHAR(80)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // VARCHAR(80)
	}

	[Table("CreateIfNotExistsTable", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_CreateIfNotExistsTable
	{
		[Column("Id"   )] public int Id    { get; set; } // INTEGER
		[Column("Value")] public int Value { get; set; } // INTEGER
	}

	[Table("Doctor", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // INTEGER
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // VARCHAR(50)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(DB2ADMIN_Person.PersonID))]
		public DB2ADMIN_Person Person { get; set; } = null!;
		#endregion
	}

	[Table("GrandChild", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // INTEGER
		[Column("ChildID"     )] public int? ChildID      { get; set; } // INTEGER
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table("InheritanceChild", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // INTEGER
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("InheritanceParent", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("Ints", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Int
	{
		[Column("One"  )] public int  One   { get; set; } // INTEGER
		[Column("Two"  )] public int  Two   { get; set; } // INTEGER
		[Column("Three")] public int  Three { get; set; } // INTEGER
		[Column("Four" )] public int  Four  { get; set; } // INTEGER
		[Column("Five" )] public int  Five  { get; set; } // INTEGER
		[Column("Nil"  )] public int? Nil   { get; set; } // INTEGER
	}

	[Table("KeepIdentityTest", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_KeepIdentityTest
	{
		[Column("ID"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID    { get; set; } // INTEGER
		[Column("Value"                                                                                  )] public int? Value { get; set; } // INTEGER
	}

	[Table("LinqDataTypes", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_LinqDataType
	{
		[Column("ID"            )] public int?      ID             { get; set; } // INTEGER
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // DECIMAL(10,4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column("BoolValue"     )] public short?    BoolValue      { get; set; } // SMALLINT
		[Column("GuidValue"     )] public byte[]?   GuidValue      { get; set; } // CHAR (16) FOR BIT DATA
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // BLOB(5000)
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // INTEGER
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // BIGINT
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // VARCHAR(50)
	}

	[Table("MASTERTABLE", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Mastertable
	{
		[Column("ID1", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int ID1 { get; set; } // INTEGER
		[Column("ID2", IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int ID2 { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE backreference
		/// </summary>
		[Association(ThisKey = nameof(ID1) + "," + nameof(ID1), OtherKey = nameof(DB2ADMIN_Slavetable.ID222222222222222222222222) + "," + nameof(ID1))]
		public IEnumerable<DB2ADMIN_Slavetable> Slavetables { get; set; } = null!;
		#endregion
	}

	[Table("Parent", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
	}

	[Table("Patient", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // INTEGER
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // VARCHAR(256)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(DB2ADMIN_Person.PersonID))]
		public DB2ADMIN_Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // INTEGER
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // VARCHAR(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // VARCHAR(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // CHARACTER(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(DB2ADMIN_Doctor.PersonID))]
		public DB2ADMIN_Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(DB2ADMIN_Patient.PersonID))]
		public DB2ADMIN_Patient? Patient { get; set; }
		#endregion
	}

	[Table("SLAVETABLE", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Slavetable
	{
		[Column("ID1"                          )] public int ID1                        { get; set; } // INTEGER
		[Column("ID 2222222222222222222222  22")] public int ID222222222222222222222222 { get; set; } // INTEGER
		[Column("ID 2222222222222222"          )] public int ID2222222222222222         { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ID222222222222222222222222) + "," + nameof(ID222222222222222222222222), OtherKey = nameof(DB2ADMIN_Mastertable.ID1) + "," + nameof(ID222222222222222222222222))]
		public DB2ADMIN_Mastertable Mastertable { get; set; } = null!;
		#endregion
	}

	[Table("TagTestTable", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_TagTestTable
	{
		[Column("ID"  )] public int     ID   { get; set; } // INTEGER
		[Column("Name")] public string? Name { get; set; } // VARCHAR(1020)
	}

	[Table("Test", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Test
	{
		[Column("Id"          )] public int  Id           { get; set; } // INTEGER
		[Column("TestAnimalId")] public int? TestAnimalId { get; set; } // INTEGER
	}

	[Table("TestIdentity", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // INTEGER
	}

	[Table("TestMerge1", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public short?    FieldBoolean    { get; set; } // SMALLINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // VARCHAR(80)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHARACTER(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // CHARACTER(4)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARCHAR (20) FOR BIT DATA
		[Column("FieldGuid"                           )] public byte[]?   FieldGuid       { get; set; } // CHAR (16) FOR BIT DATA
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("TestMerge2", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public short?    FieldBoolean    { get; set; } // SMALLINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // VARCHAR(80)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHARACTER(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // CHARACTER(4)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARCHAR (20) FOR BIT DATA
		[Column("FieldGuid"                           )] public byte[]?   FieldGuid       { get; set; } // CHAR (16) FOR BIT DATA
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("testmerge1", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Testmerge1
	{
		[Column("id"    , IsPrimaryKey = true)] public int  Id     { get; set; } // INTEGER
		[Column("field1"                     )] public int? Field1 { get; set; } // INTEGER
		[Column("field2"                     )] public int? Field2 { get; set; } // INTEGER
		[Column("field3"                     )] public int? Field3 { get; set; } // INTEGER
		[Column("field4"                     )] public int? Field4 { get; set; } // INTEGER
		[Column("field5"                     )] public int? Field5 { get; set; } // INTEGER
	}

	[Table("testmerge2", Schema = "DB2ADMIN")]
	public partial class DB2ADMIN_Testmerge2
	{
		[Column("id"    , IsPrimaryKey = true)] public int  Id     { get; set; } // INTEGER
		[Column("field1"                     )] public int? Field1 { get; set; } // INTEGER
		[Column("field2"                     )] public int? Field2 { get; set; } // INTEGER
		[Column("field3"                     )] public int? Field3 { get; set; } // INTEGER
		[Column("field4"                     )] public int? Field4 { get; set; } // INTEGER
		[Column("field5"                     )] public int? Field5 { get; set; } // INTEGER
	}

	[Table("PERSONVIEW", Schema = "DB2ADMIN", IsView = true)]
	public partial class DB2ADMIN_Personview
	{
		[Column("PersonID"                     )] public int     PersonID   { get; set; } // INTEGER
		[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!; // VARCHAR(50)
		[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!; // VARCHAR(50)
		[Column("MiddleName"                   )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                       )] public char    Gender     { get; set; } // CHARACTER(1)
	}
}
