// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.Sybase
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity> TestMergeIdentities => this.GetTable<TestMergeIdentity>();
		public ITable<Sysquerymetric>    Sysquerymetrics     => this.GetTable<Sysquerymetric>();
	}

	[Table("AllTypes", Schema = "dbo")]
	public partial class AllType
	{
		[Column("ID"                   , IsIdentity   = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                    { get; set; } // int
		[Column("bigintDataType"                                                                      )] public long?     BigintDataType        { get; set; } // bigint
		[Column("uBigintDataType"                                                                     )] public ulong?    UBigintDataType       { get; set; } // ubigint
		[Column("numericDataType"                                                                     )] public decimal?  NumericDataType       { get; set; } // numeric(18, 1)
		[Column("bitDataType"                                                                         )] public bool      BitDataType           { get; set; } // bit
		[Column("smallintDataType"                                                                    )] public short?    SmallintDataType      { get; set; } // smallint
		[Column("uSmallintDataType"                                                                   )] public ushort?   USmallintDataType     { get; set; } // usmallint
		[Column("decimalDataType"                                                                     )] public decimal?  DecimalDataType       { get; set; } // decimal(18, 1)
		[Column("smallmoneyDataType"                                                                  )] public decimal?  SmallmoneyDataType    { get; set; } // smallmoney
		[Column("intDataType"                                                                         )] public int?      IntDataType           { get; set; } // int
		[Column("uIntDataType"                                                                        )] public uint?     UIntDataType          { get; set; } // uint
		[Column("tinyintDataType"                                                                     )] public sbyte?    TinyintDataType       { get; set; } // tinyint
		[Column("moneyDataType"                                                                       )] public decimal?  MoneyDataType         { get; set; } // money
		[Column("floatDataType"                                                                       )] public double?   FloatDataType         { get; set; } // float
		[Column("realDataType"                                                                        )] public float?    RealDataType          { get; set; } // real
		[Column("datetimeDataType"                                                                    )] public DateTime? DatetimeDataType      { get; set; } // datetime
		[Column("smalldatetimeDataType"                                                               )] public DateTime? SmalldatetimeDataType { get; set; } // smalldatetime
		[Column("dateDataType"                                                                        )] public DateTime? DateDataType          { get; set; } // date
		[Column("timeDataType"                                                                        )] public TimeSpan? TimeDataType          { get; set; } // time
		[Column("charDataType"                                                                        )] public char?     CharDataType          { get; set; } // char(1)
		[Column("char20DataType"                                                                      )] public string?   Char20DataType        { get; set; } // char(20)
		[Column("varcharDataType"                                                                     )] public string?   VarcharDataType       { get; set; } // varchar(20)
		[Column("textDataType"                                                                        )] public string?   TextDataType          { get; set; } // text
		[Column("ncharDataType"                                                                       )] public string?   NcharDataType         { get; set; } // nchar(60)
		[Column("nvarcharDataType"                                                                    )] public string?   NvarcharDataType      { get; set; } // nvarchar(60)
		[Column("ntextDataType"                                                                       )] public string?   NtextDataType         { get; set; } // unitext
		[Column("binaryDataType"                                                                      )] public byte[]?   BinaryDataType        { get; set; } // binary(1)
		[Column("varbinaryDataType"                                                                   )] public byte[]?   VarbinaryDataType     { get; set; } // varbinary(1)
		[Column("imageDataType"                                                                       )] public byte[]?   ImageDataType         { get; set; } // image
		[Column("timestampDataType"    , SkipOnInsert = true, SkipOnUpdate = true                     )] public byte[]?   TimestampDataType     { get; set; } // timestamp
	}

	[Table("Child", Schema = "dbo")]
	public partial class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // int
		[Column("ChildID" )] public int? ChildID  { get; set; } // int
	}

	[Table("CollatedTable", Schema = "dbo")]
	public partial class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // int
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // nvarchar(60)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // nvarchar(60)
	}

	[Table("Doctor", Schema = "dbo")]
	public partial class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // int
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // nvarchar(150)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(Sybase.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection, out int? returnValue)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			returnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			return dataConnection.ExecuteProc("[dbo].[AddIssue792Record]", parameters);
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection, out int? returnValue)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			returnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			return dataConnection.QueryProc<PersonSelectAllResult>("[dbo].[Person_SelectAll]", parameters).ToList();
		}

		public partial class PersonSelectAllResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"    , CanBeNull = false)] public string  Gender     { get; set; } = null!;
		}
		#endregion
		#endregion
	}

	[Table("GrandChild", Schema = "dbo")]
	public partial class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // int
		[Column("ChildID"     )] public int? ChildID      { get; set; } // int
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // int
	}

	[Table("InheritanceChild", Schema = "dbo")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // int
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // int
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int
		[Column("Name"                                    )] public string? Name                { get; set; } // nvarchar(150)
	}

	[Table("InheritanceParent", Schema = "dbo")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // int
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int
		[Column("Name"                                    )] public string? Name                { get; set; } // nvarchar(150)
	}

	[Table("KeepIdentityTest", Schema = "dbo")]
	public partial class KeepIdentityTest
	{
		[Column("ID"   , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID    { get; set; } // int
		[Column("Value"                                                             )] public int? Value { get; set; } // int
	}

	[Table("LinqDataTypes", Schema = "dbo")]
	public partial class LinqDataType
	{
		[Column("ID"            )] public int       ID             { get; set; } // int
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // decimal(10, 4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // datetime
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // datetime
		[Column("BoolValue"     )] public bool      BoolValue      { get; set; } // bit
		[Column("GuidValue"     )] public string?   GuidValue      { get; set; } // char(36)
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // binary(500)
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // int
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // bigint
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // nvarchar(150)
	}

	[Table("Parent", Schema = "dbo")]
	public partial class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // int
		[Column("Value1"  )] public int? Value1   { get; set; } // int
	}

	[Table("Patient", Schema = "dbo")]
	public partial class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // int
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // nvarchar(768)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(Sybase.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person", Schema = "dbo")]
	public partial class Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // int
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // nvarchar(150)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // nvarchar(150)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // nvarchar(150)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // char(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(Sybase.Doctor.PersonID))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(Sybase.Patient.PersonID))]
		public Patient? Patient { get; set; }
		#endregion
	}

	[Table("TestIdentity", Schema = "dbo")]
	public partial class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // int
	}

	[Table("TestMerge1", Schema = "dbo")]
	public partial class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // int
		[Column("Field1"                              )] public int?      Field1          { get; set; } // int
		[Column("Field2"                              )] public int?      Field2          { get; set; } // int
		[Column("Field3"                              )] public int?      Field3          { get; set; } // int
		[Column("Field4"                              )] public int?      Field4          { get; set; } // int
		[Column("Field5"                              )] public int?      Field5          { get; set; } // int
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // bigint
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // nvarchar(60)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // nchar(3)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // float
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // char(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // decimal(24, 10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // time
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // int
	}

	[Table("TestMerge2", Schema = "dbo")]
	public partial class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // int
		[Column("Field1"                              )] public int?      Field1          { get; set; } // int
		[Column("Field2"                              )] public int?      Field2          { get; set; } // int
		[Column("Field3"                              )] public int?      Field3          { get; set; } // int
		[Column("Field4"                              )] public int?      Field4          { get; set; } // int
		[Column("Field5"                              )] public int?      Field5          { get; set; } // int
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // bigint
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // nvarchar(60)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public string?   FieldNChar      { get; set; } // nchar(3)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // float
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // char(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // decimal(24, 10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // time
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // int
	}

	[Table("TestMergeIdentity", Schema = "dbo")]
	public partial class TestMergeIdentity
	{
		[Column("Id"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  Id    { get; set; } // int
		[Column("Field"                                                                                  )] public int? Field { get; set; } // int
	}

	[Table("sysquerymetrics", Schema = "dbo", IsView = true)]
	public partial class Sysquerymetric
	{
		[Column("uid"      )] public int     Uid      { get; set; } // int
		[Column("gid"      )] public int     Gid      { get; set; } // int
		[Column("hashkey"  )] public int     Hashkey  { get; set; } // int
		[Column("id"       )] public int     Id       { get; set; } // int
		[Column("sequence" )] public short   Sequence { get; set; } // smallint
		[Column("exec_min" )] public ulong?  ExecMin  { get; set; } // ubigint
		[Column("exec_max" )] public ulong?  ExecMax  { get; set; } // ubigint
		[Column("exec_avg" )] public ulong?  ExecAvg  { get; set; } // ubigint
		[Column("elap_min" )] public ulong?  ElapMin  { get; set; } // ubigint
		[Column("elap_max" )] public ulong?  ElapMax  { get; set; } // ubigint
		[Column("elap_avg" )] public ulong?  ElapAvg  { get; set; } // ubigint
		[Column("lio_min"  )] public ulong?  LioMin   { get; set; } // ubigint
		[Column("lio_max"  )] public ulong?  LioMax   { get; set; } // ubigint
		[Column("lio_avg"  )] public ulong?  LioAvg   { get; set; } // ubigint
		[Column("pio_min"  )] public ulong?  PioMin   { get; set; } // ubigint
		[Column("pio_max"  )] public ulong?  PioMax   { get; set; } // ubigint
		[Column("pio_avg"  )] public ulong?  PioAvg   { get; set; } // ubigint
		[Column("cnt"      )] public ulong?  Cnt      { get; set; } // ubigint
		[Column("abort_cnt")] public ulong?  AbortCnt { get; set; } // ubigint
		[Column("qtext"    )] public string? Qtext    { get; set; } // varchar(510)
	}
}
