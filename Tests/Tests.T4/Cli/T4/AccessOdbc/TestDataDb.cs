// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.Access.Odbc
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>             AllTypes             => this.GetTable<AllType>();
		public ITable<Child>               Children             => this.GetTable<Child>();
		public ITable<DataTypeTest>        DataTypeTests        => this.GetTable<DataTypeTest>();
		public ITable<Doctor>              Doctors              => this.GetTable<Doctor>();
		public ITable<Dual>                Duals                => this.GetTable<Dual>();
		public ITable<GrandChild>          GrandChildren        => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>    InheritanceChildren  => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>   InheritanceParents   => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>        LinqDataTypes        => this.GetTable<LinqDataType>();
		public ITable<Parent>              Parents              => this.GetTable<Parent>();
		public ITable<Patient>             Patients             => this.GetTable<Patient>();
		public ITable<Person>              People               => this.GetTable<Person>();
		public ITable<TestIdentity>        TestIdentities       => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>          TestMerge1           => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>          TestMerge2           => this.GetTable<TestMerge2>();
		public ITable<LinqDataTypesQuery>  LinqDataTypesQueries => this.GetTable<LinqDataTypesQuery>();
		public ITable<LinqDataTypesQuery1> LinqDataTypesQuery1  => this.GetTable<LinqDataTypesQuery1>();
		public ITable<LinqDataTypesQuery2> LinqDataTypesQuery2  => this.GetTable<LinqDataTypesQuery2>();
		public ITable<PatientSelectAll>    PatientSelectAll     => this.GetTable<PatientSelectAll>();
		public ITable<PersonSelectAll>     PersonSelectAll      => this.GetTable<PersonSelectAll>();
		public ITable<ScalarDataReader>    ScalarDataReaders    => this.GetTable<ScalarDataReader>();
	}

	[Table("AllTypes")]
	public partial class AllType
	{
		[Column("ID"                      , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                       { get; set; } // COUNTER
		[Column("bitDataType"                                                                          )] public bool      BitDataType              { get; set; } // BIT
		[Column("smallintDataType"                                                                     )] public short?    SmallintDataType         { get; set; } // SMALLINT
		[Column("decimalDataType"                                                                      )] public decimal?  DecimalDataType          { get; set; } // DECIMAL(18, 0)
		[Column("intDataType"                                                                          )] public int?      IntDataType              { get; set; } // INTEGER
		[Column("tinyintDataType"                                                                      )] public byte?     TinyintDataType          { get; set; } // BYTE
		[Column("moneyDataType"                                                                        )] public decimal?  MoneyDataType            { get; set; } // CURRENCY
		[Column("floatDataType"                                                                        )] public double?   FloatDataType            { get; set; } // DOUBLE
		[Column("realDataType"                                                                         )] public float?    RealDataType             { get; set; } // REAL
		[Column("datetimeDataType"                                                                     )] public DateTime? DatetimeDataType         { get; set; } // DATETIME
		[Column("charDataType"                                                                         )] public char?     CharDataType             { get; set; } // CHAR(1)
		[Column("char20DataType"                                                                       )] public string?   Char20DataType           { get; set; } // CHAR(20)
		[Column("varcharDataType"                                                                      )] public string?   VarcharDataType          { get; set; } // VARCHAR(20)
		[Column("textDataType"                                                                         )] public string?   TextDataType             { get; set; } // LONGCHAR
		[Column("ncharDataType"                                                                        )] public string?   NcharDataType            { get; set; } // CHAR(20)
		[Column("nvarcharDataType"                                                                     )] public string?   NvarcharDataType         { get; set; } // VARCHAR(20)
		[Column("ntextDataType"                                                                        )] public string?   NtextDataType            { get; set; } // LONGCHAR
		[Column("binaryDataType"                                                                       )] public byte[]?   BinaryDataType           { get; set; } // BINARY(10)
		[Column("varbinaryDataType"                                                                    )] public byte[]?   VarbinaryDataType        { get; set; } // VARBINARY(510)
		[Column("imageDataType"                                                                        )] public byte[]?   ImageDataType            { get; set; } // LONGBINARY
		[Column("oleObjectDataType"                                                                    )] public byte[]?   OleObjectDataType        { get; set; } // LONGBINARY
		[Column("uniqueidentifierDataType"                                                             )] public Guid?     UniqueidentifierDataType { get; set; } // GUID
	}

	[Table("Child")]
	public partial class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("ChildID" )] public int? ChildID  { get; set; } // INTEGER
	}

	[Table("DataTypeTest")]
	public partial class DataTypeTest
	{
		[Column("DataTypeID", IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       DataTypeID { get; set; } // COUNTER
		[Column("Binary_"                                                                )] public byte[]?   Binary     { get; set; } // LONGBINARY
		[Column("Boolean_"                                                               )] public int?      Boolean    { get; set; } // INTEGER
		[Column("Byte_"                                                                  )] public byte?     Byte       { get; set; } // BYTE
		[Column("Bytes_"                                                                 )] public byte[]?   Bytes      { get; set; } // LONGBINARY
		[Column("Char_"                                                                  )] public char?     Char       { get; set; } // VARCHAR(1)
		[Column("DateTime_"                                                              )] public DateTime? DateTime   { get; set; } // DATETIME
		[Column("Decimal_"                                                               )] public decimal?  Decimal    { get; set; } // CURRENCY
		[Column("Double_"                                                                )] public double?   Double     { get; set; } // DOUBLE
		[Column("Guid_"                                                                  )] public Guid?     Guid       { get; set; } // GUID
		[Column("Int16_"                                                                 )] public short?    Int16      { get; set; } // SMALLINT
		[Column("Int32_"                                                                 )] public int?      Int32      { get; set; } // INTEGER
		[Column("Int64_"                                                                 )] public int?      Int64      { get; set; } // INTEGER
		[Column("Money_"                                                                 )] public decimal?  Money      { get; set; } // CURRENCY
		[Column("SByte_"                                                                 )] public byte?     SByte      { get; set; } // BYTE
		[Column("Single_"                                                                )] public float?    Single     { get; set; } // REAL
		[Column("Stream_"                                                                )] public byte[]?   Stream     { get; set; } // LONGBINARY
		[Column("String_"                                                                )] public string?   String     { get; set; } // VARCHAR(50)
		[Column("UInt16_"                                                                )] public short?    UInt16     { get; set; } // SMALLINT
		[Column("UInt32_"                                                                )] public int?      UInt32     { get; set; } // INTEGER
		[Column("UInt64_"                                                                )] public int?      UInt64     { get; set; } // INTEGER
		[Column("Xml_"                                                                   )] public string?   Xml        { get; set; } // LONGCHAR
	}

	[Table("Doctor")]
	public partial class Doctor
	{
		[Column("PersonID")] public int?    PersonID { get; set; } // INTEGER
		[Column("Taxonomy")] public string? Taxonomy { get; set; } // VARCHAR(50)
	}

	[Table("Dual")]
	public partial class Dual
	{
		[Column("Dummy")] public string? Dummy { get; set; } // VARCHAR(10)
	}

	[Table("GrandChild")]
	public partial class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // INTEGER
		[Column("ChildID"     )] public int? ChildID      { get; set; } // INTEGER
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table("InheritanceChild")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" )] public int?    InheritanceChildId  { get; set; } // INTEGER
		[Column("InheritanceParentId")] public int?    InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"  )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"               )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("InheritanceParent")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId")] public int?    InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"  )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"               )] public string? Name                { get; set; } // VARCHAR(50)
	}

	[Table("LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column("ID"            )] public int?      ID             { get; set; } // INTEGER
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // DECIMAL(10, 4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // DATETIME
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // DATETIME
		[Column("BoolValue"     )] public bool      BoolValue      { get; set; } // BIT
		[Column("GuidValue"     )] public Guid?     GuidValue      { get; set; } // GUID
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // LONGBINARY
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // INTEGER
		[Column("BigIntValue"   )] public int?      BigIntValue    { get; set; } // INTEGER
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // VARCHAR(50)
	}

	[Table("Parent")]
	public partial class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
	}

	[Table("Patient")]
	public partial class Patient
	{
		[Column("PersonID" )] public int?    PersonID  { get; set; } // INTEGER
		[Column("Diagnosis")] public string? Diagnosis { get; set; } // VARCHAR(255)
	}

	[Table("Person")]
	public partial class Person
	{
		[Column("PersonID"  , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // COUNTER
		[Column("FirstName"                                                              )] public string? FirstName  { get; set; } // VARCHAR(50)
		[Column("LastName"                                                               )] public string? LastName   { get; set; } // VARCHAR(50)
		[Column("MiddleName"                                                             )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                                                                 )] public char?   Gender     { get; set; } // VARCHAR(1)
	}

	[Table("TestIdentity")]
	public partial class TestIdentity
	{
		[Column("ID", IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // COUNTER
	}

	[Table("TestMerge1")]
	public partial class TestMerge1
	{
		[Column("Id"             )] public int?      Id              { get; set; } // INTEGER
		[Column("Field1"         )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"         )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"         )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"         )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"         )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldBoolean"   )] public bool      FieldBoolean    { get; set; } // BIT
		[Column("FieldString"    )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"   )] public string?   FieldNString    { get; set; } // VARCHAR(20)
		[Column("FieldChar"      )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     )] public char?     FieldNChar      { get; set; } // CHAR(1)
		[Column("FieldFloat"     )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"    )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"  )] public DateTime? FieldDateTime   { get; set; } // DATETIME
		[Column("FieldBinary"    )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"      )] public Guid?     FieldGuid       { get; set; } // GUID
		[Column("FieldDecimal"   )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column("FieldDate"      )] public DateTime? FieldDate       { get; set; } // DATETIME
		[Column("FieldTime"      )] public DateTime? FieldTime       { get; set; } // DATETIME
		[Column("FieldEnumString")] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber")] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("TestMerge2")]
	public partial class TestMerge2
	{
		[Column("Id"             )] public int?      Id              { get; set; } // INTEGER
		[Column("Field1"         )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"         )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"         )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"         )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"         )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldBoolean"   )] public bool      FieldBoolean    { get; set; } // BIT
		[Column("FieldString"    )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"   )] public string?   FieldNString    { get; set; } // VARCHAR(20)
		[Column("FieldChar"      )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     )] public char?     FieldNChar      { get; set; } // CHAR(1)
		[Column("FieldFloat"     )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"    )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"  )] public DateTime? FieldDateTime   { get; set; } // DATETIME
		[Column("FieldBinary"    )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"      )] public Guid?     FieldGuid       { get; set; } // GUID
		[Column("FieldDecimal"   )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column("FieldDate"      )] public DateTime? FieldDate       { get; set; } // DATETIME
		[Column("FieldTime"      )] public DateTime? FieldTime       { get; set; } // DATETIME
		[Column("FieldEnumString")] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber")] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("LinqDataTypes Query", IsView = true)]
	public partial class LinqDataTypesQuery
	{
		[Column("DateTimeValue")] public DateTime? DateTimeValue { get; set; } // DATETIME
	}

	[Table("LinqDataTypes Query1", IsView = true)]
	public partial class LinqDataTypesQuery1
	{
		[Column("ID")] public int? ID { get; set; } // INTEGER
	}

	[Table("LinqDataTypes Query2", IsView = true)]
	public partial class LinqDataTypesQuery2
	{
		[Column("ID")] public int? ID { get; set; } // INTEGER
	}

	[Table("Patient_SelectAll", IsView = true)]
	public partial class PatientSelectAll
	{
		[Column("PersonID"  , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // COUNTER
		[Column("FirstName"                                                              )] public string? FirstName  { get; set; } // VARCHAR(50)
		[Column("LastName"                                                               )] public string? LastName   { get; set; } // VARCHAR(50)
		[Column("MiddleName"                                                             )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                                                                 )] public char?   Gender     { get; set; } // VARCHAR(1)
		[Column("Diagnosis"                                                              )] public string? Diagnosis  { get; set; } // VARCHAR(255)
	}

	[Table("Person_SelectAll", IsView = true)]
	public partial class PersonSelectAll
	{
		[Column("PersonID"  , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // COUNTER
		[Column("FirstName"                                                              )] public string? FirstName  { get; set; } // VARCHAR(50)
		[Column("LastName"                                                               )] public string? LastName   { get; set; } // VARCHAR(50)
		[Column("MiddleName"                                                             )] public string? MiddleName { get; set; } // VARCHAR(50)
		[Column("Gender"                                                                 )] public char?   Gender     { get; set; } // VARCHAR(1)
	}

	[Table("Scalar_DataReader", IsView = true)]
	public partial class ScalarDataReader
	{
		[Column("intField"   )] public int?    IntField    { get; set; } // INTEGER
		[Column("stringField")] public string? StringField { get; set; } // VARCHAR
	}

	public static partial class ExtensionMethods
	{
		#region Stored Procedures
		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@lastName", lastName, DataType.VarChar)
				{
					Size = 255
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("[Patient_SelectByName]", parameters);
		}

		public partial class PatientSelectByNameResult
		{
			[Column("PersonID"  )] public int     PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
			[Column("Diagnosis" )] public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, DataType.Int32)
			};
			return dataConnection.ExecuteProc("[Person_Delete]", parameters);
		}
		#endregion

		#region PersonInsert
		public static int PersonInsert(this TestDataDB dataConnection, string? firstName, string? middleName, string? lastName, string? gender)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@MiddleName", middleName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@LastName", lastName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@Gender", gender, DataType.VarChar)
				{
					Size = 255
				}
			};
			return dataConnection.ExecuteProc("[Person_Insert]", parameters);
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[Person_SelectByKey]", parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			[Column("PersonID"  )] public int     PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@lastName", lastName, DataType.VarChar)
				{
					Size = 255
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("[Person_SelectByName]", parameters);
		}

		public partial class PersonSelectByNameResult
		{
			[Column("PersonID"  )] public int     PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@lastName", lastName, DataType.VarChar)
				{
					Size = 255
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[Person_SelectListByName]", parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			[Column("PersonID"  )] public int     PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? id, int? personId, string? firstName, string? middleName, string? lastName, string? gender)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32),
				new DataParameter("@PersonID", personId, DataType.Int32),
				new DataParameter("@FirstName", firstName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@MiddleName", middleName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@LastName", lastName, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("@Gender", gender, DataType.VarChar)
				{
					Size = 255
				}
			};
			return dataConnection.ExecuteProc("[Person_Update]", parameters);
		}
		#endregion
		#endregion
	}
}
