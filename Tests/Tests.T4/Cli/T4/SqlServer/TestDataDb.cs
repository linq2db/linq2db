// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using Microsoft.SqlServer.Types;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.SqlServer
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<TestSchema_SameTableName> SameTableNames           => this.GetTable<TestSchema_SameTableName>();
		public ITable<TestSchema_TestSchemaA>   TestSchemaA              => this.GetTable<TestSchema_TestSchemaA>();
		public ITable<TestSchema_TestSchemaB>   TestSchemaB              => this.GetTable<TestSchema_TestSchemaB>();
		public ITable<AllType>                  AllTypes                 => this.GetTable<AllType>();
		public ITable<AllTypes2>                AllTypes2                => this.GetTable<AllTypes2>();
		public ITable<Child>                    Children                 => this.GetTable<Child>();
		public ITable<CollatedTable>            CollatedTables           => this.GetTable<CollatedTable>();
		public ITable<DataType>                 DataTypes                => this.GetTable<DataType>();
		public ITable<DecimalOverflow>          DecimalOverflows         => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>                   Doctors                  => this.GetTable<Doctor>();
		public ITable<GrandChild>               GrandChildren            => this.GetTable<GrandChild>();
		public ITable<GuidID>                   GuidIds                  => this.GetTable<GuidID>();
		public ITable<GuidID2>                  GuidID2                  => this.GetTable<GuidID2>();
		public ITable<IndexTable>               IndexTables              => this.GetTable<IndexTable>();
		public ITable<IndexTable2>              IndexTable2              => this.GetTable<IndexTable2>();
		public ITable<InheritanceChild>         InheritanceChildren      => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>        InheritanceParents       => this.GetTable<InheritanceParent>();
		public ITable<Issue1115>                Issue1115                => this.GetTable<Issue1115>();
		public ITable<Issue1144>                Issue1144                => this.GetTable<Issue1144>();
		public ITable<LinqDataType>             LinqDataTypes            => this.GetTable<LinqDataType>();
		public ITable<Member>                   Members                  => this.GetTable<Member>();
		public ITable<NameTest>                 NameTests                => this.GetTable<NameTest>();
		/// <summary>
		/// This is Parent table
		/// </summary>
		public ITable<Parent>                   Parents                  => this.GetTable<Parent>();
		public ITable<Patient>                  Patients                 => this.GetTable<Patient>();
		public ITable<Person>                   People                   => this.GetTable<Person>();
		public ITable<Provider>                 Providers                => this.GetTable<Provider>();
		public ITable<SameTableName>            SameTableNames1          => this.GetTable<SameTableName>();
		public ITable<SqlType>                  SqlTypes                 => this.GetTable<SqlType>();
		public ITable<TestIdentity>             TestIdentities           => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>               TestMerge1               => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>               TestMerge2               => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>        TestMergeIdentities      => this.GetTable<TestMergeIdentity>();
		public ITable<TestSchemaX>              TestSchemaX              => this.GetTable<TestSchemaX>();
		public ITable<TestSchemaY>              TestSchemaY              => this.GetTable<TestSchemaY>();
		public ITable<TestSchemaSameTableName>  TestSchemaSameTableNames => this.GetTable<TestSchemaSameTableName>();
		public ITable<ParentChildView>          ParentChildViews         => this.GetTable<ParentChildView>();
		public ITable<ParentView>               ParentViews              => this.GetTable<ParentView>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		/// <summary>
		/// This is &lt;test&gt; table function!
		/// </summary>
		/// <param name="id">
		/// This is &lt;test&gt; table function parameter!
		/// </param>
		[Sql.TableFunction("GetParentByID", Schema = "dbo")]
		public ITable<Parent> GetParentById(int? id)
		{
			return this.GetTable<Parent>(this, _getParentById, id);
		}
		#endregion

		#region Issue1921
		private static readonly MethodInfo _issue1921 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.Issue1921());

		[Sql.TableFunction("Issue1921", Schema = "dbo")]
		public ITable<Issue1921Result> Issue1921()
		{
			return this.GetTable<Issue1921Result>(this, _issue1921);
		}

		public partial class Issue1921Result
		{
			[Column("name" , CanBeNull = false)] public string name  { get; set; } = null!;
			[Column("objid"                   )] public int?   objid { get; set; }
		}
		#endregion
		#endregion
	}

	[Table("SameTableName", Schema = "TestSchema")]
	public partial class TestSchema_SameTableName
	{
		[Column("id")] public int? Id { get; set; } // int
	}

	[Table("TestSchemaA", Schema = "TestSchema")]
	public partial class TestSchema_TestSchemaA
	{
		[Column("TestSchemaAID", IsPrimaryKey = true)] public int TestSchemaAID { get; set; } // int
		[Column("Field1"                            )] public int Field1        { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaAID), OtherKey = nameof(TestSchema_TestSchemaB.OriginTestSchemaAID))]
		public IEnumerable<TestSchema_TestSchemaB> TestSchemaB { get; set; } = null!;

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaAID), OtherKey = nameof(TestSchema_TestSchemaB.TargetTestSchemaAID))]
		public IEnumerable<TestSchema_TestSchemaB> TestSchemaB1 { get; set; } = null!;

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaAID), OtherKey = nameof(TestSchema_TestSchemaB.TargetTestSchemaAID1))]
		public IEnumerable<TestSchema_TestSchemaB> TestSchemaB2 { get; set; } = null!;
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static TestSchema_TestSchemaA? Find(this ITable<TestSchema_TestSchemaA> table, int testSchemaAid)
		{
			return table.FirstOrDefault(e => e.TestSchemaAID == testSchemaAid);
		}

		public static TestSchema_TestSchemaB? Find(this ITable<TestSchema_TestSchemaB> table, int testSchemaBid)
		{
			return table.FirstOrDefault(e => e.TestSchemaBID == testSchemaBid);
		}

		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static AllTypes2? Find(this ITable<AllTypes2> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Child? Find(this ITable<Child> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static DecimalOverflow? Find(this ITable<DecimalOverflow> table, decimal decimal1)
		{
			return table.FirstOrDefault(e => e.Decimal1 == decimal1);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static GrandChild? Find(this ITable<GrandChild> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static GuidID? Find(this ITable<GuidID> table, Guid id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static GuidID2? Find(this ITable<GuidID2> table, Guid id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static IndexTable? Find(this ITable<IndexTable> table, int pkField1, int pkField2)
		{
			return table.FirstOrDefault(e => e.PKField2 == pkField2 && e.PKField1 == pkField1);
		}

		public static IndexTable2? Find(this ITable<IndexTable2> table, int pkField1, int pkField2)
		{
			return table.FirstOrDefault(e => e.PKField2 == pkField2 && e.PKField1 == pkField1);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Issue1115? Find(this ITable<Issue1115> table, SqlHierarchyId id)
		{
			return table.FirstOrDefault(e => (bool)(e.Id == id));
		}

		public static Issue1144? Find(this ITable<Issue1144> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static LinqDataType? Find(this ITable<LinqDataType> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Member? Find(this ITable<Member> table, int memberId)
		{
			return table.FirstOrDefault(e => e.MemberId == memberId);
		}

		public static Parent? Find(this ITable<Parent> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Provider? Find(this ITable<Provider> table, int providerId)
		{
			return table.FirstOrDefault(e => e.ProviderId == providerId);
		}

		public static SqlType? Find(this ITable<SqlType> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestSchemaX? Find(this ITable<TestSchemaX> table, int testSchemaXid)
		{
			return table.FirstOrDefault(e => e.TestSchemaXID == testSchemaXid);
		}
		#endregion

		#region Stored Procedures
		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new TestProcedureResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[TestSchema].[TestProcedure]");
		}

		public partial class TestProcedureResult
		{
			public int Column { get; set; }
		}
		#endregion

		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[AddIssue792Record]");
		}
		#endregion

		#region DuplicateColumnNames
		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new DuplicateColumnNamesResult()
			{
				id = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema),
				id1 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[dbo].[DuplicateColumnNames]");
		}

		public partial class DuplicateColumnNamesResult
		{
			public int    id  { get; set; }
			public string id1 { get; set; } = null!;
		}
		#endregion

		#region ExecuteProcIntParameters
		public static int ExecuteProcIntParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("[dbo].[ExecuteProcIntParameters]", parameters);
		}
		#endregion

		#region ExecuteProcStringParameters
		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static IEnumerable<ExecuteProcStringParametersResult> ExecuteProcStringParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.QueryProc(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<string>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[dbo].[ExecuteProcStringParameters]", parameters).ToList();
		}

		public partial class ExecuteProcStringParametersResult
		{
			public string Column { get; set; } = null!;
		}
		#endregion

		#region Issue1897
		public static int Issue1897(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[dbo].[Issue1897]");
		}
		#endregion

		#region OutRefEnumTest
		public static int OutRefEnumTest(this TestDataDB dataConnection, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputStr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("[dbo].[OutRefEnumTest]", parameters);
		}
		#endregion

		#region OutRefTest
		public static int OutRefTest(this TestDataDB dataConnection, int? id, ref int? outputId, ref int? inputOutputId, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32),
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputId = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			inputOutputId = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			outputStr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("[dbo].[OutRefTest]", parameters);
		}
		#endregion

		#region PatientSelectAll
		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectAllResult>("[dbo].[Patient_SelectAll]");
		}

		public partial class PatientSelectAllResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
			[Column("Diagnosis" , CanBeNull = false)] public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("[dbo].[Patient_SelectByName]", parameters);
		}

		public partial class PatientSelectByNameResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
			[Column("Diagnosis" , CanBeNull = false)] public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
			};
			return dataConnection.ExecuteProc("[dbo].[Person_Delete]", parameters);
		}
		#endregion

		#region PersonInsert
		public static IEnumerable<PersonInsertResult> PersonInsert(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.QueryProc<PersonInsertResult>("[dbo].[Person_Insert]", parameters);
		}

		public partial class PersonInsertResult
		{
			[Column("PersonID")] public int? PersonID { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		public static int PersonInsertOutputParameter(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, ref int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			personId = Converter.ChangeTypeTo<int?>(parameters[4].Value);
			return dataConnection.ExecuteProc("[dbo].[Person_Insert_OutputParameter]", parameters);
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PersonSelectAllResult>("[dbo].[Person_SelectAll]");
		}

		public partial class PersonSelectAllResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[dbo].[Person_SelectByKey]", parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKeyLowercase
		public static IEnumerable<PersonSelectByKeyLowercaseResult> PersonSelectByKeyLowercase(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyLowercaseResult>("[dbo].[Person_SelectByKeyLowercase]", parameters);
		}

		public partial class PersonSelectByKeyLowercaseResult
		{
			[Column("PersonID"                    )] public int    PersonID  { get; set; }
			[Column("FirstName", CanBeNull = false)] public string FirstName { get; set; } = null!;
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("[dbo].[Person_SelectByName]", parameters);
		}

		public partial class PersonSelectByNameResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[dbo].[Person_SelectListByName]", parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personId, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32),
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("[dbo].[Person_Update]", parameters);
		}
		#endregion

		#region QueryProcMultipleParameters
		public static IEnumerable<QueryProcMultipleParametersResult> QueryProcMultipleParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2, ref int? output3)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			output3 = Converter.ChangeTypeTo<int?>(parameters[3].Value);
			return dataConnection.QueryProc<QueryProcMultipleParametersResult>("[dbo].[QueryProcMultipleParameters]", parameters).ToList();
		}

		public partial class QueryProcMultipleParametersResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region QueryProcParameters
		public static IEnumerable<QueryProcParametersResult> QueryProcParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<QueryProcParametersResult>("[dbo].[QueryProcParameters]", parameters).ToList();
		}

		public partial class QueryProcParametersResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion

		#region SelectImplicitColumn
		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[dbo].[SelectImplicitColumn]");
		}

		public partial class SelectImplicitColumnResult
		{
			public int Column { get; set; }
		}
		#endregion

		#region TableTypeTestProc
		public static IEnumerable<TableTypeTestProcResult> TableTypeTestProc(this TestDataDB dataConnection, DataTable? table)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
			};
			return dataConnection.QueryProc<TableTypeTestProcResult>("[dbo].[TableTypeTestProc]", parameters);
		}

		public partial class TableTypeTestProcResult
		{
			[Column("Id"  )] public int?    Id   { get; set; }
			[Column("Name")] public string? Name { get; set; }
		}
		#endregion

		#region VariableResults
		public static IEnumerable<VariableResultsResult> VariableResults(this TestDataDB dataConnection, bool? returnFullRow)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
			};
			return dataConnection.QueryProc<VariableResultsResult>("[dbo].[VariableResults]", parameters);
		}

		public partial class VariableResultsResult
		{
			[Column("Code"                     )] public int    Code   { get; set; }
			[Column("Value1", CanBeNull = false)] public string Value1 { get; set; } = null!;
			[Column("Value2", CanBeNull = false)] public string Value2 { get; set; } = null!;
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region ScalarFunction
		/// <summary>
		/// This is &lt;test&gt; scalar function!
		/// </summary>
		/// <param name="value">
		/// This is &lt;test&gt; scalar function parameter!
		/// </param>
		[Sql.Function("[dbo].[ScalarFunction]", ServerSideOnly = true)]
		public static int? ScalarFunction(int? @value)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}

	[Table("TestSchemaB", Schema = "TestSchema")]
	public partial class TestSchema_TestSchemaB
	{
		[Column("TestSchemaBID"          , IsPrimaryKey = true)] public int TestSchemaBID        { get; set; } // int
		[Column("OriginTestSchemaAID"                         )] public int OriginTestSchemaAID  { get; set; } // int
		[Column("TargetTestSchemaAID"                         )] public int TargetTestSchemaAID  { get; set; } // int
		[Column("Target_Test_Schema_A_ID"                     )] public int TargetTestSchemaAID1 { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(OriginTestSchemaAID), OtherKey = nameof(TestSchema_TestSchemaA.TestSchemaAID))]
		public TestSchema_TestSchemaA OriginTestSchemaA { get; set; } = null!;

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAID), OtherKey = nameof(TestSchema_TestSchemaA.TestSchemaAID))]
		public TestSchema_TestSchemaA TargetTestSchemaA { get; set; } = null!;

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAID1), OtherKey = nameof(TestSchema_TestSchemaA.TestSchemaAID))]
		public TestSchema_TestSchemaA TargetTestSchemaA1 { get; set; } = null!;
		#endregion
	}

	[Table("AllTypes", Schema = "dbo")]
	public partial class AllType
	{
		[Column("ID"                      , IsPrimaryKey = true, IsIdentity   = true, SkipOnInsert = true, SkipOnUpdate = true)] public int             ID                       { get; set; } // int
		[Column("bigintDataType"                                                                                              )] public long?           BigintDataType           { get; set; } // bigint
		[Column("numericDataType"                                                                                             )] public decimal?        NumericDataType          { get; set; } // numeric(18, 1)
		[Column("bitDataType"                                                                                                 )] public bool?           BitDataType              { get; set; } // bit
		[Column("smallintDataType"                                                                                            )] public short?          SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType"                                                                                             )] public decimal?        DecimalDataType          { get; set; } // decimal(18, 1)
		[Column("smallmoneyDataType"                                                                                          )] public decimal?        SmallmoneyDataType       { get; set; } // smallmoney
		[Column("intDataType"                                                                                                 )] public int?            IntDataType              { get; set; } // int
		[Column("tinyintDataType"                                                                                             )] public byte?           TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType"                                                                                               )] public decimal?        MoneyDataType            { get; set; } // money
		[Column("floatDataType"                                                                                               )] public double?         FloatDataType            { get; set; } // float
		[Column("realDataType"                                                                                                )] public float?          RealDataType             { get; set; } // real
		[Column("datetimeDataType"                                                                                            )] public DateTime?       DatetimeDataType         { get; set; } // datetime
		[Column("smalldatetimeDataType"                                                                                       )] public DateTime?       SmalldatetimeDataType    { get; set; } // smalldatetime
		[Column("charDataType"                                                                                                )] public char?           CharDataType             { get; set; } // char(1)
		[Column("char20DataType"                                                                                              )] public string?         Char20DataType           { get; set; } // char(20)
		[Column("varcharDataType"                                                                                             )] public string?         VarcharDataType          { get; set; } // varchar(20)
		[Column("textDataType"                                                                                                )] public string?         TextDataType             { get; set; } // text
		[Column("ncharDataType"                                                                                               )] public string?         NcharDataType            { get; set; } // nchar(20)
		[Column("nvarcharDataType"                                                                                            )] public string?         NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType"                                                                                               )] public string?         NtextDataType            { get; set; } // ntext
		[Column("binaryDataType"                                                                                              )] public byte[]?         BinaryDataType           { get; set; } // binary(1)
		[Column("varbinaryDataType"                                                                                           )] public byte[]?         VarbinaryDataType        { get; set; } // varbinary(1)
		[Column("imageDataType"                                                                                               )] public byte[]?         ImageDataType            { get; set; } // image
		[Column("timestampDataType"       , SkipOnInsert = true, SkipOnUpdate = true                                          )] public byte[]?         TimestampDataType        { get; set; } // timestamp
		[Column("uniqueidentifierDataType"                                                                                    )] public Guid?           UniqueidentifierDataType { get; set; } // uniqueidentifier
		[Column("sql_variantDataType"                                                                                         )] public object?         SqlVariantDataType       { get; set; } // sql_variant
		[Column("nvarchar_max_DataType"                                                                                       )] public string?         NvarcharMaxDataType      { get; set; } // nvarchar(max)
		[Column("varchar_max_DataType"                                                                                        )] public string?         VarcharMaxDataType       { get; set; } // varchar(max)
		[Column("varbinary_max_DataType"                                                                                      )] public byte[]?         VarbinaryMaxDataType     { get; set; } // varbinary(max)
		[Column("xmlDataType"                                                                                                 )] public string?         XmlDataType              { get; set; } // xml
		[Column("datetime2DataType"                                                                                           )] public DateTime?       Datetime2DataType        { get; set; } // datetime2(7)
		[Column("datetimeoffsetDataType"                                                                                      )] public DateTimeOffset? DatetimeoffsetDataType   { get; set; } // datetimeoffset(7)
		[Column("datetimeoffset0DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset0DataType  { get; set; } // datetimeoffset(0)
		[Column("datetimeoffset1DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset1DataType  { get; set; } // datetimeoffset(1)
		[Column("datetimeoffset2DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset2DataType  { get; set; } // datetimeoffset(2)
		[Column("datetimeoffset3DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset3DataType  { get; set; } // datetimeoffset(3)
		[Column("datetimeoffset4DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset4DataType  { get; set; } // datetimeoffset(4)
		[Column("datetimeoffset5DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset5DataType  { get; set; } // datetimeoffset(5)
		[Column("datetimeoffset6DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset6DataType  { get; set; } // datetimeoffset(6)
		[Column("datetimeoffset7DataType"                                                                                     )] public DateTimeOffset? Datetimeoffset7DataType  { get; set; } // datetimeoffset(7)
		[Column("dateDataType"                                                                                                )] public DateTime?       DateDataType             { get; set; } // date
		[Column("timeDataType"                                                                                                )] public TimeSpan?       TimeDataType             { get; set; } // time(7)
	}

	[Table("AllTypes2", Schema = "dbo")]
	public partial class AllTypes2
	{
		[Column("ID"                    , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int             ID                     { get; set; } // int
		[Column("dateDataType"                                                                                            )] public DateTime?       DateDataType           { get; set; } // date
		[Column("datetimeoffsetDataType"                                                                                  )] public DateTimeOffset? DatetimeoffsetDataType { get; set; } // datetimeoffset(7)
		[Column("datetime2DataType"                                                                                       )] public DateTime?       Datetime2DataType      { get; set; } // datetime2(7)
		[Column("timeDataType"                                                                                            )] public TimeSpan?       TimeDataType           { get; set; } // time(7)
		[Column("hierarchyidDataType"                                                                                     )] public SqlHierarchyId? HierarchyidDataType    { get; set; } // hierarchyid
		[Column("geographyDataType"                                                                                       )] public SqlGeography?   GeographyDataType      { get; set; } // geography
		[Column("geometryDataType"                                                                                        )] public SqlGeometry?    GeometryDataType       { get; set; } // geometry
	}

	[Table("Child", Schema = "dbo")]
	public partial class Child
	{
		[Column("ParentID"                                                                                  )] public int? ParentID { get; set; } // int
		/// <summary>
		/// This ChildID column
		/// </summary>
		[Column("ChildID"                                                                                   )] public int? ChildID  { get; set; } // int
		[Column("_ID"     , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID       { get; set; } // int
	}

	[Table("CollatedTable", Schema = "dbo")]
	public partial class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // int
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // nvarchar(20)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // nvarchar(20)
	}

	[Table("DataType", Schema = "dbo")]
	public partial class DataType
	{
		[Column("id")] public int Id { get; set; } // int
	}

	[Table("DecimalOverflow", Schema = "dbo")]
	public partial class DecimalOverflow
	{
		[Column("Decimal1", IsPrimaryKey = true)] public decimal  Decimal1 { get; set; } // decimal(38, 20)
		[Column("Decimal2"                     )] public decimal? Decimal2 { get; set; } // decimal(31, 2)
		[Column("Decimal3"                     )] public decimal? Decimal3 { get; set; } // decimal(38, 36)
		[Column("Decimal4"                     )] public decimal? Decimal4 { get; set; } // decimal(29, 0)
		[Column("Decimal5"                     )] public decimal? Decimal5 { get; set; } // decimal(38, 38)
	}

	[Table("Doctor", Schema = "dbo")]
	public partial class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // int
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // nvarchar(50)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(SqlServer.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("GrandChild", Schema = "dbo")]
	public partial class GrandChild
	{
		[Column("ParentID"                                                                                      )] public int? ParentID     { get; set; } // int
		[Column("ChildID"                                                                                       )] public int? ChildID      { get; set; } // int
		[Column("GrandChildID"                                                                                  )] public int? GrandChildID { get; set; } // int
		[Column("_ID"         , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID           { get; set; } // int
	}

	[Table("GuidID", Schema = "dbo")]
	public partial class GuidID
	{
		[Column("ID"    , IsPrimaryKey = true)] public Guid ID     { get; set; } // uniqueidentifier
		[Column("Field1"                     )] public int? Field1 { get; set; } // int
	}

	[Table("GuidID2", Schema = "dbo")]
	public partial class GuidID2
	{
		[Column("ID", IsPrimaryKey = true)] public Guid ID { get; set; } // uniqueidentifier
	}

	[Table("IndexTable", Schema = "dbo")]
	public partial class IndexTable
	{
		[Column("PKField1"   , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int PKField1    { get; set; } // int
		[Column("PKField2"   , IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int PKField2    { get; set; } // int
		[Column("UniqueField"                                          )] public int UniqueField { get; set; } // int
		[Column("IndexField"                                           )] public int IndexField  { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		[Association(ThisKey = nameof(PKField2) + "," + nameof(PKField1), OtherKey = nameof(SqlServer.IndexTable2.PKField2) + "," + nameof(SqlServer.IndexTable2.PKField1))]
		public IndexTable2? IndexTable2 { get; set; }
		#endregion
	}

	[Table("IndexTable2", Schema = "dbo")]
	public partial class IndexTable2
	{
		[Column("PKField1", IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int PKField1 { get; set; } // int
		[Column("PKField2", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int PKField2 { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PKField2) + "," + nameof(PKField1), OtherKey = nameof(IndexTable.PKField2) + "," + nameof(IndexTable.PKField1))]
		public IndexTable Patient2IndexTable { get; set; } = null!;
		#endregion
	}

	[Table("InheritanceChild", Schema = "dbo")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // int
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // int
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int
		[Column("Name"                                    )] public string? Name                { get; set; } // nvarchar(50)
	}

	[Table("InheritanceParent", Schema = "dbo")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // int
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int
		[Column("Name"                                    )] public string? Name                { get; set; } // nvarchar(50)
	}

	[Table("Issue1115", Schema = "dbo")]
	public partial class Issue1115
	{
		[Column("id", IsPrimaryKey = true)] public SqlHierarchyId Id { get; set; } // hierarchyid
	}

	[Table("Issue1144", Schema = "dbo")]
	public partial class Issue1144
	{
		/// <summary>
		/// Column description
		/// </summary>
		[Column("id", IsPrimaryKey = true)] public int Id { get; set; } // int
	}

	[Table("LinqDataTypes", Schema = "dbo")]
	public partial class LinqDataType
	{
		[Column("_ID"           , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID             { get; set; } // int
		[Column("ID"                                                                                              )] public int?      ID1            { get; set; } // int
		[Column("MoneyValue"                                                                                      )] public decimal?  MoneyValue     { get; set; } // decimal(10, 4)
		[Column("DateTimeValue"                                                                                   )] public DateTime? DateTimeValue  { get; set; } // datetime
		[Column("DateTimeValue2"                                                                                  )] public DateTime? DateTimeValue2 { get; set; } // datetime2(7)
		[Column("BoolValue"                                                                                       )] public bool?     BoolValue      { get; set; } // bit
		[Column("GuidValue"                                                                                       )] public Guid?     GuidValue      { get; set; } // uniqueidentifier
		[Column("BinaryValue"                                                                                     )] public byte[]?   BinaryValue    { get; set; } // varbinary(5000)
		[Column("SmallIntValue"                                                                                   )] public short?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"                                                                                        )] public int?      IntValue       { get; set; } // int
		[Column("BigIntValue"                                                                                     )] public long?     BigIntValue    { get; set; } // bigint
		[Column("StringValue"                                                                                     )] public string?   StringValue    { get; set; } // nvarchar(50)
	}

	[Table("Member", Schema = "dbo")]
	public partial class Member
	{
		[Column("MemberId", IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int    MemberId { get; set; } // int
		[Column("Alias"   , CanBeNull    = false                                                             )] public string Alias    { get; set; } = null!; // nvarchar(50)

		#region Associations
		/// <summary>
		/// FK_Provider_Member backreference
		/// </summary>
		[Association(ThisKey = nameof(MemberId), OtherKey = nameof(SqlServer.Provider.ProviderId))]
		public Provider? Provider { get; set; }
		#endregion
	}

	[Table("Name.Test", Schema = "dbo")]
	public partial class NameTest
	{
		[Column("Name.Test")] public int? NameTest1 { get; set; } // int
	}

	/// <summary>
	/// This is Parent table
	/// </summary>
	[Table("Parent", Schema = "dbo")]
	public partial class Parent
	{
		[Column("ParentID"                                                                                  )] public int? ParentID { get; set; } // int
		[Column("Value1"                                                                                    )] public int? Value1   { get; set; } // int
		[Column("_ID"     , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID       { get; set; } // int
	}

	[Table("Patient", Schema = "dbo")]
	public partial class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // int
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // nvarchar(256)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(SqlServer.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person", Schema = "dbo")]
	public partial class Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // int
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // nvarchar(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // nvarchar(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // nvarchar(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // char(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(SqlServer.Doctor.PersonID))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(SqlServer.Patient.PersonID))]
		public Patient? Patient { get; set; }
		#endregion
	}

	[Table("Provider", Schema = "dbo")]
	public partial class Provider
	{
		[Column("ProviderId", IsPrimaryKey = true )] public int    ProviderId { get; set; } // int
		[Column("Test"      , CanBeNull    = false)] public string Test       { get; set; } = null!; // nvarchar(max)

		#region Associations
		/// <summary>
		/// FK_Provider_Member
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ProviderId), OtherKey = nameof(SqlServer.Member.MemberId))]
		public Member Member { get; set; } = null!;
		#endregion
	}

	[Table("SameTableName", Schema = "dbo")]
	public partial class SameTableName
	{
		[Column("id")] public int? Id { get; set; } // int
	}

	[Table("SqlTypes", Schema = "dbo")]
	public partial class SqlType
	{
		[Column("ID" , IsPrimaryKey = true)] public int             ID  { get; set; } // int
		[Column("HID"                     )] public SqlHierarchyId? Hid { get; set; } // hierarchyid
	}

	[Table("TestIdentity", Schema = "dbo")]
	public partial class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // int
	}

	[Table("TestMerge1", Schema = "dbo")]
	public partial class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int             Id              { get; set; } // int
		[Column("Field1"                              )] public int?            Field1          { get; set; } // int
		[Column("Field2"                              )] public int?            Field2          { get; set; } // int
		[Column("Field3"                              )] public int?            Field3          { get; set; } // int
		[Column("Field4"                              )] public int?            Field4          { get; set; } // int
		[Column("Field5"                              )] public int?            Field5          { get; set; } // int
		[Column("FieldInt64"                          )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"                        )] public bool?           FieldBoolean    { get; set; } // bit
		[Column("FieldString"                         )] public string?         FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?         FieldNString    { get; set; } // nvarchar(20)
		[Column("FieldChar"                           )] public char?           FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public char?           FieldNChar      { get; set; } // nchar(1)
		[Column("FieldFloat"                          )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?         FieldDouble     { get; set; } // float
		[Column("FieldDateTime"                       )] public DateTime?       FieldDateTime   { get; set; } // datetime
		[Column("FieldDateTime2"                      )] public DateTimeOffset? FieldDateTime2  { get; set; } // datetimeoffset(7)
		[Column("FieldBinary"                         )] public byte[]?         FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public Guid?           FieldGuid       { get; set; } // uniqueidentifier
		[Column("FieldDecimal"                        )] public decimal?        FieldDecimal    { get; set; } // decimal(24, 10)
		[Column("FieldDate"                           )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan?       FieldTime       { get; set; } // time(7)
		[Column("FieldEnumString"                     )] public string?         FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?            FieldEnumNumber { get; set; } // int
	}

	[Table("TestMerge2", Schema = "dbo")]
	public partial class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int             Id              { get; set; } // int
		[Column("Field1"                              )] public int?            Field1          { get; set; } // int
		[Column("Field2"                              )] public int?            Field2          { get; set; } // int
		[Column("Field3"                              )] public int?            Field3          { get; set; } // int
		[Column("Field4"                              )] public int?            Field4          { get; set; } // int
		[Column("Field5"                              )] public int?            Field5          { get; set; } // int
		[Column("FieldInt64"                          )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"                        )] public bool?           FieldBoolean    { get; set; } // bit
		[Column("FieldString"                         )] public string?         FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?         FieldNString    { get; set; } // nvarchar(20)
		[Column("FieldChar"                           )] public char?           FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public char?           FieldNChar      { get; set; } // nchar(1)
		[Column("FieldFloat"                          )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?         FieldDouble     { get; set; } // float
		[Column("FieldDateTime"                       )] public DateTime?       FieldDateTime   { get; set; } // datetime
		[Column("FieldDateTime2"                      )] public DateTimeOffset? FieldDateTime2  { get; set; } // datetimeoffset(7)
		[Column("FieldBinary"                         )] public byte[]?         FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public Guid?           FieldGuid       { get; set; } // uniqueidentifier
		[Column("FieldDecimal"                        )] public decimal?        FieldDecimal    { get; set; } // decimal(24, 10)
		[Column("FieldDate"                           )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan?       FieldTime       { get; set; } // time(7)
		[Column("FieldEnumString"                     )] public string?         FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?            FieldEnumNumber { get; set; } // int
	}

	[Table("TestMergeIdentity", Schema = "dbo")]
	public partial class TestMergeIdentity
	{
		[Column("Id"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  Id    { get; set; } // int
		[Column("Field"                                                                                  )] public int? Field { get; set; } // int
	}

	[Table("TestSchemaX", Schema = "dbo")]
	public partial class TestSchemaX
	{
		[Column("TestSchemaXID", IsPrimaryKey = true)] public int TestSchemaXID { get; set; } // int
		[Column("Field1"                            )] public int Field1        { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXID))]
		public IEnumerable<TestSchemaY> TestSchemaY { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXID))]
		public IEnumerable<TestSchemaY> TestSchemaY1 { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXID))]
		public IEnumerable<TestSchemaY> TestSchemaY2 { get; set; } = null!;
		#endregion
	}

	[Table("TestSchemaY", Schema = "dbo")]
	public partial class TestSchemaY
	{
		[Column("TestSchemaXID"      )] public int TestSchemaXID       { get; set; } // int
		[Column("ParentTestSchemaXID")] public int ParentTestSchemaXID { get; set; } // int
		[Column("OtherID"            )] public int OtherID             { get; set; } // int

		#region Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXID))]
		public TestSchemaX TestSchemaX { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ParentTestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXID))]
		public TestSchemaX ParentTestSchemaX { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TestSchemaXID), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXID))]
		public TestSchemaX TestSchemaX1 { get; set; } = null!;
		#endregion
	}

	[Table("TestSchema_SameTableName", Schema = "dbo")]
	public partial class TestSchemaSameTableName
	{
		[Column("id")] public int? Id { get; set; } // int
	}

	[Table("ParentChildView", Schema = "dbo", IsView = true)]
	public partial class ParentChildView
	{
		[Column("ParentID")] public int? ParentID { get; set; } // int
		[Column("Value1"  )] public int? Value1   { get; set; } // int
		[Column("ChildID" )] public int? ChildID  { get; set; } // int
	}

	[Table("ParentView", Schema = "dbo", IsView = true)]
	public partial class ParentView
	{
		[Column("ParentID"                                                             )] public int? ParentID { get; set; } // int
		[Column("Value1"                                                               )] public int? Value1   { get; set; } // int
		[Column("_ID"     , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int  ID       { get; set; } // int
	}
}
