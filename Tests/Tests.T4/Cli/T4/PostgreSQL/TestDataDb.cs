// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.PostgreSQL
{
	public partial class TestDataDb : DataConnection
	{
		static TestDataDb()
		{
			ContextSchema.SetConvertExpression<object?[], ExtensionMethods.TestFunctionParametersResult>(tuple => new ExtensionMethods.TestFunctionParametersResult()
			{
				Param2 = (int?)(tuple[0]),
				Param3 = (int?)(tuple[1])
			});
		}
		public TestDataDb()
		{
			InitDataContext();
		}

		public TestDataDb(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDb(LinqToDBConnectionOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDb(LinqToDBConnectionOptions<TestDataDb> options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>                        AllTypes                  => this.GetTable<AllType>();
		public ITable<SequenceCustomNamingTest>       SequenceCustomNamingTests => this.GetTable<SequenceCustomNamingTest>();
		public ITable<test_schema_TestSchemaIdentity> TestSchemaIdentities      => this.GetTable<test_schema_TestSchemaIdentity>();
		public ITable<test_schema_Testserialidentity> Testserialidentities      => this.GetTable<test_schema_Testserialidentity>();
		public ITable<test_schema_Testsamename>       Testsamenames             => this.GetTable<test_schema_Testsamename>();
		public ITable<Testsamename>                   Testsamenames1            => this.GetTable<Testsamename>();
		public ITable<TestMerge1>                     TestMerge1                => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>                     TestMerge2                => this.GetTable<TestMerge2>();
		public ITable<InventoryResource>              InventoryResources        => this.GetTable<InventoryResource>();
		public ITable<EmployeeTimeOffBalance>         EmployeeTimeOffBalances   => this.GetTable<EmployeeTimeOffBalance>();
		public ITable<Employee>                       Employees                 => this.GetTable<Employee>();
		public ITable<LeaveRequest>                   LeaveRequests             => this.GetTable<LeaveRequest>();
		public ITable<LeaveRequestDateEntry>          LeaveRequestDateEntries   => this.GetTable<LeaveRequestDateEntry>();
		public ITable<TagTestTable>                   TagTestTables             => this.GetTable<TagTestTable>();
		public ITable<InheritanceParent>              InheritanceParents        => this.GetTable<InheritanceParent>();
		public ITable<InheritanceChild>               InheritanceChildren       => this.GetTable<InheritanceChild>();
		public ITable<Entity>                         Entities                  => this.GetTable<Entity>();
		public ITable<Doctor>                         Doctors                   => this.GetTable<Doctor>();
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                         People                    => this.GetTable<Person>();
		public ITable<SequenceTest1>                  SequenceTest1             => this.GetTable<SequenceTest1>();
		public ITable<Patient>                        Patients                  => this.GetTable<Patient>();
		public ITable<Parent>                         Parents                   => this.GetTable<Parent>();
		public ITable<Child>                          Children                  => this.GetTable<Child>();
		public ITable<GrandChild>                     GrandChildren             => this.GetTable<GrandChild>();
		public ITable<LinqDataType>                   LinqDataTypes             => this.GetTable<LinqDataType>();
		public ITable<SequenceTest2>                  SequenceTest2             => this.GetTable<SequenceTest2>();
		public ITable<SequenceTest3>                  SequenceTest3             => this.GetTable<SequenceTest3>();
		public ITable<TestIdentity>                   TestIdentities            => this.GetTable<TestIdentity>();
		public ITable<SameName1>                      SameName1                 => this.GetTable<SameName1>();
		public ITable<SameName>                       SameNames                 => this.GetTable<SameName>();
		public ITable<SameName2>                      SameName2                 => this.GetTable<SameName2>();
		public ITable<CollatedTable>                  CollatedTables            => this.GetTable<CollatedTable>();
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                      Issue2023                 => this.GetTable<Issue2023>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDb>(ctx => ctx.GetParentById(default));

		[Sql.TableFunction("GetParentByID", Schema = "public")]
		public ITable<GetParentByIdResult> GetParentById(int? id)
		{
			return this.GetTable<GetParentByIdResult>(this, _getParentById, id);
		}

		public partial class GetParentByIdResult
		{
			[Column("ParentID", DataType = DataType.Int32, DbType = "integer", SkipOnInsert = true, SkipOnUpdate = true)] public int? ParentID { get; set; }
			[Column("Value1"  , DataType = DataType.Int32, DbType = "integer", SkipOnInsert = true, SkipOnUpdate = true)] public int? Value1   { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDb>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TestTableFunction", Schema = "public")]
		public ITable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, param1);
		}

		public partial class TestTableFunctionResult
		{
			[Column("param2", DataType = DataType.Int32, DbType = "integer", SkipOnInsert = true, SkipOnUpdate = true)] public int? param2 { get; set; }
		}
		#endregion

		#region TestTableFunction1
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDb>(ctx => ctx.TestTableFunction1(default, default));

		[Sql.TableFunction("TestTableFunction1", Schema = "public")]
		public ITable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.GetTable<TestTableFunction1Result>(this, _testTableFunction1, param1, param2);
		}

		public partial class TestTableFunction1Result
		{
			[Column("param3", DataType = DataType.Int32, DbType = "integer", SkipOnInsert = true, SkipOnUpdate = true)] public int? param3 { get; set; }
			[Column("param4", DataType = DataType.Int32, DbType = "integer", SkipOnInsert = true, SkipOnUpdate = true)] public int? param4 { get; set; }
		}
		#endregion

		#region TestTableFunctionSchema
		private static readonly MethodInfo _testTableFunctionSchema = MemberHelper.MethodOf<TestDataDb>(ctx => ctx.TestTableFunctionSchema());

		[Sql.TableFunction("TestTableFunctionSchema", Schema = "public")]
		public ITable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.GetTable<TestTableFunctionSchemaResult>(this, _testTableFunctionSchema);
		}

		public partial class TestTableFunctionSchemaResult
		{
			[Column("ID"                 , DataType = DataType.Int32         , DbType       = "integer"                        , SkipOnInsert = true, SkipOnUpdate = true)] public int?                        ID                  { get; set; }
			[Column("bigintDataType"     , DataType = DataType.Int64         , DbType       = "bigint"                         , SkipOnInsert = true, SkipOnUpdate = true)] public long?                       bigintDataType      { get; set; }
			[Column("numericDataType"    , DataType = DataType.Decimal       , DbType       = "numeric(0,0)"                   , SkipOnInsert = true, SkipOnUpdate = true)] public decimal?                    numericDataType     { get; set; }
			[Column("smallintDataType"   , DataType = DataType.Int16         , DbType       = "smallint"                       , SkipOnInsert = true, SkipOnUpdate = true)] public short?                      smallintDataType    { get; set; }
			[Column("intDataType"        , DataType = DataType.Int32         , DbType       = "integer"                        , SkipOnInsert = true, SkipOnUpdate = true)] public int?                        intDataType         { get; set; }
			[Column("moneyDataType"      , DataType = DataType.Money         , DbType       = "money"                          , SkipOnInsert = true, SkipOnUpdate = true)] public decimal?                    moneyDataType       { get; set; }
			[Column("doubleDataType"     , DataType = DataType.Double        , DbType       = "double precision"               , SkipOnInsert = true, SkipOnUpdate = true)] public double?                     doubleDataType      { get; set; }
			[Column("realDataType"       , DataType = DataType.Single        , DbType       = "real"                           , SkipOnInsert = true, SkipOnUpdate = true)] public float?                      realDataType        { get; set; }
			[Column("timestampDataType"  , DataType = DataType.DateTime2     , DbType       = "timestamp (0) without time zone", SkipOnInsert = true, SkipOnUpdate = true)] public DateTime?                   timestampDataType   { get; set; }
			[Column("timestampTZDataType", DataType = DataType.DateTimeOffset, DbType       = "timestamp (0) with time zone"   , SkipOnInsert = true, SkipOnUpdate = true)] public DateTimeOffset?             timestampTZDataType { get; set; }
			[Column("dateDataType"       , DataType = DataType.Date          , DbType       = "date"                           , SkipOnInsert = true, SkipOnUpdate = true)] public DateTime?                   dateDataType        { get; set; }
			[Column("timeDataType"       , DataType = DataType.Time          , DbType       = "time without time zone"         , SkipOnInsert = true, SkipOnUpdate = true)] public TimeSpan?                   timeDataType        { get; set; }
			[Column("timeTZDataType"     , DataType = DataType.Time          , DbType       = "time with time zone"            , SkipOnInsert = true, SkipOnUpdate = true)] public DateTimeOffset?             timeTZDataType      { get; set; }
			[Column("intervalDataType"   , DataType = DataType.Interval      , DbType       = "interval"                       , SkipOnInsert = true, SkipOnUpdate = true)] public TimeSpan?                   intervalDataType    { get; set; }
			[Column("intervalDataType2"  , DataType = DataType.Interval      , DbType       = "interval"                       , SkipOnInsert = true, SkipOnUpdate = true)] public TimeSpan?                   intervalDataType2   { get; set; }
			[Column("charDataType"       , DataType = DataType.NChar         , DbType       = "character(1)"                   , SkipOnInsert = true, SkipOnUpdate = true)] public char?                       charDataType        { get; set; }
			[Column("char20DataType"     , DataType = DataType.NChar         , DbType       = "character(20)"                  , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     char20DataType      { get; set; }
			[Column("varcharDataType"    , DataType = DataType.NVarChar      , DbType       = "character varying(20)"          , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     varcharDataType     { get; set; }
			[Column("textDataType"       , DataType = DataType.Text          , DbType       = "text"                           , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     textDataType        { get; set; }
			[Column("binaryDataType"     , DataType = DataType.Binary        , DbType       = "bytea"                          , SkipOnInsert = true, SkipOnUpdate = true)] public byte[]?                     binaryDataType      { get; set; }
			[Column("uuidDataType"       , DataType = DataType.Guid          , DbType       = "uuid"                           , SkipOnInsert = true, SkipOnUpdate = true)] public Guid?                       uuidDataType        { get; set; }
			[Column("bitDataType"        , DataType = DataType.BitArray      , DbType       = "bit(3)"                         , SkipOnInsert = true, SkipOnUpdate = true)] public BitArray?                   bitDataType         { get; set; }
			[Column("booleanDataType"    , DataType = DataType.Boolean       , DbType       = "boolean"                        , SkipOnInsert = true, SkipOnUpdate = true)] public bool?                       booleanDataType     { get; set; }
			[Column("colorDataType"      , DbType   = "public.color"         , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public string?                     colorDataType       { get; set; }
			[Column("pointDataType"      , DataType = DataType.Udt           , DbType       = "point"                          , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlPoint?                pointDataType       { get; set; }
			[Column("lsegDataType"       , DataType = DataType.Udt           , DbType       = "lseg"                           , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlLSeg?                 lsegDataType        { get; set; }
			[Column("boxDataType"        , DataType = DataType.Udt           , DbType       = "box"                            , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlBox?                  boxDataType         { get; set; }
			[Column("pathDataType"       , DataType = DataType.Udt           , DbType       = "path"                           , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlPath?                 pathDataType        { get; set; }
			[Column("polygonDataType"    , DataType = DataType.Udt           , DbType       = "polygon"                        , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlPolygon?              polygonDataType     { get; set; }
			[Column("circleDataType"     , DataType = DataType.Udt           , DbType       = "circle"                         , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlCircle?               circleDataType      { get; set; }
			[Column("lineDataType"       , DataType = DataType.Udt           , DbType       = "line"                           , SkipOnInsert = true, SkipOnUpdate = true)] public NpgsqlLine?                 lineDataType        { get; set; }
			[Column("inetDataType"       , DataType = DataType.Udt           , DbType       = "inet"                           , SkipOnInsert = true, SkipOnUpdate = true)] public IPAddress?                  inetDataType        { get; set; }
			[Column("cidrDataType"       , DataType = DataType.Udt           , DbType       = "cidr"                           , SkipOnInsert = true, SkipOnUpdate = true)] public ValueTuple<IPAddress, int>? cidrDataType        { get; set; }
			[Column("macaddrDataType"    , DataType = DataType.Udt           , DbType       = "macaddr"                        , SkipOnInsert = true, SkipOnUpdate = true)] public PhysicalAddress?            macaddrDataType     { get; set; }
			[Column("macaddr8DataType"   , DataType = DataType.Udt           , DbType       = "macaddr8"                       , SkipOnInsert = true, SkipOnUpdate = true)] public PhysicalAddress?            macaddr8DataType    { get; set; }
			[Column("jsonDataType"       , DataType = DataType.Json          , DbType       = "json"                           , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     jsonDataType        { get; set; }
			[Column("jsonbDataType"      , DataType = DataType.BinaryJson    , DbType       = "jsonb"                          , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     jsonbDataType       { get; set; }
			[Column("xmlDataType"        , DataType = DataType.Xml           , DbType       = "xml"                            , SkipOnInsert = true, SkipOnUpdate = true)] public string?                     xmlDataType         { get; set; }
			[Column("varBitDataType"     , DataType = DataType.BitArray      , DbType       = "bit varying(-1)"                , SkipOnInsert = true, SkipOnUpdate = true)] public BitArray?                   varBitDataType      { get; set; }
			[Column("strarray"           , DbType   = "text[]"               , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public string[]?                   strarray            { get; set; }
			[Column("intarray"           , DbType   = "integer[]"            , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public int[]?                      intarray            { get; set; }
			[Column("int2darray"         , DbType   = "integer[]"            , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public int[]?                      int2darray          { get; set; }
			[Column("longarray"          , DbType   = "bigint[]"             , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public long[]?                     longarray           { get; set; }
			[Column("intervalarray"      , DbType   = "interval[]"           , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public TimeSpan[]?                 intervalarray       { get; set; }
			[Column("doublearray"        , DbType   = "double precision[]"   , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public double[]?                   doublearray         { get; set; }
			[Column("numericarray"       , DbType   = "numeric[]"            , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public decimal[]?                  numericarray        { get; set; }
			[Column("decimalarray"       , DbType   = "numeric[]"            , SkipOnInsert = true                             , SkipOnUpdate = true                     )] public decimal[]?                  decimalarray        { get; set; }
		}
		#endregion
		#endregion

		public static MappingSchema ContextSchema { get; } = new MappingSchema();
	}

	[Table("AllTypes", Schema = "public")]
	public class AllType
	{
		[Column("ID"                 , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int                         Id                  { get; set; } // integer
		[Column("bigintDataType"                                                                                       )] public long?                       BigintDataType      { get; set; } // bigint
		[Column("numericDataType"                                                                                      )] public decimal?                    NumericDataType     { get; set; } // numeric
		[Column("smallintDataType"                                                                                     )] public short?                      SmallintDataType    { get; set; } // smallint
		[Column("intDataType"                                                                                          )] public int?                        IntDataType         { get; set; } // integer
		[Column("moneyDataType"                                                                                        )] public decimal?                    MoneyDataType       { get; set; } // money
		[Column("doubleDataType"                                                                                       )] public double?                     DoubleDataType      { get; set; } // double precision
		[Column("realDataType"                                                                                         )] public float?                      RealDataType        { get; set; } // real
		[Column("timestampDataType"                                                                                    )] public DateTime?                   TimestampDataType   { get; set; } // timestamp (6) without time zone
		[Column("timestampTZDataType"                                                                                  )] public DateTimeOffset?             TimestampTZDataType { get; set; } // timestamp (6) with time zone
		[Column("dateDataType"                                                                                         )] public DateTime?                   DateDataType        { get; set; } // date
		[Column("timeDataType"                                                                                         )] public TimeSpan?                   TimeDataType        { get; set; } // time without time zone
		[Column("timeTZDataType"                                                                                       )] public DateTimeOffset?             TimeTZDataType      { get; set; } // time with time zone
		[Column("intervalDataType"                                                                                     )] public TimeSpan?                   IntervalDataType    { get; set; } // interval
		[Column("intervalDataType2"                                                                                    )] public TimeSpan?                   IntervalDataType2   { get; set; } // interval
		[Column("charDataType"                                                                                         )] public char?                       CharDataType        { get; set; } // character(1)
		[Column("char20DataType"                                                                                       )] public string?                     Char20DataType      { get; set; } // character(20)
		[Column("varcharDataType"                                                                                      )] public string?                     VarcharDataType     { get; set; } // character varying(20)
		[Column("textDataType"                                                                                         )] public string?                     TextDataType        { get; set; } // text
		[Column("binaryDataType"                                                                                       )] public byte[]?                     BinaryDataType      { get; set; } // bytea
		[Column("uuidDataType"                                                                                         )] public Guid?                       UuidDataType        { get; set; } // uuid
		[Column("bitDataType"                                                                                          )] public BitArray?                   BitDataType         { get; set; } // bit(3)
		[Column("booleanDataType"                                                                                      )] public bool?                       BooleanDataType     { get; set; } // boolean
		[Column("colorDataType"                                                                                        )] public string?                     ColorDataType       { get; set; } // color
		[Column("pointDataType"                                                                                        )] public NpgsqlPoint?                PointDataType       { get; set; } // point
		[Column("lsegDataType"                                                                                         )] public NpgsqlLSeg?                 LsegDataType        { get; set; } // lseg
		[Column("boxDataType"                                                                                          )] public NpgsqlBox?                  BoxDataType         { get; set; } // box
		[Column("pathDataType"                                                                                         )] public NpgsqlPath?                 PathDataType        { get; set; } // path
		[Column("polygonDataType"                                                                                      )] public NpgsqlPolygon?              PolygonDataType     { get; set; } // polygon
		[Column("circleDataType"                                                                                       )] public NpgsqlCircle?               CircleDataType      { get; set; } // circle
		[Column("lineDataType"                                                                                         )] public NpgsqlLine?                 LineDataType        { get; set; } // line
		[Column("inetDataType"                                                                                         )] public IPAddress?                  InetDataType        { get; set; } // inet
		[Column("cidrDataType"                                                                                         )] public ValueTuple<IPAddress, int>? CidrDataType        { get; set; } // cidr
		[Column("macaddrDataType"                                                                                      )] public PhysicalAddress?            MacaddrDataType     { get; set; } // macaddr
		[Column("macaddr8DataType"                                                                                     )] public PhysicalAddress?            Macaddr8DataType    { get; set; } // macaddr8
		[Column("jsonDataType"                                                                                         )] public string?                     JsonDataType        { get; set; } // json
		[Column("jsonbDataType"                                                                                        )] public string?                     JsonbDataType       { get; set; } // jsonb
		[Column("xmlDataType"                                                                                          )] public string?                     XmlDataType         { get; set; } // xml
		[Column("varBitDataType"                                                                                       )] public BitArray?                   VarBitDataType      { get; set; } // bit varying
		[Column("strarray"                                                                                             )] public string[]?                   Strarray            { get; set; } // text[]
		[Column("intarray"                                                                                             )] public int[]?                      Intarray            { get; set; } // integer[]
		[Column("int2darray"                                                                                           )] public int[][]?                    Int2Darray          { get; set; } // integer[][]
		[Column("longarray"                                                                                            )] public long[]?                     Longarray           { get; set; } // bigint[]
		[Column("intervalarray"                                                                                        )] public TimeSpan[]?                 Intervalarray       { get; set; } // interval[]
		[Column("doublearray"                                                                                          )] public double[]?                   Doublearray         { get; set; } // double precision[]
		[Column("numericarray"                                                                                         )] public decimal[]?                  Numericarray        { get; set; } // numeric[]
		[Column("decimalarray"                                                                                         )] public decimal[]?                  Decimalarray        { get; set; } // numeric[]
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static SequenceCustomNamingTest? Find(this ITable<SequenceCustomNamingTest> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static test_schema_TestSchemaIdentity? Find(this ITable<test_schema_TestSchemaIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static test_schema_Testserialidentity? Find(this ITable<test_schema_Testserialidentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static test_schema_Testsamename? Find(this ITable<test_schema_Testsamename> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Testsamename? Find(this ITable<Testsamename> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static InventoryResource? Find(this ITable<InventoryResource> table, Guid id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static EmployeeTimeOffBalance? Find(this ITable<EmployeeTimeOffBalance> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Employee? Find(this ITable<Employee> table, int employeeId)
		{
			return table.FirstOrDefault(e => e.EmployeeId == employeeId);
		}

		public static LeaveRequest? Find(this ITable<LeaveRequest> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static LeaveRequestDateEntry? Find(this ITable<LeaveRequestDateEntry> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static SequenceTest1? Find(this ITable<SequenceTest1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static SequenceTest2? Find(this ITable<SequenceTest2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static SequenceTest3? Find(this ITable<SequenceTest3> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static SameName1? Find(this ITable<SameName1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static SameName? Find(this ITable<SameName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static SameName2? Find(this ITable<SameName2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}
		#endregion

		#region Scalar Functions
		#region AddIfNotExists
		[Sql.Function("\"public\".add_if_not_exists", ServerSideOnly = true)]
		public static object? AddIfNotExists(string? pName)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Addissue792Record
		[Sql.Function("\"public\".addissue792record", ServerSideOnly = true)]
		public static object? Addissue792Record()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Bool
		[Sql.Function("\"public\".bool", ServerSideOnly = true)]
		public static string? Bool(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Floatrange
		[Sql.Function("\"public\".floatrange", ServerSideOnly = true)]
		public static object? Floatrange(double? par3, double? par4)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Floatrange
		[Sql.Function("\"public\".floatrange", ServerSideOnly = true)]
		public static object? Floatrange(double? par6, double? par7, string? par8)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region FnTest
		[Sql.Function("\"SchemaName\".\"fnTest\"", ServerSideOnly = true)]
		public static string? FnTest(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Date
		[Sql.Function("\"public\".issue_1742_date", ServerSideOnly = true)]
		public static int? Issue1742Date(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Ts
		[Sql.Function("\"public\".issue_1742_ts", ServerSideOnly = true)]
		public static int? Issue1742Ts(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Tstz
		[Sql.Function("\"public\".issue_1742_tstz", ServerSideOnly = true)]
		public static int? Issue1742Tstz(DateTimeOffset? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Reverse
		[Sql.Function("\"public\".reverse", ServerSideOnly = true)]
		public static string? Reverse(string? par14)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunctionParameters
		[Sql.Function("\"public\".\"TestFunctionParameters\"", ServerSideOnly = true)]
		public static TestFunctionParametersResult? TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}

		public partial class TestFunctionParametersResult
		{
			public int? Param2 { get; set; }
			public int? Param3 { get; set; }
		}
		#endregion

		#region TestScalarFunction
		[Sql.Function("\"public\".\"TestScalarFunction\"", ServerSideOnly = true)]
		public static string? TestScalarFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestSingleOutParameterFunction
		[Sql.Function("\"public\".\"TestSingleOutParameterFunction\"", ServerSideOnly = true)]
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion

		#region Aggregate Functions
		#region TestAvg
		[Sql.Function("\"public\".test_avg", ServerSideOnly = true, IsAggregate = true, ArgIndices = new []{ 1 })]
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par16)
		{
			throw new InvalidOperationException("Association cannot be called outside of query");
		}
		#endregion
		#endregion
	}

	[Table("SequenceCustomNamingTest", Schema = "public")]
	public class SequenceCustomNamingTest
	{
		[Column("ID"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     Id    { get; set; } // integer
		[Column("Value"                                                                                  )] public string? Value { get; set; } // character varying(50)
	}

	[Table("TestSchemaIdentity", Schema = "test_schema")]
	public class test_schema_TestSchemaIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
	}

	[Table("testserialidentity", Schema = "test_schema")]
	public class test_schema_Testserialidentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
	}

	[Table("testsamename", Schema = "test_schema")]
	public class test_schema_Testsamename
	{
		[Column("id", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
	}

	[Table("testsamename", Schema = "public")]
	public class Testsamename
	{
		[Column("id", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
	}

	[Table("TestMerge1", Schema = "public")]
	public class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int             Id              { get; set; } // integer
		[Column("Field1"                              )] public int?            Field1          { get; set; } // integer
		[Column("Field2"                              )] public int?            Field2          { get; set; } // integer
		[Column("Field3"                              )] public int?            Field3          { get; set; } // integer
		[Column("Field4"                              )] public int?            Field4          { get; set; } // integer
		[Column("Field5"                              )] public int?            Field5          { get; set; } // integer
		[Column("FieldInt64"                          )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"                        )] public bool?           FieldBoolean    { get; set; } // boolean
		[Column("FieldString"                         )] public string?         FieldString     { get; set; } // character varying(20)
		[Column("FieldNString"                        )] public string?         FieldNString    { get; set; } // character varying(20)
		[Column("FieldChar"                           )] public char?           FieldChar       { get; set; } // character(1)
		[Column("FieldNChar"                          )] public char?           FieldNChar      { get; set; } // character(1)
		[Column("FieldFloat"                          )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?         FieldDouble     { get; set; } // double precision
		[Column("FieldDateTime"                       )] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column("FieldDateTime2"                      )] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column("FieldBinary"                         )] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column("FieldGuid"                           )] public Guid?           FieldGuid       { get; set; } // uuid
		[Column("FieldDecimal"                        )] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column("FieldDate"                           )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column("FieldEnumString"                     )] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column("FieldEnumNumber"                     )] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table("TestMerge2", Schema = "public")]
	public class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int             Id              { get; set; } // integer
		[Column("Field1"                              )] public int?            Field1          { get; set; } // integer
		[Column("Field2"                              )] public int?            Field2          { get; set; } // integer
		[Column("Field3"                              )] public int?            Field3          { get; set; } // integer
		[Column("Field4"                              )] public int?            Field4          { get; set; } // integer
		[Column("Field5"                              )] public int?            Field5          { get; set; } // integer
		[Column("FieldInt64"                          )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"                        )] public bool?           FieldBoolean    { get; set; } // boolean
		[Column("FieldString"                         )] public string?         FieldString     { get; set; } // character varying(20)
		[Column("FieldNString"                        )] public string?         FieldNString    { get; set; } // character varying(20)
		[Column("FieldChar"                           )] public char?           FieldChar       { get; set; } // character(1)
		[Column("FieldNChar"                          )] public char?           FieldNChar      { get; set; } // character(1)
		[Column("FieldFloat"                          )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?         FieldDouble     { get; set; } // double precision
		[Column("FieldDateTime"                       )] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column("FieldDateTime2"                      )] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column("FieldBinary"                         )] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column("FieldGuid"                           )] public Guid?           FieldGuid       { get; set; } // uuid
		[Column("FieldDecimal"                        )] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column("FieldDate"                           )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column("FieldEnumString"                     )] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column("FieldEnumNumber"                     )] public int?            FieldEnumNumber { get; set; } // integer
	}

	[Table("InventoryResource", Schema = "public")]
	public class InventoryResource
	{
		[Column("Id"    , IsPrimaryKey = true )] public Guid   Id     { get; set; } // uuid
		[Column("Status", CanBeNull    = false)] public string Status { get; set; } = null!; // character varying
	}

	[Table("EmployeeTimeOffBalance", Schema = "public")]
	public class EmployeeTimeOffBalance
	{
		[Column("Id"              , IsPrimaryKey = true)] public int Id               { get; set; } // integer
		[Column("TrackingTimeType"                     )] public int TrackingTimeType { get; set; } // integer
		[Column("EmployeeId"                           )] public int EmployeeId       { get; set; } // integer
	}

	[Table("Employee", Schema = "public")]
	public class Employee
	{
		[Column("EmployeeId", IsPrimaryKey = true)] public int EmployeeId { get; set; } // integer
	}

	[Table("LeaveRequest", Schema = "public")]
	public class LeaveRequest
	{
		[Column("Id"        , IsPrimaryKey = true)] public int Id         { get; set; } // integer
		[Column("EmployeeId"                     )] public int EmployeeId { get; set; } // integer
	}

	[Table("LeaveRequestDateEntry", Schema = "public")]
	public class LeaveRequestDateEntry
	{
		[Column("Id"            , IsPrimaryKey = true)] public int      Id             { get; set; } // integer
		[Column("EndHour"                            )] public decimal? EndHour        { get; set; } // numeric
		[Column("StartHour"                          )] public decimal? StartHour      { get; set; } // numeric
		[Column("LeaveRequestId"                     )] public int      LeaveRequestId { get; set; } // integer
	}

	[Table("TagTestTable", Schema = "public")]
	public class TagTestTable
	{
		[Column("ID"  )] public int     Id   { get; set; } // integer
		[Column("Name")] public string? Name { get; set; } // text
	}

	[Table("InheritanceParent", Schema = "public")]
	public class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // integer
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // integer
		[Column("Name"                                    )] public string? Name                { get; set; } // character varying(50)
	}

	[Table("InheritanceChild", Schema = "public")]
	public class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // integer
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // integer
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // integer
		[Column("Name"                                    )] public string? Name                { get; set; } // character varying(50)
	}

	[Table("entity", Schema = "public")]
	public class Entity
	{
		[Column("the_name", CanBeNull = false)] public string TheName { get; set; } = null!; // character varying(255)
	}

	[Table("Doctor", Schema = "public")]
	public class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // integer
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // character varying(50)

		#region Associations
		/// <summary>
		/// Doctor_PersonID_fkey
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(PostgreSQL.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	/// <summary>
	/// This is the Person table
	/// </summary>
	[Table("Person", Schema = "public")]
	public class Person
	{
		/// <summary>
		/// This is the Person.PersonID column
		/// </summary>
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // integer
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // character varying(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // character varying(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // character varying(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // character(1)

		#region Associations
		/// <summary>
		/// Doctor_PersonID_fkey backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(Doctor.PersonID))]
		public Doctor? DoctorPersonIDfkey { get; set; }

		/// <summary>
		/// Patient_PersonID_fkey backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(Patient.PersonID))]
		public Patient? PatientPersonIDfkey { get; set; }
		#endregion
	}

	[Table("SequenceTest1", Schema = "public")]
	public class SequenceTest1
	{
		[Column("ID"   , IsPrimaryKey = true)] public int     Id    { get; set; } // integer
		[Column("Value"                     )] public string? Value { get; set; } // character varying(50)
	}

	[Table("Patient", Schema = "public")]
	public class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // integer
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // character varying(256)

		#region Associations
		/// <summary>
		/// Patient_PersonID_fkey
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(PostgreSQL.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Parent", Schema = "public")]
	public class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // integer
		[Column("Value1"  )] public int? Value1   { get; set; } // integer
	}

	[Table("Child", Schema = "public")]
	public class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // integer
		[Column("ChildID" )] public int? ChildID  { get; set; } // integer
	}

	[Table("GrandChild", Schema = "public")]
	public class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // integer
		[Column("ChildID"     )] public int? ChildID      { get; set; } // integer
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // integer
	}

	[Table("LinqDataTypes", Schema = "public")]
	public class LinqDataType
	{
		[Column("ID"            )] public int?      Id             { get; set; } // integer
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // numeric(10,4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // timestamp (6) without time zone
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // timestamp (6) without time zone
		[Column("BoolValue"     )] public bool?     BoolValue      { get; set; } // boolean
		[Column("GuidValue"     )] public Guid?     GuidValue      { get; set; } // uuid
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // bytea
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // integer
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // bigint
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // character varying(50)
	}

	[Table("SequenceTest2", Schema = "public")]
	public class SequenceTest2
	{
		[Column("ID"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     Id    { get; set; } // integer
		[Column("Value"                                                                                  )] public string? Value { get; set; } // character varying(50)
	}

	[Table("SequenceTest3", Schema = "public")]
	public class SequenceTest3
	{
		[Column("ID"   , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     Id    { get; set; } // integer
		[Column("Value"                                                                                  )] public string? Value { get; set; } // character varying(50)
	}

	[Table("TestIdentity", Schema = "public")]
	public class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
	}

	[Table("same_name1", Schema = "public")]
	public class SameName1
	{
		[Column("id"       , IsPrimaryKey = true)] public int  Id       { get; set; } // integer
		[Column("same_name"                     )] public int? SameName { get; set; } // integer

		#region Associations
		/// <summary>
		/// same_name
		/// </summary>
		[Association(ThisKey = nameof(SameName), OtherKey = nameof(PostgreSQL.SameName.Id))]
		public SameName? Samename { get; set; }
		#endregion
	}

	[Table("same_name", Schema = "public")]
	public class SameName
	{
		[Column("id", IsPrimaryKey = true)] public int Id { get; set; } // integer

		#region Associations
		/// <summary>
		/// same_name backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(SameName1.SameName))]
		public IEnumerable<SameName1> Samenames { get; set; } = null!;

		/// <summary>
		/// same_name backreference
		/// </summary>
		[Association(ThisKey = nameof(Id), OtherKey = nameof(SameName2.SameName))]
		public IEnumerable<SameName2> Samenames1 { get; set; } = null!;
		#endregion
	}

	[Table("same_name2", Schema = "public")]
	public class SameName2
	{
		[Column("id"       , IsPrimaryKey = true)] public int  Id       { get; set; } // integer
		[Column("same_name"                     )] public int? SameName { get; set; } // integer

		#region Associations
		/// <summary>
		/// same_name
		/// </summary>
		[Association(ThisKey = nameof(SameName), OtherKey = nameof(PostgreSQL.SameName.Id))]
		public SameName? Samename { get; set; }
		#endregion
	}

	[Table("CollatedTable", Schema = "public")]
	public class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // integer
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // character varying(20)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // character varying(20)
	}

	/// <summary>
	/// This is the Issue2023 matview
	/// </summary>
	[Table("Issue2023", Schema = "public", IsView = true)]
	public class Issue2023
	{
		/// <summary>
		/// This is the Issue2023.PersonID column
		/// </summary>
		[Column("PersonID"  , SkipOnInsert = true, SkipOnUpdate = true)] public int?    PersonID   { get; set; } // integer
		[Column("FirstName" , SkipOnInsert = true, SkipOnUpdate = true)] public string? FirstName  { get; set; } // character varying(50)
		[Column("LastName"  , SkipOnInsert = true, SkipOnUpdate = true)] public string? LastName   { get; set; } // character varying(50)
		[Column("MiddleName", SkipOnInsert = true, SkipOnUpdate = true)] public string? MiddleName { get; set; } // character varying(50)
		[Column("Gender"    , SkipOnInsert = true, SkipOnUpdate = true)] public char?   Gender     { get; set; } // character(1)
	}
}
