// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.SapHana
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>                   AllTypes                   => this.GetTable<AllType>();
		public ITable<AllTypesGeo>               AllTypesGeos               => this.GetTable<AllTypesGeo>();
		public ITable<BulkInsertLowerCaseColumn> BulkInsertLowerCaseColumns => this.GetTable<BulkInsertLowerCaseColumn>();
		public ITable<BulkInsertUpperCaseColumn> BulkInsertUpperCaseColumns => this.GetTable<BulkInsertUpperCaseColumn>();
		public ITable<Child>                     Children                   => this.GetTable<Child>();
		public ITable<CollatedTable>             CollatedTables             => this.GetTable<CollatedTable>();
		public ITable<Doctor>                    Doctors                    => this.GetTable<Doctor>();
		public ITable<GrandChild>                GrandChildren              => this.GetTable<GrandChild>();
		public ITable<IndexTable>                IndexTables                => this.GetTable<IndexTable>();
		public ITable<IndexTable2>               IndexTable2                => this.GetTable<IndexTable2>();
		public ITable<InheritanceChild>          InheritanceChildren        => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>         InheritanceParents         => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>              LinqDataTypes              => this.GetTable<LinqDataType>();
		public ITable<Parent>                    Parents                    => this.GetTable<Parent>();
		public ITable<Patient>                   Patients                   => this.GetTable<Patient>();
		public ITable<Person>                    People                     => this.GetTable<Person>();
		public ITable<TestIdentity>              TestIdentities             => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>                TestMerge1                 => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>                TestMerge2                 => this.GetTable<TestMerge2>();
		public ITable<PrdGlobalEccCVMARA>        PrdGlobalEccCVMaras        => this.GetTable<PrdGlobalEccCVMARA>();
		public ITable<ParentChildView>           ParentChildViews           => this.GetTable<ParentChildView>();
		public ITable<ParentView>                ParentViews                => this.GetTable<ParentView>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		[Sql.TableFunction("GetParentByID", Schema = "TESTDB")]
		public ITable<GetParentByIdResult> GetParentById(int? id)
		{
			return this.GetTable<GetParentByIdResult>(this, _getParentById, id);
		}

		public partial class GetParentByIdResult
		{
			[Column("ParentID")] public int? ParentID { get; set; }
			[Column("Value1"  )] public int? Value1   { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Schema = "TESTDB")]
		public ITable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			[Column("O")] public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	[Table("AllTypes", Schema = "TESTDB")]
	public partial class AllType
	{
		[Column("ID"                  , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                   { get; set; } // INTEGER
		[Column("bigintDataType"                                                                                        )] public long?     BigintDataType       { get; set; } // BIGINT
		[Column("smallintDataType"                                                                                      )] public short?    SmallintDataType     { get; set; } // SMALLINT
		[Column("decimalDataType"                                                                                       )] public decimal?  DecimalDataType      { get; set; } // DECIMAL(34, 0)
		[Column("smalldecimalDataType"                                                                                  )] public decimal?  SmalldecimalDataType { get; set; } // SMALLDECIMAL(16, 0)
		[Column("intDataType"                                                                                           )] public int?      IntDataType          { get; set; } // INTEGER
		[Column("tinyintDataType"                                                                                       )] public byte?     TinyintDataType      { get; set; } // TINYINT
		[Column("floatDataType"                                                                                         )] public double?   FloatDataType        { get; set; } // DOUBLE
		[Column("realDataType"                                                                                          )] public float?    RealDataType         { get; set; } // REAL
		[Column("dateDataType"                                                                                          )] public DateTime? DateDataType         { get; set; } // DATE
		[Column("timeDataType"                                                                                          )] public TimeSpan? TimeDataType         { get; set; } // TIME
		[Column("seconddateDataType"                                                                                    )] public DateTime? SeconddateDataType   { get; set; } // SECONDDATE
		[Column("timestampDataType"                                                                                     )] public DateTime? TimestampDataType    { get; set; } // TIMESTAMP
		[Column("charDataType"                                                                                          )] public char?     CharDataType         { get; set; } // CHAR(1)
		[Column("char20DataType"                                                                                        )] public string?   Char20DataType       { get; set; } // CHAR(20)
		[Column("varcharDataType"                                                                                       )] public string?   VarcharDataType      { get; set; } // VARCHAR(20)
		[Column("textDataType"                                                                                          )] public string?   TextDataType         { get; set; } // TEXT
		[Column("shorttextDataType"                                                                                     )] public string?   ShorttextDataType    { get; set; } // SHORTTEXT
		[Column("ncharDataType"                                                                                         )] public char?     NcharDataType        { get; set; } // NCHAR(1)
		[Column("nchar20DataType"                                                                                       )] public string?   Nchar20DataType      { get; set; } // NCHAR(20)
		[Column("nvarcharDataType"                                                                                      )] public string?   NvarcharDataType     { get; set; } // NVARCHAR(20)
		[Column("alphanumDataType"                                                                                      )] public string?   AlphanumDataType     { get; set; } // ALPHANUM
		[Column("binaryDataType"                                                                                        )] public byte[]?   BinaryDataType       { get; set; } // BINARY(10)
		[Column("varbinaryDataType"                                                                                     )] public byte[]?   VarbinaryDataType    { get; set; } // VARBINARY(10)
		[Column("blobDataType"                                                                                          )] public byte[]?   BlobDataType         { get; set; } // BLOB
		[Column("clobDataType"                                                                                          )] public string?   ClobDataType         { get; set; } // CLOB
		[Column("nclobDataType"                                                                                         )] public string?   NclobDataType        { get; set; } // NCLOB
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static AllTypesGeo? Find(this ITable<AllTypesGeo> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static IndexTable? Find(this ITable<IndexTable> table, int pkField1, int pkField2)
		{
			return table.FirstOrDefault(e => e.PKField1 == pkField1 && e.PKField2 == pkField2);
		}

		public static IndexTable2? Find(this ITable<IndexTable2> table, int pkField1, int pkField2)
		{
			return table.FirstOrDefault(e => e.PKField1 == pkField1 && e.PKField2 == pkField2);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static PrdGlobalEccCVMARA? Find(this ITable<PrdGlobalEccCVMARA> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"TESTDB\".\"AddIssue792Record\"");
		}
		#endregion

		#region Dropconstraintfromtable
		public static int Dropconstraintfromtable(this TestDataDB dataConnection, string? tablename, string? constraintname, string? schemaname)
		{
			var parameters = new []
			{
				new DataParameter("TABLENAME", tablename, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("CONSTRAINTNAME", constraintname, DataType.VarChar)
				{
					Size = 100
				},
				new DataParameter("SCHEMANAME", schemaname, DataType.VarChar)
				{
					Size = 50
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"DROPCONSTRAINTFROMTABLE\"", parameters);
		}
		#endregion

		#region Dropexistingfunction
		public static int Dropexistingfunction(this TestDataDB dataConnection, string? functionname, string? schemaname)
		{
			var parameters = new []
			{
				new DataParameter("FUNCTIONNAME", functionname, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("SCHEMANAME", schemaname, DataType.VarChar)
				{
					Size = 50
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"DROPEXISTINGFUNCTION\"", parameters);
		}
		#endregion

		#region Dropexistingprocedure
		public static int Dropexistingprocedure(this TestDataDB dataConnection, string? procedurename, string? schemaname)
		{
			var parameters = new []
			{
				new DataParameter("PROCEDURENAME", procedurename, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("SCHEMANAME", schemaname, DataType.VarChar)
				{
					Size = 50
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"DROPEXISTINGPROCEDURE\"", parameters);
		}
		#endregion

		#region Dropexistingtable
		public static int Dropexistingtable(this TestDataDB dataConnection, string? tablename, string? schemaname)
		{
			var parameters = new []
			{
				new DataParameter("TABLENAME", tablename, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("SCHEMANAME", schemaname, DataType.VarChar)
				{
					Size = 50
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"DROPEXISTINGTABLE\"", parameters);
		}
		#endregion

		#region Dropexistingview
		public static int Dropexistingview(this TestDataDB dataConnection, string? viewname, string? schemaname)
		{
			var parameters = new []
			{
				new DataParameter("VIEWNAME", viewname, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("SCHEMANAME", schemaname, DataType.VarChar)
				{
					Size = 50
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"DROPEXISTINGVIEW\"", parameters);
		}
		#endregion

		#region DuplicateColumnNames
		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new DuplicateColumnNamesResult()
			{
				id = Converter.ChangeTypeTo<int?>(dataReader.GetValue(0), dataConnection.MappingSchema),
				id1 = Converter.ChangeTypeTo<string?>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "\"TESTDB\".\"DuplicateColumnNames\"");
		}

		public partial class DuplicateColumnNamesResult
		{
			public int?    id  { get; set; }
			public string? id1 { get; set; }
		}
		#endregion

		#region OutRefEnumTest
		public static int OutRefEnumTest(this TestDataDB dataConnection, string? str, out string? outputstr, ref string? inputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("STR", str, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("OUTPUTSTR", null, DataType.VarChar)
				{
					Direction = ParameterDirection.Output,
					Size = 50
				},
				new DataParameter("INPUTOUTPUTSTR", inputoutputstr, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputstr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			inputoutputstr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("\"TESTDB\".\"OutRefEnumTest\"", parameters);
		}
		#endregion

		#region OutRefTest
		public static int OutRefTest(this TestDataDB dataConnection, int? id, out int? outputid, ref int? inputoutputid, string? str, out string? outputstr, ref string? inputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
				{
					Size = 10
				},
				new DataParameter("OUTPUTID", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 10
				},
				new DataParameter("INPUTOUTPUTID", inputoutputid, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 10
				},
				new DataParameter("STR", str, DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("OUTPUTSTR", null, DataType.VarChar)
				{
					Direction = ParameterDirection.Output,
					Size = 50
				},
				new DataParameter("INPUTOUTPUTSTR", inputoutputstr, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputid = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			inputoutputid = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			outputstr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			inputoutputstr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("\"TESTDB\".\"OutRefTest\"", parameters);
		}
		#endregion

		#region PatientSelectAll
		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectAllResult>("\"TESTDB\".\"Patient_SelectAll\"");
		}

		public partial class PatientSelectAllResult
		{
			[Column("PersonID"  )] public int?    PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
			[Column("Diagnosis" )] public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstname, string? lastname)
		{
			var parameters = new []
			{
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("\"TESTDB\".\"Patient_SelectByName\"", parameters);
		}

		public partial class PatientSelectByNameResult
		{
			[Column("PersonID"  )] public int?    PersonID   { get; set; }
			[Column("FirstName" )] public string? FirstName  { get; set; }
			[Column("LastName"  )] public string? LastName   { get; set; }
			[Column("MiddleName")] public string? MiddleName { get; set; }
			[Column("Gender"    )] public string? Gender     { get; set; }
			[Column("Diagnosis" )] public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personid)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 10
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"Person_Delete\"", parameters);
		}
		#endregion

		#region PersonInsert
		public static int PersonInsert(this TestDataDB dataConnection, string? firstname, string? lastname, string? middlename, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"Person_Insert\"", parameters);
		}
		#endregion

		#region PersonInsertOutputParameter
		public static int PersonInsertOutputParameter(this TestDataDB dataConnection, string? firstname, string? lastname, string? middlename, char? gender, out int? personid)
		{
			var parameters = new []
			{
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("PERSONID", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 10
				}
			};
			personid = Converter.ChangeTypeTo<int?>(parameters[4].Value);
			return dataConnection.ExecuteProc("\"TESTDB\".\"Person_Insert_OutputParameter\"", parameters);
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PersonSelectAllResult>("\"TESTDB\".\"Person_SelectAll\"");
		}

		public partial class PersonSelectAllResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"    , CanBeNull = false)] public string  Gender     { get; set; } = null!;
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
				{
					Size = 10
				}
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("\"TESTDB\".\"Person_SelectByKey\"", parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"    , CanBeNull = false)] public string  Gender     { get; set; } = null!;
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstname, string? lastname)
		{
			var parameters = new []
			{
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("\"TESTDB\".\"Person_SelectByName\"", parameters);
		}

		public partial class PersonSelectByNameResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"    , CanBeNull = false)] public string  Gender     { get; set; } = null!;
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstname, string? lastname)
		{
			var parameters = new []
			{
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("\"TESTDB\".\"Person_SelectListByName\"", parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"    , CanBeNull = false)] public string  Gender     { get; set; } = null!;
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personid, string? firstname, string? lastname, string? middlename, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 10
				},
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("\"TESTDB\".\"Person_Update\"", parameters);
		}
		#endregion

		#region SelectImplicitColumn
		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<SelectImplicitColumnResult>("\"TESTDB\".\"SelectImplicitColumn\"");
		}

		public partial class SelectImplicitColumnResult
		{
			[Column("123")] public int? _123 { get; set; }
		}
		#endregion

		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 10
				}
			};
			return dataConnection.QueryProc(dataReader => new TestProcedureResult()
			{
				Column = Converter.ChangeTypeTo<int?>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "\"TESTDB\".\"TEST_PROCEDURE\"", parameters);
		}

		public partial class TestProcedureResult
		{
			public int? Column { get; set; }
		}
		#endregion

		#region Prd.Global.Ecc/CvMarAproc
		public static IEnumerable<PrdGlobalEccCvMarAprocResult> PrdGlobalEccCvMarAproc(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new PrdGlobalEccCvMarAprocResult()
			{
				id = Converter.ChangeTypeTo<int?>(dataReader.GetValue(0), dataConnection.MappingSchema),
				id1 = Converter.ChangeTypeTo<string?>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "\"TESTDB\".\"prd.global.ecc/CV_MARAproc\"");
		}

		public partial class PrdGlobalEccCvMarAprocResult
		{
			public int?    id  { get; set; }
			public string? id1 { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		[Sql.Function("\"TESTDB\".\"TEST_FUNCTION\"", ServerSideOnly = true)]
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}

	[Table("AllTypesGeo", Schema = "TESTDB")]
	public partial class AllTypesGeo
	{
		[Column("ID"                , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     ID                 { get; set; } // INTEGER
		[Column("dataType"                                                                                            )] public string? DataType           { get; set; } // VARCHAR(20)
		[Column("stgeometryDataType"                                                                                  )] public byte[]? StgeometryDataType { get; set; } // ST_GEOMETRY
	}

	[Table("BulkInsertLowerCaseColumns", Schema = "TESTDB")]
	public partial class BulkInsertLowerCaseColumn
	{
		[Column("ID"           )] public int?      ID            { get; set; } // INTEGER
		[Column("MoneyValue"   )] public decimal?  MoneyValue    { get; set; } // DECIMAL(10, 4)
		[Column("DateTimeValue")] public DateTime? DateTimeValue { get; set; } // TIMESTAMP
		[Column("BoolValue"    )] public byte?     BoolValue     { get; set; } // TINYINT
		[Column("GuidValue"    )] public string?   GuidValue     { get; set; } // VARCHAR(36)
		[Column("BinaryValue"  )] public byte[]?   BinaryValue   { get; set; } // VARBINARY(5000)
		[Column("SmallIntValue")] public short?    SmallIntValue { get; set; } // SMALLINT
		[Column("IntValue"     )] public int?      IntValue      { get; set; } // INTEGER
		[Column("BigIntValue"  )] public long?     BigIntValue   { get; set; } // BIGINT
	}

	[Table("BulkInsertUpperCaseColumns", Schema = "TESTDB")]
	public partial class BulkInsertUpperCaseColumn
	{
		[Column("ID"           )] public int?      ID            { get; set; } // INTEGER
		[Column("MONEYVALUE"   )] public decimal?  Moneyvalue    { get; set; } // DECIMAL(10, 4)
		[Column("DATETIMEVALUE")] public DateTime? Datetimevalue { get; set; } // TIMESTAMP
		[Column("BOOLVALUE"    )] public byte?     Boolvalue     { get; set; } // TINYINT
		[Column("GUIDVALUE"    )] public string?   Guidvalue     { get; set; } // VARCHAR(36)
		[Column("BINARYVALUE"  )] public byte[]?   Binaryvalue   { get; set; } // VARBINARY(5000)
		[Column("SMALLINTVALUE")] public short?    Smallintvalue { get; set; } // SMALLINT
		[Column("INTVALUE"     )] public int?      Intvalue      { get; set; } // INTEGER
		[Column("BIGINTVALUE"  )] public long?     Bigintvalue   { get; set; } // BIGINT
	}

	[Table("Child", Schema = "TESTDB")]
	public partial class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("ChildID" )] public int? ChildID  { get; set; } // INTEGER
	}

	[Table("CollatedTable", Schema = "TESTDB")]
	public partial class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // INTEGER
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // NVARCHAR(20)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // NVARCHAR(20)
	}

	[Table("Doctor", Schema = "TESTDB")]
	public partial class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // INTEGER
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // NVARCHAR(50)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(SapHana.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("GrandChild", Schema = "TESTDB")]
	public partial class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // INTEGER
		[Column("ChildID"     )] public int? ChildID      { get; set; } // INTEGER
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table("IndexTable", Schema = "TESTDB")]
	public partial class IndexTable
	{
		[Column("PKField1"   , IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int PKField1    { get; set; } // INTEGER
		[Column("PKField2"   , IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int PKField2    { get; set; } // INTEGER
		[Column("UniqueField"                                          )] public int UniqueField { get; set; } // INTEGER
		[Column("IndexField"                                           )] public int IndexField  { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		[Association(ThisKey = nameof(PKField1) + "," + nameof(PKField2), OtherKey = nameof(SapHana.IndexTable2.PKField1) + "," + nameof(SapHana.IndexTable2.PKField2))]
		public IndexTable2? IndexTable2 { get; set; }
		#endregion
	}

	[Table("IndexTable2", Schema = "TESTDB")]
	public partial class IndexTable2
	{
		[Column("PKField1", IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int PKField1 { get; set; } // INTEGER
		[Column("PKField2", IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int PKField2 { get; set; } // INTEGER

		#region Associations
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PKField1) + "," + nameof(PKField2), OtherKey = nameof(IndexTable.PKField1) + "," + nameof(IndexTable.PKField2))]
		public IndexTable Patient2IndexTable { get; set; } = null!;
		#endregion
	}

	[Table("InheritanceChild", Schema = "TESTDB")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // INTEGER
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // NVARCHAR(50)
	}

	[Table("InheritanceParent", Schema = "TESTDB")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // INTEGER
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // INTEGER
		[Column("Name"                                    )] public string? Name                { get; set; } // NVARCHAR(50)
	}

	[Table("LinqDataTypes", Schema = "TESTDB")]
	public partial class LinqDataType
	{
		[Column("ID"            )] public int?      ID             { get; set; } // INTEGER
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // DECIMAL(10, 4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column("BoolValue"     )] public byte?     BoolValue      { get; set; } // TINYINT
		[Column("GuidValue"     )] public string?   GuidValue      { get; set; } // VARCHAR(36)
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // VARBINARY(5000)
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // INTEGER
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // BIGINT
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // NVARCHAR(50)
	}

	[Table("Parent", Schema = "TESTDB")]
	public partial class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
	}

	[Table("Patient", Schema = "TESTDB")]
	public partial class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // INTEGER
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // NVARCHAR(256)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(SapHana.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person", Schema = "TESTDB")]
	public partial class Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // INTEGER
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // NVARCHAR(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // NVARCHAR(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // NVARCHAR(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // CHAR(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(SapHana.Doctor.PersonID))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(SapHana.Patient.PersonID))]
		public Patient? Patient { get; set; }
		#endregion
	}

	[Table("TestIdentity", Schema = "TESTDB")]
	public partial class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // INTEGER
	}

	[Table("TestMerge1", Schema = "TESTDB")]
	public partial class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public byte?     FieldBoolean    { get; set; } // TINYINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // NVARCHAR(20)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"                          )] public char?     FieldNChar      { get; set; } // NCHAR(1)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // CHAR(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("TestMerge2", Schema = "TESTDB")]
	public partial class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // INTEGER
		[Column("Field1"                              )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"                              )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"                              )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"                              )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"                              )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"                        )] public byte?     FieldBoolean    { get; set; } // TINYINT
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // NVARCHAR(20)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"                          )] public char?     FieldNChar      { get; set; } // NCHAR(1)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // CHAR(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // TIME
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}

	[Table("prd.global.ecc/CV_MARA", Schema = "TESTDB")]
	public partial class PrdGlobalEccCVMARA
	{
		[Column("Id", IsPrimaryKey = true)] public int Id { get; set; } // INTEGER
	}

	[Table("ParentChildView", Schema = "TESTDB", IsView = true)]
	public partial class ParentChildView
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
		[Column("ChildID" )] public int? ChildID  { get; set; } // INTEGER
	}

	[Table("ParentView", Schema = "TESTDB", IsView = true)]
	public partial class ParentView
	{
		[Column("ParentID")] public int? ParentID { get; set; } // INTEGER
		[Column("Value1"  )] public int? Value1   { get; set; } // INTEGER
	}
}
