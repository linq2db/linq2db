// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.T4.MariaDB
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<AllTypesNoYear>    AllTypesNoYears     => this.GetTable<AllTypesNoYear>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>      DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<FullTextIndexTest> FullTextIndexTests  => this.GetTable<FullTextIndexTest>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Issue1993>         Issue1993           => this.GetTable<Issue1993>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TestSameName>      TestSameNames       => this.GetTable<TestSameName>();
		/// <summary>
		/// VIEW
		/// </summary>
		public ITable<PersonView>        PersonViews         => this.GetTable<PersonView>();
	}

	[Table("AllTypes")]
	public partial class AllType
	{
		[Column("ID"                 , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                  { get; set; } // int(11)
		[Column("bigintDataType"                                                                                       )] public long?     BigintDataType      { get; set; } // bigint(20)
		[Column("smallintDataType"                                                                                     )] public short?    SmallintDataType    { get; set; } // smallint(6)
		[Column("tinyintDataType"                                                                                      )] public sbyte?    TinyintDataType     { get; set; } // tinyint(4)
		[Column("mediumintDataType"                                                                                    )] public int?      MediumintDataType   { get; set; } // mediumint(9)
		[Column("intDataType"                                                                                          )] public int?      IntDataType         { get; set; } // int(11)
		[Column("numericDataType"                                                                                      )] public decimal?  NumericDataType     { get; set; } // decimal(10,0)
		[Column("decimalDataType"                                                                                      )] public decimal?  DecimalDataType     { get; set; } // decimal(10,0)
		[Column("doubleDataType"                                                                                       )] public double?   DoubleDataType      { get; set; } // double
		[Column("floatDataType"                                                                                        )] public float?    FloatDataType       { get; set; } // float
		[Column("dateDataType"                                                                                         )] public DateTime? DateDataType        { get; set; } // date
		[Column("datetimeDataType"                                                                                     )] public DateTime? DatetimeDataType    { get; set; } // datetime
		[Column("timestampDataType"                                                                                    )] public DateTime? TimestampDataType   { get; set; } // timestamp
		[Column("timeDataType"                                                                                         )] public TimeSpan? TimeDataType        { get; set; } // time
		[Column("yearDataType"                                                                                         )] public int?      YearDataType        { get; set; } // year(4)
		[Column("year2DataType"                                                                                        )] public int?      Year2DataType       { get; set; } // year(4)
		[Column("year4DataType"                                                                                        )] public int?      Year4DataType       { get; set; } // year(4)
		[Column("charDataType"                                                                                         )] public char?     CharDataType        { get; set; } // char(1)
		[Column("char20DataType"                                                                                       )] public string?   Char20DataType      { get; set; } // char(20)
		[Column("varcharDataType"                                                                                      )] public string?   VarcharDataType     { get; set; } // varchar(20)
		[Column("textDataType"                                                                                         )] public string?   TextDataType        { get; set; } // text
		[Column("binaryDataType"                                                                                       )] public byte[]?   BinaryDataType      { get; set; } // binary(3)
		[Column("varbinaryDataType"                                                                                    )] public byte[]?   VarbinaryDataType   { get; set; } // varbinary(5)
		[Column("blobDataType"                                                                                         )] public byte[]?   BlobDataType        { get; set; } // blob
		[Column("bitDataType"                                                                                          )] public byte?     BitDataType         { get; set; } // bit(3)
		[Column("enumDataType"                                                                                         )] public string?   EnumDataType        { get; set; } // enum('Green','Red','Blue')
		[Column("setDataType"                                                                                          )] public string?   SetDataType         { get; set; } // set('one','two')
		[Column("intUnsignedDataType"                                                                                  )] public uint?     IntUnsignedDataType { get; set; } // int(10) unsigned
		[Column("boolDataType"                                                                                         )] public bool?     BoolDataType        { get; set; } // tinyint(1)
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static AllTypesNoYear? Find(this ITable<AllTypesNoYear> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, int dataTypeId)
		{
			return table.FirstOrDefault(e => e.DataTypeID == dataTypeId);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static FullTextIndexTest? Find(this ITable<FullTextIndexTest> table, uint id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Issue1993? Find(this ITable<Issue1993> table, uint id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonID == personId);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static TestSameName? Find(this ITable<TestSameName> table, int id)
		{
			return table.FirstOrDefault(e => e.ID == id);
		}
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("`AddIssue792Record`");
		}
		#endregion

		#region Issue2313Parameters
		public static IEnumerable<Issue2313ParametersResult> Issue2313Parameters(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, string? json, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, int? year, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					Size = 2147483647
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					Size = 2147483647
				},
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("Json", json, DataType.Text)
				{
					Size = 2147483647
				},
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Year", year, DataType.Int32),
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection)
			};
			return dataConnection.QueryProc<Issue2313ParametersResult>("`Issue2313Parameters`", parameters);
		}

		public partial class Issue2313ParametersResult
		{
			[Column("`VarCharDefault`"                                               )] public string?   VarCharDefault                                { get; set; }
			[Column("`VarChar1`"                                                     )] public char?     VarChar1                                      { get; set; }
			[Column("`Char255`"                                                      )] public string?   Char255                                       { get; set; }
			[Column("`Char1`"                                                        )] public char?     Char1                                         { get; set; }
			[Column("`VarBinary255`"                                                 )] public byte[]?   VarBinary255                                  { get; set; }
			[Column("`Binary255`"                                                    )] public byte[]?   Binary255                                     { get; set; }
			[Column("`TinyBlob`"                                                     )] public byte[]?   TinyBlob                                      { get; set; }
			[Column("`Blob`"                                                         )] public byte[]?   Blob                                          { get; set; }
			[Column("`MediumBlob`"                                                   )] public byte[]?   MediumBlob                                    { get; set; }
			[Column("`LongBlob`"                                                     )] public byte[]?   LongBlob                                      { get; set; }
			[Column("`TinyText`"                                                     )] public string?   TinyText                                      { get; set; }
			[Column("`Text`"                                                         )] public string?   Text                                          { get; set; }
			[Column("`MediumText`"                                                   )] public string?   MediumText                                    { get; set; }
			[Column("`LongText`"                                                     )] public string?   LongText                                      { get; set; }
			[Column("`Date`"                                                         )] public DateTime? Date                                          { get; set; }
			[Column("`DateTime`"                                                     )] public DateTime? DateTime                                      { get; set; }
			[Column("`TimeStamp`"                                                    )] public DateTime? TimeStamp                                     { get; set; }
			[Column("`Time`"                                                         )] public TimeSpan? Time                                          { get; set; }
			[Column("-- SKIP MySql55 BEGIN\n-- SKIP MySql55Connector BEGIN\n\t`Json`")] public string?   SKIPMySql55BEGINSKIPMySql55ConnectorBEGINJson { get; set; }
			[Column("-- SKIP MySql55Connector END\n-- SKIP MySql55 END\n\t`TinyInt`" )] public sbyte?    SKIPMySql55ConnectorENDSKIPMySql55ENDTinyInt  { get; set; }
			[Column("`TinyIntUnsigned`"                                              )] public byte?     TinyIntUnsigned                               { get; set; }
			[Column("`SmallInt`"                                                     )] public short?    SmallInt                                      { get; set; }
			[Column("`SmallIntUnsigned`"                                             )] public ushort?   SmallIntUnsigned                              { get; set; }
			[Column("`MediumInt`"                                                    )] public int?      MediumInt                                     { get; set; }
			[Column("`MediumIntUnsigned`"                                            )] public uint?     MediumIntUnsigned                             { get; set; }
			[Column("`Int`"                                                          )] public int?      Int                                           { get; set; }
			[Column("`IntUnsigned`"                                                  )] public uint?     IntUnsigned                                   { get; set; }
			[Column("`BigInt`"                                                       )] public long?     BigInt                                        { get; set; }
			[Column("`BigIntUnsigned`"                                               )] public ulong?    BigIntUnsigned                                { get; set; }
			[Column("`Decimal`"                                                      )] public decimal?  Decimal                                       { get; set; }
			[Column("`Float`"                                                        )] public float?    Float                                         { get; set; }
			[Column("`Double`"                                                       )] public double?   Double                                        { get; set; }
			[Column("`Boolean`"                                                      )] public bool?     Boolean                                       { get; set; }
			[Column("`Bit1`"                                                         )] public bool?     Bit1                                          { get; set; }
			[Column("`Bit8`"                                                         )] public bool?     Bit8                                          { get; set; }
			[Column("`Bit10`"                                                        )] public bool?     Bit10                                         { get; set; }
			[Column("`Bit16`"                                                        )] public bool?     Bit16                                         { get; set; }
			[Column("`Bit32`"                                                        )] public bool?     Bit32                                         { get; set; }
			[Column("`Bit64`"                                                        )] public bool?     Bit64                                         { get; set; }
			[Column("`Enum`"                                                         )] public string?   Enum                                          { get; set; }
			[Column("`Set`"                                                          )] public string?   Set                                           { get; set; }
			[Column("`Year`"                                                         )] public int?      Year                                          { get; set; }
			[Column("`Geometry`"                                                     )] public byte[]?   Geometry                                      { get; set; }
			[Column("`Point`"                                                        )] public byte[]?   Point                                         { get; set; }
			[Column("`LineString`"                                                   )] public byte[]?   LineString                                    { get; set; }
			[Column("`Polygon`"                                                      )] public byte[]?   Polygon                                       { get; set; }
			[Column("`MultiPoint`"                                                   )] public byte[]?   MultiPoint                                    { get; set; }
			[Column("`MultiLineString`"                                              )] public byte[]?   MultiLineString                               { get; set; }
			[Column("`MultiPolygon`"                                                 )] public byte[]?   MultiPolygon                                  { get; set; }
			[Column("`GeometryCollection`"                                           )] public byte[]?   GeometryCollection                            { get; set; }
		}
		#endregion

		#region Issue2313Results
		public static IEnumerable<Issue2313ResultsResult> Issue2313Results(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, string? json, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, int? year)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 4000
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					Size = 2147483647
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					Size = 2147483647
				},
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Json", json, DataType.Text)
				{
					Size = 2147483647
				},
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection),
				new DataParameter("Year", year, DataType.Int32)
			};
			return dataConnection.QueryProc<Issue2313ResultsResult>("`Issue2313Results`", parameters);
		}

		public partial class Issue2313ResultsResult
		{
			[Column("`VarCharDefault`"    )] public string?   VarCharDefault     { get; set; }
			[Column("`VarChar1`"          )] public char?     VarChar1           { get; set; }
			[Column("`Char255`"           )] public string?   Char255            { get; set; }
			[Column("`Char1`"             )] public char?     Char1              { get; set; }
			[Column("`VarBinary255`"      )] public byte[]?   VarBinary255       { get; set; }
			[Column("`Binary255`"         )] public byte[]?   Binary255          { get; set; }
			[Column("`TinyBlob`"          )] public byte[]?   TinyBlob           { get; set; }
			[Column("`Blob`"              )] public byte[]?   Blob               { get; set; }
			[Column("`MediumBlob`"        )] public byte[]?   MediumBlob         { get; set; }
			[Column("`LongBlob`"          )] public byte[]?   LongBlob           { get; set; }
			[Column("`TinyText`"          )] public string?   TinyText           { get; set; }
			[Column("`Text`"              )] public string?   Text               { get; set; }
			[Column("`MediumText`"        )] public string?   MediumText         { get; set; }
			[Column("`LongText`"          )] public string?   LongText           { get; set; }
			[Column("`Date`"              )] public DateTime? Date               { get; set; }
			[Column("`DateTime`"          )] public DateTime? DateTime           { get; set; }
			[Column("`TimeStamp`"         )] public DateTime? TimeStamp          { get; set; }
			[Column("`Time`"              )] public TimeSpan? Time               { get; set; }
			[Column("`TinyInt`"           )] public sbyte?    TinyInt            { get; set; }
			[Column("`TinyIntUnsigned`"   )] public byte?     TinyIntUnsigned    { get; set; }
			[Column("`SmallInt`"          )] public short?    SmallInt           { get; set; }
			[Column("`SmallIntUnsigned`"  )] public ushort?   SmallIntUnsigned   { get; set; }
			[Column("`MediumInt`"         )] public int?      MediumInt          { get; set; }
			[Column("`MediumIntUnsigned`" )] public uint?     MediumIntUnsigned  { get; set; }
			[Column("`Int`"               )] public int?      Int                { get; set; }
			[Column("`IntUnsigned`"       )] public uint?     IntUnsigned        { get; set; }
			[Column("`BigInt`"            )] public long?     BigInt             { get; set; }
			[Column("`BigIntUnsigned`"    )] public ulong?    BigIntUnsigned     { get; set; }
			[Column("`Decimal`"           )] public decimal?  Decimal            { get; set; }
			[Column("`Float`"             )] public float?    Float              { get; set; }
			[Column("`Double`"            )] public double?   Double             { get; set; }
			[Column("`Boolean`"           )] public bool?     Boolean            { get; set; }
			[Column("`Bit1`"              )] public bool?     Bit1               { get; set; }
			[Column("`Bit8`"              )] public bool?     Bit8               { get; set; }
			[Column("`Bit10`"             )] public bool?     Bit10              { get; set; }
			[Column("`Bit16`"             )] public bool?     Bit16              { get; set; }
			[Column("`Bit32`"             )] public bool?     Bit32              { get; set; }
			[Column("`Bit64`"             )] public bool?     Bit64              { get; set; }
			[Column("`Enum`"              )] public string?   Enum               { get; set; }
			[Column("`Set`"               )] public string?   Set                { get; set; }
			[Column("`Year`"              )] public int?      Year               { get; set; }
			[Column("`Json`"              )] public string?   Json               { get; set; }
			[Column("`Geometry`"          )] public byte[]?   Geometry           { get; set; }
			[Column("`Point`"             )] public byte[]?   Point              { get; set; }
			[Column("`LineString`"        )] public byte[]?   LineString         { get; set; }
			[Column("`Polygon`"           )] public byte[]?   Polygon            { get; set; }
			[Column("`MultiPoint`"        )] public byte[]?   MultiPoint         { get; set; }
			[Column("`MultiLineString`"   )] public byte[]?   MultiLineString    { get; set; }
			[Column("`MultiPolygon`"      )] public byte[]?   MultiPolygon       { get; set; }
			[Column("`GeometryCollection`")] public byte[]?   GeometryCollection { get; set; }
		}
		#endregion

		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("i", i, DataType.Int32)
			};
			return dataConnection.QueryProc<TestProcedureResult>("`TEST_PROCEDURE`", parameters);
		}

		public partial class TestProcedureResult
		{
			[Column("i + 3")] public long? i3 { get; set; }
		}
		#endregion

		#region TestOutputParametersWithoutTableProcedure
		public static int TestOutputParametersWithoutTableProcedure(this TestDataDB dataConnection, string? aInParam, out sbyte? aOutParam)
		{
			var parameters = new []
			{
				new DataParameter("aInParam", aInParam, DataType.VarChar)
				{
					Size = 256
				},
				new DataParameter("aOutParam", null, DataType.SByte)
				{
					Direction = ParameterDirection.Output
				}
			};
			aOutParam = Converter.ChangeTypeTo<sbyte?>(parameters[1].Value);
			return dataConnection.ExecuteProc("`TestOutputParametersWithoutTableProcedure`", parameters);
		}
		#endregion

		#region TestProcedure
		public static IEnumerable<TestProcedureResult1> TestProcedure(this TestDataDB dataConnection, int? param3, ref int? param2, out int? param1)
		{
			var parameters = new []
			{
				new DataParameter("param3", param3, DataType.Int32),
				new DataParameter("param2", param2, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("param1", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output
				}
			};
			param2 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			param1 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<TestProcedureResult1>("`TestProcedure`", parameters).ToList();
		}

		public partial class TestProcedureResult1
		{
			[Column("PersonID"                     )] public int     PersonID   { get; set; }
			[Column("FirstName" , CanBeNull = false)] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false)] public string  LastName   { get; set; } = null!;
			[Column("MiddleName"                   )] public string? MiddleName { get; set; }
			[Column("Gender"                       )] public char    Gender     { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		[Sql.Function("`TEST_FUNCTION`", ServerSideOnly = true)]
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunction
		[Sql.Function("`TestFunction`", ServerSideOnly = true)]
		public static string? TestFunction1(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}

	[Table("AllTypesNoYear")]
	public partial class AllTypesNoYear
	{
		[Column("ID"                 , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       ID                  { get; set; } // int(11)
		[Column("bigintDataType"                                                                                       )] public long?     BigintDataType      { get; set; } // bigint(20)
		[Column("smallintDataType"                                                                                     )] public short?    SmallintDataType    { get; set; } // smallint(6)
		[Column("tinyintDataType"                                                                                      )] public sbyte?    TinyintDataType     { get; set; } // tinyint(4)
		[Column("mediumintDataType"                                                                                    )] public int?      MediumintDataType   { get; set; } // mediumint(9)
		[Column("intDataType"                                                                                          )] public int?      IntDataType         { get; set; } // int(11)
		[Column("numericDataType"                                                                                      )] public decimal?  NumericDataType     { get; set; } // decimal(10,0)
		[Column("decimalDataType"                                                                                      )] public decimal?  DecimalDataType     { get; set; } // decimal(10,0)
		[Column("doubleDataType"                                                                                       )] public double?   DoubleDataType      { get; set; } // double
		[Column("floatDataType"                                                                                        )] public float?    FloatDataType       { get; set; } // float
		[Column("dateDataType"                                                                                         )] public DateTime? DateDataType        { get; set; } // date
		[Column("datetimeDataType"                                                                                     )] public DateTime? DatetimeDataType    { get; set; } // datetime
		[Column("timestampDataType"                                                                                    )] public DateTime? TimestampDataType   { get; set; } // timestamp
		[Column("timeDataType"                                                                                         )] public TimeSpan? TimeDataType        { get; set; } // time
		[Column("charDataType"                                                                                         )] public char?     CharDataType        { get; set; } // char(1)
		[Column("char20DataType"                                                                                       )] public string?   Char20DataType      { get; set; } // char(20)
		[Column("varcharDataType"                                                                                      )] public string?   VarcharDataType     { get; set; } // varchar(20)
		[Column("textDataType"                                                                                         )] public string?   TextDataType        { get; set; } // text
		[Column("binaryDataType"                                                                                       )] public byte[]?   BinaryDataType      { get; set; } // binary(3)
		[Column("varbinaryDataType"                                                                                    )] public byte[]?   VarbinaryDataType   { get; set; } // varbinary(5)
		[Column("blobDataType"                                                                                         )] public byte[]?   BlobDataType        { get; set; } // blob
		[Column("bitDataType"                                                                                          )] public byte?     BitDataType         { get; set; } // bit(3)
		[Column("enumDataType"                                                                                         )] public string?   EnumDataType        { get; set; } // enum('Green','Red','Blue')
		[Column("setDataType"                                                                                          )] public string?   SetDataType         { get; set; } // set('one','two')
		[Column("intUnsignedDataType"                                                                                  )] public uint?     IntUnsignedDataType { get; set; } // int(10) unsigned
		[Column("boolDataType"                                                                                         )] public bool?     BoolDataType        { get; set; } // tinyint(1)
	}

	[Table("Child")]
	public partial class Child
	{
		[Column("ParentID")] public int? ParentID { get; set; } // int(11)
		[Column("ChildID" )] public int? ChildID  { get; set; } // int(11)
	}

	[Table("CollatedTable")]
	public partial class CollatedTable
	{
		[Column("Id"                                )] public int    Id              { get; set; } // int(11)
		[Column("CaseSensitive"  , CanBeNull = false)] public string CaseSensitive   { get; set; } = null!; // varchar(20)
		[Column("CaseInsensitive", CanBeNull = false)] public string CaseInsensitive { get; set; } = null!; // varchar(20)
	}

	[Table("DataTypeTest")]
	public partial class DataTypeTest
	{
		[Column("DataTypeID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       DataTypeID { get; set; } // int(11)
		[Column("Binary_"                                                                                     )] public byte[]?   Binary     { get; set; } // binary(50)
		[Column("Boolean_"                                                                                    )] public bool      Boolean    { get; set; } // bit(1)
		[Column("Byte_"                                                                                       )] public sbyte?    Byte       { get; set; } // tinyint(4)
		[Column("Bytes_"                                                                                      )] public byte[]?   Bytes      { get; set; } // varbinary(50)
		[Column("Char_"                                                                                       )] public char?     Char       { get; set; } // char(1)
		[Column("DateTime_"                                                                                   )] public DateTime? DateTime   { get; set; } // datetime
		[Column("Decimal_"                                                                                    )] public decimal?  Decimal    { get; set; } // decimal(20,2)
		[Column("Double_"                                                                                     )] public float?    Double     { get; set; } // float
		[Column("Guid_"                                                                                       )] public byte[]?   Guid       { get; set; } // varbinary(50)
		[Column("Int16_"                                                                                      )] public short?    Int16      { get; set; } // smallint(6)
		[Column("Int32_"                                                                                      )] public int?      Int32      { get; set; } // int(11)
		[Column("Int64_"                                                                                      )] public long?     Int64      { get; set; } // bigint(20)
		[Column("Money_"                                                                                      )] public decimal?  Money      { get; set; } // decimal(20,4)
		[Column("SByte_"                                                                                      )] public sbyte?    SByte      { get; set; } // tinyint(4)
		[Column("Single_"                                                                                     )] public double?   Single     { get; set; } // double
		[Column("Stream_"                                                                                     )] public byte[]?   Stream     { get; set; } // varbinary(50)
		[Column("String_"                                                                                     )] public string?   String     { get; set; } // varchar(50)
		[Column("UInt16_"                                                                                     )] public short?    UInt16     { get; set; } // smallint(6)
		[Column("UInt32_"                                                                                     )] public int?      UInt32     { get; set; } // int(11)
		[Column("UInt64_"                                                                                     )] public long?     UInt64     { get; set; } // bigint(20)
		[Column("Xml_"                                                                                        )] public string?   Xml        { get; set; } // varchar(1000)
	}

	[Table("Doctor")]
	public partial class Doctor
	{
		[Column("PersonID", IsPrimaryKey = true )] public int    PersonID { get; set; } // int(11)
		[Column("Taxonomy", CanBeNull    = false)] public string Taxonomy { get; set; } = null!; // varchar(50)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(MariaDB.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("FullTextIndexTest")]
	public partial class FullTextIndexTest
	{
		[Column("id"        , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public uint    Id         { get; set; } // int(10) unsigned
		[Column("TestField1"                                                                                  )] public string? TestField1 { get; set; } // text
		[Column("TestField2"                                                                                  )] public string? TestField2 { get; set; } // text
	}

	[Table("GrandChild")]
	public partial class GrandChild
	{
		[Column("ParentID"    )] public int? ParentID     { get; set; } // int(11)
		[Column("ChildID"     )] public int? ChildID      { get; set; } // int(11)
		[Column("GrandChildID")] public int? GrandChildID { get; set; } // int(11)
	}

	[Table("InheritanceChild")]
	public partial class InheritanceChild
	{
		[Column("InheritanceChildId" , IsPrimaryKey = true)] public int     InheritanceChildId  { get; set; } // int(11)
		[Column("InheritanceParentId"                     )] public int     InheritanceParentId { get; set; } // int(11)
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int(11)
		[Column("Name"                                    )] public string? Name                { get; set; } // varchar(50)
	}

	[Table("InheritanceParent")]
	public partial class InheritanceParent
	{
		[Column("InheritanceParentId", IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // int(11)
		[Column("TypeDiscriminator"                       )] public int?    TypeDiscriminator   { get; set; } // int(11)
		[Column("Name"                                    )] public string? Name                { get; set; } // varchar(50)
	}

	[Table("Issue1993")]
	public partial class Issue1993
	{
		[Column("id"         , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public uint    Id          { get; set; } // int(10) unsigned
		[Column("description"                                                                                  )] public string? Description { get; set; } // varchar(100)
	}

	[Table("LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column("ID"            )] public int?      ID             { get; set; } // int(11)
		[Column("MoneyValue"    )] public decimal?  MoneyValue     { get; set; } // decimal(10,4)
		[Column("DateTimeValue" )] public DateTime? DateTimeValue  { get; set; } // datetime(3)
		[Column("DateTimeValue2")] public DateTime? DateTimeValue2 { get; set; } // datetime
		[Column("BoolValue"     )] public bool?     BoolValue      { get; set; } // tinyint(1)
		[Column("GuidValue"     )] public string?   GuidValue      { get; set; } // char(36)
		[Column("BinaryValue"   )] public byte[]?   BinaryValue    { get; set; } // varbinary(5000)
		[Column("SmallIntValue" )] public short?    SmallIntValue  { get; set; } // smallint(6)
		[Column("IntValue"      )] public int?      IntValue       { get; set; } // int(11)
		[Column("BigIntValue"   )] public long?     BigIntValue    { get; set; } // bigint(20)
		[Column("StringValue"   )] public string?   StringValue    { get; set; } // varchar(50)
	}

	[Table("Parent")]
	public partial class Parent
	{
		[Column("ParentID")] public int? ParentID { get; set; } // int(11)
		[Column("Value1"  )] public int? Value1   { get; set; } // int(11)
	}

	[Table("Patient")]
	public partial class Patient
	{
		[Column("PersonID" , IsPrimaryKey = true )] public int    PersonID  { get; set; } // int(11)
		[Column("Diagnosis", CanBeNull    = false)] public string Diagnosis { get; set; } = null!; // varchar(256)

		#region Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PersonID), OtherKey = nameof(MariaDB.Person.PersonID))]
		public Person Person { get; set; } = null!;
		#endregion
	}

	[Table("Person")]
	public partial class Person
	{
		[Column("PersonID"  , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     PersonID   { get; set; } // int(11)
		[Column("FirstName" , CanBeNull    = false                                                             )] public string  FirstName  { get; set; } = null!; // varchar(50)
		[Column("LastName"  , CanBeNull    = false                                                             )] public string  LastName   { get; set; } = null!; // varchar(50)
		[Column("MiddleName"                                                                                   )] public string? MiddleName { get; set; } // varchar(50)
		[Column("Gender"                                                                                       )] public char    Gender     { get; set; } // char(1)

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(MariaDB.Doctor.PersonID))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonID), OtherKey = nameof(MariaDB.Patient.PersonID))]
		public Patient? Patient { get; set; }
		#endregion
	}

	[Table("TestIdentity")]
	public partial class TestIdentity
	{
		[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int ID { get; set; } // int(11)
	}

	[Table("TestMerge1")]
	public partial class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // int(11)
		[Column("Field1"                              )] public int?      Field1          { get; set; } // int(11)
		[Column("Field2"                              )] public int?      Field2          { get; set; } // int(11)
		[Column("Field3"                              )] public int?      Field3          { get; set; } // int(11)
		[Column("Field4"                              )] public int?      Field4          { get; set; } // int(11)
		[Column("Field5"                              )] public int?      Field5          { get; set; } // int(11)
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // bigint(20)
		[Column("FieldBoolean"                        )] public bool?     FieldBoolean    { get; set; } // bit(1)
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // varchar(20)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public char?     FieldNChar      { get; set; } // char(1)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // float
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // double
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // char(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // decimal(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // time
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // int(11)
	}

	[Table("TestMerge2")]
	public partial class TestMerge2
	{
		[Column("Id"             , IsPrimaryKey = true)] public int       Id              { get; set; } // int(11)
		[Column("Field1"                              )] public int?      Field1          { get; set; } // int(11)
		[Column("Field2"                              )] public int?      Field2          { get; set; } // int(11)
		[Column("Field3"                              )] public int?      Field3          { get; set; } // int(11)
		[Column("Field4"                              )] public int?      Field4          { get; set; } // int(11)
		[Column("Field5"                              )] public int?      Field5          { get; set; } // int(11)
		[Column("FieldInt64"                          )] public long?     FieldInt64      { get; set; } // bigint(20)
		[Column("FieldBoolean"                        )] public bool?     FieldBoolean    { get; set; } // bit(1)
		[Column("FieldString"                         )] public string?   FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"                        )] public string?   FieldNString    { get; set; } // varchar(20)
		[Column("FieldChar"                           )] public char?     FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"                          )] public char?     FieldNChar      { get; set; } // char(1)
		[Column("FieldFloat"                          )] public float?    FieldFloat      { get; set; } // float
		[Column("FieldDouble"                         )] public double?   FieldDouble     { get; set; } // double
		[Column("FieldDateTime"                       )] public DateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"                         )] public byte[]?   FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"                           )] public string?   FieldGuid       { get; set; } // char(36)
		[Column("FieldDecimal"                        )] public decimal?  FieldDecimal    { get; set; } // decimal(24,10)
		[Column("FieldDate"                           )] public DateTime? FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan? FieldTime       { get; set; } // time
		[Column("FieldEnumString"                     )] public string?   FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber"                     )] public int?      FieldEnumNumber { get; set; } // int(11)
	}

	[Table("TestSameName")]
	public partial class TestSameName
	{
		[Column("ID", IsPrimaryKey = true)] public int ID { get; set; } // int(11)
	}

	/// <summary>
	/// VIEW
	/// </summary>
	[Table("PersonView", IsView = true)]
	public partial class PersonView
	{
		[Column("ID")] public int ID { get; set; } // int(11)
	}
}
