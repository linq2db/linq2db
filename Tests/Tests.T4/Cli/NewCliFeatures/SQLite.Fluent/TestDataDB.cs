// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NewCliFeatures.FluentSQLite
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
				.SpecificTypeHelper<AllType>(default(AllType))
				.AllTypesHelper<AllType>(default(AllType))
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.TinyintDataType)
						.HasAttribute(new ColumnAttribute("tinyintDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DatetimeDataType)
						.HasAttribute(new ColumnAttribute("datetimeDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.NtextDataType)
						.HasAttribute(new ColumnAttribute("ntextDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.VarbinaryDataType)
						.HasAttribute(new ColumnAttribute("varbinaryDataType"))
					.Member(e => e.ImageDataType)
						.HasAttribute(new ColumnAttribute("imageDataType"))
					.Member(e => e.UniqueidentifierDataType)
						.HasAttribute(new ColumnAttribute("uniqueidentifierDataType"))
					.Member(e => e.ObjectDataType)
						.HasAttribute(new ColumnAttribute("objectDataType"));

			builder
				.Entity<Child>()
				.SpecificTypeHelper<Child>(default(Child))
				.AllTypesHelper<Child>(default(Child))
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<Doctor>()
				.SpecificTypeHelper<Doctor>(default(Doctor))
				.AllTypesHelper<Doctor>(default(Doctor))
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.FkDoctor00)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Dual>()
				.SpecificTypeHelper<Dual>(default(Dual))
				.AllTypesHelper<Dual>(default(Dual))
					.HasAttribute(new TableAttribute("Dual"))
					.Member(e => e.Dummy)
						.HasAttribute(new ColumnAttribute("Dummy"));

			builder
				.Entity<FkTestPosition>()
				.SpecificTypeHelper<FkTestPosition>(default(FkTestPosition))
				.AllTypesHelper<FkTestPosition>(default(FkTestPosition))
					.HasAttribute(new TableAttribute("FKTestPosition"))
					.Member(e => e.Company)
						.HasAttribute(new ColumnAttribute("Company")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.Department)
						.HasAttribute(new ColumnAttribute("Department")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.PositionId)
						.HasAttribute(new ColumnAttribute("PositionID")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 2
						})
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name")
						{
							CanBeNull = false
						});

			builder
				.Entity<ForeignKeyTable>()
				.SpecificTypeHelper<ForeignKeyTable>(default(ForeignKeyTable))
				.AllTypesHelper<ForeignKeyTable>(default(ForeignKeyTable))
					.HasAttribute(new TableAttribute("ForeignKeyTable"))
					.Member(e => e.PrimaryKeyTableId)
						.HasAttribute(new ColumnAttribute("PrimaryKeyTableID"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name")
						{
							CanBeNull = false
						})
					.Member(e => e.PrimaryKeyTable)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(ForeignKeyTable.PrimaryKeyTableId),
							OtherKey = nameof(PrimaryKeyTable.Id)
						});

			builder
				.Entity<GrandChild>()
				.SpecificTypeHelper<GrandChild>(default(GrandChild))
				.AllTypesHelper<GrandChild>(default(GrandChild))
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
				.SpecificTypeHelper<InheritanceChild>(default(InheritanceChild))
				.AllTypesHelper<InheritanceChild>(default(InheritanceChild))
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
				.SpecificTypeHelper<InheritanceParent>(default(InheritanceParent))
				.AllTypesHelper<InheritanceParent>(default(InheritanceParent))
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<LinqDataType>()
				.SpecificTypeHelper<LinqDataType>(default(LinqDataType))
				.AllTypesHelper<LinqDataType>(default(LinqDataType))
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Parent>()
				.SpecificTypeHelper<Parent>(default(Parent))
				.AllTypesHelper<Parent>(default(Parent))
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
				.SpecificTypeHelper<Patient>(default(Patient))
				.AllTypesHelper<Patient>(default(Patient))
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.FkPatient00)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
				.SpecificTypeHelper<Person>(default(Person))
				.AllTypesHelper<Person>(default(Person))
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<PrimaryKeyTable>()
				.SpecificTypeHelper<PrimaryKeyTable>(default(PrimaryKeyTable))
				.AllTypesHelper<PrimaryKeyTable>(default(PrimaryKeyTable))
					.HasAttribute(new TableAttribute("PrimaryKeyTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name")
						{
							CanBeNull = false
						})
					.Member(e => e.ForeignKeyTables)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(PrimaryKeyTable.Id),
							OtherKey = nameof(ForeignKeyTable.PrimaryKeyTableId)
						});

			builder
				.Entity<TestT4Casing>()
				.SpecificTypeHelper<TestT4Casing>(default(TestT4Casing))
				.AllTypesHelper<TestT4Casing>(default(TestT4Casing))
					.HasAttribute(new TableAttribute("TEST_T4_CASING"))
					.Member(e => e.AllCaps)
						.HasAttribute(new ColumnAttribute("ALL_CAPS"))
					.Member(e => e.Caps)
						.HasAttribute(new ColumnAttribute("CAPS"))
					.Member(e => e.PascalCase)
						.HasAttribute(new ColumnAttribute("PascalCase"))
					.Member(e => e.PascalSnakeCase)
						.HasAttribute(new ColumnAttribute("Pascal_Snake_Case"))
					.Member(e => e.PascalCaseSnakeCase)
						.HasAttribute(new ColumnAttribute("PascalCase_Snake_Case"))
					.Member(e => e.SnakeCase)
						.HasAttribute(new ColumnAttribute("snake_case"))
					.Member(e => e.CamelCase)
						.HasAttribute(new ColumnAttribute("camelCase"));

			builder
				.Entity<TestIdentity>()
				.SpecificTypeHelper<TestIdentity>(default(TestIdentity))
				.AllTypesHelper<TestIdentity>(default(TestIdentity))
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestMerge1>()
				.SpecificTypeHelper<TestMerge1>(default(TestMerge1))
				.AllTypesHelper<TestMerge1>(default(TestMerge1))
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
				.SpecificTypeHelper<TestMerge2>(default(TestMerge2))
				.AllTypesHelper<TestMerge2>(default(TestMerge2))
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<AllTypesView>()
				.SpecificTypeHelper<AllTypesView>(default(AllTypesView))
				.AllTypesHelper<AllTypesView>(default(AllTypesView))
					.HasAttribute(new TableAttribute("AllTypesView")
					{
						IsView = true
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.TinyintDataType)
						.HasAttribute(new ColumnAttribute("tinyintDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DatetimeDataType)
						.HasAttribute(new ColumnAttribute("datetimeDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.NtextDataType)
						.HasAttribute(new ColumnAttribute("ntextDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.VarbinaryDataType)
						.HasAttribute(new ColumnAttribute("varbinaryDataType"))
					.Member(e => e.ImageDataType)
						.HasAttribute(new ColumnAttribute("imageDataType"))
					.Member(e => e.UniqueidentifierDataType)
						.HasAttribute(new ColumnAttribute("uniqueidentifierDataType"))
					.Member(e => e.ObjectDataType)
						.HasAttribute(new ColumnAttribute("objectDataType"))
					.Member(e => e.Number)
						.HasAttribute(new ColumnAttribute("Number"));

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Dual>              Duals               => this.GetTable<Dual>();
		public ITable<FkTestPosition>    FkTestPositions     => this.GetTable<FkTestPosition>();
		public ITable<ForeignKeyTable>   ForeignKeyTables    => this.GetTable<ForeignKeyTable>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<PrimaryKeyTable>   PrimaryKeyTables    => this.GetTable<PrimaryKeyTable>();
		public ITable<TestT4Casing>      TestT4Casings       => this.GetTable<TestT4Casing>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<AllTypesView>      AllTypesViews       => this.GetTable<AllTypesView>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Doctor? Find(this ITable<Doctor> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static FkTestPosition? Find(this ITable<FkTestPosition> table, long company, long department, long positionId)
		{
			return table.FirstOrDefault(e => e.Company == company && e.Department == department && e.PositionId == positionId);
		}

		public static Task<FkTestPosition?> FindAsync(this ITable<FkTestPosition> table, long company, long department, long positionId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Company == company && e.Department == department && e.PositionId == positionId, cancellationToken);
		}

		public static Patient? Find(this ITable<Patient> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static Person? Find(this ITable<Person> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static PrimaryKeyTable? Find(this ITable<PrimaryKeyTable> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PrimaryKeyTable?> FindAsync(this ITable<PrimaryKeyTable> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
