// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.DB2
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<Alltype>()
					.HasAttribute(new TableAttribute("ALLTYPES"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Bigintdatatype)
						.HasAttribute(new ColumnAttribute("BIGINTDATATYPE"))
					.Member(e => e.Intdatatype)
						.HasAttribute(new ColumnAttribute("INTDATATYPE"))
					.Member(e => e.Smallintdatatype)
						.HasAttribute(new ColumnAttribute("SMALLINTDATATYPE"))
					.Member(e => e.Decimaldatatype)
						.HasAttribute(new ColumnAttribute("DECIMALDATATYPE"))
					.Member(e => e.Decfloatdatatype)
						.HasAttribute(new ColumnAttribute("DECFLOATDATATYPE"))
					.Member(e => e.Realdatatype)
						.HasAttribute(new ColumnAttribute("REALDATATYPE"))
					.Member(e => e.Doubledatatype)
						.HasAttribute(new ColumnAttribute("DOUBLEDATATYPE"))
					.Member(e => e.Chardatatype)
						.HasAttribute(new ColumnAttribute("CHARDATATYPE"))
					.Member(e => e.Char20Datatype)
						.HasAttribute(new ColumnAttribute("CHAR20DATATYPE"))
					.Member(e => e.Varchardatatype)
						.HasAttribute(new ColumnAttribute("VARCHARDATATYPE"))
					.Member(e => e.Clobdatatype)
						.HasAttribute(new ColumnAttribute("CLOBDATATYPE"))
					.Member(e => e.Dbclobdatatype)
						.HasAttribute(new ColumnAttribute("DBCLOBDATATYPE"))
					.Member(e => e.Binarydatatype)
						.HasAttribute(new ColumnAttribute("BINARYDATATYPE"))
					.Member(e => e.Varbinarydatatype)
						.HasAttribute(new ColumnAttribute("VARBINARYDATATYPE"))
					.Member(e => e.Blobdatatype)
						.HasAttribute(new ColumnAttribute("BLOBDATATYPE"))
					.Member(e => e.Graphicdatatype)
						.HasAttribute(new ColumnAttribute("GRAPHICDATATYPE"))
					.Member(e => e.Datedatatype)
						.HasAttribute(new ColumnAttribute("DATEDATATYPE"))
					.Member(e => e.Timedatatype)
						.HasAttribute(new ColumnAttribute("TIMEDATATYPE"))
					.Member(e => e.Timestampdatatype)
						.HasAttribute(new ColumnAttribute("TIMESTAMPDATATYPE"))
					.Member(e => e.Xmldatatype)
						.HasAttribute(new ColumnAttribute("XMLDATATYPE"));

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<CollatedTable>()
					.HasAttribute(new TableAttribute("CollatedTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.CaseSensitive)
						.HasAttribute(new ColumnAttribute("CaseSensitive")
						{
							CanBeNull = false
						})
					.Member(e => e.CaseInsensitive)
						.HasAttribute(new ColumnAttribute("CaseInsensitive")
						{
							CanBeNull = false
						});

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.Person)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<KeepIdentityTest>()
					.HasAttribute(new TableAttribute("KeepIdentityTest"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value"));

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Mastertable>()
					.HasAttribute(new TableAttribute("MASTERTABLE"))
					.Member(e => e.Id1)
						.HasAttribute(new ColumnAttribute("ID1")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.Id2)
						.HasAttribute(new ColumnAttribute("ID2")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.Slavetables)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Mastertable.Id1) + "," + nameof(Mastertable.Id2),
							OtherKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1)
						});

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.Person)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<Slavetable>()
					.HasAttribute(new TableAttribute("SLAVETABLE"))
					.Member(e => e.Id1)
						.HasAttribute(new ColumnAttribute("ID1"))
					.Member(e => e.Id222222222222222222222222)
						.HasAttribute(new ColumnAttribute("ID 2222222222222222222222  22"))
					.Member(e => e.Id2222222222222222)
						.HasAttribute(new ColumnAttribute("ID 2222222222222222"))
					.Member(e => e.Mastertable)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1),
							OtherKey = nameof(Mastertable.Id1) + "," + nameof(Mastertable.Id2)
						});

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<Personview>()
					.HasAttribute(new TableAttribute("PERSONVIEW")
					{
						IsView = true
					})
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestModule1TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestModule2TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.Person(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.Person(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.HasAttribute<Slavetable>(e => ExtensionMethods.Mastertable(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1),
				OtherKey = nameof(Mastertable.Id1) + "," + nameof(Mastertable.Id2)
			});

			builder.HasAttribute<Mastertable>(e => ExtensionMethods.Slavetables(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Mastertable.Id1) + "," + nameof(Mastertable.Id2),
				OtherKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1)
			});

			builder.HasAttribute(() => ExtensionMethods.TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestModule1TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_MODULE1.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestModule2TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_MODULE2.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestModule1TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_MODULE1"
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestModule2TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_MODULE2"
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Alltype>           Alltypes            => this.GetTable<Alltype>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Mastertable>       Mastertables        => this.GetTable<Mastertable>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<Slavetable>        Slavetables         => this.GetTable<Slavetable>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<Personview>        Personviews         => this.GetTable<Personview>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestModule1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule1TestTableFunction(default));

		public IQueryable<TestModule1TestTableFunctionResult> TestModule1TestTableFunction(int? i)
		{
			return this.GetTable<TestModule1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestModule1TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestModule2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule2TestTableFunction(default));

		public IQueryable<TestModule2TestTableFunctionResult> TestModule2TestTableFunction(int? i)
		{
			return this.GetTable<TestModule2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestModule2TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Slavetable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		public static Mastertable Mastertable(this Slavetable obj, IDataContext db)
		{
			return db.GetTable<Mastertable>().First(t => obj.Id222222222222222222222222 == t.Id1 && obj.Id1 == t.Id2);
		}
		#endregion

		#region Mastertable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE backreference
		/// </summary>
		public static IQueryable<Slavetable> Slavetables(this Mastertable obj, IDataContext db)
		{
			return db.GetTable<Slavetable>().Where(t => t.Id222222222222222222222222 == obj.Id1 && t.Id1 == obj.Id2);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ADDISSUE792RECORD");
		}

		public static Task<int> Addissue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ADDISSUE792RECORD", cancellationToken);
		}
		#endregion

		#region PersonSelectbykey
		public static int PersonSelectbykey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProc("PERSON_SELECTBYKEY", parameters);
		}

		public static Task<int> PersonSelectbykeyAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("PERSON_SELECTBYKEY", cancellationToken, parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule1TestProcedure
		public static int TestModule1TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_MODULE1.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule1TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE1.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule2TestProcedure
		public static int TestModule2TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_MODULE2.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule2TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE2.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule1TestFunction
		public static int? TestModule1TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule2TestFunction
		public static int? TestModule2TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
