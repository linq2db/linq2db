// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.SqlServer
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.SmallmoneyDataType)
						.HasAttribute(new ColumnAttribute("smallmoneyDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.TinyintDataType)
						.HasAttribute(new ColumnAttribute("tinyintDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DatetimeDataType)
						.HasAttribute(new ColumnAttribute("datetimeDataType"))
					.Member(e => e.SmalldatetimeDataType)
						.HasAttribute(new ColumnAttribute("smalldatetimeDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.NtextDataType)
						.HasAttribute(new ColumnAttribute("ntextDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.VarbinaryDataType)
						.HasAttribute(new ColumnAttribute("varbinaryDataType"))
					.Member(e => e.ImageDataType)
						.HasAttribute(new ColumnAttribute("imageDataType"))
					.Member(e => e.TimestampDataType)
						.HasAttribute(new ColumnAttribute("timestampDataType")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.UniqueidentifierDataType)
						.HasAttribute(new ColumnAttribute("uniqueidentifierDataType"))
					.Member(e => e.SqlVariantDataType)
						.HasAttribute(new ColumnAttribute("sql_variantDataType"))
					.Member(e => e.NvarcharMaxDataType)
						.HasAttribute(new ColumnAttribute("nvarchar_max_DataType"))
					.Member(e => e.VarcharMaxDataType)
						.HasAttribute(new ColumnAttribute("varchar_max_DataType"))
					.Member(e => e.VarbinaryMaxDataType)
						.HasAttribute(new ColumnAttribute("varbinary_max_DataType"))
					.Member(e => e.XmlDataType)
						.HasAttribute(new ColumnAttribute("xmlDataType"))
					.Member(e => e.Datetime2DataType)
						.HasAttribute(new ColumnAttribute("datetime2DataType"))
					.Member(e => e.DatetimeoffsetDataType)
						.HasAttribute(new ColumnAttribute("datetimeoffsetDataType"))
					.Member(e => e.Datetimeoffset0DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset0DataType"))
					.Member(e => e.Datetimeoffset1DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset1DataType"))
					.Member(e => e.Datetimeoffset2DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset2DataType"))
					.Member(e => e.Datetimeoffset3DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset3DataType"))
					.Member(e => e.Datetimeoffset4DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset4DataType"))
					.Member(e => e.Datetimeoffset5DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset5DataType"))
					.Member(e => e.Datetimeoffset6DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset6DataType"))
					.Member(e => e.Datetimeoffset7DataType)
						.HasAttribute(new ColumnAttribute("datetimeoffset7DataType"))
					.Member(e => e.DateDataType)
						.HasAttribute(new ColumnAttribute("dateDataType"))
					.Member(e => e.TimeDataType)
						.HasAttribute(new ColumnAttribute("timeDataType"));

			builder
				.Entity<AllTypes2>()
					.HasAttribute(new TableAttribute("AllTypes2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.DateDataType)
						.HasAttribute(new ColumnAttribute("dateDataType"))
					.Member(e => e.DatetimeoffsetDataType)
						.HasAttribute(new ColumnAttribute("datetimeoffsetDataType"))
					.Member(e => e.Datetime2DataType)
						.HasAttribute(new ColumnAttribute("datetime2DataType"))
					.Member(e => e.TimeDataType)
						.HasAttribute(new ColumnAttribute("timeDataType"))
					.Member(e => e.HierarchyidDataType)
						.HasAttribute(new ColumnAttribute("hierarchyidDataType"))
					.Member(e => e.GeographyDataType)
						.HasAttribute(new ColumnAttribute("geographyDataType"))
					.Member(e => e.GeometryDataType)
						.HasAttribute(new ColumnAttribute("geometryDataType"));

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("_ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<CollatedTable>()
					.HasAttribute(new TableAttribute("CollatedTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.CaseSensitive)
						.HasAttribute(new ColumnAttribute("CaseSensitive")
						{
							CanBeNull = false
						})
					.Member(e => e.CaseInsensitive)
						.HasAttribute(new ColumnAttribute("CaseInsensitive")
						{
							CanBeNull = false
						});

			builder
				.Entity<DataType>()
					.HasAttribute(new TableAttribute("DataType"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id"));

			builder
				.Entity<DecimalOverflow>()
					.HasAttribute(new TableAttribute("DecimalOverflow"))
					.Member(e => e.Decimal1)
						.HasAttribute(new ColumnAttribute("Decimal1")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Decimal2)
						.HasAttribute(new ColumnAttribute("Decimal2"))
					.Member(e => e.Decimal3)
						.HasAttribute(new ColumnAttribute("Decimal3"))
					.Member(e => e.Decimal4)
						.HasAttribute(new ColumnAttribute("Decimal4"))
					.Member(e => e.Decimal5)
						.HasAttribute(new ColumnAttribute("Decimal5"));

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.Person)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("_ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<GuidId>()
					.HasAttribute(new TableAttribute("GuidID"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"));

			builder
				.Entity<GuidId2>()
					.HasAttribute(new TableAttribute("GuidID2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<IndexTable>()
					.HasAttribute(new TableAttribute("IndexTable"))
					.Member(e => e.PkField1)
						.HasAttribute(new ColumnAttribute("PKField1")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.PkField2)
						.HasAttribute(new ColumnAttribute("PKField2")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.UniqueField)
						.HasAttribute(new ColumnAttribute("UniqueField"))
					.Member(e => e.IndexField)
						.HasAttribute(new ColumnAttribute("IndexField"))
					.Member(e => e.IndexTable2)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1),
							OtherKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1)
						});

			builder
				.Entity<IndexTable2>()
					.HasAttribute(new TableAttribute("IndexTable2"))
					.Member(e => e.PkField1)
						.HasAttribute(new ColumnAttribute("PKField1")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.PkField2)
						.HasAttribute(new ColumnAttribute("PKField2")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.Patient2IndexTable)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1),
							OtherKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1)
						});

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<Issue1115>()
					.HasAttribute(new TableAttribute("Issue1115"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<Issue1144>()
					.HasAttribute(new TableAttribute("Issue1144"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("_ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Id1)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Member>()
					.HasAttribute(new TableAttribute("Member"))
					.Member(e => e.MemberId)
						.HasAttribute(new ColumnAttribute("MemberId")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Alias)
						.HasAttribute(new ColumnAttribute("Alias")
						{
							CanBeNull = false
						})
					.Member(e => e.Provider)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Member.MemberId),
							OtherKey = nameof(Provider.ProviderId)
						});

			builder
				.Entity<NameTest>()
					.HasAttribute(new TableAttribute("Name.Test"))
					.Member(e => e.NameTest1)
						.HasAttribute(new ColumnAttribute("Name.Test"));

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("_ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.Person)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<Provider>()
					.HasAttribute(new TableAttribute("Provider"))
					.Member(e => e.ProviderId)
						.HasAttribute(new ColumnAttribute("ProviderId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Test)
						.HasAttribute(new ColumnAttribute("Test")
						{
							CanBeNull = false
						})
					.Member(e => e.Member)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Provider.ProviderId),
							OtherKey = nameof(Member.MemberId)
						});

			builder
				.Entity<SameTableName>()
					.HasAttribute(new TableAttribute("SameTableName"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id"));

			builder
				.Entity<SqlType>()
					.HasAttribute(new TableAttribute("SqlTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Hid)
						.HasAttribute(new ColumnAttribute("HID"));

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMergeIdentity>()
					.HasAttribute(new TableAttribute("TestMergeIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Field)
						.HasAttribute(new ColumnAttribute("Field"));

			builder
				.Entity<TestSchemaX>()
					.HasAttribute(new TableAttribute("TestSchemaX"))
					.Member(e => e.TestSchemaXid)
						.HasAttribute(new ColumnAttribute("TestSchemaXID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.TestSchemaY)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid),
							OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid)
						})
					.Member(e => e.TestSchemaY1)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid),
							OtherKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid)
						});

			builder
				.Entity<TestSchemaY>()
					.HasAttribute(new TableAttribute("TestSchemaY"))
					.Member(e => e.TestSchemaXid)
						.HasAttribute(new ColumnAttribute("TestSchemaXID"))
					.Member(e => e.ParentTestSchemaXid)
						.HasAttribute(new ColumnAttribute("ParentTestSchemaXID"))
					.Member(e => e.OtherId)
						.HasAttribute(new ColumnAttribute("OtherID"))
					.Member(e => e.TestSchemaX)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(SqlServer.TestSchemaY.TestSchemaXid),
							OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid)
						})
					.Member(e => e.ParentTestSchemaX)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid),
							OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid)
						});

			builder
				.Entity<TestSchemaSameTableName>()
					.HasAttribute(new TableAttribute("TestSchema_SameTableName"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id"));

			builder
				.Entity<ParentChildView>()
					.HasAttribute(new TableAttribute("ParentChildView")
					{
						IsView = true
					})
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<ParentView>()
					.HasAttribute(new TableAttribute("ParentView")
					{
						IsView = true
					})
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("_ID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestSchemaSchema.SameTableName>()
					.HasAttribute(new TableAttribute("SameTableName")
					{
						Schema = "TestSchema"
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id"));

			builder
				.Entity<TestSchemaSchema.TestSchemaA>()
					.HasAttribute(new TableAttribute("TestSchemaA")
					{
						Schema = "TestSchema"
					})
					.Member(e => e.TestSchemaAid)
						.HasAttribute(new ColumnAttribute("TestSchemaAID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.TestSchemaB)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
							OtherKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid)
						})
					.Member(e => e.TestSchemaB1)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
							OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid)
						})
					.Member(e => e.TestSchemaB2)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
							OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId)
						});

			builder
				.Entity<TestSchemaSchema.TestSchemaB>()
					.HasAttribute(new TableAttribute("TestSchemaB")
					{
						Schema = "TestSchema"
					})
					.Member(e => e.TestSchemaBid)
						.HasAttribute(new ColumnAttribute("TestSchemaBID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.OriginTestSchemaAid)
						.HasAttribute(new ColumnAttribute("OriginTestSchemaAID"))
					.Member(e => e.TargetTestSchemaAid)
						.HasAttribute(new ColumnAttribute("TargetTestSchemaAID"))
					.Member(e => e.TargetTestSchemaAId)
						.HasAttribute(new ColumnAttribute("Target_Test_Schema_A_ID"))
					.Member(e => e.OriginTestSchemaA)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid),
							OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
						})
					.Member(e => e.TargetTestSchemaA)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid),
							OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
						})
					.Member(e => e.TargetTestSchemaA1)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId),
							OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
						});

			builder
				.Entity<ExtensionMethods.PatientSelectAllResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						});

			builder
				.Entity<ExtensionMethods.PatientSelectByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						});

			builder
				.Entity<ExtensionMethods.PersonInsertResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"));

			builder
				.Entity<ExtensionMethods.PersonSelectAllResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.PersonSelectByKeyResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.PersonSelectByKeyLowercaseResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						});

			builder
				.Entity<ExtensionMethods.PersonSelectByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.PersonSelectListByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.QueryProcMultipleParametersResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.QueryProcParametersResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.TableTypeTestProcResult>()
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<ExtensionMethods.VariableResultsResult>()
					.Member(e => e.Code)
						.HasAttribute(new ColumnAttribute("Code"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1")
						{
							CanBeNull = false
						})
					.Member(e => e.Value2)
						.HasAttribute(new ColumnAttribute("Value2")
						{
							CanBeNull = false
						});

			builder
				.Entity<Issue1921Result>()
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("name")
						{
							CanBeNull = false
						})
					.Member(e => e.Objid)
						.HasAttribute(new ColumnAttribute("objid"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.Person(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.Person(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.HasAttribute<IndexTable2>(e => ExtensionMethods.Patient2IndexTable(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1),
				OtherKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1)
			});

			builder.HasAttribute<IndexTable>(e => ExtensionMethods.IndexTable2(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1),
				OtherKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1)
			});

			builder.HasAttribute<Provider>(e => ExtensionMethods.Member(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Provider.ProviderId),
				OtherKey = nameof(Member.MemberId)
			});

			builder.HasAttribute<Member>(e => ExtensionMethods.Provider(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Member.MemberId),
				OtherKey = nameof(Provider.ProviderId)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaB>(e => ExtensionMethods.OriginTestSchemaA(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid),
				OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaA>(e => ExtensionMethods.TestSchemaB(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
				OtherKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaB>(e => ExtensionMethods.TargetTestSchemaA(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid),
				OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaA>(e => ExtensionMethods.TestSchemaB1(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
				OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaB>(e => ExtensionMethods.TargetTestSchemaA1(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId),
				OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid)
			});

			builder.HasAttribute<TestSchemaSchema.TestSchemaA>(e => ExtensionMethods.TestSchemaB2(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid),
				OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId)
			});

			builder.HasAttribute<TestSchemaY>(e => ExtensionMethods.TestSchemaX(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(SqlServer.TestSchemaY.TestSchemaXid),
				OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid)
			});

			builder.HasAttribute<TestSchemaX>(e => ExtensionMethods.TestSchemaY(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid),
				OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid)
			});

			builder.HasAttribute<TestSchemaY>(e => ExtensionMethods.ParentTestSchemaX(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid),
				OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid)
			});

			builder.HasAttribute<TestSchemaX>(e => ExtensionMethods.TestSchemaY1(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid),
				OtherKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid)
			});

			builder.HasAttribute(() => ExtensionMethods.ScalarFunction(default(int?)), new Sql.FunctionAttribute("[dbo].[ScalarFunction]")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.GetParentById(default(int?)), new Sql.TableFunctionAttribute("GetParentByID"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.Issue1921(), new Sql.TableFunctionAttribute("Issue1921"));

			builder.HasAttribute<TestSchemaSchema.DataContext>(ctx => ctx.SchemaTableFunction(default(int?)), new Sql.TableFunctionAttribute("SchemaTableFunction")
			{
				Schema = "TestSchema"
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		#endregion

		public ITable<AllType>                 AllTypes                 => this.GetTable<AllType>();
		public ITable<AllTypes2>               AllTypes2                => this.GetTable<AllTypes2>();
		public ITable<Child>                   Children                 => this.GetTable<Child>();
		public ITable<CollatedTable>           CollatedTables           => this.GetTable<CollatedTable>();
		public ITable<DataType>                DataTypes                => this.GetTable<DataType>();
		public ITable<DecimalOverflow>         DecimalOverflows         => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>                  Doctors                  => this.GetTable<Doctor>();
		public ITable<GrandChild>              GrandChildren            => this.GetTable<GrandChild>();
		public ITable<GuidId>                  GuidIds                  => this.GetTable<GuidId>();
		public ITable<GuidId2>                 GuidId2                  => this.GetTable<GuidId2>();
		public ITable<IndexTable>              IndexTables              => this.GetTable<IndexTable>();
		public ITable<IndexTable2>             IndexTable2              => this.GetTable<IndexTable2>();
		public ITable<InheritanceChild>        InheritanceChildren      => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>       InheritanceParents       => this.GetTable<InheritanceParent>();
		public ITable<Issue1115>               Issue1115                => this.GetTable<Issue1115>();
		public ITable<Issue1144>               Issue1144                => this.GetTable<Issue1144>();
		public ITable<LinqDataType>            LinqDataTypes            => this.GetTable<LinqDataType>();
		public ITable<Member>                  Members                  => this.GetTable<Member>();
		public ITable<NameTest>                NameTests                => this.GetTable<NameTest>();
		/// <summary>
		/// This is Parent table
		/// </summary>
		public ITable<Parent>                  Parents                  => this.GetTable<Parent>();
		public ITable<Patient>                 Patients                 => this.GetTable<Patient>();
		public ITable<Person>                  People                   => this.GetTable<Person>();
		public ITable<Provider>                Providers                => this.GetTable<Provider>();
		public ITable<SameTableName>           SameTableNames           => this.GetTable<SameTableName>();
		public ITable<SqlType>                 SqlTypes                 => this.GetTable<SqlType>();
		public ITable<TestIdentity>            TestIdentities           => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>              TestMerge1               => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>              TestMerge2               => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>       TestMergeIdentities      => this.GetTable<TestMergeIdentity>();
		public ITable<TestSchemaX>             TestSchemaX              => this.GetTable<TestSchemaX>();
		public ITable<TestSchemaY>             TestSchemaY              => this.GetTable<TestSchemaY>();
		public ITable<TestSchemaSameTableName> TestSchemaSameTableNames => this.GetTable<TestSchemaSameTableName>();
		public ITable<ParentChildView>         ParentChildViews         => this.GetTable<ParentChildView>();
		public ITable<ParentView>              ParentViews              => this.GetTable<ParentView>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		/// <summary>
		/// This is &lt;test&gt; table function!
		/// </summary>
		/// <param name="id">
		/// This is &lt;test&gt; table function parameter!
		/// </param>
		public IQueryable<Parent> GetParentById(int? id)
		{
			return this.GetTable<Parent>(this, _getParentById, id);
		}
		#endregion

		#region Issue1921
		private static readonly MethodInfo _issue1921 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.Issue1921());

		public IQueryable<Issue1921Result> Issue1921()
		{
			return this.GetTable<Issue1921Result>(this, _issue1921);
		}

		public partial class Issue1921Result
		{
			public string Name  { get; set; } = null!;
			public int?   Objid { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region IndexTable2 Associations
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		public static IndexTable Patient2IndexTable(this IndexTable2 obj, IDataContext db)
		{
			return db.GetTable<IndexTable>().First(t => obj.PkField2 == t.PkField2 && obj.PkField1 == t.PkField1);
		}
		#endregion

		#region IndexTable Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		public static IndexTable2? IndexTable2(this IndexTable obj, IDataContext db)
		{
			return db.GetTable<IndexTable2>().FirstOrDefault(t => t.PkField2 == obj.PkField2 && t.PkField1 == obj.PkField1);
		}
		#endregion

		#region Provider Associations
		/// <summary>
		/// FK_Provider_Member
		/// </summary>
		public static Member Member(this Provider obj, IDataContext db)
		{
			return db.GetTable<Member>().First(t => obj.ProviderId == t.MemberId);
		}
		#endregion

		#region Member Associations
		/// <summary>
		/// FK_Provider_Member backreference
		/// </summary>
		public static Provider? Provider(this Member obj, IDataContext db)
		{
			return db.GetTable<Provider>().FirstOrDefault(t => t.ProviderId == obj.MemberId);
		}
		#endregion

		#region TestSchemaB Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
		/// </summary>
		public static TestSchemaSchema.TestSchemaA OriginTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.OriginTestSchemaAid == t.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
		/// </summary>
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAid == t.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
		/// </summary>
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA1(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAId == t.TestSchemaAid);
		}
		#endregion

		#region TestSchemaA Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.OriginTestSchemaAid == obj.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB1(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAid == obj.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB2(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAId == obj.TestSchemaAid);
		}
		#endregion

		#region TestSchemaY Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID
		/// </summary>
		public static TestSchemaX TestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.TestSchemaXid == t.TestSchemaXid);
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX
		/// </summary>
		public static TestSchemaX ParentTestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.ParentTestSchemaXid == t.TestSchemaXid);
		}
		#endregion

		#region TestSchemaX Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID backreference
		/// </summary>
		public static IQueryable<TestSchemaY> TestSchemaY(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.TestSchemaXid == obj.TestSchemaXid);
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX backreference
		/// </summary>
		public static IQueryable<TestSchemaY> TestSchemaY1(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.ParentTestSchemaXid == obj.TestSchemaXid);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[AddIssue792Record]");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("[AddIssue792Record]", cancellationToken);
		}
		#endregion

		#region DuplicateColumnNames
		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]");
		}

		public static Task<IEnumerable<DuplicateColumnNamesResult>> DuplicateColumnNamesAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]", cancellationToken);
		}

		public partial class DuplicateColumnNamesResult
		{
			public int    Id  { get; set; }
			public string Id1 { get; set; } = null!;
		}
		#endregion

		#region ExecuteProcIntParameters
		public static int ExecuteProcIntParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("[ExecuteProcIntParameters]", parameters);
		}

		public static async Task<ExecuteProcIntParametersResults> ExecuteProcIntParametersAsync(this TestDataDB dataConnection, int? input, int? output, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[ExecuteProcIntParameters]", cancellationToken, parameters);
			return new ExecuteProcIntParametersResults()
			{
				Result = result,
				Output = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class ExecuteProcIntParametersResults
		{
			public int  Result { get; set; }
			public int? Output { get; set; }
		}
		#endregion

		#region ExecuteProcStringParameters
		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static IEnumerable<ExecuteProcStringParametersResult> ExecuteProcStringParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.QueryProc(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<string>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", parameters).ToList();
		}

		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static async Task<ExecuteProcStringParametersResults> ExecuteProcStringParametersAsync(this TestDataDB dataConnection, int? input, int? output, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<string>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", cancellationToken, parameters);
			return new ExecuteProcStringParametersResults()
			{
				Result = result.ToList(),
				Output = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public partial class ExecuteProcStringParametersResult
		{
			public string Column { get; set; } = null!;
		}

		public class ExecuteProcStringParametersResults
		{
			public IEnumerable<ExecuteProcStringParametersResult> Result { get; set; } = null!;
			public int?                                           Output { get; set; }
		}
		#endregion

		#region Issue1897
		public static int Issue1897(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[Issue1897]");
		}

		public static Task<int> Issue1897Async(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("[Issue1897]", cancellationToken);
		}
		#endregion

		#region OutRefEnumTest
		public static int OutRefEnumTest(this TestDataDB dataConnection, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputStr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("[OutRefEnumTest]", parameters);
		}

		public static async Task<OutRefEnumTestResults> OutRefEnumTestAsync(this TestDataDB dataConnection, string? str, string? outputStr, string? inputOutputStr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefEnumTest]", cancellationToken, parameters);
			return new OutRefEnumTestResults()
			{
				Result = result,
				InputOutputStr = Converter.ChangeTypeTo<string?>(parameters[2].Value),
				OutputStr = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class OutRefEnumTestResults
		{
			public int     Result         { get; set; }
			public string? InputOutputStr { get; set; }
			public string? OutputStr      { get; set; }
		}
		#endregion

		#region OutRefTest
		public static int OutRefTest(this TestDataDB dataConnection, int? id, ref int? outputId, ref int? inputOutputId, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32),
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputId = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			inputOutputId = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			outputStr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("[OutRefTest]", parameters);
		}

		public static async Task<OutRefTestResults> OutRefTestAsync(this TestDataDB dataConnection, int? id, int? outputId, int? inputOutputId, string? str, string? outputStr, string? inputOutputStr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32),
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefTest]", cancellationToken, parameters);
			return new OutRefTestResults()
			{
				Result = result,
				InputOutputId = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				InputOutputStr = Converter.ChangeTypeTo<string?>(parameters[5].Value),
				OutputId = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				OutputStr = Converter.ChangeTypeTo<string?>(parameters[4].Value)
			};
		}

		public class OutRefTestResults
		{
			public int     Result         { get; set; }
			public int?    InputOutputId  { get; set; }
			public string? InputOutputStr { get; set; }
			public int?    OutputId       { get; set; }
			public string? OutputStr      { get; set; }
		}
		#endregion

		#region PatientSelectAll
		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectAllResult>("[Patient_SelectAll]");
		}

		public static Task<IEnumerable<PatientSelectAllResult>> PatientSelectAllAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<PatientSelectAllResult>("[Patient_SelectAll]", cancellationToken);
		}

		public partial class PatientSelectAllResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
			public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("[Patient_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PatientSelectByNameResult>> PatientSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PatientSelectByNameResult>("[Patient_SelectByName]", cancellationToken, parameters);
		}

		public partial class PatientSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
			public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PersonSearch
		public static int PersonSearch(this TestDataDB dataConnection, string? nameFilter)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					Size = 512
				}
			};
			return dataConnection.ExecuteProc("[PersonSearch]", parameters);
		}

		public static Task<int> PersonSearchAsync(this TestDataDB dataConnection, string? nameFilter, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					Size = 512
				}
			};
			return dataConnection.ExecuteProcAsync("[PersonSearch]", cancellationToken, parameters);
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
			};
			return dataConnection.ExecuteProc("[Person_Delete]", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, int? personId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("[Person_Delete]", cancellationToken, parameters);
		}
		#endregion

		#region PersonInsert
		public static IEnumerable<PersonInsertResult> PersonInsert(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.QueryProc<PersonInsertResult>("[Person_Insert]", parameters);
		}

		public static Task<IEnumerable<PersonInsertResult>> PersonInsertAsync(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.QueryProcAsync<PersonInsertResult>("[Person_Insert]", cancellationToken, parameters);
		}

		public partial class PersonInsertResult
		{
			public int? PersonId { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		public static int PersonInsertOutputParameter(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, ref int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			personId = Converter.ChangeTypeTo<int?>(parameters[4].Value);
			return dataConnection.ExecuteProc("[Person_Insert_OutputParameter]", parameters);
		}

		public static async Task<PersonInsertOutputParameterResults> PersonInsertOutputParameterAsync(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, int? personId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Person_Insert_OutputParameter]", cancellationToken, parameters);
			return new PersonInsertOutputParameterResults()
			{
				Result = result,
				PersonId = Converter.ChangeTypeTo<int?>(parameters[4].Value)
			};
		}

		public class PersonInsertOutputParameterResults
		{
			public int  Result   { get; set; }
			public int? PersonId { get; set; }
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PersonSelectAllResult>("[Person_SelectAll]");
		}

		public static Task<IEnumerable<PersonSelectAllResult>> PersonSelectAllAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<PersonSelectAllResult>("[Person_SelectAll]", cancellationToken);
		}

		public partial class PersonSelectAllResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[Person_SelectByKey]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByKeyResult>> PersonSelectByKeyAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProcAsync<PersonSelectByKeyResult>("[Person_SelectByKey]", cancellationToken, parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKeyLowercase
		public static IEnumerable<PersonSelectByKeyLowercaseResult> PersonSelectByKeyLowercase(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByKeyLowercaseResult>> PersonSelectByKeyLowercaseAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProcAsync<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", cancellationToken, parameters);
		}

		public partial class PersonSelectByKeyLowercaseResult
		{
			public int    PersonId  { get; set; }
			public string FirstName { get; set; } = null!;
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("[Person_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByNameResult>> PersonSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectByNameResult>("[Person_SelectByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[Person_SelectListByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectListByNameResult>> PersonSelectListByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectListByNameResult>("[Person_SelectListByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personId, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32),
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("[Person_Update]", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, int? personId, string? firstName, string? lastName, string? middleName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32),
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("[Person_Update]", cancellationToken, parameters);
		}
		#endregion

		#region QueryProcMultipleParameters
		public static IEnumerable<QueryProcMultipleParametersResult> QueryProcMultipleParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2, ref int? output3)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			output3 = Converter.ChangeTypeTo<int?>(parameters[3].Value);
			return dataConnection.QueryProc<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", parameters).ToList();
		}

		public static async Task<QueryProcMultipleParametersResults> QueryProcMultipleParametersAsync(this TestDataDB dataConnection, int? input, int? output1, int? output2, int? output3, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", cancellationToken, parameters);
			return new QueryProcMultipleParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				Output3 = Converter.ChangeTypeTo<int?>(parameters[3].Value)
			};
		}

		public partial class QueryProcMultipleParametersResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}

		public class QueryProcMultipleParametersResults
		{
			public IEnumerable<QueryProcMultipleParametersResult> Result  { get; set; } = null!;
			public int?                                           Output1 { get; set; }
			public int?                                           Output2 { get; set; }
			public int?                                           Output3 { get; set; }
		}
		#endregion

		#region QueryProcParameters
		public static IEnumerable<QueryProcParametersResult> QueryProcParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<QueryProcParametersResult>("[QueryProcParameters]", parameters).ToList();
		}

		public static async Task<QueryProcParametersResults> QueryProcParametersAsync(this TestDataDB dataConnection, int? input, int? output1, int? output2, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcParametersResult>("[QueryProcParameters]", cancellationToken, parameters);
			return new QueryProcParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value)
			};
		}

		public partial class QueryProcParametersResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}

		public class QueryProcParametersResults
		{
			public IEnumerable<QueryProcParametersResult> Result  { get; set; } = null!;
			public int?                                   Output1 { get; set; }
			public int?                                   Output2 { get; set; }
		}
		#endregion

		#region SelectImplicitColumn
		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]");
		}

		public static Task<IEnumerable<SelectImplicitColumnResult>> SelectImplicitColumnAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]", cancellationToken);
		}

		public partial class SelectImplicitColumnResult
		{
			public int Column { get; set; }
		}
		#endregion

		#region TableTypeTestProc
		public static IEnumerable<TableTypeTestProcResult> TableTypeTestProc(this TestDataDB dataConnection, DataTable? table)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
			};
			return dataConnection.QueryProc<TableTypeTestProcResult>("[TableTypeTestProc]", parameters);
		}

		public static Task<IEnumerable<TableTypeTestProcResult>> TableTypeTestProcAsync(this TestDataDB dataConnection, DataTable? table, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
			};
			return dataConnection.QueryProcAsync<TableTypeTestProcResult>("[TableTypeTestProc]", cancellationToken, parameters);
		}

		public partial class TableTypeTestProcResult
		{
			public int?    Id   { get; set; }
			public string? Name { get; set; }
		}
		#endregion

		#region VariableResults
		public static IEnumerable<VariableResultsResult> VariableResults(this TestDataDB dataConnection, bool? returnFullRow)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
			};
			return dataConnection.QueryProc<VariableResultsResult>("[VariableResults]", parameters);
		}

		public static Task<IEnumerable<VariableResultsResult>> VariableResultsAsync(this TestDataDB dataConnection, bool? returnFullRow, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
			};
			return dataConnection.QueryProcAsync<VariableResultsResult>("[VariableResults]", cancellationToken, parameters);
		}

		public partial class VariableResultsResult
		{
			public int    Code   { get; set; }
			public string Value1 { get; set; } = null!;
			public string Value2 { get; set; } = null!;
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region ScalarFunction
		/// <summary>
		/// This is &lt;test&gt; scalar function!
		/// </summary>
		/// <param name="value">
		/// This is &lt;test&gt; scalar function parameter!
		/// </param>
		public static int? ScalarFunction(int? @value)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
