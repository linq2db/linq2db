// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.Access.Both
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.TinyintDataType)
						.HasAttribute(new ColumnAttribute("tinyintDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DatetimeDataType)
						.HasAttribute(new ColumnAttribute("datetimeDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.NtextDataType)
						.HasAttribute(new ColumnAttribute("ntextDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.VarbinaryDataType)
						.HasAttribute(new ColumnAttribute("varbinaryDataType"))
					.Member(e => e.ImageDataType)
						.HasAttribute(new ColumnAttribute("imageDataType"))
					.Member(e => e.OleObjectDataType)
						.HasAttribute(new ColumnAttribute("oleObjectDataType"))
					.Member(e => e.UniqueidentifierDataType)
						.HasAttribute(new ColumnAttribute("uniqueidentifierDataType"));

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<DataTypeTest>()
					.HasAttribute(new TableAttribute("DataTypeTest"))
					.Member(e => e.DataTypeId)
						.HasAttribute(new ColumnAttribute("DataTypeID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Binary)
						.HasAttribute(new ColumnAttribute("Binary_"))
					.Member(e => e.Boolean)
						.HasAttribute(new ColumnAttribute("Boolean_"))
					.Member(e => e.Byte)
						.HasAttribute(new ColumnAttribute("Byte_"))
					.Member(e => e.Bytes)
						.HasAttribute(new ColumnAttribute("Bytes_"))
					.Member(e => e.Char)
						.HasAttribute(new ColumnAttribute("Char_"))
					.Member(e => e.DateTime)
						.HasAttribute(new ColumnAttribute("DateTime_"))
					.Member(e => e.Decimal)
						.HasAttribute(new ColumnAttribute("Decimal_"))
					.Member(e => e.Double)
						.HasAttribute(new ColumnAttribute("Double_"))
					.Member(e => e.Guid)
						.HasAttribute(new ColumnAttribute("Guid_"))
					.Member(e => e.Int16)
						.HasAttribute(new ColumnAttribute("Int16_"))
					.Member(e => e.Int32)
						.HasAttribute(new ColumnAttribute("Int32_"))
					.Member(e => e.Int64)
						.HasAttribute(new ColumnAttribute("Int64_"))
					.Member(e => e.Money)
						.HasAttribute(new ColumnAttribute("Money_"))
					.Member(e => e.SByte)
						.HasAttribute(new ColumnAttribute("SByte_"))
					.Member(e => e.Single)
						.HasAttribute(new ColumnAttribute("Single_"))
					.Member(e => e.Stream)
						.HasAttribute(new ColumnAttribute("Stream_"))
					.Member(e => e.String)
						.HasAttribute(new ColumnAttribute("String_"))
					.Member(e => e.UInt16)
						.HasAttribute(new ColumnAttribute("UInt16_"))
					.Member(e => e.UInt32)
						.HasAttribute(new ColumnAttribute("UInt32_"))
					.Member(e => e.UInt64)
						.HasAttribute(new ColumnAttribute("UInt64_"))
					.Member(e => e.Xml)
						.HasAttribute(new ColumnAttribute("Xml_"));

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.PersonDoctor)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Dual>()
					.HasAttribute(new TableAttribute("Dual"))
					.Member(e => e.Dummy)
						.HasAttribute(new ColumnAttribute("Dummy"));

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.PersonPatient)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<LinqDataTypesQuery>()
					.HasAttribute(new TableAttribute("LinqDataTypes Query")
					{
						IsView = true
					})
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"));

			builder
				.Entity<LinqDataTypesQuery1>()
					.HasAttribute(new TableAttribute("LinqDataTypes Query1")
					{
						IsView = true
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"));

			builder
				.Entity<LinqDataTypesQuery2>()
					.HasAttribute(new TableAttribute("LinqDataTypes Query2")
					{
						IsView = true
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"));

			builder
				.Entity<PatientSelectAll>()
					.HasAttribute(new TableAttribute("Patient_SelectAll")
					{
						IsView = true
					})
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis"));

			builder
				.Entity<PersonSelectAll>()
					.HasAttribute(new TableAttribute("Person_SelectAll")
					{
						IsView = true
					})
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ScalarDataReader>()
					.HasAttribute(new TableAttribute("Scalar_DataReader")
					{
						IsView = true
					})
					.Member(e => e.IntField)
						.HasAttribute(new ColumnAttribute("intField"))
					.Member(e => e.StringField)
						.HasAttribute(new ColumnAttribute("stringField"));

			builder
				.Entity<ExtensionMethods.PatientSelectByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis"));

			builder
				.Entity<ExtensionMethods.PersonSelectByKeyResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.PersonSelectByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<ExtensionMethods.PersonSelectListByNameResult>()
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.PersonDoctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.PersonPatient(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>             AllTypes             => this.GetTable<AllType>();
		public ITable<Child>               Children             => this.GetTable<Child>();
		public ITable<DataTypeTest>        DataTypeTests        => this.GetTable<DataTypeTest>();
		public ITable<Doctor>              Doctors              => this.GetTable<Doctor>();
		public ITable<Dual>                Duals                => this.GetTable<Dual>();
		public ITable<GrandChild>          GrandChildren        => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>    InheritanceChildren  => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>   InheritanceParents   => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>        LinqDataTypes        => this.GetTable<LinqDataType>();
		public ITable<Parent>              Parents              => this.GetTable<Parent>();
		public ITable<Patient>             Patients             => this.GetTable<Patient>();
		public ITable<Person>              People               => this.GetTable<Person>();
		public ITable<TestIdentity>        TestIdentities       => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>          TestMerge1           => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>          TestMerge2           => this.GetTable<TestMerge2>();
		public ITable<LinqDataTypesQuery>  LinqDataTypesQueries => this.GetTable<LinqDataTypesQuery>();
		public ITable<LinqDataTypesQuery1> LinqDataTypesQuery1  => this.GetTable<LinqDataTypesQuery1>();
		public ITable<LinqDataTypesQuery2> LinqDataTypesQuery2  => this.GetTable<LinqDataTypesQuery2>();
		public ITable<PatientSelectAll>    PatientSelectAll     => this.GetTable<PatientSelectAll>();
		public ITable<PersonSelectAll>     PersonSelectAll      => this.GetTable<PersonSelectAll>();
		public ITable<ScalarDataReader>    ScalarDataReaders    => this.GetTable<ScalarDataReader>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// PersonDoctor
		/// </summary>
		public static Person PersonDoctor(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// PersonDoctor backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// PersonPatient backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// PersonPatient
		/// </summary>
		public static Person PersonPatient(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[AddIssue792Record]");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("[AddIssue792Record]", cancellationToken);
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("[Patient_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PatientSelectByNameResult>> PatientSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PatientSelectByNameResult>("[Patient_SelectByName]", cancellationToken, parameters);
		}

		public partial class PatientSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public char?   Gender     { get; set; }
			public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, DataType.Int32)
			};
			return dataConnection.ExecuteProc("[Person_Delete]", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, int? personId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("[Person_Delete]", cancellationToken, parameters);
		}
		#endregion

		#region PersonInsert
		public static int PersonInsert(this TestDataDB dataConnection, string? firstName, string? middleName, string? lastName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, DataType.NText)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("[Person_Insert]", parameters);
		}

		public static Task<int> PersonInsertAsync(this TestDataDB dataConnection, string? firstName, string? middleName, string? lastName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, DataType.NText)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("[Person_Insert]", cancellationToken, parameters);
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[Person_SelectByKey]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByKeyResult>> PersonSelectByKeyAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32)
			};
			return dataConnection.QueryProcAsync<PersonSelectByKeyResult>("[Person_SelectByKey]", cancellationToken, parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			public int     PersonId   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public char?   Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("[Person_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByNameResult>> PersonSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectByNameResult>("[Person_SelectByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public char?   Gender     { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[Person_SelectListByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectListByNameResult>> PersonSelectListByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, DataType.NText)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectListByNameResult>("[Person_SelectListByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			public int     PersonId   { get; set; }
			public string? FirstName  { get; set; }
			public string? LastName   { get; set; }
			public string? MiddleName { get; set; }
			public char?   Gender     { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? id, int? personId, string? firstName, string? middleName, string? lastName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32),
				new DataParameter("@PersonID", personId, DataType.Int32),
				new DataParameter("@FirstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, DataType.NText)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("[Person_Update]", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, int? id, int? personId, string? firstName, string? middleName, string? lastName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, DataType.Int32),
				new DataParameter("@PersonID", personId, DataType.Int32),
				new DataParameter("@FirstName", firstName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, DataType.NText)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, DataType.NText)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("[Person_Update]", cancellationToken, parameters);
		}
		#endregion
		#endregion
	}
}
