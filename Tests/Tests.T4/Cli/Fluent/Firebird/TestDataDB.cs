// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using FirebirdSql.Data.Types;
using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Data;
using System.Linq;
using System.Numerics;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.Firebird
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DoubleDataType)
						.HasAttribute(new ColumnAttribute("doubleDataType"))
					.Member(e => e.TimestampDataType)
						.HasAttribute(new ColumnAttribute("timestampDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.TimestampTzDataType)
						.HasAttribute(new ColumnAttribute("timestampTZDataType"))
					.Member(e => e.TimeTzDataType)
						.HasAttribute(new ColumnAttribute("timeTZDataType"))
					.Member(e => e.Decfloat16DataType)
						.HasAttribute(new ColumnAttribute("decfloat16DataType"))
					.Member(e => e.Decfloat34DataType)
						.HasAttribute(new ColumnAttribute("decfloat34DataType"))
					.Member(e => e.Int128DataType)
						.HasAttribute(new ColumnAttribute("int128DataType"))
					.Member(e => e.BlobDataType)
						.HasAttribute(new ColumnAttribute("blobDataType"));

			builder
				.Entity<CamelCaseName>()
					.HasAttribute(new TableAttribute("CamelCaseName"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Name1)
						.HasAttribute(new ColumnAttribute("NAME1"))
					.Member(e => e.Name2)
						.HasAttribute(new ColumnAttribute("Name2"))
					.Member(e => e.Name3)
						.HasAttribute(new ColumnAttribute("NAME3"))
					.Member(e => e.Name4)
						.HasAttribute(new ColumnAttribute("_NAME4"))
					.Member(e => e.Name5)
						.HasAttribute(new ColumnAttribute("NAME 5"));

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<CollatedTable>()
					.HasAttribute(new TableAttribute("CollatedTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.CaseSensitive)
						.HasAttribute(new ColumnAttribute("CaseSensitive"))
					.Member(e => e.CaseInsensitive)
						.HasAttribute(new ColumnAttribute("CaseInsensitive"));

			builder
				.Entity<DataTypeTest>()
					.HasAttribute(new TableAttribute("DataTypeTest"))
					.Member(e => e.DataTypeId)
						.HasAttribute(new ColumnAttribute("DataTypeID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Binary)
						.HasAttribute(new ColumnAttribute("Binary_"))
					.Member(e => e.Boolean)
						.HasAttribute(new ColumnAttribute("Boolean_"))
					.Member(e => e.Byte)
						.HasAttribute(new ColumnAttribute("Byte_"))
					.Member(e => e.Bytes)
						.HasAttribute(new ColumnAttribute("Bytes_"))
					.Member(e => e.Char)
						.HasAttribute(new ColumnAttribute("CHAR_"))
					.Member(e => e.DateTime)
						.HasAttribute(new ColumnAttribute("DateTime_"))
					.Member(e => e.Decimal)
						.HasAttribute(new ColumnAttribute("Decimal_"))
					.Member(e => e.Double)
						.HasAttribute(new ColumnAttribute("Double_"))
					.Member(e => e.Guid)
						.HasAttribute(new ColumnAttribute("Guid_"))
					.Member(e => e.Int16)
						.HasAttribute(new ColumnAttribute("Int16_"))
					.Member(e => e.Int32)
						.HasAttribute(new ColumnAttribute("Int32_"))
					.Member(e => e.Int64)
						.HasAttribute(new ColumnAttribute("Int64_"))
					.Member(e => e.Money)
						.HasAttribute(new ColumnAttribute("Money_"))
					.Member(e => e.SByte)
						.HasAttribute(new ColumnAttribute("SByte_"))
					.Member(e => e.Single)
						.HasAttribute(new ColumnAttribute("Single_"))
					.Member(e => e.Stream)
						.HasAttribute(new ColumnAttribute("Stream_"))
					.Member(e => e.String)
						.HasAttribute(new ColumnAttribute("String_"))
					.Member(e => e.UInt16)
						.HasAttribute(new ColumnAttribute("UInt16_"))
					.Member(e => e.UInt32)
						.HasAttribute(new ColumnAttribute("UInt32_"))
					.Member(e => e.UInt64)
						.HasAttribute(new ColumnAttribute("UInt64_"))
					.Member(e => e.Xml)
						.HasAttribute(new ColumnAttribute("Xml_"));

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.Person)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Dual>()
					.HasAttribute(new TableAttribute("Dual"))
					.Member(e => e.Dummy)
						.HasAttribute(new ColumnAttribute("Dummy"));

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.Integ)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<SequenceTest>()
					.HasAttribute(new TableAttribute("SequenceTest"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value_")
						{
							CanBeNull = false
						});

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<PersonView>()
					.HasAttribute(new TableAttribute("PersonView")
					{
						IsView = true
					})
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID"))
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName"))
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"));

			builder
				.Entity<OutRefEnumTestResult>()
					.Member(e => e.Inputoutputstr)
						.HasAttribute(new ColumnAttribute("INPUTOUTPUTSTR"))
					.Member(e => e.Outputstr)
						.HasAttribute(new ColumnAttribute("OUTPUTSTR"));

			builder
				.Entity<OutRefTestResult>()
					.Member(e => e.Inputoutputid)
						.HasAttribute(new ColumnAttribute("INPUTOUTPUTID"))
					.Member(e => e.Inputoutputstr)
						.HasAttribute(new ColumnAttribute("INPUTOUTPUTSTR"))
					.Member(e => e.Outputid)
						.HasAttribute(new ColumnAttribute("OUTPUTID"))
					.Member(e => e.Outputstr)
						.HasAttribute(new ColumnAttribute("OUTPUTSTR"));

			builder
				.Entity<PatientSelectAllResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"))
					.Member(e => e.Firstname)
						.HasAttribute(new ColumnAttribute("FIRSTNAME"))
					.Member(e => e.Lastname)
						.HasAttribute(new ColumnAttribute("LASTNAME"))
					.Member(e => e.Middlename)
						.HasAttribute(new ColumnAttribute("MIDDLENAME"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("GENDER"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("DIAGNOSIS"));

			builder
				.Entity<PatientSelectByNameResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"))
					.Member(e => e.Middlename)
						.HasAttribute(new ColumnAttribute("MIDDLENAME"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("GENDER"))
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("DIAGNOSIS"));

			builder
				.Entity<PersonInsertResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"));

			builder
				.Entity<PersonInsertOutputParameterResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"));

			builder
				.Entity<PersonSelectAllResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"))
					.Member(e => e.Firstname)
						.HasAttribute(new ColumnAttribute("FIRSTNAME"))
					.Member(e => e.Lastname)
						.HasAttribute(new ColumnAttribute("LASTNAME"))
					.Member(e => e.Middlename)
						.HasAttribute(new ColumnAttribute("MIDDLENAME"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("GENDER"));

			builder
				.Entity<PersonSelectByKeyResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"))
					.Member(e => e.Firstname)
						.HasAttribute(new ColumnAttribute("FIRSTNAME"))
					.Member(e => e.Lastname)
						.HasAttribute(new ColumnAttribute("LASTNAME"))
					.Member(e => e.Middlename)
						.HasAttribute(new ColumnAttribute("MIDDLENAME"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("GENDER"));

			builder
				.Entity<PersonSelectByNameResult>()
					.Member(e => e.Personid)
						.HasAttribute(new ColumnAttribute("PERSONID"))
					.Member(e => e.Firstname)
						.HasAttribute(new ColumnAttribute("FIRSTNAME"))
					.Member(e => e.Lastname)
						.HasAttribute(new ColumnAttribute("LASTNAME"))
					.Member(e => e.Middlename)
						.HasAttribute(new ColumnAttribute("MIDDLENAME"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("GENDER"));

			builder
				.Entity<ScalarDataReaderResult>()
					.Member(e => e.Intfield)
						.HasAttribute(new ColumnAttribute("INTFIELD"))
					.Member(e => e.Stringfield)
						.HasAttribute(new ColumnAttribute("STRINGFIELD"));

			builder
				.Entity<ScalarOutputParameterResult>()
					.Member(e => e.Outputint)
						.HasAttribute(new ColumnAttribute("OUTPUTINT"))
					.Member(e => e.Outputstring)
						.HasAttribute(new ColumnAttribute("OUTPUTSTRING"));

			builder
				.Entity<ScalarReturnParameterResult>()
					.Member(e => e.ReturnValue)
						.HasAttribute(new ColumnAttribute("RETURN_VALUE"));

			builder
				.Entity<TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestV4TypesResult>()
					.Member(e => e.ColTstz)
						.HasAttribute(new ColumnAttribute("COL_TSTZ"))
					.Member(e => e.ColTtz)
						.HasAttribute(new ColumnAttribute("COL_TTZ"))
					.Member(e => e.ColDecfloat16)
						.HasAttribute(new ColumnAttribute("COL_DECFLOAT16"))
					.Member(e => e.ColDecfloat34)
						.HasAttribute(new ColumnAttribute("COL_DECFLOAT34"))
					.Member(e => e.ColInt128)
						.HasAttribute(new ColumnAttribute("COL_INT_128"));

			builder
				.Entity<TestPackage1TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestPackage2TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.Person(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.Integ(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.HasAttribute(() => ExtensionMethods.Ltrim(default(string)), new Sql.FunctionAttribute("LTRIM")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Rtrim(default(string)), new Sql.FunctionAttribute("RTRIM")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestPackage1TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_PACKAGE1.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestPackage2TestFunction(default(int?)), new Sql.FunctionAttribute("TEST_PACKAGE2.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.OutRefEnumTest(default(string), default(string)), new Sql.TableFunctionAttribute("OutRefEnumTest"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.OutRefTest(default(int?), default(int?), default(string), default(string)), new Sql.TableFunctionAttribute("OutRefTest"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PatientSelectAll(), new Sql.TableFunctionAttribute("Patient_SelectAll"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PatientSelectByName(default(string), default(string)), new Sql.TableFunctionAttribute("Patient_SelectByName"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PersonInsert(default(string), default(string), default(string), default(char?)), new Sql.TableFunctionAttribute("Person_Insert"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PersonInsertOutputParameter(default(string), default(string), default(string), default(char?)), new Sql.TableFunctionAttribute("Person_Insert_OutputParameter"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PersonSelectAll(), new Sql.TableFunctionAttribute("Person_SelectAll"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PersonSelectByKey(default(int?)), new Sql.TableFunctionAttribute("Person_SelectByKey"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.PersonSelectByName(default(string), default(string)), new Sql.TableFunctionAttribute("Person_SelectByName"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.ScalarDataReader(), new Sql.TableFunctionAttribute("Scalar_DataReader"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.ScalarOutputParameter(), new Sql.TableFunctionAttribute("Scalar_OutputParameter"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.ScalarReturnParameter(), new Sql.TableFunctionAttribute("Scalar_ReturnParameter"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestV4Types(default(FbZonedDateTime?), default(FbZonedTime?), default(FbDecFloat?), default(FbDecFloat?), default(BigInteger?)), new Sql.TableFunctionAttribute("TEST_V4_TYPES"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_PACKAGE1"
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_PACKAGE2"
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<CamelCaseName>     CamelCaseNames      => this.GetTable<CamelCaseName>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>      DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Dual>              Duals               => this.GetTable<Dual>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<SequenceTest>      SequenceTests       => this.GetTable<SequenceTest>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<PersonView>        PersonViews         => this.GetTable<PersonView>();

		#region Table Functions
		#region OutRefEnumTest
		private static readonly MethodInfo _outRefEnumTest = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.OutRefEnumTest(default, default));

		public IQueryable<OutRefEnumTestResult> OutRefEnumTest(string? str, string? inInputoutputstr)
		{
			return this.GetTable<OutRefEnumTestResult>(this, _outRefEnumTest, str, inInputoutputstr);
		}

		public partial class OutRefEnumTestResult
		{
			public string? Inputoutputstr { get; set; }
			public string? Outputstr      { get; set; }
		}
		#endregion

		#region OutRefTest
		private static readonly MethodInfo _outRefTest = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.OutRefTest(default, default, default, default));

		public IQueryable<OutRefTestResult> OutRefTest(int? id, int? inInputoutputid, string? str, string? inInputoutputstr)
		{
			return this.GetTable<OutRefTestResult>(this, _outRefTest, id, inInputoutputid, str, inInputoutputstr);
		}

		public partial class OutRefTestResult
		{
			public int?    Inputoutputid  { get; set; }
			public string? Inputoutputstr { get; set; }
			public int?    Outputid       { get; set; }
			public string? Outputstr      { get; set; }
		}
		#endregion

		#region PatientSelectAll
		private static readonly MethodInfo _patientSelectAll = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PatientSelectAll());

		public IQueryable<PatientSelectAllResult> PatientSelectAll()
		{
			return this.GetTable<PatientSelectAllResult>(this, _patientSelectAll);
		}

		public partial class PatientSelectAllResult
		{
			public int?    Personid   { get; set; }
			public string? Firstname  { get; set; }
			public string? Lastname   { get; set; }
			public string? Middlename { get; set; }
			public string? Gender     { get; set; }
			public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PatientSelectByName
		private static readonly MethodInfo _patientSelectByName = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PatientSelectByName(default, default));

		public IQueryable<PatientSelectByNameResult> PatientSelectByName(string? firstname, string? lastname)
		{
			return this.GetTable<PatientSelectByNameResult>(this, _patientSelectByName, firstname, lastname);
		}

		public partial class PatientSelectByNameResult
		{
			public int?    Personid   { get; set; }
			public string? Middlename { get; set; }
			public string? Gender     { get; set; }
			public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PersonInsert
		private static readonly MethodInfo _personInsert = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonInsert(default, default, default, default));

		public IQueryable<PersonInsertResult> PersonInsert(string? firstname, string? lastname, string? middlename, char? gender)
		{
			return this.GetTable<PersonInsertResult>(this, _personInsert, firstname, lastname, middlename, gender);
		}

		public partial class PersonInsertResult
		{
			public int? Personid { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		private static readonly MethodInfo _personInsertOutputParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonInsertOutputParameter(default, default, default, default));

		public IQueryable<PersonInsertOutputParameterResult> PersonInsertOutputParameter(string? firstname, string? lastname, string? middlename, char? gender)
		{
			return this.GetTable<PersonInsertOutputParameterResult>(this, _personInsertOutputParameter, firstname, lastname, middlename, gender);
		}

		public partial class PersonInsertOutputParameterResult
		{
			public int? Personid { get; set; }
		}
		#endregion

		#region PersonSelectAll
		private static readonly MethodInfo _personSelectAll = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectAll());

		public IQueryable<PersonSelectAllResult> PersonSelectAll()
		{
			return this.GetTable<PersonSelectAllResult>(this, _personSelectAll);
		}

		public partial class PersonSelectAllResult
		{
			public int?    Personid   { get; set; }
			public string? Firstname  { get; set; }
			public string? Lastname   { get; set; }
			public string? Middlename { get; set; }
			public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		private static readonly MethodInfo _personSelectByKey = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectByKey(default));

		public IQueryable<PersonSelectByKeyResult> PersonSelectByKey(int? id)
		{
			return this.GetTable<PersonSelectByKeyResult>(this, _personSelectByKey, id);
		}

		public partial class PersonSelectByKeyResult
		{
			public int?    Personid   { get; set; }
			public string? Firstname  { get; set; }
			public string? Lastname   { get; set; }
			public string? Middlename { get; set; }
			public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByName
		private static readonly MethodInfo _personSelectByName = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectByName(default, default));

		public IQueryable<PersonSelectByNameResult> PersonSelectByName(string? inFirstname, string? inLastname)
		{
			return this.GetTable<PersonSelectByNameResult>(this, _personSelectByName, inFirstname, inLastname);
		}

		public partial class PersonSelectByNameResult
		{
			public int?    Personid   { get; set; }
			public string? Firstname  { get; set; }
			public string? Lastname   { get; set; }
			public string? Middlename { get; set; }
			public string? Gender     { get; set; }
		}
		#endregion

		#region ScalarDataReader
		private static readonly MethodInfo _scalarDataReader = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarDataReader());

		public IQueryable<ScalarDataReaderResult> ScalarDataReader()
		{
			return this.GetTable<ScalarDataReaderResult>(this, _scalarDataReader);
		}

		public partial class ScalarDataReaderResult
		{
			public int?    Intfield    { get; set; }
			public string? Stringfield { get; set; }
		}
		#endregion

		#region ScalarOutputParameter
		private static readonly MethodInfo _scalarOutputParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarOutputParameter());

		public IQueryable<ScalarOutputParameterResult> ScalarOutputParameter()
		{
			return this.GetTable<ScalarOutputParameterResult>(this, _scalarOutputParameter);
		}

		public partial class ScalarOutputParameterResult
		{
			public int?    Outputint    { get; set; }
			public string? Outputstring { get; set; }
		}
		#endregion

		#region ScalarReturnParameter
		private static readonly MethodInfo _scalarReturnParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarReturnParameter());

		public IQueryable<ScalarReturnParameterResult> ScalarReturnParameter()
		{
			return this.GetTable<ScalarReturnParameterResult>(this, _scalarReturnParameter);
		}

		public partial class ScalarReturnParameterResult
		{
			public int? ReturnValue { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestV4Types
		private static readonly MethodInfo _testV4Types = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestV4Types(default, default, default, default, default));

		public IQueryable<TestV4TypesResult> TestV4Types(FbZonedDateTime? tstz, FbZonedTime? ttz, FbDecFloat? decfloat16, FbDecFloat? decfloat34, BigInteger? int128)
		{
			return this.GetTable<TestV4TypesResult>(this, _testV4Types, tstz, ttz, decfloat16, decfloat34, int128);
		}

		public partial class TestV4TypesResult
		{
			public FbZonedDateTime? ColTstz       { get; set; }
			public FbZonedTime?     ColTtz        { get; set; }
			public FbDecFloat?      ColDecfloat16 { get; set; }
			public FbDecFloat?      ColDecfloat34 { get; set; }
			public BigInteger?      ColInt128     { get; set; }
		}
		#endregion

		#region TestPackage1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default));

		public IQueryable<TestPackage1TestTableFunctionResult> TestPackage1TestTableFunction(int? i)
		{
			return this.GetTable<TestPackage1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestPackage1TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestPackage2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default));

		public IQueryable<TestPackage2TestTableFunctionResult> TestPackage2TestTableFunction(int? i)
		{
			return this.GetTable<TestPackage2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestPackage2TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// INTEG_52 backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// INTEG_52
		/// </summary>
		public static Person Integ(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"AddIssue792Record\"");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("\"AddIssue792Record\"", cancellationToken);
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personid)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 4
				}
			};
			return dataConnection.ExecuteProc("\"Person_Delete\"", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, int? personid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 4
				}
			};
			return dataConnection.ExecuteProcAsync("\"Person_Delete\"", cancellationToken, parameters);
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personid, string? firstname, string? lastname, string? middlename, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.NChar)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("\"Person_Update\"", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, int? personid, string? firstname, string? lastname, string? middlename, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.NChar)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("\"Person_Update\"", cancellationToken, parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion

		#region TestPackage1TestProcedure
		public static int TestPackage1TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE1.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults1> TestPackage1TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE1.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults1()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults1
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion

		#region TestPackage2TestProcedure
		public static int TestPackage2TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE2.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults2> TestPackage2TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE2.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults2()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults2
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region Ltrim
		public static string? Ltrim(string? par2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Rtrim
		public static string? Rtrim(string? par4)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunction
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage1TestFunction
		public static int? TestPackage1TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage2TestFunction
		public static int? TestPackage2TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
