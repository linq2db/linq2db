// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.PostgreSQL
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			ContextSchema.SetConvertExpression<object?[], ExtensionMethods.TestFunctionParametersResult>(tuple => new ExtensionMethods.TestFunctionParametersResult()
			{
				Param2 = (int?)(tuple[0]),
				Param3 = (int?)(tuple[1])
			});
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.DoubleDataType)
						.HasAttribute(new ColumnAttribute("doubleDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.TimestampDataType)
						.HasAttribute(new ColumnAttribute("timestampDataType"))
					.Member(e => e.TimestampTzDataType)
						.HasAttribute(new ColumnAttribute("timestampTZDataType"))
					.Member(e => e.DateDataType)
						.HasAttribute(new ColumnAttribute("dateDataType"))
					.Member(e => e.TimeDataType)
						.HasAttribute(new ColumnAttribute("timeDataType"))
					.Member(e => e.TimeTzDataType)
						.HasAttribute(new ColumnAttribute("timeTZDataType"))
					.Member(e => e.IntervalDataType)
						.HasAttribute(new ColumnAttribute("intervalDataType"))
					.Member(e => e.IntervalDataType2)
						.HasAttribute(new ColumnAttribute("intervalDataType2"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.UuidDataType)
						.HasAttribute(new ColumnAttribute("uuidDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.BooleanDataType)
						.HasAttribute(new ColumnAttribute("booleanDataType"))
					.Member(e => e.ColorDataType)
						.HasAttribute(new ColumnAttribute("colorDataType"))
					.Member(e => e.PointDataType)
						.HasAttribute(new ColumnAttribute("pointDataType"))
					.Member(e => e.LsegDataType)
						.HasAttribute(new ColumnAttribute("lsegDataType"))
					.Member(e => e.BoxDataType)
						.HasAttribute(new ColumnAttribute("boxDataType"))
					.Member(e => e.PathDataType)
						.HasAttribute(new ColumnAttribute("pathDataType"))
					.Member(e => e.PolygonDataType)
						.HasAttribute(new ColumnAttribute("polygonDataType"))
					.Member(e => e.CircleDataType)
						.HasAttribute(new ColumnAttribute("circleDataType"))
					.Member(e => e.LineDataType)
						.HasAttribute(new ColumnAttribute("lineDataType"))
					.Member(e => e.InetDataType)
						.HasAttribute(new ColumnAttribute("inetDataType"))
					.Member(e => e.CidrDataType)
						.HasAttribute(new ColumnAttribute("cidrDataType"))
					.Member(e => e.MacaddrDataType)
						.HasAttribute(new ColumnAttribute("macaddrDataType"))
					.Member(e => e.Macaddr8DataType)
						.HasAttribute(new ColumnAttribute("macaddr8DataType"))
					.Member(e => e.JsonDataType)
						.HasAttribute(new ColumnAttribute("jsonDataType"))
					.Member(e => e.JsonbDataType)
						.HasAttribute(new ColumnAttribute("jsonbDataType"))
					.Member(e => e.XmlDataType)
						.HasAttribute(new ColumnAttribute("xmlDataType"))
					.Member(e => e.VarBitDataType)
						.HasAttribute(new ColumnAttribute("varBitDataType"))
					.Member(e => e.Strarray)
						.HasAttribute(new ColumnAttribute("strarray"))
					.Member(e => e.Intarray)
						.HasAttribute(new ColumnAttribute("intarray"))
					.Member(e => e.Int2Darray)
						.HasAttribute(new ColumnAttribute("int2darray"))
					.Member(e => e.Longarray)
						.HasAttribute(new ColumnAttribute("longarray"))
					.Member(e => e.Intervalarray)
						.HasAttribute(new ColumnAttribute("intervalarray"))
					.Member(e => e.Doublearray)
						.HasAttribute(new ColumnAttribute("doublearray"))
					.Member(e => e.Numericarray)
						.HasAttribute(new ColumnAttribute("numericarray"))
					.Member(e => e.Decimalarray)
						.HasAttribute(new ColumnAttribute("decimalarray"));

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<CollatedTable>()
					.HasAttribute(new TableAttribute("CollatedTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.CaseSensitive)
						.HasAttribute(new ColumnAttribute("CaseSensitive")
						{
							CanBeNull = false
						})
					.Member(e => e.CaseInsensitive)
						.HasAttribute(new ColumnAttribute("CaseInsensitive")
						{
							CanBeNull = false
						});

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.PersonIDfkey)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.PersonIDfkey)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<SequenceCustomNamingTest>()
					.HasAttribute(new TableAttribute("SequenceCustomNamingTest"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value"));

			builder
				.Entity<SequenceTest1>()
					.HasAttribute(new TableAttribute("SequenceTest1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value"));

			builder
				.Entity<SequenceTest2>()
					.HasAttribute(new TableAttribute("SequenceTest2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value"));

			builder
				.Entity<SequenceTest3>()
					.HasAttribute(new TableAttribute("SequenceTest3"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("Value"));

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldDate)
						.HasAttribute(new ColumnAttribute("FieldDate"))
					.Member(e => e.FieldTime)
						.HasAttribute(new ColumnAttribute("FieldTime"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMergeIdentity>()
					.HasAttribute(new TableAttribute("TestMergeIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Field)
						.HasAttribute(new ColumnAttribute("Field"));

			builder
				.Entity<Entity>()
					.HasAttribute(new TableAttribute("entity"))
					.Member(e => e.TheName)
						.HasAttribute(new ColumnAttribute("the_name")
						{
							CanBeNull = false
						});

			builder
				.Entity<SameName>()
					.HasAttribute(new TableAttribute("same_name"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.SameNames1)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(SameName.Id),
							OtherKey = nameof(PostgreSQL.SameName1.SameName)
						})
					.Member(e => e.SameNames2)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(SameName.Id),
							OtherKey = nameof(PostgreSQL.SameName2.SameName)
						});

			builder
				.Entity<SameName1>()
					.HasAttribute(new TableAttribute("same_name1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.SameName)
						.HasAttribute(new ColumnAttribute("same_name"))
					.Member(e => e.Samename)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(PostgreSQL.SameName1.SameName),
							OtherKey = nameof(SameName.Id)
						});

			builder
				.Entity<SameName2>()
					.HasAttribute(new TableAttribute("same_name2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.SameName)
						.HasAttribute(new ColumnAttribute("same_name"))
					.Member(e => e.Samename)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(PostgreSQL.SameName2.SameName),
							OtherKey = nameof(SameName.Id)
						});

			builder
				.Entity<Testsamename>()
					.HasAttribute(new TableAttribute("testsamename"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<Issue2023>()
					.HasAttribute(new TableAttribute("Issue2023")
					{
						IsView = true
					})
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender")
						{
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestSchemaSchema.TestSchemaIdentity>()
					.HasAttribute(new TableAttribute("TestSchemaIdentity")
					{
						Schema = "test_schema"
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestSchemaSchema.Testsamename>()
					.HasAttribute(new TableAttribute("testsamename")
					{
						Schema = "test_schema"
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("id")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<TestSchemaSchema.Testserialidentity>()
					.HasAttribute(new TableAttribute("testserialidentity")
					{
						Schema = "test_schema"
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						});

			builder
				.Entity<GetParentByIdResult>()
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<TestTableFunctionResult>()
					.Member(e => e.Param2)
						.HasAttribute(new ColumnAttribute("param2"));

			builder
				.Entity<TestTableFunction1Result>()
					.Member(e => e.Param3)
						.HasAttribute(new ColumnAttribute("param3"))
					.Member(e => e.Param4)
						.HasAttribute(new ColumnAttribute("param4"));

			builder
				.Entity<TestTableFunctionSchemaResult>()
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.DoubleDataType)
						.HasAttribute(new ColumnAttribute("doubleDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.TimestampDataType)
						.HasAttribute(new ColumnAttribute("timestampDataType"))
					.Member(e => e.TimestampTzDataType)
						.HasAttribute(new ColumnAttribute("timestampTZDataType"))
					.Member(e => e.DateDataType)
						.HasAttribute(new ColumnAttribute("dateDataType"))
					.Member(e => e.TimeDataType)
						.HasAttribute(new ColumnAttribute("timeDataType"))
					.Member(e => e.TimeTzDataType)
						.HasAttribute(new ColumnAttribute("timeTZDataType"))
					.Member(e => e.IntervalDataType)
						.HasAttribute(new ColumnAttribute("intervalDataType"))
					.Member(e => e.IntervalDataType2)
						.HasAttribute(new ColumnAttribute("intervalDataType2"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.UuidDataType)
						.HasAttribute(new ColumnAttribute("uuidDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.BooleanDataType)
						.HasAttribute(new ColumnAttribute("booleanDataType"))
					.Member(e => e.ColorDataType)
						.HasAttribute(new ColumnAttribute("colorDataType"))
					.Member(e => e.PointDataType)
						.HasAttribute(new ColumnAttribute("pointDataType"))
					.Member(e => e.LsegDataType)
						.HasAttribute(new ColumnAttribute("lsegDataType"))
					.Member(e => e.BoxDataType)
						.HasAttribute(new ColumnAttribute("boxDataType"))
					.Member(e => e.PathDataType)
						.HasAttribute(new ColumnAttribute("pathDataType"))
					.Member(e => e.PolygonDataType)
						.HasAttribute(new ColumnAttribute("polygonDataType"))
					.Member(e => e.CircleDataType)
						.HasAttribute(new ColumnAttribute("circleDataType"))
					.Member(e => e.LineDataType)
						.HasAttribute(new ColumnAttribute("lineDataType"))
					.Member(e => e.InetDataType)
						.HasAttribute(new ColumnAttribute("inetDataType"))
					.Member(e => e.CidrDataType)
						.HasAttribute(new ColumnAttribute("cidrDataType"))
					.Member(e => e.MacaddrDataType)
						.HasAttribute(new ColumnAttribute("macaddrDataType"))
					.Member(e => e.Macaddr8DataType)
						.HasAttribute(new ColumnAttribute("macaddr8DataType"))
					.Member(e => e.JsonDataType)
						.HasAttribute(new ColumnAttribute("jsonDataType"))
					.Member(e => e.JsonbDataType)
						.HasAttribute(new ColumnAttribute("jsonbDataType"))
					.Member(e => e.XmlDataType)
						.HasAttribute(new ColumnAttribute("xmlDataType"))
					.Member(e => e.VarBitDataType)
						.HasAttribute(new ColumnAttribute("varBitDataType"))
					.Member(e => e.Strarray)
						.HasAttribute(new ColumnAttribute("strarray"))
					.Member(e => e.Intarray)
						.HasAttribute(new ColumnAttribute("intarray"))
					.Member(e => e.Int2Darray)
						.HasAttribute(new ColumnAttribute("int2darray"))
					.Member(e => e.Longarray)
						.HasAttribute(new ColumnAttribute("longarray"))
					.Member(e => e.Intervalarray)
						.HasAttribute(new ColumnAttribute("intervalarray"))
					.Member(e => e.Doublearray)
						.HasAttribute(new ColumnAttribute("doublearray"))
					.Member(e => e.Numericarray)
						.HasAttribute(new ColumnAttribute("numericarray"))
					.Member(e => e.Decimalarray)
						.HasAttribute(new ColumnAttribute("decimalarray"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.PersonIDfkey(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.PersonIDfkey(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.HasAttribute<SameName1>(e => ExtensionMethods.Samename(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(PostgreSQL.SameName1.SameName),
				OtherKey = nameof(SameName.Id)
			});

			builder.HasAttribute<SameName>(e => ExtensionMethods.SameNames1(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(SameName.Id),
				OtherKey = nameof(PostgreSQL.SameName1.SameName)
			});

			builder.HasAttribute<SameName2>(e => ExtensionMethods.Samename(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(PostgreSQL.SameName2.SameName),
				OtherKey = nameof(SameName.Id)
			});

			builder.HasAttribute<SameName>(e => ExtensionMethods.SameNames2(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(SameName.Id),
				OtherKey = nameof(PostgreSQL.SameName2.SameName)
			});

			builder.HasAttribute(() => ExtensionMethods.TestFunctionParameters(default(int?), default(int?)), new Sql.FunctionAttribute("\"TestFunctionParameters\"")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestScalarFunction(default(int?)), new Sql.FunctionAttribute("\"TestScalarFunction\"")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestSingleOutParameterFunction(default(int?)), new Sql.FunctionAttribute("\"TestSingleOutParameterFunction\"")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.AddIfNotExists(default(string)), new Sql.FunctionAttribute("add_if_not_exists")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Addissue792Record(), new Sql.FunctionAttribute("addissue792record")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Bool(default(int?)), new Sql.FunctionAttribute("bool")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Issue1742Date(default(DateTime?)), new Sql.FunctionAttribute("issue_1742_date")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Issue1742Ts(default(DateTime?)), new Sql.FunctionAttribute("issue_1742_ts")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Issue1742Tstz(default(DateTimeOffset?)), new Sql.FunctionAttribute("issue_1742_tstz")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.Reverse(default(string)), new Sql.FunctionAttribute("reverse")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestAvg<object>(default(IEnumerable<object>)!, default(Expression<Func<object, double?>>)!), new Sql.FunctionAttribute("test_avg")
			{
				ServerSideOnly = true,
				IsAggregate = true,
				ArgIndices = new []{ 1 }
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.GetParentById(default(int?)), new Sql.TableFunctionAttribute("GetParentByID"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunction(default(int?)), new Sql.TableFunctionAttribute("TestTableFunction"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunction1(default(int?), default(int?)), new Sql.TableFunctionAttribute("TestTableFunction1"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunctionSchema(), new Sql.TableFunctionAttribute("TestTableFunctionSchema"));

			builder.HasAttribute(() => SchemaNameSchema.FnTest(default(int?)), new Sql.FunctionAttribute("\"SchemaName\".\"fnTest\"")
			{
				ServerSideOnly = true
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
			SchemaName = new SchemaNameSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		public SchemaNameSchema.DataContext SchemaName { get; set; } = null!;
		#endregion

		public ITable<AllType>                  AllTypes                  => this.GetTable<AllType>();
		public ITable<Child>                    Children                  => this.GetTable<Child>();
		public ITable<CollatedTable>            CollatedTables            => this.GetTable<CollatedTable>();
		public ITable<Doctor>                   Doctors                   => this.GetTable<Doctor>();
		public ITable<GrandChild>               GrandChildren             => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>         InheritanceChildren       => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>        InheritanceParents        => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>             LinqDataTypes             => this.GetTable<LinqDataType>();
		public ITable<Parent>                   Parents                   => this.GetTable<Parent>();
		public ITable<Patient>                  Patients                  => this.GetTable<Patient>();
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                   People                    => this.GetTable<Person>();
		public ITable<SequenceCustomNamingTest> SequenceCustomNamingTests => this.GetTable<SequenceCustomNamingTest>();
		public ITable<SequenceTest1>            SequenceTest1             => this.GetTable<SequenceTest1>();
		public ITable<SequenceTest2>            SequenceTest2             => this.GetTable<SequenceTest2>();
		public ITable<SequenceTest3>            SequenceTest3             => this.GetTable<SequenceTest3>();
		public ITable<TestIdentity>             TestIdentities            => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>               TestMerge1                => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>               TestMerge2                => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>        TestMergeIdentities       => this.GetTable<TestMergeIdentity>();
		public ITable<Entity>                   Entities                  => this.GetTable<Entity>();
		public ITable<SameName>                 SameNames                 => this.GetTable<SameName>();
		public ITable<SameName1>                SameName1                 => this.GetTable<SameName1>();
		public ITable<SameName2>                SameName2                 => this.GetTable<SameName2>();
		public ITable<Testsamename>             Testsamenames             => this.GetTable<Testsamename>();
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                Issue2023                 => this.GetTable<Issue2023>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		public IQueryable<GetParentByIdResult> GetParentById(int? id)
		{
			return this.GetTable<GetParentByIdResult>(this, _getParentById, id);
		}

		public partial class GetParentByIdResult
		{
			public int? ParentId { get; set; }
			public int? Value1   { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, param1);
		}

		public partial class TestTableFunctionResult
		{
			public int? Param2 { get; set; }
		}
		#endregion

		#region TestTableFunction1
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction1(default, default));

		public IQueryable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.GetTable<TestTableFunction1Result>(this, _testTableFunction1, param1, param2);
		}

		public partial class TestTableFunction1Result
		{
			public int? Param3 { get; set; }
			public int? Param4 { get; set; }
		}
		#endregion

		#region TestTableFunctionSchema
		private static readonly MethodInfo _testTableFunctionSchema = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunctionSchema());

		public IQueryable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.GetTable<TestTableFunctionSchemaResult>(this, _testTableFunctionSchema);
		}

		public partial class TestTableFunctionSchemaResult
		{
			public int?                        Id                  { get; set; }
			public long?                       BigintDataType      { get; set; }
			public decimal?                    NumericDataType     { get; set; }
			public short?                      SmallintDataType    { get; set; }
			public int?                        IntDataType         { get; set; }
			public decimal?                    MoneyDataType       { get; set; }
			public double?                     DoubleDataType      { get; set; }
			public float?                      RealDataType        { get; set; }
			public DateTime?                   TimestampDataType   { get; set; }
			public DateTimeOffset?             TimestampTzDataType { get; set; }
			public DateTime?                   DateDataType        { get; set; }
			public TimeSpan?                   TimeDataType        { get; set; }
			public DateTimeOffset?             TimeTzDataType      { get; set; }
			public TimeSpan?                   IntervalDataType    { get; set; }
			public TimeSpan?                   IntervalDataType2   { get; set; }
			public char?                       CharDataType        { get; set; }
			public string?                     Char20DataType      { get; set; }
			public string?                     VarcharDataType     { get; set; }
			public string?                     TextDataType        { get; set; }
			public byte[]?                     BinaryDataType      { get; set; }
			public Guid?                       UuidDataType        { get; set; }
			public BitArray?                   BitDataType         { get; set; }
			public bool?                       BooleanDataType     { get; set; }
			public string?                     ColorDataType       { get; set; }
			public NpgsqlPoint?                PointDataType       { get; set; }
			public NpgsqlLSeg?                 LsegDataType        { get; set; }
			public NpgsqlBox?                  BoxDataType         { get; set; }
			public NpgsqlPath?                 PathDataType        { get; set; }
			public NpgsqlPolygon?              PolygonDataType     { get; set; }
			public NpgsqlCircle?               CircleDataType      { get; set; }
			public NpgsqlLine?                 LineDataType        { get; set; }
			public IPAddress?                  InetDataType        { get; set; }
			public ValueTuple<IPAddress, int>? CidrDataType        { get; set; }
			public PhysicalAddress?            MacaddrDataType     { get; set; }
			public PhysicalAddress?            Macaddr8DataType    { get; set; }
			public string?                     JsonDataType        { get; set; }
			public string?                     JsonbDataType       { get; set; }
			public string?                     XmlDataType         { get; set; }
			public BitArray?                   VarBitDataType      { get; set; }
			public string[]?                   Strarray            { get; set; }
			public int[]?                      Intarray            { get; set; }
			public int[]?                      Int2Darray          { get; set; }
			public long[]?                     Longarray           { get; set; }
			public TimeSpan[]?                 Intervalarray       { get; set; }
			public double[]?                   Doublearray         { get; set; }
			public decimal[]?                  Numericarray        { get; set; }
			public decimal[]?                  Decimalarray        { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// Doctor_PersonID_fkey
		/// </summary>
		public static Person PersonIDfkey(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// Doctor_PersonID_fkey backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// Patient_PersonID_fkey backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// Patient_PersonID_fkey
		/// </summary>
		public static Person PersonIDfkey(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region SameName1 Associations
		/// <summary>
		/// same_name
		/// </summary>
		public static SameName? Samename(this SameName1 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion

		#region SameName Associations
		/// <summary>
		/// same_name backreference
		/// </summary>
		public static IQueryable<SameName1> SameNames1(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName1>().Where(t => t.SameName == obj.Id);
		}

		/// <summary>
		/// same_name backreference
		/// </summary>
		public static IQueryable<SameName2> SameNames2(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName2>().Where(t => t.SameName == obj.Id);
		}
		#endregion

		#region SameName2 Associations
		/// <summary>
		/// same_name
		/// </summary>
		public static SameName? Samename(this SameName2 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunctionParameters
		public static TestFunctionParametersResult? TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}

		public partial class TestFunctionParametersResult
		{
			public int? Param2 { get; set; }
			public int? Param3 { get; set; }
		}
		#endregion

		#region TestScalarFunction
		public static string? TestScalarFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestSingleOutParameterFunction
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region AddIfNotExists
		public static object? AddIfNotExists(string? pName)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Addissue792Record
		public static object? Addissue792Record()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Bool
		public static string? Bool(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Date
		public static int? Issue1742Date(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Ts
		public static int? Issue1742Ts(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Tstz
		public static int? Issue1742Tstz(DateTimeOffset? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Reverse
		public static string? Reverse(string? par7)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion

		#region Aggregate Functions
		#region TestAvg
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par9)
		{
			throw new InvalidOperationException("Association cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
