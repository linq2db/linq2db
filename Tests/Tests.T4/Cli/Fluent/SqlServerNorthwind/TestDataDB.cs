// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.SqlServerNorthwind
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<Category>()
					.HasAttribute(new TableAttribute("Categories"))
					.Member(e => e.CategoryId)
						.HasAttribute(new ColumnAttribute("CategoryID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						})
					.Member(e => e.Description)
						.HasAttribute(new ColumnAttribute("Description"))
					.Member(e => e.Picture)
						.HasAttribute(new ColumnAttribute("Picture"))
					.Member(e => e.Products)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Category.CategoryId),
							OtherKey = nameof(Product.CategoryId)
						});

			builder
				.Entity<CustomerCustomerDemo>()
					.HasAttribute(new TableAttribute("CustomerCustomerDemo"))
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID")
						{
							CanBeNull = false,
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.CustomerTypeId)
						.HasAttribute(new ColumnAttribute("CustomerTypeID")
						{
							CanBeNull = false,
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.FkCustomerCustomerDemo)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(CustomerCustomerDemo.CustomerTypeId),
							OtherKey = nameof(CustomerDemographic.CustomerTypeId)
						})
					.Member(e => e.Customers)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(CustomerCustomerDemo.CustomerId),
							OtherKey = nameof(Customer.CustomerId)
						});

			builder
				.Entity<CustomerDemographic>()
					.HasAttribute(new TableAttribute("CustomerDemographics"))
					.Member(e => e.CustomerTypeId)
						.HasAttribute(new ColumnAttribute("CustomerTypeID")
						{
							CanBeNull = false,
							IsPrimaryKey = true
						})
					.Member(e => e.CustomerDesc)
						.HasAttribute(new ColumnAttribute("CustomerDesc"))
					.Member(e => e.CustomerCustomerDemos)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(CustomerDemographic.CustomerTypeId),
							OtherKey = nameof(CustomerCustomerDemo.CustomerTypeId)
						});

			builder
				.Entity<Customer>()
					.HasAttribute(new TableAttribute("Customers"))
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID")
						{
							CanBeNull = false,
							IsPrimaryKey = true
						})
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.ContactName)
						.HasAttribute(new ColumnAttribute("ContactName"))
					.Member(e => e.ContactTitle)
						.HasAttribute(new ColumnAttribute("ContactTitle"))
					.Member(e => e.Address)
						.HasAttribute(new ColumnAttribute("Address"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Region)
						.HasAttribute(new ColumnAttribute("Region"))
					.Member(e => e.PostalCode)
						.HasAttribute(new ColumnAttribute("PostalCode"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"))
					.Member(e => e.Phone)
						.HasAttribute(new ColumnAttribute("Phone"))
					.Member(e => e.Fax)
						.HasAttribute(new ColumnAttribute("Fax"))
					.Member(e => e.CustomerCustomerDemos)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Customer.CustomerId),
							OtherKey = nameof(CustomerCustomerDemo.CustomerId)
						})
					.Member(e => e.Orders)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Customer.CustomerId),
							OtherKey = nameof(Order.CustomerId)
						});

			builder
				.Entity<EmployeeTerritory>()
					.HasAttribute(new TableAttribute("EmployeeTerritories"))
					.Member(e => e.EmployeeId)
						.HasAttribute(new ColumnAttribute("EmployeeID")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.TerritoryId)
						.HasAttribute(new ColumnAttribute("TerritoryID")
						{
							CanBeNull = false,
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.Employees)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(EmployeeTerritory.EmployeeId),
							OtherKey = nameof(Employee.EmployeeId)
						})
					.Member(e => e.Territories)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(EmployeeTerritory.TerritoryId),
							OtherKey = nameof(Territory.TerritoryId)
						});

			builder
				.Entity<Employee>()
					.HasAttribute(new TableAttribute("Employees"))
					.Member(e => e.EmployeeId)
						.HasAttribute(new ColumnAttribute("EmployeeID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.Title)
						.HasAttribute(new ColumnAttribute("Title"))
					.Member(e => e.TitleOfCourtesy)
						.HasAttribute(new ColumnAttribute("TitleOfCourtesy"))
					.Member(e => e.BirthDate)
						.HasAttribute(new ColumnAttribute("BirthDate"))
					.Member(e => e.HireDate)
						.HasAttribute(new ColumnAttribute("HireDate"))
					.Member(e => e.Address)
						.HasAttribute(new ColumnAttribute("Address"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Region)
						.HasAttribute(new ColumnAttribute("Region"))
					.Member(e => e.PostalCode)
						.HasAttribute(new ColumnAttribute("PostalCode"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"))
					.Member(e => e.HomePhone)
						.HasAttribute(new ColumnAttribute("HomePhone"))
					.Member(e => e.Extension)
						.HasAttribute(new ColumnAttribute("Extension"))
					.Member(e => e.Photo)
						.HasAttribute(new ColumnAttribute("Photo"))
					.Member(e => e.Notes)
						.HasAttribute(new ColumnAttribute("Notes"))
					.Member(e => e.ReportsTo)
						.HasAttribute(new ColumnAttribute("ReportsTo"))
					.Member(e => e.PhotoPath)
						.HasAttribute(new ColumnAttribute("PhotoPath"))
					.Member(e => e.Employees)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Employee.ReportsTo),
							OtherKey = nameof(Employee.EmployeeId)
						})
					.Member(e => e.Employees1)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Employee.EmployeeId),
							OtherKey = nameof(Employee.ReportsTo)
						})
					.Member(e => e.EmployeeTerritories)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Employee.EmployeeId),
							OtherKey = nameof(EmployeeTerritory.EmployeeId)
						})
					.Member(e => e.Orders)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Employee.EmployeeId),
							OtherKey = nameof(Order.EmployeeId)
						});

			builder
				.Entity<OrderDetail>()
					.HasAttribute(new TableAttribute("Order Details"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 0
						})
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID")
						{
							IsPrimaryKey = true,
							PrimaryKeyOrder = 1
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.Quantity)
						.HasAttribute(new ColumnAttribute("Quantity"))
					.Member(e => e.Discount)
						.HasAttribute(new ColumnAttribute("Discount"))
					.Member(e => e.OrderDetailsOrders)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(OrderDetail.OrderId),
							OtherKey = nameof(Order.OrderId)
						})
					.Member(e => e.OrderDetailsProducts)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(OrderDetail.ProductId),
							OtherKey = nameof(Product.ProductId)
						});

			builder
				.Entity<Order>()
					.HasAttribute(new TableAttribute("Orders"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID"))
					.Member(e => e.EmployeeId)
						.HasAttribute(new ColumnAttribute("EmployeeID"))
					.Member(e => e.OrderDate)
						.HasAttribute(new ColumnAttribute("OrderDate"))
					.Member(e => e.RequiredDate)
						.HasAttribute(new ColumnAttribute("RequiredDate"))
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.ShipVia)
						.HasAttribute(new ColumnAttribute("ShipVia"))
					.Member(e => e.Freight)
						.HasAttribute(new ColumnAttribute("Freight"))
					.Member(e => e.ShipName)
						.HasAttribute(new ColumnAttribute("ShipName"))
					.Member(e => e.ShipAddress)
						.HasAttribute(new ColumnAttribute("ShipAddress"))
					.Member(e => e.ShipCity)
						.HasAttribute(new ColumnAttribute("ShipCity"))
					.Member(e => e.ShipRegion)
						.HasAttribute(new ColumnAttribute("ShipRegion"))
					.Member(e => e.ShipPostalCode)
						.HasAttribute(new ColumnAttribute("ShipPostalCode"))
					.Member(e => e.ShipCountry)
						.HasAttribute(new ColumnAttribute("ShipCountry"))
					.Member(e => e.OrderDetails)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Order.OrderId),
							OtherKey = nameof(OrderDetail.OrderId)
						})
					.Member(e => e.Customer)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Order.CustomerId),
							OtherKey = nameof(Customer.CustomerId)
						})
					.Member(e => e.Employee)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Order.EmployeeId),
							OtherKey = nameof(Employee.EmployeeId)
						})
					.Member(e => e.Shippers)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Order.ShipVia),
							OtherKey = nameof(Shipper.ShipperId)
						});

			builder
				.Entity<Product>()
					.HasAttribute(new TableAttribute("Products"))
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.SupplierId)
						.HasAttribute(new ColumnAttribute("SupplierID"))
					.Member(e => e.CategoryId)
						.HasAttribute(new ColumnAttribute("CategoryID"))
					.Member(e => e.QuantityPerUnit)
						.HasAttribute(new ColumnAttribute("QuantityPerUnit"))
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.UnitsInStock)
						.HasAttribute(new ColumnAttribute("UnitsInStock"))
					.Member(e => e.UnitsOnOrder)
						.HasAttribute(new ColumnAttribute("UnitsOnOrder"))
					.Member(e => e.ReorderLevel)
						.HasAttribute(new ColumnAttribute("ReorderLevel"))
					.Member(e => e.Discontinued)
						.HasAttribute(new ColumnAttribute("Discontinued"))
					.Member(e => e.OrderDetails)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Product.ProductId),
							OtherKey = nameof(OrderDetail.ProductId)
						})
					.Member(e => e.Category)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Product.CategoryId),
							OtherKey = nameof(Category.CategoryId)
						})
					.Member(e => e.Supplier)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Product.SupplierId),
							OtherKey = nameof(Supplier.SupplierId)
						});

			builder
				.Entity<Region>()
					.HasAttribute(new TableAttribute("Region"))
					.Member(e => e.RegionId)
						.HasAttribute(new ColumnAttribute("RegionID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.RegionDescription)
						.HasAttribute(new ColumnAttribute("RegionDescription")
						{
							CanBeNull = false
						})
					.Member(e => e.Territories)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Region.RegionId),
							OtherKey = nameof(Territory.RegionId)
						});

			builder
				.Entity<Shipper>()
					.HasAttribute(new TableAttribute("Shippers"))
					.Member(e => e.ShipperId)
						.HasAttribute(new ColumnAttribute("ShipperID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.Phone)
						.HasAttribute(new ColumnAttribute("Phone"))
					.Member(e => e.Orders)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Shipper.ShipperId),
							OtherKey = nameof(Order.ShipVia)
						});

			builder
				.Entity<Supplier>()
					.HasAttribute(new TableAttribute("Suppliers"))
					.Member(e => e.SupplierId)
						.HasAttribute(new ColumnAttribute("SupplierID")
						{
							IsPrimaryKey = true,
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.ContactName)
						.HasAttribute(new ColumnAttribute("ContactName"))
					.Member(e => e.ContactTitle)
						.HasAttribute(new ColumnAttribute("ContactTitle"))
					.Member(e => e.Address)
						.HasAttribute(new ColumnAttribute("Address"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Region)
						.HasAttribute(new ColumnAttribute("Region"))
					.Member(e => e.PostalCode)
						.HasAttribute(new ColumnAttribute("PostalCode"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"))
					.Member(e => e.Phone)
						.HasAttribute(new ColumnAttribute("Phone"))
					.Member(e => e.Fax)
						.HasAttribute(new ColumnAttribute("Fax"))
					.Member(e => e.HomePage)
						.HasAttribute(new ColumnAttribute("HomePage"))
					.Member(e => e.Products)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Supplier.SupplierId),
							OtherKey = nameof(Product.SupplierId)
						});

			builder
				.Entity<Territory>()
					.HasAttribute(new TableAttribute("Territories"))
					.Member(e => e.TerritoryId)
						.HasAttribute(new ColumnAttribute("TerritoryID")
						{
							CanBeNull = false,
							IsPrimaryKey = true
						})
					.Member(e => e.TerritoryDescription)
						.HasAttribute(new ColumnAttribute("TerritoryDescription")
						{
							CanBeNull = false
						})
					.Member(e => e.RegionId)
						.HasAttribute(new ColumnAttribute("RegionID"))
					.Member(e => e.EmployeeTerritories)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Territory.TerritoryId),
							OtherKey = nameof(EmployeeTerritory.TerritoryId)
						})
					.Member(e => e.Region)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Territory.RegionId),
							OtherKey = nameof(Region.RegionId)
						});

			builder
				.Entity<AlphabeticalListOfProduct>()
					.HasAttribute(new TableAttribute("Alphabetical list of products")
					{
						IsView = true
					})
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID"))
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.SupplierId)
						.HasAttribute(new ColumnAttribute("SupplierID"))
					.Member(e => e.CategoryId)
						.HasAttribute(new ColumnAttribute("CategoryID"))
					.Member(e => e.QuantityPerUnit)
						.HasAttribute(new ColumnAttribute("QuantityPerUnit"))
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.UnitsInStock)
						.HasAttribute(new ColumnAttribute("UnitsInStock"))
					.Member(e => e.UnitsOnOrder)
						.HasAttribute(new ColumnAttribute("UnitsOnOrder"))
					.Member(e => e.ReorderLevel)
						.HasAttribute(new ColumnAttribute("ReorderLevel"))
					.Member(e => e.Discontinued)
						.HasAttribute(new ColumnAttribute("Discontinued"))
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						});

			builder
				.Entity<CategorySalesFor1997>()
					.HasAttribute(new TableAttribute("Category Sales for 1997")
					{
						IsView = true
					})
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						})
					.Member(e => e.CategorySales)
						.HasAttribute(new ColumnAttribute("CategorySales"));

			builder
				.Entity<CurrentProductList>()
					.HasAttribute(new TableAttribute("Current Product List")
					{
						IsView = true
					})
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID")
						{
							IsIdentity = true,
							SkipOnInsert = true,
							SkipOnUpdate = true
						})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						});

			builder
				.Entity<CustomerAndSuppliersByCity>()
					.HasAttribute(new TableAttribute("Customer and Suppliers by City")
					{
						IsView = true
					})
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.ContactName)
						.HasAttribute(new ColumnAttribute("ContactName"))
					.Member(e => e.Relationship)
						.HasAttribute(new ColumnAttribute("Relationship")
						{
							CanBeNull = false
						});

			builder
				.Entity<Invoice>()
					.HasAttribute(new TableAttribute("Invoices")
					{
						IsView = true
					})
					.Member(e => e.ShipName)
						.HasAttribute(new ColumnAttribute("ShipName"))
					.Member(e => e.ShipAddress)
						.HasAttribute(new ColumnAttribute("ShipAddress"))
					.Member(e => e.ShipCity)
						.HasAttribute(new ColumnAttribute("ShipCity"))
					.Member(e => e.ShipRegion)
						.HasAttribute(new ColumnAttribute("ShipRegion"))
					.Member(e => e.ShipPostalCode)
						.HasAttribute(new ColumnAttribute("ShipPostalCode"))
					.Member(e => e.ShipCountry)
						.HasAttribute(new ColumnAttribute("ShipCountry"))
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID"))
					.Member(e => e.CustomerName)
						.HasAttribute(new ColumnAttribute("CustomerName")
						{
							CanBeNull = false
						})
					.Member(e => e.Address)
						.HasAttribute(new ColumnAttribute("Address"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Region)
						.HasAttribute(new ColumnAttribute("Region"))
					.Member(e => e.PostalCode)
						.HasAttribute(new ColumnAttribute("PostalCode"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"))
					.Member(e => e.Salesperson)
						.HasAttribute(new ColumnAttribute("Salesperson")
						{
							CanBeNull = false
						})
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.OrderDate)
						.HasAttribute(new ColumnAttribute("OrderDate"))
					.Member(e => e.RequiredDate)
						.HasAttribute(new ColumnAttribute("RequiredDate"))
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.ShipperName)
						.HasAttribute(new ColumnAttribute("ShipperName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID"))
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.Quantity)
						.HasAttribute(new ColumnAttribute("Quantity"))
					.Member(e => e.Discount)
						.HasAttribute(new ColumnAttribute("Discount"))
					.Member(e => e.ExtendedPrice)
						.HasAttribute(new ColumnAttribute("ExtendedPrice"))
					.Member(e => e.Freight)
						.HasAttribute(new ColumnAttribute("Freight"));

			builder
				.Entity<OrderDetailsExtended>()
					.HasAttribute(new TableAttribute("Order Details Extended")
					{
						IsView = true
					})
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.ProductId)
						.HasAttribute(new ColumnAttribute("ProductID"))
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.Quantity)
						.HasAttribute(new ColumnAttribute("Quantity"))
					.Member(e => e.Discount)
						.HasAttribute(new ColumnAttribute("Discount"))
					.Member(e => e.ExtendedPrice)
						.HasAttribute(new ColumnAttribute("ExtendedPrice"));

			builder
				.Entity<OrderSubtotal>()
					.HasAttribute(new TableAttribute("Order Subtotals")
					{
						IsView = true
					})
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.Subtotal)
						.HasAttribute(new ColumnAttribute("Subtotal"));

			builder
				.Entity<OrdersQry>()
					.HasAttribute(new TableAttribute("Orders Qry")
					{
						IsView = true
					})
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID"))
					.Member(e => e.EmployeeId)
						.HasAttribute(new ColumnAttribute("EmployeeID"))
					.Member(e => e.OrderDate)
						.HasAttribute(new ColumnAttribute("OrderDate"))
					.Member(e => e.RequiredDate)
						.HasAttribute(new ColumnAttribute("RequiredDate"))
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.ShipVia)
						.HasAttribute(new ColumnAttribute("ShipVia"))
					.Member(e => e.Freight)
						.HasAttribute(new ColumnAttribute("Freight"))
					.Member(e => e.ShipName)
						.HasAttribute(new ColumnAttribute("ShipName"))
					.Member(e => e.ShipAddress)
						.HasAttribute(new ColumnAttribute("ShipAddress"))
					.Member(e => e.ShipCity)
						.HasAttribute(new ColumnAttribute("ShipCity"))
					.Member(e => e.ShipRegion)
						.HasAttribute(new ColumnAttribute("ShipRegion"))
					.Member(e => e.ShipPostalCode)
						.HasAttribute(new ColumnAttribute("ShipPostalCode"))
					.Member(e => e.ShipCountry)
						.HasAttribute(new ColumnAttribute("ShipCountry"))
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.Address)
						.HasAttribute(new ColumnAttribute("Address"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Region)
						.HasAttribute(new ColumnAttribute("Region"))
					.Member(e => e.PostalCode)
						.HasAttribute(new ColumnAttribute("PostalCode"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"));

			builder
				.Entity<ProductSalesFor1997>()
					.HasAttribute(new TableAttribute("Product Sales for 1997")
					{
						IsView = true
					})
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductSales)
						.HasAttribute(new ColumnAttribute("ProductSales"));

			builder
				.Entity<ProductsAboveAveragePrice>()
					.HasAttribute(new TableAttribute("Products Above Average Price")
					{
						IsView = true
					})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"));

			builder
				.Entity<ProductsByCategory>()
					.HasAttribute(new TableAttribute("Products by Category")
					{
						IsView = true
					})
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.QuantityPerUnit)
						.HasAttribute(new ColumnAttribute("QuantityPerUnit"))
					.Member(e => e.UnitsInStock)
						.HasAttribute(new ColumnAttribute("UnitsInStock"))
					.Member(e => e.Discontinued)
						.HasAttribute(new ColumnAttribute("Discontinued"));

			builder
				.Entity<QuarterlyOrder>()
					.HasAttribute(new TableAttribute("Quarterly Orders")
					{
						IsView = true
					})
					.Member(e => e.CustomerId)
						.HasAttribute(new ColumnAttribute("CustomerID"))
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName"))
					.Member(e => e.City)
						.HasAttribute(new ColumnAttribute("City"))
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"));

			builder
				.Entity<SalesTotalsByAmount>()
					.HasAttribute(new TableAttribute("Sales Totals by Amount")
					{
						IsView = true
					})
					.Member(e => e.SaleAmount)
						.HasAttribute(new ColumnAttribute("SaleAmount"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.CompanyName)
						.HasAttribute(new ColumnAttribute("CompanyName")
						{
							CanBeNull = false
						})
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"));

			builder
				.Entity<SalesByCategory>()
					.HasAttribute(new TableAttribute("Sales by Category")
					{
						IsView = true
					})
					.Member(e => e.CategoryId)
						.HasAttribute(new ColumnAttribute("CategoryID"))
					.Member(e => e.CategoryName)
						.HasAttribute(new ColumnAttribute("CategoryName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.ProductSales)
						.HasAttribute(new ColumnAttribute("ProductSales"));

			builder
				.Entity<SummaryOfSalesByQuarter>()
					.HasAttribute(new TableAttribute("Summary of Sales by Quarter")
					{
						IsView = true
					})
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.Subtotal)
						.HasAttribute(new ColumnAttribute("Subtotal"));

			builder
				.Entity<SummaryOfSalesByYear>()
					.HasAttribute(new TableAttribute("Summary of Sales by Year")
					{
						IsView = true
					})
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.Subtotal)
						.HasAttribute(new ColumnAttribute("Subtotal"));

			builder
				.Entity<ExtensionMethods.CustOrderHistResult>()
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.Total)
						.HasAttribute(new ColumnAttribute("Total"));

			builder
				.Entity<ExtensionMethods.CustOrdersDetailResult>()
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"))
					.Member(e => e.Quantity)
						.HasAttribute(new ColumnAttribute("Quantity"))
					.Member(e => e.Discount)
						.HasAttribute(new ColumnAttribute("Discount"))
					.Member(e => e.ExtendedPrice)
						.HasAttribute(new ColumnAttribute("ExtendedPrice"));

			builder
				.Entity<ExtensionMethods.CustOrdersOrdersResult>()
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.OrderDate)
						.HasAttribute(new ColumnAttribute("OrderDate"))
					.Member(e => e.RequiredDate)
						.HasAttribute(new ColumnAttribute("RequiredDate"))
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"));

			builder
				.Entity<ExtensionMethods.EmployeeSalesByCountryResult>()
					.Member(e => e.Country)
						.HasAttribute(new ColumnAttribute("Country"))
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.SaleAmount)
						.HasAttribute(new ColumnAttribute("SaleAmount"));

			builder
				.Entity<ExtensionMethods.SalesByYearResult>()
					.Member(e => e.ShippedDate)
						.HasAttribute(new ColumnAttribute("ShippedDate"))
					.Member(e => e.OrderId)
						.HasAttribute(new ColumnAttribute("OrderID"))
					.Member(e => e.Subtotal)
						.HasAttribute(new ColumnAttribute("Subtotal"))
					.Member(e => e.Year)
						.HasAttribute(new ColumnAttribute("Year"));

			builder
				.Entity<ExtensionMethods.SalesByCategoryResult>()
					.Member(e => e.ProductName)
						.HasAttribute(new ColumnAttribute("ProductName")
						{
							CanBeNull = false
						})
					.Member(e => e.TotalPurchase)
						.HasAttribute(new ColumnAttribute("TotalPurchase"));

			builder
				.Entity<ExtensionMethods.TenMostExpensiveProductsResult>()
					.Member(e => e.TenMostExpensiveProducts)
						.HasAttribute(new ColumnAttribute("TenMostExpensiveProducts")
						{
							CanBeNull = false
						})
					.Member(e => e.UnitPrice)
						.HasAttribute(new ColumnAttribute("UnitPrice"));

			builder.HasAttribute<CustomerCustomerDemo>(e => ExtensionMethods.FkCustomerCustomerDemo(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(CustomerCustomerDemo.CustomerTypeId),
				OtherKey = nameof(CustomerDemographic.CustomerTypeId)
			});

			builder.HasAttribute<CustomerDemographic>(e => ExtensionMethods.CustomerCustomerDemos(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(CustomerDemographic.CustomerTypeId),
				OtherKey = nameof(CustomerCustomerDemo.CustomerTypeId)
			});

			builder.HasAttribute<CustomerCustomerDemo>(e => ExtensionMethods.Customers(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(CustomerCustomerDemo.CustomerId),
				OtherKey = nameof(Customer.CustomerId)
			});

			builder.HasAttribute<Customer>(e => ExtensionMethods.CustomerCustomerDemos(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Customer.CustomerId),
				OtherKey = nameof(CustomerCustomerDemo.CustomerId)
			});

			builder.HasAttribute<Employee>(e => ExtensionMethods.Employees(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Employee.ReportsTo),
				OtherKey = nameof(Employee.EmployeeId)
			});

			builder.HasAttribute<Employee>(e => ExtensionMethods.Employees1(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Employee.EmployeeId),
				OtherKey = nameof(Employee.ReportsTo)
			});

			builder.HasAttribute<EmployeeTerritory>(e => ExtensionMethods.Employees(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(EmployeeTerritory.EmployeeId),
				OtherKey = nameof(Employee.EmployeeId)
			});

			builder.HasAttribute<Employee>(e => ExtensionMethods.EmployeeTerritories(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Employee.EmployeeId),
				OtherKey = nameof(EmployeeTerritory.EmployeeId)
			});

			builder.HasAttribute<EmployeeTerritory>(e => ExtensionMethods.Territories(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(EmployeeTerritory.TerritoryId),
				OtherKey = nameof(Territory.TerritoryId)
			});

			builder.HasAttribute<Territory>(e => ExtensionMethods.EmployeeTerritories(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Territory.TerritoryId),
				OtherKey = nameof(EmployeeTerritory.TerritoryId)
			});

			builder.HasAttribute<OrderDetail>(e => ExtensionMethods.OrderDetailsOrders(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(OrderDetail.OrderId),
				OtherKey = nameof(Order.OrderId)
			});

			builder.HasAttribute<Order>(e => ExtensionMethods.OrderDetails(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Order.OrderId),
				OtherKey = nameof(OrderDetail.OrderId)
			});

			builder.HasAttribute<OrderDetail>(e => ExtensionMethods.OrderDetailsProducts(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(OrderDetail.ProductId),
				OtherKey = nameof(Product.ProductId)
			});

			builder.HasAttribute<Product>(e => ExtensionMethods.OrderDetails1(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Product.ProductId),
				OtherKey = nameof(OrderDetail.ProductId)
			});

			builder.HasAttribute<Order>(e => ExtensionMethods.Customer(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Order.CustomerId),
				OtherKey = nameof(Customer.CustomerId)
			});

			builder.HasAttribute<Customer>(e => ExtensionMethods.Orders(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Customer.CustomerId),
				OtherKey = nameof(Order.CustomerId)
			});

			builder.HasAttribute<Order>(e => ExtensionMethods.Employee(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Order.EmployeeId),
				OtherKey = nameof(Employee.EmployeeId)
			});

			builder.HasAttribute<Employee>(e => ExtensionMethods.Orders(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Employee.EmployeeId),
				OtherKey = nameof(Order.EmployeeId)
			});

			builder.HasAttribute<Order>(e => ExtensionMethods.Shippers(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Order.ShipVia),
				OtherKey = nameof(Shipper.ShipperId)
			});

			builder.HasAttribute<Shipper>(e => ExtensionMethods.Orders(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Shipper.ShipperId),
				OtherKey = nameof(Order.ShipVia)
			});

			builder.HasAttribute<Product>(e => ExtensionMethods.Category(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Product.CategoryId),
				OtherKey = nameof(Category.CategoryId)
			});

			builder.HasAttribute<Category>(e => ExtensionMethods.Products(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Category.CategoryId),
				OtherKey = nameof(Product.CategoryId)
			});

			builder.HasAttribute<Product>(e => ExtensionMethods.Supplier(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Product.SupplierId),
				OtherKey = nameof(Supplier.SupplierId)
			});

			builder.HasAttribute<Supplier>(e => ExtensionMethods.Products(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Supplier.SupplierId),
				OtherKey = nameof(Product.SupplierId)
			});

			builder.HasAttribute<Territory>(e => ExtensionMethods.Region(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Territory.RegionId),
				OtherKey = nameof(Region.RegionId)
			});

			builder.HasAttribute<Region>(e => ExtensionMethods.Territories(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Region.RegionId),
				OtherKey = nameof(Territory.RegionId)
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Category>                   Categories                   => this.GetTable<Category>();
		public ITable<CustomerCustomerDemo>       CustomerCustomerDemos        => this.GetTable<CustomerCustomerDemo>();
		public ITable<CustomerDemographic>        CustomerDemographics         => this.GetTable<CustomerDemographic>();
		public ITable<Customer>                   Customers                    => this.GetTable<Customer>();
		public ITable<EmployeeTerritory>          EmployeeTerritories          => this.GetTable<EmployeeTerritory>();
		public ITable<Employee>                   Employees                    => this.GetTable<Employee>();
		public ITable<OrderDetail>                OrderDetails                 => this.GetTable<OrderDetail>();
		public ITable<Order>                      Orders                       => this.GetTable<Order>();
		public ITable<Product>                    Products                     => this.GetTable<Product>();
		public ITable<Region>                     Regions                      => this.GetTable<Region>();
		public ITable<Shipper>                    Shippers                     => this.GetTable<Shipper>();
		public ITable<Supplier>                   Suppliers                    => this.GetTable<Supplier>();
		public ITable<Territory>                  Territories                  => this.GetTable<Territory>();
		public ITable<AlphabeticalListOfProduct>  AlphabeticalListOfProducts   => this.GetTable<AlphabeticalListOfProduct>();
		public ITable<CategorySalesFor1997>       CategorySalesFor1997         => this.GetTable<CategorySalesFor1997>();
		public ITable<CurrentProductList>         CurrentProductLists          => this.GetTable<CurrentProductList>();
		public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities => this.GetTable<CustomerAndSuppliersByCity>();
		public ITable<Invoice>                    Invoices                     => this.GetTable<Invoice>();
		public ITable<OrderDetailsExtended>       OrderDetailsExtendeds        => this.GetTable<OrderDetailsExtended>();
		public ITable<OrderSubtotal>              OrderSubtotals               => this.GetTable<OrderSubtotal>();
		public ITable<OrdersQry>                  OrdersQries                  => this.GetTable<OrdersQry>();
		public ITable<ProductSalesFor1997>        ProductSalesFor1997          => this.GetTable<ProductSalesFor1997>();
		public ITable<ProductsAboveAveragePrice>  ProductsAboveAveragePrices   => this.GetTable<ProductsAboveAveragePrice>();
		public ITable<ProductsByCategory>         ProductsByCategories         => this.GetTable<ProductsByCategory>();
		public ITable<QuarterlyOrder>             QuarterlyOrders              => this.GetTable<QuarterlyOrder>();
		public ITable<SalesTotalsByAmount>        SalesTotalsByAmounts         => this.GetTable<SalesTotalsByAmount>();
		public ITable<SalesByCategory>            SalesByCategories            => this.GetTable<SalesByCategory>();
		public ITable<SummaryOfSalesByQuarter>    SummaryOfSalesByQuarters     => this.GetTable<SummaryOfSalesByQuarter>();
		public ITable<SummaryOfSalesByYear>       SummaryOfSalesByYears        => this.GetTable<SummaryOfSalesByYear>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region CustomerCustomerDemo Associations
		/// <summary>
		/// FK_CustomerCustomerDemo
		/// </summary>
		public static CustomerDemographic FkCustomerCustomerDemo(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<CustomerDemographic>().First(t => obj.CustomerTypeId == t.CustomerTypeId);
		}

		/// <summary>
		/// FK_CustomerCustomerDemo_Customers
		/// </summary>
		public static Customer Customers(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<Customer>().First(t => obj.CustomerId == t.CustomerId);
		}
		#endregion

		#region CustomerDemographic Associations
		/// <summary>
		/// FK_CustomerCustomerDemo backreference
		/// </summary>
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this CustomerDemographic obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerTypeId == obj.CustomerTypeId);
		}
		#endregion

		#region Customer Associations
		/// <summary>
		/// FK_CustomerCustomerDemo_Customers backreference
		/// </summary>
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this Customer obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerId == obj.CustomerId);
		}

		/// <summary>
		/// FK_Orders_Customers backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Customer obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.CustomerId == obj.CustomerId);
		}
		#endregion

		#region Employee Associations
		/// <summary>
		/// FK_Employees_Employees
		/// </summary>
		public static Employee? Employees(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.ReportsTo == t.EmployeeId);
		}

		/// <summary>
		/// FK_Employees_Employees backreference
		/// </summary>
		public static IQueryable<Employee> Employees1(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().Where(t => t.ReportsTo == obj.EmployeeId);
		}

		/// <summary>
		/// FK_EmployeeTerritories_Employees backreference
		/// </summary>
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Employee obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.EmployeeId == obj.EmployeeId);
		}

		/// <summary>
		/// FK_Orders_Employees backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Employee obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.EmployeeId == obj.EmployeeId);
		}
		#endregion

		#region EmployeeTerritory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Employees
		/// </summary>
		public static Employee Employees(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Employee>().First(t => obj.EmployeeId == t.EmployeeId);
		}

		/// <summary>
		/// FK_EmployeeTerritories_Territories
		/// </summary>
		public static Territory Territories(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Territory>().First(t => obj.TerritoryId == t.TerritoryId);
		}
		#endregion

		#region Territory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Territories backreference
		/// </summary>
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Territory obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.TerritoryId == obj.TerritoryId);
		}

		/// <summary>
		/// FK_Territories_Region
		/// </summary>
		public static Region Region(this Territory obj, IDataContext db)
		{
			return db.GetTable<Region>().First(t => obj.RegionId == t.RegionId);
		}
		#endregion

		#region Order Detail Associations
		/// <summary>
		/// FK_Order_Details_Orders
		/// </summary>
		public static Order OrderDetailsOrders(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Order>().First(t => obj.OrderId == t.OrderId);
		}

		/// <summary>
		/// FK_Order_Details_Products
		/// </summary>
		public static Product OrderDetailsProducts(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Product>().First(t => obj.ProductId == t.ProductId);
		}
		#endregion

		#region Order Associations
		/// <summary>
		/// FK_Order_Details_Orders backreference
		/// </summary>
		public static IQueryable<OrderDetail> OrderDetails(this Order obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.OrderId == obj.OrderId);
		}

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		public static Customer? Customer(this Order obj, IDataContext db)
		{
			return db.GetTable<Customer>().FirstOrDefault(t => obj.CustomerId == t.CustomerId);
		}

		/// <summary>
		/// FK_Orders_Employees
		/// </summary>
		public static Employee? Employee(this Order obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.EmployeeId == t.EmployeeId);
		}

		/// <summary>
		/// FK_Orders_Shippers
		/// </summary>
		public static Shipper? Shippers(this Order obj, IDataContext db)
		{
			return db.GetTable<Shipper>().FirstOrDefault(t => obj.ShipVia == t.ShipperId);
		}
		#endregion

		#region Product Associations
		/// <summary>
		/// FK_Order_Details_Products backreference
		/// </summary>
		public static IQueryable<OrderDetail> OrderDetails1(this Product obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.ProductId == obj.ProductId);
		}

		/// <summary>
		/// FK_Products_Categories
		/// </summary>
		public static Category? Category(this Product obj, IDataContext db)
		{
			return db.GetTable<Category>().FirstOrDefault(t => obj.CategoryId == t.CategoryId);
		}

		/// <summary>
		/// FK_Products_Suppliers
		/// </summary>
		public static Supplier? Supplier(this Product obj, IDataContext db)
		{
			return db.GetTable<Supplier>().FirstOrDefault(t => obj.SupplierId == t.SupplierId);
		}
		#endregion

		#region Shipper Associations
		/// <summary>
		/// FK_Orders_Shippers backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Shipper obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.ShipVia == obj.ShipperId);
		}
		#endregion

		#region Category Associations
		/// <summary>
		/// FK_Products_Categories backreference
		/// </summary>
		public static IQueryable<Product> Products(this Category obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.CategoryId == obj.CategoryId);
		}
		#endregion

		#region Supplier Associations
		/// <summary>
		/// FK_Products_Suppliers backreference
		/// </summary>
		public static IQueryable<Product> Products(this Supplier obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.SupplierId == obj.SupplierId);
		}
		#endregion

		#region Region Associations
		/// <summary>
		/// FK_Territories_Region backreference
		/// </summary>
		public static IQueryable<Territory> Territories(this Region obj, IDataContext db)
		{
			return db.GetTable<Territory>().Where(t => t.RegionId == obj.RegionId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region CustOrderHist
		public static IEnumerable<CustOrderHistResult> CustOrderHist(this TestDataDB dataConnection, string? customerId)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProc<CustOrderHistResult>("[CustOrderHist]", parameters);
		}

		public static Task<IEnumerable<CustOrderHistResult>> CustOrderHistAsync(this TestDataDB dataConnection, string? customerId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProcAsync<CustOrderHistResult>("[CustOrderHist]", cancellationToken, parameters);
		}

		public partial class CustOrderHistResult
		{
			public string ProductName { get; set; } = null!;
			public int?   Total       { get; set; }
		}
		#endregion

		#region CustOrdersDetail
		public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this TestDataDB dataConnection, int? orderId)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
			};
			return dataConnection.QueryProc<CustOrdersDetailResult>("[CustOrdersDetail]", parameters);
		}

		public static Task<IEnumerable<CustOrdersDetailResult>> CustOrdersDetailAsync(this TestDataDB dataConnection, int? orderId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
			};
			return dataConnection.QueryProcAsync<CustOrdersDetailResult>("[CustOrdersDetail]", cancellationToken, parameters);
		}

		public partial class CustOrdersDetailResult
		{
			public string   ProductName   { get; set; } = null!;
			public decimal  UnitPrice     { get; set; }
			public short    Quantity      { get; set; }
			public int?     Discount      { get; set; }
			public decimal? ExtendedPrice { get; set; }
		}
		#endregion

		#region CustOrdersOrders
		public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this TestDataDB dataConnection, string? customerId)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProc<CustOrdersOrdersResult>("[CustOrdersOrders]", parameters);
		}

		public static Task<IEnumerable<CustOrdersOrdersResult>> CustOrdersOrdersAsync(this TestDataDB dataConnection, string? customerId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProcAsync<CustOrdersOrdersResult>("[CustOrdersOrders]", cancellationToken, parameters);
		}

		public partial class CustOrdersOrdersResult
		{
			public int       OrderId      { get; set; }
			public DateTime? OrderDate    { get; set; }
			public DateTime? RequiredDate { get; set; }
			public DateTime? ShippedDate  { get; set; }
		}
		#endregion

		#region Employee Sales By Country
		public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[Employee Sales by Country]", parameters);
		}

		public static Task<IEnumerable<EmployeeSalesByCountryResult>> EmployeeSalesByCountryAsync(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProcAsync<EmployeeSalesByCountryResult>("[Employee Sales by Country]", cancellationToken, parameters);
		}

		public partial class EmployeeSalesByCountryResult
		{
			public string?   Country     { get; set; }
			public string    LastName    { get; set; } = null!;
			public string    FirstName   { get; set; } = null!;
			public DateTime? ShippedDate { get; set; }
			public int       OrderId     { get; set; }
			public decimal?  SaleAmount  { get; set; }
		}
		#endregion

		#region Sales By Year
		public static IEnumerable<SalesByYearResult> SalesByYear(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProc<SalesByYearResult>("[Sales by Year]", parameters);
		}

		public static Task<IEnumerable<SalesByYearResult>> SalesByYearAsync(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProcAsync<SalesByYearResult>("[Sales by Year]", cancellationToken, parameters);
		}

		public partial class SalesByYearResult
		{
			public DateTime? ShippedDate { get; set; }
			public int       OrderId     { get; set; }
			public decimal?  Subtotal    { get; set; }
			public string?   Year        { get; set; }
		}
		#endregion

		#region SalesByCategory
		public static IEnumerable<SalesByCategoryResult> SalesByCategory(this TestDataDB dataConnection, string? categoryName, string? ordYear)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					Size = 4
				}
			};
			return dataConnection.QueryProc<SalesByCategoryResult>("[SalesByCategory]", parameters);
		}

		public static Task<IEnumerable<SalesByCategoryResult>> SalesByCategoryAsync(this TestDataDB dataConnection, string? categoryName, string? ordYear, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					Size = 4
				}
			};
			return dataConnection.QueryProcAsync<SalesByCategoryResult>("[SalesByCategory]", cancellationToken, parameters);
		}

		public partial class SalesByCategoryResult
		{
			public string   ProductName   { get; set; } = null!;
			public decimal? TotalPurchase { get; set; }
		}
		#endregion

		#region Ten Most Expensive Products
		public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]");
		}

		public static Task<IEnumerable<TenMostExpensiveProductsResult>> TenMostExpensiveProductsAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]", cancellationToken);
		}

		public partial class TenMostExpensiveProductsResult
		{
			public string   TenMostExpensiveProducts { get; set; } = null!;
			public decimal? UnitPrice                { get; set; }
		}
		#endregion
		#endregion
	}
}
