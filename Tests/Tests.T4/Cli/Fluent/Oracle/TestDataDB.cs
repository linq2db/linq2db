// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Fluent.Oracle
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			var builder = new FluentMappingBuilder(ContextSchema);

			builder
				.Entity<AllType>()
					.HasAttribute(new TableAttribute("AllTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.BigintDataType)
						.HasAttribute(new ColumnAttribute("bigintDataType"))
					.Member(e => e.NumericDataType)
						.HasAttribute(new ColumnAttribute("numericDataType"))
					.Member(e => e.BitDataType)
						.HasAttribute(new ColumnAttribute("bitDataType"))
					.Member(e => e.SmallintDataType)
						.HasAttribute(new ColumnAttribute("smallintDataType"))
					.Member(e => e.DecimalDataType)
						.HasAttribute(new ColumnAttribute("decimalDataType"))
					.Member(e => e.SmallmoneyDataType)
						.HasAttribute(new ColumnAttribute("smallmoneyDataType"))
					.Member(e => e.IntDataType)
						.HasAttribute(new ColumnAttribute("intDataType"))
					.Member(e => e.TinyintDataType)
						.HasAttribute(new ColumnAttribute("tinyintDataType"))
					.Member(e => e.MoneyDataType)
						.HasAttribute(new ColumnAttribute("moneyDataType"))
					.Member(e => e.FloatDataType)
						.HasAttribute(new ColumnAttribute("floatDataType"))
					.Member(e => e.RealDataType)
						.HasAttribute(new ColumnAttribute("realDataType"))
					.Member(e => e.DatetimeDataType)
						.HasAttribute(new ColumnAttribute("datetimeDataType"))
					.Member(e => e.Datetime2DataType)
						.HasAttribute(new ColumnAttribute("datetime2DataType"))
					.Member(e => e.DatetimeoffsetDataType)
						.HasAttribute(new ColumnAttribute("datetimeoffsetDataType"))
					.Member(e => e.LocalZoneDataType)
						.HasAttribute(new ColumnAttribute("localZoneDataType"))
					.Member(e => e.CharDataType)
						.HasAttribute(new ColumnAttribute("charDataType"))
					.Member(e => e.Char20DataType)
						.HasAttribute(new ColumnAttribute("char20DataType"))
					.Member(e => e.VarcharDataType)
						.HasAttribute(new ColumnAttribute("varcharDataType"))
					.Member(e => e.TextDataType)
						.HasAttribute(new ColumnAttribute("textDataType"))
					.Member(e => e.NcharDataType)
						.HasAttribute(new ColumnAttribute("ncharDataType"))
					.Member(e => e.NvarcharDataType)
						.HasAttribute(new ColumnAttribute("nvarcharDataType"))
					.Member(e => e.NtextDataType)
						.HasAttribute(new ColumnAttribute("ntextDataType"))
					.Member(e => e.BinaryDataType)
						.HasAttribute(new ColumnAttribute("binaryDataType"))
					.Member(e => e.BfileDataType)
						.HasAttribute(new ColumnAttribute("bfileDataType"))
					.Member(e => e.GuidDataType)
						.HasAttribute(new ColumnAttribute("guidDataType"))
					.Member(e => e.LongDataType)
						.HasAttribute(new ColumnAttribute("longDataType"))
					.Member(e => e.XmlDataType)
						.HasAttribute(new ColumnAttribute("xmlDataType"));

			builder
				.Entity<Binarydatum>()
					.HasAttribute(new TableAttribute("BINARYDATA"))
					.Member(e => e.Binarydataid)
						.HasAttribute(new ColumnAttribute("BINARYDATAID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Stamp)
						.HasAttribute(new ColumnAttribute("STAMP"))
					.Member(e => e.Data)
						.HasAttribute(new ColumnAttribute("DATA")
						{
							CanBeNull = false
						});

			builder
				.Entity<Child>()
					.HasAttribute(new TableAttribute("Child"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"));

			builder
				.Entity<CollatedTable>()
					.HasAttribute(new TableAttribute("CollatedTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"))
					.Member(e => e.CaseSensitive)
						.HasAttribute(new ColumnAttribute("CaseSensitive")
						{
							CanBeNull = false
						})
					.Member(e => e.CaseInsensitive)
						.HasAttribute(new ColumnAttribute("CaseInsensitive")
						{
							CanBeNull = false
						});

			builder
				.Entity<DataTypeTest>()
					.HasAttribute(new TableAttribute("DataTypeTest"))
					.Member(e => e.DataTypeId)
						.HasAttribute(new ColumnAttribute("DataTypeID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Binary)
						.HasAttribute(new ColumnAttribute("Binary_"))
					.Member(e => e.Boolean)
						.HasAttribute(new ColumnAttribute("Boolean_"))
					.Member(e => e.Byte)
						.HasAttribute(new ColumnAttribute("Byte_"))
					.Member(e => e.Bytes)
						.HasAttribute(new ColumnAttribute("Bytes_"))
					.Member(e => e.Char)
						.HasAttribute(new ColumnAttribute("Char_"))
					.Member(e => e.DateTime)
						.HasAttribute(new ColumnAttribute("DateTime_"))
					.Member(e => e.Decimal)
						.HasAttribute(new ColumnAttribute("Decimal_"))
					.Member(e => e.Double)
						.HasAttribute(new ColumnAttribute("Double_"))
					.Member(e => e.Guid)
						.HasAttribute(new ColumnAttribute("Guid_"))
					.Member(e => e.Int16)
						.HasAttribute(new ColumnAttribute("Int16_"))
					.Member(e => e.Int32)
						.HasAttribute(new ColumnAttribute("Int32_"))
					.Member(e => e.Int64)
						.HasAttribute(new ColumnAttribute("Int64_"))
					.Member(e => e.Money)
						.HasAttribute(new ColumnAttribute("Money_"))
					.Member(e => e.SByte)
						.HasAttribute(new ColumnAttribute("SByte_"))
					.Member(e => e.Single)
						.HasAttribute(new ColumnAttribute("Single_"))
					.Member(e => e.Stream)
						.HasAttribute(new ColumnAttribute("Stream_"))
					.Member(e => e.String)
						.HasAttribute(new ColumnAttribute("String_"))
					.Member(e => e.UInt16)
						.HasAttribute(new ColumnAttribute("UInt16_"))
					.Member(e => e.UInt32)
						.HasAttribute(new ColumnAttribute("UInt32_"))
					.Member(e => e.UInt64)
						.HasAttribute(new ColumnAttribute("UInt64_"))
					.Member(e => e.Xml)
						.HasAttribute(new ColumnAttribute("Xml_"));

			builder
				.Entity<DecimalOverflow>()
					.HasAttribute(new TableAttribute("DecimalOverflow"))
					.Member(e => e.Decimal1)
						.HasAttribute(new ColumnAttribute("Decimal1"))
					.Member(e => e.Decimal2)
						.HasAttribute(new ColumnAttribute("Decimal2"))
					.Member(e => e.Decimal3)
						.HasAttribute(new ColumnAttribute("Decimal3"))
					.Member(e => e.Decimal4)
						.HasAttribute(new ColumnAttribute("Decimal4"))
					.Member(e => e.Decimal5)
						.HasAttribute(new ColumnAttribute("Decimal5"));

			builder
				.Entity<Doctor>()
					.HasAttribute(new TableAttribute("Doctor"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Taxonomy)
						.HasAttribute(new ColumnAttribute("Taxonomy")
						{
							CanBeNull = false
						})
					.Member(e => e.FkPerson)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Doctor.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<GrandChild>()
					.HasAttribute(new TableAttribute("GrandChild"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.ChildId)
						.HasAttribute(new ColumnAttribute("ChildID"))
					.Member(e => e.GrandChildId)
						.HasAttribute(new ColumnAttribute("GrandChildID"));

			builder
				.Entity<InheritanceChild>()
					.HasAttribute(new TableAttribute("InheritanceChild"))
					.Member(e => e.InheritanceChildId)
						.HasAttribute(new ColumnAttribute("InheritanceChildId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId"))
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<InheritanceParent>()
					.HasAttribute(new TableAttribute("InheritanceParent"))
					.Member(e => e.InheritanceParentId)
						.HasAttribute(new ColumnAttribute("InheritanceParentId")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.TypeDiscriminator)
						.HasAttribute(new ColumnAttribute("TypeDiscriminator"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("Name"));

			builder
				.Entity<Linqdatatypesbc>()
					.HasAttribute(new TableAttribute("LINQDATATYPESBC"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.Moneyvalue)
						.HasAttribute(new ColumnAttribute("MONEYVALUE"))
					.Member(e => e.Datetimevalue)
						.HasAttribute(new ColumnAttribute("DATETIMEVALUE"))
					.Member(e => e.Datetimevalue2)
						.HasAttribute(new ColumnAttribute("DATETIMEVALUE2"))
					.Member(e => e.Boolvalue)
						.HasAttribute(new ColumnAttribute("BOOLVALUE"))
					.Member(e => e.Guidvalue)
						.HasAttribute(new ColumnAttribute("GUIDVALUE"))
					.Member(e => e.Smallintvalue)
						.HasAttribute(new ColumnAttribute("SMALLINTVALUE"))
					.Member(e => e.Intvalue)
						.HasAttribute(new ColumnAttribute("INTVALUE"))
					.Member(e => e.Bigintvalue)
						.HasAttribute(new ColumnAttribute("BIGINTVALUE"))
					.Member(e => e.Stringvalue)
						.HasAttribute(new ColumnAttribute("STRINGVALUE"));

			builder
				.Entity<LinqDataType>()
					.HasAttribute(new TableAttribute("LinqDataTypes"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID"))
					.Member(e => e.MoneyValue)
						.HasAttribute(new ColumnAttribute("MoneyValue"))
					.Member(e => e.DateTimeValue)
						.HasAttribute(new ColumnAttribute("DateTimeValue"))
					.Member(e => e.DateTimeValue2)
						.HasAttribute(new ColumnAttribute("DateTimeValue2"))
					.Member(e => e.BoolValue)
						.HasAttribute(new ColumnAttribute("BoolValue"))
					.Member(e => e.GuidValue)
						.HasAttribute(new ColumnAttribute("GuidValue"))
					.Member(e => e.BinaryValue)
						.HasAttribute(new ColumnAttribute("BinaryValue"))
					.Member(e => e.SmallIntValue)
						.HasAttribute(new ColumnAttribute("SmallIntValue"))
					.Member(e => e.IntValue)
						.HasAttribute(new ColumnAttribute("IntValue"))
					.Member(e => e.BigIntValue)
						.HasAttribute(new ColumnAttribute("BigIntValue"))
					.Member(e => e.StringValue)
						.HasAttribute(new ColumnAttribute("StringValue"));

			builder
				.Entity<LongRawTable>()
					.HasAttribute(new TableAttribute("LongRawTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.LongRawDataType)
						.HasAttribute(new ColumnAttribute("longRawDataType"));

			builder
				.Entity<Parent>()
					.HasAttribute(new TableAttribute("Parent"))
					.Member(e => e.ParentId)
						.HasAttribute(new ColumnAttribute("ParentID"))
					.Member(e => e.Value1)
						.HasAttribute(new ColumnAttribute("Value1"));

			builder
				.Entity<Patient>()
					.HasAttribute(new TableAttribute("Patient"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Diagnosis)
						.HasAttribute(new ColumnAttribute("Diagnosis")
						{
							CanBeNull = false
						})
					.Member(e => e.FkPerson)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(Patient.PersonId),
							OtherKey = nameof(Person.PersonId)
						});

			builder
				.Entity<Person>()
					.HasAttribute(new TableAttribute("Person"))
					.Member(e => e.PersonId)
						.HasAttribute(new ColumnAttribute("PersonID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.FirstName)
						.HasAttribute(new ColumnAttribute("FirstName")
						{
							CanBeNull = false
						})
					.Member(e => e.LastName)
						.HasAttribute(new ColumnAttribute("LastName")
						{
							CanBeNull = false
						})
					.Member(e => e.MiddleName)
						.HasAttribute(new ColumnAttribute("MiddleName"))
					.Member(e => e.Gender)
						.HasAttribute(new ColumnAttribute("Gender"))
					.Member(e => e.Doctor)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Doctor.PersonId)
						})
					.Member(e => e.Patient)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(Person.PersonId),
							OtherKey = nameof(Patient.PersonId)
						});

			builder
				.Entity<Sequencetest>()
					.HasAttribute(new TableAttribute("SEQUENCETEST"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("VALUE")
						{
							CanBeNull = false
						});

			builder
				.Entity<StgTradeInformation>()
					.HasAttribute(new TableAttribute("STG_TRADE_INFORMATION"))
					.Member(e => e.StgTradeId)
						.HasAttribute(new ColumnAttribute("STG_TRADE_ID"))
					.Member(e => e.StgTradeVersion)
						.HasAttribute(new ColumnAttribute("STG_TRADE_VERSION"))
					.Member(e => e.InformationTypeId)
						.HasAttribute(new ColumnAttribute("INFORMATION_TYPE_ID"))
					.Member(e => e.InformationTypeName)
						.HasAttribute(new ColumnAttribute("INFORMATION_TYPE_NAME"))
					.Member(e => e.Value)
						.HasAttribute(new ColumnAttribute("VALUE"))
					.Member(e => e.ValueAsInteger)
						.HasAttribute(new ColumnAttribute("VALUE_AS_INTEGER"))
					.Member(e => e.ValueAsDate)
						.HasAttribute(new ColumnAttribute("VALUE_AS_DATE"));

			builder
				.Entity<SchemaTestTable>()
					.HasAttribute(new TableAttribute("SchemaTestTable"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<StringTest>()
					.HasAttribute(new TableAttribute("StringTest"))
					.Member(e => e.StringValue1)
						.HasAttribute(new ColumnAttribute("StringValue1"))
					.Member(e => e.StringValue2)
						.HasAttribute(new ColumnAttribute("StringValue2"))
					.Member(e => e.KeyValue)
						.HasAttribute(new ColumnAttribute("KeyValue")
						{
							CanBeNull = false
						});

			builder
				.Entity<TestIdentity>()
					.HasAttribute(new TableAttribute("TestIdentity"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("ID")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<TestMerge1>()
					.HasAttribute(new TableAttribute("TestMerge1"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TestMerge2>()
					.HasAttribute(new TableAttribute("TestMerge2"))
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Field1)
						.HasAttribute(new ColumnAttribute("Field1"))
					.Member(e => e.Field2)
						.HasAttribute(new ColumnAttribute("Field2"))
					.Member(e => e.Field3)
						.HasAttribute(new ColumnAttribute("Field3"))
					.Member(e => e.Field4)
						.HasAttribute(new ColumnAttribute("Field4"))
					.Member(e => e.Field5)
						.HasAttribute(new ColumnAttribute("Field5"))
					.Member(e => e.FieldInt64)
						.HasAttribute(new ColumnAttribute("FieldInt64"))
					.Member(e => e.FieldBoolean)
						.HasAttribute(new ColumnAttribute("FieldBoolean"))
					.Member(e => e.FieldString)
						.HasAttribute(new ColumnAttribute("FieldString"))
					.Member(e => e.FieldNString)
						.HasAttribute(new ColumnAttribute("FieldNString"))
					.Member(e => e.FieldChar)
						.HasAttribute(new ColumnAttribute("FieldChar"))
					.Member(e => e.FieldNChar)
						.HasAttribute(new ColumnAttribute("FieldNChar"))
					.Member(e => e.FieldFloat)
						.HasAttribute(new ColumnAttribute("FieldFloat"))
					.Member(e => e.FieldDouble)
						.HasAttribute(new ColumnAttribute("FieldDouble"))
					.Member(e => e.FieldDateTime)
						.HasAttribute(new ColumnAttribute("FieldDateTime"))
					.Member(e => e.FieldDateTime2)
						.HasAttribute(new ColumnAttribute("FieldDateTime2"))
					.Member(e => e.FieldBinary)
						.HasAttribute(new ColumnAttribute("FieldBinary"))
					.Member(e => e.FieldGuid)
						.HasAttribute(new ColumnAttribute("FieldGuid"))
					.Member(e => e.FieldDecimal)
						.HasAttribute(new ColumnAttribute("FieldDecimal"))
					.Member(e => e.FieldEnumString)
						.HasAttribute(new ColumnAttribute("FieldEnumString"))
					.Member(e => e.FieldEnumNumber)
						.HasAttribute(new ColumnAttribute("FieldEnumNumber"));

			builder
				.Entity<TEntity>()
					.HasAttribute(new TableAttribute("t_entity"))
					.Member(e => e.EntityId)
						.HasAttribute(new ColumnAttribute("entity_id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Time)
						.HasAttribute(new ColumnAttribute("time"))
					.Member(e => e.Duration)
						.HasAttribute(new ColumnAttribute("duration"));

			builder
				.Entity<TTestUser>()
					.HasAttribute(new TableAttribute("t_test_user"))
					.Member(e => e.UserId)
						.HasAttribute(new ColumnAttribute("user_id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("name")
						{
							CanBeNull = false
						})
					.Member(e => e.TTestUserContracts)
						.HasAttribute(new AssociationAttribute()
						{
							ThisKey = nameof(TTestUser.UserId),
							OtherKey = nameof(TTestUserContract.UserId)
						});

			builder
				.Entity<TTestUserContract>()
					.HasAttribute(new TableAttribute("t_test_user_contract"))
					.Member(e => e.UserContractId)
						.HasAttribute(new ColumnAttribute("user_contract_id")
						{
							IsPrimaryKey = true
						})
					.Member(e => e.UserId)
						.HasAttribute(new ColumnAttribute("user_id"))
					.Member(e => e.ContractNo)
						.HasAttribute(new ColumnAttribute("contract_no"))
					.Member(e => e.Name)
						.HasAttribute(new ColumnAttribute("name")
						{
							CanBeNull = false
						})
					.Member(e => e.User)
						.HasAttribute(new AssociationAttribute()
						{
							CanBeNull = false,
							ThisKey = nameof(TTestUserContract.UserId),
							OtherKey = nameof(TTestUser.UserId)
						});

			builder
				.Entity<SchemaTestMatView>()
					.HasAttribute(new TableAttribute("SchemaTestMatView")
					{
						IsView = true
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id")
						{
							IsPrimaryKey = true
						});

			builder
				.Entity<SchemaTestView>()
					.HasAttribute(new TableAttribute("SchemaTestView")
					{
						IsView = true
					})
					.Member(e => e.Id)
						.HasAttribute(new ColumnAttribute("Id"));

			builder
				.Entity<ExtensionMethods.ResultsettestResult>()
					.Member(e => e.Masterid)
						.HasAttribute(new ColumnAttribute("MASTERID"));

			builder
				.Entity<TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestPackage1TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder
				.Entity<TestPackage2TestTableFunctionResult>()
					.Member(e => e.O)
						.HasAttribute(new ColumnAttribute("O"));

			builder.HasAttribute<Doctor>(e => ExtensionMethods.FkPerson(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Doctor.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Doctor(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Doctor.PersonId)
			});

			builder.HasAttribute<Patient>(e => ExtensionMethods.FkPerson(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(Patient.PersonId),
				OtherKey = nameof(Person.PersonId)
			});

			builder.HasAttribute<Person>(e => ExtensionMethods.Patient(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(Person.PersonId),
				OtherKey = nameof(Patient.PersonId)
			});

			builder.HasAttribute<TTestUserContract>(e => ExtensionMethods.User(e, default(IDataContext)!), new AssociationAttribute()
			{
				CanBeNull = false,
				ThisKey = nameof(TTestUserContract.UserId),
				OtherKey = nameof(TTestUser.UserId)
			});

			builder.HasAttribute<TTestUser>(e => ExtensionMethods.TTestUserContracts(e, default(IDataContext)!), new AssociationAttribute()
			{
				ThisKey = nameof(TTestUser.UserId),
				OtherKey = nameof(TTestUserContract.UserId)
			});

			builder.HasAttribute(() => ExtensionMethods.PatientSelectall(), new Sql.FunctionAttribute("PATIENT_SELECTALL")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PatientSelectbyname(default(string), default(string)), new Sql.FunctionAttribute("PATIENT_SELECTBYNAME")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonInsert(default(string), default(string), default(string), default(string)), new Sql.FunctionAttribute("PERSON_INSERT")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonSelectall(), new Sql.FunctionAttribute("PERSON_SELECTALL")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonSelectallbygender(default(string)), new Sql.FunctionAttribute("PERSON_SELECTALLBYGENDER")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonSelectbykey(default(decimal?)), new Sql.FunctionAttribute("PERSON_SELECTBYKEY")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonSelectbyname(default(string), default(string)), new Sql.FunctionAttribute("PERSON_SELECTBYNAME")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.PersonSelectlistbyname(default(string), default(string)), new Sql.FunctionAttribute("PERSON_SELECTLISTBYNAME")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.ScalarDatareader(), new Sql.FunctionAttribute("SCALAR_DATAREADER")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.ScalarReturnparameter(), new Sql.FunctionAttribute("SCALAR_RETURNPARAMETER")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestFunction(default(decimal?)), new Sql.FunctionAttribute("TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestPackage1TestFunction(default(decimal?)), new Sql.FunctionAttribute("TEST_PACKAGE1.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute(() => ExtensionMethods.TestPackage2TestFunction(default(decimal?)), new Sql.FunctionAttribute("TEST_PACKAGE2.TEST_FUNCTION")
			{
				ServerSideOnly = true
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestTableFunction(default(decimal?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION"));

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default(decimal?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_PACKAGE1"
			});

			builder.HasAttribute<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default(decimal?)), new Sql.TableFunctionAttribute("TEST_TABLE_FUNCTION")
			{
				Package = "TEST_PACKAGE2"
			});

			builder.Build();
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>             AllTypes            => this.GetTable<AllType>();
		public ITable<Binarydatum>         Binarydata          => this.GetTable<Binarydatum>();
		public ITable<Child>               Children            => this.GetTable<Child>();
		public ITable<CollatedTable>       CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>        DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<DecimalOverflow>     DecimalOverflows    => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>              Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>          GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>    InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>   InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Linqdatatypesbc>     Linqdatatypesbcs    => this.GetTable<Linqdatatypesbc>();
		public ITable<LinqDataType>        LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<LongRawTable>        LongRawTables       => this.GetTable<LongRawTable>();
		public ITable<Parent>              Parents             => this.GetTable<Parent>();
		public ITable<Patient>             Patients            => this.GetTable<Patient>();
		public ITable<Person>              People              => this.GetTable<Person>();
		public ITable<Sequencetest>        Sequencetests       => this.GetTable<Sequencetest>();
		public ITable<StgTradeInformation> StgTradeInformation => this.GetTable<StgTradeInformation>();
		/// <summary>
		/// This is table
		/// </summary>
		public ITable<SchemaTestTable>     SchemaTestTables    => this.GetTable<SchemaTestTable>();
		public ITable<StringTest>          StringTests         => this.GetTable<StringTest>();
		public ITable<TestIdentity>        TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>          TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>          TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TEntity>             TEntities           => this.GetTable<TEntity>();
		public ITable<TTestUser>           TTestUsers          => this.GetTable<TTestUser>();
		public ITable<TTestUserContract>   TTestUserContracts  => this.GetTable<TTestUserContract>();
		/// <summary>
		/// This is matview
		/// </summary>
		public ITable<SchemaTestMatView>   SchemaTestMatViews  => this.GetTable<SchemaTestMatView>();
		public ITable<SchemaTestView>      SchemaTestViews     => this.GetTable<SchemaTestView>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(decimal? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			public decimal? O { get; set; }
		}
		#endregion

		#region TestPackage1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default));

		public IQueryable<TestPackage1TestTableFunctionResult> TestPackage1TestTableFunction(decimal? i)
		{
			return this.GetTable<TestPackage1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestPackage1TestTableFunctionResult
		{
			public decimal? O { get; set; }
		}
		#endregion

		#region TestPackage2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default));

		public IQueryable<TestPackage2TestTableFunctionResult> TestPackage2TestTableFunction(decimal? i)
		{
			return this.GetTable<TestPackage2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestPackage2TestTableFunctionResult
		{
			public decimal? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// Fk_Doctor_Person
		/// </summary>
		public static Person FkPerson(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// Fk_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// Fk_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// Fk_Patient_Person
		/// </summary>
		public static Person FkPerson(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region TTestUserContract Associations
		/// <summary>
		/// SYS_C007182
		/// </summary>
		public static TTestUser User(this TTestUserContract obj, IDataContext db)
		{
			return db.GetTable<TTestUser>().First(t => obj.UserId == t.UserId);
		}
		#endregion

		#region TTestUser Associations
		/// <summary>
		/// SYS_C007182 backreference
		/// </summary>
		public static IQueryable<TTestUserContract> TTestUserContracts(this TTestUser obj, IDataContext db)
		{
			return db.GetTable<TTestUserContract>().Where(t => t.UserId == obj.UserId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ADDISSUE792RECORD");
		}

		public static Task<int> Addissue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ADDISSUE792RECORD", cancellationToken);
		}
		#endregion

		#region Alloutputparameters
		public static int Alloutputparameters(this TestDataDB dataConnection, ref decimal? id, ref decimal? bigintdatatype, ref decimal? numericdatatype, ref decimal? bitdatatype, ref decimal? smallintdatatype, ref decimal? decimaldatatype, ref decimal? smallmoneydatatype, ref decimal? intdatatype, ref decimal? tinyintdatatype, ref decimal? moneydatatype, ref double? floatdatatype, ref float? realdatatype, ref DateTime? datetimedatatype, ref DateTime? datetime2Datatype, ref DateTimeOffset? datetimeoffsetdatatype, ref DateTimeOffset? localzonedatatype, ref string? chardatatype, ref string? char20Datatype, ref string? varchardatatype, ref string? textdatatype, ref string? nchardatatype, ref string? nvarchardatatype, ref string? ntextdatatype, ref byte[]? binarydatatype, ref byte[]? bfiledatatype, ref byte[]? guiddatatype, ref object? xmldatatype)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("BIGINTDATATYPE", bigintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("NUMERICDATATYPE", numericdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("BITDATATYPE", bitdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("SMALLINTDATATYPE", smallintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("DECIMALDATATYPE", decimaldatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("SMALLMONEYDATATYPE", smallmoneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("INTDATATYPE", intdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("TINYINTDATATYPE", tinyintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("MONEYDATATYPE", moneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("FLOATDATATYPE", floatdatatype, DataType.Double)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("REALDATATYPE", realdatatype, DataType.Single)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIMEDATATYPE", datetimedatatype, DataType.DateTime)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIME2DATATYPE", datetime2Datatype, DataType.DateTime2)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIMEOFFSETDATATYPE", datetimeoffsetdatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("LOCALZONEDATATYPE", localzonedatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("CHARDATATYPE", chardatatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("CHAR20DATATYPE", char20Datatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("VARCHARDATATYPE", varchardatatype, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("TEXTDATATYPE", textdatatype, DataType.Text)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NCHARDATATYPE", nchardatatype, DataType.NChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NVARCHARDATATYPE", nvarchardatatype, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NTEXTDATATYPE", ntextdatatype, DataType.NText)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("BINARYDATATYPE", binarydatatype, DataType.Blob)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("BFILEDATATYPE", bfiledatatype, DataType.VarBinary)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("GUIDDATATYPE", guiddatatype, DataType.Binary)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("XMLDATATYPE", xmldatatype)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			id = Converter.ChangeTypeTo<decimal?>(parameters[0].Value);
			bigintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[1].Value);
			numericdatatype = Converter.ChangeTypeTo<decimal?>(parameters[2].Value);
			bitdatatype = Converter.ChangeTypeTo<decimal?>(parameters[3].Value);
			smallintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[4].Value);
			decimaldatatype = Converter.ChangeTypeTo<decimal?>(parameters[5].Value);
			smallmoneydatatype = Converter.ChangeTypeTo<decimal?>(parameters[6].Value);
			intdatatype = Converter.ChangeTypeTo<decimal?>(parameters[7].Value);
			tinyintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[8].Value);
			moneydatatype = Converter.ChangeTypeTo<decimal?>(parameters[9].Value);
			floatdatatype = Converter.ChangeTypeTo<double?>(parameters[10].Value);
			realdatatype = Converter.ChangeTypeTo<float?>(parameters[11].Value);
			datetimedatatype = Converter.ChangeTypeTo<DateTime?>(parameters[12].Value);
			datetime2Datatype = Converter.ChangeTypeTo<DateTime?>(parameters[13].Value);
			datetimeoffsetdatatype = Converter.ChangeTypeTo<DateTimeOffset?>(parameters[14].Value);
			localzonedatatype = Converter.ChangeTypeTo<DateTimeOffset?>(parameters[15].Value);
			chardatatype = Converter.ChangeTypeTo<string?>(parameters[16].Value);
			char20Datatype = Converter.ChangeTypeTo<string?>(parameters[17].Value);
			varchardatatype = Converter.ChangeTypeTo<string?>(parameters[18].Value);
			textdatatype = Converter.ChangeTypeTo<string?>(parameters[19].Value);
			nchardatatype = Converter.ChangeTypeTo<string?>(parameters[20].Value);
			nvarchardatatype = Converter.ChangeTypeTo<string?>(parameters[21].Value);
			ntextdatatype = Converter.ChangeTypeTo<string?>(parameters[22].Value);
			binarydatatype = Converter.ChangeTypeTo<byte[]?>(parameters[23].Value);
			bfiledatatype = Converter.ChangeTypeTo<byte[]?>(parameters[24].Value);
			guiddatatype = Converter.ChangeTypeTo<byte[]?>(parameters[25].Value);
			xmldatatype = Converter.ChangeTypeTo<object?>(parameters[26].Value);
			return dataConnection.ExecuteProc("ALLOUTPUTPARAMETERS", parameters);
		}

		public static async Task<AlloutputparametersResults> AlloutputparametersAsync(this TestDataDB dataConnection, decimal? id, decimal? bigintdatatype, decimal? numericdatatype, decimal? bitdatatype, decimal? smallintdatatype, decimal? decimaldatatype, decimal? smallmoneydatatype, decimal? intdatatype, decimal? tinyintdatatype, decimal? moneydatatype, double? floatdatatype, float? realdatatype, DateTime? datetimedatatype, DateTime? datetime2Datatype, DateTimeOffset? datetimeoffsetdatatype, DateTimeOffset? localzonedatatype, string? chardatatype, string? char20Datatype, string? varchardatatype, string? textdatatype, string? nchardatatype, string? nvarchardatatype, string? ntextdatatype, byte[]? binarydatatype, byte[]? bfiledatatype, byte[]? guiddatatype, object? xmldatatype, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("BIGINTDATATYPE", bigintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("NUMERICDATATYPE", numericdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("BITDATATYPE", bitdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("SMALLINTDATATYPE", smallintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("DECIMALDATATYPE", decimaldatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("SMALLMONEYDATATYPE", smallmoneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("INTDATATYPE", intdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("TINYINTDATATYPE", tinyintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("MONEYDATATYPE", moneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("FLOATDATATYPE", floatdatatype, DataType.Double)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("REALDATATYPE", realdatatype, DataType.Single)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIMEDATATYPE", datetimedatatype, DataType.DateTime)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIME2DATATYPE", datetime2Datatype, DataType.DateTime2)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("DATETIMEOFFSETDATATYPE", datetimeoffsetdatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("LOCALZONEDATATYPE", localzonedatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("CHARDATATYPE", chardatatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("CHAR20DATATYPE", char20Datatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("VARCHARDATATYPE", varchardatatype, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("TEXTDATATYPE", textdatatype, DataType.Text)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NCHARDATATYPE", nchardatatype, DataType.NChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NVARCHARDATATYPE", nvarchardatatype, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("NTEXTDATATYPE", ntextdatatype, DataType.NText)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("BINARYDATATYPE", binarydatatype, DataType.Blob)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("BFILEDATATYPE", bfiledatatype, DataType.VarBinary)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("GUIDDATATYPE", guiddatatype, DataType.Binary)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("XMLDATATYPE", xmldatatype)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("ALLOUTPUTPARAMETERS", cancellationToken, parameters);
			return new AlloutputparametersResults()
			{
				Result = result,
				Bfiledatatype = Converter.ChangeTypeTo<byte[]?>(parameters[24].Value),
				Bigintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[1].Value),
				Binarydatatype = Converter.ChangeTypeTo<byte[]?>(parameters[23].Value),
				Bitdatatype = Converter.ChangeTypeTo<decimal?>(parameters[3].Value),
				Char20Datatype = Converter.ChangeTypeTo<string?>(parameters[17].Value),
				Chardatatype = Converter.ChangeTypeTo<string?>(parameters[16].Value),
				Datetime2Datatype = Converter.ChangeTypeTo<DateTime?>(parameters[13].Value),
				Datetimedatatype = Converter.ChangeTypeTo<DateTime?>(parameters[12].Value),
				Datetimeoffsetdatatype = Converter.ChangeTypeTo<DateTimeOffset?>(parameters[14].Value),
				Decimaldatatype = Converter.ChangeTypeTo<decimal?>(parameters[5].Value),
				Floatdatatype = Converter.ChangeTypeTo<double?>(parameters[10].Value),
				Guiddatatype = Converter.ChangeTypeTo<byte[]?>(parameters[25].Value),
				Id = Converter.ChangeTypeTo<decimal?>(parameters[0].Value),
				Intdatatype = Converter.ChangeTypeTo<decimal?>(parameters[7].Value),
				Localzonedatatype = Converter.ChangeTypeTo<DateTimeOffset?>(parameters[15].Value),
				Moneydatatype = Converter.ChangeTypeTo<decimal?>(parameters[9].Value),
				Nchardatatype = Converter.ChangeTypeTo<string?>(parameters[20].Value),
				Ntextdatatype = Converter.ChangeTypeTo<string?>(parameters[22].Value),
				Numericdatatype = Converter.ChangeTypeTo<decimal?>(parameters[2].Value),
				Nvarchardatatype = Converter.ChangeTypeTo<string?>(parameters[21].Value),
				Realdatatype = Converter.ChangeTypeTo<float?>(parameters[11].Value),
				Smallintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[4].Value),
				Smallmoneydatatype = Converter.ChangeTypeTo<decimal?>(parameters[6].Value),
				Textdatatype = Converter.ChangeTypeTo<string?>(parameters[19].Value),
				Tinyintdatatype = Converter.ChangeTypeTo<decimal?>(parameters[8].Value),
				Varchardatatype = Converter.ChangeTypeTo<string?>(parameters[18].Value),
				Xmldatatype = Converter.ChangeTypeTo<object?>(parameters[26].Value)
			};
		}

		public class AlloutputparametersResults
		{
			public int             Result                 { get; set; }
			public byte[]?         Bfiledatatype          { get; set; }
			public decimal?        Bigintdatatype         { get; set; }
			public byte[]?         Binarydatatype         { get; set; }
			public decimal?        Bitdatatype            { get; set; }
			public string?         Char20Datatype         { get; set; }
			public string?         Chardatatype           { get; set; }
			public DateTime?       Datetime2Datatype      { get; set; }
			public DateTime?       Datetimedatatype       { get; set; }
			public DateTimeOffset? Datetimeoffsetdatatype { get; set; }
			public decimal?        Decimaldatatype        { get; set; }
			public double?         Floatdatatype          { get; set; }
			public byte[]?         Guiddatatype           { get; set; }
			public decimal?        Id                     { get; set; }
			public decimal?        Intdatatype            { get; set; }
			public DateTimeOffset? Localzonedatatype      { get; set; }
			public decimal?        Moneydatatype          { get; set; }
			public string?         Nchardatatype          { get; set; }
			public string?         Ntextdatatype          { get; set; }
			public decimal?        Numericdatatype        { get; set; }
			public string?         Nvarchardatatype       { get; set; }
			public float?          Realdatatype           { get; set; }
			public decimal?        Smallintdatatype       { get; set; }
			public decimal?        Smallmoneydatatype     { get; set; }
			public string?         Textdatatype           { get; set; }
			public decimal?        Tinyintdatatype        { get; set; }
			public string?         Varchardatatype        { get; set; }
			public object?         Xmldatatype            { get; set; }
		}
		#endregion

		#region Arraytest
		public static int Arraytest(this TestDataDB dataConnection, object? pintarray, out object? poutputintarray, ref object? pinputoutputintarray, object? pstrarray, out object? poutputstrarray, ref object? pinputoutputstrarray)
		{
			var parameters = new []
			{
				new DataParameter("PINTARRAY", pintarray),
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTINTARRAY", pinputoutputintarray)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("PSTRARRAY", pstrarray),
				new DataParameter("POUTPUTSTRARRAY", null)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTRARRAY", pinputoutputstrarray)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			poutputintarray = Converter.ChangeTypeTo<object?>(parameters[1].Value);
			pinputoutputintarray = Converter.ChangeTypeTo<object?>(parameters[2].Value);
			poutputstrarray = Converter.ChangeTypeTo<object?>(parameters[4].Value);
			pinputoutputstrarray = Converter.ChangeTypeTo<object?>(parameters[5].Value);
			return dataConnection.ExecuteProc("ARRAYTEST", parameters);
		}

		public static async Task<ArraytestResults> ArraytestAsync(this TestDataDB dataConnection, object? pintarray, object? poutputintarray, object? pinputoutputintarray, object? pstrarray, object? poutputstrarray, object? pinputoutputstrarray, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PINTARRAY", pintarray),
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTINTARRAY", pinputoutputintarray)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("PSTRARRAY", pstrarray),
				new DataParameter("POUTPUTSTRARRAY", null)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTRARRAY", pinputoutputstrarray)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("ARRAYTEST", cancellationToken, parameters);
			return new ArraytestResults()
			{
				Result = result,
				Pinputoutputintarray = Converter.ChangeTypeTo<object?>(parameters[2].Value),
				Pinputoutputstrarray = Converter.ChangeTypeTo<object?>(parameters[5].Value),
				Poutputintarray = Converter.ChangeTypeTo<object?>(parameters[1].Value),
				Poutputstrarray = Converter.ChangeTypeTo<object?>(parameters[4].Value)
			};
		}

		public class ArraytestResults
		{
			public int     Result               { get; set; }
			public object? Pinputoutputintarray { get; set; }
			public object? Pinputoutputstrarray { get; set; }
			public object? Poutputintarray      { get; set; }
			public object? Poutputstrarray      { get; set; }
		}
		#endregion

		#region Outrefenumtest
		public static int Outrefenumtest(this TestDataDB dataConnection, string? pstr, out string? poutputstr, ref string? pinputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("PSTR", pstr, DataType.NVarChar),
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			poutputstr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("OUTREFENUMTEST", parameters);
		}

		public static async Task<OutrefenumtestResults> OutrefenumtestAsync(this TestDataDB dataConnection, string? pstr, string? poutputstr, string? pinputoutputstr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PSTR", pstr, DataType.NVarChar),
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("OUTREFENUMTEST", cancellationToken, parameters);
			return new OutrefenumtestResults()
			{
				Result = result,
				Pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[2].Value),
				Poutputstr = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class OutrefenumtestResults
		{
			public int     Result          { get; set; }
			public string? Pinputoutputstr { get; set; }
			public string? Poutputstr      { get; set; }
		}
		#endregion

		#region Outreftest
		public static int Outreftest(this TestDataDB dataConnection, decimal? pid, out decimal? poutputid, ref decimal? pinputoutputid, string? pstr, out string? poutputstr, ref string? pinputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("PID", pid, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("POUTPUTID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				},
				new DataParameter("PINPUTOUTPUTID", pinputoutputid, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("PSTR", pstr, DataType.NVarChar),
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			poutputid = Converter.ChangeTypeTo<decimal?>(parameters[1].Value);
			pinputoutputid = Converter.ChangeTypeTo<decimal?>(parameters[2].Value);
			poutputstr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("OUTREFTEST", parameters);
		}

		public static async Task<OutreftestResults> OutreftestAsync(this TestDataDB dataConnection, decimal? pid, decimal? poutputid, decimal? pinputoutputid, string? pstr, string? poutputstr, string? pinputoutputstr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PID", pid, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("POUTPUTID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				},
				new DataParameter("PINPUTOUTPUTID", pinputoutputid, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 22
				},
				new DataParameter("PSTR", pstr, DataType.NVarChar),
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("OUTREFTEST", cancellationToken, parameters);
			return new OutreftestResults()
			{
				Result = result,
				Pinputoutputid = Converter.ChangeTypeTo<decimal?>(parameters[2].Value),
				Pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[5].Value),
				Poutputid = Converter.ChangeTypeTo<decimal?>(parameters[1].Value),
				Poutputstr = Converter.ChangeTypeTo<string?>(parameters[4].Value)
			};
		}

		public class OutreftestResults
		{
			public int      Result          { get; set; }
			public decimal? Pinputoutputid  { get; set; }
			public string?  Pinputoutputstr { get; set; }
			public decimal? Poutputid       { get; set; }
			public string?  Poutputstr      { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, decimal? ppersonid)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					Size = 22
				}
			};
			return dataConnection.ExecuteProc("PERSON_DELETE", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, decimal? ppersonid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					Size = 22
				}
			};
			return dataConnection.ExecuteProcAsync("PERSON_DELETE", cancellationToken, parameters);
		}
		#endregion

		#region PersonInsertOutputparameter
		public static int PersonInsertOutputparameter(this TestDataDB dataConnection, string? pfirstname, string? plastname, string? pmiddlename, string? pgender, out decimal? ppersonid)
		{
			var parameters = new []
			{
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar),
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar),
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar),
				new DataParameter("PGENDER", pgender, DataType.Char),
				new DataParameter("PPERSONID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			ppersonid = Converter.ChangeTypeTo<decimal?>(parameters[4].Value);
			return dataConnection.ExecuteProc("PERSON_INSERT_OUTPUTPARAMETER", parameters);
		}

		public static async Task<PersonInsertOutputparameterResults> PersonInsertOutputparameterAsync(this TestDataDB dataConnection, string? pfirstname, string? plastname, string? pmiddlename, string? pgender, decimal? ppersonid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar),
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar),
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar),
				new DataParameter("PGENDER", pgender, DataType.Char),
				new DataParameter("PPERSONID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("PERSON_INSERT_OUTPUTPARAMETER", cancellationToken, parameters);
			return new PersonInsertOutputparameterResults()
			{
				Result = result,
				Ppersonid = Converter.ChangeTypeTo<decimal?>(parameters[4].Value)
			};
		}

		public class PersonInsertOutputparameterResults
		{
			public int      Result    { get; set; }
			public decimal? Ppersonid { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, decimal? ppersonid, string? pfirstname, string? plastname, string? pmiddlename, string? pgender)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar),
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar),
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar),
				new DataParameter("PGENDER", pgender, DataType.Char)
			};
			return dataConnection.ExecuteProc("PERSON_UPDATE", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, decimal? ppersonid, string? pfirstname, string? plastname, string? pmiddlename, string? pgender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar),
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar),
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar),
				new DataParameter("PGENDER", pgender, DataType.Char)
			};
			return dataConnection.ExecuteProcAsync("PERSON_UPDATE", cancellationToken, parameters);
		}
		#endregion

		#region Resultsettest
		public static IEnumerable<ResultsettestResult> Resultsettest(this TestDataDB dataConnection, out OracleRefCursor? mr, out OracleRefCursor? sr)
		{
			var parameters = new []
			{
				new DataParameter("MR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("SR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output
				}
			};
			mr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[0].Value);
			sr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[1].Value);
			return dataConnection.QueryProc<ResultsettestResult>("RESULTSETTEST", parameters).ToList();
		}

		public static async Task<ResultsettestResults> ResultsettestAsync(this TestDataDB dataConnection, OracleRefCursor? mr, OracleRefCursor? sr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("MR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("SR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output
				}
			};
			var result = await dataConnection.QueryProcAsync<ResultsettestResult>("RESULTSETTEST", cancellationToken, parameters);
			return new ResultsettestResults()
			{
				Result = result.ToList(),
				Mr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[0].Value),
				Sr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[1].Value)
			};
		}

		public partial class ResultsettestResult
		{
			public decimal? Masterid { get; set; }
		}

		public class ResultsettestResults
		{
			public IEnumerable<ResultsettestResult> Result { get; set; } = null!;
			public OracleRefCursor?                 Mr     { get; set; }
			public OracleRefCursor?                 Sr     { get; set; }
		}
		#endregion

		#region Scalararray
		public static int Scalararray(this TestDataDB dataConnection, out object? poutputintarray)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output
				}
			};
			poutputintarray = Converter.ChangeTypeTo<object?>(parameters[0].Value);
			return dataConnection.ExecuteProc("SCALARARRAY", parameters);
		}

		public static async Task<ScalararrayResults> ScalararrayAsync(this TestDataDB dataConnection, object? poutputintarray, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output
				}
			};
			var result = await dataConnection.ExecuteProcAsync("SCALARARRAY", cancellationToken, parameters);
			return new ScalararrayResults()
			{
				Result = result,
				Poutputintarray = Converter.ChangeTypeTo<object?>(parameters[0].Value)
			};
		}

		public class ScalararrayResults
		{
			public int     Result          { get; set; }
			public object? Poutputintarray { get; set; }
		}
		#endregion

		#region ScalarOutputparameter
		public static int ScalarOutputparameter(this TestDataDB dataConnection, out int? poutputint, out string? poutputstring)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINT", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("POUTPUTSTRING", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				}
			};
			poutputint = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			poutputstring = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			return dataConnection.ExecuteProc("SCALAR_OUTPUTPARAMETER", parameters);
		}

		public static async Task<ScalarOutputparameterResults> ScalarOutputparameterAsync(this TestDataDB dataConnection, int? poutputint, string? poutputstring, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINT", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output
				},
				new DataParameter("POUTPUTSTRING", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output
				}
			};
			var result = await dataConnection.ExecuteProcAsync("SCALAR_OUTPUTPARAMETER", cancellationToken, parameters);
			return new ScalarOutputparameterResults()
			{
				Result = result,
				Poutputint = Converter.ChangeTypeTo<int?>(parameters[0].Value),
				Poutputstring = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class ScalarOutputparameterResults
		{
			public int     Result        { get; set; }
			public int?    Poutputint    { get; set; }
			public string? Poutputstring { get; set; }
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, decimal? i, out decimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<decimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, decimal? i, decimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result,
				O = Converter.ChangeTypeTo<decimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults
		{
			public int      Result { get; set; }
			public decimal? O      { get; set; }
		}
		#endregion

		#region Issue2132Test
		public static int Issue2132Test(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ISSUE2132.TEST");
		}

		public static Task<int> Issue2132TestAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ISSUE2132.TEST", cancellationToken);
		}
		#endregion

		#region TestPackage1TestProcedure
		public static int TestPackage1TestProcedure(this TestDataDB dataConnection, decimal? i, out decimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<decimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE1.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults1> TestPackage1TestProcedureAsync(this TestDataDB dataConnection, decimal? i, decimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE1.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults1()
			{
				Result = result,
				O = Converter.ChangeTypeTo<decimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults1
		{
			public int      Result { get; set; }
			public decimal? O      { get; set; }
		}
		#endregion

		#region TestPackage2TestProcedure
		public static int TestPackage2TestProcedure(this TestDataDB dataConnection, decimal? i, out decimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<decimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE2.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults2> TestPackage2TestProcedureAsync(this TestDataDB dataConnection, decimal? i, decimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE2.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults2()
			{
				Result = result,
				O = Converter.ChangeTypeTo<decimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults2
		{
			public int      Result { get; set; }
			public decimal? O      { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region PatientSelectall
		public static OracleRefCursor? PatientSelectall()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PatientSelectbyname
		public static OracleRefCursor? PatientSelectbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonInsert
		public static OracleRefCursor? PersonInsert(string? pfirstname, string? plastname, string? pmiddlename, string? pgender)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectall
		public static OracleRefCursor? PersonSelectall()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectallbygender
		public static OracleRefCursor? PersonSelectallbygender(string? pgender)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectbykey
		public static OracleRefCursor? PersonSelectbykey(decimal? pid)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectbyname
		public static OracleRefCursor? PersonSelectbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectlistbyname
		public static OracleRefCursor? PersonSelectlistbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region ScalarDatareader
		public static OracleRefCursor? ScalarDatareader()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region ScalarReturnparameter
		public static int? ScalarReturnparameter()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunction
		public static decimal? TestFunction(decimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage1TestFunction
		public static decimal? TestPackage1TestFunction(decimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage2TestFunction
		public static decimal? TestPackage2TestFunction(decimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
