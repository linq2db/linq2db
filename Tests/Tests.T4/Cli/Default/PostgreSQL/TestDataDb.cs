// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Default.PostgreSQL
{
	public partial class TestDataDB : DataConnection
	{
		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		#endregion

		public TestDataDB()
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(LinqToDBConnectionOptions<TestDataDB> options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>                  AllTypes                  => this.GetTable<AllType>();
		public ITable<Child>                    Children                  => this.GetTable<Child>();
		public ITable<CollatedTable>            CollatedTables            => this.GetTable<CollatedTable>();
		public ITable<Doctor>                   Doctors                   => this.GetTable<Doctor>();
		public ITable<GrandChild>               GrandChildren             => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>         InheritanceChildren       => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>        InheritanceParents        => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>             LinqDataTypes             => this.GetTable<LinqDataType>();
		public ITable<Parent>                   Parents                   => this.GetTable<Parent>();
		public ITable<Patient>                  Patients                  => this.GetTable<Patient>();
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                   People                    => this.GetTable<Person>();
		public ITable<SequenceCustomNamingTest> SequenceCustomNamingTests => this.GetTable<SequenceCustomNamingTest>();
		public ITable<SequenceTest1>            SequenceTest1             => this.GetTable<SequenceTest1>();
		public ITable<SequenceTest2>            SequenceTest2             => this.GetTable<SequenceTest2>();
		public ITable<SequenceTest3>            SequenceTest3             => this.GetTable<SequenceTest3>();
		public ITable<TestIdentity>             TestIdentities            => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>               TestMerge1                => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>               TestMerge2                => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>        TestMergeIdentities       => this.GetTable<TestMergeIdentity>();
		public ITable<Entity>                   Entities                  => this.GetTable<Entity>();
		public ITable<SameName>                 SameNames                 => this.GetTable<SameName>();
		public ITable<SameName1>                SameName1                 => this.GetTable<SameName1>();
		public ITable<SameName2>                SameName2                 => this.GetTable<SameName2>();
		public ITable<Testsamename>             Testsamenames             => this.GetTable<Testsamename>();
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                Issue2023                 => this.GetTable<Issue2023>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static SequenceCustomNamingTest? Find(this ITable<SequenceCustomNamingTest> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceCustomNamingTest?> FindAsync(this ITable<SequenceCustomNamingTest> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SequenceTest1? Find(this ITable<SequenceTest1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest1?> FindAsync(this ITable<SequenceTest1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SequenceTest2? Find(this ITable<SequenceTest2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest2?> FindAsync(this ITable<SequenceTest2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SequenceTest3? Find(this ITable<SequenceTest3> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest3?> FindAsync(this ITable<SequenceTest3> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMergeIdentity?> FindAsync(this ITable<TestMergeIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SameName? Find(this ITable<SameName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName?> FindAsync(this ITable<SameName> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SameName1? Find(this ITable<SameName1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName1?> FindAsync(this ITable<SameName1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SameName2? Find(this ITable<SameName2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName2?> FindAsync(this ITable<SameName2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Testsamename? Find(this ITable<Testsamename> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testsamename?> FindAsync(this ITable<Testsamename> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
