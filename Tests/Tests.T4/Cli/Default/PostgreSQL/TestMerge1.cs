// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Default.PostgreSQL
{
	[Table("TestMerge1")]
	public class TestMerge1
	{
		[Column("Id"             , IsPrimaryKey = true)] public int             Id              { get; set; } // integer
		[Column("Field1"                              )] public int?            Field1          { get; set; } // integer
		[Column("Field2"                              )] public int?            Field2          { get; set; } // integer
		[Column("Field3"                              )] public int?            Field3          { get; set; } // integer
		[Column("Field4"                              )] public int?            Field4          { get; set; } // integer
		[Column("Field5"                              )] public int?            Field5          { get; set; } // integer
		[Column("FieldInt64"                          )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"                        )] public bool?           FieldBoolean    { get; set; } // boolean
		[Column("FieldString"                         )] public string?         FieldString     { get; set; } // character varying(20)
		[Column("FieldNString"                        )] public string?         FieldNString    { get; set; } // character varying(20)
		[Column("FieldChar"                           )] public char?           FieldChar       { get; set; } // character(1)
		[Column("FieldNChar"                          )] public char?           FieldNChar      { get; set; } // character(1)
		[Column("FieldFloat"                          )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"                         )] public double?         FieldDouble     { get; set; } // double precision
		[Column("FieldDateTime"                       )] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column("FieldDateTime2"                      )] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column("FieldBinary"                         )] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column("FieldGuid"                           )] public Guid?           FieldGuid       { get; set; } // uuid
		[Column("FieldDecimal"                        )] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column("FieldDate"                           )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"                           )] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column("FieldEnumString"                     )] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column("FieldEnumNumber"                     )] public int?            FieldEnumNumber { get; set; } // integer
	}
}
