// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Default.PostgreSQL
{
	public static partial class TestSchemaSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<TestSchemaIdentity> TestSchemaIdentities => _dataContext.GetTable<TestSchemaIdentity>();
			public ITable<Testserialidentity> Testserialidentities => _dataContext.GetTable<Testserialidentity>();
			public ITable<Testsamename>       Testsamenames        => _dataContext.GetTable<Testsamename>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		#region Table Extensions
		public static TestSchemaIdentity? Find(this ITable<TestSchemaIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestSchemaIdentity?> FindAsync(this ITable<TestSchemaIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Testserialidentity? Find(this ITable<Testserialidentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testserialidentity?> FindAsync(this ITable<Testserialidentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Testsamename? Find(this ITable<Testsamename> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testsamename?> FindAsync(this ITable<Testsamename> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion

		[Table("TestSchemaIdentity", Schema = "test_schema")]
		public class TestSchemaIdentity
		{
			[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
		}

		[Table("testserialidentity", Schema = "test_schema")]
		public class Testserialidentity
		{
			[Column("ID", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
		}

		[Table("testsamename", Schema = "test_schema")]
		public class Testsamename
		{
			[Column("id", IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int Id { get; set; } // integer
		}
	}
}
