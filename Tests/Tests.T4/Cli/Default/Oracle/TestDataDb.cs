// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Configuration;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Default.Oracle
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>             AllTypes            => this.GetTable<AllType>();
		public ITable<Binarydatum>         Binarydata          => this.GetTable<Binarydatum>();
		public ITable<Child>               Children            => this.GetTable<Child>();
		public ITable<CollatedTable>       CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>        DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<DecimalOverflow>     DecimalOverflows    => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>              Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>          GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>    InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>   InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Linqdatatypesbc>     Linqdatatypesbcs    => this.GetTable<Linqdatatypesbc>();
		public ITable<LinqDataType>        LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<LongRawTable>        LongRawTables       => this.GetTable<LongRawTable>();
		public ITable<Parent>              Parents             => this.GetTable<Parent>();
		public ITable<Patient>             Patients            => this.GetTable<Patient>();
		public ITable<Person>              People              => this.GetTable<Person>();
		public ITable<Sequencetest>        Sequencetests       => this.GetTable<Sequencetest>();
		public ITable<StgTradeInformation> StgTradeInformation => this.GetTable<StgTradeInformation>();
		/// <summary>
		/// This is table
		/// </summary>
		public ITable<SchemaTestTable>     SchemaTestTables    => this.GetTable<SchemaTestTable>();
		public ITable<StringTest>          StringTests         => this.GetTable<StringTest>();
		public ITable<TestIdentity>        TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>          TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>          TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TEntity>             TEntities           => this.GetTable<TEntity>();
		public ITable<TTestUser>           TTestUsers          => this.GetTable<TTestUser>();
		public ITable<TTestUserContract>   TTestUserContracts  => this.GetTable<TTestUserContract>();
		/// <summary>
		/// This is matview
		/// </summary>
		public ITable<SchemaTestMatView>   SchemaTestMatViews  => this.GetTable<SchemaTestMatView>();
		public ITable<SchemaTestView>      SchemaTestViews     => this.GetTable<SchemaTestView>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Binarydatum? Find(this ITable<Binarydatum> table, decimal binarydataid)
		{
			return table.FirstOrDefault(e => e.Binarydataid == binarydataid);
		}

		public static Task<Binarydatum?> FindAsync(this ITable<Binarydatum> table, decimal binarydataid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Binarydataid == binarydataid, cancellationToken);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, decimal dataTypeId)
		{
			return table.FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, decimal dataTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static Doctor? Find(this ITable<Doctor> table, decimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, decimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, decimal inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, decimal inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, decimal inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, decimal inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static LongRawTable? Find(this ITable<LongRawTable> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<LongRawTable?> FindAsync(this ITable<LongRawTable> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static Patient? Find(this ITable<Patient> table, decimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, decimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static Person? Find(this ITable<Person> table, decimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, decimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static Sequencetest? Find(this ITable<Sequencetest> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Sequencetest?> FindAsync(this ITable<Sequencetest> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static SchemaTestTable? Find(this ITable<SchemaTestTable> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestTable?> FindAsync(this ITable<SchemaTestTable> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static TEntity? Find(this ITable<TEntity> table, decimal entityId)
		{
			return table.FirstOrDefault(e => e.EntityId == entityId);
		}

		public static Task<TEntity?> FindAsync(this ITable<TEntity> table, decimal entityId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EntityId == entityId, cancellationToken);
		}

		public static TTestUser? Find(this ITable<TTestUser> table, decimal userId)
		{
			return table.FirstOrDefault(e => e.UserId == userId);
		}

		public static Task<TTestUser?> FindAsync(this ITable<TTestUser> table, decimal userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId, cancellationToken);
		}

		public static TTestUserContract? Find(this ITable<TTestUserContract> table, decimal userContractId)
		{
			return table.FirstOrDefault(e => e.UserContractId == userContractId);
		}

		public static Task<TTestUserContract?> FindAsync(this ITable<TTestUserContract> table, decimal userContractId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserContractId == userContractId, cancellationToken);
		}

		public static SchemaTestMatView? Find(this ITable<SchemaTestMatView> table, decimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestMatView?> FindAsync(this ITable<SchemaTestMatView> table, decimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion
	}
}
