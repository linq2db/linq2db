// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.Default.SqlServer
{
	public static partial class TestSchemaSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<SameTableName> SameTableNames => _dataContext.GetTable<SameTableName>();
			public ITable<TestSchemaA>   TestSchemaA    => _dataContext.GetTable<TestSchemaA>();
			public ITable<TestSchemaB>   TestSchemaB    => _dataContext.GetTable<TestSchemaB>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		#region Table Extensions
		public static TestSchemaA? Find(this ITable<TestSchemaA> table, int testSchemaAid)
		{
			return table.FirstOrDefault(e => e.TestSchemaAid == testSchemaAid);
		}

		public static Task<TestSchemaA?> FindAsync(this ITable<TestSchemaA> table, int testSchemaAid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaAid == testSchemaAid, cancellationToken);
		}

		public static TestSchemaB? Find(this ITable<TestSchemaB> table, int testSchemaBid)
		{
			return table.FirstOrDefault(e => e.TestSchemaBid == testSchemaBid);
		}

		public static Task<TestSchemaB?> FindAsync(this ITable<TestSchemaB> table, int testSchemaBid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaBid == testSchemaBid, cancellationToken);
		}
		#endregion

		[Table("SameTableName", Schema = "TestSchema")]
		public class SameTableName
		{
			[Column("id")] public int? Id { get; set; } // int
		}

		[Table("TestSchemaA", Schema = "TestSchema")]
		public class TestSchemaA
		{
			[Column("TestSchemaAID", IsPrimaryKey = true)] public int TestSchemaAid { get; set; } // int
			[Column("Field1"                            )] public int Field1        { get; set; } // int

			#region Associations
			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid))]
			public IEnumerable<TestSchemaB> TestSchemaB { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid))]
			public IEnumerable<TestSchemaB> TestSchemaB1 { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId))]
			public IEnumerable<TestSchemaB> TestSchemaB2 { get; set; } = null!;
			#endregion
		}

		[Table("TestSchemaB", Schema = "TestSchema")]
		public class TestSchemaB
		{
			[Column("TestSchemaBID"          , IsPrimaryKey = true)] public int TestSchemaBid       { get; set; } // int
			[Column("OriginTestSchemaAID"                         )] public int OriginTestSchemaAid { get; set; } // int
			[Column("TargetTestSchemaAID"                         )] public int TargetTestSchemaAid { get; set; } // int
			[Column("Target_Test_Schema_A_ID"                     )] public int TargetTestSchemaAId { get; set; } // int

			#region Associations
			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(OriginTestSchemaAid), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA OriginTestSchemaA { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAid), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA TargetTestSchemaA { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAId), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA TargetTestSchemaA1 { get; set; } = null!;
			#endregion
		}
	}
}
