// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using System;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.DB2
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Alltype>           Alltypes            => this.GetTable<Alltype>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Mastertable>       Mastertables        => this.GetTable<Mastertable>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<Slavetable>        Slavetables         => this.GetTable<Slavetable>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<Personview>        Personviews         => this.GetTable<Personview>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestModule1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule1TestTableFunction(default));

		public IQueryable<TestModule1TestTableFunctionResult> TestModule1TestTableFunction(int? i)
		{
			return this.GetTable<TestModule1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestModule1TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion

		#region TestModule2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule2TestTableFunction(default));

		public IQueryable<TestModule2TestTableFunctionResult> TestModule2TestTableFunction(int? i)
		{
			return this.GetTable<TestModule2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestModule2TestTableFunctionResult
		{
			public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Slavetable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		public static Mastertable Mastertable(this Slavetable obj, IDataContext db)
		{
			return db.GetTable<Mastertable>().First(t => obj.Id222222222222222222222222 == t.Id1 && obj.Id1 == t.Id2);
		}
		#endregion

		#region Mastertable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE backreference
		/// </summary>
		public static IQueryable<Slavetable> Slavetables(this Mastertable obj, IDataContext db)
		{
			return db.GetTable<Slavetable>().Where(t => t.Id222222222222222222222222 == obj.Id1 && t.Id1 == obj.Id2);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ADDISSUE792RECORD");
		}

		public static Task<int> Addissue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ADDISSUE792RECORD", cancellationToken);
		}
		#endregion

		#region PersonSelectbykey
		public static int PersonSelectbykey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProc("PERSON_SELECTBYKEY", parameters);
		}

		public static Task<int> PersonSelectbykeyAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("PERSON_SELECTBYKEY", cancellationToken, parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule1TestProcedure
		public static int TestModule1TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_MODULE1.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule1TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE1.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule2TestProcedure
		public static int TestModule2TestProcedure(this TestDataDB dataConnection, int? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProc("TEST_MODULE2.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule2TestProcedureAsync(this TestDataDB dataConnection, int? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE2.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule1TestFunction
		public static int? TestModule1TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule2TestFunction
		public static int? TestModule2TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
