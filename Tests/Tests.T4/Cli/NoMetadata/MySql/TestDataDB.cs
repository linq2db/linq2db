// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.MySql
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<AllTypesNoYear>    AllTypesNoYears     => this.GetTable<AllTypesNoYear>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>      DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<FullTextIndexTest> FullTextIndexTests  => this.GetTable<FullTextIndexTest>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Issue1993>         Issue1993           => this.GetTable<Issue1993>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TestSameName>      TestSameNames       => this.GetTable<TestSameName>();
		/// <summary>
		/// VIEW
		/// </summary>
		public ITable<PersonView>        PersonViews         => this.GetTable<PersonView>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("`AddIssue792Record`");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("`AddIssue792Record`", cancellationToken);
		}
		#endregion

		#region Issue2313Parameters
		public static IEnumerable<Issue2313ParametersResult> Issue2313Parameters(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, string? json, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, int? year, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob),
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text),
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("Json", json, DataType.Json),
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Year", year, DataType.Int32),
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection)
			};
			return dataConnection.QueryProc<Issue2313ParametersResult>("`Issue2313Parameters`", parameters);
		}

		public static Task<IEnumerable<Issue2313ParametersResult>> Issue2313ParametersAsync(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, string? json, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, int? year, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 255
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob),
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text),
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("Json", json, DataType.Json),
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Year", year, DataType.Int32),
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection)
			};
			return dataConnection.QueryProcAsync<Issue2313ParametersResult>("`Issue2313Parameters`", cancellationToken, parameters);
		}

		public partial class Issue2313ParametersResult
		{
			public string?   VarCharDefault     { get; set; }
			public char?     VarChar1           { get; set; }
			public string?   Char255            { get; set; }
			public char?     Char1              { get; set; }
			public byte[]?   VarBinary255       { get; set; }
			public byte[]?   Binary255          { get; set; }
			public byte[]?   TinyBlob           { get; set; }
			public byte[]?   Blob               { get; set; }
			public byte[]?   MediumBlob         { get; set; }
			public byte[]?   LongBlob           { get; set; }
			public string?   TinyText           { get; set; }
			public string?   Text               { get; set; }
			public string?   MediumText         { get; set; }
			public string?   LongText           { get; set; }
			public DateTime? Date               { get; set; }
			public DateTime? DateTime           { get; set; }
			public DateTime? TimeStamp          { get; set; }
			public TimeSpan? Time               { get; set; }
			public string?   Json               { get; set; }
			public sbyte?    TinyInt            { get; set; }
			public byte?     TinyIntUnsigned    { get; set; }
			public short?    SmallInt           { get; set; }
			public ushort?   SmallIntUnsigned   { get; set; }
			public int?      MediumInt          { get; set; }
			public uint?     MediumIntUnsigned  { get; set; }
			public int?      Int                { get; set; }
			public uint?     IntUnsigned        { get; set; }
			public long?     BigInt             { get; set; }
			public ulong?    BigIntUnsigned     { get; set; }
			public decimal?  Decimal            { get; set; }
			public float?    Float              { get; set; }
			public double?   Double             { get; set; }
			public bool?     Boolean            { get; set; }
			public bool?     Bit1               { get; set; }
			public bool?     Bit8               { get; set; }
			public bool?     Bit10              { get; set; }
			public bool?     Bit16              { get; set; }
			public bool?     Bit32              { get; set; }
			public bool?     Bit64              { get; set; }
			public string?   Enum               { get; set; }
			public string?   Set                { get; set; }
			public int?      Year               { get; set; }
			public byte[]?   Geometry           { get; set; }
			public byte[]?   Point              { get; set; }
			public byte[]?   LineString         { get; set; }
			public byte[]?   Polygon            { get; set; }
			public byte[]?   MultiPoint         { get; set; }
			public byte[]?   MultiLineString    { get; set; }
			public byte[]?   MultiPolygon       { get; set; }
			public byte[]?   GeometryCollection { get; set; }
		}
		#endregion

		#region Issue2313Results
		public static IEnumerable<Issue2313ResultsResult> Issue2313Results(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, string? json, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, int? year)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 4000
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob),
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text),
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Json", json, DataType.Json),
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection),
				new DataParameter("Year", year, DataType.Int32)
			};
			return dataConnection.QueryProc<Issue2313ResultsResult>("`Issue2313Results`", parameters);
		}

		public static Task<IEnumerable<Issue2313ResultsResult>> Issue2313ResultsAsync(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, string? json, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, int? year, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					Size = 4000
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob),
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text),
				new DataParameter("Date", date, DataType.Date),
				new DataParameter("DateTime", dateTime, DataType.DateTime),
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime),
				new DataParameter("Time", time, DataType.Time),
				new DataParameter("TinyInt", tinyInt, DataType.SByte),
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte),
				new DataParameter("SmallInt", smallInt, DataType.Int16),
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16),
				new DataParameter("MediumInt", mediumInt, DataType.Int32),
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32),
				new DataParameter("Int", @int, DataType.Int32),
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32),
				new DataParameter("BigInt", bigInt, DataType.Int64),
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64),
				new DataParameter("Decimal", @decimal, DataType.Decimal),
				new DataParameter("Float", @float, DataType.Single),
				new DataParameter("Double", @double, DataType.Double),
				new DataParameter("Boolean", boolean, DataType.SByte),
				new DataParameter("Bit1", bit1, DataType.BitArray),
				new DataParameter("Bit8", bit8, DataType.BitArray),
				new DataParameter("Bit10", bit10, DataType.BitArray),
				new DataParameter("Bit16", bit16, DataType.BitArray),
				new DataParameter("Bit32", bit32, DataType.BitArray),
				new DataParameter("Bit64", bit64, DataType.BitArray),
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					Size = 3
				},
				new DataParameter("Json", json, DataType.Json),
				new DataParameter("Geometry", geometry),
				new DataParameter("Point", point),
				new DataParameter("LineString", lineString),
				new DataParameter("Polygon", polygon),
				new DataParameter("MultiPoint", multiPoint),
				new DataParameter("MultiLineString", multiLineString),
				new DataParameter("MultiPolygon", multiPolygon),
				new DataParameter("GeometryCollection", geometryCollection),
				new DataParameter("Year", year, DataType.Int32)
			};
			return dataConnection.QueryProcAsync<Issue2313ResultsResult>("`Issue2313Results`", cancellationToken, parameters);
		}

		public partial class Issue2313ResultsResult
		{
			public string?   VarCharDefault     { get; set; }
			public char?     VarChar1           { get; set; }
			public string?   Char255            { get; set; }
			public char?     Char1              { get; set; }
			public byte[]?   VarBinary255       { get; set; }
			public byte[]?   Binary255          { get; set; }
			public byte[]?   TinyBlob           { get; set; }
			public byte[]?   Blob               { get; set; }
			public byte[]?   MediumBlob         { get; set; }
			public byte[]?   LongBlob           { get; set; }
			public string?   TinyText           { get; set; }
			public string?   Text               { get; set; }
			public string?   MediumText         { get; set; }
			public string?   LongText           { get; set; }
			public DateTime? Date               { get; set; }
			public DateTime? DateTime           { get; set; }
			public DateTime? TimeStamp          { get; set; }
			public TimeSpan? Time               { get; set; }
			public sbyte?    TinyInt            { get; set; }
			public byte?     TinyIntUnsigned    { get; set; }
			public short?    SmallInt           { get; set; }
			public ushort?   SmallIntUnsigned   { get; set; }
			public int?      MediumInt          { get; set; }
			public uint?     MediumIntUnsigned  { get; set; }
			public int?      Int                { get; set; }
			public uint?     IntUnsigned        { get; set; }
			public long?     BigInt             { get; set; }
			public ulong?    BigIntUnsigned     { get; set; }
			public decimal?  Decimal            { get; set; }
			public float?    Float              { get; set; }
			public double?   Double             { get; set; }
			public bool?     Boolean            { get; set; }
			public bool?     Bit1               { get; set; }
			public bool?     Bit8               { get; set; }
			public bool?     Bit10              { get; set; }
			public bool?     Bit16              { get; set; }
			public bool?     Bit32              { get; set; }
			public bool?     Bit64              { get; set; }
			public string?   Enum               { get; set; }
			public string?   Set                { get; set; }
			public int?      Year               { get; set; }
			public string?   Json               { get; set; }
			public byte[]?   Geometry           { get; set; }
			public byte[]?   Point              { get; set; }
			public byte[]?   LineString         { get; set; }
			public byte[]?   Polygon            { get; set; }
			public byte[]?   MultiPoint         { get; set; }
			public byte[]?   MultiLineString    { get; set; }
			public byte[]?   MultiPolygon       { get; set; }
			public byte[]?   GeometryCollection { get; set; }
		}
		#endregion

		#region TestOutputParametersWithoutTableProcedure
		public static int TestOutputParametersWithoutTableProcedure(this TestDataDB dataConnection, string? aInParam, out sbyte? aOutParam)
		{
			var parameters = new []
			{
				new DataParameter("aInParam", aInParam, DataType.VarChar)
				{
					Size = 256
				},
				new DataParameter("aOutParam", null, DataType.SByte)
				{
					Direction = ParameterDirection.Output
				}
			};
			aOutParam = Converter.ChangeTypeTo<sbyte?>(parameters[1].Value);
			return dataConnection.ExecuteProc("`TestOutputParametersWithoutTableProcedure`", parameters);
		}

		public static async Task<TestOutputParametersWithoutTableProcedureResults> TestOutputParametersWithoutTableProcedureAsync(this TestDataDB dataConnection, string? aInParam, sbyte? aOutParam, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("aInParam", aInParam, DataType.VarChar)
				{
					Size = 256
				},
				new DataParameter("aOutParam", null, DataType.SByte)
				{
					Direction = ParameterDirection.Output
				}
			};
			var result = await dataConnection.ExecuteProcAsync("`TestOutputParametersWithoutTableProcedure`", cancellationToken, parameters);
			return new TestOutputParametersWithoutTableProcedureResults()
			{
				Result = result,
				AOutParam = Converter.ChangeTypeTo<sbyte?>(parameters[1].Value)
			};
		}

		public class TestOutputParametersWithoutTableProcedureResults
		{
			public int    Result    { get; set; }
			public sbyte? AOutParam { get; set; }
		}
		#endregion

		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection, int? param3, ref int? param2, out int? param1)
		{
			var parameters = new []
			{
				new DataParameter("param3", param3, DataType.Int32),
				new DataParameter("param2", param2, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("param1", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output
				}
			};
			param2 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			param1 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<TestProcedureResult>("`TestProcedure`", parameters).ToList();
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, int? param3, int? param2, int? param1, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("param3", param3, DataType.Int32),
				new DataParameter("param2", param2, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("param1", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output
				}
			};
			var result = await dataConnection.QueryProcAsync<TestProcedureResult>("`TestProcedure`", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result.ToList(),
				Param1 = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				Param2 = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public partial class TestProcedureResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}

		public class TestProcedureResults
		{
			public IEnumerable<TestProcedureResult> Result { get; set; } = null!;
			public int?                             Param1 { get; set; }
			public int?                             Param2 { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		public static string? TestFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
