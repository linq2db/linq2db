// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.SqlServerNorthwind
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Category>                   Categories                   => this.GetTable<Category>();
		public ITable<CustomerCustomerDemo>       CustomerCustomerDemos        => this.GetTable<CustomerCustomerDemo>();
		public ITable<CustomerDemographic>        CustomerDemographics         => this.GetTable<CustomerDemographic>();
		public ITable<Customer>                   Customers                    => this.GetTable<Customer>();
		public ITable<EmployeeTerritory>          EmployeeTerritories          => this.GetTable<EmployeeTerritory>();
		public ITable<Employee>                   Employees                    => this.GetTable<Employee>();
		public ITable<OrderDetail>                OrderDetails                 => this.GetTable<OrderDetail>();
		public ITable<Order>                      Orders                       => this.GetTable<Order>();
		public ITable<Product>                    Products                     => this.GetTable<Product>();
		public ITable<Region>                     Regions                      => this.GetTable<Region>();
		public ITable<Shipper>                    Shippers                     => this.GetTable<Shipper>();
		public ITable<Supplier>                   Suppliers                    => this.GetTable<Supplier>();
		public ITable<Territory>                  Territories                  => this.GetTable<Territory>();
		public ITable<AlphabeticalListOfProduct>  AlphabeticalListOfProducts   => this.GetTable<AlphabeticalListOfProduct>();
		public ITable<CategorySalesFor1997>       CategorySalesFor1997         => this.GetTable<CategorySalesFor1997>();
		public ITable<CurrentProductList>         CurrentProductLists          => this.GetTable<CurrentProductList>();
		public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities => this.GetTable<CustomerAndSuppliersByCity>();
		public ITable<Invoice>                    Invoices                     => this.GetTable<Invoice>();
		public ITable<OrderDetailsExtended>       OrderDetailsExtendeds        => this.GetTable<OrderDetailsExtended>();
		public ITable<OrderSubtotal>              OrderSubtotals               => this.GetTable<OrderSubtotal>();
		public ITable<OrdersQry>                  OrdersQries                  => this.GetTable<OrdersQry>();
		public ITable<ProductSalesFor1997>        ProductSalesFor1997          => this.GetTable<ProductSalesFor1997>();
		public ITable<ProductsAboveAveragePrice>  ProductsAboveAveragePrices   => this.GetTable<ProductsAboveAveragePrice>();
		public ITable<ProductsByCategory>         ProductsByCategories         => this.GetTable<ProductsByCategory>();
		public ITable<QuarterlyOrder>             QuarterlyOrders              => this.GetTable<QuarterlyOrder>();
		public ITable<SalesTotalsByAmount>        SalesTotalsByAmounts         => this.GetTable<SalesTotalsByAmount>();
		public ITable<SalesByCategory>            SalesByCategories            => this.GetTable<SalesByCategory>();
		public ITable<SummaryOfSalesByQuarter>    SummaryOfSalesByQuarters     => this.GetTable<SummaryOfSalesByQuarter>();
		public ITable<SummaryOfSalesByYear>       SummaryOfSalesByYears        => this.GetTable<SummaryOfSalesByYear>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region CustomerCustomerDemo Associations
		/// <summary>
		/// FK_CustomerCustomerDemo
		/// </summary>
		public static CustomerDemographic FkCustomerCustomerDemo(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<CustomerDemographic>().First(t => obj.CustomerTypeId == t.CustomerTypeId);
		}

		/// <summary>
		/// FK_CustomerCustomerDemo_Customers
		/// </summary>
		public static Customer Customers(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<Customer>().First(t => obj.CustomerId == t.CustomerId);
		}
		#endregion

		#region CustomerDemographic Associations
		/// <summary>
		/// FK_CustomerCustomerDemo backreference
		/// </summary>
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this CustomerDemographic obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerTypeId == obj.CustomerTypeId);
		}
		#endregion

		#region Customer Associations
		/// <summary>
		/// FK_CustomerCustomerDemo_Customers backreference
		/// </summary>
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this Customer obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerId == obj.CustomerId);
		}

		/// <summary>
		/// FK_Orders_Customers backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Customer obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.CustomerId == obj.CustomerId);
		}
		#endregion

		#region Employee Associations
		/// <summary>
		/// FK_Employees_Employees
		/// </summary>
		public static Employee? Employees(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.ReportsTo == t.EmployeeId);
		}

		/// <summary>
		/// FK_Employees_Employees backreference
		/// </summary>
		public static IQueryable<Employee> Employees1(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().Where(t => t.ReportsTo == obj.EmployeeId);
		}

		/// <summary>
		/// FK_EmployeeTerritories_Employees backreference
		/// </summary>
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Employee obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.EmployeeId == obj.EmployeeId);
		}

		/// <summary>
		/// FK_Orders_Employees backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Employee obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.EmployeeId == obj.EmployeeId);
		}
		#endregion

		#region EmployeeTerritory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Employees
		/// </summary>
		public static Employee Employees(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Employee>().First(t => obj.EmployeeId == t.EmployeeId);
		}

		/// <summary>
		/// FK_EmployeeTerritories_Territories
		/// </summary>
		public static Territory Territories(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Territory>().First(t => obj.TerritoryId == t.TerritoryId);
		}
		#endregion

		#region Territory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Territories backreference
		/// </summary>
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Territory obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.TerritoryId == obj.TerritoryId);
		}

		/// <summary>
		/// FK_Territories_Region
		/// </summary>
		public static Region Region(this Territory obj, IDataContext db)
		{
			return db.GetTable<Region>().First(t => obj.RegionId == t.RegionId);
		}
		#endregion

		#region Order Detail Associations
		/// <summary>
		/// FK_Order_Details_Orders
		/// </summary>
		public static Order OrderDetailsOrders(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Order>().First(t => obj.OrderId == t.OrderId);
		}

		/// <summary>
		/// FK_Order_Details_Products
		/// </summary>
		public static Product OrderDetailsProducts(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Product>().First(t => obj.ProductId == t.ProductId);
		}
		#endregion

		#region Order Associations
		/// <summary>
		/// FK_Order_Details_Orders backreference
		/// </summary>
		public static IQueryable<OrderDetail> OrderDetails(this Order obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.OrderId == obj.OrderId);
		}

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		public static Customer? Customer(this Order obj, IDataContext db)
		{
			return db.GetTable<Customer>().FirstOrDefault(t => obj.CustomerId == t.CustomerId);
		}

		/// <summary>
		/// FK_Orders_Employees
		/// </summary>
		public static Employee? Employee(this Order obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.EmployeeId == t.EmployeeId);
		}

		/// <summary>
		/// FK_Orders_Shippers
		/// </summary>
		public static Shipper? Shippers(this Order obj, IDataContext db)
		{
			return db.GetTable<Shipper>().FirstOrDefault(t => obj.ShipVia == t.ShipperId);
		}
		#endregion

		#region Product Associations
		/// <summary>
		/// FK_Order_Details_Products backreference
		/// </summary>
		public static IQueryable<OrderDetail> OrderDetails1(this Product obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.ProductId == obj.ProductId);
		}

		/// <summary>
		/// FK_Products_Categories
		/// </summary>
		public static Category? Category(this Product obj, IDataContext db)
		{
			return db.GetTable<Category>().FirstOrDefault(t => obj.CategoryId == t.CategoryId);
		}

		/// <summary>
		/// FK_Products_Suppliers
		/// </summary>
		public static Supplier? Supplier(this Product obj, IDataContext db)
		{
			return db.GetTable<Supplier>().FirstOrDefault(t => obj.SupplierId == t.SupplierId);
		}
		#endregion

		#region Shipper Associations
		/// <summary>
		/// FK_Orders_Shippers backreference
		/// </summary>
		public static IQueryable<Order> Orders(this Shipper obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.ShipVia == obj.ShipperId);
		}
		#endregion

		#region Category Associations
		/// <summary>
		/// FK_Products_Categories backreference
		/// </summary>
		public static IQueryable<Product> Products(this Category obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.CategoryId == obj.CategoryId);
		}
		#endregion

		#region Supplier Associations
		/// <summary>
		/// FK_Products_Suppliers backreference
		/// </summary>
		public static IQueryable<Product> Products(this Supplier obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.SupplierId == obj.SupplierId);
		}
		#endregion

		#region Region Associations
		/// <summary>
		/// FK_Territories_Region backreference
		/// </summary>
		public static IQueryable<Territory> Territories(this Region obj, IDataContext db)
		{
			return db.GetTable<Territory>().Where(t => t.RegionId == obj.RegionId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region CustOrderHist
		public static IEnumerable<CustOrderHistResult> CustOrderHist(this TestDataDB dataConnection, string? customerId)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProc<CustOrderHistResult>("[CustOrderHist]", parameters);
		}

		public static Task<IEnumerable<CustOrderHistResult>> CustOrderHistAsync(this TestDataDB dataConnection, string? customerId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProcAsync<CustOrderHistResult>("[CustOrderHist]", cancellationToken, parameters);
		}

		public partial class CustOrderHistResult
		{
			public string ProductName { get; set; } = null!;
			public int?   Total       { get; set; }
		}
		#endregion

		#region CustOrdersDetail
		public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this TestDataDB dataConnection, int? orderId)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
			};
			return dataConnection.QueryProc<CustOrdersDetailResult>("[CustOrdersDetail]", parameters);
		}

		public static Task<IEnumerable<CustOrdersDetailResult>> CustOrdersDetailAsync(this TestDataDB dataConnection, int? orderId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
			};
			return dataConnection.QueryProcAsync<CustOrdersDetailResult>("[CustOrdersDetail]", cancellationToken, parameters);
		}

		public partial class CustOrdersDetailResult
		{
			public string   ProductName   { get; set; } = null!;
			public decimal  UnitPrice     { get; set; }
			public short    Quantity      { get; set; }
			public int?     Discount      { get; set; }
			public decimal? ExtendedPrice { get; set; }
		}
		#endregion

		#region CustOrdersOrders
		public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this TestDataDB dataConnection, string? customerId)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProc<CustOrdersOrdersResult>("[CustOrdersOrders]", parameters);
		}

		public static Task<IEnumerable<CustOrdersOrdersResult>> CustOrdersOrdersAsync(this TestDataDB dataConnection, string? customerId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					Size = 5
				}
			};
			return dataConnection.QueryProcAsync<CustOrdersOrdersResult>("[CustOrdersOrders]", cancellationToken, parameters);
		}

		public partial class CustOrdersOrdersResult
		{
			public int       OrderId      { get; set; }
			public DateTime? OrderDate    { get; set; }
			public DateTime? RequiredDate { get; set; }
			public DateTime? ShippedDate  { get; set; }
		}
		#endregion

		#region Employee Sales By Country
		public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[Employee Sales by Country]", parameters);
		}

		public static Task<IEnumerable<EmployeeSalesByCountryResult>> EmployeeSalesByCountryAsync(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProcAsync<EmployeeSalesByCountryResult>("[Employee Sales by Country]", cancellationToken, parameters);
		}

		public partial class EmployeeSalesByCountryResult
		{
			public string?   Country     { get; set; }
			public string    LastName    { get; set; } = null!;
			public string    FirstName   { get; set; } = null!;
			public DateTime? ShippedDate { get; set; }
			public int       OrderId     { get; set; }
			public decimal?  SaleAmount  { get; set; }
		}
		#endregion

		#region Sales By Year
		public static IEnumerable<SalesByYearResult> SalesByYear(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProc<SalesByYearResult>("[Sales by Year]", parameters);
		}

		public static Task<IEnumerable<SalesByYearResult>> SalesByYearAsync(this TestDataDB dataConnection, DateTime? beginningDate, DateTime? endingDate, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime),
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
			};
			return dataConnection.QueryProcAsync<SalesByYearResult>("[Sales by Year]", cancellationToken, parameters);
		}

		public partial class SalesByYearResult
		{
			public DateTime? ShippedDate { get; set; }
			public int       OrderId     { get; set; }
			public decimal?  Subtotal    { get; set; }
			public string?   Year        { get; set; }
		}
		#endregion

		#region SalesByCategory
		public static IEnumerable<SalesByCategoryResult> SalesByCategory(this TestDataDB dataConnection, string? categoryName, string? ordYear)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					Size = 4
				}
			};
			return dataConnection.QueryProc<SalesByCategoryResult>("[SalesByCategory]", parameters);
		}

		public static Task<IEnumerable<SalesByCategoryResult>> SalesByCategoryAsync(this TestDataDB dataConnection, string? categoryName, string? ordYear, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					Size = 4
				}
			};
			return dataConnection.QueryProcAsync<SalesByCategoryResult>("[SalesByCategory]", cancellationToken, parameters);
		}

		public partial class SalesByCategoryResult
		{
			public string   ProductName   { get; set; } = null!;
			public decimal? TotalPurchase { get; set; }
		}
		#endregion

		#region Ten Most Expensive Products
		public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]");
		}

		public static Task<IEnumerable<TenMostExpensiveProductsResult>> TenMostExpensiveProductsAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]", cancellationToken);
		}

		public partial class TenMostExpensiveProductsResult
		{
			public string   TenMostExpensiveProducts { get; set; } = null!;
			public decimal? UnitPrice                { get; set; }
		}
		#endregion
		#endregion
	}
}
