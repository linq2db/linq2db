// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.SqlServer
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		#endregion

		public ITable<AllType>                 AllTypes                 => this.GetTable<AllType>();
		public ITable<AllTypes2>               AllTypes2                => this.GetTable<AllTypes2>();
		public ITable<Child>                   Children                 => this.GetTable<Child>();
		public ITable<CollatedTable>           CollatedTables           => this.GetTable<CollatedTable>();
		public ITable<DataType>                DataTypes                => this.GetTable<DataType>();
		public ITable<DecimalOverflow>         DecimalOverflows         => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>                  Doctors                  => this.GetTable<Doctor>();
		public ITable<GrandChild>              GrandChildren            => this.GetTable<GrandChild>();
		public ITable<GuidId>                  GuidIds                  => this.GetTable<GuidId>();
		public ITable<GuidId2>                 GuidId2                  => this.GetTable<GuidId2>();
		public ITable<IndexTable>              IndexTables              => this.GetTable<IndexTable>();
		public ITable<IndexTable2>             IndexTable2              => this.GetTable<IndexTable2>();
		public ITable<InheritanceChild>        InheritanceChildren      => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>       InheritanceParents       => this.GetTable<InheritanceParent>();
		public ITable<Issue1115>               Issue1115                => this.GetTable<Issue1115>();
		public ITable<Issue1144>               Issue1144                => this.GetTable<Issue1144>();
		public ITable<LinqDataType>            LinqDataTypes            => this.GetTable<LinqDataType>();
		public ITable<Member>                  Members                  => this.GetTable<Member>();
		public ITable<NameTest>                NameTests                => this.GetTable<NameTest>();
		/// <summary>
		/// This is Parent table
		/// </summary>
		public ITable<Parent>                  Parents                  => this.GetTable<Parent>();
		public ITable<Patient>                 Patients                 => this.GetTable<Patient>();
		public ITable<Person>                  People                   => this.GetTable<Person>();
		public ITable<Provider>                Providers                => this.GetTable<Provider>();
		public ITable<SameTableName>           SameTableNames           => this.GetTable<SameTableName>();
		public ITable<SqlType>                 SqlTypes                 => this.GetTable<SqlType>();
		public ITable<TestIdentity>            TestIdentities           => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>              TestMerge1               => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>              TestMerge2               => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>       TestMergeIdentities      => this.GetTable<TestMergeIdentity>();
		public ITable<TestSchemaX>             TestSchemaX              => this.GetTable<TestSchemaX>();
		public ITable<TestSchemaY>             TestSchemaY              => this.GetTable<TestSchemaY>();
		public ITable<TestSchemaSameTableName> TestSchemaSameTableNames => this.GetTable<TestSchemaSameTableName>();
		public ITable<ParentChildView>         ParentChildViews         => this.GetTable<ParentChildView>();
		public ITable<ParentView>              ParentViews              => this.GetTable<ParentView>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		/// <summary>
		/// This is &lt;test&gt; table function!
		/// </summary>
		/// <param name="id">
		/// This is &lt;test&gt; table function parameter!
		/// </param>
		public IQueryable<Parent> GetParentById(int? id)
		{
			return this.GetTable<Parent>(this, _getParentById, id);
		}
		#endregion

		#region Issue1921
		private static readonly MethodInfo _issue1921 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.Issue1921());

		public IQueryable<Issue1921Result> Issue1921()
		{
			return this.GetTable<Issue1921Result>(this, _issue1921);
		}

		public partial class Issue1921Result
		{
			public string Name  { get; set; } = null!;
			public int?   Objid { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region IndexTable2 Associations
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		public static IndexTable Patient2IndexTable(this IndexTable2 obj, IDataContext db)
		{
			return db.GetTable<IndexTable>().First(t => obj.PkField2 == t.PkField2 && obj.PkField1 == t.PkField1);
		}
		#endregion

		#region IndexTable Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		public static IndexTable2? IndexTable2(this IndexTable obj, IDataContext db)
		{
			return db.GetTable<IndexTable2>().FirstOrDefault(t => t.PkField2 == obj.PkField2 && t.PkField1 == obj.PkField1);
		}
		#endregion

		#region Provider Associations
		/// <summary>
		/// FK_Provider_Member
		/// </summary>
		public static Member Member(this Provider obj, IDataContext db)
		{
			return db.GetTable<Member>().First(t => obj.ProviderId == t.MemberId);
		}
		#endregion

		#region Member Associations
		/// <summary>
		/// FK_Provider_Member backreference
		/// </summary>
		public static Provider? Provider(this Member obj, IDataContext db)
		{
			return db.GetTable<Provider>().FirstOrDefault(t => t.ProviderId == obj.MemberId);
		}
		#endregion

		#region TestSchemaB Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
		/// </summary>
		public static TestSchemaSchema.TestSchemaA OriginTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.OriginTestSchemaAid == t.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
		/// </summary>
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAid == t.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
		/// </summary>
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA1(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAId == t.TestSchemaAid);
		}
		#endregion

		#region TestSchemaA Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.OriginTestSchemaAid == obj.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB1(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAid == obj.TestSchemaAid);
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
		/// </summary>
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB2(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAId == obj.TestSchemaAid);
		}
		#endregion

		#region TestSchemaY Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID
		/// </summary>
		public static TestSchemaX TestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.TestSchemaXid == t.TestSchemaXid);
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX
		/// </summary>
		public static TestSchemaX ParentTestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.ParentTestSchemaXid == t.TestSchemaXid);
		}
		#endregion

		#region TestSchemaX Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID backreference
		/// </summary>
		public static IQueryable<TestSchemaY> TestSchemaY(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.TestSchemaXid == obj.TestSchemaXid);
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX backreference
		/// </summary>
		public static IQueryable<TestSchemaY> TestSchemaY1(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.ParentTestSchemaXid == obj.TestSchemaXid);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[AddIssue792Record]");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("[AddIssue792Record]", cancellationToken);
		}
		#endregion

		#region DuplicateColumnNames
		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]");
		}

		public static Task<IEnumerable<DuplicateColumnNamesResult>> DuplicateColumnNamesAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]", cancellationToken);
		}

		public partial class DuplicateColumnNamesResult
		{
			public int    Id  { get; set; }
			public string Id1 { get; set; } = null!;
		}
		#endregion

		#region ExecuteProcIntParameters
		public static int ExecuteProcIntParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("[ExecuteProcIntParameters]", parameters);
		}

		public static async Task<ExecuteProcIntParametersResults> ExecuteProcIntParametersAsync(this TestDataDB dataConnection, int? input, int? output, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[ExecuteProcIntParameters]", cancellationToken, parameters);
			return new ExecuteProcIntParametersResults()
			{
				Result = result,
				Output = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class ExecuteProcIntParametersResults
		{
			public int  Result { get; set; }
			public int? Output { get; set; }
		}
		#endregion

		#region ExecuteProcStringParameters
		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static IEnumerable<ExecuteProcStringParametersResult> ExecuteProcStringParameters(this TestDataDB dataConnection, int? input, ref int? output)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.QueryProc(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<string>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", parameters).ToList();
		}

		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static async Task<ExecuteProcStringParametersResults> ExecuteProcStringParametersAsync(this TestDataDB dataConnection, int? input, int? output, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<string>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", cancellationToken, parameters);
			return new ExecuteProcStringParametersResults()
			{
				Result = result.ToList(),
				Output = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public partial class ExecuteProcStringParametersResult
		{
			public string Column { get; set; } = null!;
		}

		public class ExecuteProcStringParametersResults
		{
			public IEnumerable<ExecuteProcStringParametersResult> Result { get; set; } = null!;
			public int?                                           Output { get; set; }
		}
		#endregion

		#region Issue1897
		public static int Issue1897(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("[Issue1897]");
		}

		public static Task<int> Issue1897Async(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("[Issue1897]", cancellationToken);
		}
		#endregion

		#region OutRefEnumTest
		public static int OutRefEnumTest(this TestDataDB dataConnection, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputStr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("[OutRefEnumTest]", parameters);
		}

		public static async Task<OutRefEnumTestResults> OutRefEnumTestAsync(this TestDataDB dataConnection, string? str, string? outputStr, string? inputOutputStr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefEnumTest]", cancellationToken, parameters);
			return new OutRefEnumTestResults()
			{
				Result = result,
				InputOutputStr = Converter.ChangeTypeTo<string?>(parameters[2].Value),
				OutputStr = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class OutRefEnumTestResults
		{
			public int     Result         { get; set; }
			public string? InputOutputStr { get; set; }
			public string? OutputStr      { get; set; }
		}
		#endregion

		#region OutRefTest
		public static int OutRefTest(this TestDataDB dataConnection, int? id, ref int? outputId, ref int? inputOutputId, string? str, ref string? outputStr, ref string? inputOutputStr)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32),
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			outputId = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			inputOutputId = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			outputStr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			inputOutputStr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("[OutRefTest]", parameters);
		}

		public static async Task<OutRefTestResults> OutRefTestAsync(this TestDataDB dataConnection, int? id, int? outputId, int? inputOutputId, string? str, string? outputStr, string? inputOutputStr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32),
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					Size = 50
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefTest]", cancellationToken, parameters);
			return new OutRefTestResults()
			{
				Result = result,
				InputOutputId = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				InputOutputStr = Converter.ChangeTypeTo<string?>(parameters[5].Value),
				OutputId = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				OutputStr = Converter.ChangeTypeTo<string?>(parameters[4].Value)
			};
		}

		public class OutRefTestResults
		{
			public int     Result         { get; set; }
			public int?    InputOutputId  { get; set; }
			public string? InputOutputStr { get; set; }
			public int?    OutputId       { get; set; }
			public string? OutputStr      { get; set; }
		}
		#endregion

		#region PatientSelectAll
		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectAllResult>("[Patient_SelectAll]");
		}

		public static Task<IEnumerable<PatientSelectAllResult>> PatientSelectAllAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<PatientSelectAllResult>("[Patient_SelectAll]", cancellationToken);
		}

		public partial class PatientSelectAllResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
			public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PatientSelectByNameResult>("[Patient_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PatientSelectByNameResult>> PatientSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PatientSelectByNameResult>("[Patient_SelectByName]", cancellationToken, parameters);
		}

		public partial class PatientSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
			public string  Diagnosis  { get; set; } = null!;
		}
		#endregion

		#region PersonSearch
		public static int PersonSearch(this TestDataDB dataConnection, string? nameFilter)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					Size = 512
				}
			};
			return dataConnection.ExecuteProc("[PersonSearch]", parameters);
		}

		public static Task<int> PersonSearchAsync(this TestDataDB dataConnection, string? nameFilter, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					Size = 512
				}
			};
			return dataConnection.ExecuteProcAsync("[PersonSearch]", cancellationToken, parameters);
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
			};
			return dataConnection.ExecuteProc("[Person_Delete]", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, int? personId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("[Person_Delete]", cancellationToken, parameters);
		}
		#endregion

		#region PersonInsert
		public static IEnumerable<PersonInsertResult> PersonInsert(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.QueryProc<PersonInsertResult>("[Person_Insert]", parameters);
		}

		public static Task<IEnumerable<PersonInsertResult>> PersonInsertAsync(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.QueryProcAsync<PersonInsertResult>("[Person_Insert]", cancellationToken, parameters);
		}

		public partial class PersonInsertResult
		{
			public int? PersonId { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		public static int PersonInsertOutputParameter(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, ref int? personId)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			personId = Converter.ChangeTypeTo<int?>(parameters[4].Value);
			return dataConnection.ExecuteProc("[Person_Insert_OutputParameter]", parameters);
		}

		public static async Task<PersonInsertOutputParameterResults> PersonInsertOutputParameterAsync(this TestDataDB dataConnection, string? firstName, string? lastName, string? middleName, char? gender, int? personId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Person_Insert_OutputParameter]", cancellationToken, parameters);
			return new PersonInsertOutputParameterResults()
			{
				Result = result,
				PersonId = Converter.ChangeTypeTo<int?>(parameters[4].Value)
			};
		}

		public class PersonInsertOutputParameterResults
		{
			public int  Result   { get; set; }
			public int? PersonId { get; set; }
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc<PersonSelectAllResult>("[Person_SelectAll]");
		}

		public static Task<IEnumerable<PersonSelectAllResult>> PersonSelectAllAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<PersonSelectAllResult>("[Person_SelectAll]", cancellationToken);
		}

		public partial class PersonSelectAllResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[Person_SelectByKey]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByKeyResult>> PersonSelectByKeyAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProcAsync<PersonSelectByKeyResult>("[Person_SelectByKey]", cancellationToken, parameters);
		}

		public partial class PersonSelectByKeyResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKeyLowercase
		public static IEnumerable<PersonSelectByKeyLowercaseResult> PersonSelectByKeyLowercase(this TestDataDB dataConnection, int? id)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProc<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByKeyLowercaseResult>> PersonSelectByKeyLowercaseAsync(this TestDataDB dataConnection, int? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
			};
			return dataConnection.QueryProcAsync<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", cancellationToken, parameters);
		}

		public partial class PersonSelectByKeyLowercaseResult
		{
			public int    PersonId  { get; set; }
			public string FirstName { get; set; } = null!;
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectByNameResult>("[Person_SelectByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectByNameResult>> PersonSelectByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectByNameResult>("[Person_SelectByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, string? firstName, string? lastName)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[Person_SelectListByName]", parameters);
		}

		public static Task<IEnumerable<PersonSelectListByNameResult>> PersonSelectListByNameAsync(this TestDataDB dataConnection, string? firstName, string? lastName, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				}
			};
			return dataConnection.QueryProcAsync<PersonSelectListByNameResult>("[Person_SelectListByName]", cancellationToken, parameters);
		}

		public partial class PersonSelectListByNameResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personId, string? firstName, string? lastName, string? middleName, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32),
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("[Person_Update]", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, int? personId, string? firstName, string? lastName, string? middleName, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32),
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("[Person_Update]", cancellationToken, parameters);
		}
		#endregion

		#region QueryProcMultipleParameters
		public static IEnumerable<QueryProcMultipleParametersResult> QueryProcMultipleParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2, ref int? output3)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			output3 = Converter.ChangeTypeTo<int?>(parameters[3].Value);
			return dataConnection.QueryProc<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", parameters).ToList();
		}

		public static async Task<QueryProcMultipleParametersResults> QueryProcMultipleParametersAsync(this TestDataDB dataConnection, int? input, int? output1, int? output2, int? output3, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", cancellationToken, parameters);
			return new QueryProcMultipleParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				Output3 = Converter.ChangeTypeTo<int?>(parameters[3].Value)
			};
		}

		public partial class QueryProcMultipleParametersResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}

		public class QueryProcMultipleParametersResults
		{
			public IEnumerable<QueryProcMultipleParametersResult> Result  { get; set; } = null!;
			public int?                                           Output1 { get; set; }
			public int?                                           Output2 { get; set; }
			public int?                                           Output3 { get; set; }
		}
		#endregion

		#region QueryProcParameters
		public static IEnumerable<QueryProcParametersResult> QueryProcParameters(this TestDataDB dataConnection, int? input, ref int? output1, ref int? output2)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<QueryProcParametersResult>("[QueryProcParameters]", parameters).ToList();
		}

		public static async Task<QueryProcParametersResults> QueryProcParametersAsync(this TestDataDB dataConnection, int? input, int? output1, int? output2, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32),
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcParametersResult>("[QueryProcParameters]", cancellationToken, parameters);
			return new QueryProcParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<int?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<int?>(parameters[2].Value)
			};
		}

		public partial class QueryProcParametersResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public char    Gender     { get; set; }
		}

		public class QueryProcParametersResults
		{
			public IEnumerable<QueryProcParametersResult> Result  { get; set; } = null!;
			public int?                                   Output1 { get; set; }
			public int?                                   Output2 { get; set; }
		}
		#endregion

		#region SelectImplicitColumn
		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this TestDataDB dataConnection)
		{
			return dataConnection.QueryProc(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]");
		}

		public static Task<IEnumerable<SelectImplicitColumnResult>> SelectImplicitColumnAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]", cancellationToken);
		}

		public partial class SelectImplicitColumnResult
		{
			public int Column { get; set; }
		}
		#endregion

		#region TableTypeTestProc
		public static IEnumerable<TableTypeTestProcResult> TableTypeTestProc(this TestDataDB dataConnection, DataTable? table)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
			};
			return dataConnection.QueryProc<TableTypeTestProcResult>("[TableTypeTestProc]", parameters);
		}

		public static Task<IEnumerable<TableTypeTestProcResult>> TableTypeTestProcAsync(this TestDataDB dataConnection, DataTable? table, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
			};
			return dataConnection.QueryProcAsync<TableTypeTestProcResult>("[TableTypeTestProc]", cancellationToken, parameters);
		}

		public partial class TableTypeTestProcResult
		{
			public int?    Id   { get; set; }
			public string? Name { get; set; }
		}
		#endregion

		#region VariableResults
		public static IEnumerable<VariableResultsResult> VariableResults(this TestDataDB dataConnection, bool? returnFullRow)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
			};
			return dataConnection.QueryProc<VariableResultsResult>("[VariableResults]", parameters);
		}

		public static Task<IEnumerable<VariableResultsResult>> VariableResultsAsync(this TestDataDB dataConnection, bool? returnFullRow, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
			};
			return dataConnection.QueryProcAsync<VariableResultsResult>("[VariableResults]", cancellationToken, parameters);
		}

		public partial class VariableResultsResult
		{
			public int    Code   { get; set; }
			public string Value1 { get; set; } = null!;
			public string Value2 { get; set; } = null!;
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region ScalarFunction
		/// <summary>
		/// This is &lt;test&gt; scalar function!
		/// </summary>
		/// <param name="value">
		/// This is &lt;test&gt; scalar function parameter!
		/// </param>
		public static int? ScalarFunction(int? @value)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
