// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.SQLite
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Dual>              Duals               => this.GetTable<Dual>();
		public ITable<FkTestPosition>    FkTestPositions     => this.GetTable<FkTestPosition>();
		public ITable<ForeignKeyTable>   ForeignKeyTables    => this.GetTable<ForeignKeyTable>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<PrimaryKeyTable>   PrimaryKeyTables    => this.GetTable<PrimaryKeyTable>();
		public ITable<TestT4Casing>      TestT4Casings       => this.GetTable<TestT4Casing>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<AllTypesView>      AllTypesViews       => this.GetTable<AllTypesView>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_0_0
		/// </summary>
		public static Person FkDoctor00(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_0_0 backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_0_0 backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region ForeignKeyTable Associations
		/// <summary>
		/// FK_ForeignKeyTable_0_0
		/// </summary>
		public static PrimaryKeyTable PrimaryKeyTable(this ForeignKeyTable obj, IDataContext db)
		{
			return db.GetTable<PrimaryKeyTable>().First(t => obj.PrimaryKeyTableId == t.Id);
		}
		#endregion

		#region PrimaryKeyTable Associations
		/// <summary>
		/// FK_ForeignKeyTable_0_0 backreference
		/// </summary>
		public static IQueryable<ForeignKeyTable> ForeignKeyTables(this PrimaryKeyTable obj, IDataContext db)
		{
			return db.GetTable<ForeignKeyTable>().Where(t => t.PrimaryKeyTableId == obj.Id);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_0_0
		/// </summary>
		public static Person FkPatient00(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion
	}
}
