// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.NetworkInformation;
using System.Reflection;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.PostgreSQL
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			ContextSchema.SetConvertExpression<object?[], ExtensionMethods.TestFunctionParametersResult>(tuple => new ExtensionMethods.TestFunctionParametersResult()
			{
				Param2 = (int?)(tuple[0]),
				Param3 = (int?)(tuple[1])
			});
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
			SchemaName = new SchemaNameSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		public SchemaNameSchema.DataContext SchemaName { get; set; } = null!;
		#endregion

		public ITable<AllType>                  AllTypes                  => this.GetTable<AllType>();
		public ITable<Child>                    Children                  => this.GetTable<Child>();
		public ITable<CollatedTable>            CollatedTables            => this.GetTable<CollatedTable>();
		public ITable<Doctor>                   Doctors                   => this.GetTable<Doctor>();
		public ITable<GrandChild>               GrandChildren             => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>         InheritanceChildren       => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>        InheritanceParents        => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>             LinqDataTypes             => this.GetTable<LinqDataType>();
		public ITable<Parent>                   Parents                   => this.GetTable<Parent>();
		public ITable<Patient>                  Patients                  => this.GetTable<Patient>();
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                   People                    => this.GetTable<Person>();
		public ITable<SequenceCustomNamingTest> SequenceCustomNamingTests => this.GetTable<SequenceCustomNamingTest>();
		public ITable<SequenceTest1>            SequenceTest1             => this.GetTable<SequenceTest1>();
		public ITable<SequenceTest2>            SequenceTest2             => this.GetTable<SequenceTest2>();
		public ITable<SequenceTest3>            SequenceTest3             => this.GetTable<SequenceTest3>();
		public ITable<TestIdentity>             TestIdentities            => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>               TestMerge1                => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>               TestMerge2                => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>        TestMergeIdentities       => this.GetTable<TestMergeIdentity>();
		public ITable<Entity>                   Entities                  => this.GetTable<Entity>();
		public ITable<SameName>                 SameNames                 => this.GetTable<SameName>();
		public ITable<SameName1>                SameName1                 => this.GetTable<SameName1>();
		public ITable<SameName2>                SameName2                 => this.GetTable<SameName2>();
		public ITable<Testsamename>             Testsamenames             => this.GetTable<Testsamename>();
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                Issue2023                 => this.GetTable<Issue2023>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		public IQueryable<GetParentByIdResult> GetParentById(int? id)
		{
			return this.GetTable<GetParentByIdResult>(this, _getParentById, id);
		}

		public partial class GetParentByIdResult
		{
			public int? ParentId { get; set; }
			public int? Value1   { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		public IQueryable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, param1);
		}

		public partial class TestTableFunctionResult
		{
			public int? Param2 { get; set; }
		}
		#endregion

		#region TestTableFunction1
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction1(default, default));

		public IQueryable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.GetTable<TestTableFunction1Result>(this, _testTableFunction1, param1, param2);
		}

		public partial class TestTableFunction1Result
		{
			public int? Param3 { get; set; }
			public int? Param4 { get; set; }
		}
		#endregion

		#region TestTableFunctionSchema
		private static readonly MethodInfo _testTableFunctionSchema = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunctionSchema());

		public IQueryable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.GetTable<TestTableFunctionSchemaResult>(this, _testTableFunctionSchema);
		}

		public partial class TestTableFunctionSchemaResult
		{
			public int?                        Id                  { get; set; }
			public long?                       BigintDataType      { get; set; }
			public decimal?                    NumericDataType     { get; set; }
			public short?                      SmallintDataType    { get; set; }
			public int?                        IntDataType         { get; set; }
			public decimal?                    MoneyDataType       { get; set; }
			public double?                     DoubleDataType      { get; set; }
			public float?                      RealDataType        { get; set; }
			public DateTime?                   TimestampDataType   { get; set; }
			public DateTimeOffset?             TimestampTzDataType { get; set; }
			public DateTime?                   DateDataType        { get; set; }
			public TimeSpan?                   TimeDataType        { get; set; }
			public DateTimeOffset?             TimeTzDataType      { get; set; }
			public TimeSpan?                   IntervalDataType    { get; set; }
			public TimeSpan?                   IntervalDataType2   { get; set; }
			public char?                       CharDataType        { get; set; }
			public string?                     Char20DataType      { get; set; }
			public string?                     VarcharDataType     { get; set; }
			public string?                     TextDataType        { get; set; }
			public byte[]?                     BinaryDataType      { get; set; }
			public Guid?                       UuidDataType        { get; set; }
			public BitArray?                   BitDataType         { get; set; }
			public bool?                       BooleanDataType     { get; set; }
			public string?                     ColorDataType       { get; set; }
			public NpgsqlPoint?                PointDataType       { get; set; }
			public NpgsqlLSeg?                 LsegDataType        { get; set; }
			public NpgsqlBox?                  BoxDataType         { get; set; }
			public NpgsqlPath?                 PathDataType        { get; set; }
			public NpgsqlPolygon?              PolygonDataType     { get; set; }
			public NpgsqlCircle?               CircleDataType      { get; set; }
			public NpgsqlLine?                 LineDataType        { get; set; }
			public IPAddress?                  InetDataType        { get; set; }
			public ValueTuple<IPAddress, int>? CidrDataType        { get; set; }
			public PhysicalAddress?            MacaddrDataType     { get; set; }
			public PhysicalAddress?            Macaddr8DataType    { get; set; }
			public string?                     JsonDataType        { get; set; }
			public string?                     JsonbDataType       { get; set; }
			public string?                     XmlDataType         { get; set; }
			public BitArray?                   VarBitDataType      { get; set; }
			public string[]?                   Strarray            { get; set; }
			public int[]?                      Intarray            { get; set; }
			public int[]?                      Int2Darray          { get; set; }
			public long[]?                     Longarray           { get; set; }
			public TimeSpan[]?                 Intervalarray       { get; set; }
			public double[]?                   Doublearray         { get; set; }
			public decimal[]?                  Numericarray        { get; set; }
			public decimal[]?                  Decimalarray        { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// Doctor_PersonID_fkey
		/// </summary>
		public static Person PersonIDfkey(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// Doctor_PersonID_fkey backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// Patient_PersonID_fkey backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// Patient_PersonID_fkey
		/// </summary>
		public static Person PersonIDfkey(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region SameName1 Associations
		/// <summary>
		/// same_name
		/// </summary>
		public static SameName? Samename(this SameName1 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion

		#region SameName Associations
		/// <summary>
		/// same_name backreference
		/// </summary>
		public static IQueryable<SameName1> SameNames1(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName1>().Where(t => t.SameName == obj.Id);
		}

		/// <summary>
		/// same_name backreference
		/// </summary>
		public static IQueryable<SameName2> SameNames2(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName2>().Where(t => t.SameName == obj.Id);
		}
		#endregion

		#region SameName2 Associations
		/// <summary>
		/// same_name
		/// </summary>
		public static SameName? Samename(this SameName2 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunctionParameters
		public static TestFunctionParametersResult? TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}

		public partial class TestFunctionParametersResult
		{
			public int? Param2 { get; set; }
			public int? Param3 { get; set; }
		}
		#endregion

		#region TestScalarFunction
		public static string? TestScalarFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestSingleOutParameterFunction
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region AddIfNotExists
		public static object? AddIfNotExists(string? pName)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Addissue792Record
		public static object? Addissue792Record()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Bool
		public static string? Bool(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Date
		public static int? Issue1742Date(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Ts
		public static int? Issue1742Ts(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Tstz
		public static int? Issue1742Tstz(DateTimeOffset? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Reverse
		public static string? Reverse(string? par7)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion

		#region Aggregate Functions
		#region TestAvg
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par9)
		{
			throw new InvalidOperationException("Association cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
