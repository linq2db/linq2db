// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.NoMetadata.Sybase
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity> TestMergeIdentities => this.GetTable<TestMergeIdentity>();
		public ITable<Sysquerymetric>    Sysquerymetrics     => this.GetTable<Sysquerymetric>();
	}

	public static partial class ExtensionMethods
	{
		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection, out int? returnValue)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			returnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			return dataConnection.ExecuteProc("[AddIssue792Record]", parameters);
		}

		public static async Task<AddIssue792RecordResults> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[AddIssue792Record]", cancellationToken, parameters);
			return new AddIssue792RecordResults()
			{
				Result = result,
				ReturnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value)
			};
		}

		public class AddIssue792RecordResults
		{
			public int  Result      { get; set; }
			public int? ReturnValue { get; set; }
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection, out int? returnValue)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			returnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			return dataConnection.QueryProc<PersonSelectAllResult>("[Person_SelectAll]", parameters).ToList();
		}

		public static async Task<PersonSelectAllResults> PersonSelectAllAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("RETURN_VALUE", null, DataType.Int32)
				{
					Direction = ParameterDirection.ReturnValue,
					Size = 10
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectAllResult>("[Person_SelectAll]", cancellationToken, parameters);
			return new PersonSelectAllResults()
			{
				Result = result.ToList(),
				ReturnValue = Converter.ChangeTypeTo<int?>(parameters[0].Value)
			};
		}

		public partial class PersonSelectAllResult
		{
			public int     PersonId   { get; set; }
			public string  FirstName  { get; set; } = null!;
			public string  LastName   { get; set; } = null!;
			public string? MiddleName { get; set; }
			public string  Gender     { get; set; } = null!;
		}

		public class PersonSelectAllResults
		{
			public IEnumerable<PersonSelectAllResult> Result      { get; set; } = null!;
			public int?                               ReturnValue { get; set; }
		}
		#endregion
		#endregion
	}
}
