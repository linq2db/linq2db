// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.MariaDB
{
	[Table("LinqDataTypes")]
	public class LinqDataType
	{
		[Column("ID"            , DataType = DataType.Int32    , DbType = "int(11)"        , Precision = 10  , Scale = 0)] public int?      Id             { get; set; } // int(11)
		[Column("MoneyValue"    , DataType = DataType.Decimal  , DbType = "decimal(10,4)"  , Precision = 10  , Scale = 4)] public decimal?  MoneyValue     { get; set; } // decimal(10,4)
		[Column("DateTimeValue" , DataType = DataType.DateTime , DbType = "datetime(3)"                                 )] public DateTime? DateTimeValue  { get; set; } // datetime(3)
		[Column("DateTimeValue2", DataType = DataType.DateTime , DbType = "datetime"                                    )] public DateTime? DateTimeValue2 { get; set; } // datetime
		[Column("BoolValue"     , DataType = DataType.SByte    , DbType = "tinyint(1)"     , Precision = 3   , Scale = 0)] public bool?     BoolValue      { get; set; } // tinyint(1)
		[Column("GuidValue"     , DataType = DataType.Char     , DbType = "char(36)"       , Length    = 36             )] public string?   GuidValue      { get; set; } // char(36)
		[Column("BinaryValue"   , DataType = DataType.VarBinary, DbType = "varbinary(5000)", Length    = 5000           )] public byte[]?   BinaryValue    { get; set; } // varbinary(5000)
		[Column("SmallIntValue" , DataType = DataType.Int16    , DbType = "smallint(6)"    , Precision = 5   , Scale = 0)] public short?    SmallIntValue  { get; set; } // smallint(6)
		[Column("IntValue"      , DataType = DataType.Int32    , DbType = "int(11)"        , Precision = 10  , Scale = 0)] public int?      IntValue       { get; set; } // int(11)
		[Column("BigIntValue"   , DataType = DataType.Int64    , DbType = "bigint(20)"     , Precision = 19  , Scale = 0)] public long?     BigIntValue    { get; set; } // bigint(20)
		[Column("StringValue"   , DataType = DataType.VarChar  , DbType = "varchar(50)"    , Length    = 50             )] public string?   StringValue    { get; set; } // varchar(50)
	}
}
