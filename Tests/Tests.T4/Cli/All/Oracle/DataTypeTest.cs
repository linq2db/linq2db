// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Oracle
{
	[Table("DataTypeTest")]
	public class DataTypeTest : IEquatable<DataTypeTest>
	{
		[Column("DataTypeID", DataType = DataType.Decimal , DbType = "NUMBER"       , Length = 22  , Scale     = 0  , IsPrimaryKey = true)] public OracleDecimal  DataTypeId { get; set; } // NUMBER
		[Column("Binary_"   , DataType = DataType.Binary  , DbType = "RAW(50)"      , Length = 50                                        )] public OracleBinary?  Binary     { get; set; } // RAW(50)
		[Column("Boolean_"  , DataType = DataType.Decimal , DbType = "NUMBER (1,0)" , Length = 22  , Precision = 1  , Scale        = 0   )] public OracleDecimal? Boolean    { get; set; } // NUMBER (1,0)
		[Column("Byte_"     , DataType = DataType.Decimal , DbType = "NUMBER (3,0)" , Length = 22  , Precision = 3  , Scale        = 0   )] public OracleDecimal? Byte       { get; set; } // NUMBER (3,0)
		[Column("Bytes_"    , DataType = DataType.Blob    , DbType = "BLOB"         , Length = 4000                                      )] public OracleBlob?    Bytes      { get; set; } // BLOB
		[Column("Char_"     , DataType = DataType.NChar   , DbType = "NCHAR(1)"     , Length = 1                                         )] public OracleString?  Char       { get; set; } // NCHAR(1)
		[Column("DateTime_" , DataType = DataType.DateTime, DbType = "DATE"         , Length = 7                                         )] public OracleDate?    DateTime   { get; set; } // DATE
		[Column("Decimal_"  , DataType = DataType.Decimal , DbType = "NUMBER (19,5)", Length = 22  , Precision = 19 , Scale        = 5   )] public OracleDecimal? Decimal    { get; set; } // NUMBER (19,5)
		[Column("Double_"   , DataType = DataType.Decimal , DbType = "FLOAT(126)"   , Length = 22  , Precision = 126                     )] public decimal?       Double     { get; set; } // FLOAT(126)
		[Column("Guid_"     , DataType = DataType.Binary  , DbType = "RAW(16)"      , Length = 16                                        )] public OracleBinary?  Guid       { get; set; } // RAW(16)
		[Column("Int16_"    , DataType = DataType.Decimal , DbType = "NUMBER (5,0)" , Length = 22  , Precision = 5  , Scale        = 0   )] public OracleDecimal? Int16      { get; set; } // NUMBER (5,0)
		[Column("Int32_"    , DataType = DataType.Decimal , DbType = "NUMBER (10,0)", Length = 22  , Precision = 10 , Scale        = 0   )] public OracleDecimal? Int32      { get; set; } // NUMBER (10,0)
		[Column("Int64_"    , DataType = DataType.Decimal , DbType = "NUMBER (20,0)", Length = 22  , Precision = 20 , Scale        = 0   )] public OracleDecimal? Int64      { get; set; } // NUMBER (20,0)
		[Column("Money_"    , DataType = DataType.Decimal , DbType = "NUMBER"       , Length = 22                                        )] public OracleDecimal? Money      { get; set; } // NUMBER
		[Column("SByte_"    , DataType = DataType.Decimal , DbType = "NUMBER (3,0)" , Length = 22  , Precision = 3  , Scale        = 0   )] public OracleDecimal? SByte      { get; set; } // NUMBER (3,0)
		[Column("Single_"   , DataType = DataType.Decimal , DbType = "FLOAT(126)"   , Length = 22  , Precision = 126                     )] public decimal?       Single     { get; set; } // FLOAT(126)
		[Column("Stream_"   , DataType = DataType.Blob    , DbType = "BLOB"         , Length = 4000                                      )] public OracleBlob?    Stream     { get; set; } // BLOB
		[Column("String_"   , DataType = DataType.NVarChar, DbType = "NVARCHAR2(50)", Length = 50                                        )] public string?        String     { get; set; } // NVARCHAR2(50)
		[Column("UInt16_"   , DataType = DataType.Decimal , DbType = "NUMBER (5,0)" , Length = 22  , Precision = 5  , Scale        = 0   )] public OracleDecimal? UInt16     { get; set; } // NUMBER (5,0)
		[Column("UInt32_"   , DataType = DataType.Decimal , DbType = "NUMBER (10,0)", Length = 22  , Precision = 10 , Scale        = 0   )] public OracleDecimal? UInt32     { get; set; } // NUMBER (10,0)
		[Column("UInt64_"   , DataType = DataType.Decimal , DbType = "NUMBER (20,0)", Length = 22  , Precision = 20 , Scale        = 0   )] public OracleDecimal? UInt64     { get; set; } // NUMBER (20,0)
		[Column("Xml_"      , DataType = DataType.Xml     , DbType = "XMLTYPE"      , Length = 2000                                      )] public OracleXmlType? Xml        { get; set; } // XMLTYPE

		#region IEquatable<T> support
		private static readonly IEqualityComparer<DataTypeTest> _equalityComparer = ComparerBuilder.GetEqualityComparer<DataTypeTest>(c => c.DataTypeId);

		public bool Equals(DataTypeTest? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as DataTypeTest);
		}
		#endregion
	}
}
