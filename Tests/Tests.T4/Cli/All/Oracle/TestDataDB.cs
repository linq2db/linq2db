// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Oracle
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>             AllTypes            => this.GetTable<AllType>();
		public ITable<Binarydatum>         Binarydata          => this.GetTable<Binarydatum>();
		public ITable<Child>               Children            => this.GetTable<Child>();
		public ITable<CollatedTable>       CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>        DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<DecimalOverflow>     DecimalOverflows    => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>              Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>          GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>    InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>   InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Linqdatatypesbc>     Linqdatatypesbcs    => this.GetTable<Linqdatatypesbc>();
		public ITable<LinqDataType>        LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<LongRawTable>        LongRawTables       => this.GetTable<LongRawTable>();
		public ITable<Parent>              Parents             => this.GetTable<Parent>();
		public ITable<Patient>             Patients            => this.GetTable<Patient>();
		public ITable<Person>              People              => this.GetTable<Person>();
		public ITable<Sequencetest>        Sequencetests       => this.GetTable<Sequencetest>();
		public ITable<StgTradeInformation> StgTradeInformation => this.GetTable<StgTradeInformation>();
		/// <summary>
		/// This is table
		/// </summary>
		public ITable<SchemaTestTable>     SchemaTestTables    => this.GetTable<SchemaTestTable>();
		public ITable<StringTest>          StringTests         => this.GetTable<StringTest>();
		public ITable<TestIdentity>        TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>          TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>          TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TEntity>             TEntities           => this.GetTable<TEntity>();
		public ITable<TTestUser>           TTestUsers          => this.GetTable<TTestUser>();
		public ITable<TTestUserContract>   TTestUserContracts  => this.GetTable<TTestUserContract>();
		/// <summary>
		/// This is matview
		/// </summary>
		public ITable<SchemaTestMatView>   SchemaTestMatViews  => this.GetTable<SchemaTestMatView>();
		public ITable<SchemaTestView>      SchemaTestViews     => this.GetTable<SchemaTestView>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION")]
		public IQueryable<TestTableFunctionResult> TestTableFunction(OracleDecimal? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			[Column("O", DbType = "NUMBER (38,127)")] public decimal? O { get; set; }
		}
		#endregion

		#region TestPackage1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_PACKAGE1")]
		public IQueryable<TestPackage1TestTableFunctionResult> TestPackage1TestTableFunction(OracleDecimal? i)
		{
			return this.GetTable<TestPackage1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestPackage1TestTableFunctionResult
		{
			[Column("O", DbType = "NUMBER (38,127)")] public decimal? O { get; set; }
		}
		#endregion

		#region TestPackage2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_PACKAGE2")]
		public IQueryable<TestPackage2TestTableFunctionResult> TestPackage2TestTableFunction(OracleDecimal? i)
		{
			return this.GetTable<TestPackage2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestPackage2TestTableFunctionResult
		{
			[Column("O", DbType = "NUMBER (38,127)")] public decimal? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllType? FindAllType(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<AllType>().Where(e => e.Id == id);
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id == @record.Id);
		}

		public static Binarydatum? Find(this ITable<Binarydatum> table, OracleDecimal binarydataid)
		{
			return table.FirstOrDefault(e => e.Binarydataid == binarydataid);
		}

		public static Task<Binarydatum?> FindAsync(this ITable<Binarydatum> table, OracleDecimal binarydataid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Binarydataid == binarydataid, cancellationToken);
		}

		public static IQueryable<Binarydatum> FindQuery(this ITable<Binarydatum> table, OracleDecimal binarydataid)
		{
			return table.Where(e => e.Binarydataid == binarydataid);
		}

		public static Binarydatum? Find(this ITable<Binarydatum> table, Binarydatum @record)
		{
			return table.FirstOrDefault(e => e.Binarydataid == @record.Binarydataid);
		}

		public static Task<Binarydatum?> FindAsync(this ITable<Binarydatum> table, Binarydatum @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Binarydataid == @record.Binarydataid, cancellationToken);
		}

		public static IQueryable<Binarydatum> FindQuery(this ITable<Binarydatum> table, Binarydatum @record)
		{
			return table.Where(e => e.Binarydataid == @record.Binarydataid);
		}

		public static Binarydatum? FindBinarydatum(this TestDataDB db, OracleDecimal binarydataid)
		{
			return db.GetTable<Binarydatum>().FirstOrDefault(e => e.Binarydataid == binarydataid);
		}

		public static Task<Binarydatum?> FindBinarydatumAsync(this TestDataDB db, OracleDecimal binarydataid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Binarydatum>().FirstOrDefaultAsync(e => e.Binarydataid == binarydataid, cancellationToken);
		}

		public static IQueryable<Binarydatum> FindBinarydatumQuery(this TestDataDB db, OracleDecimal binarydataid)
		{
			return db.GetTable<Binarydatum>().Where(e => e.Binarydataid == binarydataid);
		}

		public static Binarydatum? Find(this TestDataDB db, Binarydatum @record)
		{
			return db.GetTable<Binarydatum>().FirstOrDefault(e => e.Binarydataid == @record.Binarydataid);
		}

		public static Task<Binarydatum?> FindAsync(this TestDataDB db, Binarydatum @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Binarydatum>().FirstOrDefaultAsync(e => e.Binarydataid == @record.Binarydataid, cancellationToken);
		}

		public static IQueryable<Binarydatum> FindQuery(this TestDataDB db, Binarydatum @record)
		{
			return db.GetTable<Binarydatum>().Where(e => e.Binarydataid == @record.Binarydataid);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, OracleDecimal dataTypeId)
		{
			return table.FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, OracleDecimal dataTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, OracleDecimal dataTypeId)
		{
			return table.Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static DataTypeTest? FindDataTypeTest(this TestDataDB db, OracleDecimal dataTypeId)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindDataTypeTestAsync(this TestDataDB db, OracleDecimal dataTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindDataTypeTestQuery(this TestDataDB db, OracleDecimal dataTypeId)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this TestDataDB db, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Doctor? Find(this ITable<Doctor> table, OracleDecimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, OracleDecimal personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Doctor? FindDoctor(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == @record.PersonId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, OracleDecimal inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, OracleDecimal inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, OracleDecimal inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, OracleDecimal inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, OracleDecimal inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, OracleDecimal inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, OracleDecimal inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, OracleDecimal inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, OracleDecimal inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, OracleDecimal inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, OracleDecimal inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, OracleDecimal inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static LongRawTable? Find(this ITable<LongRawTable> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<LongRawTable?> FindAsync(this ITable<LongRawTable> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<LongRawTable> FindQuery(this ITable<LongRawTable> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static LongRawTable? Find(this ITable<LongRawTable> table, LongRawTable @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<LongRawTable?> FindAsync(this ITable<LongRawTable> table, LongRawTable @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<LongRawTable> FindQuery(this ITable<LongRawTable> table, LongRawTable @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static LongRawTable? FindLongRawTable(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<LongRawTable>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<LongRawTable?> FindLongRawTableAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<LongRawTable>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<LongRawTable> FindLongRawTableQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<LongRawTable>().Where(e => e.Id == id);
		}

		public static LongRawTable? Find(this TestDataDB db, LongRawTable @record)
		{
			return db.GetTable<LongRawTable>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<LongRawTable?> FindAsync(this TestDataDB db, LongRawTable @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<LongRawTable>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<LongRawTable> FindQuery(this TestDataDB db, LongRawTable @record)
		{
			return db.GetTable<LongRawTable>().Where(e => e.Id == @record.Id);
		}

		public static Patient? Find(this ITable<Patient> table, OracleDecimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, OracleDecimal personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Patient? FindPatient(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? Find(this ITable<Person> table, OracleDecimal personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, OracleDecimal personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? FindPerson(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, OracleDecimal personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, OracleDecimal personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == personId);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Sequencetest? Find(this ITable<Sequencetest> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Sequencetest?> FindAsync(this ITable<Sequencetest> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Sequencetest> FindQuery(this ITable<Sequencetest> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Sequencetest? Find(this ITable<Sequencetest> table, Sequencetest @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Sequencetest?> FindAsync(this ITable<Sequencetest> table, Sequencetest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Sequencetest> FindQuery(this ITable<Sequencetest> table, Sequencetest @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Sequencetest? FindSequencetest(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<Sequencetest>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Sequencetest?> FindSequencetestAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Sequencetest>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Sequencetest> FindSequencetestQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<Sequencetest>().Where(e => e.Id == id);
		}

		public static Sequencetest? Find(this TestDataDB db, Sequencetest @record)
		{
			return db.GetTable<Sequencetest>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Sequencetest?> FindAsync(this TestDataDB db, Sequencetest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Sequencetest>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Sequencetest> FindQuery(this TestDataDB db, Sequencetest @record)
		{
			return db.GetTable<Sequencetest>().Where(e => e.Id == @record.Id);
		}

		public static SchemaTestTable? Find(this ITable<SchemaTestTable> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestTable?> FindAsync(this ITable<SchemaTestTable> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SchemaTestTable> FindQuery(this ITable<SchemaTestTable> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SchemaTestTable? Find(this ITable<SchemaTestTable> table, SchemaTestTable @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SchemaTestTable?> FindAsync(this ITable<SchemaTestTable> table, SchemaTestTable @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SchemaTestTable> FindQuery(this ITable<SchemaTestTable> table, SchemaTestTable @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SchemaTestTable? FindSchemaTestTable(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<SchemaTestTable>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestTable?> FindSchemaTestTableAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SchemaTestTable>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SchemaTestTable> FindSchemaTestTableQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<SchemaTestTable>().Where(e => e.Id == id);
		}

		public static SchemaTestTable? Find(this TestDataDB db, SchemaTestTable @record)
		{
			return db.GetTable<SchemaTestTable>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SchemaTestTable?> FindAsync(this TestDataDB db, SchemaTestTable @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SchemaTestTable>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SchemaTestTable> FindQuery(this TestDataDB db, SchemaTestTable @record)
		{
			return db.GetTable<SchemaTestTable>().Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == @record.Id);
		}

		public static TEntity? Find(this ITable<TEntity> table, OracleDecimal entityId)
		{
			return table.FirstOrDefault(e => e.EntityId == entityId);
		}

		public static Task<TEntity?> FindAsync(this ITable<TEntity> table, OracleDecimal entityId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EntityId == entityId, cancellationToken);
		}

		public static IQueryable<TEntity> FindQuery(this ITable<TEntity> table, OracleDecimal entityId)
		{
			return table.Where(e => e.EntityId == entityId);
		}

		public static TEntity? Find(this ITable<TEntity> table, TEntity @record)
		{
			return table.FirstOrDefault(e => e.EntityId == @record.EntityId);
		}

		public static Task<TEntity?> FindAsync(this ITable<TEntity> table, TEntity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EntityId == @record.EntityId, cancellationToken);
		}

		public static IQueryable<TEntity> FindQuery(this ITable<TEntity> table, TEntity @record)
		{
			return table.Where(e => e.EntityId == @record.EntityId);
		}

		public static TEntity? FindTEntity(this TestDataDB db, OracleDecimal entityId)
		{
			return db.GetTable<TEntity>().FirstOrDefault(e => e.EntityId == entityId);
		}

		public static Task<TEntity?> FindTEntityAsync(this TestDataDB db, OracleDecimal entityId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TEntity>().FirstOrDefaultAsync(e => e.EntityId == entityId, cancellationToken);
		}

		public static IQueryable<TEntity> FindTEntityQuery(this TestDataDB db, OracleDecimal entityId)
		{
			return db.GetTable<TEntity>().Where(e => e.EntityId == entityId);
		}

		public static TEntity? Find(this TestDataDB db, TEntity @record)
		{
			return db.GetTable<TEntity>().FirstOrDefault(e => e.EntityId == @record.EntityId);
		}

		public static Task<TEntity?> FindAsync(this TestDataDB db, TEntity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TEntity>().FirstOrDefaultAsync(e => e.EntityId == @record.EntityId, cancellationToken);
		}

		public static IQueryable<TEntity> FindQuery(this TestDataDB db, TEntity @record)
		{
			return db.GetTable<TEntity>().Where(e => e.EntityId == @record.EntityId);
		}

		public static TTestUser? Find(this ITable<TTestUser> table, OracleDecimal userId)
		{
			return table.FirstOrDefault(e => e.UserId == userId);
		}

		public static Task<TTestUser?> FindAsync(this ITable<TTestUser> table, OracleDecimal userId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == userId, cancellationToken);
		}

		public static IQueryable<TTestUser> FindQuery(this ITable<TTestUser> table, OracleDecimal userId)
		{
			return table.Where(e => e.UserId == userId);
		}

		public static TTestUser? Find(this ITable<TTestUser> table, TTestUser @record)
		{
			return table.FirstOrDefault(e => e.UserId == @record.UserId);
		}

		public static Task<TTestUser?> FindAsync(this ITable<TTestUser> table, TTestUser @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserId == @record.UserId, cancellationToken);
		}

		public static IQueryable<TTestUser> FindQuery(this ITable<TTestUser> table, TTestUser @record)
		{
			return table.Where(e => e.UserId == @record.UserId);
		}

		public static TTestUser? FindTTestUser(this TestDataDB db, OracleDecimal userId)
		{
			return db.GetTable<TTestUser>().FirstOrDefault(e => e.UserId == userId);
		}

		public static Task<TTestUser?> FindTTestUserAsync(this TestDataDB db, OracleDecimal userId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TTestUser>().FirstOrDefaultAsync(e => e.UserId == userId, cancellationToken);
		}

		public static IQueryable<TTestUser> FindTTestUserQuery(this TestDataDB db, OracleDecimal userId)
		{
			return db.GetTable<TTestUser>().Where(e => e.UserId == userId);
		}

		public static TTestUser? Find(this TestDataDB db, TTestUser @record)
		{
			return db.GetTable<TTestUser>().FirstOrDefault(e => e.UserId == @record.UserId);
		}

		public static Task<TTestUser?> FindAsync(this TestDataDB db, TTestUser @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TTestUser>().FirstOrDefaultAsync(e => e.UserId == @record.UserId, cancellationToken);
		}

		public static IQueryable<TTestUser> FindQuery(this TestDataDB db, TTestUser @record)
		{
			return db.GetTable<TTestUser>().Where(e => e.UserId == @record.UserId);
		}

		public static TTestUserContract? Find(this ITable<TTestUserContract> table, OracleDecimal userContractId)
		{
			return table.FirstOrDefault(e => e.UserContractId == userContractId);
		}

		public static Task<TTestUserContract?> FindAsync(this ITable<TTestUserContract> table, OracleDecimal userContractId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserContractId == userContractId, cancellationToken);
		}

		public static IQueryable<TTestUserContract> FindQuery(this ITable<TTestUserContract> table, OracleDecimal userContractId)
		{
			return table.Where(e => e.UserContractId == userContractId);
		}

		public static TTestUserContract? Find(this ITable<TTestUserContract> table, TTestUserContract @record)
		{
			return table.FirstOrDefault(e => e.UserContractId == @record.UserContractId);
		}

		public static Task<TTestUserContract?> FindAsync(this ITable<TTestUserContract> table, TTestUserContract @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.UserContractId == @record.UserContractId, cancellationToken);
		}

		public static IQueryable<TTestUserContract> FindQuery(this ITable<TTestUserContract> table, TTestUserContract @record)
		{
			return table.Where(e => e.UserContractId == @record.UserContractId);
		}

		public static TTestUserContract? FindTTestUserContract(this TestDataDB db, OracleDecimal userContractId)
		{
			return db.GetTable<TTestUserContract>().FirstOrDefault(e => e.UserContractId == userContractId);
		}

		public static Task<TTestUserContract?> FindTTestUserContractAsync(this TestDataDB db, OracleDecimal userContractId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TTestUserContract>().FirstOrDefaultAsync(e => e.UserContractId == userContractId, cancellationToken);
		}

		public static IQueryable<TTestUserContract> FindTTestUserContractQuery(this TestDataDB db, OracleDecimal userContractId)
		{
			return db.GetTable<TTestUserContract>().Where(e => e.UserContractId == userContractId);
		}

		public static TTestUserContract? Find(this TestDataDB db, TTestUserContract @record)
		{
			return db.GetTable<TTestUserContract>().FirstOrDefault(e => e.UserContractId == @record.UserContractId);
		}

		public static Task<TTestUserContract?> FindAsync(this TestDataDB db, TTestUserContract @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TTestUserContract>().FirstOrDefaultAsync(e => e.UserContractId == @record.UserContractId, cancellationToken);
		}

		public static IQueryable<TTestUserContract> FindQuery(this TestDataDB db, TTestUserContract @record)
		{
			return db.GetTable<TTestUserContract>().Where(e => e.UserContractId == @record.UserContractId);
		}

		public static SchemaTestMatView? Find(this ITable<SchemaTestMatView> table, OracleDecimal id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestMatView?> FindAsync(this ITable<SchemaTestMatView> table, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SchemaTestMatView> FindQuery(this ITable<SchemaTestMatView> table, OracleDecimal id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SchemaTestMatView? Find(this ITable<SchemaTestMatView> table, SchemaTestMatView @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SchemaTestMatView?> FindAsync(this ITable<SchemaTestMatView> table, SchemaTestMatView @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SchemaTestMatView> FindQuery(this ITable<SchemaTestMatView> table, SchemaTestMatView @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SchemaTestMatView? FindSchemaTestMatView(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<SchemaTestMatView>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SchemaTestMatView?> FindSchemaTestMatViewAsync(this TestDataDB db, OracleDecimal id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SchemaTestMatView>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SchemaTestMatView> FindSchemaTestMatViewQuery(this TestDataDB db, OracleDecimal id)
		{
			return db.GetTable<SchemaTestMatView>().Where(e => e.Id == id);
		}

		public static SchemaTestMatView? Find(this TestDataDB db, SchemaTestMatView @record)
		{
			return db.GetTable<SchemaTestMatView>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SchemaTestMatView?> FindAsync(this TestDataDB db, SchemaTestMatView @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SchemaTestMatView>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SchemaTestMatView> FindQuery(this TestDataDB db, SchemaTestMatView @record)
		{
			return db.GetTable<SchemaTestMatView>().Where(e => e.Id == @record.Id);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// Fk_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Oracle.Doctor.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person FkPerson(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// Fk_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(Oracle.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// Fk_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(Oracle.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// Fk_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Oracle.Patient.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person FkPerson(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region TTestUserContract Associations
		/// <summary>
		/// SYS_C007182
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TTestUserContract.UserId), OtherKey = nameof(TTestUser.UserId))]
		public static TTestUser User(this TTestUserContract obj, IDataContext db)
		{
			return db.GetTable<TTestUser>().First(t => obj.UserId == t.UserId);
		}
		#endregion

		#region TTestUser Associations
		/// <summary>
		/// SYS_C007182 backreference
		/// </summary>
		[Association(ThisKey = nameof(TTestUser.UserId), OtherKey = nameof(TTestUserContract.UserId))]
		public static IQueryable<TTestUserContract> TTestUserContracts(this TTestUser obj, IDataContext db)
		{
			return db.GetTable<TTestUserContract>().Where(t => t.UserId == obj.UserId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ADDISSUE792RECORD");
		}

		public static Task<int> Addissue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ADDISSUE792RECORD", cancellationToken);
		}
		#endregion

		#region Alloutputparameters
		public static int Alloutputparameters(this TestDataDB dataConnection, ref OracleDecimal? id, ref OracleDecimal? bigintdatatype, ref OracleDecimal? numericdatatype, ref OracleDecimal? bitdatatype, ref OracleDecimal? smallintdatatype, ref OracleDecimal? decimaldatatype, ref OracleDecimal? smallmoneydatatype, ref OracleDecimal? intdatatype, ref OracleDecimal? tinyintdatatype, ref OracleDecimal? moneydatatype, ref OracleDecimal? floatdatatype, ref OracleDecimal? realdatatype, ref OracleDate? datetimedatatype, ref OracleTimeStamp? datetime2Datatype, ref OracleTimeStampTZ? datetimeoffsetdatatype, ref OracleTimeStampLTZ? localzonedatatype, ref OracleString? chardatatype, ref OracleString? char20Datatype, ref string? varchardatatype, ref OracleClob? textdatatype, ref OracleString? nchardatatype, ref string? nvarchardatatype, ref string? ntextdatatype, ref OracleBlob? binarydatatype, ref OracleBFile? bfiledatatype, ref OracleBinary? guiddatatype, ref object? xmldatatype)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("BIGINTDATATYPE", bigintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("NUMERICDATATYPE", numericdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("BITDATATYPE", bitdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("SMALLINTDATATYPE", smallintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("DECIMALDATATYPE", decimaldatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("SMALLMONEYDATATYPE", smallmoneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("INTDATATYPE", intdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("TINYINTDATATYPE", tinyintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("MONEYDATATYPE", moneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("FLOATDATATYPE", floatdatatype, DataType.Double)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BINARY_DOUBLE"
				},
				new DataParameter("REALDATATYPE", realdatatype, DataType.Single)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BINARY_FLOAT"
				},
				new DataParameter("DATETIMEDATATYPE", datetimedatatype, DataType.DateTime)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "DATE"
				},
				new DataParameter("DATETIME2DATATYPE", datetime2Datatype, DataType.DateTime2)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP"
				},
				new DataParameter("DATETIMEOFFSETDATATYPE", datetimeoffsetdatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP WITH TIME ZONE"
				},
				new DataParameter("LOCALZONEDATATYPE", localzonedatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP WITH LOCAL TIME ZONE"
				},
				new DataParameter("CHARDATATYPE", chardatatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CHAR"
				},
				new DataParameter("CHAR20DATATYPE", char20Datatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CHAR"
				},
				new DataParameter("VARCHARDATATYPE", varchardatatype, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "VARCHAR2"
				},
				new DataParameter("TEXTDATATYPE", textdatatype, DataType.Text)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CLOB"
				},
				new DataParameter("NCHARDATATYPE", nchardatatype, DataType.NChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NCHAR"
				},
				new DataParameter("NVARCHARDATATYPE", nvarchardatatype, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				},
				new DataParameter("NTEXTDATATYPE", ntextdatatype, DataType.NText)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NCLOB"
				},
				new DataParameter("BINARYDATATYPE", binarydatatype, DataType.Blob)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BLOB"
				},
				new DataParameter("BFILEDATATYPE", bfiledatatype, DataType.VarBinary)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BFILE"
				},
				new DataParameter("GUIDDATATYPE", guiddatatype, DataType.Binary)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "RAW"
				},
				new DataParameter("XMLDATATYPE", xmldatatype)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "UNDEFINED"
				}
			};
			id = Converter.ChangeTypeTo<OracleDecimal?>(parameters[0].Value);
			bigintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value);
			numericdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[2].Value);
			bitdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[3].Value);
			smallintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[4].Value);
			decimaldatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[5].Value);
			smallmoneydatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[6].Value);
			intdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[7].Value);
			tinyintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[8].Value);
			moneydatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[9].Value);
			floatdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[10].Value);
			realdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[11].Value);
			datetimedatatype = Converter.ChangeTypeTo<OracleDate?>(parameters[12].Value);
			datetime2Datatype = Converter.ChangeTypeTo<OracleTimeStamp?>(parameters[13].Value);
			datetimeoffsetdatatype = Converter.ChangeTypeTo<OracleTimeStampTZ?>(parameters[14].Value);
			localzonedatatype = Converter.ChangeTypeTo<OracleTimeStampLTZ?>(parameters[15].Value);
			chardatatype = Converter.ChangeTypeTo<OracleString?>(parameters[16].Value);
			char20Datatype = Converter.ChangeTypeTo<OracleString?>(parameters[17].Value);
			varchardatatype = Converter.ChangeTypeTo<string?>(parameters[18].Value);
			textdatatype = Converter.ChangeTypeTo<OracleClob?>(parameters[19].Value);
			nchardatatype = Converter.ChangeTypeTo<OracleString?>(parameters[20].Value);
			nvarchardatatype = Converter.ChangeTypeTo<string?>(parameters[21].Value);
			ntextdatatype = Converter.ChangeTypeTo<string?>(parameters[22].Value);
			binarydatatype = Converter.ChangeTypeTo<OracleBlob?>(parameters[23].Value);
			bfiledatatype = Converter.ChangeTypeTo<OracleBFile?>(parameters[24].Value);
			guiddatatype = Converter.ChangeTypeTo<OracleBinary?>(parameters[25].Value);
			xmldatatype = Converter.ChangeTypeTo<object?>(parameters[26].Value);
			return dataConnection.ExecuteProc("ALLOUTPUTPARAMETERS", parameters);
		}

		public static async Task<AlloutputparametersResults> AlloutputparametersAsync(this TestDataDB dataConnection, OracleDecimal? id, OracleDecimal? bigintdatatype, OracleDecimal? numericdatatype, OracleDecimal? bitdatatype, OracleDecimal? smallintdatatype, OracleDecimal? decimaldatatype, OracleDecimal? smallmoneydatatype, OracleDecimal? intdatatype, OracleDecimal? tinyintdatatype, OracleDecimal? moneydatatype, OracleDecimal? floatdatatype, OracleDecimal? realdatatype, OracleDate? datetimedatatype, OracleTimeStamp? datetime2Datatype, OracleTimeStampTZ? datetimeoffsetdatatype, OracleTimeStampLTZ? localzonedatatype, OracleString? chardatatype, OracleString? char20Datatype, string? varchardatatype, OracleClob? textdatatype, OracleString? nchardatatype, string? nvarchardatatype, string? ntextdatatype, OracleBlob? binarydatatype, OracleBFile? bfiledatatype, OracleBinary? guiddatatype, object? xmldatatype, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("BIGINTDATATYPE", bigintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("NUMERICDATATYPE", numericdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("BITDATATYPE", bitdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("SMALLINTDATATYPE", smallintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("DECIMALDATATYPE", decimaldatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("SMALLMONEYDATATYPE", smallmoneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("INTDATATYPE", intdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("TINYINTDATATYPE", tinyintdatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("MONEYDATATYPE", moneydatatype, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("FLOATDATATYPE", floatdatatype, DataType.Double)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BINARY_DOUBLE"
				},
				new DataParameter("REALDATATYPE", realdatatype, DataType.Single)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BINARY_FLOAT"
				},
				new DataParameter("DATETIMEDATATYPE", datetimedatatype, DataType.DateTime)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "DATE"
				},
				new DataParameter("DATETIME2DATATYPE", datetime2Datatype, DataType.DateTime2)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP"
				},
				new DataParameter("DATETIMEOFFSETDATATYPE", datetimeoffsetdatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP WITH TIME ZONE"
				},
				new DataParameter("LOCALZONEDATATYPE", localzonedatatype, DataType.DateTimeOffset)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "TIMESTAMP WITH LOCAL TIME ZONE"
				},
				new DataParameter("CHARDATATYPE", chardatatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CHAR"
				},
				new DataParameter("CHAR20DATATYPE", char20Datatype, DataType.Char)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CHAR"
				},
				new DataParameter("VARCHARDATATYPE", varchardatatype, DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "VARCHAR2"
				},
				new DataParameter("TEXTDATATYPE", textdatatype, DataType.Text)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "CLOB"
				},
				new DataParameter("NCHARDATATYPE", nchardatatype, DataType.NChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NCHAR"
				},
				new DataParameter("NVARCHARDATATYPE", nvarchardatatype, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				},
				new DataParameter("NTEXTDATATYPE", ntextdatatype, DataType.NText)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NCLOB"
				},
				new DataParameter("BINARYDATATYPE", binarydatatype, DataType.Blob)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BLOB"
				},
				new DataParameter("BFILEDATATYPE", bfiledatatype, DataType.VarBinary)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "BFILE"
				},
				new DataParameter("GUIDDATATYPE", guiddatatype, DataType.Binary)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "RAW"
				},
				new DataParameter("XMLDATATYPE", xmldatatype)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "UNDEFINED"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("ALLOUTPUTPARAMETERS", cancellationToken, parameters);
			return new AlloutputparametersResults()
			{
				Result = result,
				Bfiledatatype = Converter.ChangeTypeTo<OracleBFile?>(parameters[24].Value),
				Bigintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value),
				Binarydatatype = Converter.ChangeTypeTo<OracleBlob?>(parameters[23].Value),
				Bitdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[3].Value),
				Char20Datatype = Converter.ChangeTypeTo<OracleString?>(parameters[17].Value),
				Chardatatype = Converter.ChangeTypeTo<OracleString?>(parameters[16].Value),
				Datetime2Datatype = Converter.ChangeTypeTo<OracleTimeStamp?>(parameters[13].Value),
				Datetimedatatype = Converter.ChangeTypeTo<OracleDate?>(parameters[12].Value),
				Datetimeoffsetdatatype = Converter.ChangeTypeTo<OracleTimeStampTZ?>(parameters[14].Value),
				Decimaldatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[5].Value),
				Floatdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[10].Value),
				Guiddatatype = Converter.ChangeTypeTo<OracleBinary?>(parameters[25].Value),
				Id = Converter.ChangeTypeTo<OracleDecimal?>(parameters[0].Value),
				Intdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[7].Value),
				Localzonedatatype = Converter.ChangeTypeTo<OracleTimeStampLTZ?>(parameters[15].Value),
				Moneydatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[9].Value),
				Nchardatatype = Converter.ChangeTypeTo<OracleString?>(parameters[20].Value),
				Ntextdatatype = Converter.ChangeTypeTo<string?>(parameters[22].Value),
				Numericdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[2].Value),
				Nvarchardatatype = Converter.ChangeTypeTo<string?>(parameters[21].Value),
				Realdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[11].Value),
				Smallintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[4].Value),
				Smallmoneydatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[6].Value),
				Textdatatype = Converter.ChangeTypeTo<OracleClob?>(parameters[19].Value),
				Tinyintdatatype = Converter.ChangeTypeTo<OracleDecimal?>(parameters[8].Value),
				Varchardatatype = Converter.ChangeTypeTo<string?>(parameters[18].Value),
				Xmldatatype = Converter.ChangeTypeTo<object?>(parameters[26].Value)
			};
		}

		public class AlloutputparametersResults
		{
			public int                 Result                 { get; set; }
			public OracleBFile?        Bfiledatatype          { get; set; }
			public OracleDecimal?      Bigintdatatype         { get; set; }
			public OracleBlob?         Binarydatatype         { get; set; }
			public OracleDecimal?      Bitdatatype            { get; set; }
			public OracleString?       Char20Datatype         { get; set; }
			public OracleString?       Chardatatype           { get; set; }
			public OracleTimeStamp?    Datetime2Datatype      { get; set; }
			public OracleDate?         Datetimedatatype       { get; set; }
			public OracleTimeStampTZ?  Datetimeoffsetdatatype { get; set; }
			public OracleDecimal?      Decimaldatatype        { get; set; }
			public OracleDecimal?      Floatdatatype          { get; set; }
			public OracleBinary?       Guiddatatype           { get; set; }
			public OracleDecimal?      Id                     { get; set; }
			public OracleDecimal?      Intdatatype            { get; set; }
			public OracleTimeStampLTZ? Localzonedatatype      { get; set; }
			public OracleDecimal?      Moneydatatype          { get; set; }
			public OracleString?       Nchardatatype          { get; set; }
			public string?             Ntextdatatype          { get; set; }
			public OracleDecimal?      Numericdatatype        { get; set; }
			public string?             Nvarchardatatype       { get; set; }
			public OracleDecimal?      Realdatatype           { get; set; }
			public OracleDecimal?      Smallintdatatype       { get; set; }
			public OracleDecimal?      Smallmoneydatatype     { get; set; }
			public OracleClob?         Textdatatype           { get; set; }
			public OracleDecimal?      Tinyintdatatype        { get; set; }
			public string?             Varchardatatype        { get; set; }
			public object?             Xmldatatype            { get; set; }
		}
		#endregion

		#region Arraytest
		public static int Arraytest(this TestDataDB dataConnection, object? pintarray, out object? poutputintarray, ref object? pinputoutputintarray, object? pstrarray, out object? poutputstrarray, ref object? pinputoutputstrarray)
		{
			var parameters = new []
			{
				new DataParameter("PINTARRAY", pintarray)
				{
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PINPUTOUTPUTINTARRAY", pinputoutputintarray)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PSTRARRAY", pstrarray)
				{
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("POUTPUTSTRARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PINPUTOUTPUTSTRARRAY", pinputoutputstrarray)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "PL/SQL TABLE"
				}
			};
			poutputintarray = Converter.ChangeTypeTo<object?>(parameters[1].Value);
			pinputoutputintarray = Converter.ChangeTypeTo<object?>(parameters[2].Value);
			poutputstrarray = Converter.ChangeTypeTo<object?>(parameters[4].Value);
			pinputoutputstrarray = Converter.ChangeTypeTo<object?>(parameters[5].Value);
			return dataConnection.ExecuteProc("ARRAYTEST", parameters);
		}

		public static async Task<ArraytestResults> ArraytestAsync(this TestDataDB dataConnection, object? pintarray, object? poutputintarray, object? pinputoutputintarray, object? pstrarray, object? poutputstrarray, object? pinputoutputstrarray, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PINTARRAY", pintarray)
				{
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PINPUTOUTPUTINTARRAY", pinputoutputintarray)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PSTRARRAY", pstrarray)
				{
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("POUTPUTSTRARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				},
				new DataParameter("PINPUTOUTPUTSTRARRAY", pinputoutputstrarray)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "PL/SQL TABLE"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("ARRAYTEST", cancellationToken, parameters);
			return new ArraytestResults()
			{
				Result = result,
				Pinputoutputintarray = Converter.ChangeTypeTo<object?>(parameters[2].Value),
				Pinputoutputstrarray = Converter.ChangeTypeTo<object?>(parameters[5].Value),
				Poutputintarray = Converter.ChangeTypeTo<object?>(parameters[1].Value),
				Poutputstrarray = Converter.ChangeTypeTo<object?>(parameters[4].Value)
			};
		}

		public class ArraytestResults
		{
			public int     Result               { get; set; }
			public object? Pinputoutputintarray { get; set; }
			public object? Pinputoutputstrarray { get; set; }
			public object? Poutputintarray      { get; set; }
			public object? Poutputstrarray      { get; set; }
		}
		#endregion

		#region Outrefenumtest
		public static int Outrefenumtest(this TestDataDB dataConnection, string? pstr, out string? poutputstr, ref string? pinputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("PSTR", pstr, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				}
			};
			poutputstr = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[2].Value);
			return dataConnection.ExecuteProc("OUTREFENUMTEST", parameters);
		}

		public static async Task<OutrefenumtestResults> OutrefenumtestAsync(this TestDataDB dataConnection, string? pstr, string? poutputstr, string? pinputoutputstr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PSTR", pstr, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("OUTREFENUMTEST", cancellationToken, parameters);
			return new OutrefenumtestResults()
			{
				Result = result,
				Pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[2].Value),
				Poutputstr = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class OutrefenumtestResults
		{
			public int     Result          { get; set; }
			public string? Pinputoutputstr { get; set; }
			public string? Poutputstr      { get; set; }
		}
		#endregion

		#region Outreftest
		public static int Outreftest(this TestDataDB dataConnection, OracleDecimal? pid, out OracleDecimal? poutputid, ref OracleDecimal? pinputoutputid, string? pstr, out string? poutputstr, ref string? pinputoutputstr)
		{
			var parameters = new []
			{
				new DataParameter("PID", pid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("POUTPUTID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PINPUTOUTPUTID", pinputoutputid, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PSTR", pstr, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				}
			};
			poutputid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value);
			pinputoutputid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[2].Value);
			poutputstr = Converter.ChangeTypeTo<string?>(parameters[4].Value);
			pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[5].Value);
			return dataConnection.ExecuteProc("OUTREFTEST", parameters);
		}

		public static async Task<OutreftestResults> OutreftestAsync(this TestDataDB dataConnection, OracleDecimal? pid, OracleDecimal? poutputid, OracleDecimal? pinputoutputid, string? pstr, string? poutputstr, string? pinputoutputstr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PID", pid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("POUTPUTID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PINPUTOUTPUTID", pinputoutputid, DataType.Decimal)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PSTR", pstr, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("POUTPUTSTR", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				},
				new DataParameter("PINPUTOUTPUTSTR", pinputoutputstr, DataType.NVarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "NVARCHAR2"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("OUTREFTEST", cancellationToken, parameters);
			return new OutreftestResults()
			{
				Result = result,
				Pinputoutputid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[2].Value),
				Pinputoutputstr = Converter.ChangeTypeTo<string?>(parameters[5].Value),
				Poutputid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value),
				Poutputstr = Converter.ChangeTypeTo<string?>(parameters[4].Value)
			};
		}

		public class OutreftestResults
		{
			public int            Result          { get; set; }
			public OracleDecimal? Pinputoutputid  { get; set; }
			public string?        Pinputoutputstr { get; set; }
			public OracleDecimal? Poutputid       { get; set; }
			public string?        Poutputstr      { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, OracleDecimal? ppersonid)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				}
			};
			return dataConnection.ExecuteProc("PERSON_DELETE", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, OracleDecimal? ppersonid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				}
			};
			return dataConnection.ExecuteProcAsync("PERSON_DELETE", cancellationToken, parameters);
		}
		#endregion

		#region PersonInsertOutputparameter
		public static int PersonInsertOutputparameter(this TestDataDB dataConnection, string? pfirstname, string? plastname, string? pmiddlename, OracleString? pgender, out OracleDecimal? ppersonid)
		{
			var parameters = new []
			{
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PGENDER", pgender, DataType.Char)
				{
					DbType = "CHAR"
				},
				new DataParameter("PPERSONID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			ppersonid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[4].Value);
			return dataConnection.ExecuteProc("PERSON_INSERT_OUTPUTPARAMETER", parameters);
		}

		public static async Task<PersonInsertOutputparameterResults> PersonInsertOutputparameterAsync(this TestDataDB dataConnection, string? pfirstname, string? plastname, string? pmiddlename, OracleString? pgender, OracleDecimal? ppersonid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PGENDER", pgender, DataType.Char)
				{
					DbType = "CHAR"
				},
				new DataParameter("PPERSONID", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("PERSON_INSERT_OUTPUTPARAMETER", cancellationToken, parameters);
			return new PersonInsertOutputparameterResults()
			{
				Result = result,
				Ppersonid = Converter.ChangeTypeTo<OracleDecimal?>(parameters[4].Value)
			};
		}

		public class PersonInsertOutputparameterResults
		{
			public int            Result    { get; set; }
			public OracleDecimal? Ppersonid { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, OracleDecimal? ppersonid, string? pfirstname, string? plastname, string? pmiddlename, OracleString? pgender)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PGENDER", pgender, DataType.Char)
				{
					DbType = "CHAR"
				}
			};
			return dataConnection.ExecuteProc("PERSON_UPDATE", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, OracleDecimal? ppersonid, string? pfirstname, string? plastname, string? pmiddlename, OracleString? pgender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PPERSONID", ppersonid, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("PFIRSTNAME", pfirstname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PLASTNAME", plastname, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PMIDDLENAME", pmiddlename, DataType.NVarChar)
				{
					DbType = "NVARCHAR2"
				},
				new DataParameter("PGENDER", pgender, DataType.Char)
				{
					DbType = "CHAR"
				}
			};
			return dataConnection.ExecuteProcAsync("PERSON_UPDATE", cancellationToken, parameters);
		}
		#endregion

		#region Resultsettest
		public static IEnumerable<ResultsettestResult> Resultsettest(this TestDataDB dataConnection, out OracleRefCursor? mr, out OracleRefCursor? sr)
		{
			var parameters = new []
			{
				new DataParameter("MR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output,
					DbType = "REF CURSOR"
				},
				new DataParameter("SR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output,
					DbType = "REF CURSOR"
				}
			};
			mr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[0].Value);
			sr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[1].Value);
			return dataConnection.QueryProc<ResultsettestResult>("RESULTSETTEST", parameters).ToList();
		}

		public static async Task<ResultsettestResults> ResultsettestAsync(this TestDataDB dataConnection, OracleRefCursor? mr, OracleRefCursor? sr, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("MR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output,
					DbType = "REF CURSOR"
				},
				new DataParameter("SR", null, DataType.Cursor)
				{
					Direction = ParameterDirection.Output,
					DbType = "REF CURSOR"
				}
			};
			var result = await dataConnection.QueryProcAsync<ResultsettestResult>("RESULTSETTEST", cancellationToken, parameters);
			return new ResultsettestResults()
			{
				Result = result.ToList(),
				Mr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[0].Value),
				Sr = Converter.ChangeTypeTo<OracleRefCursor?>(parameters[1].Value)
			};
		}

		public partial class ResultsettestResult
		{
			[Column("MASTERID", DbType = "NUMBER (38,127)")] public decimal? Masterid { get; set; }
		}

		public class ResultsettestResults
		{
			public IEnumerable<ResultsettestResult> Result { get; set; } = null!;
			public OracleRefCursor?                 Mr     { get; set; }
			public OracleRefCursor?                 Sr     { get; set; }
		}
		#endregion

		#region Scalararray
		public static int Scalararray(this TestDataDB dataConnection, out object? poutputintarray)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				}
			};
			poutputintarray = Converter.ChangeTypeTo<object?>(parameters[0].Value);
			return dataConnection.ExecuteProc("SCALARARRAY", parameters);
		}

		public static async Task<ScalararrayResults> ScalararrayAsync(this TestDataDB dataConnection, object? poutputintarray, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINTARRAY", null)
				{
					Direction = ParameterDirection.Output,
					DbType = "PL/SQL TABLE"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("SCALARARRAY", cancellationToken, parameters);
			return new ScalararrayResults()
			{
				Result = result,
				Poutputintarray = Converter.ChangeTypeTo<object?>(parameters[0].Value)
			};
		}

		public class ScalararrayResults
		{
			public int     Result          { get; set; }
			public object? Poutputintarray { get; set; }
		}
		#endregion

		#region ScalarOutputparameter
		public static int ScalarOutputparameter(this TestDataDB dataConnection, out int? poutputint, out string? poutputstring)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINT", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "BINARY_INTEGER"
				},
				new DataParameter("POUTPUTSTRING", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				}
			};
			poutputint = Converter.ChangeTypeTo<int?>(parameters[0].Value);
			poutputstring = Converter.ChangeTypeTo<string?>(parameters[1].Value);
			return dataConnection.ExecuteProc("SCALAR_OUTPUTPARAMETER", parameters);
		}

		public static async Task<ScalarOutputparameterResults> ScalarOutputparameterAsync(this TestDataDB dataConnection, int? poutputint, string? poutputstring, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("POUTPUTINT", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "BINARY_INTEGER"
				},
				new DataParameter("POUTPUTSTRING", null, DataType.NVarChar)
				{
					Direction = ParameterDirection.Output,
					DbType = "NVARCHAR2"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("SCALAR_OUTPUTPARAMETER", cancellationToken, parameters);
			return new ScalarOutputparameterResults()
			{
				Result = result,
				Poutputint = Converter.ChangeTypeTo<int?>(parameters[0].Value),
				Poutputstring = Converter.ChangeTypeTo<string?>(parameters[1].Value)
			};
		}

		public class ScalarOutputparameterResults
		{
			public int     Result        { get; set; }
			public int?    Poutputint    { get; set; }
			public string? Poutputstring { get; set; }
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, OracleDecimal? i, out OracleDecimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, OracleDecimal? i, OracleDecimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result,
				O = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults
		{
			public int            Result { get; set; }
			public OracleDecimal? O      { get; set; }
		}
		#endregion

		#region Issue2132Test
		public static int Issue2132Test(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ISSUE2132.TEST");
		}

		public static Task<int> Issue2132TestAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ISSUE2132.TEST", cancellationToken);
		}
		#endregion

		#region TestPackage1TestProcedure
		public static int TestPackage1TestProcedure(this TestDataDB dataConnection, OracleDecimal? i, out OracleDecimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE1.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults1> TestPackage1TestProcedureAsync(this TestDataDB dataConnection, OracleDecimal? i, OracleDecimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE1.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults1()
			{
				Result = result,
				O = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults1
		{
			public int            Result { get; set; }
			public OracleDecimal? O      { get; set; }
		}
		#endregion

		#region TestPackage2TestProcedure
		public static int TestPackage2TestProcedure(this TestDataDB dataConnection, OracleDecimal? i, out OracleDecimal? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			o = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE2.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults2> TestPackage2TestProcedureAsync(this TestDataDB dataConnection, OracleDecimal? i, OracleDecimal? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Decimal)
				{
					DbType = "NUMBER",
					Size = 22
				},
				new DataParameter("O", null, DataType.Decimal)
				{
					Direction = ParameterDirection.Output,
					DbType = "NUMBER",
					Size = 22
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE2.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults2()
			{
				Result = result,
				O = Converter.ChangeTypeTo<OracleDecimal?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults2
		{
			public int            Result { get; set; }
			public OracleDecimal? O      { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region PatientSelectall
		[Sql.Function("PATIENT_SELECTALL", ServerSideOnly = true)]
		public static OracleRefCursor? PatientSelectall()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PatientSelectbyname
		[Sql.Function("PATIENT_SELECTBYNAME", ServerSideOnly = true)]
		public static OracleRefCursor? PatientSelectbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonInsert
		[Sql.Function("PERSON_INSERT", ServerSideOnly = true)]
		public static OracleRefCursor? PersonInsert(string? pfirstname, string? plastname, string? pmiddlename, OracleString? pgender)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectall
		[Sql.Function("PERSON_SELECTALL", ServerSideOnly = true)]
		public static OracleRefCursor? PersonSelectall()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectallbygender
		[Sql.Function("PERSON_SELECTALLBYGENDER", ServerSideOnly = true)]
		public static OracleRefCursor? PersonSelectallbygender(OracleString? pgender)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectbykey
		[Sql.Function("PERSON_SELECTBYKEY", ServerSideOnly = true)]
		public static OracleRefCursor? PersonSelectbykey(OracleDecimal? pid)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectbyname
		[Sql.Function("PERSON_SELECTBYNAME", ServerSideOnly = true)]
		public static OracleRefCursor? PersonSelectbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region PersonSelectlistbyname
		[Sql.Function("PERSON_SELECTLISTBYNAME", ServerSideOnly = true)]
		public static OracleRefCursor? PersonSelectlistbyname(string? pfirstname, string? plastname)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region ScalarDatareader
		[Sql.Function("SCALAR_DATAREADER", ServerSideOnly = true)]
		public static OracleRefCursor? ScalarDatareader()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region ScalarReturnparameter
		[Sql.Function("SCALAR_RETURNPARAMETER", ServerSideOnly = true)]
		public static int? ScalarReturnparameter()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunction
		[Sql.Function("TEST_FUNCTION", ServerSideOnly = true)]
		public static OracleDecimal? TestFunction(OracleDecimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage1TestFunction
		[Sql.Function("TEST_PACKAGE1.TEST_FUNCTION", ServerSideOnly = true)]
		public static OracleDecimal? TestPackage1TestFunction(OracleDecimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage2TestFunction
		[Sql.Function("TEST_PACKAGE2.TEST_FUNCTION", ServerSideOnly = true)]
		public static OracleDecimal? TestPackage2TestFunction(OracleDecimal? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
