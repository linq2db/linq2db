// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Oracle
{
	[Table("TestMerge2")]
	public class TestMerge2 : IEquatable<TestMerge2>
	{
		[Column("Id"             , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22  , IsPrimaryKey = true            )] public OracleDecimal   Id              { get; set; } // NUMBER
		[Column("Field1"         , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  Field1          { get; set; } // NUMBER
		[Column("Field2"         , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  Field2          { get; set; } // NUMBER
		[Column("Field3"         , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  Field3          { get; set; } // NUMBER
		[Column("Field4"         , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  Field4          { get; set; } // NUMBER
		[Column("Field5"         , DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  Field5          { get; set; } // NUMBER
		[Column("FieldInt64"     , DataType = DataType.Decimal       , DbType = "NUMBER (20,0)"              , Length = 22  , Precision    = 20  , Scale = 0 )] public OracleDecimal?  FieldInt64      { get; set; } // NUMBER (20,0)
		[Column("FieldBoolean"   , DataType = DataType.Decimal       , DbType = "NUMBER (1,0)"               , Length = 22  , Precision    = 1   , Scale = 0 )] public OracleDecimal?  FieldBoolean    { get; set; } // NUMBER (1,0)
		[Column("FieldString"    , DataType = DataType.VarChar       , DbType = "VARCHAR2(20)"               , Length = 20                                   )] public string?         FieldString     { get; set; } // VARCHAR2(20)
		[Column("FieldNString"   , DataType = DataType.NVarChar      , DbType = "NVARCHAR2(20)"              , Length = 20                                   )] public string?         FieldNString    { get; set; } // NVARCHAR2(20)
		[Column("FieldChar"      , DataType = DataType.Char          , DbType = "CHAR(1)"                    , Length = 1                                    )] public OracleString?   FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     , DataType = DataType.NChar         , DbType = "NCHAR(1)"                   , Length = 1                                    )] public OracleString?   FieldNChar      { get; set; } // NCHAR(1)
		[Column("FieldFloat"     , DataType = DataType.Single        , DbType = "BINARY_FLOAT"               , Length = 4                                    )] public OracleDecimal?  FieldFloat      { get; set; } // BINARY_FLOAT
		[Column("FieldDouble"    , DataType = DataType.Double        , DbType = "BINARY_DOUBLE"              , Length = 8                                    )] public OracleDecimal?  FieldDouble     { get; set; } // BINARY_DOUBLE
		[Column("FieldDateTime"  , DataType = DataType.DateTime      , DbType = "DATE"                       , Length = 7                                    )] public OracleDate?     FieldDateTime   { get; set; } // DATE
		[Column("FieldDateTime2" , DataType = DataType.DateTimeOffset, DbType = "TIMESTAMP(7) WITH TIME ZONE", Length = 13  , Scale        = 7               )] public DateTimeOffset? FieldDateTime2  { get; set; } // TIMESTAMP(7) WITH TIME ZONE
		[Column("FieldBinary"    , DataType = DataType.Blob          , DbType = "BLOB"                       , Length = 4000                                 )] public OracleBlob?     FieldBinary     { get; set; } // BLOB
		[Column("FieldGuid"      , DataType = DataType.Binary        , DbType = "RAW(16)"                    , Length = 16                                   )] public OracleBinary?   FieldGuid       { get; set; } // RAW(16)
		[Column("FieldDecimal"   , DataType = DataType.Decimal       , DbType = "NUMBER (24,10)"             , Length = 22  , Precision    = 24  , Scale = 10)] public OracleDecimal?  FieldDecimal    { get; set; } // NUMBER (24,10)
		[Column("FieldEnumString", DataType = DataType.VarChar       , DbType = "VARCHAR2(20)"               , Length = 20                                   )] public string?         FieldEnumString { get; set; } // VARCHAR2(20)
		[Column("FieldEnumNumber", DataType = DataType.Decimal       , DbType = "NUMBER"                     , Length = 22                                   )] public OracleDecimal?  FieldEnumNumber { get; set; } // NUMBER

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestMerge2> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestMerge2>(c => c.Id);

		public bool Equals(TestMerge2? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestMerge2);
		}
		#endregion
	}
}
