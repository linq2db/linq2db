// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Oracle
{
	[Table("Person")]
	public class Person : IEquatable<Person>
	{
		[Column("PersonID"  , DataType  = DataType.Decimal, DbType   = "NUMBER"        , Length = 22            , IsPrimaryKey = true)] public OracleDecimal PersonId   { get; set; } // NUMBER
		[Column("FirstName" , CanBeNull = false           , DataType = DataType.VarChar, DbType = "VARCHAR2(50)", Length       = 50  )] public string        FirstName  { get; set; } = null!; // VARCHAR2(50)
		[Column("LastName"  , CanBeNull = false           , DataType = DataType.VarChar, DbType = "VARCHAR2(50)", Length       = 50  )] public string        LastName   { get; set; } = null!; // VARCHAR2(50)
		[Column("MiddleName", DataType  = DataType.VarChar, DbType   = "VARCHAR2(50)"  , Length = 50                                 )] public string?       MiddleName { get; set; } // VARCHAR2(50)
		[Column("Gender"    , DataType  = DataType.Char   , DbType   = "CHAR(1)"       , Length = 1                                  )] public OracleString  Gender     { get; set; } // CHAR(1)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Person> _equalityComparer = ComparerBuilder.GetEqualityComparer<Person>(c => c.PersonId);

		public bool Equals(Person? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Person);
		}
		#endregion

		#region Associations
		/// <summary>
		/// Fk_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonId), OtherKey = nameof(Oracle.Doctor.PersonId))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// Fk_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonId), OtherKey = nameof(Oracle.Patient.PersonId))]
		public Patient? Patient { get; set; }
		#endregion
	}
}
