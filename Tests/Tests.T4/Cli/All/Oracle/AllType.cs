// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using Oracle.ManagedDataAccess.Types;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Oracle
{
	[Table("AllTypes")]
	public class AllType : IEquatable<AllType>
	{
		[Column("ID"                    , DataType = DataType.Decimal       , DbType = "NUMBER"                           , Length = 22  , Scale     = 0 , IsPrimaryKey = true)] public OracleDecimal   Id                     { get; set; } // NUMBER
		[Column("bigintDataType"        , DataType = DataType.Decimal       , DbType = "NUMBER (20,0)"                    , Length = 22  , Precision = 20, Scale        = 0   )] public OracleDecimal?  BigintDataType         { get; set; } // NUMBER (20,0)
		[Column("numericDataType"       , DataType = DataType.Decimal       , DbType = "NUMBER"                           , Length = 22  , Scale     = 0                      )] public OracleDecimal?  NumericDataType        { get; set; } // NUMBER
		[Column("bitDataType"           , DataType = DataType.Decimal       , DbType = "NUMBER (1,0)"                     , Length = 22  , Precision = 1 , Scale        = 0   )] public OracleDecimal?  BitDataType            { get; set; } // NUMBER (1,0)
		[Column("smallintDataType"      , DataType = DataType.Decimal       , DbType = "NUMBER (5,0)"                     , Length = 22  , Precision = 5 , Scale        = 0   )] public OracleDecimal?  SmallintDataType       { get; set; } // NUMBER (5,0)
		[Column("decimalDataType"       , DataType = DataType.Decimal       , DbType = "NUMBER"                           , Length = 22  , Scale     = 6                      )] public OracleDecimal?  DecimalDataType        { get; set; } // NUMBER
		[Column("smallmoneyDataType"    , DataType = DataType.Decimal       , DbType = "NUMBER (10,4)"                    , Length = 22  , Precision = 10, Scale        = 4   )] public OracleDecimal?  SmallmoneyDataType     { get; set; } // NUMBER (10,4)
		[Column("intDataType"           , DataType = DataType.Decimal       , DbType = "NUMBER (10,0)"                    , Length = 22  , Precision = 10, Scale        = 0   )] public OracleDecimal?  IntDataType            { get; set; } // NUMBER (10,0)
		[Column("tinyintDataType"       , DataType = DataType.Decimal       , DbType = "NUMBER (3,0)"                     , Length = 22  , Precision = 3 , Scale        = 0   )] public OracleDecimal?  TinyintDataType        { get; set; } // NUMBER (3,0)
		[Column("moneyDataType"         , DataType = DataType.Decimal       , DbType = "NUMBER"                           , Length = 22                                       )] public OracleDecimal?  MoneyDataType          { get; set; } // NUMBER
		[Column("floatDataType"         , DataType = DataType.Double        , DbType = "BINARY_DOUBLE"                    , Length = 8                                        )] public OracleDecimal?  FloatDataType          { get; set; } // BINARY_DOUBLE
		[Column("realDataType"          , DataType = DataType.Single        , DbType = "BINARY_FLOAT"                     , Length = 4                                        )] public OracleDecimal?  RealDataType           { get; set; } // BINARY_FLOAT
		[Column("datetimeDataType"      , DataType = DataType.DateTime      , DbType = "DATE"                             , Length = 7                                        )] public OracleDate?     DatetimeDataType       { get; set; } // DATE
		[Column("datetime2DataType"     , DataType = DataType.DateTime2     , DbType = "TIMESTAMP(6)"                     , Length = 11  , Scale     = 6                      )] public DateTime?       Datetime2DataType      { get; set; } // TIMESTAMP(6)
		[Column("datetimeoffsetDataType", DataType = DataType.DateTimeOffset, DbType = "TIMESTAMP(6) WITH TIME ZONE"      , Length = 13  , Scale     = 6                      )] public DateTimeOffset? DatetimeoffsetDataType { get; set; } // TIMESTAMP(6) WITH TIME ZONE
		[Column("localZoneDataType"     , DataType = DataType.DateTimeOffset, DbType = "TIMESTAMP(6) WITH LOCAL TIME ZONE", Length = 11  , Scale     = 6                      )] public DateTimeOffset? LocalZoneDataType      { get; set; } // TIMESTAMP(6) WITH LOCAL TIME ZONE
		[Column("charDataType"          , DataType = DataType.Char          , DbType = "CHAR(1)"                          , Length = 1                                        )] public OracleString?   CharDataType           { get; set; } // CHAR(1)
		[Column("char20DataType"        , DataType = DataType.Char          , DbType = "CHAR(20)"                         , Length = 20                                       )] public OracleString?   Char20DataType         { get; set; } // CHAR(20)
		[Column("varcharDataType"       , DataType = DataType.VarChar       , DbType = "VARCHAR2(20)"                     , Length = 20                                       )] public string?         VarcharDataType        { get; set; } // VARCHAR2(20)
		[Column("textDataType"          , DataType = DataType.Text          , DbType = "CLOB"                             , Length = 4000                                     )] public OracleClob?     TextDataType           { get; set; } // CLOB
		[Column("ncharDataType"         , DataType = DataType.NChar         , DbType = "NCHAR(20)"                        , Length = 20                                       )] public OracleString?   NcharDataType          { get; set; } // NCHAR(20)
		[Column("nvarcharDataType"      , DataType = DataType.NVarChar      , DbType = "NVARCHAR2(20)"                    , Length = 20                                       )] public string?         NvarcharDataType       { get; set; } // NVARCHAR2(20)
		[Column("ntextDataType"         , DataType = DataType.NText         , DbType = "NCLOB"                            , Length = 4000                                     )] public string?         NtextDataType          { get; set; } // NCLOB
		[Column("binaryDataType"        , DataType = DataType.Blob          , DbType = "BLOB"                             , Length = 4000                                     )] public OracleBlob?     BinaryDataType         { get; set; } // BLOB
		[Column("bfileDataType"         , DataType = DataType.VarBinary     , DbType = "BFILE"                            , Length = 530                                      )] public OracleBFile?    BfileDataType          { get; set; } // BFILE
		[Column("guidDataType"          , DataType = DataType.Binary        , DbType = "RAW(16)"                          , Length = 16                                       )] public OracleBinary?   GuidDataType           { get; set; } // RAW(16)
		[Column("longDataType"          , DataType = DataType.Long          , DbType = "LONG"                             , Length = 0                                        )] public OracleString?   LongDataType           { get; set; } // LONG
		[Column("xmlDataType"           , DataType = DataType.Xml           , DbType = "XMLTYPE"                          , Length = 2000                                     )] public OracleXmlType?  XmlDataType            { get; set; } // XMLTYPE

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllType> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllType>(c => c.Id);

		public bool Equals(AllType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllType);
		}
		#endregion
	}
}
