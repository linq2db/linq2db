// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Access.Odbc
{
	[Table("TestMerge2")]
	public class TestMerge2
	{
		[Column("Id"             , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Id              { get; set; } // INTEGER
		[Column("Field1"         , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Field1          { get; set; } // INTEGER
		[Column("Field2"         , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Field2          { get; set; } // INTEGER
		[Column("Field3"         , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Field3          { get; set; } // INTEGER
		[Column("Field4"         , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Field4          { get; set; } // INTEGER
		[Column("Field5"         , DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      Field5          { get; set; } // INTEGER
		[Column("FieldBoolean"   , DataType = DataType.Boolean  , DbType = "BIT"                                        )] public bool      FieldBoolean    { get; set; } // BIT
		[Column("FieldString"    , DataType = DataType.VarChar  , DbType = "VARCHAR(20)"    , Length    = 20            )] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"   , DataType = DataType.VarChar  , DbType = "VARCHAR(20)"    , Length    = 20            )] public string?   FieldNString    { get; set; } // VARCHAR(20)
		[Column("FieldChar"      , DataType = DataType.Char     , DbType = "CHAR(1)"        , Length    = 1             )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     , DataType = DataType.Char     , DbType = "CHAR(1)"        , Length    = 1             )] public char?     FieldNChar      { get; set; } // CHAR(1)
		[Column("FieldFloat"     , DataType = DataType.Single   , DbType = "REAL"                                       )] public float?    FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"    , DataType = DataType.Double   , DbType = "DOUBLE"                                     )] public double?   FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"  , DataType = DataType.DateTime , DbType = "DATETIME"                                   )] public DateTime? FieldDateTime   { get; set; } // DATETIME
		[Column("FieldBinary"    , DataType = DataType.VarBinary, DbType = "VARBINARY(20)"  , Length    = 20            )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"      , DataType = DataType.Guid     , DbType = "GUID"                                       )] public Guid?     FieldGuid       { get; set; } // GUID
		[Column("FieldDecimal"   , DataType = DataType.Decimal  , DbType = "DECIMAL(24, 10)", Precision = 24, Scale = 10)] public decimal?  FieldDecimal    { get; set; } // DECIMAL(24, 10)
		[Column("FieldDate"      , DataType = DataType.DateTime , DbType = "DATETIME"                                   )] public DateTime? FieldDate       { get; set; } // DATETIME
		[Column("FieldTime"      , DataType = DataType.DateTime , DbType = "DATETIME"                                   )] public DateTime? FieldTime       { get; set; } // DATETIME
		[Column("FieldEnumString", DataType = DataType.VarChar  , DbType = "VARCHAR(20)"    , Length    = 20            )] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32    , DbType = "INTEGER"                                    )] public int?      FieldEnumNumber { get; set; } // INTEGER
	}
}
