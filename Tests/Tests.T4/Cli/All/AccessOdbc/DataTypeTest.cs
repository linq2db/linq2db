// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Access.Odbc
{
	[Table("DataTypeTest")]
	public class DataTypeTest
	{
		[Column("DataTypeID", DataType = DataType.Int32   , DbType = "COUNTER"    , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       DataTypeId { get; set; } // COUNTER
		[Column("Binary_"   , DataType = DataType.Image   , DbType = "LONGBINARY"                                                              )] public byte[]?   Binary     { get; set; } // LONGBINARY
		[Column("Boolean_"  , DataType = DataType.Int32   , DbType = "INTEGER"                                                                 )] public int?      Boolean    { get; set; } // INTEGER
		[Column("Byte_"     , DataType = DataType.Byte    , DbType = "BYTE"                                                                    )] public byte?     Byte       { get; set; } // BYTE
		[Column("Bytes_"    , DataType = DataType.Image   , DbType = "LONGBINARY"                                                              )] public byte[]?   Bytes      { get; set; } // LONGBINARY
		[Column("Char_"     , DataType = DataType.VarChar , DbType = "VARCHAR(1)" , Length     = 1                                             )] public char?     Char       { get; set; } // VARCHAR(1)
		[Column("DateTime_" , DataType = DataType.DateTime, DbType = "DATETIME"                                                                )] public DateTime? DateTime   { get; set; } // DATETIME
		[Column("Decimal_"  , DataType = DataType.Money   , DbType = "CURRENCY"                                                                )] public decimal?  Decimal    { get; set; } // CURRENCY
		[Column("Double_"   , DataType = DataType.Double  , DbType = "DOUBLE"                                                                  )] public double?   Double     { get; set; } // DOUBLE
		[Column("Guid_"     , DataType = DataType.Guid    , DbType = "GUID"                                                                    )] public Guid?     Guid       { get; set; } // GUID
		[Column("Int16_"    , DataType = DataType.Int16   , DbType = "SMALLINT"                                                                )] public short?    Int16      { get; set; } // SMALLINT
		[Column("Int32_"    , DataType = DataType.Int32   , DbType = "INTEGER"                                                                 )] public int?      Int32      { get; set; } // INTEGER
		[Column("Int64_"    , DataType = DataType.Int32   , DbType = "INTEGER"                                                                 )] public int?      Int64      { get; set; } // INTEGER
		[Column("Money_"    , DataType = DataType.Money   , DbType = "CURRENCY"                                                                )] public decimal?  Money      { get; set; } // CURRENCY
		[Column("SByte_"    , DataType = DataType.Byte    , DbType = "BYTE"                                                                    )] public byte?     SByte      { get; set; } // BYTE
		[Column("Single_"   , DataType = DataType.Single  , DbType = "REAL"                                                                    )] public float?    Single     { get; set; } // REAL
		[Column("Stream_"   , DataType = DataType.Image   , DbType = "LONGBINARY"                                                              )] public byte[]?   Stream     { get; set; } // LONGBINARY
		[Column("String_"   , DataType = DataType.VarChar , DbType = "VARCHAR(50)", Length     = 50                                            )] public string?   String     { get; set; } // VARCHAR(50)
		[Column("UInt16_"   , DataType = DataType.Int16   , DbType = "SMALLINT"                                                                )] public short?    UInt16     { get; set; } // SMALLINT
		[Column("UInt32_"   , DataType = DataType.Int32   , DbType = "INTEGER"                                                                 )] public int?      UInt32     { get; set; } // INTEGER
		[Column("UInt64_"   , DataType = DataType.Int32   , DbType = "INTEGER"                                                                 )] public int?      UInt64     { get; set; } // INTEGER
		[Column("Xml_"      , DataType = DataType.NText   , DbType = "LONGCHAR"                                                                )] public string?   Xml        { get; set; } // LONGCHAR
	}
}
