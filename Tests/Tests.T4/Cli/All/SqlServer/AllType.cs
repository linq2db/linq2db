// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	[Table("AllTypes")]
	public class AllType : IEquatable<AllType>
	{
		[Column("ID"                      , DataType = LinqToDB.DataType.Int32         , DbType = "int"              , IsPrimaryKey = true      , IsIdentity   = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32        Id                       { get; set; } // int
		[Column("bigintDataType"          , DataType = LinqToDB.DataType.Int64         , DbType = "bigint"                                                                                                     )] public SqlInt64?       BigintDataType           { get; set; } // bigint
		[Column("numericDataType"         , DataType = LinqToDB.DataType.Decimal       , DbType = "numeric(18, 1)"   , Precision    = 18        , Scale        = 1                                             )] public SqlDecimal?     NumericDataType          { get; set; } // numeric(18, 1)
		[Column("bitDataType"             , DataType = LinqToDB.DataType.Boolean       , DbType = "bit"                                                                                                        )] public SqlBoolean?     BitDataType              { get; set; } // bit
		[Column("smallintDataType"        , DataType = LinqToDB.DataType.Int16         , DbType = "smallint"                                                                                                   )] public SqlInt16?       SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType"         , DataType = LinqToDB.DataType.Decimal       , DbType = "decimal(18, 1)"   , Precision    = 18        , Scale        = 1                                             )] public SqlDecimal?     DecimalDataType          { get; set; } // decimal(18, 1)
		[Column("smallmoneyDataType"      , DataType = LinqToDB.DataType.SmallMoney    , DbType = "smallmoney"                                                                                                 )] public SqlMoney?       SmallmoneyDataType       { get; set; } // smallmoney
		[Column("intDataType"             , DataType = LinqToDB.DataType.Int32         , DbType = "int"                                                                                                        )] public SqlInt32?       IntDataType              { get; set; } // int
		[Column("tinyintDataType"         , DataType = LinqToDB.DataType.Byte          , DbType = "tinyint"                                                                                                    )] public SqlByte?        TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType"           , DataType = LinqToDB.DataType.Money         , DbType = "money"                                                                                                      )] public SqlMoney?       MoneyDataType            { get; set; } // money
		[Column("floatDataType"           , DataType = LinqToDB.DataType.Double        , DbType = "float"                                                                                                      )] public SqlDouble?      FloatDataType            { get; set; } // float
		[Column("realDataType"            , DataType = LinqToDB.DataType.Single        , DbType = "real"                                                                                                       )] public SqlSingle?      RealDataType             { get; set; } // real
		[Column("datetimeDataType"        , DataType = LinqToDB.DataType.DateTime      , DbType = "datetime"                                                                                                   )] public SqlDateTime?    DatetimeDataType         { get; set; } // datetime
		[Column("smalldatetimeDataType"   , DataType = LinqToDB.DataType.SmallDateTime , DbType = "smalldatetime"                                                                                              )] public SqlDateTime?    SmalldatetimeDataType    { get; set; } // smalldatetime
		[Column("charDataType"            , DataType = LinqToDB.DataType.Char          , DbType = "char(1)"          , Length       = 1                                                                        )] public SqlString?      CharDataType             { get; set; } // char(1)
		[Column("char20DataType"          , DataType = LinqToDB.DataType.Char          , DbType = "char(20)"         , Length       = 20                                                                       )] public SqlString?      Char20DataType           { get; set; } // char(20)
		[Column("varcharDataType"         , DataType = LinqToDB.DataType.VarChar       , DbType = "varchar(20)"      , Length       = 20                                                                       )] public SqlString?      VarcharDataType          { get; set; } // varchar(20)
		[Column("textDataType"            , DataType = LinqToDB.DataType.Text          , DbType = "text"                                                                                                       )] public SqlString?      TextDataType             { get; set; } // text
		[Column("ncharDataType"           , DataType = LinqToDB.DataType.NChar         , DbType = "nchar(20)"        , Length       = 20                                                                       )] public SqlString?      NcharDataType            { get; set; } // nchar(20)
		[Column("nvarcharDataType"        , DataType = LinqToDB.DataType.NVarChar      , DbType = "nvarchar(20)"     , Length       = 20                                                                       )] public SqlString?      NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType"           , DataType = LinqToDB.DataType.NText         , DbType = "ntext"                                                                                                      )] public SqlString?      NtextDataType            { get; set; } // ntext
		[Column("binaryDataType"          , DataType = LinqToDB.DataType.Binary        , DbType = "binary(1)"        , Length       = 1                                                                        )] public SqlBinary?      BinaryDataType           { get; set; } // binary(1)
		[Column("varbinaryDataType"       , DataType = LinqToDB.DataType.VarBinary     , DbType = "varbinary(1)"     , Length       = 1                                                                        )] public SqlBinary?      VarbinaryDataType        { get; set; } // varbinary(1)
		[Column("imageDataType"           , DataType = LinqToDB.DataType.Image         , DbType = "image"                                                                                                      )] public SqlBinary?      ImageDataType            { get; set; } // image
		[Column("timestampDataType"       , DataType = LinqToDB.DataType.Timestamp     , DbType = "timestamp"        , SkipOnInsert = true      , SkipOnUpdate = true                                          )] public SqlBinary?      TimestampDataType        { get; set; } // timestamp
		[Column("uniqueidentifierDataType", DataType = LinqToDB.DataType.Guid          , DbType = "uniqueidentifier"                                                                                           )] public SqlGuid?        UniqueidentifierDataType { get; set; } // uniqueidentifier
		[Column("sql_variantDataType"     , DataType = LinqToDB.DataType.Variant       , DbType = "sql_variant"                                                                                                )] public object?         SqlVariantDataType       { get; set; } // sql_variant
		[Column("nvarchar_max_DataType"   , DataType = LinqToDB.DataType.NVarChar      , DbType = "nvarchar(max)"    , Length       = 2147483647                                                               )] public SqlString?      NvarcharMaxDataType      { get; set; } // nvarchar(max)
		[Column("varchar_max_DataType"    , DataType = LinqToDB.DataType.VarChar       , DbType = "varchar(max)"     , Length       = 2147483647                                                               )] public SqlString?      VarcharMaxDataType       { get; set; } // varchar(max)
		[Column("varbinary_max_DataType"  , DataType = LinqToDB.DataType.VarBinary     , DbType = "varbinary(max)"   , Length       = 2147483647                                                               )] public SqlBinary?      VarbinaryMaxDataType     { get; set; } // varbinary(max)
		[Column("xmlDataType"             , DataType = LinqToDB.DataType.Xml           , DbType = "xml"                                                                                                        )] public SqlXml?         XmlDataType              { get; set; } // xml
		[Column("datetime2DataType"       , DataType = LinqToDB.DataType.DateTime2     , DbType = "datetime2(7)"     , Precision    = 7                                                                        )] public SqlDateTime?    Datetime2DataType        { get; set; } // datetime2(7)
		[Column("datetimeoffsetDataType"  , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(7)", Precision    = 7                                                                        )] public DateTimeOffset? DatetimeoffsetDataType   { get; set; } // datetimeoffset(7)
		[Column("datetimeoffset0DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(0)", Precision    = 0                                                                        )] public DateTimeOffset? Datetimeoffset0DataType  { get; set; } // datetimeoffset(0)
		[Column("datetimeoffset1DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(1)", Precision    = 1                                                                        )] public DateTimeOffset? Datetimeoffset1DataType  { get; set; } // datetimeoffset(1)
		[Column("datetimeoffset2DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(2)", Precision    = 2                                                                        )] public DateTimeOffset? Datetimeoffset2DataType  { get; set; } // datetimeoffset(2)
		[Column("datetimeoffset3DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(3)", Precision    = 3                                                                        )] public DateTimeOffset? Datetimeoffset3DataType  { get; set; } // datetimeoffset(3)
		[Column("datetimeoffset4DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(4)", Precision    = 4                                                                        )] public DateTimeOffset? Datetimeoffset4DataType  { get; set; } // datetimeoffset(4)
		[Column("datetimeoffset5DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(5)", Precision    = 5                                                                        )] public DateTimeOffset? Datetimeoffset5DataType  { get; set; } // datetimeoffset(5)
		[Column("datetimeoffset6DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(6)", Precision    = 6                                                                        )] public DateTimeOffset? Datetimeoffset6DataType  { get; set; } // datetimeoffset(6)
		[Column("datetimeoffset7DataType" , DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(7)", Precision    = 7                                                                        )] public DateTimeOffset? Datetimeoffset7DataType  { get; set; } // datetimeoffset(7)
		[Column("dateDataType"            , DataType = LinqToDB.DataType.Date          , DbType = "date"                                                                                                       )] public SqlDateTime?    DateDataType             { get; set; } // date
		[Column("timeDataType"            , DataType = LinqToDB.DataType.Time          , DbType = "time(7)"          , Precision    = 7                                                                        )] public TimeSpan?       TimeDataType             { get; set; } // time(7)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllType> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllType>(c => c.Id);

		public bool Equals(AllType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllType);
		}
		#endregion
	}
}
