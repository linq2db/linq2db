// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using Microsoft.SqlServer.Types;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	[Table("AllTypes2")]
	public class AllTypes2 : IEquatable<AllTypes2>
	{
		[Column("ID"                    , DataType = LinqToDB.DataType.Int32         , DbType = "int"              , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32        Id                     { get; set; } // int
		[Column("dateDataType"          , DataType = LinqToDB.DataType.Date          , DbType = "date"                                                                                               )] public SqlDateTime?    DateDataType           { get; set; } // date
		[Column("datetimeoffsetDataType", DataType = LinqToDB.DataType.DateTimeOffset, DbType = "datetimeoffset(7)", Precision    = 7                                                                )] public DateTimeOffset? DatetimeoffsetDataType { get; set; } // datetimeoffset(7)
		[Column("datetime2DataType"     , DataType = LinqToDB.DataType.DateTime2     , DbType = "datetime2(7)"     , Precision    = 7                                                                )] public SqlDateTime?    Datetime2DataType      { get; set; } // datetime2(7)
		[Column("timeDataType"          , DataType = LinqToDB.DataType.Time          , DbType = "time(7)"          , Precision    = 7                                                                )] public TimeSpan?       TimeDataType           { get; set; } // time(7)
		[Column("hierarchyidDataType"   , DataType = LinqToDB.DataType.Udt           , DbType = "hierarchyid"                                                                                        )] public SqlHierarchyId? HierarchyidDataType    { get; set; } // hierarchyid
		[Column("geographyDataType"     , DataType = LinqToDB.DataType.Udt           , DbType = "geography"                                                                                          )] public SqlGeography?   GeographyDataType      { get; set; } // geography
		[Column("geometryDataType"      , DataType = LinqToDB.DataType.Udt           , DbType = "geometry"                                                                                           )] public SqlGeometry?    GeometryDataType       { get; set; } // geometry

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllTypes2> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllTypes2>(c => c.Id);

		public bool Equals(AllTypes2? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllTypes2);
		}
		#endregion
	}
}
