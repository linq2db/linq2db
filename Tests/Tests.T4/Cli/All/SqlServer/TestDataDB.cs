// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using Microsoft.SqlServer.Types;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		#endregion

		public ITable<AllType>                 AllTypes                 => this.GetTable<AllType>();
		public ITable<AllTypes2>               AllTypes2                => this.GetTable<AllTypes2>();
		public ITable<Child>                   Children                 => this.GetTable<Child>();
		public ITable<CollatedTable>           CollatedTables           => this.GetTable<CollatedTable>();
		public ITable<DataType>                DataTypes                => this.GetTable<DataType>();
		public ITable<DecimalOverflow>         DecimalOverflows         => this.GetTable<DecimalOverflow>();
		public ITable<Doctor>                  Doctors                  => this.GetTable<Doctor>();
		public ITable<GrandChild>              GrandChildren            => this.GetTable<GrandChild>();
		public ITable<GuidId>                  GuidIds                  => this.GetTable<GuidId>();
		public ITable<GuidId2>                 GuidId2                  => this.GetTable<GuidId2>();
		public ITable<IndexTable>              IndexTables              => this.GetTable<IndexTable>();
		public ITable<IndexTable2>             IndexTable2              => this.GetTable<IndexTable2>();
		public ITable<InheritanceChild>        InheritanceChildren      => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>       InheritanceParents       => this.GetTable<InheritanceParent>();
		public ITable<Issue1115>               Issue1115                => this.GetTable<Issue1115>();
		public ITable<Issue1144>               Issue1144                => this.GetTable<Issue1144>();
		public ITable<LinqDataType>            LinqDataTypes            => this.GetTable<LinqDataType>();
		public ITable<Member>                  Members                  => this.GetTable<Member>();
		public ITable<NameTest>                NameTests                => this.GetTable<NameTest>();
		/// <summary>
		/// This is Parent table
		/// </summary>
		public ITable<Parent>                  Parents                  => this.GetTable<Parent>();
		public ITable<Patient>                 Patients                 => this.GetTable<Patient>();
		public ITable<Person>                  People                   => this.GetTable<Person>();
		public ITable<Provider>                Providers                => this.GetTable<Provider>();
		public ITable<SameTableName>           SameTableNames           => this.GetTable<SameTableName>();
		public ITable<SqlType>                 SqlTypes                 => this.GetTable<SqlType>();
		public ITable<TestIdentity>            TestIdentities           => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>              TestMerge1               => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>              TestMerge2               => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>       TestMergeIdentities      => this.GetTable<TestMergeIdentity>();
		public ITable<TestSchemaX>             TestSchemaX              => this.GetTable<TestSchemaX>();
		public ITable<TestSchemaY>             TestSchemaY              => this.GetTable<TestSchemaY>();
		public ITable<TestSchemaSameTableName> TestSchemaSameTableNames => this.GetTable<TestSchemaSameTableName>();
		public ITable<ParentChildView>         ParentChildViews         => this.GetTable<ParentChildView>();
		public ITable<ParentView>              ParentViews              => this.GetTable<ParentView>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		/// <summary>
		/// This is &lt;test&gt; table function!
		/// </summary>
		/// <param name="id">
		/// This is &lt;test&gt; table function parameter!
		/// </param>
		[Sql.TableFunction("GetParentByID")]
		public IQueryable<Parent> GetParentById(SqlInt32? id)
		{
			return this.GetTable<Parent>(this, _getParentById, id);
		}
		#endregion

		#region Issue1921
		private static readonly MethodInfo _issue1921 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.Issue1921());

		[Sql.TableFunction("Issue1921")]
		public IQueryable<Issue1921Result> Issue1921()
		{
			return this.GetTable<Issue1921Result>(this, _issue1921);
		}

		public partial class Issue1921Result
		{
			[Column("name" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(128)")] public SqlString Name  { get; set; }
			[Column("objid", DataType = LinqToDB.DataType.Int32   , DbType = "int"          )] public SqlInt32? Objid { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static AllType? FindAllType(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<AllType>().Where(e => e.Id.Equals(id));
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id.Equals(@record.Id));
		}

		public static AllTypes2? Find(this ITable<AllTypes2> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<AllTypes2?> FindAsync(this ITable<AllTypes2> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<AllTypes2> FindQuery(this ITable<AllTypes2> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static AllTypes2? Find(this ITable<AllTypes2> table, AllTypes2 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<AllTypes2?> FindAsync(this ITable<AllTypes2> table, AllTypes2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<AllTypes2> FindQuery(this ITable<AllTypes2> table, AllTypes2 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static AllTypes2? FindAllTypes2(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<AllTypes2>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<AllTypes2?> FindAllTypes2Async(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllTypes2>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<AllTypes2> FindAllTypes2Query(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<AllTypes2>().Where(e => e.Id.Equals(id));
		}

		public static AllTypes2? Find(this TestDataDB db, AllTypes2 @record)
		{
			return db.GetTable<AllTypes2>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<AllTypes2?> FindAsync(this TestDataDB db, AllTypes2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllTypes2>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<AllTypes2> FindQuery(this TestDataDB db, AllTypes2 @record)
		{
			return db.GetTable<AllTypes2>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Child? Find(this ITable<Child> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Child?> FindAsync(this ITable<Child> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Child> FindQuery(this ITable<Child> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static Child? Find(this ITable<Child> table, Child @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Child?> FindAsync(this ITable<Child> table, Child @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Child> FindQuery(this ITable<Child> table, Child @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static Child? FindChild(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Child>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Child?> FindChildAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Child>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Child> FindChildQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Child>().Where(e => e.Id.Equals(id));
		}

		public static Child? Find(this TestDataDB db, Child @record)
		{
			return db.GetTable<Child>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Child?> FindAsync(this TestDataDB db, Child @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Child>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Child> FindQuery(this TestDataDB db, Child @record)
		{
			return db.GetTable<Child>().Where(e => e.Id.Equals(@record.Id));
		}

		public static DecimalOverflow? Find(this ITable<DecimalOverflow> table, SqlDecimal decimal1)
		{
			return table.FirstOrDefault(e => e.Decimal1.Equals(decimal1));
		}

		public static Task<DecimalOverflow?> FindAsync(this ITable<DecimalOverflow> table, SqlDecimal decimal1, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Decimal1.Equals(decimal1), cancellationToken);
		}

		public static IQueryable<DecimalOverflow> FindQuery(this ITable<DecimalOverflow> table, SqlDecimal decimal1)
		{
			return table.Where(e => e.Decimal1.Equals(decimal1));
		}

		public static DecimalOverflow? Find(this ITable<DecimalOverflow> table, DecimalOverflow @record)
		{
			return table.FirstOrDefault(e => e.Decimal1.Equals(@record.Decimal1));
		}

		public static Task<DecimalOverflow?> FindAsync(this ITable<DecimalOverflow> table, DecimalOverflow @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Decimal1.Equals(@record.Decimal1), cancellationToken);
		}

		public static IQueryable<DecimalOverflow> FindQuery(this ITable<DecimalOverflow> table, DecimalOverflow @record)
		{
			return table.Where(e => e.Decimal1.Equals(@record.Decimal1));
		}

		public static DecimalOverflow? FindDecimalOverflow(this TestDataDB db, SqlDecimal decimal1)
		{
			return db.GetTable<DecimalOverflow>().FirstOrDefault(e => e.Decimal1.Equals(decimal1));
		}

		public static Task<DecimalOverflow?> FindDecimalOverflowAsync(this TestDataDB db, SqlDecimal decimal1, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DecimalOverflow>().FirstOrDefaultAsync(e => e.Decimal1.Equals(decimal1), cancellationToken);
		}

		public static IQueryable<DecimalOverflow> FindDecimalOverflowQuery(this TestDataDB db, SqlDecimal decimal1)
		{
			return db.GetTable<DecimalOverflow>().Where(e => e.Decimal1.Equals(decimal1));
		}

		public static DecimalOverflow? Find(this TestDataDB db, DecimalOverflow @record)
		{
			return db.GetTable<DecimalOverflow>().FirstOrDefault(e => e.Decimal1.Equals(@record.Decimal1));
		}

		public static Task<DecimalOverflow?> FindAsync(this TestDataDB db, DecimalOverflow @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DecimalOverflow>().FirstOrDefaultAsync(e => e.Decimal1.Equals(@record.Decimal1), cancellationToken);
		}

		public static IQueryable<DecimalOverflow> FindQuery(this TestDataDB db, DecimalOverflow @record)
		{
			return db.GetTable<DecimalOverflow>().Where(e => e.Decimal1.Equals(@record.Decimal1));
		}

		public static Doctor? Find(this ITable<Doctor> table, SqlInt32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, SqlInt32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Doctor? FindDoctor(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId.Equals(personId));
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static GrandChild? Find(this ITable<GrandChild> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GrandChild?> FindAsync(this ITable<GrandChild> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GrandChild> FindQuery(this ITable<GrandChild> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static GrandChild? Find(this ITable<GrandChild> table, GrandChild @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GrandChild?> FindAsync(this ITable<GrandChild> table, GrandChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GrandChild> FindQuery(this ITable<GrandChild> table, GrandChild @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static GrandChild? FindGrandChild(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<GrandChild>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GrandChild?> FindGrandChildAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GrandChild>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GrandChild> FindGrandChildQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<GrandChild>().Where(e => e.Id.Equals(id));
		}

		public static GrandChild? Find(this TestDataDB db, GrandChild @record)
		{
			return db.GetTable<GrandChild>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GrandChild?> FindAsync(this TestDataDB db, GrandChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GrandChild>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GrandChild> FindQuery(this TestDataDB db, GrandChild @record)
		{
			return db.GetTable<GrandChild>().Where(e => e.Id.Equals(@record.Id));
		}

		public static GuidId? Find(this ITable<GuidId> table, SqlGuid id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GuidId?> FindAsync(this ITable<GuidId> table, SqlGuid id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GuidId> FindQuery(this ITable<GuidId> table, SqlGuid id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static GuidId? Find(this ITable<GuidId> table, GuidId @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GuidId?> FindAsync(this ITable<GuidId> table, GuidId @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GuidId> FindQuery(this ITable<GuidId> table, GuidId @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static GuidId? FindGuidId(this TestDataDB db, SqlGuid id)
		{
			return db.GetTable<GuidId>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GuidId?> FindGuidIdAsync(this TestDataDB db, SqlGuid id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GuidId>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GuidId> FindGuidIdQuery(this TestDataDB db, SqlGuid id)
		{
			return db.GetTable<GuidId>().Where(e => e.Id.Equals(id));
		}

		public static GuidId? Find(this TestDataDB db, GuidId @record)
		{
			return db.GetTable<GuidId>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GuidId?> FindAsync(this TestDataDB db, GuidId @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GuidId>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GuidId> FindQuery(this TestDataDB db, GuidId @record)
		{
			return db.GetTable<GuidId>().Where(e => e.Id.Equals(@record.Id));
		}

		public static GuidId2? Find(this ITable<GuidId2> table, SqlGuid id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GuidId2?> FindAsync(this ITable<GuidId2> table, SqlGuid id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GuidId2> FindQuery(this ITable<GuidId2> table, SqlGuid id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static GuidId2? Find(this ITable<GuidId2> table, GuidId2 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GuidId2?> FindAsync(this ITable<GuidId2> table, GuidId2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GuidId2> FindQuery(this ITable<GuidId2> table, GuidId2 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static GuidId2? FindGuidId2(this TestDataDB db, SqlGuid id)
		{
			return db.GetTable<GuidId2>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<GuidId2?> FindGuidId2Async(this TestDataDB db, SqlGuid id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GuidId2>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<GuidId2> FindGuidId2Query(this TestDataDB db, SqlGuid id)
		{
			return db.GetTable<GuidId2>().Where(e => e.Id.Equals(id));
		}

		public static GuidId2? Find(this TestDataDB db, GuidId2 @record)
		{
			return db.GetTable<GuidId2>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<GuidId2?> FindAsync(this TestDataDB db, GuidId2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<GuidId2>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<GuidId2> FindQuery(this TestDataDB db, GuidId2 @record)
		{
			return db.GetTable<GuidId2>().Where(e => e.Id.Equals(@record.Id));
		}

		public static IndexTable? Find(this ITable<IndexTable> table, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return table.FirstOrDefault(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static Task<IndexTable?> FindAsync(this ITable<IndexTable> table, SqlInt32 pkField2, SqlInt32 pkField1, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1), cancellationToken);
		}

		public static IQueryable<IndexTable> FindQuery(this ITable<IndexTable> table, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return table.Where(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static IndexTable? Find(this ITable<IndexTable> table, IndexTable @record)
		{
			return table.FirstOrDefault(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static Task<IndexTable?> FindAsync(this ITable<IndexTable> table, IndexTable @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1), cancellationToken);
		}

		public static IQueryable<IndexTable> FindQuery(this ITable<IndexTable> table, IndexTable @record)
		{
			return table.Where(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static IndexTable? FindIndexTable(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return db.GetTable<IndexTable>().FirstOrDefault(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static Task<IndexTable?> FindIndexTableAsync(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1, CancellationToken cancellationToken = default)
		{
			return db.GetTable<IndexTable>().FirstOrDefaultAsync(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1), cancellationToken);
		}

		public static IQueryable<IndexTable> FindIndexTableQuery(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return db.GetTable<IndexTable>().Where(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static IndexTable? Find(this TestDataDB db, IndexTable @record)
		{
			return db.GetTable<IndexTable>().FirstOrDefault(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static Task<IndexTable?> FindAsync(this TestDataDB db, IndexTable @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<IndexTable>().FirstOrDefaultAsync(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1), cancellationToken);
		}

		public static IQueryable<IndexTable> FindQuery(this TestDataDB db, IndexTable @record)
		{
			return db.GetTable<IndexTable>().Where(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static IndexTable2? Find(this ITable<IndexTable2> table, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return table.FirstOrDefault(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static Task<IndexTable2?> FindAsync(this ITable<IndexTable2> table, SqlInt32 pkField2, SqlInt32 pkField1, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1), cancellationToken);
		}

		public static IQueryable<IndexTable2> FindQuery(this ITable<IndexTable2> table, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return table.Where(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static IndexTable2? Find(this ITable<IndexTable2> table, IndexTable2 @record)
		{
			return table.FirstOrDefault(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static Task<IndexTable2?> FindAsync(this ITable<IndexTable2> table, IndexTable2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1), cancellationToken);
		}

		public static IQueryable<IndexTable2> FindQuery(this ITable<IndexTable2> table, IndexTable2 @record)
		{
			return table.Where(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static IndexTable2? FindIndexTable2(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return db.GetTable<IndexTable2>().FirstOrDefault(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static Task<IndexTable2?> FindIndexTable2Async(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1, CancellationToken cancellationToken = default)
		{
			return db.GetTable<IndexTable2>().FirstOrDefaultAsync(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1), cancellationToken);
		}

		public static IQueryable<IndexTable2> FindIndexTable2Query(this TestDataDB db, SqlInt32 pkField2, SqlInt32 pkField1)
		{
			return db.GetTable<IndexTable2>().Where(e => e.PkField2.Equals(pkField2) && e.PkField1.Equals(pkField1));
		}

		public static IndexTable2? Find(this TestDataDB db, IndexTable2 @record)
		{
			return db.GetTable<IndexTable2>().FirstOrDefault(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static Task<IndexTable2?> FindAsync(this TestDataDB db, IndexTable2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<IndexTable2>().FirstOrDefaultAsync(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1), cancellationToken);
		}

		public static IQueryable<IndexTable2> FindQuery(this TestDataDB db, IndexTable2 @record)
		{
			return db.GetTable<IndexTable2>().Where(e => e.PkField2.Equals(@record.PkField2) && e.PkField1.Equals(@record.PkField1));
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, SqlInt32 inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, SqlInt32 inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(inheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, SqlInt32 inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(@record.InheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, SqlInt32 inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, SqlInt32 inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(inheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, SqlInt32 inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(@record.InheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, SqlInt32 inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, SqlInt32 inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(inheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, SqlInt32 inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(@record.InheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, SqlInt32 inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, SqlInt32 inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(inheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, SqlInt32 inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(@record.InheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static Issue1115? Find(this ITable<Issue1115> table, SqlHierarchyId id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Issue1115?> FindAsync(this ITable<Issue1115> table, SqlHierarchyId id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Issue1115> FindQuery(this ITable<Issue1115> table, SqlHierarchyId id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static Issue1115? Find(this ITable<Issue1115> table, Issue1115 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Issue1115?> FindAsync(this ITable<Issue1115> table, Issue1115 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Issue1115> FindQuery(this ITable<Issue1115> table, Issue1115 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static Issue1115? FindIssue1115(this TestDataDB db, SqlHierarchyId id)
		{
			return db.GetTable<Issue1115>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Issue1115?> FindIssue1115Async(this TestDataDB db, SqlHierarchyId id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1115>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Issue1115> FindIssue1115Query(this TestDataDB db, SqlHierarchyId id)
		{
			return db.GetTable<Issue1115>().Where(e => e.Id.Equals(id));
		}

		public static Issue1115? Find(this TestDataDB db, Issue1115 @record)
		{
			return db.GetTable<Issue1115>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Issue1115?> FindAsync(this TestDataDB db, Issue1115 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1115>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Issue1115> FindQuery(this TestDataDB db, Issue1115 @record)
		{
			return db.GetTable<Issue1115>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Issue1144? Find(this ITable<Issue1144> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Issue1144?> FindAsync(this ITable<Issue1144> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Issue1144> FindQuery(this ITable<Issue1144> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static Issue1144? Find(this ITable<Issue1144> table, Issue1144 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Issue1144?> FindAsync(this ITable<Issue1144> table, Issue1144 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Issue1144> FindQuery(this ITable<Issue1144> table, Issue1144 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static Issue1144? FindIssue1144(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Issue1144>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Issue1144?> FindIssue1144Async(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1144>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Issue1144> FindIssue1144Query(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Issue1144>().Where(e => e.Id.Equals(id));
		}

		public static Issue1144? Find(this TestDataDB db, Issue1144 @record)
		{
			return db.GetTable<Issue1144>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Issue1144?> FindAsync(this TestDataDB db, Issue1144 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1144>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Issue1144> FindQuery(this TestDataDB db, Issue1144 @record)
		{
			return db.GetTable<Issue1144>().Where(e => e.Id.Equals(@record.Id));
		}

		public static LinqDataType? Find(this ITable<LinqDataType> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<LinqDataType?> FindAsync(this ITable<LinqDataType> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<LinqDataType> FindQuery(this ITable<LinqDataType> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static LinqDataType? Find(this ITable<LinqDataType> table, LinqDataType @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<LinqDataType?> FindAsync(this ITable<LinqDataType> table, LinqDataType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<LinqDataType> FindQuery(this ITable<LinqDataType> table, LinqDataType @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static LinqDataType? FindLinqDataType(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<LinqDataType>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<LinqDataType?> FindLinqDataTypeAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<LinqDataType>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<LinqDataType> FindLinqDataTypeQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<LinqDataType>().Where(e => e.Id.Equals(id));
		}

		public static LinqDataType? Find(this TestDataDB db, LinqDataType @record)
		{
			return db.GetTable<LinqDataType>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<LinqDataType?> FindAsync(this TestDataDB db, LinqDataType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<LinqDataType>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<LinqDataType> FindQuery(this TestDataDB db, LinqDataType @record)
		{
			return db.GetTable<LinqDataType>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Member? Find(this ITable<Member> table, SqlInt32 memberId)
		{
			return table.FirstOrDefault(e => e.MemberId.Equals(memberId));
		}

		public static Task<Member?> FindAsync(this ITable<Member> table, SqlInt32 memberId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.MemberId.Equals(memberId), cancellationToken);
		}

		public static IQueryable<Member> FindQuery(this ITable<Member> table, SqlInt32 memberId)
		{
			return table.Where(e => e.MemberId.Equals(memberId));
		}

		public static Member? Find(this ITable<Member> table, Member @record)
		{
			return table.FirstOrDefault(e => e.MemberId.Equals(@record.MemberId));
		}

		public static Task<Member?> FindAsync(this ITable<Member> table, Member @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.MemberId.Equals(@record.MemberId), cancellationToken);
		}

		public static IQueryable<Member> FindQuery(this ITable<Member> table, Member @record)
		{
			return table.Where(e => e.MemberId.Equals(@record.MemberId));
		}

		public static Member? FindMember(this TestDataDB db, SqlInt32 memberId)
		{
			return db.GetTable<Member>().FirstOrDefault(e => e.MemberId.Equals(memberId));
		}

		public static Task<Member?> FindMemberAsync(this TestDataDB db, SqlInt32 memberId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Member>().FirstOrDefaultAsync(e => e.MemberId.Equals(memberId), cancellationToken);
		}

		public static IQueryable<Member> FindMemberQuery(this TestDataDB db, SqlInt32 memberId)
		{
			return db.GetTable<Member>().Where(e => e.MemberId.Equals(memberId));
		}

		public static Member? Find(this TestDataDB db, Member @record)
		{
			return db.GetTable<Member>().FirstOrDefault(e => e.MemberId.Equals(@record.MemberId));
		}

		public static Task<Member?> FindAsync(this TestDataDB db, Member @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Member>().FirstOrDefaultAsync(e => e.MemberId.Equals(@record.MemberId), cancellationToken);
		}

		public static IQueryable<Member> FindQuery(this TestDataDB db, Member @record)
		{
			return db.GetTable<Member>().Where(e => e.MemberId.Equals(@record.MemberId));
		}

		public static Parent? Find(this ITable<Parent> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Parent?> FindAsync(this ITable<Parent> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Parent> FindQuery(this ITable<Parent> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static Parent? Find(this ITable<Parent> table, Parent @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Parent?> FindAsync(this ITable<Parent> table, Parent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Parent> FindQuery(this ITable<Parent> table, Parent @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static Parent? FindParent(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Parent>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Parent?> FindParentAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Parent>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Parent> FindParentQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<Parent>().Where(e => e.Id.Equals(id));
		}

		public static Parent? Find(this TestDataDB db, Parent @record)
		{
			return db.GetTable<Parent>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Parent?> FindAsync(this TestDataDB db, Parent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Parent>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Parent> FindQuery(this TestDataDB db, Parent @record)
		{
			return db.GetTable<Parent>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Patient? Find(this ITable<Patient> table, SqlInt32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, SqlInt32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Patient? FindPatient(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId.Equals(personId));
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Person? Find(this ITable<Person> table, SqlInt32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, SqlInt32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Person? FindPerson(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, SqlInt32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, SqlInt32 personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId.Equals(personId));
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Provider? Find(this ITable<Provider> table, SqlInt32 providerId)
		{
			return table.FirstOrDefault(e => e.ProviderId.Equals(providerId));
		}

		public static Task<Provider?> FindAsync(this ITable<Provider> table, SqlInt32 providerId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProviderId.Equals(providerId), cancellationToken);
		}

		public static IQueryable<Provider> FindQuery(this ITable<Provider> table, SqlInt32 providerId)
		{
			return table.Where(e => e.ProviderId.Equals(providerId));
		}

		public static Provider? Find(this ITable<Provider> table, Provider @record)
		{
			return table.FirstOrDefault(e => e.ProviderId.Equals(@record.ProviderId));
		}

		public static Task<Provider?> FindAsync(this ITable<Provider> table, Provider @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProviderId.Equals(@record.ProviderId), cancellationToken);
		}

		public static IQueryable<Provider> FindQuery(this ITable<Provider> table, Provider @record)
		{
			return table.Where(e => e.ProviderId.Equals(@record.ProviderId));
		}

		public static Provider? FindProvider(this TestDataDB db, SqlInt32 providerId)
		{
			return db.GetTable<Provider>().FirstOrDefault(e => e.ProviderId.Equals(providerId));
		}

		public static Task<Provider?> FindProviderAsync(this TestDataDB db, SqlInt32 providerId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Provider>().FirstOrDefaultAsync(e => e.ProviderId.Equals(providerId), cancellationToken);
		}

		public static IQueryable<Provider> FindProviderQuery(this TestDataDB db, SqlInt32 providerId)
		{
			return db.GetTable<Provider>().Where(e => e.ProviderId.Equals(providerId));
		}

		public static Provider? Find(this TestDataDB db, Provider @record)
		{
			return db.GetTable<Provider>().FirstOrDefault(e => e.ProviderId.Equals(@record.ProviderId));
		}

		public static Task<Provider?> FindAsync(this TestDataDB db, Provider @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Provider>().FirstOrDefaultAsync(e => e.ProviderId.Equals(@record.ProviderId), cancellationToken);
		}

		public static IQueryable<Provider> FindQuery(this TestDataDB db, Provider @record)
		{
			return db.GetTable<Provider>().Where(e => e.ProviderId.Equals(@record.ProviderId));
		}

		public static SqlType? Find(this ITable<SqlType> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<SqlType?> FindAsync(this ITable<SqlType> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<SqlType> FindQuery(this ITable<SqlType> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static SqlType? Find(this ITable<SqlType> table, SqlType @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<SqlType?> FindAsync(this ITable<SqlType> table, SqlType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<SqlType> FindQuery(this ITable<SqlType> table, SqlType @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static SqlType? FindSqlType(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<SqlType>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<SqlType?> FindSqlTypeAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SqlType>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<SqlType> FindSqlTypeQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<SqlType>().Where(e => e.Id.Equals(id));
		}

		public static SqlType? Find(this TestDataDB db, SqlType @record)
		{
			return db.GetTable<SqlType>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<SqlType?> FindAsync(this TestDataDB db, SqlType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SqlType>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<SqlType> FindQuery(this TestDataDB db, SqlType @record)
		{
			return db.GetTable<SqlType>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id.Equals(id));
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id.Equals(id));
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id.Equals(id));
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, SqlInt32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMergeIdentity?> FindAsync(this ITable<TestMergeIdentity> table, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this ITable<TestMergeIdentity> table, SqlInt32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, TestMergeIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMergeIdentity?> FindAsync(this ITable<TestMergeIdentity> table, TestMergeIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this ITable<TestMergeIdentity> table, TestMergeIdentity @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMergeIdentity? FindTestMergeIdentity(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMergeIdentity?> FindTestMergeIdentityAsync(this TestDataDB db, SqlInt32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindTestMergeIdentityQuery(this TestDataDB db, SqlInt32 id)
		{
			return db.GetTable<TestMergeIdentity>().Where(e => e.Id.Equals(id));
		}

		public static TestMergeIdentity? Find(this TestDataDB db, TestMergeIdentity @record)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMergeIdentity?> FindAsync(this TestDataDB db, TestMergeIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this TestDataDB db, TestMergeIdentity @record)
		{
			return db.GetTable<TestMergeIdentity>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestSchemaX? Find(this ITable<TestSchemaX> table, SqlInt32 testSchemaXid)
		{
			return table.FirstOrDefault(e => e.TestSchemaXid.Equals(testSchemaXid));
		}

		public static Task<TestSchemaX?> FindAsync(this ITable<TestSchemaX> table, SqlInt32 testSchemaXid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaXid.Equals(testSchemaXid), cancellationToken);
		}

		public static IQueryable<TestSchemaX> FindQuery(this ITable<TestSchemaX> table, SqlInt32 testSchemaXid)
		{
			return table.Where(e => e.TestSchemaXid.Equals(testSchemaXid));
		}

		public static TestSchemaX? Find(this ITable<TestSchemaX> table, TestSchemaX @record)
		{
			return table.FirstOrDefault(e => e.TestSchemaXid.Equals(@record.TestSchemaXid));
		}

		public static Task<TestSchemaX?> FindAsync(this ITable<TestSchemaX> table, TestSchemaX @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaXid.Equals(@record.TestSchemaXid), cancellationToken);
		}

		public static IQueryable<TestSchemaX> FindQuery(this ITable<TestSchemaX> table, TestSchemaX @record)
		{
			return table.Where(e => e.TestSchemaXid.Equals(@record.TestSchemaXid));
		}

		public static TestSchemaX? FindTestSchemaX(this TestDataDB db, SqlInt32 testSchemaXid)
		{
			return db.GetTable<TestSchemaX>().FirstOrDefault(e => e.TestSchemaXid.Equals(testSchemaXid));
		}

		public static Task<TestSchemaX?> FindTestSchemaXAsync(this TestDataDB db, SqlInt32 testSchemaXid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaX>().FirstOrDefaultAsync(e => e.TestSchemaXid.Equals(testSchemaXid), cancellationToken);
		}

		public static IQueryable<TestSchemaX> FindTestSchemaXQuery(this TestDataDB db, SqlInt32 testSchemaXid)
		{
			return db.GetTable<TestSchemaX>().Where(e => e.TestSchemaXid.Equals(testSchemaXid));
		}

		public static TestSchemaX? Find(this TestDataDB db, TestSchemaX @record)
		{
			return db.GetTable<TestSchemaX>().FirstOrDefault(e => e.TestSchemaXid.Equals(@record.TestSchemaXid));
		}

		public static Task<TestSchemaX?> FindAsync(this TestDataDB db, TestSchemaX @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaX>().FirstOrDefaultAsync(e => e.TestSchemaXid.Equals(@record.TestSchemaXid), cancellationToken);
		}

		public static IQueryable<TestSchemaX> FindQuery(this TestDataDB db, TestSchemaX @record)
		{
			return db.GetTable<TestSchemaX>().Where(e => e.TestSchemaXid.Equals(@record.TestSchemaXid));
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.Doctor.PersonId), OtherKey = nameof(SqlServer.Person.PersonId))]
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId.Equals(t.PersonId));
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.Person.PersonId), OtherKey = nameof(SqlServer.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId.Equals(obj.PersonId));
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.Person.PersonId), OtherKey = nameof(SqlServer.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId.Equals(obj.PersonId));
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.Patient.PersonId), OtherKey = nameof(SqlServer.Person.PersonId))]
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId.Equals(t.PersonId));
		}
		#endregion

		#region IndexTable2 Associations
		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1), OtherKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1))]
		public static IndexTable Patient2IndexTable(this IndexTable2 obj, IDataContext db)
		{
			return db.GetTable<IndexTable>().First(t => obj.PkField2.Equals(t.PkField2) && obj.PkField1.Equals(t.PkField1));
		}
		#endregion

		#region IndexTable Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		[Association(ThisKey = nameof(IndexTable.PkField2) + "," + nameof(IndexTable.PkField1), OtherKey = nameof(SqlServer.IndexTable2.PkField2) + "," + nameof(SqlServer.IndexTable2.PkField1))]
		public static IndexTable2? IndexTable2(this IndexTable obj, IDataContext db)
		{
			return db.GetTable<IndexTable2>().FirstOrDefault(t => t.PkField2.Equals(obj.PkField2) && t.PkField1.Equals(obj.PkField1));
		}
		#endregion

		#region Provider Associations
		/// <summary>
		/// FK_Provider_Member
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.Provider.ProviderId), OtherKey = nameof(SqlServer.Member.MemberId))]
		public static Member Member(this Provider obj, IDataContext db)
		{
			return db.GetTable<Member>().First(t => obj.ProviderId.Equals(t.MemberId));
		}
		#endregion

		#region Member Associations
		/// <summary>
		/// FK_Provider_Member backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.Member.MemberId), OtherKey = nameof(SqlServer.Provider.ProviderId))]
		public static Provider? Provider(this Member obj, IDataContext db)
		{
			return db.GetTable<Provider>().FirstOrDefault(t => t.ProviderId.Equals(obj.MemberId));
		}
		#endregion

		#region TestSchemaB Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid))]
		public static TestSchemaSchema.TestSchemaA OriginTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.OriginTestSchemaAid.Equals(t.TestSchemaAid));
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid))]
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAid.Equals(t.TestSchemaAid));
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId), OtherKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid))]
		public static TestSchemaSchema.TestSchemaA TargetTestSchemaA1(this TestSchemaSchema.TestSchemaB obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaA>().First(t => obj.TargetTestSchemaAId.Equals(t.TestSchemaAid));
		}
		#endregion

		#region TestSchemaA Associations
		/// <summary>
		/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid))]
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.OriginTestSchemaAid.Equals(obj.TestSchemaAid));
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid))]
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB1(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAid.Equals(obj.TestSchemaAid));
		}

		/// <summary>
		/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaSchema.TestSchemaA.TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId))]
		public static IQueryable<TestSchemaSchema.TestSchemaB> TestSchemaB2(this TestSchemaSchema.TestSchemaA obj, IDataContext db)
		{
			return db.GetTable<TestSchemaSchema.TestSchemaB>().Where(t => t.TargetTestSchemaAId.Equals(obj.TestSchemaAid));
		}
		#endregion

		#region TestSchemaY Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.TestSchemaY.TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid))]
		public static TestSchemaX TestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.TestSchemaXid.Equals(t.TestSchemaXid));
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid))]
		public static TestSchemaX ParentTestSchemaX(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.ParentTestSchemaXid.Equals(t.TestSchemaXid));
		}

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SqlServer.TestSchemaY.TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaX.TestSchemaXid))]
		public static TestSchemaX TestSchemaX1(this TestSchemaY obj, IDataContext db)
		{
			return db.GetTable<TestSchemaX>().First(t => obj.TestSchemaXid.Equals(t.TestSchemaXid));
		}
		#endregion

		#region TestSchemaX Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid))]
		public static IQueryable<TestSchemaY> TestSchemaY(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.TestSchemaXid.Equals(obj.TestSchemaXid));
		}

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid))]
		public static IQueryable<TestSchemaY> TestSchemaY1(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.ParentTestSchemaXid.Equals(obj.TestSchemaXid));
		}

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServer.TestSchemaX.TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid))]
		public static IQueryable<TestSchemaY> TestSchemaY2(this TestSchemaX obj, IDataContext db)
		{
			return db.GetTable<TestSchemaY>().Where(t => t.TestSchemaXid.Equals(obj.TestSchemaXid));
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.ExecuteProc("[AddIssue792Record]", parameters);
		}

		public static async Task<AddIssue792RecordResults> AddIssue792RecordAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[AddIssue792Record]", cancellationToken, parameters);
			return new AddIssue792RecordResults()
			{
				Result = result,
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public class AddIssue792RecordResults
		{
			public int Result { get; set; }
			public int Return { get; set; }
		}
		#endregion

		#region DuplicateColumnNames
		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<SqlString>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]", parameters).ToList();
		}

		public static async Task<DuplicateColumnNamesResults> DuplicateColumnNamesAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new DuplicateColumnNamesResult()
			{
				Id = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema),
				Id1 = Converter.ChangeTypeTo<SqlString>(dataReader.GetValue(1), dataConnection.MappingSchema)
			}, "[DuplicateColumnNames]", cancellationToken, parameters);
			return new DuplicateColumnNamesResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class DuplicateColumnNamesResult
		{
			public SqlInt32  Id  { get; set; }
			public SqlString Id1 { get; set; }
		}

		public class DuplicateColumnNamesResults
		{
			public IEnumerable<DuplicateColumnNamesResult> Result { get; set; } = null!;
			public int                                     Return { get; set; }
		}
		#endregion

		#region ExecuteProcIntParameters
		public static int ExecuteProcIntParameters(this TestDataDB dataConnection, SqlInt32? input, ref SqlInt32? output, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			output = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.ExecuteProc("[ExecuteProcIntParameters]", parameters);
		}

		public static async Task<ExecuteProcIntParametersResults> ExecuteProcIntParametersAsync(this TestDataDB dataConnection, SqlInt32? input, SqlInt32? output, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[ExecuteProcIntParameters]", cancellationToken, parameters);
			return new ExecuteProcIntParametersResults()
			{
				Result = result,
				Output = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public class ExecuteProcIntParametersResults
		{
			public int       Result { get; set; }
			public SqlInt32? Output { get; set; }
			public int       Return { get; set; }
		}
		#endregion

		#region ExecuteProcStringParameters
		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static IEnumerable<ExecuteProcStringParametersResult> ExecuteProcStringParameters(this TestDataDB dataConnection, SqlInt32? input, ref SqlInt32? output, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			output = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<SqlString>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", parameters).ToList();
		}

		/// <summary>
		/// This is &lt;test&gt; procedure!
		/// </summary>
		/// <param name="input">
		/// This is &lt;test&gt; procedure parameter!
		/// </param>
		public static async Task<ExecuteProcStringParametersResults> ExecuteProcStringParametersAsync(this TestDataDB dataConnection, SqlInt32? input, SqlInt32? output, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output", output, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new ExecuteProcStringParametersResult()
			{
				Column = Converter.ChangeTypeTo<SqlString>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[ExecuteProcStringParameters]", cancellationToken, parameters);
			return new ExecuteProcStringParametersResults()
			{
				Result = result.ToList(),
				Output = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class ExecuteProcStringParametersResult
		{
			public SqlString Column { get; set; }
		}

		public class ExecuteProcStringParametersResults
		{
			public IEnumerable<ExecuteProcStringParametersResult> Result { get; set; } = null!;
			public SqlInt32?                                      Output { get; set; }
			public int                                            Return { get; set; }
		}
		#endregion

		#region Issue1897
		public static int Issue1897(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.ExecuteProc("[Issue1897]", parameters);
		}

		public static async Task<Issue1897Results> Issue1897Async(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Issue1897]", cancellationToken, parameters);
			return new Issue1897Results()
			{
				Result = result,
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public class Issue1897Results
		{
			public int Result { get; set; }
			public int Return { get; set; }
		}
		#endregion

		#region OutRefEnumTest
		public static int OutRefEnumTest(this TestDataDB dataConnection, SqlString? str, ref SqlString? outputStr, ref SqlString? inputOutputStr, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			outputStr = Converter.ChangeTypeTo<SqlString?>(parameters[1].Value);
			inputOutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[2].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[3].Value);
			return dataConnection.ExecuteProc("[OutRefEnumTest]", parameters);
		}

		public static async Task<OutRefEnumTestResults> OutRefEnumTestAsync(this TestDataDB dataConnection, SqlString? str, SqlString? outputStr, SqlString? inputOutputStr, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefEnumTest]", cancellationToken, parameters);
			return new OutRefEnumTestResults()
			{
				Result = result,
				InputOutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[2].Value),
				OutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[1].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[3].Value)
			};
		}

		public class OutRefEnumTestResults
		{
			public int        Result         { get; set; }
			public SqlString? InputOutputStr { get; set; }
			public SqlString? OutputStr      { get; set; }
			public int        Return         { get; set; }
		}
		#endregion

		#region OutRefTest
		public static int OutRefTest(this TestDataDB dataConnection, SqlInt32? id, ref SqlInt32? outputId, ref SqlInt32? inputOutputId, SqlString? str, ref SqlString? outputStr, ref SqlString? inputOutputStr, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			outputId = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value);
			inputOutputId = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value);
			outputStr = Converter.ChangeTypeTo<SqlString?>(parameters[4].Value);
			inputOutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[5].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[6].Value);
			return dataConnection.ExecuteProc("[OutRefTest]", parameters);
		}

		public static async Task<OutRefTestResults> OutRefTestAsync(this TestDataDB dataConnection, SqlInt32? id, SqlInt32? outputId, SqlInt32? inputOutputId, SqlString? str, SqlString? outputStr, SqlString? inputOutputStr, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ID", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@outputID", outputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@inputOutputID", inputOutputId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@str", str, LinqToDB.DataType.VarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@outputStr", outputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@inputOutputStr", inputOutputStr, LinqToDB.DataType.VarChar)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[OutRefTest]", cancellationToken, parameters);
			return new OutRefTestResults()
			{
				Result = result,
				InputOutputId = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value),
				InputOutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[5].Value),
				OutputId = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value),
				OutputStr = Converter.ChangeTypeTo<SqlString?>(parameters[4].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[6].Value)
			};
		}

		public class OutRefTestResults
		{
			public int        Result         { get; set; }
			public SqlInt32?  InputOutputId  { get; set; }
			public SqlString? InputOutputStr { get; set; }
			public SqlInt32?  OutputId       { get; set; }
			public SqlString? OutputStr      { get; set; }
			public int        Return         { get; set; }
		}
		#endregion

		#region PatientSelectAll
		public static IEnumerable<PatientSelectAllResult> PatientSelectAll(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc<PatientSelectAllResult>("[Patient_SelectAll]", parameters).ToList();
		}

		public static async Task<PatientSelectAllResults> PatientSelectAllAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PatientSelectAllResult>("[Patient_SelectAll]", cancellationToken, parameters);
			return new PatientSelectAllResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class PatientSelectAllResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"          )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"      )] public SqlString  Gender     { get; set; }
			[Column("Diagnosis" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(256)")] public SqlString  Diagnosis  { get; set; }
		}

		public class PatientSelectAllResults
		{
			public IEnumerable<PatientSelectAllResult> Result { get; set; } = null!;
			public int                                 Return { get; set; }
		}
		#endregion

		#region PatientSelectByName
		public static IEnumerable<PatientSelectByNameResult> PatientSelectByName(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<PatientSelectByNameResult>("[Patient_SelectByName]", parameters).ToList();
		}

		public static async Task<PatientSelectByNameResults> PatientSelectByNameAsync(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PatientSelectByNameResult>("[Patient_SelectByName]", cancellationToken, parameters);
			return new PatientSelectByNameResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class PatientSelectByNameResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"          )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)" )] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"      )] public SqlString  Gender     { get; set; }
			[Column("Diagnosis" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(256)")] public SqlString  Diagnosis  { get; set; }
		}

		public class PatientSelectByNameResults
		{
			public IEnumerable<PatientSelectByNameResult> Result { get; set; } = null!;
			public int                                    Return { get; set; }
		}
		#endregion

		#region PersonSearch
		public static int PersonSearch(this TestDataDB dataConnection, SqlString? nameFilter, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(512)",
					Size = 512
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.ExecuteProc("[PersonSearch]", parameters);
		}

		public static async Task<PersonSearchResults> PersonSearchAsync(this TestDataDB dataConnection, SqlString? nameFilter, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@nameFilter", nameFilter, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(512)",
					Size = 512
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[PersonSearch]", cancellationToken, parameters);
			return new PersonSearchResults()
			{
				Result = result,
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public class PersonSearchResults
		{
			public int Result { get; set; }
			public int Return { get; set; }
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, SqlInt32? personId, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.ExecuteProc("[Person_Delete]", parameters);
		}

		public static async Task<PersonDeleteResults> PersonDeleteAsync(this TestDataDB dataConnection, SqlInt32? personId, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Person_Delete]", cancellationToken, parameters);
			return new PersonDeleteResults()
			{
				Result = result,
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public class PersonDeleteResults
		{
			public int Result { get; set; }
			public int Return { get; set; }
		}
		#endregion

		#region PersonInsert
		public static IEnumerable<PersonInsertResult> PersonInsert(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[4].Value);
			return dataConnection.QueryProc<PersonInsertResult>("[Person_Insert]", parameters).ToList();
		}

		public static async Task<PersonInsertResults> PersonInsertAsync(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonInsertResult>("[Person_Insert]", cancellationToken, parameters);
			return new PersonInsertResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[4].Value)
			};
		}

		public partial class PersonInsertResult
		{
			[Column("PersonID", DataType = LinqToDB.DataType.Int32, DbType = "int")] public SqlInt32? PersonId { get; set; }
		}

		public class PersonInsertResults
		{
			public IEnumerable<PersonInsertResult> Result { get; set; } = null!;
			public int                             Return { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		public static int PersonInsertOutputParameter(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, ref SqlInt32? personId, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			personId = Converter.ChangeTypeTo<SqlInt32?>(parameters[4].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[5].Value);
			return dataConnection.ExecuteProc("[Person_Insert_OutputParameter]", parameters);
		}

		public static async Task<PersonInsertOutputParameterResults> PersonInsertOutputParameterAsync(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, SqlInt32? personId, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Person_Insert_OutputParameter]", cancellationToken, parameters);
			return new PersonInsertOutputParameterResults()
			{
				Result = result,
				PersonId = Converter.ChangeTypeTo<SqlInt32?>(parameters[4].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[5].Value)
			};
		}

		public class PersonInsertOutputParameterResults
		{
			public int       Result   { get; set; }
			public SqlInt32? PersonId { get; set; }
			public int       Return   { get; set; }
		}
		#endregion

		#region PersonSelectAll
		public static IEnumerable<PersonSelectAllResult> PersonSelectAll(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc<PersonSelectAllResult>("[Person_SelectAll]", parameters).ToList();
		}

		public static async Task<PersonSelectAllResults> PersonSelectAllAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectAllResult>("[Person_SelectAll]", cancellationToken, parameters);
			return new PersonSelectAllResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class PersonSelectAllResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class PersonSelectAllResults
		{
			public IEnumerable<PersonSelectAllResult> Result { get; set; } = null!;
			public int                                Return { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		public static IEnumerable<PersonSelectByKeyResult> PersonSelectByKey(this TestDataDB dataConnection, SqlInt32? id, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<PersonSelectByKeyResult>("[Person_SelectByKey]", parameters).ToList();
		}

		public static async Task<PersonSelectByKeyResults> PersonSelectByKeyAsync(this TestDataDB dataConnection, SqlInt32? id, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectByKeyResult>("[Person_SelectByKey]", cancellationToken, parameters);
			return new PersonSelectByKeyResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class PersonSelectByKeyResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class PersonSelectByKeyResults
		{
			public IEnumerable<PersonSelectByKeyResult> Result { get; set; } = null!;
			public int                                  Return { get; set; }
		}
		#endregion

		#region PersonSelectByKeyLowercase
		public static IEnumerable<PersonSelectByKeyLowercaseResult> PersonSelectByKeyLowercase(this TestDataDB dataConnection, SqlInt32? id, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", parameters).ToList();
		}

		public static async Task<PersonSelectByKeyLowercaseResults> PersonSelectByKeyLowercaseAsync(this TestDataDB dataConnection, SqlInt32? id, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@id", id, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectByKeyLowercaseResult>("[Person_SelectByKeyLowercase]", cancellationToken, parameters);
			return new PersonSelectByKeyLowercaseResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class PersonSelectByKeyLowercaseResult
		{
			[Column("PersonID" , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32  PersonId  { get; set; }
			[Column("FirstName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString FirstName { get; set; }
		}

		public class PersonSelectByKeyLowercaseResults
		{
			public IEnumerable<PersonSelectByKeyLowercaseResult> Result { get; set; } = null!;
			public int                                           Return { get; set; }
		}
		#endregion

		#region PersonSelectByName
		public static IEnumerable<PersonSelectByNameResult> PersonSelectByName(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<PersonSelectByNameResult>("[Person_SelectByName]", parameters).ToList();
		}

		public static async Task<PersonSelectByNameResults> PersonSelectByNameAsync(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectByNameResult>("[Person_SelectByName]", cancellationToken, parameters);
			return new PersonSelectByNameResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class PersonSelectByNameResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class PersonSelectByNameResults
		{
			public IEnumerable<PersonSelectByNameResult> Result { get; set; } = null!;
			public int                                   Return { get; set; }
		}
		#endregion

		#region PersonSelectListByName
		public static IEnumerable<PersonSelectListByNameResult> PersonSelectListByName(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<PersonSelectListByNameResult>("[Person_SelectListByName]", parameters).ToList();
		}

		public static async Task<PersonSelectListByNameResults> PersonSelectListByNameAsync(this TestDataDB dataConnection, SqlString? firstName, SqlString? lastName, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@firstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@lastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<PersonSelectListByNameResult>("[Person_SelectListByName]", cancellationToken, parameters);
			return new PersonSelectListByNameResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class PersonSelectListByNameResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class PersonSelectListByNameResults
		{
			public IEnumerable<PersonSelectListByNameResult> Result { get; set; } = null!;
			public int                                       Return { get; set; }
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, SqlInt32? personId, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[5].Value);
			return dataConnection.ExecuteProc("[Person_Update]", parameters);
		}

		public static async Task<PersonUpdateResults> PersonUpdateAsync(this TestDataDB dataConnection, SqlInt32? personId, SqlString? firstName, SqlString? lastName, SqlString? middleName, SqlString? gender, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@PersonID", personId, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@FirstName", firstName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@LastName", lastName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@MiddleName", middleName, LinqToDB.DataType.NVarChar)
				{
					DbType = "nvarchar(50)",
					Size = 50
				},
				new DataParameter("@Gender", gender, LinqToDB.DataType.Char)
				{
					DbType = "char(1)",
					Size = 1
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.ExecuteProcAsync("[Person_Update]", cancellationToken, parameters);
			return new PersonUpdateResults()
			{
				Result = result,
				Return = Converter.ChangeTypeTo<int>(parameters[5].Value)
			};
		}

		public class PersonUpdateResults
		{
			public int Result { get; set; }
			public int Return { get; set; }
		}
		#endregion

		#region QueryProcMultipleParameters
		public static IEnumerable<QueryProcMultipleParametersResult> QueryProcMultipleParameters(this TestDataDB dataConnection, SqlInt32? input, ref SqlInt32? output1, ref SqlInt32? output2, ref SqlInt32? output3, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			output1 = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value);
			output3 = Converter.ChangeTypeTo<SqlInt32?>(parameters[3].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[4].Value);
			return dataConnection.QueryProc<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", parameters).ToList();
		}

		public static async Task<QueryProcMultipleParametersResults> QueryProcMultipleParametersAsync(this TestDataDB dataConnection, SqlInt32? input, SqlInt32? output1, SqlInt32? output2, SqlInt32? output3, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output3", output3, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcMultipleParametersResult>("[QueryProcMultipleParameters]", cancellationToken, parameters);
			return new QueryProcMultipleParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value),
				Output3 = Converter.ChangeTypeTo<SqlInt32?>(parameters[3].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[4].Value)
			};
		}

		public partial class QueryProcMultipleParametersResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class QueryProcMultipleParametersResults
		{
			public IEnumerable<QueryProcMultipleParametersResult> Result  { get; set; } = null!;
			public SqlInt32?                                      Output1 { get; set; }
			public SqlInt32?                                      Output2 { get; set; }
			public SqlInt32?                                      Output3 { get; set; }
			public int                                            Return  { get; set; }
		}
		#endregion

		#region QueryProcParameters
		public static IEnumerable<QueryProcParametersResult> QueryProcParameters(this TestDataDB dataConnection, SqlInt32? input, ref SqlInt32? output1, ref SqlInt32? output2, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			output1 = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value);
			output2 = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value);
			@return = Converter.ChangeTypeTo<int>(parameters[3].Value);
			return dataConnection.QueryProc<QueryProcParametersResult>("[QueryProcParameters]", parameters).ToList();
		}

		public static async Task<QueryProcParametersResults> QueryProcParametersAsync(this TestDataDB dataConnection, SqlInt32? input, SqlInt32? output1, SqlInt32? output2, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@input", input, LinqToDB.DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@output1", output1, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@output2", output2, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "int"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<QueryProcParametersResult>("[QueryProcParameters]", cancellationToken, parameters);
			return new QueryProcParametersResults()
			{
				Result = result.ToList(),
				Output1 = Converter.ChangeTypeTo<SqlInt32?>(parameters[1].Value),
				Output2 = Converter.ChangeTypeTo<SqlInt32?>(parameters[2].Value),
				Return = Converter.ChangeTypeTo<int>(parameters[3].Value)
			};
		}

		public partial class QueryProcParametersResult
		{
			[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32   PersonId   { get; set; }
			[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  FirstName  { get; set; }
			[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString  LastName   { get; set; }
			[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)")] public SqlString? MiddleName { get; set; }
			[Column("Gender"    , DataType = LinqToDB.DataType.Char    , DbType = "char(1)"     )] public SqlString  Gender     { get; set; }
		}

		public class QueryProcParametersResults
		{
			public IEnumerable<QueryProcParametersResult> Result  { get; set; } = null!;
			public SqlInt32?                              Output1 { get; set; }
			public SqlInt32?                              Output2 { get; set; }
			public int                                    Return  { get; set; }
		}
		#endregion

		#region SelectImplicitColumn
		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]", parameters).ToList();
		}

		public static async Task<SelectImplicitColumnResults> SelectImplicitColumnAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new SelectImplicitColumnResult()
			{
				Column = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[SelectImplicitColumn]", cancellationToken, parameters);
			return new SelectImplicitColumnResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class SelectImplicitColumnResult
		{
			public SqlInt32 Column { get; set; }
		}

		public class SelectImplicitColumnResults
		{
			public IEnumerable<SelectImplicitColumnResult> Result { get; set; } = null!;
			public int                                     Return { get; set; }
		}
		#endregion

		#region TableTypeTestProc
		public static IEnumerable<TableTypeTestProcResult> TableTypeTestProc(this TestDataDB dataConnection, DataTable? table, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
				{
					DbType = "[dbo].[TestTableType]"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<TableTypeTestProcResult>("[TableTypeTestProc]", parameters).ToList();
		}

		public static async Task<TableTypeTestProcResults> TableTypeTestProcAsync(this TestDataDB dataConnection, DataTable? table, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@table", table, LinqToDB.DataType.Structured)
				{
					DbType = "[dbo].[TestTableType]"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<TableTypeTestProcResult>("[TableTypeTestProc]", cancellationToken, parameters);
			return new TableTypeTestProcResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class TableTypeTestProcResult
		{
			[Column("Id"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         )] public SqlInt32?  Id   { get; set; }
			[Column("Name", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(10)")] public SqlString? Name { get; set; }
		}

		public class TableTypeTestProcResults
		{
			public IEnumerable<TableTypeTestProcResult> Result { get; set; } = null!;
			public int                                  Return { get; set; }
		}
		#endregion

		#region VariableResults
		public static IEnumerable<VariableResultsResult> VariableResults(this TestDataDB dataConnection, SqlBoolean? returnFullRow, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
				{
					DbType = "bit"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<VariableResultsResult>("[VariableResults]", parameters).ToList();
		}

		public static async Task<VariableResultsResults> VariableResultsAsync(this TestDataDB dataConnection, SqlBoolean? returnFullRow, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@ReturnFullRow", returnFullRow, LinqToDB.DataType.Boolean)
				{
					DbType = "bit"
				},
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<VariableResultsResult>("[VariableResults]", cancellationToken, parameters);
			return new VariableResultsResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class VariableResultsResult
		{
			[Column("Code"  , DataType = LinqToDB.DataType.Int32  , DbType = "int"       )] public SqlInt32  Code   { get; set; }
			[Column("Value1", DataType = LinqToDB.DataType.VarChar, DbType = "varchar(4)")] public SqlString Value1 { get; set; }
			[Column("Value2", DataType = LinqToDB.DataType.VarChar, DbType = "varchar(4)")] public SqlString Value2 { get; set; }
		}

		public class VariableResultsResults
		{
			public IEnumerable<VariableResultsResult> Result { get; set; } = null!;
			public int                                Return { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region ScalarFunction
		/// <summary>
		/// This is &lt;test&gt; scalar function!
		/// </summary>
		/// <param name="value">
		/// This is &lt;test&gt; scalar function parameter!
		/// </param>
		[Sql.Function("[dbo].[ScalarFunction]", ServerSideOnly = true)]
		public static SqlInt32? ScalarFunction(SqlInt32? @value)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
