// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	[Table("LinqDataTypes")]
	public class LinqDataType : IEquatable<LinqDataType>
	{
		[Column("_ID"           , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32     Id             { get; set; } // int
		[Column("ID"            , DataType = LinqToDB.DataType.Int32    , DbType = "int"                                                                                               )] public SqlInt32?    Id1            { get; set; } // int
		[Column("MoneyValue"    , DataType = LinqToDB.DataType.Decimal  , DbType = "decimal(10, 4)"  , Precision    = 10  , Scale      = 4                                             )] public SqlDecimal?  MoneyValue     { get; set; } // decimal(10, 4)
		[Column("DateTimeValue" , DataType = LinqToDB.DataType.DateTime , DbType = "datetime"                                                                                          )] public SqlDateTime? DateTimeValue  { get; set; } // datetime
		[Column("DateTimeValue2", DataType = LinqToDB.DataType.DateTime2, DbType = "datetime2(7)"    , Precision    = 7                                                                )] public SqlDateTime? DateTimeValue2 { get; set; } // datetime2(7)
		[Column("BoolValue"     , DataType = LinqToDB.DataType.Boolean  , DbType = "bit"                                                                                               )] public SqlBoolean?  BoolValue      { get; set; } // bit
		[Column("GuidValue"     , DataType = LinqToDB.DataType.Guid     , DbType = "uniqueidentifier"                                                                                  )] public SqlGuid?     GuidValue      { get; set; } // uniqueidentifier
		[Column("BinaryValue"   , DataType = LinqToDB.DataType.VarBinary, DbType = "varbinary(5000)" , Length       = 5000                                                             )] public SqlBinary?   BinaryValue    { get; set; } // varbinary(5000)
		[Column("SmallIntValue" , DataType = LinqToDB.DataType.Int16    , DbType = "smallint"                                                                                          )] public SqlInt16?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"      , DataType = LinqToDB.DataType.Int32    , DbType = "int"                                                                                               )] public SqlInt32?    IntValue       { get; set; } // int
		[Column("BigIntValue"   , DataType = LinqToDB.DataType.Int64    , DbType = "bigint"                                                                                            )] public SqlInt64?    BigIntValue    { get; set; } // bigint
		[Column("StringValue"   , DataType = LinqToDB.DataType.NVarChar , DbType = "nvarchar(50)"    , Length       = 50                                                               )] public SqlString?   StringValue    { get; set; } // nvarchar(50)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<LinqDataType> _equalityComparer = ComparerBuilder.GetEqualityComparer<LinqDataType>(c => c.Id);

		public bool Equals(LinqDataType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as LinqDataType);
		}
		#endregion
	}
}
