// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	public static partial class TestSchemaSchema
	{
		public partial class DataContext
		{
			private readonly IDataContext _dataContext;

			public ITable<SameTableName> SameTableNames => _dataContext.GetTable<SameTableName>();
			public ITable<TestSchemaA>   TestSchemaA    => _dataContext.GetTable<TestSchemaA>();
			public ITable<TestSchemaB>   TestSchemaB    => _dataContext.GetTable<TestSchemaB>();

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}

			#region Table Functions
			#region SchemaTableFunction
			private static readonly MethodInfo _schemaTableFunction = MemberHelper.MethodOf<DataContext>(ctx => ctx.SchemaTableFunction(default));

			[Sql.TableFunction("SchemaTableFunction", Schema = "TestSchema")]
			public IQueryable<Parent> SchemaTableFunction(SqlInt32? id)
			{
				return _dataContext.GetTable<Parent>(this, _schemaTableFunction, id);
			}
			#endregion
			#endregion
		}

		[Table("SameTableName", Schema = "TestSchema")]
		public class SameTableName
		{
			[Column("id", DataType = LinqToDB.DataType.Int32, DbType = "int")] public SqlInt32? Id { get; set; } // int
		}

		[Table("TestSchemaA", Schema = "TestSchema")]
		public class TestSchemaA : IEquatable<TestSchemaA>
		{
			[Column("TestSchemaAID", DataType = LinqToDB.DataType.Int32, DbType = "int", IsPrimaryKey = true)] public SqlInt32 TestSchemaAid { get; set; } // int
			[Column("Field1"       , DataType = LinqToDB.DataType.Int32, DbType = "int"                     )] public SqlInt32 Field1        { get; set; } // int

			#region IEquatable<T> support
			private static readonly IEqualityComparer<TestSchemaA> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestSchemaA>(c => c.TestSchemaAid);

			public bool Equals(TestSchemaA? other)
			{
				return _equalityComparer.Equals(this, other!);
			}

			public override int GetHashCode()
			{
				return _equalityComparer.GetHashCode(this);
			}

			public override bool Equals(object? obj)
			{
				return Equals(obj as TestSchemaA);
			}
			#endregion

			#region Associations
			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.OriginTestSchemaAid))]
			public IEnumerable<TestSchemaB> TestSchemaB { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAid))]
			public IEnumerable<TestSchemaB> TestSchemaB1 { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2 backreference
			/// </summary>
			[Association(ThisKey = nameof(TestSchemaAid), OtherKey = nameof(TestSchemaSchema.TestSchemaB.TargetTestSchemaAId))]
			public IEnumerable<TestSchemaB> TestSchemaB2 { get; set; } = null!;
			#endregion
		}

		[Table("TestSchemaB", Schema = "TestSchema")]
		public class TestSchemaB : IEquatable<TestSchemaB>
		{
			[Column("TestSchemaBID"          , DataType = LinqToDB.DataType.Int32, DbType = "int", IsPrimaryKey = true)] public SqlInt32 TestSchemaBid       { get; set; } // int
			[Column("OriginTestSchemaAID"    , DataType = LinqToDB.DataType.Int32, DbType = "int"                     )] public SqlInt32 OriginTestSchemaAid { get; set; } // int
			[Column("TargetTestSchemaAID"    , DataType = LinqToDB.DataType.Int32, DbType = "int"                     )] public SqlInt32 TargetTestSchemaAid { get; set; } // int
			[Column("Target_Test_Schema_A_ID", DataType = LinqToDB.DataType.Int32, DbType = "int"                     )] public SqlInt32 TargetTestSchemaAId { get; set; } // int

			#region IEquatable<T> support
			private static readonly IEqualityComparer<TestSchemaB> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestSchemaB>(c => c.TestSchemaBid);

			public bool Equals(TestSchemaB? other)
			{
				return _equalityComparer.Equals(this, other!);
			}

			public override int GetHashCode()
			{
				return _equalityComparer.GetHashCode(this);
			}

			public override bool Equals(object? obj)
			{
				return Equals(obj as TestSchemaB);
			}
			#endregion

			#region Associations
			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(OriginTestSchemaAid), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA OriginTestSchemaA { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAid), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA TargetTestSchemaA { get; set; } = null!;

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA2
			/// </summary>
			[Association(CanBeNull = false, ThisKey = nameof(TargetTestSchemaAId), OtherKey = nameof(TestSchemaA.TestSchemaAid))]
			public TestSchemaA TargetTestSchemaA1 { get; set; } = null!;
			#endregion
		}

		#region Table Extensions
		public static TestSchemaA? Find(this ITable<TestSchemaA> table, SqlInt32 testSchemaAid)
		{
			return table.FirstOrDefault(e => e.TestSchemaAid.Equals(testSchemaAid));
		}

		public static Task<TestSchemaA?> FindAsync(this ITable<TestSchemaA> table, SqlInt32 testSchemaAid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaAid.Equals(testSchemaAid), cancellationToken);
		}

		public static IQueryable<TestSchemaA> FindQuery(this ITable<TestSchemaA> table, SqlInt32 testSchemaAid)
		{
			return table.Where(e => e.TestSchemaAid.Equals(testSchemaAid));
		}

		public static TestSchemaA? Find(this ITable<TestSchemaA> table, TestSchemaA @record)
		{
			return table.FirstOrDefault(e => e.TestSchemaAid.Equals(@record.TestSchemaAid));
		}

		public static Task<TestSchemaA?> FindAsync(this ITable<TestSchemaA> table, TestSchemaA @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaAid.Equals(@record.TestSchemaAid), cancellationToken);
		}

		public static IQueryable<TestSchemaA> FindQuery(this ITable<TestSchemaA> table, TestSchemaA @record)
		{
			return table.Where(e => e.TestSchemaAid.Equals(@record.TestSchemaAid));
		}

		public static TestSchemaA? FindTestSchemaA(this TestDataDB db, SqlInt32 testSchemaAid)
		{
			return db.GetTable<TestSchemaA>().FirstOrDefault(e => e.TestSchemaAid.Equals(testSchemaAid));
		}

		public static Task<TestSchemaA?> FindTestSchemaAAsync(this TestDataDB db, SqlInt32 testSchemaAid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaA>().FirstOrDefaultAsync(e => e.TestSchemaAid.Equals(testSchemaAid), cancellationToken);
		}

		public static IQueryable<TestSchemaA> FindTestSchemaAQuery(this TestDataDB db, SqlInt32 testSchemaAid)
		{
			return db.GetTable<TestSchemaA>().Where(e => e.TestSchemaAid.Equals(testSchemaAid));
		}

		public static TestSchemaA? Find(this TestDataDB db, TestSchemaA @record)
		{
			return db.GetTable<TestSchemaA>().FirstOrDefault(e => e.TestSchemaAid.Equals(@record.TestSchemaAid));
		}

		public static Task<TestSchemaA?> FindAsync(this TestDataDB db, TestSchemaA @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaA>().FirstOrDefaultAsync(e => e.TestSchemaAid.Equals(@record.TestSchemaAid), cancellationToken);
		}

		public static IQueryable<TestSchemaA> FindQuery(this TestDataDB db, TestSchemaA @record)
		{
			return db.GetTable<TestSchemaA>().Where(e => e.TestSchemaAid.Equals(@record.TestSchemaAid));
		}

		public static TestSchemaB? Find(this ITable<TestSchemaB> table, SqlInt32 testSchemaBid)
		{
			return table.FirstOrDefault(e => e.TestSchemaBid.Equals(testSchemaBid));
		}

		public static Task<TestSchemaB?> FindAsync(this ITable<TestSchemaB> table, SqlInt32 testSchemaBid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaBid.Equals(testSchemaBid), cancellationToken);
		}

		public static IQueryable<TestSchemaB> FindQuery(this ITable<TestSchemaB> table, SqlInt32 testSchemaBid)
		{
			return table.Where(e => e.TestSchemaBid.Equals(testSchemaBid));
		}

		public static TestSchemaB? Find(this ITable<TestSchemaB> table, TestSchemaB @record)
		{
			return table.FirstOrDefault(e => e.TestSchemaBid.Equals(@record.TestSchemaBid));
		}

		public static Task<TestSchemaB?> FindAsync(this ITable<TestSchemaB> table, TestSchemaB @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TestSchemaBid.Equals(@record.TestSchemaBid), cancellationToken);
		}

		public static IQueryable<TestSchemaB> FindQuery(this ITable<TestSchemaB> table, TestSchemaB @record)
		{
			return table.Where(e => e.TestSchemaBid.Equals(@record.TestSchemaBid));
		}

		public static TestSchemaB? FindTestSchemaB(this TestDataDB db, SqlInt32 testSchemaBid)
		{
			return db.GetTable<TestSchemaB>().FirstOrDefault(e => e.TestSchemaBid.Equals(testSchemaBid));
		}

		public static Task<TestSchemaB?> FindTestSchemaBAsync(this TestDataDB db, SqlInt32 testSchemaBid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaB>().FirstOrDefaultAsync(e => e.TestSchemaBid.Equals(testSchemaBid), cancellationToken);
		}

		public static IQueryable<TestSchemaB> FindTestSchemaBQuery(this TestDataDB db, SqlInt32 testSchemaBid)
		{
			return db.GetTable<TestSchemaB>().Where(e => e.TestSchemaBid.Equals(testSchemaBid));
		}

		public static TestSchemaB? Find(this TestDataDB db, TestSchemaB @record)
		{
			return db.GetTable<TestSchemaB>().FirstOrDefault(e => e.TestSchemaBid.Equals(@record.TestSchemaBid));
		}

		public static Task<TestSchemaB?> FindAsync(this TestDataDB db, TestSchemaB @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSchemaB>().FirstOrDefaultAsync(e => e.TestSchemaBid.Equals(@record.TestSchemaBid), cancellationToken);
		}

		public static IQueryable<TestSchemaB> FindQuery(this TestDataDB db, TestSchemaB @record)
		{
			return db.GetTable<TestSchemaB>().Where(e => e.TestSchemaBid.Equals(@record.TestSchemaBid));
		}
		#endregion

		#region Stored Procedures
		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc(dataReader => new TestProcedureResult()
			{
				Column = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[TestSchema].[TestProcedure]", parameters).ToList();
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, LinqToDB.DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync(dataReader => new TestProcedureResult()
			{
				Column = Converter.ChangeTypeTo<SqlInt32>(dataReader.GetValue(0), dataConnection.MappingSchema)
			}, "[TestSchema].[TestProcedure]", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class TestProcedureResult
		{
			public SqlInt32 Column { get; set; }
		}

		public class TestProcedureResults
		{
			public IEnumerable<TestProcedureResult> Result { get; set; } = null!;
			public int                              Return { get; set; }
		}
		#endregion
		#endregion
	}
}
