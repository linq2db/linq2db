// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	[Table("DecimalOverflow")]
	public class DecimalOverflow : IEquatable<DecimalOverflow>
	{
		[Column("Decimal1", DataType = LinqToDB.DataType.Decimal, DbType = "decimal(38, 20)", Precision = 38, Scale = 20, IsPrimaryKey = true)] public SqlDecimal  Decimal1 { get; set; } // decimal(38, 20)
		[Column("Decimal2", DataType = LinqToDB.DataType.Decimal, DbType = "decimal(31, 2)" , Precision = 31, Scale = 2                      )] public SqlDecimal? Decimal2 { get; set; } // decimal(31, 2)
		[Column("Decimal3", DataType = LinqToDB.DataType.Decimal, DbType = "decimal(38, 36)", Precision = 38, Scale = 36                     )] public SqlDecimal? Decimal3 { get; set; } // decimal(38, 36)
		[Column("Decimal4", DataType = LinqToDB.DataType.Decimal, DbType = "decimal(29, 0)" , Precision = 29, Scale = 0                      )] public SqlDecimal? Decimal4 { get; set; } // decimal(29, 0)
		[Column("Decimal5", DataType = LinqToDB.DataType.Decimal, DbType = "decimal(38, 38)", Precision = 38, Scale = 38                     )] public SqlDecimal? Decimal5 { get; set; } // decimal(38, 38)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<DecimalOverflow> _equalityComparer = ComparerBuilder.GetEqualityComparer<DecimalOverflow>(c => c.Decimal1);

		public bool Equals(DecimalOverflow? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as DecimalOverflow);
		}
		#endregion
	}
}
