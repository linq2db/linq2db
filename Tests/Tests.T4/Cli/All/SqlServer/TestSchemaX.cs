// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServer
{
	[Table("TestSchemaX")]
	public class TestSchemaX : IEquatable<TestSchemaX>
	{
		[Column("TestSchemaXID", DataType = LinqToDB.DataType.Int32, DbType = "int", IsPrimaryKey = true)] public SqlInt32 TestSchemaXid { get; set; } // int
		[Column("Field1"       , DataType = LinqToDB.DataType.Int32, DbType = "int"                     )] public SqlInt32 Field1        { get; set; } // int

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestSchemaX> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestSchemaX>(c => c.TestSchemaXid);

		public bool Equals(TestSchemaX? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestSchemaX);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_TestSchemaY_OtherID backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid))]
		public IEnumerable<TestSchemaY> TestSchemaY { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.ParentTestSchemaXid))]
		public IEnumerable<TestSchemaY> TestSchemaY1 { get; set; } = null!;

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX backreference
		/// </summary>
		[Association(ThisKey = nameof(TestSchemaXid), OtherKey = nameof(SqlServer.TestSchemaY.TestSchemaXid))]
		public IEnumerable<TestSchemaY> TestSchemaY2 { get; set; } = null!;
		#endregion
	}
}
