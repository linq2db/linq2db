// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.PostgreSQL
{
	public partial class TestDataDB : DataConnection
	{
		static TestDataDB()
		{
			ContextSchema.SetConvertExpression<object?[], ExtensionMethods.TestFunctionParametersResult>(tuple => new ExtensionMethods.TestFunctionParametersResult()
			{
				Param2 = (int?)(tuple[0]),
				Param3 = (int?)(tuple[1])
			});
		}
		public static MappingSchema ContextSchema { get; } = new MappingSchema();

		public TestDataDB()
			: base(new DataOptions().UseMappingSchema(ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(new DataOptions().UseConfiguration(configuration, ContextSchema))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options.UseMappingSchema(options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options.UseMappingSchema(options.Options.ConnectionOptions.MappingSchema == null ? ContextSchema : MappingSchema.CombineSchemas(options.Options.ConnectionOptions.MappingSchema, ContextSchema)))
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Schemas
		public void InitSchemas()
		{
			TestSchema = new TestSchemaSchema.DataContext(this);
			SchemaName = new SchemaNameSchema.DataContext(this);
		}

		public TestSchemaSchema.DataContext TestSchema { get; set; } = null!;
		public SchemaNameSchema.DataContext SchemaName { get; set; } = null!;
		#endregion

		public ITable<AllType>                  AllTypes                  => this.GetTable<AllType>();
		public ITable<Child>                    Children                  => this.GetTable<Child>();
		public ITable<CollatedTable>            CollatedTables            => this.GetTable<CollatedTable>();
		public ITable<Doctor>                   Doctors                   => this.GetTable<Doctor>();
		public ITable<GrandChild>               GrandChildren             => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>         InheritanceChildren       => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent>        InheritanceParents        => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>             LinqDataTypes             => this.GetTable<LinqDataType>();
		public ITable<Parent>                   Parents                   => this.GetTable<Parent>();
		public ITable<Patient>                  Patients                  => this.GetTable<Patient>();
		/// <summary>
		/// This is the Person table
		/// </summary>
		public ITable<Person>                   People                    => this.GetTable<Person>();
		public ITable<SequenceCustomNamingTest> SequenceCustomNamingTests => this.GetTable<SequenceCustomNamingTest>();
		public ITable<SequenceTest1>            SequenceTest1             => this.GetTable<SequenceTest1>();
		public ITable<SequenceTest2>            SequenceTest2             => this.GetTable<SequenceTest2>();
		public ITable<SequenceTest3>            SequenceTest3             => this.GetTable<SequenceTest3>();
		public ITable<TestIdentity>             TestIdentities            => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>               TestMerge1                => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>               TestMerge2                => this.GetTable<TestMerge2>();
		public ITable<TestMergeIdentity>        TestMergeIdentities       => this.GetTable<TestMergeIdentity>();
		public ITable<Entity>                   Entities                  => this.GetTable<Entity>();
		public ITable<SameName>                 SameNames                 => this.GetTable<SameName>();
		public ITable<SameName1>                SameName1                 => this.GetTable<SameName1>();
		public ITable<SameName2>                SameName2                 => this.GetTable<SameName2>();
		public ITable<Testsamename>             Testsamenames             => this.GetTable<Testsamename>();
		/// <summary>
		/// This is the Issue2023 matview
		/// </summary>
		public ITable<Issue2023>                Issue2023                 => this.GetTable<Issue2023>();

		#region Table Functions
		#region GetParentById
		private static readonly MethodInfo _getParentById = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.GetParentById(default));

		[Sql.TableFunction("GetParentByID")]
		public IQueryable<GetParentByIdResult> GetParentById(int? id)
		{
			return this.GetTable<GetParentByIdResult>(this, _getParentById, id);
		}

		public partial class GetParentByIdResult
		{
			[Column("ParentID", DataType = DataType.Int32, DbType = "integer")] public int? ParentId { get; set; }
			[Column("Value1"  , DataType = DataType.Int32, DbType = "integer")] public int? Value1   { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TestTableFunction")]
		public IQueryable<TestTableFunctionResult> TestTableFunction(int? param1)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, param1);
		}

		public partial class TestTableFunctionResult
		{
			[Column("param2", DataType = DataType.Int32, DbType = "integer")] public int? Param2 { get; set; }
		}
		#endregion

		#region TestTableFunction1
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction1(default, default));

		[Sql.TableFunction("TestTableFunction1")]
		public IQueryable<TestTableFunction1Result> TestTableFunction1(int? param1, int? param2)
		{
			return this.GetTable<TestTableFunction1Result>(this, _testTableFunction1, param1, param2);
		}

		public partial class TestTableFunction1Result
		{
			[Column("param3", DataType = DataType.Int32, DbType = "integer")] public int? Param3 { get; set; }
			[Column("param4", DataType = DataType.Int32, DbType = "integer")] public int? Param4 { get; set; }
		}
		#endregion

		#region TestTableFunctionSchema
		private static readonly MethodInfo _testTableFunctionSchema = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunctionSchema());

		[Sql.TableFunction("TestTableFunctionSchema")]
		public IQueryable<TestTableFunctionSchemaResult> TestTableFunctionSchema()
		{
			return this.GetTable<TestTableFunctionSchemaResult>(this, _testTableFunctionSchema);
		}

		public partial class TestTableFunctionSchemaResult
		{
			[Column("ID"                 , DataType = DataType.Int32         , DbType = "integer"                        )] public int?              Id                  { get; set; }
			[Column("bigintDataType"     , DataType = DataType.Int64         , DbType = "bigint"                         )] public long?             BigintDataType      { get; set; }
			[Column("numericDataType"    , DataType = DataType.Decimal       , DbType = "numeric(0,0)"                   )] public decimal?          NumericDataType     { get; set; }
			[Column("smallintDataType"   , DataType = DataType.Int16         , DbType = "smallint"                       )] public short?            SmallintDataType    { get; set; }
			[Column("intDataType"        , DataType = DataType.Int32         , DbType = "integer"                        )] public int?              IntDataType         { get; set; }
			[Column("moneyDataType"      , DataType = DataType.Money         , DbType = "money"                          )] public decimal?          MoneyDataType       { get; set; }
			[Column("doubleDataType"     , DataType = DataType.Double        , DbType = "double precision"               )] public double?           DoubleDataType      { get; set; }
			[Column("realDataType"       , DataType = DataType.Single        , DbType = "real"                           )] public float?            RealDataType        { get; set; }
			[Column("timestampDataType"  , DataType = DataType.DateTime2     , DbType = "timestamp (0) without time zone")] public DateTime?         TimestampDataType   { get; set; }
			[Column("timestampTZDataType", DataType = DataType.DateTimeOffset, DbType = "timestamp (0) with time zone"   )] public DateTimeOffset?   TimestampTzDataType { get; set; }
			[Column("dateDataType"       , DataType = DataType.Date          , DbType = "date"                           )] public DateTime?         DateDataType        { get; set; }
			[Column("timeDataType"       , DataType = DataType.Time          , DbType = "time without time zone"         )] public TimeSpan?         TimeDataType        { get; set; }
			[Column("timeTZDataType"     , DataType = DataType.Time          , DbType = "time with time zone"            )] public DateTimeOffset?   TimeTzDataType      { get; set; }
			[Column("intervalDataType"   , DataType = DataType.Interval      , DbType = "interval(0)"                    )] public NpgsqlInterval?   IntervalDataType    { get; set; }
			[Column("intervalDataType2"  , DataType = DataType.Interval      , DbType = "interval(0)"                    )] public NpgsqlInterval?   IntervalDataType2   { get; set; }
			[Column("charDataType"       , DataType = DataType.NChar         , DbType = "character(1)"                   )] public char?             CharDataType        { get; set; }
			[Column("char20DataType"     , DataType = DataType.NChar         , DbType = "character(20)"                  )] public string?           Char20DataType      { get; set; }
			[Column("varcharDataType"    , DataType = DataType.NVarChar      , DbType = "character varying(20)"          )] public string?           VarcharDataType     { get; set; }
			[Column("textDataType"       , DataType = DataType.Text          , DbType = "text"                           )] public string?           TextDataType        { get; set; }
			[Column("binaryDataType"     , DataType = DataType.Binary        , DbType = "bytea"                          )] public byte[]?           BinaryDataType      { get; set; }
			[Column("uuidDataType"       , DataType = DataType.Guid          , DbType = "uuid"                           )] public Guid?             UuidDataType        { get; set; }
			[Column("bitDataType"        , DataType = DataType.BitArray      , DbType = "bit(3)"                         )] public BitArray?         BitDataType         { get; set; }
			[Column("booleanDataType"    , DataType = DataType.Boolean       , DbType = "boolean"                        )] public bool?             BooleanDataType     { get; set; }
			[Column("colorDataType"      , DbType   = "public.color"                                                     )] public string?           ColorDataType       { get; set; }
			[Column("pointDataType"      , DataType = DataType.Udt           , DbType = "point"                          )] public NpgsqlPoint?      PointDataType       { get; set; }
			[Column("lsegDataType"       , DataType = DataType.Udt           , DbType = "lseg"                           )] public NpgsqlLSeg?       LsegDataType        { get; set; }
			[Column("boxDataType"        , DataType = DataType.Udt           , DbType = "box"                            )] public NpgsqlBox?        BoxDataType         { get; set; }
			[Column("pathDataType"       , DataType = DataType.Udt           , DbType = "path"                           )] public NpgsqlPath?       PathDataType        { get; set; }
			[Column("polygonDataType"    , DataType = DataType.Udt           , DbType = "polygon"                        )] public NpgsqlPolygon?    PolygonDataType     { get; set; }
			[Column("circleDataType"     , DataType = DataType.Udt           , DbType = "circle"                         )] public NpgsqlCircle?     CircleDataType      { get; set; }
			[Column("lineDataType"       , DataType = DataType.Udt           , DbType = "line"                           )] public NpgsqlLine?       LineDataType        { get; set; }
			[Column("inetDataType"       , DataType = DataType.Udt           , DbType = "inet"                           )] public NpgsqlInet?       InetDataType        { get; set; }
			[Column("cidrDataType"       , DataType = DataType.Udt           , DbType = "cidr"                           )] public NpgsqlInet?       CidrDataType        { get; set; }
			[Column("macaddrDataType"    , DataType = DataType.Udt           , DbType = "macaddr"                        )] public PhysicalAddress?  MacaddrDataType     { get; set; }
			[Column("macaddr8DataType"   , DataType = DataType.Udt           , DbType = "macaddr8"                       )] public PhysicalAddress?  Macaddr8DataType    { get; set; }
			[Column("jsonDataType"       , DataType = DataType.Json          , DbType = "json"                           )] public string?           JsonDataType        { get; set; }
			[Column("jsonbDataType"      , DataType = DataType.BinaryJson    , DbType = "jsonb"                          )] public string?           JsonbDataType       { get; set; }
			[Column("xmlDataType"        , DataType = DataType.Xml           , DbType = "xml"                            )] public string?           XmlDataType         { get; set; }
			[Column("varBitDataType"     , DataType = DataType.BitArray      , DbType = "bit varying(-1)"                )] public BitArray?         VarBitDataType      { get; set; }
			[Column("strarray"           , DbType   = "text[]"                                                           )] public string[]?         Strarray            { get; set; }
			[Column("intarray"           , DbType   = "integer[]"                                                        )] public int[]?            Intarray            { get; set; }
			[Column("int2darray"         , DbType   = "integer[]"                                                        )] public int[]?            Int2Darray          { get; set; }
			[Column("longarray"          , DbType   = "bigint[]"                                                         )] public long[]?           Longarray           { get; set; }
			[Column("intervalarray"      , DbType   = "interval[]"                                                       )] public NpgsqlInterval[]? Intervalarray       { get; set; }
			[Column("doublearray"        , DbType   = "double precision[]"                                               )] public double[]?         Doublearray         { get; set; }
			[Column("numericarray"       , DbType   = "numeric[]"                                                        )] public decimal[]?        Numericarray        { get; set; }
			[Column("decimalarray"       , DbType   = "numeric[]"                                                        )] public decimal[]?        Decimalarray        { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllType? FindAllType(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().Where(e => e.Id == id);
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id == @record.Id);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Doctor? FindDoctor(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == @record.PersonId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Patient? FindPatient(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? FindPerson(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == personId);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == @record.PersonId);
		}

		public static SequenceCustomNamingTest? Find(this ITable<SequenceCustomNamingTest> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceCustomNamingTest?> FindAsync(this ITable<SequenceCustomNamingTest> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceCustomNamingTest> FindQuery(this ITable<SequenceCustomNamingTest> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SequenceCustomNamingTest? Find(this ITable<SequenceCustomNamingTest> table, SequenceCustomNamingTest @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceCustomNamingTest?> FindAsync(this ITable<SequenceCustomNamingTest> table, SequenceCustomNamingTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceCustomNamingTest> FindQuery(this ITable<SequenceCustomNamingTest> table, SequenceCustomNamingTest @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SequenceCustomNamingTest? FindSequenceCustomNamingTest(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceCustomNamingTest>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceCustomNamingTest?> FindSequenceCustomNamingTestAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceCustomNamingTest>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceCustomNamingTest> FindSequenceCustomNamingTestQuery(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceCustomNamingTest>().Where(e => e.Id == id);
		}

		public static SequenceCustomNamingTest? Find(this TestDataDB db, SequenceCustomNamingTest @record)
		{
			return db.GetTable<SequenceCustomNamingTest>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceCustomNamingTest?> FindAsync(this TestDataDB db, SequenceCustomNamingTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceCustomNamingTest>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceCustomNamingTest> FindQuery(this TestDataDB db, SequenceCustomNamingTest @record)
		{
			return db.GetTable<SequenceCustomNamingTest>().Where(e => e.Id == @record.Id);
		}

		public static SequenceTest1? Find(this ITable<SequenceTest1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest1?> FindAsync(this ITable<SequenceTest1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest1> FindQuery(this ITable<SequenceTest1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SequenceTest1? Find(this ITable<SequenceTest1> table, SequenceTest1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest1?> FindAsync(this ITable<SequenceTest1> table, SequenceTest1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest1> FindQuery(this ITable<SequenceTest1> table, SequenceTest1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SequenceTest1? FindSequenceTest1(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest1?> FindSequenceTest1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest1> FindSequenceTest1Query(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest1>().Where(e => e.Id == id);
		}

		public static SequenceTest1? Find(this TestDataDB db, SequenceTest1 @record)
		{
			return db.GetTable<SequenceTest1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest1?> FindAsync(this TestDataDB db, SequenceTest1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest1> FindQuery(this TestDataDB db, SequenceTest1 @record)
		{
			return db.GetTable<SequenceTest1>().Where(e => e.Id == @record.Id);
		}

		public static SequenceTest2? Find(this ITable<SequenceTest2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest2?> FindAsync(this ITable<SequenceTest2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest2> FindQuery(this ITable<SequenceTest2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SequenceTest2? Find(this ITable<SequenceTest2> table, SequenceTest2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest2?> FindAsync(this ITable<SequenceTest2> table, SequenceTest2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest2> FindQuery(this ITable<SequenceTest2> table, SequenceTest2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SequenceTest2? FindSequenceTest2(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest2?> FindSequenceTest2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest2> FindSequenceTest2Query(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest2>().Where(e => e.Id == id);
		}

		public static SequenceTest2? Find(this TestDataDB db, SequenceTest2 @record)
		{
			return db.GetTable<SequenceTest2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest2?> FindAsync(this TestDataDB db, SequenceTest2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest2> FindQuery(this TestDataDB db, SequenceTest2 @record)
		{
			return db.GetTable<SequenceTest2>().Where(e => e.Id == @record.Id);
		}

		public static SequenceTest3? Find(this ITable<SequenceTest3> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest3?> FindAsync(this ITable<SequenceTest3> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest3> FindQuery(this ITable<SequenceTest3> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SequenceTest3? Find(this ITable<SequenceTest3> table, SequenceTest3 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest3?> FindAsync(this ITable<SequenceTest3> table, SequenceTest3 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest3> FindQuery(this ITable<SequenceTest3> table, SequenceTest3 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SequenceTest3? FindSequenceTest3(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest3>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest3?> FindSequenceTest3Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest3>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest3> FindSequenceTest3Query(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest3>().Where(e => e.Id == id);
		}

		public static SequenceTest3? Find(this TestDataDB db, SequenceTest3 @record)
		{
			return db.GetTable<SequenceTest3>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest3?> FindAsync(this TestDataDB db, SequenceTest3 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest3>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest3> FindQuery(this TestDataDB db, SequenceTest3 @record)
		{
			return db.GetTable<SequenceTest3>().Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == @record.Id);
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMergeIdentity?> FindAsync(this ITable<TestMergeIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this ITable<TestMergeIdentity> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMergeIdentity? Find(this ITable<TestMergeIdentity> table, TestMergeIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMergeIdentity?> FindAsync(this ITable<TestMergeIdentity> table, TestMergeIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this ITable<TestMergeIdentity> table, TestMergeIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMergeIdentity? FindTestMergeIdentity(this TestDataDB db, int id)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMergeIdentity?> FindTestMergeIdentityAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindTestMergeIdentityQuery(this TestDataDB db, int id)
		{
			return db.GetTable<TestMergeIdentity>().Where(e => e.Id == id);
		}

		public static TestMergeIdentity? Find(this TestDataDB db, TestMergeIdentity @record)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMergeIdentity?> FindAsync(this TestDataDB db, TestMergeIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMergeIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMergeIdentity> FindQuery(this TestDataDB db, TestMergeIdentity @record)
		{
			return db.GetTable<TestMergeIdentity>().Where(e => e.Id == @record.Id);
		}

		public static SameName? Find(this ITable<SameName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName?> FindAsync(this ITable<SameName> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName> FindQuery(this ITable<SameName> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SameName? Find(this ITable<SameName> table, SameName @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName?> FindAsync(this ITable<SameName> table, SameName @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName> FindQuery(this ITable<SameName> table, SameName @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SameName? FindSameName(this TestDataDB db, int id)
		{
			return db.GetTable<SameName>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName?> FindSameNameAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName> FindSameNameQuery(this TestDataDB db, int id)
		{
			return db.GetTable<SameName>().Where(e => e.Id == id);
		}

		public static SameName? Find(this TestDataDB db, SameName @record)
		{
			return db.GetTable<SameName>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName?> FindAsync(this TestDataDB db, SameName @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName> FindQuery(this TestDataDB db, SameName @record)
		{
			return db.GetTable<SameName>().Where(e => e.Id == @record.Id);
		}

		public static SameName1? Find(this ITable<SameName1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName1?> FindAsync(this ITable<SameName1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName1> FindQuery(this ITable<SameName1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SameName1? Find(this ITable<SameName1> table, SameName1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName1?> FindAsync(this ITable<SameName1> table, SameName1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName1> FindQuery(this ITable<SameName1> table, SameName1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SameName1? FindSameName1(this TestDataDB db, int id)
		{
			return db.GetTable<SameName1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName1?> FindSameName1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName1> FindSameName1Query(this TestDataDB db, int id)
		{
			return db.GetTable<SameName1>().Where(e => e.Id == id);
		}

		public static SameName1? Find(this TestDataDB db, SameName1 @record)
		{
			return db.GetTable<SameName1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName1?> FindAsync(this TestDataDB db, SameName1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName1> FindQuery(this TestDataDB db, SameName1 @record)
		{
			return db.GetTable<SameName1>().Where(e => e.Id == @record.Id);
		}

		public static SameName2? Find(this ITable<SameName2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName2?> FindAsync(this ITable<SameName2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName2> FindQuery(this ITable<SameName2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SameName2? Find(this ITable<SameName2> table, SameName2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName2?> FindAsync(this ITable<SameName2> table, SameName2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName2> FindQuery(this ITable<SameName2> table, SameName2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SameName2? FindSameName2(this TestDataDB db, int id)
		{
			return db.GetTable<SameName2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SameName2?> FindSameName2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SameName2> FindSameName2Query(this TestDataDB db, int id)
		{
			return db.GetTable<SameName2>().Where(e => e.Id == id);
		}

		public static SameName2? Find(this TestDataDB db, SameName2 @record)
		{
			return db.GetTable<SameName2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SameName2?> FindAsync(this TestDataDB db, SameName2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SameName2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SameName2> FindQuery(this TestDataDB db, SameName2 @record)
		{
			return db.GetTable<SameName2>().Where(e => e.Id == @record.Id);
		}

		public static Testsamename? Find(this ITable<Testsamename> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testsamename?> FindAsync(this ITable<Testsamename> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testsamename> FindQuery(this ITable<Testsamename> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Testsamename? Find(this ITable<Testsamename> table, Testsamename @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testsamename?> FindAsync(this ITable<Testsamename> table, Testsamename @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testsamename> FindQuery(this ITable<Testsamename> table, Testsamename @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Testsamename? FindTestsamename(this TestDataDB db, int id)
		{
			return db.GetTable<Testsamename>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testsamename?> FindTestsamenameAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testsamename>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testsamename> FindTestsamenameQuery(this TestDataDB db, int id)
		{
			return db.GetTable<Testsamename>().Where(e => e.Id == id);
		}

		public static Testsamename? Find(this TestDataDB db, Testsamename @record)
		{
			return db.GetTable<Testsamename>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testsamename?> FindAsync(this TestDataDB db, Testsamename @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testsamename>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testsamename> FindQuery(this TestDataDB db, Testsamename @record)
		{
			return db.GetTable<Testsamename>().Where(e => e.Id == @record.Id);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// Doctor_PersonID_fkey
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PostgreSQL.Doctor.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person PersonIDfkey(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// Doctor_PersonID_fkey backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(PostgreSQL.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// Patient_PersonID_fkey backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(PostgreSQL.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// Patient_PersonID_fkey
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(PostgreSQL.Patient.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person PersonIDfkey(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region SameName1 Associations
		/// <summary>
		/// same_name
		/// </summary>
		[Association(ThisKey = nameof(SameName1.SameName), OtherKey = nameof(SameName.Id))]
		public static SameName? Samename(this SameName1 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion

		#region SameName Associations
		/// <summary>
		/// same_name backreference
		/// </summary>
		[Association(ThisKey = nameof(SameName.Id), OtherKey = nameof(SameName1.SameName))]
		public static IQueryable<SameName1> SameNames1(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName1>().Where(t => t.SameName == obj.Id);
		}

		/// <summary>
		/// same_name backreference
		/// </summary>
		[Association(ThisKey = nameof(SameName.Id), OtherKey = nameof(SameName2.SameName))]
		public static IQueryable<SameName2> SameNames2(this SameName obj, IDataContext db)
		{
			return db.GetTable<SameName2>().Where(t => t.SameName == obj.Id);
		}
		#endregion

		#region SameName2 Associations
		/// <summary>
		/// same_name
		/// </summary>
		[Association(ThisKey = nameof(SameName2.SameName), OtherKey = nameof(SameName.Id))]
		public static SameName? Samename(this SameName2 obj, IDataContext db)
		{
			return db.GetTable<SameName>().FirstOrDefault(t => obj.SameName == t.Id);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunctionParameters
		[Sql.Function("\"TestFunctionParameters\"", ServerSideOnly = true)]
		public static TestFunctionParametersResult? TestFunctionParameters(int? param1, int? param2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}

		public partial class TestFunctionParametersResult
		{
			public int? Param2 { get; set; }
			public int? Param3 { get; set; }
		}
		#endregion

		#region TestScalarFunction
		[Sql.Function("\"TestScalarFunction\"", ServerSideOnly = true)]
		public static string? TestScalarFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestSingleOutParameterFunction
		[Sql.Function("\"TestSingleOutParameterFunction\"", ServerSideOnly = true)]
		public static int? TestSingleOutParameterFunction(int? param1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region AddIfNotExists
		[Sql.Function("add_if_not_exists", ServerSideOnly = true)]
		public static object? AddIfNotExists(string? pName)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Addissue792Record
		[Sql.Function("addissue792record", ServerSideOnly = true)]
		public static object? Addissue792Record()
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Bool
		[Sql.Function("bool", ServerSideOnly = true)]
		public static string? Bool(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Date
		[Sql.Function("issue_1742_date", ServerSideOnly = true)]
		public static int? Issue1742Date(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Ts
		[Sql.Function("issue_1742_ts", ServerSideOnly = true)]
		public static int? Issue1742Ts(DateTime? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Issue1742Tstz
		[Sql.Function("issue_1742_tstz", ServerSideOnly = true)]
		public static int? Issue1742Tstz(DateTimeOffset? p1)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Reverse
		[Sql.Function("reverse", ServerSideOnly = true)]
		public static string? Reverse(string? par7)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion

		#region Aggregate Functions
		#region TestAvg
		[Sql.Function("test_avg", ServerSideOnly = true, IsAggregate = true, ArgIndices = new []{ 1 })]
		public static double? TestAvg<TSource>(this IEnumerable<TSource> src, Expression<Func<TSource, double?>> par9)
		{
			throw new InvalidOperationException("Association cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
