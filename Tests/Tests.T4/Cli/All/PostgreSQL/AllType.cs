// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using NpgsqlTypes;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Net.NetworkInformation;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.PostgreSQL
{
	[Table("AllTypes")]
	public class AllType : IEquatable<AllType>
	{
		[Column("ID"                 , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0, IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int               Id                  { get; set; } // integer
		[Column("bigintDataType"     , DataType = DataType.Int64         , DbType = "bigint"                         , Precision = 64, Scale = 0                                                                                  )] public long?             BigintDataType      { get; set; } // bigint
		[Column("numericDataType"    , DataType = DataType.Decimal       , DbType = "numeric"                                                                                                                                     )] public decimal?          NumericDataType     { get; set; } // numeric
		[Column("smallintDataType"   , DataType = DataType.Int16         , DbType = "smallint"                       , Precision = 16, Scale = 0                                                                                  )] public short?            SmallintDataType    { get; set; } // smallint
		[Column("intDataType"        , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                                                                                  )] public int?              IntDataType         { get; set; } // integer
		[Column("moneyDataType"      , DataType = DataType.Money         , DbType = "money"                                                                                                                                       )] public decimal?          MoneyDataType       { get; set; } // money
		[Column("doubleDataType"     , DataType = DataType.Double        , DbType = "double precision"               , Precision = 53                                                                                             )] public double?           DoubleDataType      { get; set; } // double precision
		[Column("realDataType"       , DataType = DataType.Single        , DbType = "real"                           , Precision = 24                                                                                             )] public float?            RealDataType        { get; set; } // real
		[Column("timestampDataType"  , DataType = DataType.DateTime2     , DbType = "timestamp (6) without time zone", Precision = 6                                                                                              )] public DateTime?         TimestampDataType   { get; set; } // timestamp (6) without time zone
		[Column("timestampTZDataType", DataType = DataType.DateTimeOffset, DbType = "timestamp (6) with time zone"   , Precision = 6                                                                                              )] public DateTimeOffset?   TimestampTzDataType { get; set; } // timestamp (6) with time zone
		[Column("dateDataType"       , DataType = DataType.Date          , DbType = "date"                           , Precision = 0                                                                                              )] public DateTime?         DateDataType        { get; set; } // date
		[Column("timeDataType"       , DataType = DataType.Time          , DbType = "time without time zone"         , Precision = 6                                                                                              )] public TimeSpan?         TimeDataType        { get; set; } // time without time zone
		[Column("timeTZDataType"     , DataType = DataType.Time          , DbType = "time with time zone"            , Precision = 6                                                                                              )] public DateTimeOffset?   TimeTzDataType      { get; set; } // time with time zone
		[Column("intervalDataType"   , DataType = DataType.Interval      , DbType = "interval(6)"                    , Precision = 6                                                                                              )] public NpgsqlInterval?   IntervalDataType    { get; set; } // interval(6)
		[Column("intervalDataType2"  , DataType = DataType.Interval      , DbType = "interval(6)"                    , Precision = 6                                                                                              )] public NpgsqlInterval?   IntervalDataType2   { get; set; } // interval(6)
		[Column("charDataType"       , DataType = DataType.NChar         , DbType = "character(1)"                   , Length    = 1                                                                                              )] public char?             CharDataType        { get; set; } // character(1)
		[Column("char20DataType"     , DataType = DataType.NChar         , DbType = "character(20)"                  , Length    = 20                                                                                             )] public string?           Char20DataType      { get; set; } // character(20)
		[Column("varcharDataType"    , DataType = DataType.NVarChar      , DbType = "character varying(20)"          , Length    = 20                                                                                             )] public string?           VarcharDataType     { get; set; } // character varying(20)
		[Column("textDataType"       , DataType = DataType.Text          , DbType = "text"                                                                                                                                        )] public string?           TextDataType        { get; set; } // text
		[Column("binaryDataType"     , DataType = DataType.Binary        , DbType = "bytea"                                                                                                                                       )] public byte[]?           BinaryDataType      { get; set; } // bytea
		[Column("uuidDataType"       , DataType = DataType.Guid          , DbType = "uuid"                                                                                                                                        )] public Guid?             UuidDataType        { get; set; } // uuid
		[Column("bitDataType"        , DataType = DataType.BitArray      , DbType = "bit(3)"                         , Length    = 3                                                                                              )] public BitArray?         BitDataType         { get; set; } // bit(3)
		[Column("booleanDataType"    , DataType = DataType.Boolean       , DbType = "boolean"                                                                                                                                     )] public bool?             BooleanDataType     { get; set; } // boolean
		[Column("colorDataType"      , DataType = DataType.Enum          , DbType = "color"                                                                                                                                       )] public string?           ColorDataType       { get; set; } // color
		[Column("pointDataType"      , DataType = DataType.Udt           , DbType = "point"                                                                                                                                       )] public NpgsqlPoint?      PointDataType       { get; set; } // point
		[Column("lsegDataType"       , DataType = DataType.Udt           , DbType = "lseg"                                                                                                                                        )] public NpgsqlLSeg?       LsegDataType        { get; set; } // lseg
		[Column("boxDataType"        , DataType = DataType.Udt           , DbType = "box"                                                                                                                                         )] public NpgsqlBox?        BoxDataType         { get; set; } // box
		[Column("pathDataType"       , DataType = DataType.Udt           , DbType = "path"                                                                                                                                        )] public NpgsqlPath?       PathDataType        { get; set; } // path
		[Column("polygonDataType"    , DataType = DataType.Udt           , DbType = "polygon"                                                                                                                                     )] public NpgsqlPolygon?    PolygonDataType     { get; set; } // polygon
		[Column("circleDataType"     , DataType = DataType.Udt           , DbType = "circle"                                                                                                                                      )] public NpgsqlCircle?     CircleDataType      { get; set; } // circle
		[Column("lineDataType"       , DataType = DataType.Udt           , DbType = "line"                                                                                                                                        )] public NpgsqlLine?       LineDataType        { get; set; } // line
		[Column("inetDataType"       , DataType = DataType.Udt           , DbType = "inet"                                                                                                                                        )] public NpgsqlInet?       InetDataType        { get; set; } // inet
		[Column("cidrDataType"       , DataType = DataType.Udt           , DbType = "cidr"                                                                                                                                        )] public NpgsqlInet?       CidrDataType        { get; set; } // cidr
		[Column("macaddrDataType"    , DataType = DataType.Udt           , DbType = "macaddr"                                                                                                                                     )] public PhysicalAddress?  MacaddrDataType     { get; set; } // macaddr
		[Column("macaddr8DataType"   , DataType = DataType.Udt           , DbType = "macaddr8"                                                                                                                                    )] public PhysicalAddress?  Macaddr8DataType    { get; set; } // macaddr8
		[Column("jsonDataType"       , DataType = DataType.Json          , DbType = "json"                                                                                                                                        )] public string?           JsonDataType        { get; set; } // json
		[Column("jsonbDataType"      , DataType = DataType.BinaryJson    , DbType = "jsonb"                                                                                                                                       )] public string?           JsonbDataType       { get; set; } // jsonb
		[Column("xmlDataType"        , DataType = DataType.Xml           , DbType = "xml"                                                                                                                                         )] public string?           XmlDataType         { get; set; } // xml
		[Column("varBitDataType"     , DataType = DataType.BitArray      , DbType = "bit varying"                                                                                                                                 )] public BitArray?         VarBitDataType      { get; set; } // bit varying
		[Column("strarray"           , DbType   = "text[]"                                                                                                                                                                        )] public string[]?         Strarray            { get; set; } // text[]
		[Column("intarray"           , DbType   = "integer[]"                                                                                                                                                                     )] public int[]?            Intarray            { get; set; } // integer[]
		[Column("int2darray"         , DbType   = "integer[][]"                                                                                                                                                                   )] public int[][]?          Int2Darray          { get; set; } // integer[][]
		[Column("longarray"          , DbType   = "bigint[]"                                                                                                                                                                      )] public long[]?           Longarray           { get; set; } // bigint[]
		[Column("intervalarray"      , DbType   = "interval[]"                                                                                                                                                                    )] public NpgsqlInterval[]? Intervalarray       { get; set; } // interval[]
		[Column("doublearray"        , DbType   = "double precision[]"                                                                                                                                                            )] public double[]?         Doublearray         { get; set; } // double precision[]
		[Column("numericarray"       , DbType   = "numeric[]"                                                                                                                                                                     )] public decimal[]?        Numericarray        { get; set; } // numeric[]
		[Column("decimalarray"       , DbType   = "numeric[]"                                                                                                                                                                     )] public decimal[]?        Decimalarray        { get; set; } // numeric[]

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllType> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllType>(c => c.Id);

		public bool Equals(AllType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllType);
		}
		#endregion
	}
}
