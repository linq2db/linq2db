// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.PostgreSQL
{
	[Table("TestMerge1")]
	public class TestMerge1 : IEquatable<TestMerge1>
	{
		[Column("Id"             , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0 , IsPrimaryKey = true)] public int             Id              { get; set; } // integer
		[Column("Field1"         , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            Field1          { get; set; } // integer
		[Column("Field2"         , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            Field2          { get; set; } // integer
		[Column("Field3"         , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            Field3          { get; set; } // integer
		[Column("Field4"         , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            Field4          { get; set; } // integer
		[Column("Field5"         , DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            Field5          { get; set; } // integer
		[Column("FieldInt64"     , DataType = DataType.Int64         , DbType = "bigint"                         , Precision = 64, Scale = 0                      )] public long?           FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"   , DataType = DataType.Boolean       , DbType = "boolean"                                                                         )] public bool?           FieldBoolean    { get; set; } // boolean
		[Column("FieldString"    , DataType = DataType.NVarChar      , DbType = "character varying(20)"          , Length    = 20                                 )] public string?         FieldString     { get; set; } // character varying(20)
		[Column("FieldNString"   , DataType = DataType.NVarChar      , DbType = "character varying(20)"          , Length    = 20                                 )] public string?         FieldNString    { get; set; } // character varying(20)
		[Column("FieldChar"      , DataType = DataType.NChar         , DbType = "character(1)"                   , Length    = 1                                  )] public char?           FieldChar       { get; set; } // character(1)
		[Column("FieldNChar"     , DataType = DataType.NChar         , DbType = "character(1)"                   , Length    = 1                                  )] public char?           FieldNChar      { get; set; } // character(1)
		[Column("FieldFloat"     , DataType = DataType.Single        , DbType = "real"                           , Precision = 24                                 )] public float?          FieldFloat      { get; set; } // real
		[Column("FieldDouble"    , DataType = DataType.Double        , DbType = "double precision"               , Precision = 53                                 )] public double?         FieldDouble     { get; set; } // double precision
		[Column("FieldDateTime"  , DataType = DataType.DateTime2     , DbType = "timestamp (6) without time zone", Precision = 6                                  )] public DateTime?       FieldDateTime   { get; set; } // timestamp (6) without time zone
		[Column("FieldDateTime2" , DataType = DataType.DateTimeOffset, DbType = "timestamp (6) with time zone"   , Precision = 6                                  )] public DateTimeOffset? FieldDateTime2  { get; set; } // timestamp (6) with time zone
		[Column("FieldBinary"    , DataType = DataType.Binary        , DbType = "bytea"                                                                           )] public byte[]?         FieldBinary     { get; set; } // bytea
		[Column("FieldGuid"      , DataType = DataType.Guid          , DbType = "uuid"                                                                            )] public Guid?           FieldGuid       { get; set; } // uuid
		[Column("FieldDecimal"   , DataType = DataType.Decimal       , DbType = "numeric(24,10)"                 , Precision = 24, Scale = 10                     )] public decimal?        FieldDecimal    { get; set; } // numeric(24,10)
		[Column("FieldDate"      , DataType = DataType.Date          , DbType = "date"                           , Precision = 0                                  )] public DateTime?       FieldDate       { get; set; } // date
		[Column("FieldTime"      , DataType = DataType.Time          , DbType = "time(6) without time zone"      , Precision = 6                                  )] public TimeSpan?       FieldTime       { get; set; } // time(6) without time zone
		[Column("FieldEnumString", DataType = DataType.NVarChar      , DbType = "character varying(20)"          , Length    = 20                                 )] public string?         FieldEnumString { get; set; } // character varying(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32         , DbType = "integer"                        , Precision = 32, Scale = 0                      )] public int?            FieldEnumNumber { get; set; } // integer

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestMerge1> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestMerge1>(c => c.Id);

		public bool Equals(TestMerge1? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestMerge1);
		}
		#endregion
	}
}
