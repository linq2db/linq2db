// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.ClickHouse.Octonica
{
	[Table("LinqDataTypes")]
	public class LinqDataType : IEquatable<LinqDataType>
	{
		[Column("ID"            , DataType = DataType.Int32     , DbType = "Int32"         , IsPrimaryKey = true, SkipOnUpdate = true)] public int             Id             { get; set; } // Int32
		[Column("MoneyValue"    , DataType = DataType.Decimal64 , DbType = "Decimal(18, 4)", Precision    = 18  , Scale        = 4   )] public decimal?        MoneyValue     { get; set; } // Decimal(18, 4)
		[Column("DateTimeValue" , DataType = DataType.DateTime64, DbType = "DateTime64(3)" , Precision    = 3                        )] public DateTimeOffset? DateTimeValue  { get; set; } // DateTime64(3)
		[Column("DateTimeValue2", DataType = DataType.DateTime64, DbType = "DateTime64(7)" , Precision    = 7                        )] public DateTimeOffset? DateTimeValue2 { get; set; } // DateTime64(7)
		[Column("BoolValue"     , DataType = DataType.Byte      , DbType = "UInt8"                                                   )] public byte?           BoolValue      { get; set; } // UInt8
		[Column("GuidValue"     , DataType = DataType.Guid      , DbType = "UUID"                                                    )] public Guid?           GuidValue      { get; set; } // UUID
		[Column("BinaryValue"   , DataType = DataType.NVarChar  , DbType = "String"                                                  )] public string?         BinaryValue    { get; set; } // String
		[Column("SmallIntValue" , DataType = DataType.Int16     , DbType = "Int16"                                                   )] public short?          SmallIntValue  { get; set; } // Int16
		[Column("IntValue"      , DataType = DataType.Int32     , DbType = "Int32"                                                   )] public int?            IntValue       { get; set; } // Int32
		[Column("BigIntValue"   , DataType = DataType.Int64     , DbType = "Int64"                                                   )] public long?           BigIntValue    { get; set; } // Int64
		[Column("StringValue"   , DataType = DataType.NVarChar  , DbType = "String"                                                  )] public string?         StringValue    { get; set; } // String

		#region IEquatable<T> support
		private static readonly IEqualityComparer<LinqDataType> _equalityComparer = ComparerBuilder.GetEqualityComparer<LinqDataType>(c => c.Id);

		public bool Equals(LinqDataType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as LinqDataType);
		}
		#endregion
	}
}
