// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SapHana
{
	[Table("IndexTable")]
	public class IndexTable : IEquatable<IndexTable>
	{
		[Column("PKField1"   , DataType = DataType.Int32, DbType = "INTEGER", Length = 10, Precision = 10, Scale = 0, IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int PkField1    { get; set; } // INTEGER
		[Column("PKField2"   , DataType = DataType.Int32, DbType = "INTEGER", Length = 10, Precision = 10, Scale = 0, IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int PkField2    { get; set; } // INTEGER
		[Column("UniqueField", DataType = DataType.Int32, DbType = "INTEGER", Length = 10, Precision = 10, Scale = 0                                          )] public int UniqueField { get; set; } // INTEGER
		[Column("IndexField" , DataType = DataType.Int32, DbType = "INTEGER", Length = 10, Precision = 10, Scale = 0                                          )] public int IndexField  { get; set; } // INTEGER

		#region IEquatable<T> support
		private static readonly IEqualityComparer<IndexTable> _equalityComparer = ComparerBuilder.GetEqualityComparer<IndexTable>(c => c.PkField1, c => c.PkField2);

		public bool Equals(IndexTable? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as IndexTable);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Patient2_IndexTable backreference
		/// </summary>
		[Association(ThisKey = nameof(PkField1) + "," + nameof(PkField2), OtherKey = nameof(SapHana.IndexTable2.PkField1) + "," + nameof(SapHana.IndexTable2.PkField2))]
		public IndexTable2? IndexTable2 { get; set; }
		#endregion
	}
}
