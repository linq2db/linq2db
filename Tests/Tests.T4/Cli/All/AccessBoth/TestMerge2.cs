// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Access.Both
{
	[Table("TestMerge2")]
	public class TestMerge2 : IEquatable<TestMerge2>
	{
		[Column("Id"             , DataType = DataType.Int32    , DbType = "Long"           , IsPrimaryKey = true            )] public int       Id              { get; set; } // Long
		[Column("Field1"         , DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      Field1          { get; set; } // Long
		[Column("Field2"         , DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      Field2          { get; set; } // Long
		[Column("Field3"         , DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      Field3          { get; set; } // Long
		[Column("Field4"         , DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      Field4          { get; set; } // Long
		[Column("Field5"         , DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      Field5          { get; set; } // Long
		[Column("FieldBoolean"   , DataType = DataType.Boolean  , DbType = "Bit"                                             )] public bool      FieldBoolean    { get; set; } // Bit
		[Column("FieldString"    , DataType = DataType.VarChar  , DbType = "VarChar(20)"    , Length       = 20              )] public string?   FieldString     { get; set; } // VarChar(20)
		[Column("FieldNString"   , DataType = DataType.VarChar  , DbType = "VarChar(20)"    , Length       = 20              )] public string?   FieldNString    { get; set; } // VarChar(20)
		[Column("FieldChar"      , DataType = DataType.Char     , DbType = "CHAR(1)"        , Length       = 1               )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     , DataType = DataType.Char     , DbType = "CHAR(1)"        , Length       = 1               )] public char?     FieldNChar      { get; set; } // CHAR(1)
		[Column("FieldFloat"     , DataType = DataType.Single   , DbType = "Single"                                          )] public float?    FieldFloat      { get; set; } // Single
		[Column("FieldDouble"    , DataType = DataType.Double   , DbType = "Double"                                          )] public double?   FieldDouble     { get; set; } // Double
		[Column("FieldDateTime"  , DataType = DataType.DateTime , DbType = "DateTime"                                        )] public DateTime? FieldDateTime   { get; set; } // DateTime
		[Column("FieldBinary"    , DataType = DataType.VarBinary, DbType = "VARBINARY(20)"  , Length       = 20              )] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"      , DataType = DataType.Guid     , DbType = "GUID"                                            )] public Guid?     FieldGuid       { get; set; } // GUID
		[Column("FieldDecimal"   , DataType = DataType.Decimal  , DbType = "Decimal(24, 10)", Precision    = 24  , Scale = 10)] public decimal?  FieldDecimal    { get; set; } // Decimal(24, 10)
		[Column("FieldDate"      , DataType = DataType.DateTime , DbType = "DateTime"                                        )] public DateTime? FieldDate       { get; set; } // DateTime
		[Column("FieldTime"      , DataType = DataType.DateTime , DbType = "DateTime"                                        )] public DateTime? FieldTime       { get; set; } // DateTime
		[Column("FieldEnumString", DataType = DataType.VarChar  , DbType = "VarChar(20)"    , Length       = 20              )] public string?   FieldEnumString { get; set; } // VarChar(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32    , DbType = "Long"                                            )] public int?      FieldEnumNumber { get; set; } // Long

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestMerge2> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestMerge2>(c => c.Id);

		public bool Equals(TestMerge2? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestMerge2);
		}
		#endregion
	}
}
