// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Access.Both
{
	[Table("DataTypeTest")]
	public class DataTypeTest : IEquatable<DataTypeTest>
	{
		[Column("DataTypeID", DataType = DataType.Int32   , DbType = "COUNTER"    , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       DataTypeId { get; set; } // COUNTER
		[Column("Binary_"   , DataType = DataType.Image   , DbType = "LongBinary"                                                                                   )] public byte[]?   Binary     { get; set; } // LongBinary
		[Column("Boolean_"  , DataType = DataType.Int32   , DbType = "Long"                                                                                         )] public int?      Boolean    { get; set; } // Long
		[Column("Byte_"     , DataType = DataType.Byte    , DbType = "Byte"                                                                                         )] public byte?     Byte       { get; set; } // Byte
		[Column("Bytes_"    , DataType = DataType.Image   , DbType = "LongBinary"                                                                                   )] public byte[]?   Bytes      { get; set; } // LongBinary
		[Column("Char_"     , DataType = DataType.VarChar , DbType = "VarChar(1)" , Length       = 1                                                                )] public char?     Char       { get; set; } // VarChar(1)
		[Column("DateTime_" , DataType = DataType.DateTime, DbType = "DateTime"                                                                                     )] public DateTime? DateTime   { get; set; } // DateTime
		[Column("Decimal_"  , DataType = DataType.Money   , DbType = "Currency"                                                                                     )] public decimal?  Decimal    { get; set; } // Currency
		[Column("Double_"   , DataType = DataType.Double  , DbType = "Double"                                                                                       )] public double?   Double     { get; set; } // Double
		[Column("Guid_"     , DataType = DataType.Guid    , DbType = "GUID"                                                                                         )] public Guid?     Guid       { get; set; } // GUID
		[Column("Int16_"    , DataType = DataType.Int16   , DbType = "Short"                                                                                        )] public short?    Int16      { get; set; } // Short
		[Column("Int32_"    , DataType = DataType.Int32   , DbType = "Long"                                                                                         )] public int?      Int32      { get; set; } // Long
		[Column("Int64_"    , DataType = DataType.Int32   , DbType = "Long"                                                                                         )] public int?      Int64      { get; set; } // Long
		[Column("Money_"    , DataType = DataType.Money   , DbType = "Currency"                                                                                     )] public decimal?  Money      { get; set; } // Currency
		[Column("SByte_"    , DataType = DataType.Byte    , DbType = "Byte"                                                                                         )] public byte?     SByte      { get; set; } // Byte
		[Column("Single_"   , DataType = DataType.Single  , DbType = "Single"                                                                                       )] public float?    Single     { get; set; } // Single
		[Column("Stream_"   , DataType = DataType.Image   , DbType = "LongBinary"                                                                                   )] public byte[]?   Stream     { get; set; } // LongBinary
		[Column("String_"   , DataType = DataType.VarChar , DbType = "VarChar(50)", Length       = 50                                                               )] public string?   String     { get; set; } // VarChar(50)
		[Column("UInt16_"   , DataType = DataType.Int16   , DbType = "Short"                                                                                        )] public short?    UInt16     { get; set; } // Short
		[Column("UInt32_"   , DataType = DataType.Int32   , DbType = "Long"                                                                                         )] public int?      UInt32     { get; set; } // Long
		[Column("UInt64_"   , DataType = DataType.Int32   , DbType = "Long"                                                                                         )] public int?      UInt64     { get; set; } // Long
		[Column("Xml_"      , DataType = DataType.NText   , DbType = "LongText"                                                                                     )] public string?   Xml        { get; set; } // LongText

		#region IEquatable<T> support
		private static readonly IEqualityComparer<DataTypeTest> _equalityComparer = ComparerBuilder.GetEqualityComparer<DataTypeTest>(c => c.DataTypeId);

		public bool Equals(DataTypeTest? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as DataTypeTest);
		}
		#endregion
	}
}
