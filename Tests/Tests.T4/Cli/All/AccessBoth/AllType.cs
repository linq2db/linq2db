// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Access.Both
{
	[Table("AllTypes")]
	public class AllType
	{
		[Column("ID"                      , DataType = DataType.Int32    , DbType = "COUNTER"       , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       Id                       { get; set; } // COUNTER
		[Column("bitDataType"             , DataType = DataType.Boolean  , DbType = "Bit"                                                                        )] public bool      BitDataType              { get; set; } // Bit
		[Column("smallintDataType"        , DataType = DataType.Int16    , DbType = "Short"                                                                      )] public short?    SmallintDataType         { get; set; } // Short
		[Column("decimalDataType"         , DataType = DataType.Decimal  , DbType = "Decimal(18, 0)", Precision  = 18  , Scale        = 0                        )] public decimal?  DecimalDataType          { get; set; } // Decimal(18, 0)
		[Column("intDataType"             , DataType = DataType.Int32    , DbType = "Long"                                                                       )] public int?      IntDataType              { get; set; } // Long
		[Column("tinyintDataType"         , DataType = DataType.Byte     , DbType = "Byte"                                                                       )] public byte?     TinyintDataType          { get; set; } // Byte
		[Column("moneyDataType"           , DataType = DataType.Money    , DbType = "Currency"                                                                   )] public decimal?  MoneyDataType            { get; set; } // Currency
		[Column("floatDataType"           , DataType = DataType.Double   , DbType = "Double"                                                                     )] public double?   FloatDataType            { get; set; } // Double
		[Column("realDataType"            , DataType = DataType.Single   , DbType = "Single"                                                                     )] public float?    RealDataType             { get; set; } // Single
		[Column("datetimeDataType"        , DataType = DataType.DateTime , DbType = "DateTime"                                                                   )] public DateTime? DatetimeDataType         { get; set; } // DateTime
		[Column("charDataType"            , DataType = DataType.Char     , DbType = "CHAR(1)"       , Length     = 1                                             )] public char?     CharDataType             { get; set; } // CHAR(1)
		[Column("char20DataType"          , DataType = DataType.Char     , DbType = "CHAR(20)"      , Length     = 20                                            )] public string?   Char20DataType           { get; set; } // CHAR(20)
		[Column("varcharDataType"         , DataType = DataType.VarChar  , DbType = "VarChar(20)"   , Length     = 20                                            )] public string?   VarcharDataType          { get; set; } // VarChar(20)
		[Column("textDataType"            , DataType = DataType.NText    , DbType = "LongText"                                                                   )] public string?   TextDataType             { get; set; } // LongText
		[Column("ncharDataType"           , DataType = DataType.Char     , DbType = "CHAR(20)"      , Length     = 20                                            )] public string?   NcharDataType            { get; set; } // CHAR(20)
		[Column("nvarcharDataType"        , DataType = DataType.VarChar  , DbType = "VarChar(20)"   , Length     = 20                                            )] public string?   NvarcharDataType         { get; set; } // VarChar(20)
		[Column("ntextDataType"           , DataType = DataType.NText    , DbType = "LongText"                                                                   )] public string?   NtextDataType            { get; set; } // LongText
		[Column("binaryDataType"          , DataType = DataType.VarBinary, DbType = "VARBINARY(10)" , Length     = 10                                            )] public byte[]?   BinaryDataType           { get; set; } // VARBINARY(10)
		[Column("varbinaryDataType"       , DataType = DataType.VarBinary, DbType = "VARBINARY(510)", Length     = 510                                           )] public byte[]?   VarbinaryDataType        { get; set; } // VARBINARY(510)
		[Column("imageDataType"           , DataType = DataType.Image    , DbType = "LongBinary"                                                                 )] public byte[]?   ImageDataType            { get; set; } // LongBinary
		[Column("oleObjectDataType"       , DataType = DataType.Image    , DbType = "LongBinary"                                                                 )] public byte[]?   OleObjectDataType        { get; set; } // LongBinary
		[Column("uniqueidentifierDataType", DataType = DataType.Guid     , DbType = "GUID"                                                                       )] public Guid?     UniqueidentifierDataType { get; set; } // GUID
	}
}
