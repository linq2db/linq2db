// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Sybase
{
	[Table("LinqDataTypes")]
	public class LinqDataType
	{
		[Column("ID"            , DataType = DataType.Int32   , DbType = "int"           , Length = 4                             )] public int       Id             { get; set; } // int
		[Column("MoneyValue"    , DataType = DataType.Decimal , DbType = "decimal(10, 4)", Length = 6  , Precision = 10, Scale = 4)] public decimal?  MoneyValue     { get; set; } // decimal(10, 4)
		[Column("DateTimeValue" , DataType = DataType.DateTime, DbType = "datetime"      , Length = 8                             )] public DateTime? DateTimeValue  { get; set; } // datetime
		[Column("DateTimeValue2", DataType = DataType.DateTime, DbType = "datetime"      , Length = 8                             )] public DateTime? DateTimeValue2 { get; set; } // datetime
		[Column("BoolValue"     , DataType = DataType.Boolean , DbType = "bit"           , Length = 1                             )] public bool      BoolValue      { get; set; } // bit
		[Column("GuidValue"     , DataType = DataType.Char    , DbType = "char(36)"      , Length = 36                            )] public string?   GuidValue      { get; set; } // char(36)
		[Column("BinaryValue"   , DataType = DataType.Binary  , DbType = "binary(500)"   , Length = 500                           )] public byte[]?   BinaryValue    { get; set; } // binary(500)
		[Column("SmallIntValue" , DataType = DataType.Int16   , DbType = "smallint"      , Length = 2                             )] public short?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"      , DataType = DataType.Int32   , DbType = "int"           , Length = 4                             )] public int?      IntValue       { get; set; } // int
		[Column("BigIntValue"   , DataType = DataType.Int64   , DbType = "bigint"        , Length = 8                             )] public long?     BigIntValue    { get; set; } // bigint
		[Column("StringValue"   , DataType = DataType.NVarChar, DbType = "nvarchar(50)"  , Length = 50                            )] public string?   StringValue    { get; set; } // nvarchar(50)
	}
}
