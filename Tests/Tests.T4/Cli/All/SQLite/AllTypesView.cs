// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLite
{
	[Table("AllTypesView", IsView = true)]
	public class AllTypesView
	{
		[Column("ID"                      , DataType = DataType.Int64    , DbType = "INTEGER"         , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id                       { get; set; } // INTEGER
		[Column("bigintDataType"          , DataType = DataType.Int64    , DbType = "bigint"                                                                       )] public long?     BigintDataType           { get; set; } // bigint
		[Column("numericDataType"         , DataType = DataType.Decimal  , DbType = "numeric"                                                                      )] public decimal?  NumericDataType          { get; set; } // numeric
		[Column("bitDataType"             , DataType = DataType.Boolean  , DbType = "bit"                                                                          )] public bool?     BitDataType              { get; set; } // bit
		[Column("smallintDataType"        , DataType = DataType.Int16    , DbType = "smallint"                                                                     )] public short?    SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType"         , DataType = DataType.Decimal  , DbType = "decimal"                                                                      )] public decimal?  DecimalDataType          { get; set; } // decimal
		[Column("intDataType"             , DataType = DataType.Int32    , DbType = "INT"                                                                          )] public int?      IntDataType              { get; set; } // INT
		[Column("tinyintDataType"         , DataType = DataType.Byte     , DbType = "tinyint"                                                                      )] public byte?     TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType"           , DataType = DataType.Decimal  , DbType = "money"                                                                        )] public decimal?  MoneyDataType            { get; set; } // money
		[Column("floatDataType"           , DataType = DataType.Double   , DbType = "float"                                                                        )] public double?   FloatDataType            { get; set; } // float
		[Column("realDataType"            , DataType = DataType.Double   , DbType = "REAL"                                                                         )] public double?   RealDataType             { get; set; } // REAL
		[Column("datetimeDataType"        , DataType = DataType.DateTime2, DbType = "datetime"                                                                     )] public DateTime? DatetimeDataType         { get; set; } // datetime
		[Column("charDataType"            , DataType = DataType.NVarChar , DbType = "char(1)"         , Length     = 1                                             )] public char?     CharDataType             { get; set; } // char(1)
		[Column("char20DataType"          , DataType = DataType.NVarChar , DbType = "char(20)"        , Length     = 20                                            )] public string?   Char20DataType           { get; set; } // char(20)
		[Column("varcharDataType"         , DataType = DataType.NVarChar , DbType = "varchar(20)"     , Length     = 20                                            )] public string?   VarcharDataType          { get; set; } // varchar(20)
		[Column("textDataType"            , DataType = DataType.NVarChar , DbType = "TEXT"                                                                         )] public string?   TextDataType             { get; set; } // TEXT
		[Column("ncharDataType"           , DataType = DataType.NVarChar , DbType = "nchar(20)"       , Length     = 20                                            )] public string?   NcharDataType            { get; set; } // nchar(20)
		[Column("nvarcharDataType"        , DataType = DataType.NVarChar , DbType = "nvarchar(20)"    , Length     = 20                                            )] public string?   NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType"           , DataType = DataType.NVarChar , DbType = "ntext"                                                                        )] public string?   NtextDataType            { get; set; } // ntext
		[Column("binaryDataType"          , DataType = DataType.VarBinary, DbType = "binary"                                                                       )] public byte[]?   BinaryDataType           { get; set; } // binary
		[Column("varbinaryDataType"       , DataType = DataType.VarBinary, DbType = "varbinary"                                                                    )] public byte[]?   VarbinaryDataType        { get; set; } // varbinary
		[Column("imageDataType"           , DataType = DataType.VarBinary, DbType = "image"                                                                        )] public byte[]?   ImageDataType            { get; set; } // image
		[Column("uniqueidentifierDataType", DataType = DataType.Guid     , DbType = "uniqueidentifier"                                                             )] public Guid?     UniqueidentifierDataType { get; set; } // uniqueidentifier
		[Column("objectDataType"          , DataType = DataType.Variant  , DbType = "Object"                                                                       )] public object?   ObjectDataType           { get; set; } // Object
		[Column("Number"                  , DataType = DataType.Int64    , DbType = "INTEGER"                                                                      )] public long?     Number                   { get; set; } // INTEGER
	}
}
