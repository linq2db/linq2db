// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLite
{
	[Table("AllTypes")]
	public class AllType : IEquatable<AllType>
	{
		[Column("ID"                      , DataType = DataType.Int64    , DbType = "integer"         , Length = 8         , Precision = 19, Scale = 0, IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public long      Id                       { get; set; } // integer
		[Column("bigintDataType"          , DataType = DataType.Int64    , DbType = "bigint"          , Length = 8         , Precision = 19, Scale = 0                                                                                  )] public long?     BigintDataType           { get; set; } // bigint
		[Column("numericDataType"         , DataType = DataType.Decimal  , DbType = "numeric"         , Length = 8         , Precision = 53, Scale = 0                                                                                  )] public decimal?  NumericDataType          { get; set; } // numeric
		[Column("bitDataType"             , DataType = DataType.Boolean  , DbType = "bit"             , Length = 1         , Precision = 0 , Scale = 0                                                                                  )] public bool?     BitDataType              { get; set; } // bit
		[Column("smallintDataType"        , DataType = DataType.Int16    , DbType = "smallint"        , Length = 2         , Precision = 5 , Scale = 0                                                                                  )] public short?    SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType"         , DataType = DataType.Decimal  , DbType = "decimal"         , Length = 8         , Precision = 53, Scale = 0                                                                                  )] public decimal?  DecimalDataType          { get; set; } // decimal
		[Column("intDataType"             , DataType = DataType.Int32    , DbType = "int"             , Length = 4         , Precision = 10, Scale = 0                                                                                  )] public int?      IntDataType              { get; set; } // int
		[Column("tinyintDataType"         , DataType = DataType.Byte     , DbType = "tinyint"         , Length = 1         , Precision = 3 , Scale = 0                                                                                  )] public byte?     TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType"           , DataType = DataType.Money    , DbType = "money"           , Length = 8         , Precision = 53, Scale = 0                                                                                  )] public decimal?  MoneyDataType            { get; set; } // money
		[Column("floatDataType"           , DataType = DataType.Double   , DbType = "float"           , Length = 8         , Precision = 53, Scale = 0                                                                                  )] public double?   FloatDataType            { get; set; } // float
		[Column("realDataType"            , DataType = DataType.Single   , DbType = "real"            , Length = 8         , Precision = 53, Scale = 0                                                                                  )] public double?   RealDataType             { get; set; } // real
		[Column("datetimeDataType"        , DataType = DataType.DateTime , DbType = "datetime"        , Length = 8         , Precision = 0 , Scale = 0                                                                                  )] public DateTime? DatetimeDataType         { get; set; } // datetime
		[Column("charDataType"            , DataType = DataType.NChar    , DbType = "char(1)"         , Length = 1         , Precision = 0 , Scale = 0                                                                                  )] public char?     CharDataType             { get; set; } // char(1)
		[Column("char20DataType"          , DataType = DataType.NChar    , DbType = "char(20)"        , Length = 20        , Precision = 0 , Scale = 0                                                                                  )] public string?   Char20DataType           { get; set; } // char(20)
		[Column("varcharDataType"         , DataType = DataType.VarChar  , DbType = "varchar(20)"     , Length = 20        , Precision = 0 , Scale = 0                                                                                  )] public string?   VarcharDataType          { get; set; } // varchar(20)
		[Column("textDataType"            , DataType = DataType.Text     , DbType = "text(max)"       , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public string?   TextDataType             { get; set; } // text(max)
		[Column("ncharDataType"           , DataType = DataType.NChar    , DbType = "char(20)"        , Length = 20        , Precision = 0 , Scale = 0                                                                                  )] public string?   NcharDataType            { get; set; } // char(20)
		[Column("nvarcharDataType"        , DataType = DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20        , Precision = 0 , Scale = 0                                                                                  )] public string?   NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType"           , DataType = DataType.NText    , DbType = "ntext(max)"      , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public string?   NtextDataType            { get; set; } // ntext(max)
		[Column("binaryDataType"          , DataType = DataType.Binary   , DbType = "binary"          , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public byte[]?   BinaryDataType           { get; set; } // binary
		[Column("varbinaryDataType"       , DataType = DataType.VarBinary, DbType = "varbinary"       , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public byte[]?   VarbinaryDataType        { get; set; } // varbinary
		[Column("imageDataType"           , DataType = DataType.Image    , DbType = "image"           , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public byte[]?   ImageDataType            { get; set; } // image
		[Column("uniqueidentifierDataType", DataType = DataType.Guid     , DbType = "uniqueidentifier", Length = 16        , Precision = 0 , Scale = 0                                                                                  )] public Guid?     UniqueidentifierDataType { get; set; } // uniqueidentifier
		[Column("objectDataType"          , DataType = DataType.Variant  , DbType = "object"          , Length = 2147483647, Precision = 0 , Scale = 0                                                                                  )] public object?   ObjectDataType           { get; set; } // object

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllType> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllType>(c => c.Id);

		public bool Equals(AllType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllType);
		}
		#endregion
	}
}
