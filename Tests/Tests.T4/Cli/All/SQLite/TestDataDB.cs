// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLite
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Dual>              Duals               => this.GetTable<Dual>();
		public ITable<FkTestPosition>    FkTestPositions     => this.GetTable<FkTestPosition>();
		public ITable<ForeignKeyTable>   ForeignKeyTables    => this.GetTable<ForeignKeyTable>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<PrimaryKeyTable>   PrimaryKeyTables    => this.GetTable<PrimaryKeyTable>();
		public ITable<TestT4Casing>      TestT4Casings       => this.GetTable<TestT4Casing>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<AllTypesView>      AllTypesViews       => this.GetTable<AllTypesView>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, long id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllType? FindAllType(this TestDataDB db, long id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, long id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, long id)
		{
			return db.GetTable<AllType>().Where(e => e.Id == id);
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id == @record.Id);
		}

		public static Doctor? Find(this ITable<Doctor> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, long personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Doctor? FindDoctor(this TestDataDB db, long personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, long personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, long personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == @record.PersonId);
		}

		public static FkTestPosition? Find(this ITable<FkTestPosition> table, long company, long department, long positionId)
		{
			return table.FirstOrDefault(e => e.Company == company && e.Department == department && e.PositionId == positionId);
		}

		public static Task<FkTestPosition?> FindAsync(this ITable<FkTestPosition> table, long company, long department, long positionId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Company == company && e.Department == department && e.PositionId == positionId, cancellationToken);
		}

		public static IQueryable<FkTestPosition> FindQuery(this ITable<FkTestPosition> table, long company, long department, long positionId)
		{
			return table.Where(e => e.Company == company && e.Department == department && e.PositionId == positionId);
		}

		public static FkTestPosition? Find(this ITable<FkTestPosition> table, FkTestPosition @record)
		{
			return table.FirstOrDefault(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId);
		}

		public static Task<FkTestPosition?> FindAsync(this ITable<FkTestPosition> table, FkTestPosition @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId, cancellationToken);
		}

		public static IQueryable<FkTestPosition> FindQuery(this ITable<FkTestPosition> table, FkTestPosition @record)
		{
			return table.Where(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId);
		}

		public static FkTestPosition? FindFkTestPosition(this TestDataDB db, long company, long department, long positionId)
		{
			return db.GetTable<FkTestPosition>().FirstOrDefault(e => e.Company == company && e.Department == department && e.PositionId == positionId);
		}

		public static Task<FkTestPosition?> FindFkTestPositionAsync(this TestDataDB db, long company, long department, long positionId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<FkTestPosition>().FirstOrDefaultAsync(e => e.Company == company && e.Department == department && e.PositionId == positionId, cancellationToken);
		}

		public static IQueryable<FkTestPosition> FindFkTestPositionQuery(this TestDataDB db, long company, long department, long positionId)
		{
			return db.GetTable<FkTestPosition>().Where(e => e.Company == company && e.Department == department && e.PositionId == positionId);
		}

		public static FkTestPosition? Find(this TestDataDB db, FkTestPosition @record)
		{
			return db.GetTable<FkTestPosition>().FirstOrDefault(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId);
		}

		public static Task<FkTestPosition?> FindAsync(this TestDataDB db, FkTestPosition @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<FkTestPosition>().FirstOrDefaultAsync(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId, cancellationToken);
		}

		public static IQueryable<FkTestPosition> FindQuery(this TestDataDB db, FkTestPosition @record)
		{
			return db.GetTable<FkTestPosition>().Where(e => e.Company == @record.Company && e.Department == @record.Department && e.PositionId == @record.PositionId);
		}

		public static Patient? Find(this ITable<Patient> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, long personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Patient? FindPatient(this TestDataDB db, long personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, long personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, long personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? Find(this ITable<Person> table, long personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, long personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, long personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? FindPerson(this TestDataDB db, long personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, long personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, long personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == personId);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == @record.PersonId);
		}

		public static PrimaryKeyTable? Find(this ITable<PrimaryKeyTable> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<PrimaryKeyTable?> FindAsync(this ITable<PrimaryKeyTable> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<PrimaryKeyTable> FindQuery(this ITable<PrimaryKeyTable> table, long id)
		{
			return table.Where(e => e.Id == id);
		}

		public static PrimaryKeyTable? Find(this ITable<PrimaryKeyTable> table, PrimaryKeyTable @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<PrimaryKeyTable?> FindAsync(this ITable<PrimaryKeyTable> table, PrimaryKeyTable @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<PrimaryKeyTable> FindQuery(this ITable<PrimaryKeyTable> table, PrimaryKeyTable @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static PrimaryKeyTable? FindPrimaryKeyTable(this TestDataDB db, long id)
		{
			return db.GetTable<PrimaryKeyTable>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<PrimaryKeyTable?> FindPrimaryKeyTableAsync(this TestDataDB db, long id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<PrimaryKeyTable>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<PrimaryKeyTable> FindPrimaryKeyTableQuery(this TestDataDB db, long id)
		{
			return db.GetTable<PrimaryKeyTable>().Where(e => e.Id == id);
		}

		public static PrimaryKeyTable? Find(this TestDataDB db, PrimaryKeyTable @record)
		{
			return db.GetTable<PrimaryKeyTable>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<PrimaryKeyTable?> FindAsync(this TestDataDB db, PrimaryKeyTable @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<PrimaryKeyTable>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<PrimaryKeyTable> FindQuery(this TestDataDB db, PrimaryKeyTable @record)
		{
			return db.GetTable<PrimaryKeyTable>().Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, long id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, long id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, long id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, long id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, long id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, long id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == @record.Id);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_0_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SQLite.Doctor.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person FkDoctor00(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(SQLite.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(Person.PersonId), OtherKey = nameof(SQLite.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region ForeignKeyTable Associations
		/// <summary>
		/// FK_ForeignKeyTable_0_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(ForeignKeyTable.PrimaryKeyTableId), OtherKey = nameof(SQLite.PrimaryKeyTable.Id))]
		public static PrimaryKeyTable PrimaryKeyTable(this ForeignKeyTable obj, IDataContext db)
		{
			return db.GetTable<PrimaryKeyTable>().First(t => obj.PrimaryKeyTableId == t.Id);
		}
		#endregion

		#region PrimaryKeyTable Associations
		/// <summary>
		/// FK_ForeignKeyTable_0_0 backreference
		/// </summary>
		[Association(ThisKey = nameof(SQLite.PrimaryKeyTable.Id), OtherKey = nameof(ForeignKeyTable.PrimaryKeyTableId))]
		public static IQueryable<ForeignKeyTable> ForeignKeyTables(this PrimaryKeyTable obj, IDataContext db)
		{
			return db.GetTable<ForeignKeyTable>().Where(t => t.PrimaryKeyTableId == obj.Id);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_0_0
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(SQLite.Patient.PersonId), OtherKey = nameof(Person.PersonId))]
		public static Person FkPatient00(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion
	}
}
