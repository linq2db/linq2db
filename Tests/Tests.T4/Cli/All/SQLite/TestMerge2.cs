// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLite
{
	[Table("TestMerge2")]
	public class TestMerge2
	{
		[Column("Id"             , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long      Id              { get; set; } // integer
		[Column("Field1"         , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long?     Field1          { get; set; } // integer
		[Column("Field2"         , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long?     Field2          { get; set; } // integer
		[Column("Field3"         , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long?     Field3          { get; set; } // integer
		[Column("Field4"         , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long?     Field4          { get; set; } // integer
		[Column("Field5"         , DataType = DataType.Int64    , DbType = "integer"         , Length = 8 , Precision = 19, Scale = 0)] public long?     Field5          { get; set; } // integer
		[Column("FieldInt64"     , DataType = DataType.Int64    , DbType = "bigint"          , Length = 8 , Precision = 19, Scale = 0)] public long?     FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"   , DataType = DataType.Boolean  , DbType = "bit"             , Length = 1 , Precision = 0 , Scale = 0)] public bool?     FieldBoolean    { get; set; } // bit
		[Column("FieldString"    , DataType = DataType.VarChar  , DbType = "varchar(20)"     , Length = 20, Precision = 0 , Scale = 0)] public string?   FieldString     { get; set; } // varchar(20)
		[Column("FieldNString"   , DataType = DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20, Precision = 0 , Scale = 0)] public string?   FieldNString    { get; set; } // nvarchar(20)
		[Column("FieldChar"      , DataType = DataType.NChar    , DbType = "char(1)"         , Length = 1 , Precision = 0 , Scale = 0)] public char?     FieldChar       { get; set; } // char(1)
		[Column("FieldNChar"     , DataType = DataType.NChar    , DbType = "char(1)"         , Length = 1 , Precision = 0 , Scale = 0)] public char?     FieldNChar      { get; set; } // char(1)
		[Column("FieldFloat"     , DataType = DataType.Double   , DbType = "float"           , Length = 8 , Precision = 24, Scale = 0)] public double?   FieldFloat      { get; set; } // float
		[Column("FieldDouble"    , DataType = DataType.Double   , DbType = "float"           , Length = 8 , Precision = 53, Scale = 0)] public double?   FieldDouble     { get; set; } // float
		[Column("FieldDateTime"  , DataType = DataType.DateTime , DbType = "datetime"        , Length = 8 , Precision = 0 , Scale = 0)] public DateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"    , DataType = DataType.VarBinary, DbType = "varbinary"       , Length = 20, Precision = 0 , Scale = 0)] public byte[]?   FieldBinary     { get; set; } // varbinary
		[Column("FieldGuid"      , DataType = DataType.Guid     , DbType = "uniqueidentifier", Length = 16, Precision = 0 , Scale = 0)] public Guid?     FieldGuid       { get; set; } // uniqueidentifier
		[Column("FieldDate"      , DataType = DataType.Date     , DbType = "date"            , Length = 8 , Precision = 0 , Scale = 0)] public DateTime? FieldDate       { get; set; } // date
		[Column("FieldEnumString", DataType = DataType.VarChar  , DbType = "varchar(20)"     , Length = 20, Precision = 0 , Scale = 0)] public string?   FieldEnumString { get; set; } // varchar(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32    , DbType = "int"             , Length = 4 , Precision = 10, Scale = 0)] public int?      FieldEnumNumber { get; set; } // int
	}
}
