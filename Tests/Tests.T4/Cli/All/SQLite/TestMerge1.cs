// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLite
{
	[Table("TestMerge1")]
	public class TestMerge1
	{
		[Column("Id"             , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long      Id              { get; set; } // INTEGER
		[Column("Field1"         , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long?     Field1          { get; set; } // INTEGER
		[Column("Field2"         , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long?     Field2          { get; set; } // INTEGER
		[Column("Field3"         , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long?     Field3          { get; set; } // INTEGER
		[Column("Field4"         , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long?     Field4          { get; set; } // INTEGER
		[Column("Field5"         , DataType = DataType.Int64    , DbType = "INTEGER"                      )] public long?     Field5          { get; set; } // INTEGER
		[Column("FieldInt64"     , DataType = DataType.Int64    , DbType = "BIGINT"                       )] public long?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"   , DataType = DataType.Boolean  , DbType = "BIT"                          )] public bool?     FieldBoolean    { get; set; } // BIT
		[Column("FieldString"    , DataType = DataType.NVarChar , DbType = "VARCHAR(20)"     , Length = 20)] public string?   FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"   , DataType = DataType.NVarChar , DbType = "NVARCHAR(20)"    , Length = 20)] public string?   FieldNString    { get; set; } // NVARCHAR(20)
		[Column("FieldChar"      , DataType = DataType.NVarChar , DbType = "CHAR(1)"         , Length = 1 )] public char?     FieldChar       { get; set; } // CHAR(1)
		[Column("FieldNChar"     , DataType = DataType.NVarChar , DbType = "NCHAR(1)"        , Length = 1 )] public char?     FieldNChar      { get; set; } // NCHAR(1)
		[Column("FieldFloat"     , DataType = DataType.Double   , DbType = "FLOAT(24)"                    )] public double?   FieldFloat      { get; set; } // FLOAT(24)
		[Column("FieldDouble"    , DataType = DataType.Double   , DbType = "FLOAT(53)"                    )] public double?   FieldDouble     { get; set; } // FLOAT(53)
		[Column("FieldDateTime"  , DataType = DataType.DateTime2, DbType = "DATETIME"                     )] public DateTime? FieldDateTime   { get; set; } // DATETIME
		[Column("FieldBinary"    , DataType = DataType.VarBinary, DbType = "VARBINARY(20)"   , Length = 20)] public byte[]?   FieldBinary     { get; set; } // VARBINARY(20)
		[Column("FieldGuid"      , DataType = DataType.Guid     , DbType = "UNIQUEIDENTIFIER"             )] public Guid?     FieldGuid       { get; set; } // UNIQUEIDENTIFIER
		[Column("FieldDate"      , DataType = DataType.Date     , DbType = "DATE"                         )] public DateTime? FieldDate       { get; set; } // DATE
		[Column("FieldEnumString", DataType = DataType.NVarChar , DbType = "VARCHAR(20)"     , Length = 20)] public string?   FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32    , DbType = "INT"                          )] public int?      FieldEnumNumber { get; set; } // INT
	}
}
