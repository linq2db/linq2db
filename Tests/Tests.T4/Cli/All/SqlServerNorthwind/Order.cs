// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServerNorthwind
{
	[Table("Orders")]
	public class Order : IEquatable<Order>
	{
		[Column("OrderID"       , DataType = DataType.Int32   , DbType = "int"         , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32     OrderId        { get; set; } // int
		[Column("CustomerID"    , DataType = DataType.NChar   , DbType = "nchar(5)"    , Length       = 5                                                                )] public SqlString?   CustomerId     { get; set; } // nchar(5)
		[Column("EmployeeID"    , DataType = DataType.Int32   , DbType = "int"                                                                                           )] public SqlInt32?    EmployeeId     { get; set; } // int
		[Column("OrderDate"     , DataType = DataType.DateTime, DbType = "datetime"                                                                                      )] public SqlDateTime? OrderDate      { get; set; } // datetime
		[Column("RequiredDate"  , DataType = DataType.DateTime, DbType = "datetime"                                                                                      )] public SqlDateTime? RequiredDate   { get; set; } // datetime
		[Column("ShippedDate"   , DataType = DataType.DateTime, DbType = "datetime"                                                                                      )] public SqlDateTime? ShippedDate    { get; set; } // datetime
		[Column("ShipVia"       , DataType = DataType.Int32   , DbType = "int"                                                                                           )] public SqlInt32?    ShipVia        { get; set; } // int
		[Column("Freight"       , DataType = DataType.Money   , DbType = "money"                                                                                         )] public SqlMoney?    Freight        { get; set; } // money
		[Column("ShipName"      , DataType = DataType.NVarChar, DbType = "nvarchar(40)", Length       = 40                                                               )] public SqlString?   ShipName       { get; set; } // nvarchar(40)
		[Column("ShipAddress"   , DataType = DataType.NVarChar, DbType = "nvarchar(60)", Length       = 60                                                               )] public SqlString?   ShipAddress    { get; set; } // nvarchar(60)
		[Column("ShipCity"      , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString?   ShipCity       { get; set; } // nvarchar(15)
		[Column("ShipRegion"    , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString?   ShipRegion     { get; set; } // nvarchar(15)
		[Column("ShipPostalCode", DataType = DataType.NVarChar, DbType = "nvarchar(10)", Length       = 10                                                               )] public SqlString?   ShipPostalCode { get; set; } // nvarchar(10)
		[Column("ShipCountry"   , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString?   ShipCountry    { get; set; } // nvarchar(15)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Order> _equalityComparer = ComparerBuilder.GetEqualityComparer<Order>(c => c.OrderId);

		public bool Equals(Order? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Order);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Order_Details_Orders backreference
		/// </summary>
		[Association(ThisKey = nameof(OrderId), OtherKey = nameof(OrderDetail.OrderId))]
		public IEnumerable<OrderDetail> OrderDetails { get; set; } = null!;

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		[Association(ThisKey = nameof(CustomerId), OtherKey = nameof(SqlServerNorthwind.Customer.CustomerId))]
		public Customer? Customer { get; set; }

		/// <summary>
		/// FK_Orders_Employees
		/// </summary>
		[Association(ThisKey = nameof(EmployeeId), OtherKey = nameof(SqlServerNorthwind.Employee.EmployeeId))]
		public Employee? Employee { get; set; }

		/// <summary>
		/// FK_Orders_Shippers
		/// </summary>
		[Association(ThisKey = nameof(ShipVia), OtherKey = nameof(Shipper.ShipperId))]
		public Shipper? Shippers { get; set; }
		#endregion
	}
}
