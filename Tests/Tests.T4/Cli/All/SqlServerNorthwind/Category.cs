// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServerNorthwind
{
	[Table("Categories")]
	public class Category : IEquatable<Category>
	{
		[Column("CategoryID"  , DataType = DataType.Int32   , DbType = "int"         , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32   CategoryId   { get; set; } // int
		[Column("CategoryName", DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString  CategoryName { get; set; } // nvarchar(15)
		[Column("Description" , DataType = DataType.NText   , DbType = "ntext"                                                                                         )] public SqlString? Description  { get; set; } // ntext
		[Column("Picture"     , DataType = DataType.Image   , DbType = "image"                                                                                         )] public SqlBinary? Picture      { get; set; } // image

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Category> _equalityComparer = ComparerBuilder.GetEqualityComparer<Category>(c => c.CategoryId);

		public bool Equals(Category? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Category);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Products_Categories backreference
		/// </summary>
		[Association(ThisKey = nameof(CategoryId), OtherKey = nameof(Product.CategoryId))]
		public IEnumerable<Product> Products { get; set; } = null!;
		#endregion
	}
}
