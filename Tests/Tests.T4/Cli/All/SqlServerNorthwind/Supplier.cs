// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServerNorthwind
{
	[Table("Suppliers")]
	public class Supplier : IEquatable<Supplier>
	{
		[Column("SupplierID"  , DataType = DataType.Int32   , DbType = "int"         , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32   SupplierId   { get; set; } // int
		[Column("CompanyName" , DataType = DataType.NVarChar, DbType = "nvarchar(40)", Length       = 40                                                               )] public SqlString  CompanyName  { get; set; } // nvarchar(40)
		[Column("ContactName" , DataType = DataType.NVarChar, DbType = "nvarchar(30)", Length       = 30                                                               )] public SqlString? ContactName  { get; set; } // nvarchar(30)
		[Column("ContactTitle", DataType = DataType.NVarChar, DbType = "nvarchar(30)", Length       = 30                                                               )] public SqlString? ContactTitle { get; set; } // nvarchar(30)
		[Column("Address"     , DataType = DataType.NVarChar, DbType = "nvarchar(60)", Length       = 60                                                               )] public SqlString? Address      { get; set; } // nvarchar(60)
		[Column("City"        , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString? City         { get; set; } // nvarchar(15)
		[Column("Region"      , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString? Region       { get; set; } // nvarchar(15)
		[Column("PostalCode"  , DataType = DataType.NVarChar, DbType = "nvarchar(10)", Length       = 10                                                               )] public SqlString? PostalCode   { get; set; } // nvarchar(10)
		[Column("Country"     , DataType = DataType.NVarChar, DbType = "nvarchar(15)", Length       = 15                                                               )] public SqlString? Country      { get; set; } // nvarchar(15)
		[Column("Phone"       , DataType = DataType.NVarChar, DbType = "nvarchar(24)", Length       = 24                                                               )] public SqlString? Phone        { get; set; } // nvarchar(24)
		[Column("Fax"         , DataType = DataType.NVarChar, DbType = "nvarchar(24)", Length       = 24                                                               )] public SqlString? Fax          { get; set; } // nvarchar(24)
		[Column("HomePage"    , DataType = DataType.NText   , DbType = "ntext"                                                                                         )] public SqlString? HomePage     { get; set; } // ntext

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Supplier> _equalityComparer = ComparerBuilder.GetEqualityComparer<Supplier>(c => c.SupplierId);

		public bool Equals(Supplier? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Supplier);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Products_Suppliers backreference
		/// </summary>
		[Association(ThisKey = nameof(SupplierId), OtherKey = nameof(Product.SupplierId))]
		public IEnumerable<Product> Products { get; set; } = null!;
		#endregion
	}
}
