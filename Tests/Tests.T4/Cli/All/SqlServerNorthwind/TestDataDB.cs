// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServerNorthwind
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Category>                   Categories                   => this.GetTable<Category>();
		public ITable<CustomerCustomerDemo>       CustomerCustomerDemos        => this.GetTable<CustomerCustomerDemo>();
		public ITable<CustomerDemographic>        CustomerDemographics         => this.GetTable<CustomerDemographic>();
		public ITable<Customer>                   Customers                    => this.GetTable<Customer>();
		public ITable<EmployeeTerritory>          EmployeeTerritories          => this.GetTable<EmployeeTerritory>();
		public ITable<Employee>                   Employees                    => this.GetTable<Employee>();
		public ITable<OrderDetail>                OrderDetails                 => this.GetTable<OrderDetail>();
		public ITable<Order>                      Orders                       => this.GetTable<Order>();
		public ITable<Product>                    Products                     => this.GetTable<Product>();
		public ITable<Region>                     Regions                      => this.GetTable<Region>();
		public ITable<Shipper>                    Shippers                     => this.GetTable<Shipper>();
		public ITable<Supplier>                   Suppliers                    => this.GetTable<Supplier>();
		public ITable<Territory>                  Territories                  => this.GetTable<Territory>();
		public ITable<AlphabeticalListOfProduct>  AlphabeticalListOfProducts   => this.GetTable<AlphabeticalListOfProduct>();
		public ITable<CategorySalesFor1997>       CategorySalesFor1997         => this.GetTable<CategorySalesFor1997>();
		public ITable<CurrentProductList>         CurrentProductLists          => this.GetTable<CurrentProductList>();
		public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities => this.GetTable<CustomerAndSuppliersByCity>();
		public ITable<Invoice>                    Invoices                     => this.GetTable<Invoice>();
		public ITable<OrderDetailsExtended>       OrderDetailsExtendeds        => this.GetTable<OrderDetailsExtended>();
		public ITable<OrderSubtotal>              OrderSubtotals               => this.GetTable<OrderSubtotal>();
		public ITable<OrdersQry>                  OrdersQries                  => this.GetTable<OrdersQry>();
		public ITable<ProductSalesFor1997>        ProductSalesFor1997          => this.GetTable<ProductSalesFor1997>();
		public ITable<ProductsAboveAveragePrice>  ProductsAboveAveragePrices   => this.GetTable<ProductsAboveAveragePrice>();
		public ITable<ProductsByCategory>         ProductsByCategories         => this.GetTable<ProductsByCategory>();
		public ITable<QuarterlyOrder>             QuarterlyOrders              => this.GetTable<QuarterlyOrder>();
		public ITable<SalesTotalsByAmount>        SalesTotalsByAmounts         => this.GetTable<SalesTotalsByAmount>();
		public ITable<SalesByCategory>            SalesByCategories            => this.GetTable<SalesByCategory>();
		public ITable<SummaryOfSalesByQuarter>    SummaryOfSalesByQuarters     => this.GetTable<SummaryOfSalesByQuarter>();
		public ITable<SummaryOfSalesByYear>       SummaryOfSalesByYears        => this.GetTable<SummaryOfSalesByYear>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Category? Find(this ITable<Category> table, SqlInt32 categoryId)
		{
			return table.FirstOrDefault(e => e.CategoryId.Equals(categoryId));
		}

		public static Task<Category?> FindAsync(this ITable<Category> table, SqlInt32 categoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CategoryId.Equals(categoryId), cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this ITable<Category> table, SqlInt32 categoryId)
		{
			return table.Where(e => e.CategoryId.Equals(categoryId));
		}

		public static Category? Find(this ITable<Category> table, Category @record)
		{
			return table.FirstOrDefault(e => e.CategoryId.Equals(@record.CategoryId));
		}

		public static Task<Category?> FindAsync(this ITable<Category> table, Category @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CategoryId.Equals(@record.CategoryId), cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this ITable<Category> table, Category @record)
		{
			return table.Where(e => e.CategoryId.Equals(@record.CategoryId));
		}

		public static Category? FindCategory(this TestDataDB db, SqlInt32 categoryId)
		{
			return db.GetTable<Category>().FirstOrDefault(e => e.CategoryId.Equals(categoryId));
		}

		public static Task<Category?> FindCategoryAsync(this TestDataDB db, SqlInt32 categoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Category>().FirstOrDefaultAsync(e => e.CategoryId.Equals(categoryId), cancellationToken);
		}

		public static IQueryable<Category> FindCategoryQuery(this TestDataDB db, SqlInt32 categoryId)
		{
			return db.GetTable<Category>().Where(e => e.CategoryId.Equals(categoryId));
		}

		public static Category? Find(this TestDataDB db, Category @record)
		{
			return db.GetTable<Category>().FirstOrDefault(e => e.CategoryId.Equals(@record.CategoryId));
		}

		public static Task<Category?> FindAsync(this TestDataDB db, Category @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Category>().FirstOrDefaultAsync(e => e.CategoryId.Equals(@record.CategoryId), cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this TestDataDB db, Category @record)
		{
			return db.GetTable<Category>().Where(e => e.CategoryId.Equals(@record.CategoryId));
		}

		public static CustomerCustomerDemo? Find(this ITable<CustomerCustomerDemo> table, SqlString customerId, SqlString customerTypeId)
		{
			return table.FirstOrDefault(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId));
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this ITable<CustomerCustomerDemo> table, SqlString customerId, SqlString customerTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this ITable<CustomerCustomerDemo> table, SqlString customerId, SqlString customerTypeId)
		{
			return table.Where(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId));
		}

		public static CustomerCustomerDemo? Find(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record)
		{
			return table.FirstOrDefault(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record)
		{
			return table.Where(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static CustomerCustomerDemo? FindCustomerCustomerDemo(this TestDataDB db, SqlString customerId, SqlString customerTypeId)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefault(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId));
		}

		public static Task<CustomerCustomerDemo?> FindCustomerCustomerDemoAsync(this TestDataDB db, SqlString customerId, SqlString customerTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefaultAsync(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindCustomerCustomerDemoQuery(this TestDataDB db, SqlString customerId, SqlString customerTypeId)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(e => e.CustomerId.Equals(customerId) && e.CustomerTypeId.Equals(customerTypeId));
		}

		public static CustomerCustomerDemo? Find(this TestDataDB db, CustomerCustomerDemo @record)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefault(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this TestDataDB db, CustomerCustomerDemo @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefaultAsync(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this TestDataDB db, CustomerCustomerDemo @record)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(e => e.CustomerId.Equals(@record.CustomerId) && e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static CustomerDemographic? Find(this ITable<CustomerDemographic> table, SqlString customerTypeId)
		{
			return table.FirstOrDefault(e => e.CustomerTypeId.Equals(customerTypeId));
		}

		public static Task<CustomerDemographic?> FindAsync(this ITable<CustomerDemographic> table, SqlString customerTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerTypeId.Equals(customerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this ITable<CustomerDemographic> table, SqlString customerTypeId)
		{
			return table.Where(e => e.CustomerTypeId.Equals(customerTypeId));
		}

		public static CustomerDemographic? Find(this ITable<CustomerDemographic> table, CustomerDemographic @record)
		{
			return table.FirstOrDefault(e => e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static Task<CustomerDemographic?> FindAsync(this ITable<CustomerDemographic> table, CustomerDemographic @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerTypeId.Equals(@record.CustomerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this ITable<CustomerDemographic> table, CustomerDemographic @record)
		{
			return table.Where(e => e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static CustomerDemographic? FindCustomerDemographic(this TestDataDB db, SqlString customerTypeId)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefault(e => e.CustomerTypeId.Equals(customerTypeId));
		}

		public static Task<CustomerDemographic?> FindCustomerDemographicAsync(this TestDataDB db, SqlString customerTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefaultAsync(e => e.CustomerTypeId.Equals(customerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindCustomerDemographicQuery(this TestDataDB db, SqlString customerTypeId)
		{
			return db.GetTable<CustomerDemographic>().Where(e => e.CustomerTypeId.Equals(customerTypeId));
		}

		public static CustomerDemographic? Find(this TestDataDB db, CustomerDemographic @record)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefault(e => e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static Task<CustomerDemographic?> FindAsync(this TestDataDB db, CustomerDemographic @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefaultAsync(e => e.CustomerTypeId.Equals(@record.CustomerTypeId), cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this TestDataDB db, CustomerDemographic @record)
		{
			return db.GetTable<CustomerDemographic>().Where(e => e.CustomerTypeId.Equals(@record.CustomerTypeId));
		}

		public static Customer? Find(this ITable<Customer> table, SqlString customerId)
		{
			return table.FirstOrDefault(e => e.CustomerId.Equals(customerId));
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, SqlString customerId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId.Equals(customerId), cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this ITable<Customer> table, SqlString customerId)
		{
			return table.Where(e => e.CustomerId.Equals(customerId));
		}

		public static Customer? Find(this ITable<Customer> table, Customer @record)
		{
			return table.FirstOrDefault(e => e.CustomerId.Equals(@record.CustomerId));
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, Customer @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId.Equals(@record.CustomerId), cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this ITable<Customer> table, Customer @record)
		{
			return table.Where(e => e.CustomerId.Equals(@record.CustomerId));
		}

		public static Customer? FindCustomer(this TestDataDB db, SqlString customerId)
		{
			return db.GetTable<Customer>().FirstOrDefault(e => e.CustomerId.Equals(customerId));
		}

		public static Task<Customer?> FindCustomerAsync(this TestDataDB db, SqlString customerId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Customer>().FirstOrDefaultAsync(e => e.CustomerId.Equals(customerId), cancellationToken);
		}

		public static IQueryable<Customer> FindCustomerQuery(this TestDataDB db, SqlString customerId)
		{
			return db.GetTable<Customer>().Where(e => e.CustomerId.Equals(customerId));
		}

		public static Customer? Find(this TestDataDB db, Customer @record)
		{
			return db.GetTable<Customer>().FirstOrDefault(e => e.CustomerId.Equals(@record.CustomerId));
		}

		public static Task<Customer?> FindAsync(this TestDataDB db, Customer @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Customer>().FirstOrDefaultAsync(e => e.CustomerId.Equals(@record.CustomerId), cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this TestDataDB db, Customer @record)
		{
			return db.GetTable<Customer>().Where(e => e.CustomerId.Equals(@record.CustomerId));
		}

		public static EmployeeTerritory? Find(this ITable<EmployeeTerritory> table, SqlInt32 employeeId, SqlString territoryId)
		{
			return table.FirstOrDefault(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId));
		}

		public static Task<EmployeeTerritory?> FindAsync(this ITable<EmployeeTerritory> table, SqlInt32 employeeId, SqlString territoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId), cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this ITable<EmployeeTerritory> table, SqlInt32 employeeId, SqlString territoryId)
		{
			return table.Where(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId));
		}

		public static EmployeeTerritory? Find(this ITable<EmployeeTerritory> table, EmployeeTerritory @record)
		{
			return table.FirstOrDefault(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Task<EmployeeTerritory?> FindAsync(this ITable<EmployeeTerritory> table, EmployeeTerritory @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId), cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this ITable<EmployeeTerritory> table, EmployeeTerritory @record)
		{
			return table.Where(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static EmployeeTerritory? FindEmployeeTerritory(this TestDataDB db, SqlInt32 employeeId, SqlString territoryId)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefault(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId));
		}

		public static Task<EmployeeTerritory?> FindEmployeeTerritoryAsync(this TestDataDB db, SqlInt32 employeeId, SqlString territoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefaultAsync(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId), cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindEmployeeTerritoryQuery(this TestDataDB db, SqlInt32 employeeId, SqlString territoryId)
		{
			return db.GetTable<EmployeeTerritory>().Where(e => e.EmployeeId.Equals(employeeId) && e.TerritoryId.Equals(territoryId));
		}

		public static EmployeeTerritory? Find(this TestDataDB db, EmployeeTerritory @record)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefault(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Task<EmployeeTerritory?> FindAsync(this TestDataDB db, EmployeeTerritory @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefaultAsync(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId), cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this TestDataDB db, EmployeeTerritory @record)
		{
			return db.GetTable<EmployeeTerritory>().Where(e => e.EmployeeId.Equals(@record.EmployeeId) && e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Employee? Find(this ITable<Employee> table, SqlInt32 employeeId)
		{
			return table.FirstOrDefault(e => e.EmployeeId.Equals(employeeId));
		}

		public static Task<Employee?> FindAsync(this ITable<Employee> table, SqlInt32 employeeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId.Equals(employeeId), cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this ITable<Employee> table, SqlInt32 employeeId)
		{
			return table.Where(e => e.EmployeeId.Equals(employeeId));
		}

		public static Employee? Find(this ITable<Employee> table, Employee @record)
		{
			return table.FirstOrDefault(e => e.EmployeeId.Equals(@record.EmployeeId));
		}

		public static Task<Employee?> FindAsync(this ITable<Employee> table, Employee @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId.Equals(@record.EmployeeId), cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this ITable<Employee> table, Employee @record)
		{
			return table.Where(e => e.EmployeeId.Equals(@record.EmployeeId));
		}

		public static Employee? FindEmployee(this TestDataDB db, SqlInt32 employeeId)
		{
			return db.GetTable<Employee>().FirstOrDefault(e => e.EmployeeId.Equals(employeeId));
		}

		public static Task<Employee?> FindEmployeeAsync(this TestDataDB db, SqlInt32 employeeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Employee>().FirstOrDefaultAsync(e => e.EmployeeId.Equals(employeeId), cancellationToken);
		}

		public static IQueryable<Employee> FindEmployeeQuery(this TestDataDB db, SqlInt32 employeeId)
		{
			return db.GetTable<Employee>().Where(e => e.EmployeeId.Equals(employeeId));
		}

		public static Employee? Find(this TestDataDB db, Employee @record)
		{
			return db.GetTable<Employee>().FirstOrDefault(e => e.EmployeeId.Equals(@record.EmployeeId));
		}

		public static Task<Employee?> FindAsync(this TestDataDB db, Employee @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Employee>().FirstOrDefaultAsync(e => e.EmployeeId.Equals(@record.EmployeeId), cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this TestDataDB db, Employee @record)
		{
			return db.GetTable<Employee>().Where(e => e.EmployeeId.Equals(@record.EmployeeId));
		}

		public static OrderDetail? Find(this ITable<OrderDetail> table, SqlInt32 orderId, SqlInt32 productId)
		{
			return table.FirstOrDefault(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId));
		}

		public static Task<OrderDetail?> FindAsync(this ITable<OrderDetail> table, SqlInt32 orderId, SqlInt32 productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId), cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this ITable<OrderDetail> table, SqlInt32 orderId, SqlInt32 productId)
		{
			return table.Where(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId));
		}

		public static OrderDetail? Find(this ITable<OrderDetail> table, OrderDetail @record)
		{
			return table.FirstOrDefault(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId));
		}

		public static Task<OrderDetail?> FindAsync(this ITable<OrderDetail> table, OrderDetail @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId), cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this ITable<OrderDetail> table, OrderDetail @record)
		{
			return table.Where(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId));
		}

		public static OrderDetail? FindOrderDetail(this TestDataDB db, SqlInt32 orderId, SqlInt32 productId)
		{
			return db.GetTable<OrderDetail>().FirstOrDefault(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId));
		}

		public static Task<OrderDetail?> FindOrderDetailAsync(this TestDataDB db, SqlInt32 orderId, SqlInt32 productId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<OrderDetail>().FirstOrDefaultAsync(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId), cancellationToken);
		}

		public static IQueryable<OrderDetail> FindOrderDetailQuery(this TestDataDB db, SqlInt32 orderId, SqlInt32 productId)
		{
			return db.GetTable<OrderDetail>().Where(e => e.OrderId.Equals(orderId) && e.ProductId.Equals(productId));
		}

		public static OrderDetail? Find(this TestDataDB db, OrderDetail @record)
		{
			return db.GetTable<OrderDetail>().FirstOrDefault(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId));
		}

		public static Task<OrderDetail?> FindAsync(this TestDataDB db, OrderDetail @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<OrderDetail>().FirstOrDefaultAsync(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId), cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this TestDataDB db, OrderDetail @record)
		{
			return db.GetTable<OrderDetail>().Where(e => e.OrderId.Equals(@record.OrderId) && e.ProductId.Equals(@record.ProductId));
		}

		public static Order? Find(this ITable<Order> table, SqlInt32 orderId)
		{
			return table.FirstOrDefault(e => e.OrderId.Equals(orderId));
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, SqlInt32 orderId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId.Equals(orderId), cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this ITable<Order> table, SqlInt32 orderId)
		{
			return table.Where(e => e.OrderId.Equals(orderId));
		}

		public static Order? Find(this ITable<Order> table, Order @record)
		{
			return table.FirstOrDefault(e => e.OrderId.Equals(@record.OrderId));
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, Order @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId.Equals(@record.OrderId), cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this ITable<Order> table, Order @record)
		{
			return table.Where(e => e.OrderId.Equals(@record.OrderId));
		}

		public static Order? FindOrder(this TestDataDB db, SqlInt32 orderId)
		{
			return db.GetTable<Order>().FirstOrDefault(e => e.OrderId.Equals(orderId));
		}

		public static Task<Order?> FindOrderAsync(this TestDataDB db, SqlInt32 orderId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Order>().FirstOrDefaultAsync(e => e.OrderId.Equals(orderId), cancellationToken);
		}

		public static IQueryable<Order> FindOrderQuery(this TestDataDB db, SqlInt32 orderId)
		{
			return db.GetTable<Order>().Where(e => e.OrderId.Equals(orderId));
		}

		public static Order? Find(this TestDataDB db, Order @record)
		{
			return db.GetTable<Order>().FirstOrDefault(e => e.OrderId.Equals(@record.OrderId));
		}

		public static Task<Order?> FindAsync(this TestDataDB db, Order @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Order>().FirstOrDefaultAsync(e => e.OrderId.Equals(@record.OrderId), cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this TestDataDB db, Order @record)
		{
			return db.GetTable<Order>().Where(e => e.OrderId.Equals(@record.OrderId));
		}

		public static Product? Find(this ITable<Product> table, SqlInt32 productId)
		{
			return table.FirstOrDefault(e => e.ProductId.Equals(productId));
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, SqlInt32 productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProductId.Equals(productId), cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this ITable<Product> table, SqlInt32 productId)
		{
			return table.Where(e => e.ProductId.Equals(productId));
		}

		public static Product? Find(this ITable<Product> table, Product @record)
		{
			return table.FirstOrDefault(e => e.ProductId.Equals(@record.ProductId));
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, Product @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProductId.Equals(@record.ProductId), cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this ITable<Product> table, Product @record)
		{
			return table.Where(e => e.ProductId.Equals(@record.ProductId));
		}

		public static Product? FindProduct(this TestDataDB db, SqlInt32 productId)
		{
			return db.GetTable<Product>().FirstOrDefault(e => e.ProductId.Equals(productId));
		}

		public static Task<Product?> FindProductAsync(this TestDataDB db, SqlInt32 productId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Product>().FirstOrDefaultAsync(e => e.ProductId.Equals(productId), cancellationToken);
		}

		public static IQueryable<Product> FindProductQuery(this TestDataDB db, SqlInt32 productId)
		{
			return db.GetTable<Product>().Where(e => e.ProductId.Equals(productId));
		}

		public static Product? Find(this TestDataDB db, Product @record)
		{
			return db.GetTable<Product>().FirstOrDefault(e => e.ProductId.Equals(@record.ProductId));
		}

		public static Task<Product?> FindAsync(this TestDataDB db, Product @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Product>().FirstOrDefaultAsync(e => e.ProductId.Equals(@record.ProductId), cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this TestDataDB db, Product @record)
		{
			return db.GetTable<Product>().Where(e => e.ProductId.Equals(@record.ProductId));
		}

		public static Region? Find(this ITable<Region> table, SqlInt32 regionId)
		{
			return table.FirstOrDefault(e => e.RegionId.Equals(regionId));
		}

		public static Task<Region?> FindAsync(this ITable<Region> table, SqlInt32 regionId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RegionId.Equals(regionId), cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this ITable<Region> table, SqlInt32 regionId)
		{
			return table.Where(e => e.RegionId.Equals(regionId));
		}

		public static Region? Find(this ITable<Region> table, Region @record)
		{
			return table.FirstOrDefault(e => e.RegionId.Equals(@record.RegionId));
		}

		public static Task<Region?> FindAsync(this ITable<Region> table, Region @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RegionId.Equals(@record.RegionId), cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this ITable<Region> table, Region @record)
		{
			return table.Where(e => e.RegionId.Equals(@record.RegionId));
		}

		public static Region? FindRegion(this TestDataDB db, SqlInt32 regionId)
		{
			return db.GetTable<Region>().FirstOrDefault(e => e.RegionId.Equals(regionId));
		}

		public static Task<Region?> FindRegionAsync(this TestDataDB db, SqlInt32 regionId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Region>().FirstOrDefaultAsync(e => e.RegionId.Equals(regionId), cancellationToken);
		}

		public static IQueryable<Region> FindRegionQuery(this TestDataDB db, SqlInt32 regionId)
		{
			return db.GetTable<Region>().Where(e => e.RegionId.Equals(regionId));
		}

		public static Region? Find(this TestDataDB db, Region @record)
		{
			return db.GetTable<Region>().FirstOrDefault(e => e.RegionId.Equals(@record.RegionId));
		}

		public static Task<Region?> FindAsync(this TestDataDB db, Region @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Region>().FirstOrDefaultAsync(e => e.RegionId.Equals(@record.RegionId), cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this TestDataDB db, Region @record)
		{
			return db.GetTable<Region>().Where(e => e.RegionId.Equals(@record.RegionId));
		}

		public static Shipper? Find(this ITable<Shipper> table, SqlInt32 shipperId)
		{
			return table.FirstOrDefault(e => e.ShipperId.Equals(shipperId));
		}

		public static Task<Shipper?> FindAsync(this ITable<Shipper> table, SqlInt32 shipperId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ShipperId.Equals(shipperId), cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this ITable<Shipper> table, SqlInt32 shipperId)
		{
			return table.Where(e => e.ShipperId.Equals(shipperId));
		}

		public static Shipper? Find(this ITable<Shipper> table, Shipper @record)
		{
			return table.FirstOrDefault(e => e.ShipperId.Equals(@record.ShipperId));
		}

		public static Task<Shipper?> FindAsync(this ITable<Shipper> table, Shipper @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ShipperId.Equals(@record.ShipperId), cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this ITable<Shipper> table, Shipper @record)
		{
			return table.Where(e => e.ShipperId.Equals(@record.ShipperId));
		}

		public static Shipper? FindShipper(this TestDataDB db, SqlInt32 shipperId)
		{
			return db.GetTable<Shipper>().FirstOrDefault(e => e.ShipperId.Equals(shipperId));
		}

		public static Task<Shipper?> FindShipperAsync(this TestDataDB db, SqlInt32 shipperId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Shipper>().FirstOrDefaultAsync(e => e.ShipperId.Equals(shipperId), cancellationToken);
		}

		public static IQueryable<Shipper> FindShipperQuery(this TestDataDB db, SqlInt32 shipperId)
		{
			return db.GetTable<Shipper>().Where(e => e.ShipperId.Equals(shipperId));
		}

		public static Shipper? Find(this TestDataDB db, Shipper @record)
		{
			return db.GetTable<Shipper>().FirstOrDefault(e => e.ShipperId.Equals(@record.ShipperId));
		}

		public static Task<Shipper?> FindAsync(this TestDataDB db, Shipper @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Shipper>().FirstOrDefaultAsync(e => e.ShipperId.Equals(@record.ShipperId), cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this TestDataDB db, Shipper @record)
		{
			return db.GetTable<Shipper>().Where(e => e.ShipperId.Equals(@record.ShipperId));
		}

		public static Supplier? Find(this ITable<Supplier> table, SqlInt32 supplierId)
		{
			return table.FirstOrDefault(e => e.SupplierId.Equals(supplierId));
		}

		public static Task<Supplier?> FindAsync(this ITable<Supplier> table, SqlInt32 supplierId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.SupplierId.Equals(supplierId), cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this ITable<Supplier> table, SqlInt32 supplierId)
		{
			return table.Where(e => e.SupplierId.Equals(supplierId));
		}

		public static Supplier? Find(this ITable<Supplier> table, Supplier @record)
		{
			return table.FirstOrDefault(e => e.SupplierId.Equals(@record.SupplierId));
		}

		public static Task<Supplier?> FindAsync(this ITable<Supplier> table, Supplier @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.SupplierId.Equals(@record.SupplierId), cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this ITable<Supplier> table, Supplier @record)
		{
			return table.Where(e => e.SupplierId.Equals(@record.SupplierId));
		}

		public static Supplier? FindSupplier(this TestDataDB db, SqlInt32 supplierId)
		{
			return db.GetTable<Supplier>().FirstOrDefault(e => e.SupplierId.Equals(supplierId));
		}

		public static Task<Supplier?> FindSupplierAsync(this TestDataDB db, SqlInt32 supplierId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Supplier>().FirstOrDefaultAsync(e => e.SupplierId.Equals(supplierId), cancellationToken);
		}

		public static IQueryable<Supplier> FindSupplierQuery(this TestDataDB db, SqlInt32 supplierId)
		{
			return db.GetTable<Supplier>().Where(e => e.SupplierId.Equals(supplierId));
		}

		public static Supplier? Find(this TestDataDB db, Supplier @record)
		{
			return db.GetTable<Supplier>().FirstOrDefault(e => e.SupplierId.Equals(@record.SupplierId));
		}

		public static Task<Supplier?> FindAsync(this TestDataDB db, Supplier @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Supplier>().FirstOrDefaultAsync(e => e.SupplierId.Equals(@record.SupplierId), cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this TestDataDB db, Supplier @record)
		{
			return db.GetTable<Supplier>().Where(e => e.SupplierId.Equals(@record.SupplierId));
		}

		public static Territory? Find(this ITable<Territory> table, SqlString territoryId)
		{
			return table.FirstOrDefault(e => e.TerritoryId.Equals(territoryId));
		}

		public static Task<Territory?> FindAsync(this ITable<Territory> table, SqlString territoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TerritoryId.Equals(territoryId), cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this ITable<Territory> table, SqlString territoryId)
		{
			return table.Where(e => e.TerritoryId.Equals(territoryId));
		}

		public static Territory? Find(this ITable<Territory> table, Territory @record)
		{
			return table.FirstOrDefault(e => e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Task<Territory?> FindAsync(this ITable<Territory> table, Territory @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TerritoryId.Equals(@record.TerritoryId), cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this ITable<Territory> table, Territory @record)
		{
			return table.Where(e => e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Territory? FindTerritory(this TestDataDB db, SqlString territoryId)
		{
			return db.GetTable<Territory>().FirstOrDefault(e => e.TerritoryId.Equals(territoryId));
		}

		public static Task<Territory?> FindTerritoryAsync(this TestDataDB db, SqlString territoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Territory>().FirstOrDefaultAsync(e => e.TerritoryId.Equals(territoryId), cancellationToken);
		}

		public static IQueryable<Territory> FindTerritoryQuery(this TestDataDB db, SqlString territoryId)
		{
			return db.GetTable<Territory>().Where(e => e.TerritoryId.Equals(territoryId));
		}

		public static Territory? Find(this TestDataDB db, Territory @record)
		{
			return db.GetTable<Territory>().FirstOrDefault(e => e.TerritoryId.Equals(@record.TerritoryId));
		}

		public static Task<Territory?> FindAsync(this TestDataDB db, Territory @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Territory>().FirstOrDefaultAsync(e => e.TerritoryId.Equals(@record.TerritoryId), cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this TestDataDB db, Territory @record)
		{
			return db.GetTable<Territory>().Where(e => e.TerritoryId.Equals(@record.TerritoryId));
		}
		#endregion

		#region Associations
		#region CustomerCustomerDemo Associations
		/// <summary>
		/// FK_CustomerCustomerDemo
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(CustomerCustomerDemo.CustomerTypeId), OtherKey = nameof(CustomerDemographic.CustomerTypeId))]
		public static CustomerDemographic FkCustomerCustomerDemo(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<CustomerDemographic>().First(t => obj.CustomerTypeId.Equals(t.CustomerTypeId));
		}

		/// <summary>
		/// FK_CustomerCustomerDemo_Customers
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(CustomerCustomerDemo.CustomerId), OtherKey = nameof(SqlServerNorthwind.Customer.CustomerId))]
		public static Customer Customers(this CustomerCustomerDemo obj, IDataContext db)
		{
			return db.GetTable<Customer>().First(t => obj.CustomerId.Equals(t.CustomerId));
		}
		#endregion

		#region CustomerDemographic Associations
		/// <summary>
		/// FK_CustomerCustomerDemo backreference
		/// </summary>
		[Association(ThisKey = nameof(CustomerDemographic.CustomerTypeId), OtherKey = nameof(CustomerCustomerDemo.CustomerTypeId))]
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this CustomerDemographic obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerTypeId.Equals(obj.CustomerTypeId));
		}
		#endregion

		#region Customer Associations
		/// <summary>
		/// FK_CustomerCustomerDemo_Customers backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Customer.CustomerId), OtherKey = nameof(CustomerCustomerDemo.CustomerId))]
		public static IQueryable<CustomerCustomerDemo> CustomerCustomerDemos(this Customer obj, IDataContext db)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(t => t.CustomerId.Equals(obj.CustomerId));
		}

		/// <summary>
		/// FK_Orders_Customers backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Customer.CustomerId), OtherKey = nameof(Order.CustomerId))]
		public static IQueryable<Order> Orders(this Customer obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.CustomerId.Equals(obj.CustomerId));
		}
		#endregion

		#region Employee Associations
		/// <summary>
		/// FK_Employees_Employees
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Employee.ReportsTo), OtherKey = nameof(SqlServerNorthwind.Employee.EmployeeId))]
		public static Employee? Employees(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.ReportsTo.Equals(t.EmployeeId));
		}

		/// <summary>
		/// FK_Employees_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Employee.EmployeeId), OtherKey = nameof(SqlServerNorthwind.Employee.ReportsTo))]
		public static IQueryable<Employee> Employees1(this Employee obj, IDataContext db)
		{
			return db.GetTable<Employee>().Where(t => t.ReportsTo.Equals(obj.EmployeeId));
		}

		/// <summary>
		/// FK_EmployeeTerritories_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Employee.EmployeeId), OtherKey = nameof(EmployeeTerritory.EmployeeId))]
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Employee obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.EmployeeId.Equals(obj.EmployeeId));
		}

		/// <summary>
		/// FK_Orders_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Employee.EmployeeId), OtherKey = nameof(Order.EmployeeId))]
		public static IQueryable<Order> Orders(this Employee obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.EmployeeId.Equals(obj.EmployeeId));
		}
		#endregion

		#region EmployeeTerritory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Employees
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(EmployeeTerritory.EmployeeId), OtherKey = nameof(SqlServerNorthwind.Employee.EmployeeId))]
		public static Employee Employees(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Employee>().First(t => obj.EmployeeId.Equals(t.EmployeeId));
		}

		/// <summary>
		/// FK_EmployeeTerritories_Territories
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(EmployeeTerritory.TerritoryId), OtherKey = nameof(Territory.TerritoryId))]
		public static Territory Territories(this EmployeeTerritory obj, IDataContext db)
		{
			return db.GetTable<Territory>().First(t => obj.TerritoryId.Equals(t.TerritoryId));
		}
		#endregion

		#region Territory Associations
		/// <summary>
		/// FK_EmployeeTerritories_Territories backreference
		/// </summary>
		[Association(ThisKey = nameof(Territory.TerritoryId), OtherKey = nameof(EmployeeTerritory.TerritoryId))]
		public static IQueryable<EmployeeTerritory> EmployeeTerritories(this Territory obj, IDataContext db)
		{
			return db.GetTable<EmployeeTerritory>().Where(t => t.TerritoryId.Equals(obj.TerritoryId));
		}

		/// <summary>
		/// FK_Territories_Region
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Territory.RegionId), OtherKey = nameof(SqlServerNorthwind.Region.RegionId))]
		public static Region Region(this Territory obj, IDataContext db)
		{
			return db.GetTable<Region>().First(t => obj.RegionId.Equals(t.RegionId));
		}
		#endregion

		#region Order Detail Associations
		/// <summary>
		/// FK_Order_Details_Orders
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(OrderDetail.OrderId), OtherKey = nameof(Order.OrderId))]
		public static Order OrderDetailsOrders(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Order>().First(t => obj.OrderId.Equals(t.OrderId));
		}

		/// <summary>
		/// FK_Order_Details_Products
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(OrderDetail.ProductId), OtherKey = nameof(Product.ProductId))]
		public static Product OrderDetailsProducts(this OrderDetail obj, IDataContext db)
		{
			return db.GetTable<Product>().First(t => obj.ProductId.Equals(t.ProductId));
		}
		#endregion

		#region Order Associations
		/// <summary>
		/// FK_Order_Details_Orders backreference
		/// </summary>
		[Association(ThisKey = nameof(Order.OrderId), OtherKey = nameof(OrderDetail.OrderId))]
		public static IQueryable<OrderDetail> OrderDetails(this Order obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.OrderId.Equals(obj.OrderId));
		}

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		[Association(ThisKey = nameof(Order.CustomerId), OtherKey = nameof(SqlServerNorthwind.Customer.CustomerId))]
		public static Customer? Customer(this Order obj, IDataContext db)
		{
			return db.GetTable<Customer>().FirstOrDefault(t => obj.CustomerId.Equals(t.CustomerId));
		}

		/// <summary>
		/// FK_Orders_Employees
		/// </summary>
		[Association(ThisKey = nameof(Order.EmployeeId), OtherKey = nameof(SqlServerNorthwind.Employee.EmployeeId))]
		public static Employee? Employee(this Order obj, IDataContext db)
		{
			return db.GetTable<Employee>().FirstOrDefault(t => obj.EmployeeId.Equals(t.EmployeeId));
		}

		/// <summary>
		/// FK_Orders_Shippers
		/// </summary>
		[Association(ThisKey = nameof(Order.ShipVia), OtherKey = nameof(Shipper.ShipperId))]
		public static Shipper? Shippers(this Order obj, IDataContext db)
		{
			return db.GetTable<Shipper>().FirstOrDefault(t => obj.ShipVia.Equals(t.ShipperId));
		}
		#endregion

		#region Product Associations
		/// <summary>
		/// FK_Order_Details_Products backreference
		/// </summary>
		[Association(ThisKey = nameof(Product.ProductId), OtherKey = nameof(OrderDetail.ProductId))]
		public static IQueryable<OrderDetail> OrderDetails1(this Product obj, IDataContext db)
		{
			return db.GetTable<OrderDetail>().Where(t => t.ProductId.Equals(obj.ProductId));
		}

		/// <summary>
		/// FK_Products_Categories
		/// </summary>
		[Association(ThisKey = nameof(Product.CategoryId), OtherKey = nameof(SqlServerNorthwind.Category.CategoryId))]
		public static Category? Category(this Product obj, IDataContext db)
		{
			return db.GetTable<Category>().FirstOrDefault(t => obj.CategoryId.Equals(t.CategoryId));
		}

		/// <summary>
		/// FK_Products_Suppliers
		/// </summary>
		[Association(ThisKey = nameof(Product.SupplierId), OtherKey = nameof(SqlServerNorthwind.Supplier.SupplierId))]
		public static Supplier? Supplier(this Product obj, IDataContext db)
		{
			return db.GetTable<Supplier>().FirstOrDefault(t => obj.SupplierId.Equals(t.SupplierId));
		}
		#endregion

		#region Shipper Associations
		/// <summary>
		/// FK_Orders_Shippers backreference
		/// </summary>
		[Association(ThisKey = nameof(Shipper.ShipperId), OtherKey = nameof(Order.ShipVia))]
		public static IQueryable<Order> Orders(this Shipper obj, IDataContext db)
		{
			return db.GetTable<Order>().Where(t => t.ShipVia.Equals(obj.ShipperId));
		}
		#endregion

		#region Category Associations
		/// <summary>
		/// FK_Products_Categories backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Category.CategoryId), OtherKey = nameof(Product.CategoryId))]
		public static IQueryable<Product> Products(this Category obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.CategoryId.Equals(obj.CategoryId));
		}
		#endregion

		#region Supplier Associations
		/// <summary>
		/// FK_Products_Suppliers backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Supplier.SupplierId), OtherKey = nameof(Product.SupplierId))]
		public static IQueryable<Product> Products(this Supplier obj, IDataContext db)
		{
			return db.GetTable<Product>().Where(t => t.SupplierId.Equals(obj.SupplierId));
		}
		#endregion

		#region Region Associations
		/// <summary>
		/// FK_Territories_Region backreference
		/// </summary>
		[Association(ThisKey = nameof(SqlServerNorthwind.Region.RegionId), OtherKey = nameof(Territory.RegionId))]
		public static IQueryable<Territory> Territories(this Region obj, IDataContext db)
		{
			return db.GetTable<Territory>().Where(t => t.RegionId.Equals(obj.RegionId));
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region CustOrderHist
		public static IEnumerable<CustOrderHistResult> CustOrderHist(this TestDataDB dataConnection, SqlString? customerId, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					DbType = "nchar(5)",
					Size = 5
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<CustOrderHistResult>("[CustOrderHist]", parameters).ToList();
		}

		public static async Task<CustOrderHistResults> CustOrderHistAsync(this TestDataDB dataConnection, SqlString? customerId, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					DbType = "nchar(5)",
					Size = 5
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<CustOrderHistResult>("[CustOrderHist]", cancellationToken, parameters);
			return new CustOrderHistResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class CustOrderHistResult
		{
			[Column("ProductName", DataType = DataType.NVarChar, DbType = "nvarchar(40)")] public SqlString ProductName { get; set; }
			[Column("Total"      , DataType = DataType.Int32   , DbType = "int"         )] public SqlInt32? Total       { get; set; }
		}

		public class CustOrderHistResults
		{
			public IEnumerable<CustOrderHistResult> Result { get; set; } = null!;
			public int                              Return { get; set; }
		}
		#endregion

		#region CustOrdersDetail
		public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this TestDataDB dataConnection, SqlInt32? orderId, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<CustOrdersDetailResult>("[CustOrdersDetail]", parameters).ToList();
		}

		public static async Task<CustOrdersDetailResults> CustOrdersDetailAsync(this TestDataDB dataConnection, SqlInt32? orderId, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@OrderID", orderId, DataType.Int32)
				{
					DbType = "int"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<CustOrdersDetailResult>("[CustOrdersDetail]", cancellationToken, parameters);
			return new CustOrdersDetailResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class CustOrdersDetailResult
		{
			[Column("ProductName"  , DataType = DataType.NVarChar, DbType = "nvarchar(40)")] public SqlString ProductName   { get; set; }
			[Column("UnitPrice"    , DataType = DataType.Money   , DbType = "money"       )] public SqlMoney  UnitPrice     { get; set; }
			[Column("Quantity"     , DataType = DataType.Int16   , DbType = "smallint"    )] public SqlInt16  Quantity      { get; set; }
			[Column("Discount"     , DataType = DataType.Int32   , DbType = "int"         )] public SqlInt32? Discount      { get; set; }
			[Column("ExtendedPrice", DataType = DataType.Money   , DbType = "money"       )] public SqlMoney? ExtendedPrice { get; set; }
		}

		public class CustOrdersDetailResults
		{
			public IEnumerable<CustOrdersDetailResult> Result { get; set; } = null!;
			public int                                 Return { get; set; }
		}
		#endregion

		#region CustOrdersOrders
		public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this TestDataDB dataConnection, SqlString? customerId, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					DbType = "nchar(5)",
					Size = 5
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[1].Value);
			return dataConnection.QueryProc<CustOrdersOrdersResult>("[CustOrdersOrders]", parameters).ToList();
		}

		public static async Task<CustOrdersOrdersResults> CustOrdersOrdersAsync(this TestDataDB dataConnection, SqlString? customerId, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CustomerID", customerId, DataType.NChar)
				{
					DbType = "nchar(5)",
					Size = 5
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<CustOrdersOrdersResult>("[CustOrdersOrders]", cancellationToken, parameters);
			return new CustOrdersOrdersResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[1].Value)
			};
		}

		public partial class CustOrdersOrdersResult
		{
			[Column("OrderID"     , DataType = DataType.Int32   , DbType = "int"     )] public SqlInt32     OrderId      { get; set; }
			[Column("OrderDate"   , DataType = DataType.DateTime, DbType = "datetime")] public SqlDateTime? OrderDate    { get; set; }
			[Column("RequiredDate", DataType = DataType.DateTime, DbType = "datetime")] public SqlDateTime? RequiredDate { get; set; }
			[Column("ShippedDate" , DataType = DataType.DateTime, DbType = "datetime")] public SqlDateTime? ShippedDate  { get; set; }
		}

		public class CustOrdersOrdersResults
		{
			public IEnumerable<CustOrdersOrdersResult> Result { get; set; } = null!;
			public int                                 Return { get; set; }
		}
		#endregion

		#region Employee Sales By Country
		public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this TestDataDB dataConnection, SqlDateTime? beginningDate, SqlDateTime? endingDate, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[Employee Sales by Country]", parameters).ToList();
		}

		public static async Task<EmployeeSalesByCountryResults> EmployeeSalesByCountryAsync(this TestDataDB dataConnection, SqlDateTime? beginningDate, SqlDateTime? endingDate, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<EmployeeSalesByCountryResult>("[Employee Sales by Country]", cancellationToken, parameters);
			return new EmployeeSalesByCountryResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class EmployeeSalesByCountryResult
		{
			[Column("Country"    , DataType = DataType.NVarChar, DbType = "nvarchar(15)")] public SqlString?   Country     { get; set; }
			[Column("LastName"   , DataType = DataType.NVarChar, DbType = "nvarchar(20)")] public SqlString    LastName    { get; set; }
			[Column("FirstName"  , DataType = DataType.NVarChar, DbType = "nvarchar(10)")] public SqlString    FirstName   { get; set; }
			[Column("ShippedDate", DataType = DataType.DateTime, DbType = "datetime"    )] public SqlDateTime? ShippedDate { get; set; }
			[Column("OrderID"    , DataType = DataType.Int32   , DbType = "int"         )] public SqlInt32     OrderId     { get; set; }
			[Column("SaleAmount" , DataType = DataType.Money   , DbType = "money"       )] public SqlMoney?    SaleAmount  { get; set; }
		}

		public class EmployeeSalesByCountryResults
		{
			public IEnumerable<EmployeeSalesByCountryResult> Result { get; set; } = null!;
			public int                                       Return { get; set; }
		}
		#endregion

		#region Sales By Year
		public static IEnumerable<SalesByYearResult> SalesByYear(this TestDataDB dataConnection, SqlDateTime? beginningDate, SqlDateTime? endingDate, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<SalesByYearResult>("[Sales by Year]", parameters).ToList();
		}

		public static async Task<SalesByYearResults> SalesByYearAsync(this TestDataDB dataConnection, SqlDateTime? beginningDate, SqlDateTime? endingDate, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Beginning_Date", beginningDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@Ending_Date", endingDate, DataType.DateTime)
				{
					DbType = "datetime"
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<SalesByYearResult>("[Sales by Year]", cancellationToken, parameters);
			return new SalesByYearResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class SalesByYearResult
		{
			[Column("ShippedDate", DataType = DataType.DateTime, DbType = "datetime"    )] public SqlDateTime? ShippedDate { get; set; }
			[Column("OrderID"    , DataType = DataType.Int32   , DbType = "int"         )] public SqlInt32     OrderId     { get; set; }
			[Column("Subtotal"   , DataType = DataType.Money   , DbType = "money"       )] public SqlMoney?    Subtotal    { get; set; }
			[Column("Year"       , DataType = DataType.NVarChar, DbType = "nvarchar(30)")] public SqlString?   Year        { get; set; }
		}

		public class SalesByYearResults
		{
			public IEnumerable<SalesByYearResult> Result { get; set; } = null!;
			public int                            Return { get; set; }
		}
		#endregion

		#region SalesByCategory
		public static IEnumerable<SalesByCategoryResult> SalesByCategory(this TestDataDB dataConnection, SqlString? categoryName, SqlString? ordYear, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					DbType = "nvarchar(15)",
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					DbType = "nvarchar(4)",
					Size = 4
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[2].Value);
			return dataConnection.QueryProc<SalesByCategoryResult>("[SalesByCategory]", parameters).ToList();
		}

		public static async Task<SalesByCategoryResults> SalesByCategoryAsync(this TestDataDB dataConnection, SqlString? categoryName, SqlString? ordYear, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@CategoryName", categoryName, DataType.NVarChar)
				{
					DbType = "nvarchar(15)",
					Size = 15
				},
				new DataParameter("@OrdYear", ordYear, DataType.NVarChar)
				{
					DbType = "nvarchar(4)",
					Size = 4
				},
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<SalesByCategoryResult>("[SalesByCategory]", cancellationToken, parameters);
			return new SalesByCategoryResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[2].Value)
			};
		}

		public partial class SalesByCategoryResult
		{
			[Column("ProductName"  , DataType = DataType.NVarChar, DbType = "nvarchar(40)"  )] public SqlString   ProductName   { get; set; }
			[Column("TotalPurchase", DataType = DataType.Decimal , DbType = "decimal(38, 2)")] public SqlDecimal? TotalPurchase { get; set; }
		}

		public class SalesByCategoryResults
		{
			public IEnumerable<SalesByCategoryResult> Result { get; set; } = null!;
			public int                                Return { get; set; }
		}
		#endregion

		#region Ten Most Expensive Products
		public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this TestDataDB dataConnection, out int @return)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			@return = Converter.ChangeTypeTo<int>(parameters[0].Value);
			return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]", parameters).ToList();
		}

		public static async Task<TenMostExpensiveProductsResults> TenMostExpensiveProductsAsync(this TestDataDB dataConnection, int @return, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@return", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT",
					Size = 0,
					Precision = 0,
					Scale = 0
				}
			};
			var result = await dataConnection.QueryProcAsync<TenMostExpensiveProductsResult>("[Ten Most Expensive Products]", cancellationToken, parameters);
			return new TenMostExpensiveProductsResults()
			{
				Result = result.ToList(),
				Return = Converter.ChangeTypeTo<int>(parameters[0].Value)
			};
		}

		public partial class TenMostExpensiveProductsResult
		{
			[Column("TenMostExpensiveProducts", DataType = DataType.NVarChar, DbType = "nvarchar(40)")] public SqlString TenMostExpensiveProducts { get; set; }
			[Column("UnitPrice"               , DataType = DataType.Money   , DbType = "money"       )] public SqlMoney? UnitPrice                { get; set; }
		}

		public class TenMostExpensiveProductsResults
		{
			public IEnumerable<TenMostExpensiveProductsResult> Result { get; set; } = null!;
			public int                                         Return { get; set; }
		}
		#endregion
		#endregion
	}
}
