// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlServerNorthwind
{
	[Table("Employees")]
	public class Employee : IEquatable<Employee>
	{
		[Column("EmployeeID"     , DataType = DataType.Int32   , DbType = "int"          , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public SqlInt32     EmployeeId      { get; set; } // int
		[Column("LastName"       , DataType = DataType.NVarChar, DbType = "nvarchar(20)" , Length       = 20                                                               )] public SqlString    LastName        { get; set; } // nvarchar(20)
		[Column("FirstName"      , DataType = DataType.NVarChar, DbType = "nvarchar(10)" , Length       = 10                                                               )] public SqlString    FirstName       { get; set; } // nvarchar(10)
		[Column("Title"          , DataType = DataType.NVarChar, DbType = "nvarchar(30)" , Length       = 30                                                               )] public SqlString?   Title           { get; set; } // nvarchar(30)
		[Column("TitleOfCourtesy", DataType = DataType.NVarChar, DbType = "nvarchar(25)" , Length       = 25                                                               )] public SqlString?   TitleOfCourtesy { get; set; } // nvarchar(25)
		[Column("BirthDate"      , DataType = DataType.DateTime, DbType = "datetime"                                                                                       )] public SqlDateTime? BirthDate       { get; set; } // datetime
		[Column("HireDate"       , DataType = DataType.DateTime, DbType = "datetime"                                                                                       )] public SqlDateTime? HireDate        { get; set; } // datetime
		[Column("Address"        , DataType = DataType.NVarChar, DbType = "nvarchar(60)" , Length       = 60                                                               )] public SqlString?   Address         { get; set; } // nvarchar(60)
		[Column("City"           , DataType = DataType.NVarChar, DbType = "nvarchar(15)" , Length       = 15                                                               )] public SqlString?   City            { get; set; } // nvarchar(15)
		[Column("Region"         , DataType = DataType.NVarChar, DbType = "nvarchar(15)" , Length       = 15                                                               )] public SqlString?   Region          { get; set; } // nvarchar(15)
		[Column("PostalCode"     , DataType = DataType.NVarChar, DbType = "nvarchar(10)" , Length       = 10                                                               )] public SqlString?   PostalCode      { get; set; } // nvarchar(10)
		[Column("Country"        , DataType = DataType.NVarChar, DbType = "nvarchar(15)" , Length       = 15                                                               )] public SqlString?   Country         { get; set; } // nvarchar(15)
		[Column("HomePhone"      , DataType = DataType.NVarChar, DbType = "nvarchar(24)" , Length       = 24                                                               )] public SqlString?   HomePhone       { get; set; } // nvarchar(24)
		[Column("Extension"      , DataType = DataType.NVarChar, DbType = "nvarchar(4)"  , Length       = 4                                                                )] public SqlString?   Extension       { get; set; } // nvarchar(4)
		[Column("Photo"          , DataType = DataType.Image   , DbType = "image"                                                                                          )] public SqlBinary?   Photo           { get; set; } // image
		[Column("Notes"          , DataType = DataType.NText   , DbType = "ntext"                                                                                          )] public SqlString?   Notes           { get; set; } // ntext
		[Column("ReportsTo"      , DataType = DataType.Int32   , DbType = "int"                                                                                            )] public SqlInt32?    ReportsTo       { get; set; } // int
		[Column("PhotoPath"      , DataType = DataType.NVarChar, DbType = "nvarchar(255)", Length       = 255                                                              )] public SqlString?   PhotoPath       { get; set; } // nvarchar(255)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Employee> _equalityComparer = ComparerBuilder.GetEqualityComparer<Employee>(c => c.EmployeeId);

		public bool Equals(Employee? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Employee);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Employees_Employees
		/// </summary>
		[Association(ThisKey = nameof(ReportsTo), OtherKey = nameof(EmployeeId))]
		public Employee? Employees { get; set; }

		/// <summary>
		/// FK_Employees_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(EmployeeId), OtherKey = nameof(ReportsTo))]
		public IEnumerable<Employee> Employees1 { get; set; } = null!;

		/// <summary>
		/// FK_EmployeeTerritories_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(EmployeeId), OtherKey = nameof(EmployeeTerritory.EmployeeId))]
		public IEnumerable<EmployeeTerritory> EmployeeTerritories { get; set; } = null!;

		/// <summary>
		/// FK_Orders_Employees backreference
		/// </summary>
		[Association(ThisKey = nameof(EmployeeId), OtherKey = nameof(Order.EmployeeId))]
		public IEnumerable<Order> Orders { get; set; } = null!;
		#endregion
	}
}
