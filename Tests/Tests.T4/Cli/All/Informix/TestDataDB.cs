// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Alltype>           Alltypes            => this.GetTable<Alltype>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<Collatedtable>     Collatedtables      => this.GetTable<Collatedtable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Grandchild>        Grandchildren       => this.GetTable<Grandchild>();
		public ITable<Inheritancechild>  Inheritancechildren => this.GetTable<Inheritancechild>();
		public ITable<Inheritanceparent> Inheritanceparents  => this.GetTable<Inheritanceparent>();
		public ITable<Linqdatatype>      Linqdatatypes       => this.GetTable<Linqdatatype>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<Testfkunique>      Testfkuniques       => this.GetTable<Testfkunique>();
		public ITable<Testidentity>      Testidentities      => this.GetTable<Testidentity>();
		public ITable<Testmerge1>        Testmerge1          => this.GetTable<Testmerge1>();
		public ITable<Testmerge2>        Testmerge2          => this.GetTable<Testmerge2>();
		public ITable<Testunique>        Testuniques         => this.GetTable<Testunique>();
		public ITable<Personview>        Personviews         => this.GetTable<Personview>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Alltype? Find(this ITable<Alltype> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Alltype?> FindAsync(this ITable<Alltype> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this ITable<Alltype> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Alltype? Find(this ITable<Alltype> table, Alltype @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Alltype?> FindAsync(this ITable<Alltype> table, Alltype @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this ITable<Alltype> table, Alltype @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Alltype? FindAlltype(this TestDataDB db, int id)
		{
			return db.GetTable<Alltype>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Alltype?> FindAlltypeAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Alltype>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Alltype> FindAlltypeQuery(this TestDataDB db, int id)
		{
			return db.GetTable<Alltype>().Where(e => e.Id == id);
		}

		public static Alltype? Find(this TestDataDB db, Alltype @record)
		{
			return db.GetTable<Alltype>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Alltype?> FindAsync(this TestDataDB db, Alltype @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Alltype>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this TestDataDB db, Alltype @record)
		{
			return db.GetTable<Alltype>().Where(e => e.Id == @record.Id);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personid)
		{
			return table.FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, int personid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, int personid)
		{
			return table.Where(e => e.Personid == personid);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.Personid == @record.Personid);
		}

		public static Doctor? FindDoctor(this TestDataDB db, int personid)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, int personid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, int personid)
		{
			return db.GetTable<Doctor>().Where(e => e.Personid == personid);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.Personid == @record.Personid);
		}

		public static Inheritancechild? Find(this ITable<Inheritancechild> table, int inheritancechildid)
		{
			return table.FirstOrDefault(e => e.Inheritancechildid == inheritancechildid);
		}

		public static Task<Inheritancechild?> FindAsync(this ITable<Inheritancechild> table, int inheritancechildid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Inheritancechildid == inheritancechildid, cancellationToken);
		}

		public static IQueryable<Inheritancechild> FindQuery(this ITable<Inheritancechild> table, int inheritancechildid)
		{
			return table.Where(e => e.Inheritancechildid == inheritancechildid);
		}

		public static Inheritancechild? Find(this ITable<Inheritancechild> table, Inheritancechild @record)
		{
			return table.FirstOrDefault(e => e.Inheritancechildid == @record.Inheritancechildid);
		}

		public static Task<Inheritancechild?> FindAsync(this ITable<Inheritancechild> table, Inheritancechild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Inheritancechildid == @record.Inheritancechildid, cancellationToken);
		}

		public static IQueryable<Inheritancechild> FindQuery(this ITable<Inheritancechild> table, Inheritancechild @record)
		{
			return table.Where(e => e.Inheritancechildid == @record.Inheritancechildid);
		}

		public static Inheritancechild? FindInheritancechild(this TestDataDB db, int inheritancechildid)
		{
			return db.GetTable<Inheritancechild>().FirstOrDefault(e => e.Inheritancechildid == inheritancechildid);
		}

		public static Task<Inheritancechild?> FindInheritancechildAsync(this TestDataDB db, int inheritancechildid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Inheritancechild>().FirstOrDefaultAsync(e => e.Inheritancechildid == inheritancechildid, cancellationToken);
		}

		public static IQueryable<Inheritancechild> FindInheritancechildQuery(this TestDataDB db, int inheritancechildid)
		{
			return db.GetTable<Inheritancechild>().Where(e => e.Inheritancechildid == inheritancechildid);
		}

		public static Inheritancechild? Find(this TestDataDB db, Inheritancechild @record)
		{
			return db.GetTable<Inheritancechild>().FirstOrDefault(e => e.Inheritancechildid == @record.Inheritancechildid);
		}

		public static Task<Inheritancechild?> FindAsync(this TestDataDB db, Inheritancechild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Inheritancechild>().FirstOrDefaultAsync(e => e.Inheritancechildid == @record.Inheritancechildid, cancellationToken);
		}

		public static IQueryable<Inheritancechild> FindQuery(this TestDataDB db, Inheritancechild @record)
		{
			return db.GetTable<Inheritancechild>().Where(e => e.Inheritancechildid == @record.Inheritancechildid);
		}

		public static Inheritanceparent? Find(this ITable<Inheritanceparent> table, int inheritanceparentid)
		{
			return table.FirstOrDefault(e => e.Inheritanceparentid == inheritanceparentid);
		}

		public static Task<Inheritanceparent?> FindAsync(this ITable<Inheritanceparent> table, int inheritanceparentid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Inheritanceparentid == inheritanceparentid, cancellationToken);
		}

		public static IQueryable<Inheritanceparent> FindQuery(this ITable<Inheritanceparent> table, int inheritanceparentid)
		{
			return table.Where(e => e.Inheritanceparentid == inheritanceparentid);
		}

		public static Inheritanceparent? Find(this ITable<Inheritanceparent> table, Inheritanceparent @record)
		{
			return table.FirstOrDefault(e => e.Inheritanceparentid == @record.Inheritanceparentid);
		}

		public static Task<Inheritanceparent?> FindAsync(this ITable<Inheritanceparent> table, Inheritanceparent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Inheritanceparentid == @record.Inheritanceparentid, cancellationToken);
		}

		public static IQueryable<Inheritanceparent> FindQuery(this ITable<Inheritanceparent> table, Inheritanceparent @record)
		{
			return table.Where(e => e.Inheritanceparentid == @record.Inheritanceparentid);
		}

		public static Inheritanceparent? FindInheritanceparent(this TestDataDB db, int inheritanceparentid)
		{
			return db.GetTable<Inheritanceparent>().FirstOrDefault(e => e.Inheritanceparentid == inheritanceparentid);
		}

		public static Task<Inheritanceparent?> FindInheritanceparentAsync(this TestDataDB db, int inheritanceparentid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Inheritanceparent>().FirstOrDefaultAsync(e => e.Inheritanceparentid == inheritanceparentid, cancellationToken);
		}

		public static IQueryable<Inheritanceparent> FindInheritanceparentQuery(this TestDataDB db, int inheritanceparentid)
		{
			return db.GetTable<Inheritanceparent>().Where(e => e.Inheritanceparentid == inheritanceparentid);
		}

		public static Inheritanceparent? Find(this TestDataDB db, Inheritanceparent @record)
		{
			return db.GetTable<Inheritanceparent>().FirstOrDefault(e => e.Inheritanceparentid == @record.Inheritanceparentid);
		}

		public static Task<Inheritanceparent?> FindAsync(this TestDataDB db, Inheritanceparent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Inheritanceparent>().FirstOrDefaultAsync(e => e.Inheritanceparentid == @record.Inheritanceparentid, cancellationToken);
		}

		public static IQueryable<Inheritanceparent> FindQuery(this TestDataDB db, Inheritanceparent @record)
		{
			return db.GetTable<Inheritanceparent>().Where(e => e.Inheritanceparentid == @record.Inheritanceparentid);
		}

		public static Patient? Find(this ITable<Patient> table, int personid)
		{
			return table.FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, int personid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, int personid)
		{
			return table.Where(e => e.Personid == personid);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.Personid == @record.Personid);
		}

		public static Patient? FindPatient(this TestDataDB db, int personid)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, int personid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, int personid)
		{
			return db.GetTable<Patient>().Where(e => e.Personid == personid);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.Personid == @record.Personid);
		}

		public static Person? Find(this ITable<Person> table, int personid)
		{
			return table.FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, int personid, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, int personid)
		{
			return table.Where(e => e.Personid == personid);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.Personid == @record.Personid);
		}

		public static Person? FindPerson(this TestDataDB db, int personid)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.Personid == personid);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, int personid, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.Personid == personid, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, int personid)
		{
			return db.GetTable<Person>().Where(e => e.Personid == personid);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.Personid == @record.Personid);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.Personid == @record.Personid, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.Personid == @record.Personid);
		}

		public static Testidentity? Find(this ITable<Testidentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testidentity?> FindAsync(this ITable<Testidentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testidentity> FindQuery(this ITable<Testidentity> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Testidentity? Find(this ITable<Testidentity> table, Testidentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testidentity?> FindAsync(this ITable<Testidentity> table, Testidentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testidentity> FindQuery(this ITable<Testidentity> table, Testidentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Testidentity? FindTestidentity(this TestDataDB db, int id)
		{
			return db.GetTable<Testidentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testidentity?> FindTestidentityAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testidentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testidentity> FindTestidentityQuery(this TestDataDB db, int id)
		{
			return db.GetTable<Testidentity>().Where(e => e.Id == id);
		}

		public static Testidentity? Find(this TestDataDB db, Testidentity @record)
		{
			return db.GetTable<Testidentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testidentity?> FindAsync(this TestDataDB db, Testidentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testidentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testidentity> FindQuery(this TestDataDB db, Testidentity @record)
		{
			return db.GetTable<Testidentity>().Where(e => e.Id == @record.Id);
		}

		public static Testmerge1? Find(this ITable<Testmerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testmerge1?> FindAsync(this ITable<Testmerge1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testmerge1> FindQuery(this ITable<Testmerge1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Testmerge1? Find(this ITable<Testmerge1> table, Testmerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testmerge1?> FindAsync(this ITable<Testmerge1> table, Testmerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testmerge1> FindQuery(this ITable<Testmerge1> table, Testmerge1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Testmerge1? FindTestmerge1(this TestDataDB db, int id)
		{
			return db.GetTable<Testmerge1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testmerge1?> FindTestmerge1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testmerge1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testmerge1> FindTestmerge1Query(this TestDataDB db, int id)
		{
			return db.GetTable<Testmerge1>().Where(e => e.Id == id);
		}

		public static Testmerge1? Find(this TestDataDB db, Testmerge1 @record)
		{
			return db.GetTable<Testmerge1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testmerge1?> FindAsync(this TestDataDB db, Testmerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testmerge1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testmerge1> FindQuery(this TestDataDB db, Testmerge1 @record)
		{
			return db.GetTable<Testmerge1>().Where(e => e.Id == @record.Id);
		}

		public static Testmerge2? Find(this ITable<Testmerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testmerge2?> FindAsync(this ITable<Testmerge2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testmerge2> FindQuery(this ITable<Testmerge2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Testmerge2? Find(this ITable<Testmerge2> table, Testmerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testmerge2?> FindAsync(this ITable<Testmerge2> table, Testmerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testmerge2> FindQuery(this ITable<Testmerge2> table, Testmerge2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Testmerge2? FindTestmerge2(this TestDataDB db, int id)
		{
			return db.GetTable<Testmerge2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Testmerge2?> FindTestmerge2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testmerge2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Testmerge2> FindTestmerge2Query(this TestDataDB db, int id)
		{
			return db.GetTable<Testmerge2>().Where(e => e.Id == id);
		}

		public static Testmerge2? Find(this TestDataDB db, Testmerge2 @record)
		{
			return db.GetTable<Testmerge2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Testmerge2?> FindAsync(this TestDataDB db, Testmerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testmerge2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Testmerge2> FindQuery(this TestDataDB db, Testmerge2 @record)
		{
			return db.GetTable<Testmerge2>().Where(e => e.Id == @record.Id);
		}

		public static Testunique? Find(this ITable<Testunique> table, int id1, int id2)
		{
			return table.FirstOrDefault(e => e.Id1 == id1 && e.Id2 == id2);
		}

		public static Task<Testunique?> FindAsync(this ITable<Testunique> table, int id1, int id2, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id1 == id1 && e.Id2 == id2, cancellationToken);
		}

		public static IQueryable<Testunique> FindQuery(this ITable<Testunique> table, int id1, int id2)
		{
			return table.Where(e => e.Id1 == id1 && e.Id2 == id2);
		}

		public static Testunique? Find(this ITable<Testunique> table, Testunique @record)
		{
			return table.FirstOrDefault(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2);
		}

		public static Task<Testunique?> FindAsync(this ITable<Testunique> table, Testunique @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2, cancellationToken);
		}

		public static IQueryable<Testunique> FindQuery(this ITable<Testunique> table, Testunique @record)
		{
			return table.Where(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2);
		}

		public static Testunique? FindTestunique(this TestDataDB db, int id1, int id2)
		{
			return db.GetTable<Testunique>().FirstOrDefault(e => e.Id1 == id1 && e.Id2 == id2);
		}

		public static Task<Testunique?> FindTestuniqueAsync(this TestDataDB db, int id1, int id2, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testunique>().FirstOrDefaultAsync(e => e.Id1 == id1 && e.Id2 == id2, cancellationToken);
		}

		public static IQueryable<Testunique> FindTestuniqueQuery(this TestDataDB db, int id1, int id2)
		{
			return db.GetTable<Testunique>().Where(e => e.Id1 == id1 && e.Id2 == id2);
		}

		public static Testunique? Find(this TestDataDB db, Testunique @record)
		{
			return db.GetTable<Testunique>().FirstOrDefault(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2);
		}

		public static Task<Testunique?> FindAsync(this TestDataDB db, Testunique @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Testunique>().FirstOrDefaultAsync(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2, cancellationToken);
		}

		public static IQueryable<Testunique> FindQuery(this TestDataDB db, Testunique @record)
		{
			return db.GetTable<Testunique>().Where(e => e.Id1 == @record.Id1 && e.Id2 == @record.Id2);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_doctor_person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Informix.Doctor.Personid), OtherKey = nameof(Informix.Person.Personid))]
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.Personid == t.Personid);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_doctor_person backreference
		/// </summary>
		[Association(ThisKey = nameof(Informix.Person.Personid), OtherKey = nameof(Informix.Doctor.Personid))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.Personid == obj.Personid);
		}

		/// <summary>
		/// FK_patient_person backreference
		/// </summary>
		[Association(ThisKey = nameof(Informix.Person.Personid), OtherKey = nameof(Informix.Patient.Personid))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.Personid == obj.Personid);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_patient_person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Informix.Patient.Personid), OtherKey = nameof(Informix.Person.Personid))]
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.Personid == t.Personid);
		}
		#endregion

		#region Testfkunique Associations
		/// <summary>
		/// FK_testfkunique_testunique
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Testfkunique.Id1) + "," + nameof(Testfkunique.Id2), OtherKey = nameof(Informix.Testunique.Id1) + "," + nameof(Informix.Testunique.Id2))]
		public static Testunique Testunique(this Testfkunique obj, IDataContext db)
		{
			return db.GetTable<Testunique>().First(t => obj.Id1 == t.Id1 && obj.Id2 == t.Id2);
		}

		/// <summary>
		/// FK_testfkunique_testunique_1
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Testfkunique.Id3) + "," + nameof(Testfkunique.Id4), OtherKey = nameof(Informix.Testunique.Id3) + "," + nameof(Informix.Testunique.Id4))]
		public static Testunique Testunique1(this Testfkunique obj, IDataContext db)
		{
			return db.GetTable<Testunique>().First(t => obj.Id3 == t.Id3 && obj.Id4 == t.Id4);
		}
		#endregion

		#region Testunique Associations
		/// <summary>
		/// FK_testfkunique_testunique backreference
		/// </summary>
		[Association(ThisKey = nameof(Informix.Testunique.Id1) + "," + nameof(Informix.Testunique.Id2), OtherKey = nameof(Testfkunique.Id1) + "," + nameof(Testfkunique.Id2))]
		public static IQueryable<Testfkunique> Testfkuniques(this Testunique obj, IDataContext db)
		{
			return db.GetTable<Testfkunique>().Where(t => t.Id1 == obj.Id1 && t.Id2 == obj.Id2);
		}

		/// <summary>
		/// FK_testfkunique_testunique_1 backreference
		/// </summary>
		[Association(ThisKey = nameof(Informix.Testunique.Id3) + "," + nameof(Informix.Testunique.Id4), OtherKey = nameof(Testfkunique.Id3) + "," + nameof(Testfkunique.Id4))]
		public static IQueryable<Testfkunique> Testfkuniques1(this Testunique obj, IDataContext db)
		{
			return db.GetTable<Testfkunique>().Where(t => t.Id3 == obj.Id3 && t.Id4 == obj.Id4);
		}
		#endregion
		#endregion
	}
}
