// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using IBM.Data.DB2Types;
using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	[Table("alltypes")]
	public class Alltype : IEquatable<Alltype>
	{
		[Column("id"              , DataType = DataType.Int32   , DbType = "SERIAL"                 , Length = 0 , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int          Id               { get; set; } // SERIAL
		[Column("bigintdatatype"  , DataType = DataType.Int64   , DbType = "BIGINT"                 , Length = 0                                                                                   )] public long?        Bigintdatatype   { get; set; } // BIGINT
		[Column("int8datatype"    , DataType = DataType.Int64   , DbType = "INT8"                   , Length = 0                                                                                   )] public long?        Int8Datatype     { get; set; } // INT8
		[Column("intdatatype"     , DataType = DataType.Int32   , DbType = "INTEGER"                , Length = 0                                                                                   )] public int?         Intdatatype      { get; set; } // INTEGER
		[Column("smallintdatatype", DataType = DataType.Int16   , DbType = "SMALLINT"               , Length = 0                                                                                   )] public short?       Smallintdatatype { get; set; } // SMALLINT
		[Column("decimaldatatype" , DataType = DataType.Decimal , DbType = "DECIMAL"                , Length = 0 , Precision    = 16                                                               )] public decimal?     Decimaldatatype  { get; set; } // DECIMAL
		[Column("moneydatatype"   , DataType = DataType.Decimal , DbType = "MONEY(16,2)"            , Length = 0 , Precision    = 16  , Scale      = 2                                             )] public decimal?     Moneydatatype    { get; set; } // MONEY(16,2)
		[Column("realdatatype"    , DataType = DataType.Single  , DbType = "SMALLFLOAT"             , Length = 0                                                                                   )] public float?       Realdatatype     { get; set; } // SMALLFLOAT
		[Column("floatdatatype"   , DataType = DataType.Double  , DbType = "FLOAT"                  , Length = 0                                                                                   )] public double?      Floatdatatype    { get; set; } // FLOAT
		[Column("booldatatype"    , DataType = DataType.Boolean , DbType = "BOOLEAN"                , Length = 0                                                                                   )] public bool?        Booldatatype     { get; set; } // BOOLEAN
		[Column("chardatatype"    , DataType = DataType.Char    , DbType = "CHAR(1)"                , Length = 1                                                                                   )] public char?        Chardatatype     { get; set; } // CHAR(1)
		[Column("char20datatype"  , DataType = DataType.Char    , DbType = "CHAR(20)"               , Length = 20                                                                                  )] public string?      Char20Datatype   { get; set; } // CHAR(20)
		[Column("varchardatatype" , DataType = DataType.VarChar , DbType = "VARCHAR(10)"            , Length = 10                                                                                  )] public string?      Varchardatatype  { get; set; } // VARCHAR(10)
		[Column("nchardatatype"   , DataType = DataType.NChar   , DbType = "NCHAR(10)"              , Length = 10                                                                                  )] public string?      Nchardatatype    { get; set; } // NCHAR(10)
		[Column("nvarchardatatype", DataType = DataType.NVarChar, DbType = "NVARCHAR(10)"           , Length = 10                                                                                  )] public string?      Nvarchardatatype { get; set; } // NVARCHAR(10)
		[Column("lvarchardatatype", DataType = DataType.VarChar , DbType = "LVARCHAR(10)"           , Length = 10                                                                                  )] public string?      Lvarchardatatype { get; set; } // LVARCHAR(10)
		[Column("textdatatype"    , DataType = DataType.Text    , DbType = "TEXT"                   , Length = 0                                                                                   )] public string?      Textdatatype     { get; set; } // TEXT
		[Column("datedatatype"    , DataType = DataType.DateTime, DbType = "DATE"                   , Length = 0                                                                                   )] public DateTime?    Datedatatype     { get; set; } // DATE
		[Column("datetimedatatype", DataType = DataType.DateTime, DbType = "DATETIME YEAR TO SECOND", Length = 0                                                                                   )] public DB2DateTime? Datetimedatatype { get; set; } // DATETIME YEAR TO SECOND
		[Column("intervaldatatype", DataType = DataType.Time    , DbType = "INTERVAL HOUR TO SECOND", Length = 0                                                                                   )] public TimeSpan?    Intervaldatatype { get; set; } // INTERVAL HOUR TO SECOND
		[Column("bytedatatype"    , DataType = DataType.Binary  , DbType = "BYTE"                   , Length = 0                                                                                   )] public byte[]?      Bytedatatype     { get; set; } // BYTE

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Alltype> _equalityComparer = ComparerBuilder.GetEqualityComparer<Alltype>(c => c.Id);

		public bool Equals(Alltype? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Alltype);
		}
		#endregion
	}
}
