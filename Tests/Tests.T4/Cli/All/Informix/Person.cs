// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	[Table("person")]
	public class Person : IEquatable<Person>
	{
		[Column("personid"  , DataType  = DataType.Int32   , DbType   = "SERIAL"         , Length = 0             , IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int     Personid   { get; set; } // SERIAL
		[Column("firstname" , CanBeNull = false            , DataType = DataType.NVarChar, DbType = "NVARCHAR(50)", Length       = 50                                                               )] public string  Firstname  { get; set; } = null!; // NVARCHAR(50)
		[Column("lastname"  , CanBeNull = false            , DataType = DataType.NVarChar, DbType = "NVARCHAR(50)", Length       = 50                                                               )] public string  Lastname   { get; set; } = null!; // NVARCHAR(50)
		[Column("middlename", DataType  = DataType.NVarChar, DbType   = "NVARCHAR(50)"   , Length = 50                                                                                              )] public string? Middlename { get; set; } // NVARCHAR(50)
		[Column("gender"    , DataType  = DataType.Char    , DbType   = "CHAR(1)"        , Length = 1                                                                                               )] public char    Gender     { get; set; } // CHAR(1)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Person> _equalityComparer = ComparerBuilder.GetEqualityComparer<Person>(c => c.Personid);

		public bool Equals(Person? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Person);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_doctor_person backreference
		/// </summary>
		[Association(ThisKey = nameof(Personid), OtherKey = nameof(Informix.Doctor.Personid))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_patient_person backreference
		/// </summary>
		[Association(ThisKey = nameof(Personid), OtherKey = nameof(Informix.Patient.Personid))]
		public Patient? Patient { get; set; }
		#endregion
	}
}
