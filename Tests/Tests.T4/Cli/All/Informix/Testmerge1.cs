// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using IBM.Data.DB2Types;
using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	[Table("testmerge1")]
	public class Testmerge1 : IEquatable<Testmerge1>
	{
		[Column("id"             , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0 , IsPrimaryKey = true            )] public int          Id              { get; set; } // INTEGER
		[Column("field1"         , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Field1          { get; set; } // INTEGER
		[Column("field2"         , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Field2          { get; set; } // INTEGER
		[Column("field3"         , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Field3          { get; set; } // INTEGER
		[Column("field4"         , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Field4          { get; set; } // INTEGER
		[Column("field5"         , DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Field5          { get; set; } // INTEGER
		[Column("fieldint64"     , DataType = DataType.Int64   , DbType = "BIGINT"                      , Length = 0                                  )] public long?        Fieldint64      { get; set; } // BIGINT
		[Column("fieldboolean"   , DataType = DataType.Boolean , DbType = "BOOLEAN"                     , Length = 0                                  )] public bool?        Fieldboolean    { get; set; } // BOOLEAN
		[Column("fieldstring"    , DataType = DataType.VarChar , DbType = "VARCHAR(20)"                 , Length = 20                                 )] public string?      Fieldstring     { get; set; } // VARCHAR(20)
		[Column("fieldchar"      , DataType = DataType.Char    , DbType = "CHAR(1)"                     , Length = 1                                  )] public char?        Fieldchar       { get; set; } // CHAR(1)
		[Column("fieldfloat"     , DataType = DataType.Single  , DbType = "SMALLFLOAT"                  , Length = 0                                  )] public float?       Fieldfloat      { get; set; } // SMALLFLOAT
		[Column("fielddouble"    , DataType = DataType.Double  , DbType = "FLOAT"                       , Length = 0                                  )] public double?      Fielddouble     { get; set; } // FLOAT
		[Column("fielddatetime"  , DataType = DataType.DateTime, DbType = "DATETIME YEAR TO FRACTION(3)", Length = 0                                  )] public DB2DateTime? Fielddatetime   { get; set; } // DATETIME YEAR TO FRACTION(3)
		[Column("fieldbinary"    , DataType = DataType.Binary  , DbType = "BYTE"                        , Length = 0                                  )] public byte[]?      Fieldbinary     { get; set; } // BYTE
		[Column("fielddecimal"   , DataType = DataType.Decimal , DbType = "DECIMAL(24,10)"              , Length = 0 , Precision    = 24  , Scale = 10)] public decimal?     Fielddecimal    { get; set; } // DECIMAL(24,10)
		[Column("fielddate"      , DataType = DataType.DateTime, DbType = "DATE"                        , Length = 0                                  )] public DateTime?    Fielddate       { get; set; } // DATE
		[Column("fieldtime"      , DataType = DataType.Time    , DbType = "INTERVAL HOUR TO FRACTION(5)", Length = 0                                  )] public TimeSpan?    Fieldtime       { get; set; } // INTERVAL HOUR TO FRACTION(5)
		[Column("fieldenumstring", DataType = DataType.VarChar , DbType = "VARCHAR(20)"                 , Length = 20                                 )] public string?      Fieldenumstring { get; set; } // VARCHAR(20)
		[Column("fieldenumnumber", DataType = DataType.Int32   , DbType = "INTEGER"                     , Length = 0                                  )] public int?         Fieldenumnumber { get; set; } // INTEGER

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Testmerge1> _equalityComparer = ComparerBuilder.GetEqualityComparer<Testmerge1>(c => c.Id);

		public bool Equals(Testmerge1? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Testmerge1);
		}
		#endregion
	}
}
