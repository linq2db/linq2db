// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	[Table("inheritanceparent")]
	public class Inheritanceparent : IEquatable<Inheritanceparent>
	{
		[Column("inheritanceparentid", DataType = DataType.Int32   , DbType = "INTEGER"     , Length = 0 , IsPrimaryKey = true)] public int     Inheritanceparentid { get; set; } // INTEGER
		[Column("typediscriminator"  , DataType = DataType.Int32   , DbType = "INTEGER"     , Length = 0                      )] public int?    Typediscriminator   { get; set; } // INTEGER
		[Column("name"               , DataType = DataType.NVarChar, DbType = "NVARCHAR(50)", Length = 50                     )] public string? Name                { get; set; } // NVARCHAR(50)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Inheritanceparent> _equalityComparer = ComparerBuilder.GetEqualityComparer<Inheritanceparent>(c => c.Inheritanceparentid);

		public bool Equals(Inheritanceparent? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Inheritanceparent);
		}
		#endregion
	}
}
