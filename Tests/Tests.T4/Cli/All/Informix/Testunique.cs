// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Informix
{
	[Table("testunique")]
	public class Testunique : IEquatable<Testunique>
	{
		[Column("id1", DataType = DataType.Int32, DbType = "INTEGER", Length = 0, IsPrimaryKey = true, PrimaryKeyOrder = 0)] public int Id1 { get; set; } // INTEGER
		[Column("id2", DataType = DataType.Int32, DbType = "INTEGER", Length = 0, IsPrimaryKey = true, PrimaryKeyOrder = 1)] public int Id2 { get; set; } // INTEGER
		[Column("id3", DataType = DataType.Int32, DbType = "INTEGER", Length = 0                                          )] public int Id3 { get; set; } // INTEGER
		[Column("id4", DataType = DataType.Int32, DbType = "INTEGER", Length = 0                                          )] public int Id4 { get; set; } // INTEGER

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Testunique> _equalityComparer = ComparerBuilder.GetEqualityComparer<Testunique>(c => c.Id1, c => c.Id2);

		public bool Equals(Testunique? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Testunique);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_testfkunique_testunique backreference
		/// </summary>
		[Association(ThisKey = nameof(Id1) + "," + nameof(Id2), OtherKey = nameof(Testfkunique.Id1) + "," + nameof(Testfkunique.Id2))]
		public IEnumerable<Testfkunique> Testfkuniques { get; set; } = null!;

		/// <summary>
		/// FK_testfkunique_testunique_1 backreference
		/// </summary>
		[Association(ThisKey = nameof(Id3) + "," + nameof(Id4), OtherKey = nameof(Testfkunique.Id3) + "," + nameof(Testfkunique.Id4))]
		public IEnumerable<Testfkunique> Testfkuniques1 { get; set; } = null!;
		#endregion
	}
}
