// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using FirebirdSql.Data.Types;
using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Data;
using System.Linq;
using System.Numerics;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Firebird
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<CamelCaseName>     CamelCaseNames      => this.GetTable<CamelCaseName>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>      DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<Dual>              Duals               => this.GetTable<Dual>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<SequenceTest>      SequenceTests       => this.GetTable<SequenceTest>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<PersonView>        PersonViews         => this.GetTable<PersonView>();

		#region Table Functions
		#region OutRefEnumTest
		private static readonly MethodInfo _outRefEnumTest = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.OutRefEnumTest(default, default));

		[Sql.TableFunction("OutRefEnumTest")]
		public IQueryable<OutRefEnumTestResult> OutRefEnumTest(string? str, string? inInputoutputstr)
		{
			return this.GetTable<OutRefEnumTestResult>(this, _outRefEnumTest, str, inInputoutputstr);
		}

		public partial class OutRefEnumTestResult
		{
			[Column("INPUTOUTPUTSTR", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Inputoutputstr { get; set; }
			[Column("OUTPUTSTR"     , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Outputstr      { get; set; }
		}
		#endregion

		#region OutRefTest
		private static readonly MethodInfo _outRefTest = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.OutRefTest(default, default, default, default));

		[Sql.TableFunction("OutRefTest")]
		public IQueryable<OutRefTestResult> OutRefTest(int? id, int? inInputoutputid, string? str, string? inInputoutputstr)
		{
			return this.GetTable<OutRefTestResult>(this, _outRefTest, id, inInputoutputid, str, inInputoutputstr);
		}

		public partial class OutRefTestResult
		{
			[Column("INPUTOUTPUTID" , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Inputoutputid  { get; set; }
			[Column("INPUTOUTPUTSTR", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Inputoutputstr { get; set; }
			[Column("OUTPUTID"      , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Outputid       { get; set; }
			[Column("OUTPUTSTR"     , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Outputstr      { get; set; }
		}
		#endregion

		#region PatientSelectAll
		private static readonly MethodInfo _patientSelectAll = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PatientSelectAll());

		[Sql.TableFunction("Patient_SelectAll")]
		public IQueryable<PatientSelectAllResult> PatientSelectAll()
		{
			return this.GetTable<PatientSelectAllResult>(this, _patientSelectAll);
		}

		public partial class PatientSelectAllResult
		{
			[Column("PERSONID"  , DataType = DataType.Int32   , DbType = "integer"     )] public int?    Personid   { get; set; }
			[Column("FIRSTNAME" , DataType = DataType.NVarChar, DbType = "varchar(50)" )] public string? Firstname  { get; set; }
			[Column("LASTNAME"  , DataType = DataType.NVarChar, DbType = "varchar(50)" )] public string? Lastname   { get; set; }
			[Column("MIDDLENAME", DataType = DataType.NVarChar, DbType = "varchar(50)" )] public string? Middlename { get; set; }
			[Column("GENDER"    , DataType = DataType.NChar   , DbType = "char(1)"     )] public string? Gender     { get; set; }
			[Column("DIAGNOSIS" , DataType = DataType.NVarChar, DbType = "varchar(256)")] public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PatientSelectByName
		private static readonly MethodInfo _patientSelectByName = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PatientSelectByName(default, default));

		[Sql.TableFunction("Patient_SelectByName")]
		public IQueryable<PatientSelectByNameResult> PatientSelectByName(string? firstname, string? lastname)
		{
			return this.GetTable<PatientSelectByNameResult>(this, _patientSelectByName, firstname, lastname);
		}

		public partial class PatientSelectByNameResult
		{
			[Column("PERSONID"  , DataType = DataType.Int32   , DbType = "integer"     )] public int?    Personid   { get; set; }
			[Column("MIDDLENAME", DataType = DataType.NVarChar, DbType = "varchar(50)" )] public string? Middlename { get; set; }
			[Column("GENDER"    , DataType = DataType.NChar   , DbType = "char(1)"     )] public string? Gender     { get; set; }
			[Column("DIAGNOSIS" , DataType = DataType.NVarChar, DbType = "varchar(256)")] public string? Diagnosis  { get; set; }
		}
		#endregion

		#region PersonInsert
		private static readonly MethodInfo _personInsert = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonInsert(default, default, default, default));

		[Sql.TableFunction("Person_Insert")]
		public IQueryable<PersonInsertResult> PersonInsert(string? firstname, string? lastname, string? middlename, char? gender)
		{
			return this.GetTable<PersonInsertResult>(this, _personInsert, firstname, lastname, middlename, gender);
		}

		public partial class PersonInsertResult
		{
			[Column("PERSONID", DataType = DataType.Int32, DbType = "integer")] public int? Personid { get; set; }
		}
		#endregion

		#region PersonInsertOutputParameter
		private static readonly MethodInfo _personInsertOutputParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonInsertOutputParameter(default, default, default, default));

		[Sql.TableFunction("Person_Insert_OutputParameter")]
		public IQueryable<PersonInsertOutputParameterResult> PersonInsertOutputParameter(string? firstname, string? lastname, string? middlename, char? gender)
		{
			return this.GetTable<PersonInsertOutputParameterResult>(this, _personInsertOutputParameter, firstname, lastname, middlename, gender);
		}

		public partial class PersonInsertOutputParameterResult
		{
			[Column("PERSONID", DataType = DataType.Int32, DbType = "integer")] public int? Personid { get; set; }
		}
		#endregion

		#region PersonSelectAll
		private static readonly MethodInfo _personSelectAll = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectAll());

		[Sql.TableFunction("Person_SelectAll")]
		public IQueryable<PersonSelectAllResult> PersonSelectAll()
		{
			return this.GetTable<PersonSelectAllResult>(this, _personSelectAll);
		}

		public partial class PersonSelectAllResult
		{
			[Column("PERSONID"  , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Personid   { get; set; }
			[Column("FIRSTNAME" , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Firstname  { get; set; }
			[Column("LASTNAME"  , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Lastname   { get; set; }
			[Column("MIDDLENAME", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Middlename { get; set; }
			[Column("GENDER"    , DataType = DataType.NChar   , DbType = "char(1)"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByKey
		private static readonly MethodInfo _personSelectByKey = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectByKey(default));

		[Sql.TableFunction("Person_SelectByKey")]
		public IQueryable<PersonSelectByKeyResult> PersonSelectByKey(int? id)
		{
			return this.GetTable<PersonSelectByKeyResult>(this, _personSelectByKey, id);
		}

		public partial class PersonSelectByKeyResult
		{
			[Column("PERSONID"  , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Personid   { get; set; }
			[Column("FIRSTNAME" , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Firstname  { get; set; }
			[Column("LASTNAME"  , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Lastname   { get; set; }
			[Column("MIDDLENAME", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Middlename { get; set; }
			[Column("GENDER"    , DataType = DataType.NChar   , DbType = "char(1)"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region PersonSelectByName
		private static readonly MethodInfo _personSelectByName = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.PersonSelectByName(default, default));

		[Sql.TableFunction("Person_SelectByName")]
		public IQueryable<PersonSelectByNameResult> PersonSelectByName(string? inFirstname, string? inLastname)
		{
			return this.GetTable<PersonSelectByNameResult>(this, _personSelectByName, inFirstname, inLastname);
		}

		public partial class PersonSelectByNameResult
		{
			[Column("PERSONID"  , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Personid   { get; set; }
			[Column("FIRSTNAME" , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Firstname  { get; set; }
			[Column("LASTNAME"  , DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Lastname   { get; set; }
			[Column("MIDDLENAME", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Middlename { get; set; }
			[Column("GENDER"    , DataType = DataType.NChar   , DbType = "char(1)"    )] public string? Gender     { get; set; }
		}
		#endregion

		#region ScalarDataReader
		private static readonly MethodInfo _scalarDataReader = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarDataReader());

		[Sql.TableFunction("Scalar_DataReader")]
		public IQueryable<ScalarDataReaderResult> ScalarDataReader()
		{
			return this.GetTable<ScalarDataReaderResult>(this, _scalarDataReader);
		}

		public partial class ScalarDataReaderResult
		{
			[Column("INTFIELD"   , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Intfield    { get; set; }
			[Column("STRINGFIELD", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Stringfield { get; set; }
		}
		#endregion

		#region ScalarOutputParameter
		private static readonly MethodInfo _scalarOutputParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarOutputParameter());

		[Sql.TableFunction("Scalar_OutputParameter")]
		public IQueryable<ScalarOutputParameterResult> ScalarOutputParameter()
		{
			return this.GetTable<ScalarOutputParameterResult>(this, _scalarOutputParameter);
		}

		public partial class ScalarOutputParameterResult
		{
			[Column("OUTPUTINT"   , DataType = DataType.Int32   , DbType = "integer"    )] public int?    Outputint    { get; set; }
			[Column("OUTPUTSTRING", DataType = DataType.NVarChar, DbType = "varchar(50)")] public string? Outputstring { get; set; }
		}
		#endregion

		#region ScalarReturnParameter
		private static readonly MethodInfo _scalarReturnParameter = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.ScalarReturnParameter());

		[Sql.TableFunction("Scalar_ReturnParameter")]
		public IQueryable<ScalarReturnParameterResult> ScalarReturnParameter()
		{
			return this.GetTable<ScalarReturnParameterResult>(this, _scalarReturnParameter);
		}

		public partial class ScalarReturnParameterResult
		{
			[Column("RETURN_VALUE", DataType = DataType.Int32, DbType = "integer")] public int? ReturnValue { get; set; }
		}
		#endregion

		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION")]
		public IQueryable<TestTableFunctionResult> TestTableFunction(int? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "integer")] public int? O { get; set; }
		}
		#endregion

		#region TestV4Types
		private static readonly MethodInfo _testV4Types = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestV4Types(default, default, default, default, default));

		[Sql.TableFunction("TEST_V4_TYPES")]
		public IQueryable<TestV4TypesResult> TestV4Types(FbZonedDateTime? tstz, FbZonedTime? ttz, FbDecFloat? decfloat16, FbDecFloat? decfloat34, BigInteger? int128)
		{
			return this.GetTable<TestV4TypesResult>(this, _testV4Types, tstz, ttz, decfloat16, decfloat34, int128);
		}

		public partial class TestV4TypesResult
		{
			[Column("COL_TSTZ"      , DataType = DataType.DateTimeOffset, DbType = "timestamp with time zone"                )] public FbZonedDateTime? ColTstz       { get; set; }
			[Column("COL_TTZ"       , DataType = DataType.TimeTZ        , DbType = "time with time zone"                     )] public FbZonedTime?     ColTtz        { get; set; }
			[Column("COL_DECFLOAT16", DataType = DataType.DecFloat      , DbType = "decfloat"                , Precision = 16)] public FbDecFloat?      ColDecfloat16 { get; set; }
			[Column("COL_DECFLOAT34", DataType = DataType.DecFloat      , DbType = "decfloat"                                )] public FbDecFloat?      ColDecfloat34 { get; set; }
			[Column("COL_INT_128"   , DataType = DataType.Int128        , DbType = "int128"                                  )] public BigInteger?      ColInt128     { get; set; }
		}
		#endregion

		#region TestPackage1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage1TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_PACKAGE1")]
		public IQueryable<TestPackage1TestTableFunctionResult> TestPackage1TestTableFunction(int? i)
		{
			return this.GetTable<TestPackage1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestPackage1TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "integer")] public int? O { get; set; }
		}
		#endregion

		#region TestPackage2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestPackage2TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_PACKAGE2")]
		public IQueryable<TestPackage2TestTableFunctionResult> TestPackage2TestTableFunction(int? i)
		{
			return this.GetTable<TestPackage2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestPackage2TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "integer")] public int? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllType? FindAllType(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().Where(e => e.Id == id);
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id == @record.Id);
		}

		public static CamelCaseName? Find(this ITable<CamelCaseName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<CamelCaseName?> FindAsync(this ITable<CamelCaseName> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<CamelCaseName> FindQuery(this ITable<CamelCaseName> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static CamelCaseName? Find(this ITable<CamelCaseName> table, CamelCaseName @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<CamelCaseName?> FindAsync(this ITable<CamelCaseName> table, CamelCaseName @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<CamelCaseName> FindQuery(this ITable<CamelCaseName> table, CamelCaseName @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static CamelCaseName? FindCamelCaseName(this TestDataDB db, int id)
		{
			return db.GetTable<CamelCaseName>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<CamelCaseName?> FindCamelCaseNameAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CamelCaseName>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<CamelCaseName> FindCamelCaseNameQuery(this TestDataDB db, int id)
		{
			return db.GetTable<CamelCaseName>().Where(e => e.Id == id);
		}

		public static CamelCaseName? Find(this TestDataDB db, CamelCaseName @record)
		{
			return db.GetTable<CamelCaseName>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<CamelCaseName?> FindAsync(this TestDataDB db, CamelCaseName @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CamelCaseName>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<CamelCaseName> FindQuery(this TestDataDB db, CamelCaseName @record)
		{
			return db.GetTable<CamelCaseName>().Where(e => e.Id == @record.Id);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, int dataTypeId)
		{
			return table.FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, int dataTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, int dataTypeId)
		{
			return table.Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static DataTypeTest? FindDataTypeTest(this TestDataDB db, int dataTypeId)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindDataTypeTestAsync(this TestDataDB db, int dataTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindDataTypeTestQuery(this TestDataDB db, int dataTypeId)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this TestDataDB db, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Doctor? FindDoctor(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == @record.PersonId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Patient? FindPatient(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? FindPerson(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == personId);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == @record.PersonId);
		}

		public static SequenceTest? Find(this ITable<SequenceTest> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest?> FindAsync(this ITable<SequenceTest> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest> FindQuery(this ITable<SequenceTest> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static SequenceTest? Find(this ITable<SequenceTest> table, SequenceTest @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest?> FindAsync(this ITable<SequenceTest> table, SequenceTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest> FindQuery(this ITable<SequenceTest> table, SequenceTest @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static SequenceTest? FindSequenceTest(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<SequenceTest?> FindSequenceTestAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<SequenceTest> FindSequenceTestQuery(this TestDataDB db, int id)
		{
			return db.GetTable<SequenceTest>().Where(e => e.Id == id);
		}

		public static SequenceTest? Find(this TestDataDB db, SequenceTest @record)
		{
			return db.GetTable<SequenceTest>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<SequenceTest?> FindAsync(this TestDataDB db, SequenceTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<SequenceTest>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<SequenceTest> FindQuery(this TestDataDB db, SequenceTest @record)
		{
			return db.GetTable<SequenceTest>().Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == @record.Id);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Firebird.Doctor.PersonId), OtherKey = nameof(Firebird.Person.PersonId))]
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(Firebird.Person.PersonId), OtherKey = nameof(Firebird.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// INTEG_52 backreference
		/// </summary>
		[Association(ThisKey = nameof(Firebird.Person.PersonId), OtherKey = nameof(Firebird.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// INTEG_52
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Firebird.Patient.PersonId), OtherKey = nameof(Firebird.Person.PersonId))]
		public static Person Integ(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("\"AddIssue792Record\"");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("\"AddIssue792Record\"", cancellationToken);
		}
		#endregion

		#region PersonDelete
		public static int PersonDelete(this TestDataDB dataConnection, int? personid)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				}
			};
			return dataConnection.ExecuteProc("\"Person_Delete\"", parameters);
		}

		public static Task<int> PersonDeleteAsync(this TestDataDB dataConnection, int? personid, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				}
			};
			return dataConnection.ExecuteProcAsync("\"Person_Delete\"", cancellationToken, parameters);
		}
		#endregion

		#region PersonUpdate
		public static int PersonUpdate(this TestDataDB dataConnection, int? personid, string? firstname, string? lastname, string? middlename, char? gender)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.NChar)
				{
					DbType = "char(1)",
					Size = 1
				}
			};
			return dataConnection.ExecuteProc("\"Person_Update\"", parameters);
		}

		public static Task<int> PersonUpdateAsync(this TestDataDB dataConnection, int? personid, string? firstname, string? lastname, string? middlename, char? gender, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("PERSONID", personid, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("FIRSTNAME", firstname, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("LASTNAME", lastname, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("MIDDLENAME", middlename, DataType.NVarChar)
				{
					DbType = "varchar(50)",
					Size = 50
				},
				new DataParameter("GENDER", gender, DataType.NChar)
				{
					DbType = "char(1)",
					Size = 1
				}
			};
			return dataConnection.ExecuteProcAsync("\"Person_Update\"", cancellationToken, parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion

		#region TestPackage1TestProcedure
		public static int TestPackage1TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE1.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults1> TestPackage1TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE1.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults1()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults1
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion

		#region TestPackage2TestProcedure
		public static int TestPackage2TestProcedure(this TestDataDB dataConnection, int? i, out int? o)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			o = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			return dataConnection.ExecuteProc("TEST_PACKAGE2.TEST_PROCEDURE", parameters);
		}

		public static async Task<TestProcedureResults2> TestPackage2TestProcedureAsync(this TestDataDB dataConnection, int? i, int? o, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER",
					Size = 4
				},
				new DataParameter("O", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INTEGER",
					Size = 4
				}
			};
			var result = await dataConnection.ExecuteProcAsync("TEST_PACKAGE2.TEST_PROCEDURE", cancellationToken, parameters);
			return new TestProcedureResults2()
			{
				Result = result,
				O = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public class TestProcedureResults2
		{
			public int  Result { get; set; }
			public int? O      { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region Ltrim
		[Sql.Function("LTRIM", ServerSideOnly = true)]
		public static string? Ltrim(string? par2)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region Rtrim
		[Sql.Function("RTRIM", ServerSideOnly = true)]
		public static string? Rtrim(string? par4)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestFunction
		[Sql.Function("TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage1TestFunction
		[Sql.Function("TEST_PACKAGE1.TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestPackage1TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestPackage2TestFunction
		[Sql.Function("TEST_PACKAGE2.TEST_FUNCTION", ServerSideOnly = true)]
		public static int? TestPackage2TestFunction(int? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
