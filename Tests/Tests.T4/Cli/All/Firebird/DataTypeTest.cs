// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Firebird
{
	[Table("DataTypeTest")]
	public class DataTypeTest : IEquatable<DataTypeTest>
	{
		[Column("DataTypeID", DataType = DataType.Int32   , DbType = "integer"         , IsPrimaryKey = true           )] public int       DataTypeId { get; set; } // integer
		[Column("Binary_"   , DataType = DataType.Blob    , DbType = "blob"                                            )] public byte[]?   Binary     { get; set; } // blob
		[Column("Boolean_"  , DataType = DataType.NChar   , DbType = "char(1)"         , Length       = 1              )] public char?     Boolean    { get; set; } // char(1)
		[Column("Byte_"     , DataType = DataType.Int16   , DbType = "smallint"                                        )] public short?    Byte       { get; set; } // smallint
		[Column("Bytes_"    , DataType = DataType.Blob    , DbType = "blob"                                            )] public byte[]?   Bytes      { get; set; } // blob
		[Column("CHAR_"     , DataType = DataType.NChar   , DbType = "char(1)"         , Length       = 1              )] public char?     Char       { get; set; } // char(1)
		[Column("DateTime_" , DataType = DataType.DateTime, DbType = "timestamp"                                       )] public DateTime? DateTime   { get; set; } // timestamp
		[Column("Decimal_"  , DataType = DataType.Decimal , DbType = "decimal(10,2)"   , Precision    = 10  , Scale = 2)] public decimal?  Decimal    { get; set; } // decimal(10,2)
		[Column("Double_"   , DataType = DataType.Double  , DbType = "double precision"                                )] public double?   Double     { get; set; } // double precision
		[Column("Guid_"     , DataType = DataType.NChar   , DbType = "char(16)"        , Length       = 16             )] public string?   Guid       { get; set; } // char(16)
		[Column("Int16_"    , DataType = DataType.Int16   , DbType = "smallint"                                        )] public short?    Int16      { get; set; } // smallint
		[Column("Int32_"    , DataType = DataType.Int32   , DbType = "integer"                                         )] public int?      Int32      { get; set; } // integer
		[Column("Int64_"    , DataType = DataType.Decimal , DbType = "numeric(11,0)"   , Precision    = 11  , Scale = 0)] public decimal?  Int64      { get; set; } // numeric(11,0)
		[Column("Money_"    , DataType = DataType.Decimal , DbType = "decimal(18,4)"   , Precision    = 18  , Scale = 4)] public decimal?  Money      { get; set; } // decimal(18,4)
		[Column("SByte_"    , DataType = DataType.Int16   , DbType = "smallint"                                        )] public short?    SByte      { get; set; } // smallint
		[Column("Single_"   , DataType = DataType.Single  , DbType = "float"                                           )] public float?    Single     { get; set; } // float
		[Column("Stream_"   , DataType = DataType.Blob    , DbType = "blob"                                            )] public byte[]?   Stream     { get; set; } // blob
		[Column("String_"   , DataType = DataType.NVarChar, DbType = "varchar(50)"     , Length       = 50             )] public string?   String     { get; set; } // varchar(50)
		[Column("UInt16_"   , DataType = DataType.Int16   , DbType = "smallint"                                        )] public short?    UInt16     { get; set; } // smallint
		[Column("UInt32_"   , DataType = DataType.Int32   , DbType = "integer"                                         )] public int?      UInt32     { get; set; } // integer
		[Column("UInt64_"   , DataType = DataType.Decimal , DbType = "numeric(11,0)"   , Precision    = 11  , Scale = 0)] public decimal?  UInt64     { get; set; } // numeric(11,0)
		[Column("Xml_"      , DataType = DataType.NChar   , DbType = "char(1000)"      , Length       = 1000           )] public string?   Xml        { get; set; } // char(1000)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<DataTypeTest> _equalityComparer = ComparerBuilder.GetEqualityComparer<DataTypeTest>(c => c.DataTypeId);

		public bool Equals(DataTypeTest? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as DataTypeTest);
		}
		#endregion
	}
}
