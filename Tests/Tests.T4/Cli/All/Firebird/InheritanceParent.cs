// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Firebird
{
	[Table("InheritanceParent")]
	public class InheritanceParent : IEquatable<InheritanceParent>
	{
		[Column("InheritanceParentId", DataType = DataType.Int32   , DbType = "integer"    , IsPrimaryKey = true)] public int     InheritanceParentId { get; set; } // integer
		[Column("TypeDiscriminator"  , DataType = DataType.Int32   , DbType = "integer"                         )] public int?    TypeDiscriminator   { get; set; } // integer
		[Column("Name"               , DataType = DataType.NVarChar, DbType = "varchar(50)", Length       = 50  )] public string? Name                { get; set; } // varchar(50)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<InheritanceParent> _equalityComparer = ComparerBuilder.GetEqualityComparer<InheritanceParent>(c => c.InheritanceParentId);

		public bool Equals(InheritanceParent? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as InheritanceParent);
		}
		#endregion
	}
}
