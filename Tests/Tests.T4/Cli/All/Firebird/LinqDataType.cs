// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using System;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.Firebird
{
	[Table("LinqDataTypes")]
	public class LinqDataType
	{
		[Column("ID"            , DataType = DataType.Int32   , DbType = "integer"                                 )] public int?      Id             { get; set; } // integer
		[Column("MoneyValue"    , DataType = DataType.Decimal , DbType = "decimal(10,4)", Precision = 10, Scale = 4)] public decimal?  MoneyValue     { get; set; } // decimal(10,4)
		[Column("DateTimeValue" , DataType = DataType.DateTime, DbType = "timestamp"                               )] public DateTime? DateTimeValue  { get; set; } // timestamp
		[Column("DateTimeValue2", DataType = DataType.DateTime, DbType = "timestamp"                               )] public DateTime? DateTimeValue2 { get; set; } // timestamp
		[Column("BoolValue"     , DataType = DataType.NChar   , DbType = "char(1)"      , Length    = 1            )] public char?     BoolValue      { get; set; } // char(1)
		[Column("GuidValue"     , DataType = DataType.NChar   , DbType = "char(16)"     , Length    = 16           )] public string?   GuidValue      { get; set; } // char(16)
		[Column("BinaryValue"   , DataType = DataType.Blob    , DbType = "blob"                                    )] public byte[]?   BinaryValue    { get; set; } // blob
		[Column("SmallIntValue" , DataType = DataType.Int16   , DbType = "smallint"                                )] public short?    SmallIntValue  { get; set; } // smallint
		[Column("IntValue"      , DataType = DataType.Int32   , DbType = "integer"                                 )] public int?      IntValue       { get; set; } // integer
		[Column("BigIntValue"   , DataType = DataType.Int64   , DbType = "bigint"                                  )] public long?     BigIntValue    { get; set; } // bigint
		[Column("StringValue"   , DataType = DataType.NVarChar, DbType = "varchar(50)"  , Length    = 50           )] public string?   StringValue    { get; set; } // varchar(50)
	}
}
