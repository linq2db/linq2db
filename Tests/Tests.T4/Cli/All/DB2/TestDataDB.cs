// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using IBM.Data.DB2Types;
using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Expressions;
using LinqToDB.Mapping;
using System;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.DB2
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Alltype>           Alltypes            => this.GetTable<Alltype>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<KeepIdentityTest>  KeepIdentityTests   => this.GetTable<KeepIdentityTest>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Mastertable>       Mastertables        => this.GetTable<Mastertable>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<Slavetable>        Slavetables         => this.GetTable<Slavetable>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<Personview>        Personviews         => this.GetTable<Personview>();

		#region Table Functions
		#region TestTableFunction
		private static readonly MethodInfo _testTableFunction = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION")]
		public IQueryable<TestTableFunctionResult> TestTableFunction(DB2Int32? i)
		{
			return this.GetTable<TestTableFunctionResult>(this, _testTableFunction, i);
		}

		public partial class TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "INTEGER")] public DB2Int32? O { get; set; }
		}
		#endregion

		#region TestModule1TestTableFunction
		private static readonly MethodInfo _testTableFunction1 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule1TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_MODULE1")]
		public IQueryable<TestModule1TestTableFunctionResult> TestModule1TestTableFunction(DB2Int32? i)
		{
			return this.GetTable<TestModule1TestTableFunctionResult>(this, _testTableFunction1, i);
		}

		public partial class TestModule1TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "INTEGER")] public DB2Int32? O { get; set; }
		}
		#endregion

		#region TestModule2TestTableFunction
		private static readonly MethodInfo _testTableFunction2 = MemberHelper.MethodOf<TestDataDB>(ctx => ctx.TestModule2TestTableFunction(default));

		[Sql.TableFunction("TEST_TABLE_FUNCTION", Package = "TEST_MODULE2")]
		public IQueryable<TestModule2TestTableFunctionResult> TestModule2TestTableFunction(DB2Int32? i)
		{
			return this.GetTable<TestModule2TestTableFunctionResult>(this, _testTableFunction2, i);
		}

		public partial class TestModule2TestTableFunctionResult
		{
			[Column("O", DataType = DataType.Int32, DbType = "INTEGER")] public DB2Int32? O { get; set; }
		}
		#endregion
		#endregion
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Alltype? Find(this ITable<Alltype> table, DB2Int32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Alltype?> FindAsync(this ITable<Alltype> table, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this ITable<Alltype> table, DB2Int32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static Alltype? Find(this ITable<Alltype> table, Alltype @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Alltype?> FindAsync(this ITable<Alltype> table, Alltype @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this ITable<Alltype> table, Alltype @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static Alltype? FindAlltype(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<Alltype>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<Alltype?> FindAlltypeAsync(this TestDataDB db, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Alltype>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<Alltype> FindAlltypeQuery(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<Alltype>().Where(e => e.Id.Equals(id));
		}

		public static Alltype? Find(this TestDataDB db, Alltype @record)
		{
			return db.GetTable<Alltype>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<Alltype?> FindAsync(this TestDataDB db, Alltype @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Alltype>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<Alltype> FindQuery(this TestDataDB db, Alltype @record)
		{
			return db.GetTable<Alltype>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Doctor? Find(this ITable<Doctor> table, DB2Int32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, DB2Int32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Doctor? FindDoctor(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId.Equals(personId));
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, DB2Int32 inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, DB2Int32 inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(inheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, DB2Int32 inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(@record.InheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, DB2Int32 inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, DB2Int32 inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(inheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, DB2Int32 inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId.Equals(inheritanceChildId));
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId.Equals(@record.InheritanceChildId), cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId.Equals(@record.InheritanceChildId));
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, DB2Int32 inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, DB2Int32 inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(inheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, DB2Int32 inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(@record.InheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, DB2Int32 inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, DB2Int32 inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(inheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, DB2Int32 inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId.Equals(inheritanceParentId));
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId.Equals(@record.InheritanceParentId), cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId.Equals(@record.InheritanceParentId));
		}

		public static KeepIdentityTest? Find(this ITable<KeepIdentityTest> table, DB2Int32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<KeepIdentityTest?> FindAsync(this ITable<KeepIdentityTest> table, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<KeepIdentityTest> FindQuery(this ITable<KeepIdentityTest> table, DB2Int32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static KeepIdentityTest? Find(this ITable<KeepIdentityTest> table, KeepIdentityTest @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<KeepIdentityTest?> FindAsync(this ITable<KeepIdentityTest> table, KeepIdentityTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<KeepIdentityTest> FindQuery(this ITable<KeepIdentityTest> table, KeepIdentityTest @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static KeepIdentityTest? FindKeepIdentityTest(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<KeepIdentityTest>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<KeepIdentityTest?> FindKeepIdentityTestAsync(this TestDataDB db, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<KeepIdentityTest>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<KeepIdentityTest> FindKeepIdentityTestQuery(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<KeepIdentityTest>().Where(e => e.Id.Equals(id));
		}

		public static KeepIdentityTest? Find(this TestDataDB db, KeepIdentityTest @record)
		{
			return db.GetTable<KeepIdentityTest>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<KeepIdentityTest?> FindAsync(this TestDataDB db, KeepIdentityTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<KeepIdentityTest>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<KeepIdentityTest> FindQuery(this TestDataDB db, KeepIdentityTest @record)
		{
			return db.GetTable<KeepIdentityTest>().Where(e => e.Id.Equals(@record.Id));
		}

		public static Mastertable? Find(this ITable<Mastertable> table, DB2Int32 id1, DB2Int32 id2)
		{
			return table.FirstOrDefault(e => e.Id1.Equals(id1) && e.Id2.Equals(id2));
		}

		public static Task<Mastertable?> FindAsync(this ITable<Mastertable> table, DB2Int32 id1, DB2Int32 id2, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id1.Equals(id1) && e.Id2.Equals(id2), cancellationToken);
		}

		public static IQueryable<Mastertable> FindQuery(this ITable<Mastertable> table, DB2Int32 id1, DB2Int32 id2)
		{
			return table.Where(e => e.Id1.Equals(id1) && e.Id2.Equals(id2));
		}

		public static Mastertable? Find(this ITable<Mastertable> table, Mastertable @record)
		{
			return table.FirstOrDefault(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2));
		}

		public static Task<Mastertable?> FindAsync(this ITable<Mastertable> table, Mastertable @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2), cancellationToken);
		}

		public static IQueryable<Mastertable> FindQuery(this ITable<Mastertable> table, Mastertable @record)
		{
			return table.Where(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2));
		}

		public static Mastertable? FindMastertable(this TestDataDB db, DB2Int32 id1, DB2Int32 id2)
		{
			return db.GetTable<Mastertable>().FirstOrDefault(e => e.Id1.Equals(id1) && e.Id2.Equals(id2));
		}

		public static Task<Mastertable?> FindMastertableAsync(this TestDataDB db, DB2Int32 id1, DB2Int32 id2, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Mastertable>().FirstOrDefaultAsync(e => e.Id1.Equals(id1) && e.Id2.Equals(id2), cancellationToken);
		}

		public static IQueryable<Mastertable> FindMastertableQuery(this TestDataDB db, DB2Int32 id1, DB2Int32 id2)
		{
			return db.GetTable<Mastertable>().Where(e => e.Id1.Equals(id1) && e.Id2.Equals(id2));
		}

		public static Mastertable? Find(this TestDataDB db, Mastertable @record)
		{
			return db.GetTable<Mastertable>().FirstOrDefault(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2));
		}

		public static Task<Mastertable?> FindAsync(this TestDataDB db, Mastertable @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Mastertable>().FirstOrDefaultAsync(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2), cancellationToken);
		}

		public static IQueryable<Mastertable> FindQuery(this TestDataDB db, Mastertable @record)
		{
			return db.GetTable<Mastertable>().Where(e => e.Id1.Equals(@record.Id1) && e.Id2.Equals(@record.Id2));
		}

		public static Patient? Find(this ITable<Patient> table, DB2Int32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, DB2Int32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Patient? FindPatient(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId.Equals(personId));
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Person? Find(this ITable<Person> table, DB2Int32 personId)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, DB2Int32 personId)
		{
			return table.Where(e => e.PersonId.Equals(personId));
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Person? FindPerson(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId.Equals(personId));
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, DB2Int32 personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId.Equals(personId), cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, DB2Int32 personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId.Equals(personId));
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId.Equals(@record.PersonId));
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId.Equals(@record.PersonId), cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId.Equals(@record.PersonId));
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, DB2Int32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, DB2Int32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id.Equals(id));
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, DB2Int32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, DB2Int32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id.Equals(id));
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, DB2Int32 id)
		{
			return table.FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, DB2Int32 id)
		{
			return table.Where(e => e.Id.Equals(id));
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id.Equals(@record.Id));
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id.Equals(id));
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, DB2Int32 id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id.Equals(id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, DB2Int32 id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id.Equals(id));
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id.Equals(@record.Id));
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id.Equals(@record.Id), cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id.Equals(@record.Id));
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(DB2.Doctor.PersonId), OtherKey = nameof(DB2.Person.PersonId))]
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId.Equals(t.PersonId));
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(DB2.Person.PersonId), OtherKey = nameof(DB2.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId.Equals(obj.PersonId));
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(DB2.Person.PersonId), OtherKey = nameof(DB2.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId.Equals(obj.PersonId));
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(DB2.Patient.PersonId), OtherKey = nameof(DB2.Person.PersonId))]
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId.Equals(t.PersonId));
		}
		#endregion

		#region Slavetable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1), OtherKey = nameof(DB2.Mastertable.Id1) + "," + nameof(DB2.Mastertable.Id2))]
		public static Mastertable Mastertable(this Slavetable obj, IDataContext db)
		{
			return db.GetTable<Mastertable>().First(t => obj.Id222222222222222222222222.Equals(t.Id1) && obj.Id1.Equals(t.Id2));
		}
		#endregion

		#region Mastertable Associations
		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE backreference
		/// </summary>
		[Association(ThisKey = nameof(DB2.Mastertable.Id1) + "," + nameof(DB2.Mastertable.Id2), OtherKey = nameof(Slavetable.Id222222222222222222222222) + "," + nameof(Slavetable.Id1))]
		public static IQueryable<Slavetable> Slavetables(this Mastertable obj, IDataContext db)
		{
			return db.GetTable<Slavetable>().Where(t => t.Id222222222222222222222222.Equals(obj.Id1) && t.Id1.Equals(obj.Id2));
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region Addissue792Record
		public static int Addissue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("ADDISSUE792RECORD");
		}

		public static Task<int> Addissue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("ADDISSUE792RECORD", cancellationToken);
		}
		#endregion

		#region PersonSelectbykey
		public static int PersonSelectbykey(this TestDataDB dataConnection, DB2Int32? id)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProc("PERSON_SELECTBYKEY", parameters);
		}

		public static Task<int> PersonSelectbykeyAsync(this TestDataDB dataConnection, DB2Int32? id, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("ID", id, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProcAsync("PERSON_SELECTBYKEY", cancellationToken, parameters);
		}
		#endregion

		#region TestProcedure
		public static int TestProcedure(this TestDataDB dataConnection, DB2Int32? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProc("TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestProcedureAsync(this TestDataDB dataConnection, DB2Int32? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProcAsync("TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule1TestProcedure
		public static int TestModule1TestProcedure(this TestDataDB dataConnection, DB2Int32? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProc("TEST_MODULE1.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule1TestProcedureAsync(this TestDataDB dataConnection, DB2Int32? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE1.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion

		#region TestModule2TestProcedure
		public static int TestModule2TestProcedure(this TestDataDB dataConnection, DB2Int32? i)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProc("TEST_MODULE2.TEST_PROCEDURE", parameters);
		}

		public static Task<int> TestModule2TestProcedureAsync(this TestDataDB dataConnection, DB2Int32? i, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("I", i, DataType.Int32)
				{
					DbType = "INTEGER"
				}
			};
			return dataConnection.ExecuteProcAsync("TEST_MODULE2.TEST_PROCEDURE", cancellationToken, parameters);
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		[Sql.Function("TEST_FUNCTION", ServerSideOnly = true)]
		public static DB2Int32? TestFunction(DB2Int32? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule1TestFunction
		[Sql.Function("TEST_MODULE1.TEST_FUNCTION", ServerSideOnly = true)]
		public static DB2Int32? TestModule1TestFunction(DB2Int32? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion

		#region TestModule2TestFunction
		[Sql.Function("TEST_MODULE2.TEST_FUNCTION", ServerSideOnly = true)]
		public static DB2Int32? TestModule2TestFunction(DB2Int32? i)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
