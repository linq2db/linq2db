// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using IBM.Data.DB2Types;
using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.DB2
{
	[Table("TestMerge2")]
	public class TestMerge2 : IEquatable<TestMerge2>
	{
		[Column("Id"             , DataType = DataType.Int32    , DbType = "INTEGER"                  , IsPrimaryKey = true            )] public DB2Int32      Id              { get; set; } // INTEGER
		[Column("Field1"         , DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     Field1          { get; set; } // INTEGER
		[Column("Field2"         , DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     Field2          { get; set; } // INTEGER
		[Column("Field3"         , DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     Field3          { get; set; } // INTEGER
		[Column("Field4"         , DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     Field4          { get; set; } // INTEGER
		[Column("Field5"         , DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     Field5          { get; set; } // INTEGER
		[Column("FieldInt64"     , DataType = DataType.Int64    , DbType = "BIGINT"                                                    )] public DB2Int64?     FieldInt64      { get; set; } // BIGINT
		[Column("FieldBoolean"   , DataType = DataType.Int16    , DbType = "SMALLINT"                                                  )] public DB2Int16?     FieldBoolean    { get; set; } // SMALLINT
		[Column("FieldString"    , DataType = DataType.VarChar  , DbType = "VARCHAR(20)"              , Length       = 20              )] public DB2String?    FieldString     { get; set; } // VARCHAR(20)
		[Column("FieldNString"   , DataType = DataType.VarChar  , DbType = "VARCHAR(80)"              , Length       = 80              )] public DB2String?    FieldNString    { get; set; } // VARCHAR(80)
		[Column("FieldChar"      , DataType = DataType.Char     , DbType = "CHARACTER(1)"             , Length       = 1               )] public DB2String?    FieldChar       { get; set; } // CHARACTER(1)
		[Column("FieldNChar"     , DataType = DataType.Char     , DbType = "CHARACTER(4)"             , Length       = 4               )] public DB2String?    FieldNChar      { get; set; } // CHARACTER(4)
		[Column("FieldFloat"     , DataType = DataType.Single   , DbType = "REAL"                                                      )] public DB2Real?      FieldFloat      { get; set; } // REAL
		[Column("FieldDouble"    , DataType = DataType.Double   , DbType = "DOUBLE"                                                    )] public DB2Double?    FieldDouble     { get; set; } // DOUBLE
		[Column("FieldDateTime"  , DataType = DataType.Timestamp, DbType = "TIMESTAMP"                                                 )] public DB2TimeStamp? FieldDateTime   { get; set; } // TIMESTAMP
		[Column("FieldBinary"    , DataType = DataType.VarBinary, DbType = "VARCHAR (20) FOR BIT DATA", Length       = 20              )] public DB2Binary?    FieldBinary     { get; set; } // VARCHAR (20) FOR BIT DATA
		[Column("FieldGuid"      , DataType = DataType.Binary   , DbType = "CHAR (16) FOR BIT DATA"   , Length       = 16              )] public DB2Binary?    FieldGuid       { get; set; } // CHAR (16) FOR BIT DATA
		[Column("FieldDecimal"   , DataType = DataType.Decimal  , DbType = "DECIMAL(24,10)"           , Precision    = 24  , Scale = 10)] public DB2Decimal?   FieldDecimal    { get; set; } // DECIMAL(24,10)
		[Column("FieldDate"      , DataType = DataType.Date     , DbType = "DATE"                                                      )] public DB2Date?      FieldDate       { get; set; } // DATE
		[Column("FieldTime"      , DataType = DataType.Time     , DbType = "TIME"                                                      )] public DB2Time?      FieldTime       { get; set; } // TIME
		[Column("FieldEnumString", DataType = DataType.VarChar  , DbType = "VARCHAR(20)"              , Length       = 20              )] public DB2String?    FieldEnumString { get; set; } // VARCHAR(20)
		[Column("FieldEnumNumber", DataType = DataType.Int32    , DbType = "INTEGER"                                                   )] public DB2Int32?     FieldEnumNumber { get; set; } // INTEGER

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestMerge2> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestMerge2>(c => c.Id);

		public bool Equals(TestMerge2? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestMerge2);
		}
		#endregion
	}
}
