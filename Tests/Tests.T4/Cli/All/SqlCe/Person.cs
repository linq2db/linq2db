// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlCe
{
	[Table("Person")]
	public class Person : IEquatable<Person>
	{
		[Column("PersonID"  , DataType = LinqToDB.DataType.Int32   , DbType = "int"         , Length = 0 , Precision = 10, Scale = 0, IsPrimaryKey = true)] public SqlInt32   PersonId   { get; set; } // int
		[Column("FirstName" , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)", Length = 50, Precision = 0 , Scale = 0                     )] public SqlString  FirstName  { get; set; } // nvarchar(50)
		[Column("LastName"  , DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)", Length = 50, Precision = 0 , Scale = 0                     )] public SqlString  LastName   { get; set; } // nvarchar(50)
		[Column("MiddleName", DataType = LinqToDB.DataType.NVarChar, DbType = "nvarchar(50)", Length = 50, Precision = 0 , Scale = 0                     )] public SqlString? MiddleName { get; set; } // nvarchar(50)
		[Column("Gender"    , DataType = LinqToDB.DataType.NChar   , DbType = "nchar(1)"    , Length = 1 , Precision = 0 , Scale = 0                     )] public SqlString  Gender     { get; set; } // nchar(1)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Person> _equalityComparer = ComparerBuilder.GetEqualityComparer<Person>(c => c.PersonId);

		public bool Equals(Person? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Person);
		}
		#endregion

		#region Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonId), OtherKey = nameof(SqlCe.Doctor.PersonId))]
		public Doctor? Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(PersonId), OtherKey = nameof(SqlCe.Patient.PersonId))]
		public Patient? Patient { get; set; }
		#endregion
	}
}
