// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlCe
{
	[Table("AllTypes")]
	public class AllType : IEquatable<AllType>
	{
		[Column("ID"                      , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0         , Precision = 10, Scale = 0, IsPrimaryKey = true)] public SqlInt32     Id                       { get; set; } // int
		[Column("bigintDataType"          , DataType = LinqToDB.DataType.Int64    , DbType = "bigint"          , Length = 0         , Precision = 19, Scale = 0                     )] public SqlInt64?    BigintDataType           { get; set; } // bigint
		[Column("numericDataType"         , DataType = LinqToDB.DataType.Decimal  , DbType = "numeric(18, 0)"  , Length = 0         , Precision = 18, Scale = 0                     )] public SqlDecimal?  NumericDataType          { get; set; } // numeric(18, 0)
		[Column("bitDataType"             , DataType = LinqToDB.DataType.Boolean  , DbType = "bit"             , Length = 0         , Precision = 1 , Scale = 0                     )] public SqlBoolean?  BitDataType              { get; set; } // bit
		[Column("smallintDataType"        , DataType = LinqToDB.DataType.Int16    , DbType = "smallint"        , Length = 0         , Precision = 5 , Scale = 0                     )] public SqlInt16?    SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType"         , DataType = LinqToDB.DataType.Decimal  , DbType = "numeric(18, 0)"  , Length = 0         , Precision = 18, Scale = 0                     )] public SqlDecimal?  DecimalDataType          { get; set; } // numeric(18, 0)
		[Column("intDataType"             , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0         , Precision = 10, Scale = 0                     )] public SqlInt32?    IntDataType              { get; set; } // int
		[Column("tinyintDataType"         , DataType = LinqToDB.DataType.Byte     , DbType = "tinyint"         , Length = 0         , Precision = 3 , Scale = 0                     )] public SqlByte?     TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType"           , DataType = LinqToDB.DataType.Money    , DbType = "money"           , Length = 0         , Precision = 19, Scale = 4                     )] public SqlMoney?    MoneyDataType            { get; set; } // money
		[Column("floatDataType"           , DataType = LinqToDB.DataType.Double   , DbType = "float"           , Length = 0         , Precision = 53, Scale = 0                     )] public SqlDouble?   FloatDataType            { get; set; } // float
		[Column("realDataType"            , DataType = LinqToDB.DataType.Single   , DbType = "real"            , Length = 0         , Precision = 24, Scale = 0                     )] public SqlSingle?   RealDataType             { get; set; } // real
		[Column("datetimeDataType"        , DataType = LinqToDB.DataType.DateTime , DbType = "datetime"        , Length = 0         , Precision = 23, Scale = 3                     )] public SqlDateTime? DatetimeDataType         { get; set; } // datetime
		[Column("ncharDataType"           , DataType = LinqToDB.DataType.NChar    , DbType = "nchar(20)"       , Length = 20        , Precision = 0 , Scale = 0                     )] public SqlString?   NcharDataType            { get; set; } // nchar(20)
		[Column("nvarcharDataType"        , DataType = LinqToDB.DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20        , Precision = 0 , Scale = 0                     )] public SqlString?   NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType"           , DataType = LinqToDB.DataType.NText    , DbType = "ntext"           , Length = 536870911 , Precision = 0 , Scale = 0                     )] public SqlString?   NtextDataType            { get; set; } // ntext
		[Column("binaryDataType"          , DataType = LinqToDB.DataType.Binary   , DbType = "binary(1)"       , Length = 1         , Precision = 0 , Scale = 0                     )] public SqlBinary?   BinaryDataType           { get; set; } // binary(1)
		[Column("varbinaryDataType"       , DataType = LinqToDB.DataType.VarBinary, DbType = "varbinary(1)"    , Length = 1         , Precision = 0 , Scale = 0                     )] public SqlBinary?   VarbinaryDataType        { get; set; } // varbinary(1)
		[Column("imageDataType"           , DataType = LinqToDB.DataType.Image    , DbType = "image"           , Length = 1073741823, Precision = 0 , Scale = 0                     )] public SqlBinary?   ImageDataType            { get; set; } // image
		[Column("timestampDataType"       , DataType = LinqToDB.DataType.Timestamp, DbType = "rowversion"      , Length = 8         , Precision = 0 , Scale = 0                     )] public SqlBinary?   TimestampDataType        { get; set; } // rowversion
		[Column("uniqueidentifierDataType", DataType = LinqToDB.DataType.Guid     , DbType = "uniqueidentifier", Length = 0         , Precision = 0 , Scale = 0                     )] public SqlGuid?     UniqueidentifierDataType { get; set; } // uniqueidentifier

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllType> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllType>(c => c.Id);

		public bool Equals(AllType? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllType);
		}
		#endregion
	}
}
