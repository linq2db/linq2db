// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SqlCe
{
	[Table("TestMerge1")]
	public class TestMerge1 : IEquatable<TestMerge1>
	{
		[Column("Id"             , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0 , IsPrimaryKey = true)] public SqlInt32     Id              { get; set; } // int
		[Column("Field1"         , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    Field1          { get; set; } // int
		[Column("Field2"         , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    Field2          { get; set; } // int
		[Column("Field3"         , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    Field3          { get; set; } // int
		[Column("Field4"         , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    Field4          { get; set; } // int
		[Column("Field5"         , DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    Field5          { get; set; } // int
		[Column("FieldInt64"     , DataType = LinqToDB.DataType.Int64    , DbType = "bigint"          , Length = 0 , Precision = 19, Scale = 0                      )] public SqlInt64?    FieldInt64      { get; set; } // bigint
		[Column("FieldBoolean"   , DataType = LinqToDB.DataType.Boolean  , DbType = "bit"             , Length = 0 , Precision = 1 , Scale = 0                      )] public SqlBoolean?  FieldBoolean    { get; set; } // bit
		[Column("FieldString"    , DataType = LinqToDB.DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20, Precision = 0 , Scale = 0                      )] public SqlString?   FieldString     { get; set; } // nvarchar(20)
		[Column("FieldNString"   , DataType = LinqToDB.DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20, Precision = 0 , Scale = 0                      )] public SqlString?   FieldNString    { get; set; } // nvarchar(20)
		[Column("FieldChar"      , DataType = LinqToDB.DataType.NChar    , DbType = "nchar(1)"        , Length = 1 , Precision = 0 , Scale = 0                      )] public SqlString?   FieldChar       { get; set; } // nchar(1)
		[Column("FieldNChar"     , DataType = LinqToDB.DataType.NChar    , DbType = "nchar(1)"        , Length = 1 , Precision = 0 , Scale = 0                      )] public SqlString?   FieldNChar      { get; set; } // nchar(1)
		[Column("FieldFloat"     , DataType = LinqToDB.DataType.Single   , DbType = "real"            , Length = 0 , Precision = 24, Scale = 0                      )] public SqlSingle?   FieldFloat      { get; set; } // real
		[Column("FieldDouble"    , DataType = LinqToDB.DataType.Double   , DbType = "float"           , Length = 0 , Precision = 53, Scale = 0                      )] public SqlDouble?   FieldDouble     { get; set; } // float
		[Column("FieldDateTime"  , DataType = LinqToDB.DataType.DateTime , DbType = "datetime"        , Length = 0 , Precision = 23, Scale = 3                      )] public SqlDateTime? FieldDateTime   { get; set; } // datetime
		[Column("FieldBinary"    , DataType = LinqToDB.DataType.VarBinary, DbType = "varbinary(20)"   , Length = 20, Precision = 0 , Scale = 0                      )] public SqlBinary?   FieldBinary     { get; set; } // varbinary(20)
		[Column("FieldGuid"      , DataType = LinqToDB.DataType.Guid     , DbType = "uniqueidentifier", Length = 0 , Precision = 0 , Scale = 0                      )] public SqlGuid?     FieldGuid       { get; set; } // uniqueidentifier
		[Column("FieldDecimal"   , DataType = LinqToDB.DataType.Decimal  , DbType = "numeric(24, 10)" , Length = 0 , Precision = 24, Scale = 10                     )] public SqlDecimal?  FieldDecimal    { get; set; } // numeric(24, 10)
		[Column("FieldEnumString", DataType = LinqToDB.DataType.NVarChar , DbType = "nvarchar(20)"    , Length = 20, Precision = 0 , Scale = 0                      )] public SqlString?   FieldEnumString { get; set; } // nvarchar(20)
		[Column("FieldEnumNumber", DataType = LinqToDB.DataType.Int32    , DbType = "int"             , Length = 0 , Precision = 10, Scale = 0                      )] public SqlInt32?    FieldEnumNumber { get; set; } // int

		#region IEquatable<T> support
		private static readonly IEqualityComparer<TestMerge1> _equalityComparer = ComparerBuilder.GetEqualityComparer<TestMerge1>(c => c.Id);

		public bool Equals(TestMerge1? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as TestMerge1);
		}
		#endregion
	}
}
