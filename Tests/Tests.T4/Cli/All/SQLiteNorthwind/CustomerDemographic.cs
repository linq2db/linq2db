// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLiteNorthwind
{
	[Table("CustomerDemographics")]
	public class CustomerDemographic : IEquatable<CustomerDemographic>
	{
		[Column("CustomerTypeID", CanBeNull = false        , DataType = DataType.VarChar, DbType = "varchar(10)", Length    = 10, Precision = 0, Scale = 0, IsPrimaryKey = true)] public string  CustomerTypeId { get; set; } = null!; // varchar(10)
		[Column("CustomerDesc"  , DataType  = DataType.Text, DbType   = "text(max)"     , Length = 2147483647   , Precision = 0 , Scale     = 0                                )] public string? CustomerDesc   { get; set; } // text(max)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<CustomerDemographic> _equalityComparer = ComparerBuilder.GetEqualityComparer<CustomerDemographic>(c => c.CustomerTypeId);

		public bool Equals(CustomerDemographic? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as CustomerDemographic);
		}
		#endregion
	}
}
