// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLiteNorthwind
{
	[Table("Orders")]
	public class Order : IEquatable<Order>
	{
		[Column("OrderID"       , DataType = DataType.Int32    , DbType = "INT"        , IsPrimaryKey = true)] public int       OrderId        { get; set; } // INT
		[Column("CustomerID"    , DataType = DataType.NVarChar , DbType = "varchar(5)" , Length       = 5   )] public string?   CustomerId     { get; set; } // varchar(5)
		[Column("EmployeeID"    , DataType = DataType.Int32    , DbType = "INT"                             )] public int?      EmployeeId     { get; set; } // INT
		[Column("OrderDate"     , DataType = DataType.DateTime2, DbType = "timestamp"                       )] public DateTime? OrderDate      { get; set; } // timestamp
		[Column("RequiredDate"  , DataType = DataType.DateTime2, DbType = "timestamp"                       )] public DateTime? RequiredDate   { get; set; } // timestamp
		[Column("ShippedDate"   , DataType = DataType.DateTime2, DbType = "timestamp"                       )] public DateTime? ShippedDate    { get; set; } // timestamp
		[Column("ShipVia"       , DataType = DataType.Int32    , DbType = "INT"                             )] public int?      ShipVia        { get; set; } // INT
		[Column("Freight"       , DataType = DataType.Double   , DbType = "float(26)"                       )] public double?   Freight        { get; set; } // float(26)
		[Column("ShipName"      , DataType = DataType.NVarChar , DbType = "varchar(40)", Length       = 40  )] public string?   ShipName       { get; set; } // varchar(40)
		[Column("ShipAddress"   , DataType = DataType.NVarChar , DbType = "varchar(60)", Length       = 60  )] public string?   ShipAddress    { get; set; } // varchar(60)
		[Column("ShipCity"      , DataType = DataType.NVarChar , DbType = "varchar(15)", Length       = 15  )] public string?   ShipCity       { get; set; } // varchar(15)
		[Column("ShipRegion"    , DataType = DataType.NVarChar , DbType = "varchar(15)", Length       = 15  )] public string?   ShipRegion     { get; set; } // varchar(15)
		[Column("ShipPostalCode", DataType = DataType.NVarChar , DbType = "varchar(10)", Length       = 10  )] public string?   ShipPostalCode { get; set; } // varchar(10)
		[Column("ShipCountry"   , DataType = DataType.NVarChar , DbType = "varchar(15)", Length       = 15  )] public string?   ShipCountry    { get; set; } // varchar(15)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Order> _equalityComparer = ComparerBuilder.GetEqualityComparer<Order>(c => c.OrderId);

		public bool Equals(Order? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Order);
		}
		#endregion
	}
}
