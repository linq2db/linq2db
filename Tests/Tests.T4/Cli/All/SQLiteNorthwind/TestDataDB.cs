// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLiteNorthwind
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Category>                   Categories                   => this.GetTable<Category>();
		public ITable<CustomerCustomerDemo>       CustomerCustomerDemos        => this.GetTable<CustomerCustomerDemo>();
		public ITable<CustomerDemographic>        CustomerDemographics         => this.GetTable<CustomerDemographic>();
		public ITable<Customer>                   Customers                    => this.GetTable<Customer>();
		public ITable<EmployeeTerritory>          EmployeeTerritories          => this.GetTable<EmployeeTerritory>();
		public ITable<Employee>                   Employees                    => this.GetTable<Employee>();
		public ITable<OrderDetail>                OrderDetails                 => this.GetTable<OrderDetail>();
		public ITable<Order>                      Orders                       => this.GetTable<Order>();
		public ITable<Product>                    Products                     => this.GetTable<Product>();
		public ITable<Region>                     Regions                      => this.GetTable<Region>();
		public ITable<Shipper>                    Shippers                     => this.GetTable<Shipper>();
		public ITable<Supplier>                   Suppliers                    => this.GetTable<Supplier>();
		public ITable<Territory>                  Territories                  => this.GetTable<Territory>();
		public ITable<AlphabeticalListOfProduct>  AlphabeticalListOfProducts   => this.GetTable<AlphabeticalListOfProduct>();
		public ITable<CurrentProductList>         CurrentProductLists          => this.GetTable<CurrentProductList>();
		public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities => this.GetTable<CustomerAndSuppliersByCity>();
		public ITable<OrderDetailsExtended>       OrderDetailsExtendeds        => this.GetTable<OrderDetailsExtended>();
		public ITable<OrderSubtotal>              OrderSubtotals               => this.GetTable<OrderSubtotal>();
		public ITable<OrdersQry>                  OrdersQries                  => this.GetTable<OrdersQry>();
		public ITable<ProductsAboveAveragePrice>  ProductsAboveAveragePrices   => this.GetTable<ProductsAboveAveragePrice>();
		public ITable<ProductsByCategory>         ProductsByCategories         => this.GetTable<ProductsByCategory>();
		public ITable<SummaryOfSalesByQuarter>    SummaryOfSalesByQuarters     => this.GetTable<SummaryOfSalesByQuarter>();
		public ITable<SummaryOfSalesByYear>       SummaryOfSalesByYears        => this.GetTable<SummaryOfSalesByYear>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Category? Find(this ITable<Category> table, int categoryId)
		{
			return table.FirstOrDefault(e => e.CategoryId == categoryId);
		}

		public static Task<Category?> FindAsync(this ITable<Category> table, int categoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CategoryId == categoryId, cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this ITable<Category> table, int categoryId)
		{
			return table.Where(e => e.CategoryId == categoryId);
		}

		public static Category? Find(this ITable<Category> table, Category @record)
		{
			return table.FirstOrDefault(e => e.CategoryId == @record.CategoryId);
		}

		public static Task<Category?> FindAsync(this ITable<Category> table, Category @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CategoryId == @record.CategoryId, cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this ITable<Category> table, Category @record)
		{
			return table.Where(e => e.CategoryId == @record.CategoryId);
		}

		public static Category? FindCategory(this TestDataDB db, int categoryId)
		{
			return db.GetTable<Category>().FirstOrDefault(e => e.CategoryId == categoryId);
		}

		public static Task<Category?> FindCategoryAsync(this TestDataDB db, int categoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Category>().FirstOrDefaultAsync(e => e.CategoryId == categoryId, cancellationToken);
		}

		public static IQueryable<Category> FindCategoryQuery(this TestDataDB db, int categoryId)
		{
			return db.GetTable<Category>().Where(e => e.CategoryId == categoryId);
		}

		public static Category? Find(this TestDataDB db, Category @record)
		{
			return db.GetTable<Category>().FirstOrDefault(e => e.CategoryId == @record.CategoryId);
		}

		public static Task<Category?> FindAsync(this TestDataDB db, Category @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Category>().FirstOrDefaultAsync(e => e.CategoryId == @record.CategoryId, cancellationToken);
		}

		public static IQueryable<Category> FindQuery(this TestDataDB db, Category @record)
		{
			return db.GetTable<Category>().Where(e => e.CategoryId == @record.CategoryId);
		}

		public static CustomerCustomerDemo? Find(this ITable<CustomerCustomerDemo> table, string customerId, string customerTypeId)
		{
			return table.FirstOrDefault(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId);
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this ITable<CustomerCustomerDemo> table, string customerId, string customerTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this ITable<CustomerCustomerDemo> table, string customerId, string customerTypeId)
		{
			return table.Where(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId);
		}

		public static CustomerCustomerDemo? Find(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record)
		{
			return table.FirstOrDefault(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this ITable<CustomerCustomerDemo> table, CustomerCustomerDemo @record)
		{
			return table.Where(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static CustomerCustomerDemo? FindCustomerCustomerDemo(this TestDataDB db, string customerId, string customerTypeId)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefault(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId);
		}

		public static Task<CustomerCustomerDemo?> FindCustomerCustomerDemoAsync(this TestDataDB db, string customerId, string customerTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefaultAsync(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindCustomerCustomerDemoQuery(this TestDataDB db, string customerId, string customerTypeId)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(e => e.CustomerId == customerId && e.CustomerTypeId == customerTypeId);
		}

		public static CustomerCustomerDemo? Find(this TestDataDB db, CustomerCustomerDemo @record)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefault(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static Task<CustomerCustomerDemo?> FindAsync(this TestDataDB db, CustomerCustomerDemo @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerCustomerDemo>().FirstOrDefaultAsync(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerCustomerDemo> FindQuery(this TestDataDB db, CustomerCustomerDemo @record)
		{
			return db.GetTable<CustomerCustomerDemo>().Where(e => e.CustomerId == @record.CustomerId && e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static CustomerDemographic? Find(this ITable<CustomerDemographic> table, string customerTypeId)
		{
			return table.FirstOrDefault(e => e.CustomerTypeId == customerTypeId);
		}

		public static Task<CustomerDemographic?> FindAsync(this ITable<CustomerDemographic> table, string customerTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerTypeId == customerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this ITable<CustomerDemographic> table, string customerTypeId)
		{
			return table.Where(e => e.CustomerTypeId == customerTypeId);
		}

		public static CustomerDemographic? Find(this ITable<CustomerDemographic> table, CustomerDemographic @record)
		{
			return table.FirstOrDefault(e => e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static Task<CustomerDemographic?> FindAsync(this ITable<CustomerDemographic> table, CustomerDemographic @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerTypeId == @record.CustomerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this ITable<CustomerDemographic> table, CustomerDemographic @record)
		{
			return table.Where(e => e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static CustomerDemographic? FindCustomerDemographic(this TestDataDB db, string customerTypeId)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefault(e => e.CustomerTypeId == customerTypeId);
		}

		public static Task<CustomerDemographic?> FindCustomerDemographicAsync(this TestDataDB db, string customerTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefaultAsync(e => e.CustomerTypeId == customerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindCustomerDemographicQuery(this TestDataDB db, string customerTypeId)
		{
			return db.GetTable<CustomerDemographic>().Where(e => e.CustomerTypeId == customerTypeId);
		}

		public static CustomerDemographic? Find(this TestDataDB db, CustomerDemographic @record)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefault(e => e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static Task<CustomerDemographic?> FindAsync(this TestDataDB db, CustomerDemographic @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<CustomerDemographic>().FirstOrDefaultAsync(e => e.CustomerTypeId == @record.CustomerTypeId, cancellationToken);
		}

		public static IQueryable<CustomerDemographic> FindQuery(this TestDataDB db, CustomerDemographic @record)
		{
			return db.GetTable<CustomerDemographic>().Where(e => e.CustomerTypeId == @record.CustomerTypeId);
		}

		public static Customer? Find(this ITable<Customer> table, string customerId)
		{
			return table.FirstOrDefault(e => e.CustomerId == customerId);
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, string customerId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId == customerId, cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this ITable<Customer> table, string customerId)
		{
			return table.Where(e => e.CustomerId == customerId);
		}

		public static Customer? Find(this ITable<Customer> table, Customer @record)
		{
			return table.FirstOrDefault(e => e.CustomerId == @record.CustomerId);
		}

		public static Task<Customer?> FindAsync(this ITable<Customer> table, Customer @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.CustomerId == @record.CustomerId, cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this ITable<Customer> table, Customer @record)
		{
			return table.Where(e => e.CustomerId == @record.CustomerId);
		}

		public static Customer? FindCustomer(this TestDataDB db, string customerId)
		{
			return db.GetTable<Customer>().FirstOrDefault(e => e.CustomerId == customerId);
		}

		public static Task<Customer?> FindCustomerAsync(this TestDataDB db, string customerId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Customer>().FirstOrDefaultAsync(e => e.CustomerId == customerId, cancellationToken);
		}

		public static IQueryable<Customer> FindCustomerQuery(this TestDataDB db, string customerId)
		{
			return db.GetTable<Customer>().Where(e => e.CustomerId == customerId);
		}

		public static Customer? Find(this TestDataDB db, Customer @record)
		{
			return db.GetTable<Customer>().FirstOrDefault(e => e.CustomerId == @record.CustomerId);
		}

		public static Task<Customer?> FindAsync(this TestDataDB db, Customer @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Customer>().FirstOrDefaultAsync(e => e.CustomerId == @record.CustomerId, cancellationToken);
		}

		public static IQueryable<Customer> FindQuery(this TestDataDB db, Customer @record)
		{
			return db.GetTable<Customer>().Where(e => e.CustomerId == @record.CustomerId);
		}

		public static EmployeeTerritory? Find(this ITable<EmployeeTerritory> table, int employeeId, string territoryId)
		{
			return table.FirstOrDefault(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId);
		}

		public static Task<EmployeeTerritory?> FindAsync(this ITable<EmployeeTerritory> table, int employeeId, string territoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId, cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this ITable<EmployeeTerritory> table, int employeeId, string territoryId)
		{
			return table.Where(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId);
		}

		public static EmployeeTerritory? Find(this ITable<EmployeeTerritory> table, EmployeeTerritory @record)
		{
			return table.FirstOrDefault(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId);
		}

		public static Task<EmployeeTerritory?> FindAsync(this ITable<EmployeeTerritory> table, EmployeeTerritory @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId, cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this ITable<EmployeeTerritory> table, EmployeeTerritory @record)
		{
			return table.Where(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId);
		}

		public static EmployeeTerritory? FindEmployeeTerritory(this TestDataDB db, int employeeId, string territoryId)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefault(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId);
		}

		public static Task<EmployeeTerritory?> FindEmployeeTerritoryAsync(this TestDataDB db, int employeeId, string territoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefaultAsync(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId, cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindEmployeeTerritoryQuery(this TestDataDB db, int employeeId, string territoryId)
		{
			return db.GetTable<EmployeeTerritory>().Where(e => e.EmployeeId == employeeId && e.TerritoryId == territoryId);
		}

		public static EmployeeTerritory? Find(this TestDataDB db, EmployeeTerritory @record)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefault(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId);
		}

		public static Task<EmployeeTerritory?> FindAsync(this TestDataDB db, EmployeeTerritory @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<EmployeeTerritory>().FirstOrDefaultAsync(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId, cancellationToken);
		}

		public static IQueryable<EmployeeTerritory> FindQuery(this TestDataDB db, EmployeeTerritory @record)
		{
			return db.GetTable<EmployeeTerritory>().Where(e => e.EmployeeId == @record.EmployeeId && e.TerritoryId == @record.TerritoryId);
		}

		public static Employee? Find(this ITable<Employee> table, int employeeId)
		{
			return table.FirstOrDefault(e => e.EmployeeId == employeeId);
		}

		public static Task<Employee?> FindAsync(this ITable<Employee> table, int employeeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId == employeeId, cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this ITable<Employee> table, int employeeId)
		{
			return table.Where(e => e.EmployeeId == employeeId);
		}

		public static Employee? Find(this ITable<Employee> table, Employee @record)
		{
			return table.FirstOrDefault(e => e.EmployeeId == @record.EmployeeId);
		}

		public static Task<Employee?> FindAsync(this ITable<Employee> table, Employee @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.EmployeeId == @record.EmployeeId, cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this ITable<Employee> table, Employee @record)
		{
			return table.Where(e => e.EmployeeId == @record.EmployeeId);
		}

		public static Employee? FindEmployee(this TestDataDB db, int employeeId)
		{
			return db.GetTable<Employee>().FirstOrDefault(e => e.EmployeeId == employeeId);
		}

		public static Task<Employee?> FindEmployeeAsync(this TestDataDB db, int employeeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Employee>().FirstOrDefaultAsync(e => e.EmployeeId == employeeId, cancellationToken);
		}

		public static IQueryable<Employee> FindEmployeeQuery(this TestDataDB db, int employeeId)
		{
			return db.GetTable<Employee>().Where(e => e.EmployeeId == employeeId);
		}

		public static Employee? Find(this TestDataDB db, Employee @record)
		{
			return db.GetTable<Employee>().FirstOrDefault(e => e.EmployeeId == @record.EmployeeId);
		}

		public static Task<Employee?> FindAsync(this TestDataDB db, Employee @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Employee>().FirstOrDefaultAsync(e => e.EmployeeId == @record.EmployeeId, cancellationToken);
		}

		public static IQueryable<Employee> FindQuery(this TestDataDB db, Employee @record)
		{
			return db.GetTable<Employee>().Where(e => e.EmployeeId == @record.EmployeeId);
		}

		public static OrderDetail? Find(this ITable<OrderDetail> table, int orderId, int productId)
		{
			return table.FirstOrDefault(e => e.OrderId == orderId && e.ProductId == productId);
		}

		public static Task<OrderDetail?> FindAsync(this ITable<OrderDetail> table, int orderId, int productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == orderId && e.ProductId == productId, cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this ITable<OrderDetail> table, int orderId, int productId)
		{
			return table.Where(e => e.OrderId == orderId && e.ProductId == productId);
		}

		public static OrderDetail? Find(this ITable<OrderDetail> table, OrderDetail @record)
		{
			return table.FirstOrDefault(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId);
		}

		public static Task<OrderDetail?> FindAsync(this ITable<OrderDetail> table, OrderDetail @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId, cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this ITable<OrderDetail> table, OrderDetail @record)
		{
			return table.Where(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId);
		}

		public static OrderDetail? FindOrderDetail(this TestDataDB db, int orderId, int productId)
		{
			return db.GetTable<OrderDetail>().FirstOrDefault(e => e.OrderId == orderId && e.ProductId == productId);
		}

		public static Task<OrderDetail?> FindOrderDetailAsync(this TestDataDB db, int orderId, int productId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<OrderDetail>().FirstOrDefaultAsync(e => e.OrderId == orderId && e.ProductId == productId, cancellationToken);
		}

		public static IQueryable<OrderDetail> FindOrderDetailQuery(this TestDataDB db, int orderId, int productId)
		{
			return db.GetTable<OrderDetail>().Where(e => e.OrderId == orderId && e.ProductId == productId);
		}

		public static OrderDetail? Find(this TestDataDB db, OrderDetail @record)
		{
			return db.GetTable<OrderDetail>().FirstOrDefault(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId);
		}

		public static Task<OrderDetail?> FindAsync(this TestDataDB db, OrderDetail @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<OrderDetail>().FirstOrDefaultAsync(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId, cancellationToken);
		}

		public static IQueryable<OrderDetail> FindQuery(this TestDataDB db, OrderDetail @record)
		{
			return db.GetTable<OrderDetail>().Where(e => e.OrderId == @record.OrderId && e.ProductId == @record.ProductId);
		}

		public static Order? Find(this ITable<Order> table, int orderId)
		{
			return table.FirstOrDefault(e => e.OrderId == orderId);
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, int orderId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == orderId, cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this ITable<Order> table, int orderId)
		{
			return table.Where(e => e.OrderId == orderId);
		}

		public static Order? Find(this ITable<Order> table, Order @record)
		{
			return table.FirstOrDefault(e => e.OrderId == @record.OrderId);
		}

		public static Task<Order?> FindAsync(this ITable<Order> table, Order @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.OrderId == @record.OrderId, cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this ITable<Order> table, Order @record)
		{
			return table.Where(e => e.OrderId == @record.OrderId);
		}

		public static Order? FindOrder(this TestDataDB db, int orderId)
		{
			return db.GetTable<Order>().FirstOrDefault(e => e.OrderId == orderId);
		}

		public static Task<Order?> FindOrderAsync(this TestDataDB db, int orderId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Order>().FirstOrDefaultAsync(e => e.OrderId == orderId, cancellationToken);
		}

		public static IQueryable<Order> FindOrderQuery(this TestDataDB db, int orderId)
		{
			return db.GetTable<Order>().Where(e => e.OrderId == orderId);
		}

		public static Order? Find(this TestDataDB db, Order @record)
		{
			return db.GetTable<Order>().FirstOrDefault(e => e.OrderId == @record.OrderId);
		}

		public static Task<Order?> FindAsync(this TestDataDB db, Order @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Order>().FirstOrDefaultAsync(e => e.OrderId == @record.OrderId, cancellationToken);
		}

		public static IQueryable<Order> FindQuery(this TestDataDB db, Order @record)
		{
			return db.GetTable<Order>().Where(e => e.OrderId == @record.OrderId);
		}

		public static Product? Find(this ITable<Product> table, int productId)
		{
			return table.FirstOrDefault(e => e.ProductId == productId);
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, int productId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProductId == productId, cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this ITable<Product> table, int productId)
		{
			return table.Where(e => e.ProductId == productId);
		}

		public static Product? Find(this ITable<Product> table, Product @record)
		{
			return table.FirstOrDefault(e => e.ProductId == @record.ProductId);
		}

		public static Task<Product?> FindAsync(this ITable<Product> table, Product @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ProductId == @record.ProductId, cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this ITable<Product> table, Product @record)
		{
			return table.Where(e => e.ProductId == @record.ProductId);
		}

		public static Product? FindProduct(this TestDataDB db, int productId)
		{
			return db.GetTable<Product>().FirstOrDefault(e => e.ProductId == productId);
		}

		public static Task<Product?> FindProductAsync(this TestDataDB db, int productId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Product>().FirstOrDefaultAsync(e => e.ProductId == productId, cancellationToken);
		}

		public static IQueryable<Product> FindProductQuery(this TestDataDB db, int productId)
		{
			return db.GetTable<Product>().Where(e => e.ProductId == productId);
		}

		public static Product? Find(this TestDataDB db, Product @record)
		{
			return db.GetTable<Product>().FirstOrDefault(e => e.ProductId == @record.ProductId);
		}

		public static Task<Product?> FindAsync(this TestDataDB db, Product @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Product>().FirstOrDefaultAsync(e => e.ProductId == @record.ProductId, cancellationToken);
		}

		public static IQueryable<Product> FindQuery(this TestDataDB db, Product @record)
		{
			return db.GetTable<Product>().Where(e => e.ProductId == @record.ProductId);
		}

		public static Region? Find(this ITable<Region> table, int regionId)
		{
			return table.FirstOrDefault(e => e.RegionId == regionId);
		}

		public static Task<Region?> FindAsync(this ITable<Region> table, int regionId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RegionId == regionId, cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this ITable<Region> table, int regionId)
		{
			return table.Where(e => e.RegionId == regionId);
		}

		public static Region? Find(this ITable<Region> table, Region @record)
		{
			return table.FirstOrDefault(e => e.RegionId == @record.RegionId);
		}

		public static Task<Region?> FindAsync(this ITable<Region> table, Region @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.RegionId == @record.RegionId, cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this ITable<Region> table, Region @record)
		{
			return table.Where(e => e.RegionId == @record.RegionId);
		}

		public static Region? FindRegion(this TestDataDB db, int regionId)
		{
			return db.GetTable<Region>().FirstOrDefault(e => e.RegionId == regionId);
		}

		public static Task<Region?> FindRegionAsync(this TestDataDB db, int regionId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Region>().FirstOrDefaultAsync(e => e.RegionId == regionId, cancellationToken);
		}

		public static IQueryable<Region> FindRegionQuery(this TestDataDB db, int regionId)
		{
			return db.GetTable<Region>().Where(e => e.RegionId == regionId);
		}

		public static Region? Find(this TestDataDB db, Region @record)
		{
			return db.GetTable<Region>().FirstOrDefault(e => e.RegionId == @record.RegionId);
		}

		public static Task<Region?> FindAsync(this TestDataDB db, Region @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Region>().FirstOrDefaultAsync(e => e.RegionId == @record.RegionId, cancellationToken);
		}

		public static IQueryable<Region> FindQuery(this TestDataDB db, Region @record)
		{
			return db.GetTable<Region>().Where(e => e.RegionId == @record.RegionId);
		}

		public static Shipper? Find(this ITable<Shipper> table, int shipperId)
		{
			return table.FirstOrDefault(e => e.ShipperId == shipperId);
		}

		public static Task<Shipper?> FindAsync(this ITable<Shipper> table, int shipperId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ShipperId == shipperId, cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this ITable<Shipper> table, int shipperId)
		{
			return table.Where(e => e.ShipperId == shipperId);
		}

		public static Shipper? Find(this ITable<Shipper> table, Shipper @record)
		{
			return table.FirstOrDefault(e => e.ShipperId == @record.ShipperId);
		}

		public static Task<Shipper?> FindAsync(this ITable<Shipper> table, Shipper @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.ShipperId == @record.ShipperId, cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this ITable<Shipper> table, Shipper @record)
		{
			return table.Where(e => e.ShipperId == @record.ShipperId);
		}

		public static Shipper? FindShipper(this TestDataDB db, int shipperId)
		{
			return db.GetTable<Shipper>().FirstOrDefault(e => e.ShipperId == shipperId);
		}

		public static Task<Shipper?> FindShipperAsync(this TestDataDB db, int shipperId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Shipper>().FirstOrDefaultAsync(e => e.ShipperId == shipperId, cancellationToken);
		}

		public static IQueryable<Shipper> FindShipperQuery(this TestDataDB db, int shipperId)
		{
			return db.GetTable<Shipper>().Where(e => e.ShipperId == shipperId);
		}

		public static Shipper? Find(this TestDataDB db, Shipper @record)
		{
			return db.GetTable<Shipper>().FirstOrDefault(e => e.ShipperId == @record.ShipperId);
		}

		public static Task<Shipper?> FindAsync(this TestDataDB db, Shipper @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Shipper>().FirstOrDefaultAsync(e => e.ShipperId == @record.ShipperId, cancellationToken);
		}

		public static IQueryable<Shipper> FindQuery(this TestDataDB db, Shipper @record)
		{
			return db.GetTable<Shipper>().Where(e => e.ShipperId == @record.ShipperId);
		}

		public static Supplier? Find(this ITable<Supplier> table, int supplierId)
		{
			return table.FirstOrDefault(e => e.SupplierId == supplierId);
		}

		public static Task<Supplier?> FindAsync(this ITable<Supplier> table, int supplierId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.SupplierId == supplierId, cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this ITable<Supplier> table, int supplierId)
		{
			return table.Where(e => e.SupplierId == supplierId);
		}

		public static Supplier? Find(this ITable<Supplier> table, Supplier @record)
		{
			return table.FirstOrDefault(e => e.SupplierId == @record.SupplierId);
		}

		public static Task<Supplier?> FindAsync(this ITable<Supplier> table, Supplier @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.SupplierId == @record.SupplierId, cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this ITable<Supplier> table, Supplier @record)
		{
			return table.Where(e => e.SupplierId == @record.SupplierId);
		}

		public static Supplier? FindSupplier(this TestDataDB db, int supplierId)
		{
			return db.GetTable<Supplier>().FirstOrDefault(e => e.SupplierId == supplierId);
		}

		public static Task<Supplier?> FindSupplierAsync(this TestDataDB db, int supplierId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Supplier>().FirstOrDefaultAsync(e => e.SupplierId == supplierId, cancellationToken);
		}

		public static IQueryable<Supplier> FindSupplierQuery(this TestDataDB db, int supplierId)
		{
			return db.GetTable<Supplier>().Where(e => e.SupplierId == supplierId);
		}

		public static Supplier? Find(this TestDataDB db, Supplier @record)
		{
			return db.GetTable<Supplier>().FirstOrDefault(e => e.SupplierId == @record.SupplierId);
		}

		public static Task<Supplier?> FindAsync(this TestDataDB db, Supplier @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Supplier>().FirstOrDefaultAsync(e => e.SupplierId == @record.SupplierId, cancellationToken);
		}

		public static IQueryable<Supplier> FindQuery(this TestDataDB db, Supplier @record)
		{
			return db.GetTable<Supplier>().Where(e => e.SupplierId == @record.SupplierId);
		}

		public static Territory? Find(this ITable<Territory> table, string territoryId)
		{
			return table.FirstOrDefault(e => e.TerritoryId == territoryId);
		}

		public static Task<Territory?> FindAsync(this ITable<Territory> table, string territoryId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TerritoryId == territoryId, cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this ITable<Territory> table, string territoryId)
		{
			return table.Where(e => e.TerritoryId == territoryId);
		}

		public static Territory? Find(this ITable<Territory> table, Territory @record)
		{
			return table.FirstOrDefault(e => e.TerritoryId == @record.TerritoryId);
		}

		public static Task<Territory?> FindAsync(this ITable<Territory> table, Territory @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.TerritoryId == @record.TerritoryId, cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this ITable<Territory> table, Territory @record)
		{
			return table.Where(e => e.TerritoryId == @record.TerritoryId);
		}

		public static Territory? FindTerritory(this TestDataDB db, string territoryId)
		{
			return db.GetTable<Territory>().FirstOrDefault(e => e.TerritoryId == territoryId);
		}

		public static Task<Territory?> FindTerritoryAsync(this TestDataDB db, string territoryId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Territory>().FirstOrDefaultAsync(e => e.TerritoryId == territoryId, cancellationToken);
		}

		public static IQueryable<Territory> FindTerritoryQuery(this TestDataDB db, string territoryId)
		{
			return db.GetTable<Territory>().Where(e => e.TerritoryId == territoryId);
		}

		public static Territory? Find(this TestDataDB db, Territory @record)
		{
			return db.GetTable<Territory>().FirstOrDefault(e => e.TerritoryId == @record.TerritoryId);
		}

		public static Task<Territory?> FindAsync(this TestDataDB db, Territory @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Territory>().FirstOrDefaultAsync(e => e.TerritoryId == @record.TerritoryId, cancellationToken);
		}

		public static IQueryable<Territory> FindQuery(this TestDataDB db, Territory @record)
		{
			return db.GetTable<Territory>().Where(e => e.TerritoryId == @record.TerritoryId);
		}
		#endregion
	}
}
