// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.SQLiteNorthwind
{
	[Table("Employees")]
	public class Employee : IEquatable<Employee>
	{
		[Column("EmployeeID"     , DataType  = DataType.Int32    , DbType   = "int"           , Length = 4            , Precision = 10, Scale     = 0, IsPrimaryKey = true                     )] public int       EmployeeId      { get; set; } // int
		[Column("LastName"       , CanBeNull = false             , DataType = DataType.VarChar, DbType = "varchar(20)", Length    = 20, Precision = 0, Scale        = 0                        )] public string    LastName        { get; set; } = null!; // varchar(20)
		[Column("FirstName"      , CanBeNull = false             , DataType = DataType.VarChar, DbType = "varchar(10)", Length    = 10, Precision = 0, Scale        = 0                        )] public string    FirstName       { get; set; } = null!; // varchar(10)
		[Column("Title"          , DataType  = DataType.VarChar  , DbType   = "varchar(30)"   , Length = 30           , Precision = 0 , Scale     = 0                                          )] public string?   Title           { get; set; } // varchar(30)
		[Column("TitleOfCourtesy", DataType  = DataType.VarChar  , DbType   = "varchar(25)"   , Length = 25           , Precision = 0 , Scale     = 0                                          )] public string?   TitleOfCourtesy { get; set; } // varchar(25)
		[Column("BirthDate"      , DataType  = DataType.Timestamp, DbType   = "timestamp"     , Length = 8            , Precision = 0 , Scale     = 0, SkipOnInsert = true, SkipOnUpdate = true)] public DateTime? BirthDate       { get; set; } // timestamp
		[Column("HireDate"       , DataType  = DataType.Timestamp, DbType   = "timestamp"     , Length = 8            , Precision = 0 , Scale     = 0, SkipOnInsert = true, SkipOnUpdate = true)] public DateTime? HireDate        { get; set; } // timestamp
		[Column("Address"        , DataType  = DataType.VarChar  , DbType   = "varchar(60)"   , Length = 60           , Precision = 0 , Scale     = 0                                          )] public string?   Address         { get; set; } // varchar(60)
		[Column("City"           , DataType  = DataType.VarChar  , DbType   = "varchar(15)"   , Length = 15           , Precision = 0 , Scale     = 0                                          )] public string?   City            { get; set; } // varchar(15)
		[Column("Region"         , DataType  = DataType.VarChar  , DbType   = "varchar(15)"   , Length = 15           , Precision = 0 , Scale     = 0                                          )] public string?   Region          { get; set; } // varchar(15)
		[Column("PostalCode"     , DataType  = DataType.VarChar  , DbType   = "varchar(10)"   , Length = 10           , Precision = 0 , Scale     = 0                                          )] public string?   PostalCode      { get; set; } // varchar(10)
		[Column("Country"        , DataType  = DataType.VarChar  , DbType   = "varchar(15)"   , Length = 15           , Precision = 0 , Scale     = 0                                          )] public string?   Country         { get; set; } // varchar(15)
		[Column("HomePhone"      , DataType  = DataType.VarChar  , DbType   = "varchar(24)"   , Length = 24           , Precision = 0 , Scale     = 0                                          )] public string?   HomePhone       { get; set; } // varchar(24)
		[Column("Extension"      , DataType  = DataType.VarChar  , DbType   = "varchar(4)"    , Length = 4            , Precision = 0 , Scale     = 0                                          )] public string?   Extension       { get; set; } // varchar(4)
		[Column("Photo"          , DataType  = DataType.VarBinary, DbType   = "blob"          , Length = 2147483647   , Precision = 0 , Scale     = 0                                          )] public byte[]?   Photo           { get; set; } // blob
		[Column("Notes"          , DataType  = DataType.Text     , DbType   = "text(max)"     , Length = 2147483647   , Precision = 0 , Scale     = 0                                          )] public string?   Notes           { get; set; } // text(max)
		[Column("ReportsTo"      , DataType  = DataType.Int32    , DbType   = "int"           , Length = 4            , Precision = 10, Scale     = 0                                          )] public int?      ReportsTo       { get; set; } // int
		[Column("PhotoPath"      , DataType  = DataType.VarChar  , DbType   = "varchar(255)"  , Length = 255          , Precision = 0 , Scale     = 0                                          )] public string?   PhotoPath       { get; set; } // varchar(255)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<Employee> _equalityComparer = ComparerBuilder.GetEqualityComparer<Employee>(c => c.EmployeeId);

		public bool Equals(Employee? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as Employee);
		}
		#endregion
	}
}
