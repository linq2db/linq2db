// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Mapping;
using LinqToDB.Tools.Comparers;
using System;
using System.Collections.Generic;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.MySql
{
	[Table("AllTypesNoYear")]
	public class AllTypesNoYear : IEquatable<AllTypesNoYear>
	{
		[Column("ID"                 , DataType = DataType.Int32    , DbType = "int"                       , Precision = 10   , Scale = 0, IsPrimaryKey = true, IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int       Id                  { get; set; } // int
		[Column("bigintDataType"     , DataType = DataType.Int64    , DbType = "bigint"                    , Precision = 19   , Scale = 0                                                                                  )] public long?     BigintDataType      { get; set; } // bigint
		[Column("smallintDataType"   , DataType = DataType.Int16    , DbType = "smallint"                  , Precision = 5    , Scale = 0                                                                                  )] public short?    SmallintDataType    { get; set; } // smallint
		[Column("tinyintDataType"    , DataType = DataType.SByte    , DbType = "tinyint"                   , Precision = 3    , Scale = 0                                                                                  )] public sbyte?    TinyintDataType     { get; set; } // tinyint
		[Column("mediumintDataType"  , DataType = DataType.Int32    , DbType = "mediumint"                 , Precision = 7    , Scale = 0                                                                                  )] public int?      MediumintDataType   { get; set; } // mediumint
		[Column("intDataType"        , DataType = DataType.Int32    , DbType = "int"                       , Precision = 10   , Scale = 0                                                                                  )] public int?      IntDataType         { get; set; } // int
		[Column("numericDataType"    , DataType = DataType.Decimal  , DbType = "decimal(10,0)"             , Precision = 10   , Scale = 0                                                                                  )] public decimal?  NumericDataType     { get; set; } // decimal(10,0)
		[Column("decimalDataType"    , DataType = DataType.Decimal  , DbType = "decimal(10,0)"             , Precision = 10   , Scale = 0                                                                                  )] public decimal?  DecimalDataType     { get; set; } // decimal(10,0)
		[Column("doubleDataType"     , DataType = DataType.Double   , DbType = "double"                    , Precision = 22                                                                                                )] public double?   DoubleDataType      { get; set; } // double
		[Column("floatDataType"      , DataType = DataType.Single   , DbType = "float"                     , Precision = 12                                                                                                )] public float?    FloatDataType       { get; set; } // float
		[Column("dateDataType"       , DataType = DataType.Date     , DbType = "date"                                                                                                                                      )] public DateTime? DateDataType        { get; set; } // date
		[Column("datetimeDataType"   , DataType = DataType.DateTime , DbType = "datetime"                                                                                                                                  )] public DateTime? DatetimeDataType    { get; set; } // datetime
		[Column("timestampDataType"  , DataType = DataType.DateTime , DbType = "timestamp"                                                                                                                                 )] public DateTime? TimestampDataType   { get; set; } // timestamp
		[Column("timeDataType"       , DataType = DataType.Time     , DbType = "time"                                                                                                                                      )] public TimeSpan? TimeDataType        { get; set; } // time
		[Column("charDataType"       , DataType = DataType.Char     , DbType = "char(1)"                   , Length    = 1                                                                                                 )] public char?     CharDataType        { get; set; } // char(1)
		[Column("char20DataType"     , DataType = DataType.Char     , DbType = "char(20)"                  , Length    = 20                                                                                                )] public string?   Char20DataType      { get; set; } // char(20)
		[Column("varcharDataType"    , DataType = DataType.VarChar  , DbType = "varchar(20)"               , Length    = 20                                                                                                )] public string?   VarcharDataType     { get; set; } // varchar(20)
		[Column("textDataType"       , DataType = DataType.Text     , DbType = "text"                      , Length    = 65535                                                                                             )] public string?   TextDataType        { get; set; } // text
		[Column("binaryDataType"     , DataType = DataType.Binary   , DbType = "binary(3)"                 , Length    = 3                                                                                                 )] public byte[]?   BinaryDataType      { get; set; } // binary(3)
		[Column("varbinaryDataType"  , DataType = DataType.VarBinary, DbType = "varbinary(5)"              , Length    = 5                                                                                                 )] public byte[]?   VarbinaryDataType   { get; set; } // varbinary(5)
		[Column("blobDataType"       , DataType = DataType.Blob     , DbType = "blob"                      , Length    = 65535                                                                                             )] public byte[]?   BlobDataType        { get; set; } // blob
		[Column("bitDataType"        , DataType = DataType.BitArray , DbType = "bit(3)"                    , Precision = 3                                                                                                 )] public byte?     BitDataType         { get; set; } // bit(3)
		[Column("enumDataType"       , DataType = DataType.VarChar  , DbType = "enum('Green','Red','Blue')", Length    = 5                                                                                                 )] public string?   EnumDataType        { get; set; } // enum('Green','Red','Blue')
		[Column("setDataType"        , DataType = DataType.VarChar  , DbType = "set('one','two')"          , Length    = 7                                                                                                 )] public string?   SetDataType         { get; set; } // set('one','two')
		[Column("intUnsignedDataType", DataType = DataType.UInt32   , DbType = "int unsigned"              , Precision = 10   , Scale = 0                                                                                  )] public uint?     IntUnsignedDataType { get; set; } // int unsigned
		[Column("boolDataType"       , DataType = DataType.SByte    , DbType = "tinyint(1)"                , Precision = 3    , Scale = 0                                                                                  )] public bool?     BoolDataType        { get; set; } // tinyint(1)

		#region IEquatable<T> support
		private static readonly IEqualityComparer<AllTypesNoYear> _equalityComparer = ComparerBuilder.GetEqualityComparer<AllTypesNoYear>(c => c.Id);

		public bool Equals(AllTypesNoYear? other)
		{
			return _equalityComparer.Equals(this, other!);
		}

		public override int GetHashCode()
		{
			return _equalityComparer.GetHashCode(this);
		}

		public override bool Equals(object? obj)
		{
			return Equals(obj as AllTypesNoYear);
		}
		#endregion
	}
}
