// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591
#nullable enable

namespace Cli.All.MySql
{
	public partial class TestDataDB : DataConnection
	{
		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions options)
			: base(options)
		{
			InitDataContext();
		}

		public TestDataDB(DataOptions<TestDataDB> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<AllType>           AllTypes            => this.GetTable<AllType>();
		public ITable<AllTypesNoYear>    AllTypesNoYears     => this.GetTable<AllTypesNoYear>();
		public ITable<Child>             Children            => this.GetTable<Child>();
		public ITable<CollatedTable>     CollatedTables      => this.GetTable<CollatedTable>();
		public ITable<DataTypeTest>      DataTypeTests       => this.GetTable<DataTypeTest>();
		public ITable<Doctor>            Doctors             => this.GetTable<Doctor>();
		public ITable<FullTextIndexTest> FullTextIndexTests  => this.GetTable<FullTextIndexTest>();
		public ITable<GrandChild>        GrandChildren       => this.GetTable<GrandChild>();
		public ITable<InheritanceChild>  InheritanceChildren => this.GetTable<InheritanceChild>();
		public ITable<InheritanceParent> InheritanceParents  => this.GetTable<InheritanceParent>();
		public ITable<Issue1993>         Issue1993           => this.GetTable<Issue1993>();
		public ITable<LinqDataType>      LinqDataTypes       => this.GetTable<LinqDataType>();
		public ITable<Parent>            Parents             => this.GetTable<Parent>();
		public ITable<Patient>           Patients            => this.GetTable<Patient>();
		public ITable<Person>            People              => this.GetTable<Person>();
		public ITable<TestIdentity>      TestIdentities      => this.GetTable<TestIdentity>();
		public ITable<TestMerge1>        TestMerge1          => this.GetTable<TestMerge1>();
		public ITable<TestMerge2>        TestMerge2          => this.GetTable<TestMerge2>();
		public ITable<TestSameName>      TestSameNames       => this.GetTable<TestSameName>();
		/// <summary>
		/// VIEW
		/// </summary>
		public ITable<PersonView>        PersonViews         => this.GetTable<PersonView>();
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static AllType? Find(this ITable<AllType> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllType? Find(this ITable<AllType> table, AllType @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this ITable<AllType> table, AllType @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this ITable<AllType> table, AllType @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllType? FindAllType(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllType?> FindAllTypeAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllType> FindAllTypeQuery(this TestDataDB db, int id)
		{
			return db.GetTable<AllType>().Where(e => e.Id == id);
		}

		public static AllType? Find(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllType?> FindAsync(this TestDataDB db, AllType @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllType>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllType> FindQuery(this TestDataDB db, AllType @record)
		{
			return db.GetTable<AllType>().Where(e => e.Id == @record.Id);
		}

		public static AllTypesNoYear? Find(this ITable<AllTypesNoYear> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllTypesNoYear?> FindAsync(this ITable<AllTypesNoYear> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllTypesNoYear> FindQuery(this ITable<AllTypesNoYear> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static AllTypesNoYear? Find(this ITable<AllTypesNoYear> table, AllTypesNoYear @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllTypesNoYear?> FindAsync(this ITable<AllTypesNoYear> table, AllTypesNoYear @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllTypesNoYear> FindQuery(this ITable<AllTypesNoYear> table, AllTypesNoYear @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static AllTypesNoYear? FindAllTypesNoYear(this TestDataDB db, int id)
		{
			return db.GetTable<AllTypesNoYear>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<AllTypesNoYear?> FindAllTypesNoYearAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllTypesNoYear>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<AllTypesNoYear> FindAllTypesNoYearQuery(this TestDataDB db, int id)
		{
			return db.GetTable<AllTypesNoYear>().Where(e => e.Id == id);
		}

		public static AllTypesNoYear? Find(this TestDataDB db, AllTypesNoYear @record)
		{
			return db.GetTable<AllTypesNoYear>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<AllTypesNoYear?> FindAsync(this TestDataDB db, AllTypesNoYear @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<AllTypesNoYear>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<AllTypesNoYear> FindQuery(this TestDataDB db, AllTypesNoYear @record)
		{
			return db.GetTable<AllTypesNoYear>().Where(e => e.Id == @record.Id);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, int dataTypeId)
		{
			return table.FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, int dataTypeId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, int dataTypeId)
		{
			return table.Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this ITable<DataTypeTest> table, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this ITable<DataTypeTest> table, DataTypeTest @record)
		{
			return table.Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static DataTypeTest? FindDataTypeTest(this TestDataDB db, int dataTypeId)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == dataTypeId);
		}

		public static Task<DataTypeTest?> FindDataTypeTestAsync(this TestDataDB db, int dataTypeId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == dataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindDataTypeTestQuery(this TestDataDB db, int dataTypeId)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == dataTypeId);
		}

		public static DataTypeTest? Find(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefault(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Task<DataTypeTest?> FindAsync(this TestDataDB db, DataTypeTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<DataTypeTest>().FirstOrDefaultAsync(e => e.DataTypeId == @record.DataTypeId, cancellationToken);
		}

		public static IQueryable<DataTypeTest> FindQuery(this TestDataDB db, DataTypeTest @record)
		{
			return db.GetTable<DataTypeTest>().Where(e => e.DataTypeId == @record.DataTypeId);
		}

		public static Doctor? Find(this ITable<Doctor> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this ITable<Doctor> table, Doctor @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this ITable<Doctor> table, Doctor @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this ITable<Doctor> table, Doctor @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Doctor? FindDoctor(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Doctor?> FindDoctorAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Doctor> FindDoctorQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == personId);
		}

		public static Doctor? Find(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Doctor?> FindAsync(this TestDataDB db, Doctor @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Doctor>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Doctor> FindQuery(this TestDataDB db, Doctor @record)
		{
			return db.GetTable<Doctor>().Where(e => e.PersonId == @record.PersonId);
		}

		public static FullTextIndexTest? Find(this ITable<FullTextIndexTest> table, uint id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<FullTextIndexTest?> FindAsync(this ITable<FullTextIndexTest> table, uint id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<FullTextIndexTest> FindQuery(this ITable<FullTextIndexTest> table, uint id)
		{
			return table.Where(e => e.Id == id);
		}

		public static FullTextIndexTest? Find(this ITable<FullTextIndexTest> table, FullTextIndexTest @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<FullTextIndexTest?> FindAsync(this ITable<FullTextIndexTest> table, FullTextIndexTest @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<FullTextIndexTest> FindQuery(this ITable<FullTextIndexTest> table, FullTextIndexTest @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static FullTextIndexTest? FindFullTextIndexTest(this TestDataDB db, uint id)
		{
			return db.GetTable<FullTextIndexTest>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<FullTextIndexTest?> FindFullTextIndexTestAsync(this TestDataDB db, uint id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<FullTextIndexTest>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<FullTextIndexTest> FindFullTextIndexTestQuery(this TestDataDB db, uint id)
		{
			return db.GetTable<FullTextIndexTest>().Where(e => e.Id == id);
		}

		public static FullTextIndexTest? Find(this TestDataDB db, FullTextIndexTest @record)
		{
			return db.GetTable<FullTextIndexTest>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<FullTextIndexTest?> FindAsync(this TestDataDB db, FullTextIndexTest @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<FullTextIndexTest>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<FullTextIndexTest> FindQuery(this TestDataDB db, FullTextIndexTest @record)
		{
			return db.GetTable<FullTextIndexTest>().Where(e => e.Id == @record.Id);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, int inheritanceChildId)
		{
			return table.Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this ITable<InheritanceChild> table, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this ITable<InheritanceChild> table, InheritanceChild @record)
		{
			return table.Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceChild? FindInheritanceChild(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static Task<InheritanceChild?> FindInheritanceChildAsync(this TestDataDB db, int inheritanceChildId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == inheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindInheritanceChildQuery(this TestDataDB db, int inheritanceChildId)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == inheritanceChildId);
		}

		public static InheritanceChild? Find(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefault(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static Task<InheritanceChild?> FindAsync(this TestDataDB db, InheritanceChild @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceChild>().FirstOrDefaultAsync(e => e.InheritanceChildId == @record.InheritanceChildId, cancellationToken);
		}

		public static IQueryable<InheritanceChild> FindQuery(this TestDataDB db, InheritanceChild @record)
		{
			return db.GetTable<InheritanceChild>().Where(e => e.InheritanceChildId == @record.InheritanceChildId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, int inheritanceParentId)
		{
			return table.Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this ITable<InheritanceParent> table, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this ITable<InheritanceParent> table, InheritanceParent @record)
		{
			return table.Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static InheritanceParent? FindInheritanceParent(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static Task<InheritanceParent?> FindInheritanceParentAsync(this TestDataDB db, int inheritanceParentId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == inheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindInheritanceParentQuery(this TestDataDB db, int inheritanceParentId)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == inheritanceParentId);
		}

		public static InheritanceParent? Find(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefault(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Task<InheritanceParent?> FindAsync(this TestDataDB db, InheritanceParent @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<InheritanceParent>().FirstOrDefaultAsync(e => e.InheritanceParentId == @record.InheritanceParentId, cancellationToken);
		}

		public static IQueryable<InheritanceParent> FindQuery(this TestDataDB db, InheritanceParent @record)
		{
			return db.GetTable<InheritanceParent>().Where(e => e.InheritanceParentId == @record.InheritanceParentId);
		}

		public static Issue1993? Find(this ITable<Issue1993> table, uint id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Issue1993?> FindAsync(this ITable<Issue1993> table, uint id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Issue1993> FindQuery(this ITable<Issue1993> table, uint id)
		{
			return table.Where(e => e.Id == id);
		}

		public static Issue1993? Find(this ITable<Issue1993> table, Issue1993 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Issue1993?> FindAsync(this ITable<Issue1993> table, Issue1993 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Issue1993> FindQuery(this ITable<Issue1993> table, Issue1993 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static Issue1993? FindIssue1993(this TestDataDB db, uint id)
		{
			return db.GetTable<Issue1993>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<Issue1993?> FindIssue1993Async(this TestDataDB db, uint id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1993>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<Issue1993> FindIssue1993Query(this TestDataDB db, uint id)
		{
			return db.GetTable<Issue1993>().Where(e => e.Id == id);
		}

		public static Issue1993? Find(this TestDataDB db, Issue1993 @record)
		{
			return db.GetTable<Issue1993>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<Issue1993?> FindAsync(this TestDataDB db, Issue1993 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Issue1993>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<Issue1993> FindQuery(this TestDataDB db, Issue1993 @record)
		{
			return db.GetTable<Issue1993>().Where(e => e.Id == @record.Id);
		}

		public static Patient? Find(this ITable<Patient> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this ITable<Patient> table, Patient @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this ITable<Patient> table, Patient @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this ITable<Patient> table, Patient @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Patient? FindPatient(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Patient?> FindPatientAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Patient> FindPatientQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == personId);
		}

		public static Patient? Find(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Patient?> FindAsync(this TestDataDB db, Patient @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Patient>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Patient> FindQuery(this TestDataDB db, Patient @record)
		{
			return db.GetTable<Patient>().Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? Find(this ITable<Person> table, int personId)
		{
			return table.FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, int personId, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, int personId)
		{
			return table.Where(e => e.PersonId == personId);
		}

		public static Person? Find(this ITable<Person> table, Person @record)
		{
			return table.FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this ITable<Person> table, Person @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this ITable<Person> table, Person @record)
		{
			return table.Where(e => e.PersonId == @record.PersonId);
		}

		public static Person? FindPerson(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == personId);
		}

		public static Task<Person?> FindPersonAsync(this TestDataDB db, int personId, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == personId, cancellationToken);
		}

		public static IQueryable<Person> FindPersonQuery(this TestDataDB db, int personId)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == personId);
		}

		public static Person? Find(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().FirstOrDefault(e => e.PersonId == @record.PersonId);
		}

		public static Task<Person?> FindAsync(this TestDataDB db, Person @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<Person>().FirstOrDefaultAsync(e => e.PersonId == @record.PersonId, cancellationToken);
		}

		public static IQueryable<Person> FindQuery(this TestDataDB db, Person @record)
		{
			return db.GetTable<Person>().Where(e => e.PersonId == @record.PersonId);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this ITable<TestIdentity> table, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this ITable<TestIdentity> table, TestIdentity @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestIdentity? FindTestIdentity(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestIdentity?> FindTestIdentityAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindTestIdentityQuery(this TestDataDB db, int id)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == id);
		}

		public static TestIdentity? Find(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestIdentity?> FindAsync(this TestDataDB db, TestIdentity @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestIdentity>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestIdentity> FindQuery(this TestDataDB db, TestIdentity @record)
		{
			return db.GetTable<TestIdentity>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this ITable<TestMerge1> table, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this ITable<TestMerge1> table, TestMerge1 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge1? FindTestMerge1(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge1?> FindTestMerge1Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindTestMerge1Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == id);
		}

		public static TestMerge1? Find(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge1?> FindAsync(this TestDataDB db, TestMerge1 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge1>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge1> FindQuery(this TestDataDB db, TestMerge1 @record)
		{
			return db.GetTable<TestMerge1>().Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this ITable<TestMerge2> table, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this ITable<TestMerge2> table, TestMerge2 @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestMerge2? FindTestMerge2(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestMerge2?> FindTestMerge2Async(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindTestMerge2Query(this TestDataDB db, int id)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == id);
		}

		public static TestMerge2? Find(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestMerge2?> FindAsync(this TestDataDB db, TestMerge2 @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestMerge2>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestMerge2> FindQuery(this TestDataDB db, TestMerge2 @record)
		{
			return db.GetTable<TestMerge2>().Where(e => e.Id == @record.Id);
		}

		public static TestSameName? Find(this ITable<TestSameName> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestSameName?> FindAsync(this ITable<TestSameName> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestSameName> FindQuery(this ITable<TestSameName> table, int id)
		{
			return table.Where(e => e.Id == id);
		}

		public static TestSameName? Find(this ITable<TestSameName> table, TestSameName @record)
		{
			return table.FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestSameName?> FindAsync(this ITable<TestSameName> table, TestSameName @record, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestSameName> FindQuery(this ITable<TestSameName> table, TestSameName @record)
		{
			return table.Where(e => e.Id == @record.Id);
		}

		public static TestSameName? FindTestSameName(this TestDataDB db, int id)
		{
			return db.GetTable<TestSameName>().FirstOrDefault(e => e.Id == id);
		}

		public static Task<TestSameName?> FindTestSameNameAsync(this TestDataDB db, int id, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSameName>().FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}

		public static IQueryable<TestSameName> FindTestSameNameQuery(this TestDataDB db, int id)
		{
			return db.GetTable<TestSameName>().Where(e => e.Id == id);
		}

		public static TestSameName? Find(this TestDataDB db, TestSameName @record)
		{
			return db.GetTable<TestSameName>().FirstOrDefault(e => e.Id == @record.Id);
		}

		public static Task<TestSameName?> FindAsync(this TestDataDB db, TestSameName @record, CancellationToken cancellationToken = default)
		{
			return db.GetTable<TestSameName>().FirstOrDefaultAsync(e => e.Id == @record.Id, cancellationToken);
		}

		public static IQueryable<TestSameName> FindQuery(this TestDataDB db, TestSameName @record)
		{
			return db.GetTable<TestSameName>().Where(e => e.Id == @record.Id);
		}
		#endregion

		#region Associations
		#region Doctor Associations
		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MySql.Doctor.PersonId), OtherKey = nameof(MySql.Person.PersonId))]
		public static Person Person(this Doctor obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion

		#region Person Associations
		/// <summary>
		/// FK_Doctor_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(MySql.Person.PersonId), OtherKey = nameof(MySql.Doctor.PersonId))]
		public static Doctor? Doctor(this Person obj, IDataContext db)
		{
			return db.GetTable<Doctor>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}

		/// <summary>
		/// FK_Patient_Person backreference
		/// </summary>
		[Association(ThisKey = nameof(MySql.Person.PersonId), OtherKey = nameof(MySql.Patient.PersonId))]
		public static Patient? Patient(this Person obj, IDataContext db)
		{
			return db.GetTable<Patient>().FirstOrDefault(t => t.PersonId == obj.PersonId);
		}
		#endregion

		#region Patient Associations
		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(CanBeNull = false, ThisKey = nameof(MySql.Patient.PersonId), OtherKey = nameof(MySql.Person.PersonId))]
		public static Person Person(this Patient obj, IDataContext db)
		{
			return db.GetTable<Person>().First(t => obj.PersonId == t.PersonId);
		}
		#endregion
		#endregion

		#region Stored Procedures
		#region AddIssue792Record
		public static int AddIssue792Record(this TestDataDB dataConnection)
		{
			return dataConnection.ExecuteProc("`AddIssue792Record`");
		}

		public static Task<int> AddIssue792RecordAsync(this TestDataDB dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.ExecuteProcAsync("`AddIssue792Record`", cancellationToken);
		}
		#endregion

		#region Issue2313Parameters
		public static IEnumerable<Issue2313ParametersResult> Issue2313Parameters(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, string? json, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, int? year, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					DbType = "VARCHAR(255)",
					Size = 255
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					DbType = "VARCHAR(1)",
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					DbType = "CHAR(255)",
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					DbType = "CHAR(1)",
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					DbType = "VARBINARY(255)",
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					DbType = "BINARY(255)",
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					DbType = "TINYBLOB",
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					DbType = "BLOB",
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					DbType = "MEDIUMBLOB",
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					DbType = "LONGBLOB"
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					DbType = "TINYTEXT",
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					DbType = "TEXT",
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					DbType = "MEDIUMTEXT",
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					DbType = "LONGTEXT"
				},
				new DataParameter("Date", date, DataType.Date)
				{
					DbType = "DATE"
				},
				new DataParameter("DateTime", dateTime, DataType.DateTime)
				{
					DbType = "DATETIME"
				},
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime)
				{
					DbType = "TIMESTAMP"
				},
				new DataParameter("Time", time, DataType.Time)
				{
					DbType = "TIME"
				},
				new DataParameter("Json", json, DataType.Json)
				{
					DbType = "JSON"
				},
				new DataParameter("TinyInt", tinyInt, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("SmallInt", smallInt, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("MediumInt", mediumInt, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("Int", @int, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("BigInt", bigInt, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("Decimal", @decimal, DataType.Decimal)
				{
					DbType = "DECIMAL(10,0)"
				},
				new DataParameter("Float", @float, DataType.Single)
				{
					DbType = "FLOAT"
				},
				new DataParameter("Double", @double, DataType.Double)
				{
					DbType = "DOUBLE"
				},
				new DataParameter("Boolean", boolean, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("Bit1", bit1, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit8", bit8, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit10", bit10, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit16", bit16, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit32", bit32, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit64", bit64, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Year", year, DataType.Int32)
				{
					DbType = "YEAR"
				},
				new DataParameter("Geometry", geometry)
				{
					DbType = "GEOMETRY"
				},
				new DataParameter("Point", point)
				{
					DbType = "POINT"
				},
				new DataParameter("LineString", lineString)
				{
					DbType = "LINESTRING"
				},
				new DataParameter("Polygon", polygon)
				{
					DbType = "POLYGON"
				},
				new DataParameter("MultiPoint", multiPoint)
				{
					DbType = "MULTIPOINT"
				},
				new DataParameter("MultiLineString", multiLineString)
				{
					DbType = "MULTILINESTRING"
				},
				new DataParameter("MultiPolygon", multiPolygon)
				{
					DbType = "MULTIPOLYGON"
				},
				new DataParameter("GeometryCollection", geometryCollection)
				{
					DbType = "GEOMCOLLECTION"
				}
			};
			return dataConnection.QueryProc<Issue2313ParametersResult>("`Issue2313Parameters`", parameters);
		}

		public static Task<IEnumerable<Issue2313ParametersResult>> Issue2313ParametersAsync(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, string? json, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, int? year, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					DbType = "VARCHAR(255)",
					Size = 255
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					DbType = "VARCHAR(1)",
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					DbType = "CHAR(255)",
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					DbType = "CHAR(1)",
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					DbType = "VARBINARY(255)",
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					DbType = "BINARY(255)",
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					DbType = "TINYBLOB",
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					DbType = "BLOB",
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					DbType = "MEDIUMBLOB",
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					DbType = "LONGBLOB"
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					DbType = "TINYTEXT",
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					DbType = "TEXT",
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					DbType = "MEDIUMTEXT",
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					DbType = "LONGTEXT"
				},
				new DataParameter("Date", date, DataType.Date)
				{
					DbType = "DATE"
				},
				new DataParameter("DateTime", dateTime, DataType.DateTime)
				{
					DbType = "DATETIME"
				},
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime)
				{
					DbType = "TIMESTAMP"
				},
				new DataParameter("Time", time, DataType.Time)
				{
					DbType = "TIME"
				},
				new DataParameter("Json", json, DataType.Json)
				{
					DbType = "JSON"
				},
				new DataParameter("TinyInt", tinyInt, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("SmallInt", smallInt, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("MediumInt", mediumInt, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("Int", @int, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("BigInt", bigInt, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("Decimal", @decimal, DataType.Decimal)
				{
					DbType = "DECIMAL(10,0)"
				},
				new DataParameter("Float", @float, DataType.Single)
				{
					DbType = "FLOAT"
				},
				new DataParameter("Double", @double, DataType.Double)
				{
					DbType = "DOUBLE"
				},
				new DataParameter("Boolean", boolean, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("Bit1", bit1, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit8", bit8, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit10", bit10, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit16", bit16, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit32", bit32, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit64", bit64, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Year", year, DataType.Int32)
				{
					DbType = "YEAR"
				},
				new DataParameter("Geometry", geometry)
				{
					DbType = "GEOMETRY"
				},
				new DataParameter("Point", point)
				{
					DbType = "POINT"
				},
				new DataParameter("LineString", lineString)
				{
					DbType = "LINESTRING"
				},
				new DataParameter("Polygon", polygon)
				{
					DbType = "POLYGON"
				},
				new DataParameter("MultiPoint", multiPoint)
				{
					DbType = "MULTIPOINT"
				},
				new DataParameter("MultiLineString", multiLineString)
				{
					DbType = "MULTILINESTRING"
				},
				new DataParameter("MultiPolygon", multiPolygon)
				{
					DbType = "MULTIPOLYGON"
				},
				new DataParameter("GeometryCollection", geometryCollection)
				{
					DbType = "GEOMCOLLECTION"
				}
			};
			return dataConnection.QueryProcAsync<Issue2313ParametersResult>("`Issue2313Parameters`", cancellationToken, parameters);
		}

		public partial class Issue2313ParametersResult
		{
			[Column("`VarCharDefault`"    , DataType = DataType.VarChar  , DbType = "VARCHAR(255)"      )] public string?   VarCharDefault     { get; set; }
			[Column("`VarChar1`"          , DataType = DataType.VarChar  , DbType = "VARCHAR(1)"        )] public char?     VarChar1           { get; set; }
			[Column("`Char255`"           , DataType = DataType.Char     , DbType = "CHAR(255)"         )] public string?   Char255            { get; set; }
			[Column("`Char1`"             , DataType = DataType.Char     , DbType = "CHAR(1)"           )] public char?     Char1              { get; set; }
			[Column("`VarBinary255`"      , DataType = DataType.VarBinary, DbType = "VARBINARY(255)"    )] public byte[]?   VarBinary255       { get; set; }
			[Column("`Binary255`"         , DataType = DataType.Binary   , DbType = "BINARY(255)"       )] public byte[]?   Binary255          { get; set; }
			[Column("`TinyBlob`"          , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   TinyBlob           { get; set; }
			[Column("`Blob`"              , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   Blob               { get; set; }
			[Column("`MediumBlob`"        , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   MediumBlob         { get; set; }
			[Column("`LongBlob`"          , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   LongBlob           { get; set; }
			[Column("`TinyText`"          , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   TinyText           { get; set; }
			[Column("`Text`"              , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   Text               { get; set; }
			[Column("`MediumText`"        , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   MediumText         { get; set; }
			[Column("`LongText`"          , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   LongText           { get; set; }
			[Column("`Date`"              , DataType = DataType.Date     , DbType = "DATE"              )] public DateTime? Date               { get; set; }
			[Column("`DateTime`"          , DataType = DataType.DateTime , DbType = "DATETIME"          )] public DateTime? DateTime           { get; set; }
			[Column("`TimeStamp`"         , DataType = DataType.DateTime , DbType = "TIMESTAMP"         )] public DateTime? TimeStamp          { get; set; }
			[Column("`Time`"              , DataType = DataType.Time     , DbType = "TIME"              )] public TimeSpan? Time               { get; set; }
			[Column("`Json`"              , DataType = DataType.Json     , DbType = "JSON"              )] public string?   Json               { get; set; }
			[Column("`TinyInt`"           , DataType = DataType.SByte    , DbType = "TINYINT"           )] public sbyte?    TinyInt            { get; set; }
			[Column("`TinyIntUnsigned`"   , DataType = DataType.Byte     , DbType = "TINYINT UNSIGNED"  )] public byte?     TinyIntUnsigned    { get; set; }
			[Column("`SmallInt`"          , DataType = DataType.Int16    , DbType = "SMALLINT"          )] public short?    SmallInt           { get; set; }
			[Column("`SmallIntUnsigned`"  , DataType = DataType.UInt16   , DbType = "SMALLINT UNSIGNED" )] public ushort?   SmallIntUnsigned   { get; set; }
			[Column("`MediumInt`"         , DataType = DataType.Int32    , DbType = "MEDIUMINT"         )] public int?      MediumInt          { get; set; }
			[Column("`MediumIntUnsigned`" , DataType = DataType.UInt32   , DbType = "MEDIUMINT UNSIGNED")] public uint?     MediumIntUnsigned  { get; set; }
			[Column("`Int`"               , DataType = DataType.Int32    , DbType = "INT"               )] public int?      Int                { get; set; }
			[Column("`IntUnsigned`"       , DataType = DataType.UInt32   , DbType = "INT UNSIGNED"      )] public uint?     IntUnsigned        { get; set; }
			[Column("`BigInt`"            , DataType = DataType.Int64    , DbType = "BIGINT"            )] public long?     BigInt             { get; set; }
			[Column("`BigIntUnsigned`"    , DataType = DataType.UInt64   , DbType = "BIGINT UNSIGNED"   )] public ulong?    BigIntUnsigned     { get; set; }
			[Column("`Decimal`"           , DataType = DataType.Decimal  , DbType = "DECIMAL(10,0)"     )] public decimal?  Decimal            { get; set; }
			[Column("`Float`"             , DataType = DataType.Single   , DbType = "FLOAT"             )] public float?    Float              { get; set; }
			[Column("`Double`"            , DataType = DataType.Double   , DbType = "DOUBLE"            )] public double?   Double             { get; set; }
			[Column("`Boolean`"           , DataType = DataType.SByte    , DbType = "BOOL"              )] public bool?     Boolean            { get; set; }
			[Column("`Bit1`"              , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit1               { get; set; }
			[Column("`Bit8`"              , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit8               { get; set; }
			[Column("`Bit10`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit10              { get; set; }
			[Column("`Bit16`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit16              { get; set; }
			[Column("`Bit32`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit32              { get; set; }
			[Column("`Bit64`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit64              { get; set; }
			[Column("`Enum`"              , DataType = DataType.VarChar  , DbType = "ENUM"              )] public string?   Enum               { get; set; }
			[Column("`Set`"               , DataType = DataType.VarChar  , DbType = "ENUM"              )] public string?   Set                { get; set; }
			[Column("`Year`"              , DataType = DataType.Int32    , DbType = "YEAR"              )] public int?      Year               { get; set; }
			[Column("`Geometry`"          , DbType   = "GEOMETRY"                                       )] public byte[]?   Geometry           { get; set; }
			[Column("`Point`"             , DbType   = "GEOMETRY"                                       )] public byte[]?   Point              { get; set; }
			[Column("`LineString`"        , DbType   = "GEOMETRY"                                       )] public byte[]?   LineString         { get; set; }
			[Column("`Polygon`"           , DbType   = "GEOMETRY"                                       )] public byte[]?   Polygon            { get; set; }
			[Column("`MultiPoint`"        , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiPoint         { get; set; }
			[Column("`MultiLineString`"   , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiLineString    { get; set; }
			[Column("`MultiPolygon`"      , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiPolygon       { get; set; }
			[Column("`GeometryCollection`", DbType   = "GEOMETRY"                                       )] public byte[]?   GeometryCollection { get; set; }
		}
		#endregion

		#region Issue2313Results
		public static IEnumerable<Issue2313ResultsResult> Issue2313Results(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, string? json, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, int? year)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					DbType = "VARCHAR(4000)",
					Size = 4000
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					DbType = "VARCHAR(1)",
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					DbType = "CHAR(255)",
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					DbType = "CHAR(1)",
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					DbType = "VARBINARY(255)",
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					DbType = "BINARY(255)",
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					DbType = "TINYBLOB",
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					DbType = "BLOB",
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					DbType = "MEDIUMBLOB",
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					DbType = "LONGBLOB"
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					DbType = "TINYTEXT",
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					DbType = "TEXT",
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					DbType = "MEDIUMTEXT",
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					DbType = "LONGTEXT"
				},
				new DataParameter("Date", date, DataType.Date)
				{
					DbType = "DATE"
				},
				new DataParameter("DateTime", dateTime, DataType.DateTime)
				{
					DbType = "DATETIME"
				},
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime)
				{
					DbType = "TIMESTAMP"
				},
				new DataParameter("Time", time, DataType.Time)
				{
					DbType = "TIME"
				},
				new DataParameter("TinyInt", tinyInt, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("SmallInt", smallInt, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("MediumInt", mediumInt, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("Int", @int, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("BigInt", bigInt, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("Decimal", @decimal, DataType.Decimal)
				{
					DbType = "DECIMAL(10,0)"
				},
				new DataParameter("Float", @float, DataType.Single)
				{
					DbType = "FLOAT"
				},
				new DataParameter("Double", @double, DataType.Double)
				{
					DbType = "DOUBLE"
				},
				new DataParameter("Boolean", boolean, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("Bit1", bit1, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit8", bit8, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit10", bit10, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit16", bit16, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit32", bit32, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit64", bit64, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Json", json, DataType.Json)
				{
					DbType = "JSON"
				},
				new DataParameter("Geometry", geometry)
				{
					DbType = "GEOMETRY"
				},
				new DataParameter("Point", point)
				{
					DbType = "POINT"
				},
				new DataParameter("LineString", lineString)
				{
					DbType = "LINESTRING"
				},
				new DataParameter("Polygon", polygon)
				{
					DbType = "POLYGON"
				},
				new DataParameter("MultiPoint", multiPoint)
				{
					DbType = "MULTIPOINT"
				},
				new DataParameter("MultiLineString", multiLineString)
				{
					DbType = "MULTILINESTRING"
				},
				new DataParameter("MultiPolygon", multiPolygon)
				{
					DbType = "MULTIPOLYGON"
				},
				new DataParameter("GeometryCollection", geometryCollection)
				{
					DbType = "GEOMCOLLECTION"
				},
				new DataParameter("Year", year, DataType.Int32)
				{
					DbType = "YEAR"
				}
			};
			return dataConnection.QueryProc<Issue2313ResultsResult>("`Issue2313Results`", parameters);
		}

		public static Task<IEnumerable<Issue2313ResultsResult>> Issue2313ResultsAsync(this TestDataDB dataConnection, string? varCharDefault, char? varChar1, string? char255, char? char1, byte[]? varBinary255, byte[]? binary255, byte[]? tinyBlob, byte[]? blob, byte[]? mediumBlob, byte[]? longBlob, string? tinyText, string? text, string? mediumText, string? longText, DateTime? date, DateTime? dateTime, DateTime? timeStamp, TimeSpan? time, sbyte? tinyInt, sbyte? tinyIntUnsigned, short? smallInt, short? smallIntUnsigned, int? mediumInt, int? mediumIntUnsigned, int? @int, int? intUnsigned, long? bigInt, long? bigIntUnsigned, decimal? @decimal, float? @float, double? @double, sbyte? boolean, bool? bit1, bool? bit8, bool? bit10, bool? bit16, bool? bit32, bool? bit64, string? @enum, string? @set, string? json, byte[]? geometry, byte[]? point, byte[]? lineString, byte[]? polygon, byte[]? multiPoint, byte[]? multiLineString, byte[]? multiPolygon, byte[]? geometryCollection, int? year, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("VarCharDefault", varCharDefault, DataType.VarChar)
				{
					DbType = "VARCHAR(4000)",
					Size = 4000
				},
				new DataParameter("VarChar1", varChar1, DataType.VarChar)
				{
					DbType = "VARCHAR(1)",
					Size = 1
				},
				new DataParameter("Char255", char255, DataType.Char)
				{
					DbType = "CHAR(255)",
					Size = 255
				},
				new DataParameter("Char1", char1, DataType.Char)
				{
					DbType = "CHAR(1)",
					Size = 1
				},
				new DataParameter("VarBinary255", varBinary255, DataType.VarBinary)
				{
					DbType = "VARBINARY(255)",
					Size = 255
				},
				new DataParameter("Binary255", binary255, DataType.Binary)
				{
					DbType = "BINARY(255)",
					Size = 255
				},
				new DataParameter("TinyBlob", tinyBlob, DataType.Blob)
				{
					DbType = "TINYBLOB",
					Size = 255
				},
				new DataParameter("Blob", blob, DataType.Blob)
				{
					DbType = "BLOB",
					Size = 65535
				},
				new DataParameter("MediumBlob", mediumBlob, DataType.Blob)
				{
					DbType = "MEDIUMBLOB",
					Size = 16777215
				},
				new DataParameter("LongBlob", longBlob, DataType.Blob)
				{
					DbType = "LONGBLOB"
				},
				new DataParameter("TinyText", tinyText, DataType.Text)
				{
					DbType = "TINYTEXT",
					Size = 255
				},
				new DataParameter("Text", text, DataType.Text)
				{
					DbType = "TEXT",
					Size = 65535
				},
				new DataParameter("MediumText", mediumText, DataType.Text)
				{
					DbType = "MEDIUMTEXT",
					Size = 16777215
				},
				new DataParameter("LongText", longText, DataType.Text)
				{
					DbType = "LONGTEXT"
				},
				new DataParameter("Date", date, DataType.Date)
				{
					DbType = "DATE"
				},
				new DataParameter("DateTime", dateTime, DataType.DateTime)
				{
					DbType = "DATETIME"
				},
				new DataParameter("TimeStamp", timeStamp, DataType.DateTime)
				{
					DbType = "TIMESTAMP"
				},
				new DataParameter("Time", time, DataType.Time)
				{
					DbType = "TIME"
				},
				new DataParameter("TinyInt", tinyInt, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("TinyIntUnsigned", tinyIntUnsigned, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("SmallInt", smallInt, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("SmallIntUnsigned", smallIntUnsigned, DataType.Int16)
				{
					DbType = "SMALLINT"
				},
				new DataParameter("MediumInt", mediumInt, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("MediumIntUnsigned", mediumIntUnsigned, DataType.Int32)
				{
					DbType = "MEDIUMINT"
				},
				new DataParameter("Int", @int, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("IntUnsigned", intUnsigned, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("BigInt", bigInt, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("BigIntUnsigned", bigIntUnsigned, DataType.Int64)
				{
					DbType = "BIGINT"
				},
				new DataParameter("Decimal", @decimal, DataType.Decimal)
				{
					DbType = "DECIMAL(10,0)"
				},
				new DataParameter("Float", @float, DataType.Single)
				{
					DbType = "FLOAT"
				},
				new DataParameter("Double", @double, DataType.Double)
				{
					DbType = "DOUBLE"
				},
				new DataParameter("Boolean", boolean, DataType.SByte)
				{
					DbType = "TINYINT"
				},
				new DataParameter("Bit1", bit1, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit8", bit8, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit10", bit10, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit16", bit16, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit32", bit32, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Bit64", bit64, DataType.BitArray)
				{
					DbType = "BIT"
				},
				new DataParameter("Enum", @enum, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Set", @set, DataType.VarChar)
				{
					DbType = "ENUM",
					Size = 3
				},
				new DataParameter("Json", json, DataType.Json)
				{
					DbType = "JSON"
				},
				new DataParameter("Geometry", geometry)
				{
					DbType = "GEOMETRY"
				},
				new DataParameter("Point", point)
				{
					DbType = "POINT"
				},
				new DataParameter("LineString", lineString)
				{
					DbType = "LINESTRING"
				},
				new DataParameter("Polygon", polygon)
				{
					DbType = "POLYGON"
				},
				new DataParameter("MultiPoint", multiPoint)
				{
					DbType = "MULTIPOINT"
				},
				new DataParameter("MultiLineString", multiLineString)
				{
					DbType = "MULTILINESTRING"
				},
				new DataParameter("MultiPolygon", multiPolygon)
				{
					DbType = "MULTIPOLYGON"
				},
				new DataParameter("GeometryCollection", geometryCollection)
				{
					DbType = "GEOMCOLLECTION"
				},
				new DataParameter("Year", year, DataType.Int32)
				{
					DbType = "YEAR"
				}
			};
			return dataConnection.QueryProcAsync<Issue2313ResultsResult>("`Issue2313Results`", cancellationToken, parameters);
		}

		public partial class Issue2313ResultsResult
		{
			[Column("`VarCharDefault`"    , DataType = DataType.VarChar  , DbType = "VARCHAR(4000)"     )] public string?   VarCharDefault     { get; set; }
			[Column("`VarChar1`"          , DataType = DataType.VarChar  , DbType = "VARCHAR(1)"        )] public char?     VarChar1           { get; set; }
			[Column("`Char255`"           , DataType = DataType.Char     , DbType = "CHAR(255)"         )] public string?   Char255            { get; set; }
			[Column("`Char1`"             , DataType = DataType.Char     , DbType = "CHAR(1)"           )] public char?     Char1              { get; set; }
			[Column("`VarBinary255`"      , DataType = DataType.VarBinary, DbType = "VARBINARY(255)"    )] public byte[]?   VarBinary255       { get; set; }
			[Column("`Binary255`"         , DataType = DataType.Binary   , DbType = "BINARY(255)"       )] public byte[]?   Binary255          { get; set; }
			[Column("`TinyBlob`"          , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   TinyBlob           { get; set; }
			[Column("`Blob`"              , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   Blob               { get; set; }
			[Column("`MediumBlob`"        , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   MediumBlob         { get; set; }
			[Column("`LongBlob`"          , DataType = DataType.Blob     , DbType = "BLOB"              )] public byte[]?   LongBlob           { get; set; }
			[Column("`TinyText`"          , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   TinyText           { get; set; }
			[Column("`Text`"              , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   Text               { get; set; }
			[Column("`MediumText`"        , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   MediumText         { get; set; }
			[Column("`LongText`"          , DataType = DataType.Text     , DbType = "TEXT"              )] public string?   LongText           { get; set; }
			[Column("`Date`"              , DataType = DataType.Date     , DbType = "DATE"              )] public DateTime? Date               { get; set; }
			[Column("`DateTime`"          , DataType = DataType.DateTime , DbType = "DATETIME"          )] public DateTime? DateTime           { get; set; }
			[Column("`TimeStamp`"         , DataType = DataType.DateTime , DbType = "TIMESTAMP"         )] public DateTime? TimeStamp          { get; set; }
			[Column("`Time`"              , DataType = DataType.Time     , DbType = "TIME"              )] public TimeSpan? Time               { get; set; }
			[Column("`TinyInt`"           , DataType = DataType.SByte    , DbType = "TINYINT"           )] public sbyte?    TinyInt            { get; set; }
			[Column("`TinyIntUnsigned`"   , DataType = DataType.Byte     , DbType = "TINYINT UNSIGNED"  )] public byte?     TinyIntUnsigned    { get; set; }
			[Column("`SmallInt`"          , DataType = DataType.Int16    , DbType = "SMALLINT"          )] public short?    SmallInt           { get; set; }
			[Column("`SmallIntUnsigned`"  , DataType = DataType.UInt16   , DbType = "SMALLINT UNSIGNED" )] public ushort?   SmallIntUnsigned   { get; set; }
			[Column("`MediumInt`"         , DataType = DataType.Int32    , DbType = "MEDIUMINT"         )] public int?      MediumInt          { get; set; }
			[Column("`MediumIntUnsigned`" , DataType = DataType.UInt32   , DbType = "MEDIUMINT UNSIGNED")] public uint?     MediumIntUnsigned  { get; set; }
			[Column("`Int`"               , DataType = DataType.Int32    , DbType = "INT"               )] public int?      Int                { get; set; }
			[Column("`IntUnsigned`"       , DataType = DataType.UInt32   , DbType = "INT UNSIGNED"      )] public uint?     IntUnsigned        { get; set; }
			[Column("`BigInt`"            , DataType = DataType.Int64    , DbType = "BIGINT"            )] public long?     BigInt             { get; set; }
			[Column("`BigIntUnsigned`"    , DataType = DataType.UInt64   , DbType = "BIGINT UNSIGNED"   )] public ulong?    BigIntUnsigned     { get; set; }
			[Column("`Decimal`"           , DataType = DataType.Decimal  , DbType = "DECIMAL(10,0)"     )] public decimal?  Decimal            { get; set; }
			[Column("`Float`"             , DataType = DataType.Single   , DbType = "FLOAT"             )] public float?    Float              { get; set; }
			[Column("`Double`"            , DataType = DataType.Double   , DbType = "DOUBLE"            )] public double?   Double             { get; set; }
			[Column("`Boolean`"           , DataType = DataType.SByte    , DbType = "BOOL"              )] public bool?     Boolean            { get; set; }
			[Column("`Bit1`"              , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit1               { get; set; }
			[Column("`Bit8`"              , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit8               { get; set; }
			[Column("`Bit10`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit10              { get; set; }
			[Column("`Bit16`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit16              { get; set; }
			[Column("`Bit32`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit32              { get; set; }
			[Column("`Bit64`"             , DataType = DataType.BitArray , DbType = "BIT"               )] public bool?     Bit64              { get; set; }
			[Column("`Enum`"              , DataType = DataType.VarChar  , DbType = "ENUM"              )] public string?   Enum               { get; set; }
			[Column("`Set`"               , DataType = DataType.VarChar  , DbType = "ENUM"              )] public string?   Set                { get; set; }
			[Column("`Year`"              , DataType = DataType.Int32    , DbType = "YEAR"              )] public int?      Year               { get; set; }
			[Column("`Json`"              , DataType = DataType.Json     , DbType = "JSON"              )] public string?   Json               { get; set; }
			[Column("`Geometry`"          , DbType   = "GEOMETRY"                                       )] public byte[]?   Geometry           { get; set; }
			[Column("`Point`"             , DbType   = "GEOMETRY"                                       )] public byte[]?   Point              { get; set; }
			[Column("`LineString`"        , DbType   = "GEOMETRY"                                       )] public byte[]?   LineString         { get; set; }
			[Column("`Polygon`"           , DbType   = "GEOMETRY"                                       )] public byte[]?   Polygon            { get; set; }
			[Column("`MultiPoint`"        , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiPoint         { get; set; }
			[Column("`MultiLineString`"   , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiLineString    { get; set; }
			[Column("`MultiPolygon`"      , DbType   = "GEOMETRY"                                       )] public byte[]?   MultiPolygon       { get; set; }
			[Column("`GeometryCollection`", DbType   = "GEOMETRY"                                       )] public byte[]?   GeometryCollection { get; set; }
		}
		#endregion

		#region TestOutputParametersWithoutTableProcedure
		public static int TestOutputParametersWithoutTableProcedure(this TestDataDB dataConnection, string? aInParam, out sbyte? aOutParam)
		{
			var parameters = new []
			{
				new DataParameter("aInParam", aInParam, DataType.VarChar)
				{
					DbType = "VARCHAR(256)",
					Size = 256
				},
				new DataParameter("aOutParam", null, DataType.SByte)
				{
					Direction = ParameterDirection.Output,
					DbType = "TINYINT"
				}
			};
			aOutParam = Converter.ChangeTypeTo<sbyte?>(parameters[1].Value);
			return dataConnection.ExecuteProc("`TestOutputParametersWithoutTableProcedure`", parameters);
		}

		public static async Task<TestOutputParametersWithoutTableProcedureResults> TestOutputParametersWithoutTableProcedureAsync(this TestDataDB dataConnection, string? aInParam, sbyte? aOutParam, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("aInParam", aInParam, DataType.VarChar)
				{
					DbType = "VARCHAR(256)",
					Size = 256
				},
				new DataParameter("aOutParam", null, DataType.SByte)
				{
					Direction = ParameterDirection.Output,
					DbType = "TINYINT"
				}
			};
			var result = await dataConnection.ExecuteProcAsync("`TestOutputParametersWithoutTableProcedure`", cancellationToken, parameters);
			return new TestOutputParametersWithoutTableProcedureResults()
			{
				Result = result,
				AOutParam = Converter.ChangeTypeTo<sbyte?>(parameters[1].Value)
			};
		}

		public class TestOutputParametersWithoutTableProcedureResults
		{
			public int    Result    { get; set; }
			public sbyte? AOutParam { get; set; }
		}
		#endregion

		#region TestProcedure
		public static IEnumerable<TestProcedureResult> TestProcedure(this TestDataDB dataConnection, int? param3, ref int? param2, out int? param1)
		{
			var parameters = new []
			{
				new DataParameter("param3", param3, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("param2", param2, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "INT"
				},
				new DataParameter("param1", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT"
				}
			};
			param2 = Converter.ChangeTypeTo<int?>(parameters[1].Value);
			param1 = Converter.ChangeTypeTo<int?>(parameters[2].Value);
			return dataConnection.QueryProc<TestProcedureResult>("`TestProcedure`", parameters).ToList();
		}

		public static async Task<TestProcedureResults> TestProcedureAsync(this TestDataDB dataConnection, int? param3, int? param2, int? param1, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("param3", param3, DataType.Int32)
				{
					DbType = "INT"
				},
				new DataParameter("param2", param2, DataType.Int32)
				{
					Direction = ParameterDirection.InputOutput,
					DbType = "INT"
				},
				new DataParameter("param1", null, DataType.Int32)
				{
					Direction = ParameterDirection.Output,
					DbType = "INT"
				}
			};
			var result = await dataConnection.QueryProcAsync<TestProcedureResult>("`TestProcedure`", cancellationToken, parameters);
			return new TestProcedureResults()
			{
				Result = result.ToList(),
				Param1 = Converter.ChangeTypeTo<int?>(parameters[2].Value),
				Param2 = Converter.ChangeTypeTo<int?>(parameters[1].Value)
			};
		}

		public partial class TestProcedureResult
		{
			[Column("PersonID"  , DataType  = DataType.Int32  , DbType   = "INT"                                   )] public int     PersonId   { get; set; }
			[Column("FirstName" , CanBeNull = false           , DataType = DataType.VarChar, DbType = "VARCHAR(50)")] public string  FirstName  { get; set; } = null!;
			[Column("LastName"  , CanBeNull = false           , DataType = DataType.VarChar, DbType = "VARCHAR(50)")] public string  LastName   { get; set; } = null!;
			[Column("MiddleName", DataType  = DataType.VarChar, DbType   = "VARCHAR(50)"                           )] public string? MiddleName { get; set; }
			[Column("Gender"    , DataType  = DataType.Char   , DbType   = "CHAR(1)"                               )] public char    Gender     { get; set; }
		}

		public class TestProcedureResults
		{
			public IEnumerable<TestProcedureResult> Result { get; set; } = null!;
			public int?                             Param1 { get; set; }
			public int?                             Param2 { get; set; }
		}
		#endregion
		#endregion

		#region Scalar Functions
		#region TestFunction
		[Sql.Function("`TestFunction`", ServerSideOnly = true)]
		public static string? TestFunction(int? param)
		{
			throw new InvalidOperationException("Scalar function cannot be called outside of query");
		}
		#endregion
		#endregion
	}
}
