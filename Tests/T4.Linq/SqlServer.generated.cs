//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

using Microsoft.SqlServer.Types;

namespace DataModel
{
	/// <summary>
	/// Database       : Northwind
	/// Data Source    : DBHost\SQLSERVER2012
	/// Server Version : 11.00.2218
	/// </summary>
	public partial class NorthwindDB : LinqToDB.Data.DataConnection
	{
		public ITable<AlphabeticalListOfProduct>  AlphabeticalListOfProducts   { get { return this.GetTable<AlphabeticalListOfProduct>(); } }
		public ITable<Category>                   Categories                   { get { return this.GetTable<Category>(); } }
		public ITable<CategorySalesFor1997>       CategorySalesFor1997         { get { return this.GetTable<CategorySalesFor1997>(); } }
		public ITable<CurrentProductList>         CurrentProductLists          { get { return this.GetTable<CurrentProductList>(); } }
		public ITable<Customer>                   Customers                    { get { return this.GetTable<Customer>(); } }
		public ITable<CustomerAndSuppliersByCity> CustomerAndSuppliersByCities { get { return this.GetTable<CustomerAndSuppliersByCity>(); } }
		public ITable<CustomerCustomerDemo>       CustomerCustomerDemoes       { get { return this.GetTable<CustomerCustomerDemo>(); } }
		public ITable<CustomerDemographic>        CustomerDemographics         { get { return this.GetTable<CustomerDemographic>(); } }
		public ITable<Employee>                   Employees                    { get { return this.GetTable<Employee>(); } }
		public ITable<EmployeeTerritory>          EmployeeTerritories          { get { return this.GetTable<EmployeeTerritory>(); } }
		public ITable<Invoice>                    Invoices                     { get { return this.GetTable<Invoice>(); } }
		public ITable<Order>                      Orders                       { get { return this.GetTable<Order>(); } }
		public ITable<OrderDetail>                OrderDetails                 { get { return this.GetTable<OrderDetail>(); } }
		public ITable<OrderDetailsExtended>       OrderDetailsExtendeds        { get { return this.GetTable<OrderDetailsExtended>(); } }
		public ITable<OrdersQry>                  OrdersQries                  { get { return this.GetTable<OrdersQry>(); } }
		public ITable<OrderSubtotal>              OrderSubtotals               { get { return this.GetTable<OrderSubtotal>(); } }
		public ITable<Product>                    Products                     { get { return this.GetTable<Product>(); } }
		public ITable<ProductsAboveAveragePrice>  ProductsAboveAveragePrices   { get { return this.GetTable<ProductsAboveAveragePrice>(); } }
		public ITable<ProductSalesFor1997>        ProductSalesFor1997          { get { return this.GetTable<ProductSalesFor1997>(); } }
		public ITable<ProductsByCategory>         ProductsByCategories         { get { return this.GetTable<ProductsByCategory>(); } }
		public ITable<QuarterlyOrder>             QuarterlyOrders              { get { return this.GetTable<QuarterlyOrder>(); } }
		public ITable<Region>                     Regions                      { get { return this.GetTable<Region>(); } }
		public ITable<SalesByCategory>            SalesByCategories            { get { return this.GetTable<SalesByCategory>(); } }
		public ITable<SalesTotalsByAmount>        SalesTotalsByAmounts         { get { return this.GetTable<SalesTotalsByAmount>(); } }
		public ITable<Shipper>                    Shippers                     { get { return this.GetTable<Shipper>(); } }
		public ITable<SummaryOfSalesByQuarter>    SummaryOfSalesByQuarters     { get { return this.GetTable<SummaryOfSalesByQuarter>(); } }
		public ITable<SummaryOfSalesByYear>       SummaryOfSalesByYears        { get { return this.GetTable<SummaryOfSalesByYear>(); } }
		public ITable<Supplier>                   Suppliers                    { get { return this.GetTable<Supplier>(); } }
		public ITable<Territory>                  Territories                  { get { return this.GetTable<Territory>(); } }

		public NorthwindDB(int i)
		{
			InitDataContext();
		}

		public NorthwindDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region Alias members

		[Obsolete("Use Categories instead.")  ] public ITable<Category>    CATEG         { get { return Categories; } }
		[Obsolete("Use OrderDetails instead.")] public ITable<OrderDetail> Order_Details { get { return OrderDetails; } }

		#endregion

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(NorthwindDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(NorthwindDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Database="Northwind", Name="Alphabetical list of products", IsView=true)]
	public partial class AlphabeticalListOfProduct
	{
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int      ProductID       { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string   ProductName     { get; set; } // nvarchar(40)
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable] public int?     SupplierID      { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable] public int?     CategoryID      { get; set; } // int
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20),    Nullable] public string   QuantityPerUnit { get; set; } // nvarchar(20)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? UnitPrice       { get; set; } // money
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable] public short?   UnitsInStock    { get; set; } // smallint
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable] public short?   UnitsOnOrder    { get; set; } // smallint
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable] public short?   ReorderLevel    { get; set; } // smallint
		[Column(DbType="bit",          DataType=DataType.Boolean),             NotNull    ] public bool     Discontinued    { get; set; } // bit
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull    ] public string   CategoryName    { get; set; } // nvarchar(15)
	}

	[Table(Database="Northwind", Name="Categories")]
	public partial class Category
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  Identity] public int    CategoryID   { get; set; } // int
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull              ] public string CategoryName { get; set; } // nvarchar(15)
		[Column(DbType="ntext",        DataType=DataType.NText),                  Nullable          ] public string Description  { get; set; } // ntext
		[Column(DbType="image",        DataType=DataType.Image),                  Nullable          ] public byte[] Picture      { get; set; } // image

		#region Associations

		/// <summary>
		/// FK_Products_Categories_BackReference
		/// </summary>
		[Association(ThisKey="CategoryID", OtherKey="CategoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Product> Products { get; set; }

		#endregion
	}

	[Obsolete("Use Category instead.")]
	public partial class CATEG : Category
	{
	}

	[Table(Database="Northwind", Name="Category Sales for 1997", IsView=true)]
	public partial class CategorySalesFor1997
	{
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull    ] public string   CategoryName  { get; set; } // nvarchar(15)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? CategorySales { get; set; } // money
	}

	[Table(Database="Northwind", Name="Current Product List", IsView=true)]
	public partial class CurrentProductList
	{
		[Column(DbType="int",          DataType=DataType.Int32),               Identity] public int    ProductID   { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull ] public string ProductName { get; set; } // nvarchar(40)
	}

	[Table(Database="Northwind", Name="Customers")]
	public partial class Customer
	{
		[Column(DbType="nchar(5)",     DataType=DataType.NChar,    Length=5),  PrimaryKey,  NotNull] public string CustomerID   { get; set; } // nchar(5)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40),              NotNull] public string CompanyName  { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(30)", DataType=DataType.NVarChar, Length=30),    Nullable         ] public string ContactName  { get; set; } // nvarchar(30)
		[Column(DbType="nvarchar(30)", DataType=DataType.NVarChar, Length=30),    Nullable         ] public string ContactTitle { get; set; } // nvarchar(30)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable         ] public string Address      { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable         ] public string City         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable         ] public string Region       { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable         ] public string PostalCode   { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable         ] public string Country      { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(24)", DataType=DataType.NVarChar, Length=24),    Nullable         ] public string Phone        { get; set; } // nvarchar(24)
		[Column(DbType="nvarchar(24)", DataType=DataType.NVarChar, Length=24),    Nullable         ] public string Fax          { get; set; } // nvarchar(24)

		#region Associations

		/// <summary>
		/// FK_CustomerCustomerDemo_Customers_BackReference
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; }

		/// <summary>
		/// FK_Orders_Customers_BackReference
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Order> Orders { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Customer and Suppliers by City", IsView=true)]
	public partial class CustomerAndSuppliersByCity
	{
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string City         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string CompanyName  { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(30)", DataType=DataType.NVarChar, Length=30),    Nullable] public string ContactName  { get; set; } // nvarchar(30)
		[Column(DbType="varchar(9)",   DataType=DataType.VarChar,  Length=9),  NotNull    ] public string Relationship { get; set; } // varchar(9)
	}

	[Table(Database="Northwind", Name="CustomerCustomerDemo")]
	public partial class CustomerCustomerDemo
	{
		[Column(DbType="nchar(5)",  DataType=DataType.NChar, Length=5),  PrimaryKey(1), NotNull] public string CustomerID     { get; set; } // nchar(5)
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), PrimaryKey(2), NotNull] public string CustomerTypeID { get; set; } // nchar(10)

		#region Associations

		/// <summary>
		/// FK_CustomerCustomerDemo_Customers
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CustomerCustomerDemo_Customers", BackReferenceName="CustomerCustomerDemoes")]
		public Customer Customer { get; set; }

		/// <summary>
		/// FK_CustomerCustomerDemo
		/// </summary>
		[Association(ThisKey="CustomerTypeID", OtherKey="CustomerTypeID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_CustomerCustomerDemo", BackReferenceName="CustomerCustomerDemoes")]
		public CustomerDemographic CustomerType { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="CustomerDemographics")]
	public partial class CustomerDemographic
	{
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), PrimaryKey,  NotNull] public string CustomerTypeID { get; set; } // nchar(10)
		[Column(DbType="ntext",     DataType=DataType.NText),               Nullable         ] public string CustomerDesc   { get; set; } // ntext

		#region Associations

		/// <summary>
		/// FK_CustomerCustomerDemo_BackReference
		/// </summary>
		[Association(ThisKey="CustomerTypeID", OtherKey="CustomerTypeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<CustomerCustomerDemo> CustomerCustomerDemoes { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Employees")]
	public partial class Employee
	{
		[Column(DbType="int",           DataType=DataType.Int32),                PrimaryKey,  Identity] public int       EmployeeID      { get; set; } // int
		[Column(DbType="nvarchar(20)",  DataType=DataType.NVarChar, Length=20),  NotNull              ] public string    LastName        { get; set; } // nvarchar(20)
		[Column(DbType="nvarchar(10)",  DataType=DataType.NVarChar, Length=10),  NotNull              ] public string    FirstName       { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(30)",  DataType=DataType.NVarChar, Length=30),     Nullable          ] public string    Title           { get; set; } // nvarchar(30)
		[Column(DbType="nvarchar(25)",  DataType=DataType.NVarChar, Length=25),     Nullable          ] public string    TitleOfCourtesy { get; set; } // nvarchar(25)
		[Column(DbType="datetime",      DataType=DataType.DateTime),                Nullable          ] public DateTime? BirthDate       { get; set; } // datetime
		[Column(DbType="datetime",      DataType=DataType.DateTime),                Nullable          ] public DateTime? HireDate        { get; set; } // datetime
		[Column(DbType="nvarchar(60)",  DataType=DataType.NVarChar, Length=60),     Nullable          ] public string    Address         { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)",  DataType=DataType.NVarChar, Length=15),     Nullable          ] public string    City            { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)",  DataType=DataType.NVarChar, Length=15),     Nullable          ] public string    Region          { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)",  DataType=DataType.NVarChar, Length=10),     Nullable          ] public string    PostalCode      { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)",  DataType=DataType.NVarChar, Length=15),     Nullable          ] public string    Country         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(24)",  DataType=DataType.NVarChar, Length=24),     Nullable          ] public string    HomePhone       { get; set; } // nvarchar(24)
		[Column(DbType="nvarchar(4)",   DataType=DataType.NVarChar, Length=4),      Nullable          ] public string    Extension       { get; set; } // nvarchar(4)
		[Column(DbType="image",         DataType=DataType.Image),                   Nullable          ] public byte[]    Photo           { get; set; } // image
		[Column(DbType="ntext",         DataType=DataType.NText),                   Nullable          ] public string    Notes           { get; set; } // ntext
		[Column(DbType="int",           DataType=DataType.Int32),                   Nullable          ] public int?      ReportsTo       { get; set; } // int
		[Column(DbType="nvarchar(255)", DataType=DataType.NVarChar, Length=255),    Nullable          ] public string    PhotoPath       { get; set; } // nvarchar(255)

		#region Associations

		/// <summary>
		/// FK_EmployeeTerritories_Employees_BackReference
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="EmployeeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<EmployeeTerritory> EmployeeTerritories { get; set; }

		/// <summary>
		/// FK_Employees_Employees
		/// </summary>
		[Association(ThisKey="ReportsTo", OtherKey="EmployeeID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Employees_Employees", BackReferenceName="FK_Employees_Employees_BackReferences")]
		public Employee FK_Employees_Employee { get; set; }

		/// <summary>
		/// FK_Employees_Employees_BackReference
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="ReportsTo", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Employee> FK_Employees_Employees_BackReferences { get; set; }

		/// <summary>
		/// FK_Orders_Employees_BackReference
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="EmployeeID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Order> Orders { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="EmployeeTerritories")]
	public partial class EmployeeTerritory
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey(1), NotNull] public int    EmployeeID  { get; set; } // int
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), PrimaryKey(2), NotNull] public string TerritoryID { get; set; } // nvarchar(20)

		#region Associations

		/// <summary>
		/// FK_EmployeeTerritories_Employees
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="EmployeeID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeTerritories_Employees", BackReferenceName="EmployeeTerritories")]
		public Employee Employee { get; set; }

		/// <summary>
		/// FK_EmployeeTerritories_Territories
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_EmployeeTerritories_Territories", BackReferenceName="EmployeeTerritories")]
		public Territory Territory { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Invoices", IsView=true)]
	public partial class Invoice
	{
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40),    Nullable] public string    ShipName       { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable] public string    ShipAddress    { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipCity       { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipRegion     { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable] public string    ShipPostalCode { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipCountry    { get; set; } // nvarchar(15)
		[Column(DbType="nchar(5)",     DataType=DataType.NChar,    Length=5),     Nullable] public string    CustomerID     { get; set; } // nchar(5)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string    CustomerName   { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable] public string    Address        { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    City           { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    Region         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable] public string    PostalCode     { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    Country        { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(31)", DataType=DataType.NVarChar, Length=31), NotNull    ] public string    Salesperson    { get; set; } // nvarchar(31)
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int       OrderID        { get; set; } // int
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? OrderDate      { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? RequiredDate   { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? ShippedDate    { get; set; } // datetime
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string    ShipperName    { get; set; } // nvarchar(40)
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int       ProductID      { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string    ProductName    { get; set; } // nvarchar(40)
		[Column(DbType="money",        DataType=DataType.Money),               NotNull    ] public decimal   UnitPrice      { get; set; } // money
		[Column(DbType="smallint",     DataType=DataType.Int16),               NotNull    ] public short     Quantity       { get; set; } // smallint
		[Column(DbType="real",         DataType=DataType.Single),              NotNull    ] public float     Discount       { get; set; } // real
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal?  ExtendedPrice  { get; set; } // money
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal?  Freight        { get; set; } // money
	}

	[Table(Database="Northwind", Name="Orders")]
	public partial class Order
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey, Identity] public int       OrderID        { get; set; } // int
		[Column(DbType="nchar(5)",     DataType=DataType.NChar,    Length=5),  Nullable            ] public string    CustomerID     { get; set; } // nchar(5)
		[Column(DbType="int",          DataType=DataType.Int32),               Nullable            ] public int?      EmployeeID     { get; set; } // int
		[Column(DbType="datetime",     DataType=DataType.DateTime),            Nullable            ] public DateTime? OrderDate      { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),            Nullable            ] public DateTime? RequiredDate   { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),            Nullable            ] public DateTime? ShippedDate    { get; set; } // datetime
		[Column(DbType="int",          DataType=DataType.Int32),               Nullable            ] public int?      ShipVia        { get; set; } // int
		[Column(DbType="money",        DataType=DataType.Money),               Nullable            ] public decimal?  Freight        { get; set; } // money
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), Nullable            ] public string    ShipName       { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60), Nullable            ] public string    ShipAddress    { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), Nullable            ] public string    ShipCity       { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), Nullable            ] public string    ShipRegion     { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), Nullable            ] public string    ShipPostalCode { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), Nullable            ] public string    ShipCountry    { get; set; } // nvarchar(15)

		#region Associations

		/// <summary>
		/// FK_Orders_Customers
		/// </summary>
		[Association(ThisKey="CustomerID", OtherKey="CustomerID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_Customers", BackReferenceName="Orders")]
		public Customer Customer { get; set; }

		/// <summary>
		/// FK_Orders_Employees
		/// </summary>
		[Association(ThisKey="EmployeeID", OtherKey="EmployeeID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_Employees", BackReferenceName="Orders")]
		public Employee Employee { get; set; }

		/// <summary>
		/// FK_Order_Details_Orders_BackReference
		/// </summary>
		[Association(ThisKey="OrderID", OtherKey="ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<OrderDetail> OrderDetails { get; set; }

		/// <summary>
		/// FK_Orders_Shippers
		/// </summary>
		[Association(ThisKey="ShipVia", OtherKey="ShipperID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Orders_Shippers", BackReferenceName="Orders")]
		public Shipper Shipper { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Order Details")]
	public partial class OrderDetail
	{
		[Column("OrderID", DbType="int",      DataType=DataType.Int32),  PrimaryKey(1), NotNull] public int     ID        { get; set; } // int
		[Column(           DbType="int",      DataType=DataType.Int32),  PrimaryKey(2), NotNull] public int     ProductID { get; set; } // int
		[Column(           DbType="money",    DataType=DataType.Money),                 NotNull] public decimal UnitPrice { get; set; } // money
		[Column(           DbType="smallint", DataType=DataType.Int16),                 NotNull] public short   Quantity  { get; set; } // smallint
		[Column(           DbType="real",     DataType=DataType.Single),                NotNull] public float   Discount  { get; set; } // real

		#region Associations

		/// <summary>
		/// FK_Order_Details_Orders
		/// </summary>
		[Association(ThisKey="ID", OtherKey="OrderID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Order_Details_Orders", BackReferenceName="OrderDetails")]
		public Order Order { get; set; }

		/// <summary>
		/// FK_Order_Details_Products
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Order_Details_Products", BackReferenceName="OrderDetails")]
		public Product Product { get; set; }

		#endregion
	}

	[Obsolete("Use OrderDetail instead.")]
	public partial class ORD_DET : OrderDetail
	{
	}

	[Table(Database="Northwind", Name="Order Details Extended", IsView=true)]
	public partial class OrderDetailsExtended
	{
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int      OrderID       { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int      ProductID     { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string   ProductName   { get; set; } // nvarchar(40)
		[Column(DbType="money",        DataType=DataType.Money),               NotNull    ] public decimal  UnitPrice     { get; set; } // money
		[Column(DbType="smallint",     DataType=DataType.Int16),               NotNull    ] public short    Quantity      { get; set; } // smallint
		[Column(DbType="real",         DataType=DataType.Single),              NotNull    ] public float    Discount      { get; set; } // real
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? ExtendedPrice { get; set; } // money
	}

	[Table(Database="Northwind", Name="Orders Qry", IsView=true)]
	public partial class OrdersQry
	{
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int       OrderID        { get; set; } // int
		[Column(DbType="nchar(5)",     DataType=DataType.NChar,    Length=5),     Nullable] public string    CustomerID     { get; set; } // nchar(5)
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable] public int?      EmployeeID     { get; set; } // int
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? OrderDate      { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? RequiredDate   { get; set; } // datetime
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? ShippedDate    { get; set; } // datetime
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable] public int?      ShipVia        { get; set; } // int
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal?  Freight        { get; set; } // money
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40),    Nullable] public string    ShipName       { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable] public string    ShipAddress    { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipCity       { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipRegion     { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable] public string    ShipPostalCode { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    ShipCountry    { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string    CompanyName    { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable] public string    Address        { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    City           { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    Region         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable] public string    PostalCode     { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable] public string    Country        { get; set; } // nvarchar(15)
	}

	[Table(Database="Northwind", Name="Order Subtotals", IsView=true)]
	public partial class OrderSubtotal
	{
		[Column(DbType="int",   DataType=DataType.Int32), NotNull    ] public int      OrderID  { get; set; } // int
		[Column(DbType="money", DataType=DataType.Money),    Nullable] public decimal? Subtotal { get; set; } // money
	}

	[Table(Database="Northwind", Name="Products")]
	public partial class Product
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  Identity] public int      ProductID       { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull              ] public string   ProductName     { get; set; } // nvarchar(40)
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable          ] public int?     SupplierID      { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable          ] public int?     CategoryID      { get; set; } // int
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20),    Nullable          ] public string   QuantityPerUnit { get; set; } // nvarchar(20)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable          ] public decimal? UnitPrice       { get; set; } // money
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable          ] public short?   UnitsInStock    { get; set; } // smallint
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable          ] public short?   UnitsOnOrder    { get; set; } // smallint
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable          ] public short?   ReorderLevel    { get; set; } // smallint
		[Column(DbType="bit",          DataType=DataType.Boolean),             NotNull              ] public bool     Discontinued    { get; set; } // bit

		#region Associations

		/// <summary>
		/// FK_Products_Categories
		/// </summary>
		[Association(ThisKey="CategoryID", OtherKey="CategoryID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Products_Categories", BackReferenceName="Products")]
		public Category Category { get; set; }

		/// <summary>
		/// FK_Order_Details_Products_BackReference
		/// </summary>
		[Association(ThisKey="ProductID", OtherKey="ProductID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<OrderDetail> OrderDetails { get; set; }

		/// <summary>
		/// FK_Products_Suppliers
		/// </summary>
		[Association(ThisKey="SupplierID", OtherKey="SupplierID", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Products_Suppliers", BackReferenceName="Products")]
		public Supplier Supplier { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Products Above Average Price", IsView=true)]
	public partial class ProductsAboveAveragePrice
	{
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string   ProductName { get; set; } // nvarchar(40)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? UnitPrice   { get; set; } // money
	}

	[Table(Database="Northwind", Name="Product Sales for 1997", IsView=true)]
	public partial class ProductSalesFor1997
	{
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull    ] public string   CategoryName { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string   ProductName  { get; set; } // nvarchar(40)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? ProductSales { get; set; } // money
	}

	[Table(Database="Northwind", Name="Products by Category", IsView=true)]
	public partial class ProductsByCategory
	{
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull    ] public string CategoryName    { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string ProductName     { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20),    Nullable] public string QuantityPerUnit { get; set; } // nvarchar(20)
		[Column(DbType="smallint",     DataType=DataType.Int16),                  Nullable] public short? UnitsInStock    { get; set; } // smallint
		[Column(DbType="bit",          DataType=DataType.Boolean),             NotNull    ] public bool   Discontinued    { get; set; } // bit
	}

	[Table(Database="Northwind", Name="Quarterly Orders", IsView=true)]
	public partial class QuarterlyOrder
	{
		[Column(DbType="nchar(5)",     DataType=DataType.NChar,    Length=5),  Nullable] public string CustomerID  { get; set; } // nchar(5)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), Nullable] public string CompanyName { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), Nullable] public string City        { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), Nullable] public string Country     { get; set; } // nvarchar(15)
	}

	[Table(Database="Northwind", Name="Region")]
	public partial class Region
	{
		[Column(DbType="int",       DataType=DataType.Int32),            PrimaryKey, NotNull] public int    RegionID          { get; set; } // int
		[Column(DbType="nchar(50)", DataType=DataType.NChar, Length=50),             NotNull] public string RegionDescription { get; set; } // nchar(50)

		#region Associations

		/// <summary>
		/// FK_Territories_Region_BackReference
		/// </summary>
		[Association(ThisKey="RegionID", OtherKey="RegionID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Territory> Territories { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Sales by Category", IsView=true)]
	public partial class SalesByCategory
	{
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int      CategoryID   { get; set; } // int
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15), NotNull    ] public string   CategoryName { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string   ProductName  { get; set; } // nvarchar(40)
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal? ProductSales { get; set; } // money
	}

	[Table(Database="Northwind", Name="Sales Totals by Amount", IsView=true)]
	public partial class SalesTotalsByAmount
	{
		[Column(DbType="money",        DataType=DataType.Money),                  Nullable] public decimal?  SaleAmount  { get; set; } // money
		[Column(DbType="int",          DataType=DataType.Int32),               NotNull    ] public int       OrderID     { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull    ] public string    CompanyName { get; set; } // nvarchar(40)
		[Column(DbType="datetime",     DataType=DataType.DateTime),               Nullable] public DateTime? ShippedDate { get; set; } // datetime
	}

	[Table(Database="Northwind", Name="Shippers")]
	public partial class Shipper
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  Identity] public int    ShipperID   { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull              ] public string CompanyName { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(24)", DataType=DataType.NVarChar, Length=24),    Nullable          ] public string Phone       { get; set; } // nvarchar(24)

		#region Associations

		/// <summary>
		/// FK_Orders_Shippers_BackReference
		/// </summary>
		[Association(ThisKey="ShipperID", OtherKey="ShipVia", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Order> Orders { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Summary of Sales by Quarter", IsView=true)]
	public partial class SummaryOfSalesByQuarter
	{
		[Column(DbType="datetime", DataType=DataType.DateTime),    Nullable] public DateTime? ShippedDate { get; set; } // datetime
		[Column(DbType="int",      DataType=DataType.Int32),    NotNull    ] public int       OrderID     { get; set; } // int
		[Column(DbType="money",    DataType=DataType.Money),       Nullable] public decimal?  Subtotal    { get; set; } // money
	}

	[Table(Database="Northwind", Name="Summary of Sales by Year", IsView=true)]
	public partial class SummaryOfSalesByYear
	{
		[Column(DbType="datetime", DataType=DataType.DateTime),    Nullable] public DateTime? ShippedDate { get; set; } // datetime
		[Column(DbType="int",      DataType=DataType.Int32),    NotNull    ] public int       OrderID     { get; set; } // int
		[Column(DbType="money",    DataType=DataType.Money),       Nullable] public decimal?  Subtotal    { get; set; } // money
	}

	[Table(Database="Northwind", Name="Suppliers")]
	public partial class Supplier
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  Identity] public int    SupplierID   { get; set; } // int
		[Column(DbType="nvarchar(40)", DataType=DataType.NVarChar, Length=40), NotNull              ] public string CompanyName  { get; set; } // nvarchar(40)
		[Column(DbType="nvarchar(30)", DataType=DataType.NVarChar, Length=30),    Nullable          ] public string ContactName  { get; set; } // nvarchar(30)
		[Column(DbType="nvarchar(30)", DataType=DataType.NVarChar, Length=30),    Nullable          ] public string ContactTitle { get; set; } // nvarchar(30)
		[Column(DbType="nvarchar(60)", DataType=DataType.NVarChar, Length=60),    Nullable          ] public string Address      { get; set; } // nvarchar(60)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable          ] public string City         { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable          ] public string Region       { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10),    Nullable          ] public string PostalCode   { get; set; } // nvarchar(10)
		[Column(DbType="nvarchar(15)", DataType=DataType.NVarChar, Length=15),    Nullable          ] public string Country      { get; set; } // nvarchar(15)
		[Column(DbType="nvarchar(24)", DataType=DataType.NVarChar, Length=24),    Nullable          ] public string Phone        { get; set; } // nvarchar(24)
		[Column(DbType="nvarchar(24)", DataType=DataType.NVarChar, Length=24),    Nullable          ] public string Fax          { get; set; } // nvarchar(24)
		[Column(DbType="ntext",        DataType=DataType.NText),                  Nullable          ] public string HomePage     { get; set; } // ntext

		#region Associations

		/// <summary>
		/// FK_Products_Suppliers_BackReference
		/// </summary>
		[Association(ThisKey="SupplierID", OtherKey="SupplierID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<Product> Products { get; set; }

		#endregion
	}

	[Table(Database="Northwind", Name="Territories")]
	public partial class Territory
	{
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), PrimaryKey, NotNull] public string TerritoryID          { get; set; } // nvarchar(20)
		[Column(DbType="nchar(50)",    DataType=DataType.NChar,    Length=50),             NotNull] public string TerritoryDescription { get; set; } // nchar(50)
		[Column(DbType="int",          DataType=DataType.Int32),                           NotNull] public int    RegionID             { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_EmployeeTerritories_Territories_BackReference
		/// </summary>
		[Association(ThisKey="TerritoryID", OtherKey="TerritoryID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<EmployeeTerritory> EmployeeTerritories { get; set; }

		/// <summary>
		/// FK_Territories_Region
		/// </summary>
		[Association(ThisKey="RegionID", OtherKey="RegionID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_Territories_Region", BackReferenceName="Territories")]
		public Region Region { get; set; }

		#endregion
	}

	public static partial class NorthwindDBStoredProcedures
	{
		#region CustOrderHist

		public static IEnumerable<CustOrderHistResult> CustOrderHist(this DataConnection dataConnection, string @CustomerID)
		{
			return dataConnection.QueryProc<CustOrderHistResult>("[Northwind]..[CustOrderHist]",
				new DataParameter("@CustomerID", @CustomerID, DataType.NChar));
		}

		public partial class CustOrderHistResult
		{
			public string ProductName { get; set; }
			public int?   Total       { get; set; }
		}

		#endregion

		#region CustOrdersDetail

		public static IEnumerable<CustOrdersDetailResult> CustOrdersDetail(this DataConnection dataConnection, int? @OrderID)
		{
			return dataConnection.QueryProc<CustOrdersDetailResult>("[Northwind]..[CustOrdersDetail]",
				new DataParameter("@OrderID", @OrderID, DataType.Int32));
		}

		public partial class CustOrdersDetailResult
		{
			public string   ProductName   { get; set; }
			public decimal  UnitPrice     { get; set; }
			public short    Quantity      { get; set; }
			public int?     Discount      { get; set; }
			public decimal? ExtendedPrice { get; set; }
		}

		#endregion

		#region CustOrdersOrders

		public static IEnumerable<CustOrdersOrdersResult> CustOrdersOrders(this DataConnection dataConnection, string @CustomerID)
		{
			return dataConnection.QueryProc<CustOrdersOrdersResult>("[Northwind]..[CustOrdersOrders]",
				new DataParameter("@CustomerID", @CustomerID, DataType.NChar));
		}

		public partial class CustOrdersOrdersResult
		{
			public int       OrderID      { get; set; }
			public DateTime? OrderDate    { get; set; }
			public DateTime? RequiredDate { get; set; }
			public DateTime? ShippedDate  { get; set; }
		}

		#endregion

		#region EmployeeSalesByCountry

		public static IEnumerable<EmployeeSalesByCountryResult> EmployeeSalesByCountry(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
		{
			return dataConnection.QueryProc<EmployeeSalesByCountryResult>("[Northwind]..[Employee Sales by Country]",
				new DataParameter("@Beginning_Date", @Beginning_Date, DataType.DateTime),
				new DataParameter("@Ending_Date",    @Ending_Date,    DataType.DateTime));
		}

		public partial class EmployeeSalesByCountryResult
		{
			public string    Country     { get; set; }
			public string    LastName    { get; set; }
			public string    FirstName   { get; set; }
			public DateTime? ShippedDate { get; set; }
			public int       OrderID     { get; set; }
			public decimal?  SaleAmount  { get; set; }
		}

		#endregion

		#region SalesByYear

		public static IEnumerable<SalesByYearResult> SalesByYear(this DataConnection dataConnection, DateTime? @Beginning_Date, DateTime? @Ending_Date)
		{
			return dataConnection.QueryProc<SalesByYearResult>("[Northwind]..[Sales by Year]",
				new DataParameter("@Beginning_Date", @Beginning_Date, DataType.DateTime),
				new DataParameter("@Ending_Date",    @Ending_Date,    DataType.DateTime));
		}

		public partial class SalesByYearResult
		{
			public DateTime? ShippedDate { get; set; }
			public int       OrderID     { get; set; }
			public decimal?  Subtotal    { get; set; }
			public string    Year        { get; set; }
		}

		#endregion

		#region SalesByCategory

		public static IEnumerable<SalesByCategoryResult> SalesByCategory(this DataConnection dataConnection, string @CategoryName, string @OrdYear)
		{
			return dataConnection.QueryProc<SalesByCategoryResult>("[Northwind]..[SalesByCategory]",
				new DataParameter("@CategoryName", @CategoryName, DataType.NVarChar),
				new DataParameter("@OrdYear",      @OrdYear,      DataType.NVarChar));
		}

		public partial class SalesByCategoryResult
		{
			public string   ProductName   { get; set; }
			public decimal? TotalPurchase { get; set; }
		}

		#endregion

		#region TenMostExpensiveProducts

		public static IEnumerable<TenMostExpensiveProductsResult> TenMostExpensiveProducts(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<TenMostExpensiveProductsResult>("[Northwind]..[Ten Most Expensive Products]");
		}

		public partial class TenMostExpensiveProductsResult
		{
			public string   TenMostExpensiveProducts { get; set; }
			public decimal? UnitPrice                { get; set; }
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Category Find(this ITable<Category> table, int CategoryID)
		{
			return table.FirstOrDefault(t =>
				t.CategoryID == CategoryID);
		}

		public static Customer Find(this ITable<Customer> table, string CustomerID)
		{
			return table.FirstOrDefault(t =>
				t.CustomerID == CustomerID);
		}

		public static CustomerCustomerDemo Find(this ITable<CustomerCustomerDemo> table, string CustomerID, string CustomerTypeID)
		{
			return table.FirstOrDefault(t =>
				t.CustomerID     == CustomerID &&
				t.CustomerTypeID == CustomerTypeID);
		}

		public static CustomerDemographic Find(this ITable<CustomerDemographic> table, string CustomerTypeID)
		{
			return table.FirstOrDefault(t =>
				t.CustomerTypeID == CustomerTypeID);
		}

		public static Employee Find(this ITable<Employee> table, int EmployeeID)
		{
			return table.FirstOrDefault(t =>
				t.EmployeeID == EmployeeID);
		}

		public static EmployeeTerritory Find(this ITable<EmployeeTerritory> table, int EmployeeID, string TerritoryID)
		{
			return table.FirstOrDefault(t =>
				t.EmployeeID  == EmployeeID &&
				t.TerritoryID == TerritoryID);
		}

		public static Order Find(this ITable<Order> table, int OrderID)
		{
			return table.FirstOrDefault(t =>
				t.OrderID == OrderID);
		}

		public static OrderDetail Find(this ITable<OrderDetail> table, int ID, int ProductID)
		{
			return table.FirstOrDefault(t =>
				t.ID        == ID &&
				t.ProductID == ProductID);
		}

		public static Product Find(this ITable<Product> table, int ProductID)
		{
			return table.FirstOrDefault(t =>
				t.ProductID == ProductID);
		}

		public static Region Find(this ITable<Region> table, int RegionID)
		{
			return table.FirstOrDefault(t =>
				t.RegionID == RegionID);
		}

		public static Shipper Find(this ITable<Shipper> table, int ShipperID)
		{
			return table.FirstOrDefault(t =>
				t.ShipperID == ShipperID);
		}

		public static Supplier Find(this ITable<Supplier> table, int SupplierID)
		{
			return table.FirstOrDefault(t =>
				t.SupplierID == SupplierID);
		}

		public static Territory Find(this ITable<Territory> table, string TerritoryID)
		{
			return table.FirstOrDefault(t =>
				t.TerritoryID == TerritoryID);
		}
	}

	/// <summary>
	/// Database       : TestData
	/// Data Source    : DBHost\SQLSERVER2008
	/// Server Version : 10.50.4042
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<AllType>           AllTypes            { get { return this.GetTable<AllType>(); } }
		public ITable<AllTypes2>         AllTypes2           { get { return this.GetTable<AllTypes2>(); } }
		public ITable<BinaryData>        BinaryData          { get { return this.GetTable<BinaryData>(); } }
		public ITable<Child>             Children            { get { return this.GetTable<Child>(); } }
		public ITable<DataTypeTest>      DataTypeTests       { get { return this.GetTable<DataTypeTest>(); } }
		public ITable<DecimalOverflow>   DecimalOverflows    { get { return this.GetTable<DecimalOverflow>(); } }
		public ITable<Doctor>            Doctors             { get { return this.GetTable<Doctor>(); } }
		public ITable<GrandChild>        GrandChildren       { get { return this.GetTable<GrandChild>(); } }
		public ITable<GuidID>            GuidIDs             { get { return this.GetTable<GuidID>(); } }
		public ITable<GuidID2>           GuidID2             { get { return this.GetTable<GuidID2>(); } }
		public ITable<IndexTable>        IndexTables         { get { return this.GetTable<IndexTable>(); } }
		public ITable<IndexTable2>       IndexTable2         { get { return this.GetTable<IndexTable2>(); } }
		public ITable<InheritanceChild>  InheritanceChildren { get { return this.GetTable<InheritanceChild>(); } }
		public ITable<InheritanceParent> InheritanceParents  { get { return this.GetTable<InheritanceParent>(); } }
		public ITable<LinqDataType>      LinqDataTypes       { get { return this.GetTable<LinqDataType>(); } }
		public ITable<NameTest>          NameTests           { get { return this.GetTable<NameTest>(); } }
		/// <summary>
		/// This is Parent table
		/// </summary>
		public ITable<Parent>            Parents             { get { return this.GetTable<Parent>(); } }
		public ITable<ParentChildView>   ParentChildViews    { get { return this.GetTable<ParentChildView>(); } }
		public ITable<ParentView>        ParentViews         { get { return this.GetTable<ParentView>(); } }
		public ITable<Patient>           Patients            { get { return this.GetTable<Patient>(); } }
		public ITable<Person>            People              { get { return this.GetTable<Person>(); } }
		public ITable<SqlType>           SqlTypes            { get { return this.GetTable<SqlType>(); } }
		public ITable<TestIdentity>      TestIdentities      { get { return this.GetTable<TestIdentity>(); } }
		public ITable<TestMerge1>        TestMerge1          { get { return this.GetTable<TestMerge1>(); } }
		public ITable<TestMerge2>        TestMerge2          { get { return this.GetTable<TestMerge2>(); } }
		public ITable<TestSchema1>       TestSchema1         { get { return this.GetTable<TestSchema1>(); } }
		public ITable<TestSchema2>       TestSchema2         { get { return this.GetTable<TestSchema2>(); } }
		public ITable<TestSchemaX>       TestSchemaX         { get { return this.GetTable<TestSchemaX>(); } }
		public ITable<TestSchemaY>       TestSchemaY         { get { return this.GetTable<TestSchemaY>(); } }
		public ITable<TestTable2>        TestTable2          { get { return this.GetTable<TestTable2>(); } }
		public ITable<TestTable3>        TestTable3          { get { return this.GetTable<TestTable3>(); } }

		#region Schemas

		public Test1Schema.DataContext      Test1      { get; set; }
		public Test2Schema.DataContext      Test2      { get; set; }
		public Test3_dasdSchema.DataContext Test3_dasd { get; set; }
		public MySchemaSchema.DataContext   MySchema   { get; set; }

		public void InitSchemas()
		{
			Test1      = new Test1Schema.     DataContext(this);
			Test2      = new Test2Schema.     DataContext(this);
			Test3_dasd = new Test3_dasdSchema.DataContext(this);
			MySchema   = new MySchemaSchema.  DataContext(this);
		}

		#endregion

		public TestDataDB(int i)
		{
			InitSchemas();
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitSchemas();
			InitDataContext();
		}

		partial void InitDataContext();

		#region Table Functions

		#region GetParentByID

		[Sql.TableFunction(Database="TestData", Name="GetParentByID")]
		public ITable<Parent> GetParentByID(int? @id)
		{
			return this.GetTable<Parent>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@id);
		}

		#endregion

		#endregion

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(TestDataDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(TestDataDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Database="TestData", Name="AllTypes")]
	public partial class AllType
	{
		[Column(                            DbType="int",               DataType=DataType.Int32),                                                PrimaryKey, Identity] public int             ID                       { get; set; } // int
		[Column("bigintDataType",           DbType="bigint",            DataType=DataType.Int64),                                                Nullable            ] public long?           BigintDataType           { get; set; } // bigint
		[Column("numericDataType",          DbType="numeric(18, 1)",    DataType=DataType.Decimal,        Precision=18, Scale=1),                Nullable            ] public decimal?        NumericDataType          { get; set; } // numeric(18, 1)
		[Column("bitDataType",              DbType="bit",               DataType=DataType.Boolean),                                              Nullable            ] public bool?           BitDataType              { get; set; } // bit
		[Column("smallintDataType",         DbType="smallint",          DataType=DataType.Int16),                                                Nullable            ] public short?          SmallintDataType         { get; set; } // smallint
		[Column("decimalDataType",          DbType="decimal(18, 1)",    DataType=DataType.Decimal,        Precision=18, Scale=1),                Nullable            ] public decimal?        DecimalDataType          { get; set; } // decimal(18, 1)
		[Column("smallmoneyDataType",       DbType="smallmoney",        DataType=DataType.SmallMoney),                                           Nullable            ] public decimal?        SmallmoneyDataType       { get; set; } // smallmoney
		[Column("intDataType",              DbType="int",               DataType=DataType.Int32),                                                Nullable            ] public int?            IntDataType              { get; set; } // int
		[Column("tinyintDataType",          DbType="tinyint",           DataType=DataType.Byte),                                                 Nullable            ] public byte?           TinyintDataType          { get; set; } // tinyint
		[Column("moneyDataType",            DbType="money",             DataType=DataType.Money),                                                Nullable            ] public decimal?        MoneyDataType            { get; set; } // money
		[Column("floatDataType",            DbType="float",             DataType=DataType.Double),                                               Nullable            ] public double?         FloatDataType            { get; set; } // float
		[Column("realDataType",             DbType="real",              DataType=DataType.Single),                                               Nullable            ] public float?          RealDataType             { get; set; } // real
		[Column("datetimeDataType",         DbType="datetime",          DataType=DataType.DateTime),                                             Nullable            ] public DateTime?       DatetimeDataType         { get; set; } // datetime
		[Column("smalldatetimeDataType",    DbType="smalldatetime",     DataType=DataType.SmallDateTime),                                        Nullable            ] public DateTime?       SmalldatetimeDataType    { get; set; } // smalldatetime
		[Column("charDataType",             DbType="char(1)",           DataType=DataType.Char,           Length=1),                             Nullable            ] public char?           CharDataType             { get; set; } // char(1)
		[Column("char20DataType",           DbType="char(20)",          DataType=DataType.Char,           Length=20),                            Nullable            ] public string          Char20DataType           { get; set; } // char(20)
		[Column("varcharDataType",          DbType="varchar(20)",       DataType=DataType.VarChar,        Length=20),                            Nullable            ] public string          VarcharDataType          { get; set; } // varchar(20)
		[Column("textDataType",             DbType="text",              DataType=DataType.Text),                                                 Nullable            ] public string          TextDataType             { get; set; } // text
		[Column("ncharDataType",            DbType="nchar(20)",         DataType=DataType.NChar,          Length=20),                            Nullable            ] public string          NcharDataType            { get; set; } // nchar(20)
		[Column("nvarcharDataType",         DbType="nvarchar(20)",      DataType=DataType.NVarChar,       Length=20),                            Nullable            ] public string          NvarcharDataType         { get; set; } // nvarchar(20)
		[Column("ntextDataType",            DbType="ntext",             DataType=DataType.NText),                                                Nullable            ] public string          NtextDataType            { get; set; } // ntext
		[Column("binaryDataType",           DbType="binary(1)",         DataType=DataType.Binary,         Length=1),                             Nullable            ] public byte[]          BinaryDataType           { get; set; } // binary(1)
		[Column("varbinaryDataType",        DbType="varbinary(1)",      DataType=DataType.VarBinary,      Length=1),                             Nullable            ] public byte[]          VarbinaryDataType        { get; set; } // varbinary(1)
		[Column("imageDataType",            DbType="image",             DataType=DataType.Image),                                                Nullable            ] public byte[]          ImageDataType            { get; set; } // image
		[Column("timestampDataType",        DbType="timestamp",         DataType=DataType.Timestamp,      SkipOnInsert=true, SkipOnUpdate=true), Nullable            ] public byte[]          TimestampDataType        { get; set; } // timestamp
		[Column("uniqueidentifierDataType", DbType="uniqueidentifier",  DataType=DataType.Guid),                                                 Nullable            ] public Guid?           UniqueidentifierDataType { get; set; } // uniqueidentifier
		[Column("sql_variantDataType",      DbType="sql_variant",       DataType=DataType.Variant),                                              Nullable            ] public object          SqlVariantdatatype       { get; set; } // sql_variant
		[Column("nvarchar_max_DataType",    DbType="nvarchar(max)",     DataType=DataType.NVarChar,       Length=int.MaxValue),                  Nullable            ] public string          NvarcharMaxDatatype      { get; set; } // nvarchar(max)
		[Column("varchar_max_DataType",     DbType="varchar(max)",      DataType=DataType.VarChar,        Length=int.MaxValue),                  Nullable            ] public string          VarcharMaxDatatype       { get; set; } // varchar(max)
		[Column("varbinary_max_DataType",   DbType="varbinary(max)",    DataType=DataType.VarBinary,      Length=int.MaxValue),                  Nullable            ] public byte[]          VarbinaryMaxDatatype     { get; set; } // varbinary(max)
		[Column("xmlDataType",              DbType="xml",               DataType=DataType.Xml),                                                  Nullable            ] public string          XmlDataType              { get; set; } // xml
		[Column("datetime2DataType",        DbType="datetime2(7)",      DataType=DataType.DateTime2,      Precision=7),                          Nullable            ] public DateTime?       Datetime2DataType        { get; set; } // datetime2(7)
		[Column("datetimeoffsetDataType",   DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7),                          Nullable            ] public DateTimeOffset? DatetimeoffsetDataType   { get; set; } // datetimeoffset(7)
		[Column("datetimeoffset0DataType",  DbType="datetimeoffset(0)", DataType=DataType.DateTimeOffset, Precision=0),                          Nullable            ] public DateTimeOffset? Datetimeoffset0DataType  { get; set; } // datetimeoffset(0)
		[Column("datetimeoffset1DataType",  DbType="datetimeoffset(1)", DataType=DataType.DateTimeOffset, Precision=1),                          Nullable            ] public DateTimeOffset? Datetimeoffset1DataType  { get; set; } // datetimeoffset(1)
		[Column("datetimeoffset2DataType",  DbType="datetimeoffset(2)", DataType=DataType.DateTimeOffset, Precision=2),                          Nullable            ] public DateTimeOffset? Datetimeoffset2DataType  { get; set; } // datetimeoffset(2)
		[Column("datetimeoffset3DataType",  DbType="datetimeoffset(3)", DataType=DataType.DateTimeOffset, Precision=3),                          Nullable            ] public DateTimeOffset? Datetimeoffset3DataType  { get; set; } // datetimeoffset(3)
		[Column("datetimeoffset4DataType",  DbType="datetimeoffset(4)", DataType=DataType.DateTimeOffset, Precision=4),                          Nullable            ] public DateTimeOffset? Datetimeoffset4DataType  { get; set; } // datetimeoffset(4)
		[Column("datetimeoffset5DataType",  DbType="datetimeoffset(5)", DataType=DataType.DateTimeOffset, Precision=5),                          Nullable            ] public DateTimeOffset? Datetimeoffset5DataType  { get; set; } // datetimeoffset(5)
		[Column("datetimeoffset6DataType",  DbType="datetimeoffset(6)", DataType=DataType.DateTimeOffset, Precision=6),                          Nullable            ] public DateTimeOffset? Datetimeoffset6DataType  { get; set; } // datetimeoffset(6)
		[Column("datetimeoffset7DataType",  DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7),                          Nullable            ] public DateTimeOffset? Datetimeoffset7DataType  { get; set; } // datetimeoffset(7)
		[Column("dateDataType",             DbType="date",              DataType=DataType.Date),                                                 Nullable            ] public DateTime?       DateDataType             { get; set; } // date
		[Column("timeDataType",             DbType="time(7)",           DataType=DataType.Time,           Precision=7),                          Nullable            ] public TimeSpan?       TimeDataType             { get; set; } // time(7)
	}

	[Table(Database="TestData", Name="AllTypes2")]
	public partial class AllTypes2
	{
		[Column(                          DbType="int",               DataType=DataType.Int32),                       PrimaryKey, Identity] public int             ID                     { get; set; } // int
		[Column("dateDataType",           DbType="date",              DataType=DataType.Date),                        Nullable            ] public DateTime?       DateDataType           { get; set; } // date
		[Column("datetimeoffsetDataType", DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7), Nullable            ] public DateTimeOffset? DatetimeoffsetDataType { get; set; } // datetimeoffset(7)
		[Column("datetime2DataType",      DbType="datetime2(7)",      DataType=DataType.DateTime2,      Precision=7), Nullable            ] public DateTime?       Datetime2DataType      { get; set; } // datetime2(7)
		[Column("timeDataType",           DbType="time(7)",           DataType=DataType.Time,           Precision=7), Nullable            ] public TimeSpan?       TimeDataType           { get; set; } // time(7)
		[Column("hierarchyidDataType",    DbType="hierarchyid",       DataType=DataType.Udt),                         Nullable            ] public SqlHierarchyId? HierarchyidDataType    { get; set; } // hierarchyid
		[Column("geographyDataType",      DbType="geography",         DataType=DataType.Udt),                         Nullable            ] public SqlGeography    GeographyDataType      { get; set; } // geography
		[Column("geometryDataType",       DbType="geometry",          DataType=DataType.Udt),                         Nullable            ] public SqlGeometry     GeometryDataType       { get; set; } // geometry
	}

	[Table(Database="TestData", Name="BinaryData")]
	public partial class BinaryData
	{
		[Column(DbType="int",             DataType=DataType.Int32),                                           PrimaryKey, Identity] public int    BinaryDataID { get; set; } // int
		[Column(DbType="timestamp",       DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), NotNull             ] public byte[] Stamp        { get; set; } // timestamp
		[Column(DbType="varbinary(1024)", DataType=DataType.VarBinary, Length=1024),                          NotNull             ] public byte[] Data         { get; set; } // varbinary(1024)
	}

	[Table(Database="TestData", Name="Child")]
	public partial class Child
	{
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? ParentID { get; set; } // int
		/// <summary>
		/// This ChildID column
		/// </summary>
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? ChildID  { get; set; } // int
		[Column("_ID", DbType="int", DataType=DataType.Int32), PrimaryKey, Identity] public int  Id       { get; set; } // int
	}

	[Table(Database="TestData", Name="DataTypeTest")]
	public partial class DataTypeTest
	{
		[Column(             DbType="int",              DataType=DataType.Int32),                            PrimaryKey, Identity] public int       DataTypeID { get; set; } // int
		[Column("Binary_",   DbType="binary(50)",       DataType=DataType.Binary,    Length=50),             Nullable            ] public byte[]    Binary     { get; set; } // binary(50)
		[Column("Boolean_",  DbType="bit",              DataType=DataType.Boolean),                          Nullable            ] public bool?     Boolean    { get; set; } // bit
		[Column("Byte_",     DbType="tinyint",          DataType=DataType.Byte),                             Nullable            ] public byte?     Byte       { get; set; } // tinyint
		[Column("Bytes_",    DbType="varbinary(50)",    DataType=DataType.VarBinary, Length=50),             Nullable            ] public byte[]    Bytes      { get; set; } // varbinary(50)
		[Column("Char_",     DbType="char(1)",          DataType=DataType.Char,      Length=1),              Nullable            ] public char?     Char       { get; set; } // char(1)
		[Column("DateTime_", DbType="datetime",         DataType=DataType.DateTime),                         Nullable            ] public DateTime? Datetime   { get; set; } // datetime
		[Column("Decimal_",  DbType="decimal(20, 2)",   DataType=DataType.Decimal,   Precision=20, Scale=2), Nullable            ] public decimal?  Decimal    { get; set; } // decimal(20, 2)
		[Column("Double_",   DbType="float",            DataType=DataType.Double),                           Nullable            ] public double?   Double     { get; set; } // float
		[Column("Guid_",     DbType="uniqueidentifier", DataType=DataType.Guid),                             Nullable            ] public Guid?     Guid       { get; set; } // uniqueidentifier
		[Column("Int16_",    DbType="smallint",         DataType=DataType.Int16),                            Nullable            ] public short?    Int16      { get; set; } // smallint
		[Column("Int32_",    DbType="int",              DataType=DataType.Int32),                            Nullable            ] public int?      Int32      { get; set; } // int
		[Column("Int64_",    DbType="bigint",           DataType=DataType.Int64),                            Nullable            ] public long?     Int64      { get; set; } // bigint
		[Column("Money_",    DbType="money",            DataType=DataType.Money),                            Nullable            ] public decimal?  Money      { get; set; } // money
		[Column("SByte_",    DbType="tinyint",          DataType=DataType.Byte),                             Nullable            ] public byte?     Sbyte      { get; set; } // tinyint
		[Column("Single_",   DbType="real",             DataType=DataType.Single),                           Nullable            ] public float?    Single     { get; set; } // real
		[Column("Stream_",   DbType="varbinary(50)",    DataType=DataType.VarBinary, Length=50),             Nullable            ] public byte[]    Stream     { get; set; } // varbinary(50)
		[Column("String_",   DbType="nvarchar(50)",     DataType=DataType.NVarChar,  Length=50),             Nullable            ] public string    String     { get; set; } // nvarchar(50)
		[Column("UInt16_",   DbType="smallint",         DataType=DataType.Int16),                            Nullable            ] public short?    Uint16     { get; set; } // smallint
		[Column("UInt32_",   DbType="int",              DataType=DataType.Int32),                            Nullable            ] public int?      Uint32     { get; set; } // int
		[Column("UInt64_",   DbType="bigint",           DataType=DataType.Int64),                            Nullable            ] public long?     Uint64     { get; set; } // bigint
		[Column("Xml_",      DbType="xml",              DataType=DataType.Xml),                              Nullable            ] public string    Xml        { get; set; } // xml
	}

	[Table(Database="TestData", Name="DecimalOverflow")]
	public partial class DecimalOverflow
	{
		[Column(DbType="decimal(38, 20)", DataType=DataType.Decimal, Precision=38, Scale=20), PrimaryKey,  NotNull] public decimal  Decimal1 { get; set; } // decimal(38, 20)
		[Column(DbType="decimal(31, 2)",  DataType=DataType.Decimal, Precision=31, Scale=2),     Nullable         ] public decimal? Decimal2 { get; set; } // decimal(31, 2)
		[Column(DbType="decimal(38, 36)", DataType=DataType.Decimal, Precision=38, Scale=36),    Nullable         ] public decimal? Decimal3 { get; set; } // decimal(38, 36)
		[Column(DbType="decimal(29, 0)",  DataType=DataType.Decimal, Precision=29, Scale=0),     Nullable         ] public decimal? Decimal4 { get; set; } // decimal(29, 0)
		[Column(DbType="decimal(38, 38)", DataType=DataType.Decimal, Precision=38, Scale=38),    Nullable         ] public decimal? Decimal5 { get; set; } // decimal(38, 38)
	}

	[Table(Database="TestData", Name="Doctor")]
	public partial class Doctor
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey, NotNull] public int    PersonID { get; set; } // int
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50),             NotNull] public string Taxonomy { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Doctor_Person", BackReferenceName="Doctor")]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? ParentID     { get; set; } // int
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? ChildID      { get; set; } // int
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? GrandChildID { get; set; } // int
		[Column("_ID", DbType="int", DataType=DataType.Int32), PrimaryKey, Identity] public int  Id           { get; set; } // int
	}

	[Table(Database="TestData", Name="GuidID")]
	public partial class GuidID
	{
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid),  PrimaryKey,  NotNull] public Guid ID     { get; set; } // uniqueidentifier
		[Column(DbType="int",              DataType=DataType.Int32),    Nullable         ] public int? Field1 { get; set; } // int
	}

	[Table(Database="TestData", Name="GuidID2")]
	public partial class GuidID2
	{
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid), PrimaryKey, NotNull] public Guid ID { get; set; } // uniqueidentifier
	}

	[Table(Database="TestData", Name="IndexTable")]
	public partial class IndexTable
	{
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey(2), NotNull] public int PKField1    { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey(1), NotNull] public int PKField2    { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32),                NotNull] public int UniqueField { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32),                NotNull] public int IndexField  { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Patient2_IndexTable_BackReference
		/// </summary>
		[Association(ThisKey="PKField2, PKField1", OtherKey="PKField2, PKField1", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public IndexTable2 Patient { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="IndexTable2")]
	public partial class IndexTable2
	{
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey(2), NotNull] public int PKField1 { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey(1), NotNull] public int PKField2 { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_Patient2_IndexTable
		/// </summary>
		[Association(ThisKey="PKField2, PKField1", OtherKey="PKField2, PKField1", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient2_IndexTable", BackReferenceName="Patient")]
		public IndexTable Patient2IndexTable { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="InheritanceChild")]
	public partial class InheritanceChild
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  NotNull] public int    InheritanceChildId  { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),                            NotNull] public int    InheritanceParentId { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable         ] public int?   TypeDiscriminator   { get; set; } // int
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50),    Nullable         ] public string Name                { get; set; } // nvarchar(50)
	}

	[Table(Database="TestData", Name="InheritanceParent")]
	public partial class InheritanceParent
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  NotNull] public int    InheritanceParentId { get; set; } // int
		[Column(DbType="int",          DataType=DataType.Int32),                  Nullable         ] public int?   TypeDiscriminator   { get; set; } // int
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50),    Nullable         ] public string Name                { get; set; } // nvarchar(50)
	}

	[Table(Database="TestData", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column("_ID", DbType="int",              DataType=DataType.Int32),                            PrimaryKey, Identity] public int       Id             { get; set; } // int
		[Column(       DbType="int",              DataType=DataType.Int32),                            Nullable            ] public int?      ID             { get; set; } // int
		[Column(       DbType="decimal(10, 4)",   DataType=DataType.Decimal,   Precision=10, Scale=4), Nullable            ] public decimal?  MoneyValue     { get; set; } // decimal(10, 4)
		[Column(       DbType="datetime",         DataType=DataType.DateTime),                         Nullable            ] public DateTime? DateTimeValue  { get; set; } // datetime
		[Column(       DbType="datetime2(7)",     DataType=DataType.DateTime2, Precision=7),           Nullable            ] public DateTime? DateTimeValue2 { get; set; } // datetime2(7)
		[Column(       DbType="bit",              DataType=DataType.Boolean),                          Nullable            ] public bool?     BoolValue      { get; set; } // bit
		[Column(       DbType="uniqueidentifier", DataType=DataType.Guid),                             Nullable            ] public Guid?     GuidValue      { get; set; } // uniqueidentifier
		[Column(       DbType="varbinary(5000)",  DataType=DataType.VarBinary, Length=5000),           Nullable            ] public byte[]    BinaryValue    { get; set; } // varbinary(5000)
		[Column(       DbType="smallint",         DataType=DataType.Int16),                            Nullable            ] public short?    SmallIntValue  { get; set; } // smallint
		[Column(       DbType="int",              DataType=DataType.Int32),                            Nullable            ] public int?      IntValue       { get; set; } // int
		[Column(       DbType="bigint",           DataType=DataType.Int64),                            Nullable            ] public long?     BigIntValue    { get; set; } // bigint
		[Column(       DbType="nvarchar(50)",     DataType=DataType.NVarChar,  Length=50),             Nullable            ] public string    StringValue    { get; set; } // nvarchar(50)
	}

	[Table(Database="TestData", Name="Name.Test")]
	public partial class NameTest
	{
		[Column("Name.Test", DbType="int", DataType=DataType.Int32), Nullable] public int? NameTest_Column { get; set; } // int
	}

	/// <summary>
	/// This is Parent table
	/// </summary>
	[Table(Database="TestData", Name="Parent")]
	public partial class Parent
	{
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? ParentID { get; set; } // int
		[Column(       DbType="int", DataType=DataType.Int32), Nullable            ] public int? Value1   { get; set; } // int
		[Column("_ID", DbType="int", DataType=DataType.Int32), PrimaryKey, Identity] public int  Id       { get; set; } // int
	}

	[Table(Database="TestData", Name="ParentChildView", IsView=true)]
	public partial class ParentChildView
	{
		[Column(DbType="int", DataType=DataType.Int32), Nullable] public int? ParentID { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), Nullable] public int? Value1   { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), Nullable] public int? ChildID  { get; set; } // int
	}

	[Table(Database="TestData", Name="ParentView", IsView=true)]
	public partial class ParentView
	{
		[Column(       DbType="int", DataType=DataType.Int32), Nullable] public int? ParentID { get; set; } // int
		[Column(       DbType="int", DataType=DataType.Int32), Nullable] public int? Value1   { get; set; } // int
		[Column("_ID", DbType="int", DataType=DataType.Int32), Identity] public int  Id       { get; set; } // int
	}

	[Table(Database="TestData", Name="Patient")]
	public partial class Patient
	{
		[Column(DbType="int",           DataType=DataType.Int32),                PrimaryKey, NotNull] public int    PersonID  { get; set; } // int
		[Column(DbType="nvarchar(256)", DataType=DataType.NVarChar, Length=256),             NotNull] public string Diagnosis { get; set; } // nvarchar(256)

		#region Associations

		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient_Person", BackReferenceName="Patient")]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="Person")]
	public partial class Person
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey,  Identity] public int    PersonID   { get; set; } // int
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50), NotNull              ] public string FirstName  { get; set; } // nvarchar(50)
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50), NotNull              ] public string LastName   { get; set; } // nvarchar(50)
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50),    Nullable          ] public string MiddleName { get; set; } // nvarchar(50)
		[Column(DbType="char(1)",      DataType=DataType.Char,     Length=1),  NotNull              ] public char   Gender     { get; set; } // char(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Doctor Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Patient Patient { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="SqlTypes")]
	public partial class SqlType
	{
		[Column(DbType="int",         DataType=DataType.Int32), PrimaryKey,  NotNull] public int             ID  { get; set; } // int
		[Column(DbType="hierarchyid", DataType=DataType.Udt),      Nullable         ] public SqlHierarchyId? HID { get; set; } // hierarchyid
	}

	[Table(Database="TestData", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey, Identity] public int ID { get; set; } // int
	}

	[Table(Database="TestData", Name="TestMerge1")]
	public partial class TestMerge1
	{
		[Column(DbType="int",               DataType=DataType.Int32),                                  PrimaryKey,  NotNull] public int             Id              { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field1          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field2          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field3          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field4          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field5          { get; set; } // int
		[Column(DbType="bigint",            DataType=DataType.Int64),                                     Nullable         ] public long?           FieldInt64      { get; set; } // bigint
		[Column(DbType="bit",               DataType=DataType.Boolean),                                   Nullable         ] public bool?           FieldBoolean    { get; set; } // bit
		[Column(DbType="varchar(20)",       DataType=DataType.VarChar,        Length=20),                 Nullable         ] public string          FieldString     { get; set; } // varchar(20)
		[Column(DbType="nvarchar(20)",      DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string          FieldNString    { get; set; } // nvarchar(20)
		[Column(DbType="char(1)",           DataType=DataType.Char,           Length=1),                  Nullable         ] public char?           FieldChar       { get; set; } // char(1)
		[Column(DbType="nchar(1)",          DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldNChar      { get; set; } // nchar(1)
		[Column(DbType="real",              DataType=DataType.Single),                                    Nullable         ] public float?          FieldFloat      { get; set; } // real
		[Column(DbType="float",             DataType=DataType.Double),                                    Nullable         ] public double?         FieldDouble     { get; set; } // float
		[Column(DbType="datetime",          DataType=DataType.DateTime),                                  Nullable         ] public DateTime?       FieldDateTime   { get; set; } // datetime
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7),               Nullable         ] public DateTimeOffset? FieldDateTime2  { get; set; } // datetimeoffset(7)
		[Column(DbType="varbinary(20)",     DataType=DataType.VarBinary,      Length=20),                 Nullable         ] public byte[]          FieldBinary     { get; set; } // varbinary(20)
		[Column(DbType="uniqueidentifier",  DataType=DataType.Guid),                                      Nullable         ] public Guid?           FieldGuid       { get; set; } // uniqueidentifier
		[Column(DbType="decimal(24, 10)",   DataType=DataType.Decimal,        Precision=24, Scale=10),    Nullable         ] public decimal?        FieldDecimal    { get; set; } // decimal(24, 10)
		[Column(DbType="date",              DataType=DataType.Date),                                      Nullable         ] public DateTime?       FieldDate       { get; set; } // date
		[Column(DbType="time(7)",           DataType=DataType.Time,           Precision=7),               Nullable         ] public TimeSpan?       FieldTime       { get; set; } // time(7)
		[Column(DbType="varchar(20)",       DataType=DataType.VarChar,        Length=20),                 Nullable         ] public string          FieldEnumString { get; set; } // varchar(20)
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            FieldEnumNumber { get; set; } // int
	}

	[Table(Database="TestData", Name="TestMerge2")]
	public partial class TestMerge2
	{
		[Column(DbType="int",               DataType=DataType.Int32),                                  PrimaryKey,  NotNull] public int             Id              { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field1          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field2          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field3          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field4          { get; set; } // int
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            Field5          { get; set; } // int
		[Column(DbType="bigint",            DataType=DataType.Int64),                                     Nullable         ] public long?           FieldInt64      { get; set; } // bigint
		[Column(DbType="bit",               DataType=DataType.Boolean),                                   Nullable         ] public bool?           FieldBoolean    { get; set; } // bit
		[Column(DbType="varchar(20)",       DataType=DataType.VarChar,        Length=20),                 Nullable         ] public string          FieldString     { get; set; } // varchar(20)
		[Column(DbType="nvarchar(20)",      DataType=DataType.NVarChar,       Length=20),                 Nullable         ] public string          FieldNString    { get; set; } // nvarchar(20)
		[Column(DbType="char(1)",           DataType=DataType.Char,           Length=1),                  Nullable         ] public char?           FieldChar       { get; set; } // char(1)
		[Column(DbType="nchar(1)",          DataType=DataType.NChar,          Length=1),                  Nullable         ] public char?           FieldNChar      { get; set; } // nchar(1)
		[Column(DbType="real",              DataType=DataType.Single),                                    Nullable         ] public float?          FieldFloat      { get; set; } // real
		[Column(DbType="float",             DataType=DataType.Double),                                    Nullable         ] public double?         FieldDouble     { get; set; } // float
		[Column(DbType="datetime",          DataType=DataType.DateTime),                                  Nullable         ] public DateTime?       FieldDateTime   { get; set; } // datetime
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7),               Nullable         ] public DateTimeOffset? FieldDateTime2  { get; set; } // datetimeoffset(7)
		[Column(DbType="varbinary(20)",     DataType=DataType.VarBinary,      Length=20),                 Nullable         ] public byte[]          FieldBinary     { get; set; } // varbinary(20)
		[Column(DbType="uniqueidentifier",  DataType=DataType.Guid),                                      Nullable         ] public Guid?           FieldGuid       { get; set; } // uniqueidentifier
		[Column(DbType="decimal(24, 10)",   DataType=DataType.Decimal,        Precision=24, Scale=10),    Nullable         ] public decimal?        FieldDecimal    { get; set; } // decimal(24, 10)
		[Column(DbType="date",              DataType=DataType.Date),                                      Nullable         ] public DateTime?       FieldDate       { get; set; } // date
		[Column(DbType="time(7)",           DataType=DataType.Time,           Precision=7),               Nullable         ] public TimeSpan?       FieldTime       { get; set; } // time(7)
		[Column(DbType="varchar(20)",       DataType=DataType.VarChar,        Length=20),                 Nullable         ] public string          FieldEnumString { get; set; } // varchar(20)
		[Column(DbType="int",               DataType=DataType.Int32),                                     Nullable         ] public int?            FieldEnumNumber { get; set; } // int
	}

	[Table(Database="TestData", Name="TestSchema1")]
	public partial class TestSchema1
	{
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey, NotNull] public int TestSchema1ID { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32),             NotNull] public int Field1        { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_TestSchema2_ParentTestSchema1_BackReference
		/// </summary>
		[Association(ThisKey="TestSchema1ID", OtherKey="ParentTestSchema1ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<TestSchema2> TestSchema2ParentTestSchemata { get; set; }

		/// <summary>
		/// FK_TestSchema2_TestSchema1_BackReference
		/// </summary>
		[Association(ThisKey="TestSchema1ID", OtherKey="TestSchema1ID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<TestSchema2> TestSchemata { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="TestSchema2")]
	public partial class TestSchema2
	{
		[Column(DbType="int", DataType=DataType.Int32), NotNull] public int TestSchema1ID       { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), NotNull] public int ParentTestSchema1ID { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_TestSchema2_ParentTestSchema1
		/// </summary>
		[Association(ThisKey="ParentTestSchema1ID", OtherKey="TestSchema1ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchema2_ParentTestSchema1", BackReferenceName="TestSchema2ParentTestSchemata")]
		public TestSchema1 ParentTestSchema1 { get; set; }

		/// <summary>
		/// FK_TestSchema2_TestSchema1
		/// </summary>
		[Association(ThisKey="TestSchema1ID", OtherKey="TestSchema1ID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchema2_TestSchema1", BackReferenceName="TestSchemata")]
		public TestSchema1 TestSchema1 { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="TestSchemaX")]
	public partial class TestSchemaX
	{
		[Column(DbType="int", DataType=DataType.Int32), PrimaryKey, NotNull] public int TestSchemaXID { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32),             NotNull] public int Field1        { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX_BackReference
		/// </summary>
		[Association(ThisKey="TestSchemaXID", OtherKey="TestSchemaXID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<TestSchemaY> TestSchemaY { get; set; }

		/// <summary>
		/// FK_TestSchemaY_OtherID_BackReference
		/// </summary>
		[Association(ThisKey="TestSchemaXID", OtherKey="TestSchemaXID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<TestSchemaY> TestSchemaYOtherIDs { get; set; }

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX_BackReference
		/// </summary>
		[Association(ThisKey="TestSchemaXID", OtherKey="ParentTestSchemaXID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public List<TestSchemaY> TestSchemaYParentTestSchemaX { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="TestSchemaY")]
	public partial class TestSchemaY
	{
		[Column(DbType="int", DataType=DataType.Int32), NotNull] public int TestSchemaXID       { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), NotNull] public int ParentTestSchemaXID { get; set; } // int
		[Column(DbType="int", DataType=DataType.Int32), NotNull] public int OtherID             { get; set; } // int

		#region Associations

		/// <summary>
		/// FK_TestSchemaY_OtherID
		/// </summary>
		[Association(ThisKey="TestSchemaXID", OtherKey="TestSchemaXID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchemaY_OtherID", BackReferenceName="TestSchemaYOtherIDs")]
		public TestSchemaX FK_TestSchemaY_OtherID { get; set; }

		/// <summary>
		/// FK_TestSchemaY_ParentTestSchemaX
		/// </summary>
		[Association(ThisKey="ParentTestSchemaXID", OtherKey="TestSchemaXID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchemaY_ParentTestSchemaX", BackReferenceName="TestSchemaYParentTestSchemaX")]
		public TestSchemaX ParentTestSchemaX { get; set; }

		/// <summary>
		/// FK_TestSchemaY_TestSchemaX
		/// </summary>
		[Association(ThisKey="TestSchemaXID", OtherKey="TestSchemaXID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchemaY_TestSchemaX", BackReferenceName="TestSchemaY")]
		public TestSchemaX TestSchemaX { get; set; }

		#endregion
	}

	[Table(Database="TestData", Name="TestTable2")]
	public partial class TestTable2
	{
		[Column(DbType="int",           DataType=DataType.Int32),                  PrimaryKey,  Identity] public int       ID          { get; set; } // int
		[Column(DbType="nvarchar(50)",  DataType=DataType.NVarChar,  Length=50),   NotNull              ] public string    Name        { get; set; } // nvarchar(50)
		[Column(DbType="nvarchar(250)", DataType=DataType.NVarChar,  Length=250),     Nullable          ] public string    Description { get; set; } // nvarchar(250)
		[Column(DbType="datetime2(7)",  DataType=DataType.DateTime2, Precision=7),    Nullable          ] public DateTime? CreatedOn   { get; set; } // datetime2(7)
	}

	[Table(Database="TestData", Name="TestTable3")]
	public partial class TestTable3
	{
		[Column(DbType="int",          DataType=DataType.Int32),               PrimaryKey, NotNull] public int    ID   { get; set; } // int
		[Column(DbType="nvarchar(50)", DataType=DataType.NVarChar, Length=50),             NotNull] public string Name { get; set; } // nvarchar(50)
	}

	public static partial class TestDataDBStoredProcedures
	{
		#region PersonDelete

		public static int PersonDelete(this DataConnection dataConnection, int? @PersonID)
		{
			return dataConnection.ExecuteProc("[TestData]..[Person_Delete]",
				new DataParameter("@PersonID", @PersonID, DataType.Int32));
		}

		#endregion

		#region ScalarDatareader

		public static IEnumerable<ScalarDatareaderresult> ScalarDatareader(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<ScalarDatareaderresult>("[TestData]..[Scalar_DataReader]");
		}

		public partial class ScalarDatareaderresult
		{
			public int?   intField    { get; set; }
			public string stringField { get; set; }
		}

		#endregion

		#region PatientSelectall

		public static IEnumerable<PatientSelectallresult> PatientSelectall(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<PatientSelectallresult>("[TestData]..[Patient_SelectAll]");
		}

		public partial class PatientSelectallresult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public char   Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		#endregion

		#region ScalarOutputparameter

		public static int ScalarOutputparameter(this DataConnection dataConnection, ref int? @outputInt, ref string @outputString)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[Scalar_OutputParameter]",
				new DataParameter("@outputInt",    @outputInt,    DataType.Int32)   { Direction = ParameterDirection.InputOutput },
				new DataParameter("@outputString", @outputString, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputInt    = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@outputInt"]).   Value);
			@outputString = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputString"]).Value);

			return ret;
		}

		#endregion

		#region PatientSelectbyname

		public static IEnumerable<PatientSelectbynameresult> PatientSelectbyname(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<PatientSelectbynameresult>("[TestData]..[Patient_SelectByName]",
				new DataParameter("@firstName", @firstName, DataType.NVarChar),
				new DataParameter("@lastName",  @lastName,  DataType.NVarChar));
		}

		public partial class PatientSelectbynameresult
		{
			public int    PersonID   { get; set; }
			public string FirstName  { get; set; }
			public string LastName   { get; set; }
			public string MiddleName { get; set; }
			public char   Gender     { get; set; }
			public string Diagnosis  { get; set; }
		}

		#endregion

		#region OutRefTest

		public static int OutRefTest(this DataConnection dataConnection, int? @ID, ref int? @outputID, ref int? @inputOutputID, string @str, ref string @outputStr, ref string @inputOutputStr)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[OutRefTest]",
				new DataParameter("@ID",             @ID,             DataType.Int32),
				new DataParameter("@outputID",       @outputID,       DataType.Int32)   { Direction = ParameterDirection.InputOutput },
				new DataParameter("@inputOutputID",  @inputOutputID,  DataType.Int32)   { Direction = ParameterDirection.InputOutput },
				new DataParameter("@str",            @str,            DataType.VarChar),
				new DataParameter("@outputStr",      @outputStr,      DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 },
				new DataParameter("@inputOutputStr", @inputOutputStr, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputID       = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@outputID"]).      Value);
			@inputOutputID  = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputID"]). Value);
			@outputStr      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputStr"]).     Value);
			@inputOutputStr = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputStr"]).Value);

			return ret;
		}

		#endregion

		#region ScalarReturnparameterwithobject

		public static IEnumerable<Person> ScalarReturnparameterwithobject(this DataConnection dataConnection, int? @id)
		{
			return dataConnection.QueryProc<Person>("[TestData]..[Scalar_ReturnParameterWithObject]",
				new DataParameter("@id", @id, DataType.Int32));
		}

		#endregion

		#region OutRefEnumTest

		public static int OutRefEnumTest(this DataConnection dataConnection, string @str, ref string @outputStr, ref string @inputOutputStr)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[OutRefEnumTest]",
				new DataParameter("@str",            @str,            DataType.VarChar),
				new DataParameter("@outputStr",      @outputStr,      DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 },
				new DataParameter("@inputOutputStr", @inputOutputStr, DataType.VarChar) { Direction = ParameterDirection.InputOutput, Size = 50 });

			@outputStr      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@outputStr"]).     Value);
			@inputOutputStr = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["@inputOutputStr"]).Value);

			return ret;
		}

		#endregion

		#region SelectImplicitColumn

		public static IEnumerable<SelectImplicitColumnResult> SelectImplicitColumn(this DataConnection dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new SelectImplicitColumnResult
				{
					Column1 = Converter.ChangeTypeTo<int>(dataReader.GetValue(0), ms),
				},
				"[TestData]..[SelectImplicitColumn]");
		}

		public partial class SelectImplicitColumnResult
		{
			[Column("")] public int Column1 { get; set; }
		}

		#endregion

		#region DuplicateColumnNames

		public static IEnumerable<DuplicateColumnNamesResult> DuplicateColumnNames(this DataConnection dataConnection)
		{
			var ms = dataConnection.MappingSchema;

			return dataConnection.QueryProc(dataReader =>
				new DuplicateColumnNamesResult
				{
					id      = Converter.ChangeTypeTo<int>   (dataReader.GetValue(0), ms),
					Column2 = Converter.ChangeTypeTo<string>(dataReader.GetValue(1), ms),
				},
				"[TestData]..[DuplicateColumnNames]");
		}

		public partial class DuplicateColumnNamesResult
		{
			               public int    id      { get; set; }
			[Column("id")] public string Column2 { get; set; }
		}

		#endregion

		#region PersonSelectbykey

		public static IEnumerable<Person> PersonSelectbykey(this DataConnection dataConnection, int? @id)
		{
			return dataConnection.QueryProc<Person>("[TestData]..[Person_SelectByKey]",
				new DataParameter("@id", @id, DataType.Int32));
		}

		#endregion

		#region PersonSelectall

		public static IEnumerable<Person> PersonSelectall(this DataConnection dataConnection)
		{
			return dataConnection.QueryProc<Person>("[TestData]..[Person_SelectAll]");
		}

		#endregion

		#region PersonSelectbyname

		public static IEnumerable<Person> PersonSelectbyname(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<Person>("[TestData]..[Person_SelectByName]",
				new DataParameter("@firstName", @firstName, DataType.NVarChar),
				new DataParameter("@lastName",  @lastName,  DataType.NVarChar));
		}

		#endregion

		#region PersonSelectlistbyname

		public static IEnumerable<Person> PersonSelectlistbyname(this DataConnection dataConnection, string @firstName, string @lastName)
		{
			return dataConnection.QueryProc<Person>("[TestData]..[Person_SelectListByName]",
				new DataParameter("@firstName", @firstName, DataType.NVarChar),
				new DataParameter("@lastName",  @lastName,  DataType.NVarChar));
		}

		#endregion

		#region PersonInsert

		public static IEnumerable<PersonInsertresult> PersonInsert(this DataConnection dataConnection, string @FirstName, string @LastName, string @MiddleName, char? @Gender)
		{
			return dataConnection.QueryProc<PersonInsertresult>("[TestData]..[Person_Insert]",
				new DataParameter("@FirstName",  @FirstName,  DataType.NVarChar),
				new DataParameter("@LastName",   @LastName,   DataType.NVarChar),
				new DataParameter("@MiddleName", @MiddleName, DataType.NVarChar),
				new DataParameter("@Gender",     @Gender,     DataType.Char));
		}

		public partial class PersonInsertresult
		{
			public int? PersonID { get; set; }
		}

		#endregion

		#region PersonInsertOutputparameter

		public static int PersonInsertOutputparameter(this DataConnection dataConnection, string @FirstName, string @LastName, string @MiddleName, char? @Gender, ref int? @PersonID)
		{
			var ret = dataConnection.ExecuteProc("[TestData]..[Person_Insert_OutputParameter]",
				new DataParameter("@FirstName",  @FirstName,  DataType.NVarChar),
				new DataParameter("@LastName",   @LastName,   DataType.NVarChar),
				new DataParameter("@MiddleName", @MiddleName, DataType.NVarChar),
				new DataParameter("@Gender",     @Gender,     DataType.Char),
				new DataParameter("@PersonID",   @PersonID,   DataType.Int32)    { Direction = ParameterDirection.InputOutput });

			@PersonID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["@PersonID"]).Value);

			return ret;
		}

		#endregion

		#region PersonUpdate

		public static int PersonUpdate(this DataConnection dataConnection, int? @PersonID, string @FirstName, string @LastName, string @MiddleName, char? @Gender)
		{
			return dataConnection.ExecuteProc("[TestData]..[Person_Update]",
				new DataParameter("@PersonID",   @PersonID,   DataType.Int32),
				new DataParameter("@FirstName",  @FirstName,  DataType.NVarChar),
				new DataParameter("@LastName",   @LastName,   DataType.NVarChar),
				new DataParameter("@MiddleName", @MiddleName, DataType.NVarChar),
				new DataParameter("@Gender",     @Gender,     DataType.Char));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region ScalarReturnparameter

		[Sql.Function(Name=".Scalar_ReturnParameter", ServerSideOnly=true)]
		public static int? ScalarReturnparameter()
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static AllType Find(this ITable<AllType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static AllTypes2 Find(this ITable<AllTypes2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static BinaryData Find(this ITable<BinaryData> table, int BinaryDataID)
		{
			return table.FirstOrDefault(t =>
				t.BinaryDataID == BinaryDataID);
		}

		public static Child Find(this ITable<Child> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static DataTypeTest Find(this ITable<DataTypeTest> table, int DataTypeID)
		{
			return table.FirstOrDefault(t =>
				t.DataTypeID == DataTypeID);
		}

		public static DecimalOverflow Find(this ITable<DecimalOverflow> table, decimal Decimal1)
		{
			return table.FirstOrDefault(t =>
				t.Decimal1 == Decimal1);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static GrandChild Find(this ITable<GrandChild> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static GuidID Find(this ITable<GuidID> table, Guid ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static GuidID2 Find(this ITable<GuidID2> table, Guid ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static IndexTable Find(this ITable<IndexTable> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static IndexTable2 Find(this ITable<IndexTable2> table, int PKField1, int PKField2)
		{
			return table.FirstOrDefault(t =>
				t.PKField1 == PKField1 &&
				t.PKField2 == PKField2);
		}

		public static InheritanceChild Find(this ITable<InheritanceChild> table, int InheritanceChildId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceChildId == InheritanceChildId);
		}

		public static InheritanceParent Find(this ITable<InheritanceParent> table, int InheritanceParentId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceParentId == InheritanceParentId);
		}

		public static LinqDataType Find(this ITable<LinqDataType> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Parent Find(this ITable<Parent> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static SqlType Find(this ITable<SqlType> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestMerge1 Find(this ITable<TestMerge1> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestMerge2 Find(this ITable<TestMerge2> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static TestSchema1 Find(this ITable<TestSchema1> table, int TestSchema1ID)
		{
			return table.FirstOrDefault(t =>
				t.TestSchema1ID == TestSchema1ID);
		}

		public static TestSchemaX Find(this ITable<TestSchemaX> table, int TestSchemaXID)
		{
			return table.FirstOrDefault(t =>
				t.TestSchemaXID == TestSchemaXID);
		}

		public static TestTable2 Find(this ITable<TestTable2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestTable3 Find(this ITable<TestTable3> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}

	public static partial class Test1Schema
	{
		public partial class DataContext
		{
			public ITable<Table1>    Table1    { get { return _dataContext.GetTable<Table1>(); } }
			public ITable<Table2543> Table2543 { get { return _dataContext.GetTable<Table2543>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Database="TestData", Schema="Test1", Name="Table_1")]
		public partial class Table1
		{
			[Column(DbType="int",       DataType=DataType.Int32),            PrimaryKey,  NotNull] public int    ID   { get; set; } // int
			[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10),    Nullable         ] public string Name { get; set; } // nchar(10)
		}

		[Table(Database="TestData", Schema="Test1", Name="Table_2_543")]
		public partial class Table2543
		{
			[Column(DbType="int",       DataType=DataType.Int32),            PrimaryKey,  NotNull] public int    ID   { get; set; } // int
			[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10),    Nullable         ] public string Name { get; set; } // nchar(10)
		}

		#region Table Extensions

		public static Table1 Find(this ITable<Table1> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Table2543 Find(this ITable<Table2543> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		#endregion
	}

	public static partial class Test2Schema
	{
		public partial class DataContext
		{
			public ITable<Table2543> Table2543 { get { return _dataContext.GetTable<Table2543>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Database="TestData", Schema="Test2", Name="Table_2_543")]
		public partial class Table2543
		{
			[Column(DbType="int",       DataType=DataType.Int32),            PrimaryKey,  NotNull] public int    ID   { get; set; } // int
			[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10),    Nullable         ] public string Name { get; set; } // nchar(10)
		}

		#region Table Extensions

		public static Table2543 Find(this ITable<Table2543> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		#endregion
	}

	public static partial class Test3_dasdSchema
	{
		public partial class DataContext
		{
			public ITable<Table2543> Table2543 { get { return _dataContext.GetTable<Table2543>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Database="TestData", Schema="Test3_dasd", Name="Table_2_543")]
		public partial class Table2543
		{
			[Column(DbType="int",       DataType=DataType.Int32),            PrimaryKey,  NotNull] public int    ID   { get; set; } // int
			[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10),    Nullable         ] public string Name { get; set; } // nchar(10)
		}

		#region Table Extensions

		public static Table2543 Find(this ITable<Table2543> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		#endregion
	}

	public static partial class MySchemaSchema
	{
		public partial class DataContext
		{
			public ITable<TestSchemaA> TestSchemaA { get { return _dataContext.GetTable<TestSchemaA>(); } }
			public ITable<TestSchemaB> TestSchemaB { get { return _dataContext.GetTable<TestSchemaB>(); } }

			private readonly IDataContext _dataContext;

			public DataContext(IDataContext dataContext)
			{
				_dataContext = dataContext;
			}
		}

		[Table(Database="TestData", Schema="TestSchema", Name="TestSchemaA")]
		public partial class TestSchemaA
		{
			[Column(DbType="int", DataType=DataType.Int32), PrimaryKey, NotNull] public int TestSchemaAID { get; set; } // int
			[Column(DbType="int", DataType=DataType.Int32),             NotNull] public int Field1        { get; set; } // int

			#region Associations

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA_BackReference
			/// </summary>
			[Association(ThisKey="TestSchemaAID", OtherKey="OriginTestSchemaAID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public List<MySchemaSchema.TestSchemaB> TestSchemaBYOriginTestSchemaA { get; set; }

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA_BackReference
			/// </summary>
			[Association(ThisKey="TestSchemaAID", OtherKey="TargetTestSchemaAID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
			public List<MySchemaSchema.TestSchemaB> TestSchemaBYTargetTestSchemaA { get; set; }

			#endregion
		}

		[Table(Database="TestData", Schema="TestSchema", Name="TestSchemaB")]
		public partial class TestSchemaB
		{
			[Column(DbType="int", DataType=DataType.Int32), PrimaryKey, NotNull] public int TestSchemaBID       { get; set; } // int
			[Column(DbType="int", DataType=DataType.Int32),             NotNull] public int OriginTestSchemaAID { get; set; } // int
			[Column(DbType="int", DataType=DataType.Int32),             NotNull] public int TargetTestSchemaAID { get; set; } // int

			#region Associations

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_OriginTestSchemaA
			/// </summary>
			[Association(ThisKey="OriginTestSchemaAID", OtherKey="TestSchemaAID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchema_TestSchemaBY_OriginTestSchemaA", BackReferenceName="TestSchemaBYOriginTestSchemaA")]
			public MySchemaSchema.TestSchemaA OriginTestSchemaA { get; set; }

			/// <summary>
			/// FK_TestSchema_TestSchemaBY_TargetTestSchemaA
			/// </summary>
			[Association(ThisKey="TargetTestSchemaAID", OtherKey="TestSchemaAID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_TestSchema_TestSchemaBY_TargetTestSchemaA", BackReferenceName="TestSchemaBYTargetTestSchemaA")]
			public MySchemaSchema.TestSchemaA TargetTestSchemaA { get; set; }

			#endregion
		}

		#region Table Extensions

		public static TestSchemaA Find(this ITable<TestSchemaA> table, int TestSchemaAID)
		{
			return table.FirstOrDefault(t =>
				t.TestSchemaAID == TestSchemaAID);
		}

		public static TestSchemaB Find(this ITable<TestSchemaB> table, int TestSchemaBID)
		{
			return table.FirstOrDefault(t =>
				t.TestSchemaBID == TestSchemaBID);
		}

		#endregion
	}
}
