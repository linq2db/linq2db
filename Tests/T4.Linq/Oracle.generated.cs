//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace OracleDataContext
{
	/// <summary>
	/// Database       : TestData
	/// Data Source    : dbhost
	/// Server Version : 11.2.0.1.0
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<ALLTYPE>             ALLTYPES            { get { return this.GetTable<ALLTYPE>(); } }
		public ITable<BINARYDATA>          BINARYDATAs         { get { return this.GetTable<BINARYDATA>(); } }
		public ITable<CHILD>               Children            { get { return this.GetTable<CHILD>(); } }
		public ITable<DATATYPETEST>        DATATYPETESTs       { get { return this.GetTable<DATATYPETEST>(); } }
		public ITable<DECIMALOVERFLOW>     DECIMALOVERFLOWs    { get { return this.GetTable<DECIMALOVERFLOW>(); } }
		public ITable<DOCTOR>              DOCTORs             { get { return this.GetTable<DOCTOR>(); } }
		public ITable<GRANDCHILD>          GRANDCHILDs         { get { return this.GetTable<GRANDCHILD>(); } }
		public ITable<INHERITANCECHILD>    INHERITANCECHILDs   { get { return this.GetTable<INHERITANCECHILD>(); } }
		public ITable<INHERITANCEPARENT>   INHERITANCEPARENTs  { get { return this.GetTable<INHERITANCEPARENT>(); } }
		public ITable<ISSUE723TABLE>       ISSUE723TABLE       { get { return this.GetTable<ISSUE723TABLE>(); } }
		public ITable<LINQDATATYPE>        LINQDATATYPES       { get { return this.GetTable<LINQDATATYPE>(); } }
		public ITable<PARENT>              PARENTs             { get { return this.GetTable<PARENT>(); } }
		public ITable<PARENT564>           PARENT564           { get { return this.GetTable<PARENT564>(); } }
		public ITable<PATIENT>             PATIENTs            { get { return this.GetTable<PATIENT>(); } }
		public ITable<PERSON>              People              { get { return this.GetTable<PERSON>(); } }
		public ITable<SEQUENCETEST>        SEQUENCETESTs       { get { return this.GetTable<SEQUENCETEST>(); } }
		public ITable<STGTRADEINFORMATION> STGTRADEINFORMATION { get { return this.GetTable<STGTRADEINFORMATION>(); } }
		public ITable<STRINGTEST>          STRINGTESTs         { get { return this.GetTable<STRINGTEST>(); } }
		public ITable<TENTITY>             TENTITY             { get { return this.GetTable<TENTITY>(); } }
		public ITable<TESTIDENTITY>        TESTIDENTITies      { get { return this.GetTable<TESTIDENTITY>(); } }
		public ITable<TESTMERGE1>          TESTMERGE1          { get { return this.GetTable<TESTMERGE1>(); } }
		public ITable<TESTMERGE2>          TESTMERGE2          { get { return this.GetTable<TESTMERGE2>(); } }
		public ITable<TESTTABLE>           TESTTABLEs          { get { return this.GetTable<TESTTABLE>(); } }
		public ITable<TTESTUSER>           TTESTUSER           { get { return this.GetTable<TTESTUSER>(); } }
		public ITable<TTESTUSERCONTRACT>   TTESTUSERCONTRACT   { get { return this.GetTable<TTESTUSERCONTRACT>(); } }

		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table(Schema="TESTUSER", Name="ALLTYPES")]
	public partial class ALLTYPE
	{
		[Column(DbType="NUMBER",                            DataType=DataType.Decimal,        Length=22, Scale=0),               PrimaryKey,  NotNull] public decimal         ID                     { get; set; } // NUMBER
		[Column(DbType="NUMBER (20,0)",                     DataType=DataType.Decimal,        Length=22, Precision=20, Scale=0),    Nullable         ] public decimal?        BIGINTDATATYPE         { get; set; } // NUMBER (20,0)
		[Column(DbType="NUMBER",                            DataType=DataType.Decimal,        Length=22, Scale=0),                  Nullable         ] public decimal?        NUMERICDATATYPE        { get; set; } // NUMBER
		[Column(DbType="NUMBER (1,0)",                      DataType=DataType.Decimal,        Length=22, Precision=1, Scale=0),     Nullable         ] public sbyte?          BITDATATYPE            { get; set; } // NUMBER (1,0)
		[Column(DbType="NUMBER (5,0)",                      DataType=DataType.Decimal,        Length=22, Precision=5, Scale=0),     Nullable         ] public int?            SMALLINTDATATYPE       { get; set; } // NUMBER (5,0)
		[Column(DbType="NUMBER",                            DataType=DataType.Decimal,        Length=22, Scale=6),                  Nullable         ] public decimal?        DECIMALDATATYPE        { get; set; } // NUMBER
		[Column(DbType="NUMBER (10,4)",                     DataType=DataType.Decimal,        Length=22, Precision=10, Scale=4),    Nullable         ] public decimal?        SMALLMONEYDATATYPE     { get; set; } // NUMBER (10,4)
		[Column(DbType="NUMBER (10,0)",                     DataType=DataType.Decimal,        Length=22, Precision=10, Scale=0),    Nullable         ] public long?           INTDATATYPE            { get; set; } // NUMBER (10,0)
		[Column(DbType="NUMBER (3,0)",                      DataType=DataType.Decimal,        Length=22, Precision=3, Scale=0),     Nullable         ] public short?          TINYINTDATATYPE        { get; set; } // NUMBER (3,0)
		[Column(DbType="NUMBER",                            DataType=DataType.Decimal,        Length=22),                           Nullable         ] public decimal?        MONEYDATATYPE          { get; set; } // NUMBER
		[Column(DbType="BINARY_DOUBLE",                     DataType=DataType.Double,         Length=8),                            Nullable         ] public double?         FLOATDATATYPE          { get; set; } // BINARY_DOUBLE
		[Column(DbType="BINARY_FLOAT",                      DataType=DataType.Single,         Length=4),                            Nullable         ] public float?          REALDATATYPE           { get; set; } // BINARY_FLOAT
		[Column(DbType="DATE",                              DataType=DataType.DateTime,       Length=7),                            Nullable         ] public DateTime?       DATETIMEDATATYPE       { get; set; } // DATE
		[Column(DbType="TIMESTAMP(6)",                      DataType=DataType.DateTime2,      Length=11, Scale=6),                  Nullable         ] public DateTime?       DATETIME2DATATYPE      { get; set; } // TIMESTAMP(6)
		[Column(DbType="TIMESTAMP(6) WITH TIME ZONE",       DataType=DataType.DateTimeOffset, Length=13, Scale=6),                  Nullable         ] public DateTimeOffset? DATETIMEOFFSETDATATYPE { get; set; } // TIMESTAMP(6) WITH TIME ZONE
		[Column(DbType="TIMESTAMP(6) WITH LOCAL TIME ZONE", DataType=DataType.DateTimeOffset, Length=11, Scale=6),                  Nullable         ] public DateTimeOffset? LOCALZONEDATATYPE      { get; set; } // TIMESTAMP(6) WITH LOCAL TIME ZONE
		[Column(DbType="CHAR(1)",                           DataType=DataType.Char,           Length=1),                            Nullable         ] public char?           CHARDATATYPE           { get; set; } // CHAR(1)
		[Column(DbType="CHAR(20)",                          DataType=DataType.Char,           Length=20),                           Nullable         ] public string          CHAR20DATATYPE         { get; set; } // CHAR(20)
		[Column(DbType="VARCHAR2(20)",                      DataType=DataType.VarChar,        Length=20),                           Nullable         ] public string          VARCHARDATATYPE        { get; set; } // VARCHAR2(20)
		[Column(DbType="CLOB",                              DataType=DataType.Text,           Length=4000),                         Nullable         ] public string          TEXTDATATYPE           { get; set; } // CLOB
		[Column(DbType="NCHAR(40)",                         DataType=DataType.NChar,          Length=40),                           Nullable         ] public string          NCHARDATATYPE          { get; set; } // NCHAR(40)
		[Column(DbType="NVARCHAR2(40)",                     DataType=DataType.NVarChar,       Length=40),                           Nullable         ] public string          NVARCHARDATATYPE       { get; set; } // NVARCHAR2(40)
		[Column(DbType="NCLOB",                             DataType=DataType.NText,          Length=4000),                         Nullable         ] public string          NTEXTDATATYPE          { get; set; } // NCLOB
		[Column(DbType="BLOB",                              DataType=DataType.Blob,           Length=4000),                         Nullable         ] public byte[]          BINARYDATATYPE         { get; set; } // BLOB
		[Column(DbType="BFILE",                             DataType=DataType.VarBinary,      Length=530),                          Nullable         ] public byte[]          BFILEDATATYPE          { get; set; } // BFILE
		[Column(DbType="RAW(16)",                           DataType=DataType.Binary,         Length=16),                           Nullable         ] public byte[]          GUIDDATATYPE           { get; set; } // RAW(16)
		[Column(DbType="URITYPE",                           DataType=DataType.Undefined,      Length=256),                          Nullable         ] public object          URIDATATYPE            { get; set; } // URITYPE
		[Column(DbType="XMLTYPE",                           DataType=DataType.Xml,            Length=2000),                         Nullable         ] public string          XMLDATATYPE            { get; set; } // XMLTYPE
	}

	[Table(Schema="TESTUSER", Name="BINARYDATA")]
	public partial class BINARYDATA
	{
		[Column(DbType="NUMBER",       DataType=DataType.Decimal,   Length=22),          PrimaryKey, NotNull] public decimal  BINARYDATAID { get; set; } // NUMBER
		[Column(DbType="TIMESTAMP(6)", DataType=DataType.DateTime2, Length=11, Scale=6),             NotNull] public DateTime STAMP        { get; set; } // TIMESTAMP(6)
		[Column(DbType="BLOB",         DataType=DataType.Blob,      Length=4000),                    NotNull] public byte[]   DATA         { get; set; } // BLOB
	}

	[Table(Schema="TESTUSER", Name="CHILD")]
	public partial class CHILD
	{
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? PARENTID { get; set; } // NUMBER
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? CHILDID  { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="DATATYPETEST")]
	public partial class DATATYPETEST
	{
		[Column(              DbType="NUMBER",         DataType=DataType.Decimal,  Length=22, Scale=0),               PrimaryKey,  NotNull] public decimal   DATATYPEID { get; set; } // NUMBER
		[Column(@"BINARY_",   DbType="RAW(50)",        DataType=DataType.Binary,   Length=50),                           Nullable         ] public byte[]    BINARY     { get; set; } // RAW(50)
		[Column(@"BOOLEAN_",  DbType="NUMBER (1,0)",   DataType=DataType.Decimal,  Length=22, Precision=1, Scale=0),     Nullable         ] public sbyte?    BOOLEAN    { get; set; } // NUMBER (1,0)
		[Column(@"BYTE_",     DbType="NUMBER (3,0)",   DataType=DataType.Decimal,  Length=22, Precision=3, Scale=0),     Nullable         ] public short?    BYTE       { get; set; } // NUMBER (3,0)
		[Column(@"BYTES_",    DbType="BLOB",           DataType=DataType.Blob,     Length=4000),                         Nullable         ] public byte[]    BYTES      { get; set; } // BLOB
		[Column(@"CHAR_",     DbType="NCHAR(2)",       DataType=DataType.NChar,    Length=2),                            Nullable         ] public string    CHAR       { get; set; } // NCHAR(2)
		[Column(@"DATETIME_", DbType="DATE",           DataType=DataType.DateTime, Length=7),                            Nullable         ] public DateTime? DATETIME   { get; set; } // DATE
		[Column(@"DECIMAL_",  DbType="NUMBER (19,5)",  DataType=DataType.Decimal,  Length=22, Precision=19, Scale=5),    Nullable         ] public decimal?  DECIMAL    { get; set; } // NUMBER (19,5)
		[Column(@"DOUBLE_",   DbType="FLOAT(126)",     DataType=DataType.Decimal,  Length=22, Precision=126),            Nullable         ] public decimal?  DOUBLE     { get; set; } // FLOAT(126)
		[Column(@"GUID_",     DbType="RAW(16)",        DataType=DataType.Binary,   Length=16),                           Nullable         ] public byte[]    GUID       { get; set; } // RAW(16)
		[Column(@"INT16_",    DbType="NUMBER (5,0)",   DataType=DataType.Decimal,  Length=22, Precision=5, Scale=0),     Nullable         ] public int?      INT16      { get; set; } // NUMBER (5,0)
		[Column(@"INT32_",    DbType="NUMBER (10,0)",  DataType=DataType.Decimal,  Length=22, Precision=10, Scale=0),    Nullable         ] public long?     INT32      { get; set; } // NUMBER (10,0)
		[Column(@"INT64_",    DbType="NUMBER (20,0)",  DataType=DataType.Decimal,  Length=22, Precision=20, Scale=0),    Nullable         ] public decimal?  INT64      { get; set; } // NUMBER (20,0)
		[Column(@"MONEY_",    DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),                           Nullable         ] public decimal?  MONEY      { get; set; } // NUMBER
		[Column(@"SBYTE_",    DbType="NUMBER (3,0)",   DataType=DataType.Decimal,  Length=22, Precision=3, Scale=0),     Nullable         ] public short?    SBYTE      { get; set; } // NUMBER (3,0)
		[Column(@"SINGLE_",   DbType="FLOAT(126)",     DataType=DataType.Decimal,  Length=22, Precision=126),            Nullable         ] public decimal?  SINGLE     { get; set; } // FLOAT(126)
		[Column(@"STREAM_",   DbType="BLOB",           DataType=DataType.Blob,     Length=4000),                         Nullable         ] public byte[]    STREAM     { get; set; } // BLOB
		[Column(@"STRING_",   DbType="NVARCHAR2(100)", DataType=DataType.NVarChar, Length=100),                          Nullable         ] public string    STRING     { get; set; } // NVARCHAR2(100)
		[Column(@"UINT16_",   DbType="NUMBER (5,0)",   DataType=DataType.Decimal,  Length=22, Precision=5, Scale=0),     Nullable         ] public int?      UINT16     { get; set; } // NUMBER (5,0)
		[Column(@"UINT32_",   DbType="NUMBER (10,0)",  DataType=DataType.Decimal,  Length=22, Precision=10, Scale=0),    Nullable         ] public long?     UINT32     { get; set; } // NUMBER (10,0)
		[Column(@"UINT64_",   DbType="NUMBER (20,0)",  DataType=DataType.Decimal,  Length=22, Precision=20, Scale=0),    Nullable         ] public decimal?  UINT64     { get; set; } // NUMBER (20,0)
		[Column(@"XML_",      DbType="XMLTYPE",        DataType=DataType.Xml,      Length=2000),                         Nullable         ] public string    XML        { get; set; } // XMLTYPE
	}

	[Table(Schema="TESTUSER", Name="DECIMALOVERFLOW")]
	public partial class DECIMALOVERFLOW
	{
		[Column(DbType="NUMBER (38,20)", DataType=DataType.Decimal, Length=22, Precision=38, Scale=20), Nullable] public decimal? DECIMAL1 { get; set; } // NUMBER (38,20)
		[Column(DbType="NUMBER (31,2)",  DataType=DataType.Decimal, Length=22, Precision=31, Scale=2),  Nullable] public decimal? DECIMAL2 { get; set; } // NUMBER (31,2)
		[Column(DbType="NUMBER (38,36)", DataType=DataType.Decimal, Length=22, Precision=38, Scale=36), Nullable] public decimal? DECIMAL3 { get; set; } // NUMBER (38,36)
		[Column(DbType="NUMBER (29,0)",  DataType=DataType.Decimal, Length=22, Precision=29, Scale=0),  Nullable] public decimal? DECIMAL4 { get; set; } // NUMBER (29,0)
		[Column(DbType="NUMBER (38,38)", DataType=DataType.Decimal, Length=22, Precision=38, Scale=38), Nullable] public decimal? DECIMAL5 { get; set; } // NUMBER (38,38)
	}

	[Table(Schema="TESTUSER", Name="DOCTOR")]
	public partial class DOCTOR
	{
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),  PrimaryKey, NotNull] public decimal PERSONID { get; set; } // NUMBER
		[Column(DbType="NVARCHAR2(100)", DataType=DataType.NVarChar, Length=100),             NotNull] public string  TAXONOMY { get; set; } // NVARCHAR2(100)

		#region Associations

		/// <summary>
		/// FK_DOCTOR_PERSON
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_DOCTOR_PERSON", BackReferenceName="DOCTOR")]
		public PERSON PERSON { get; set; }

		#endregion
	}

	[Table(Schema="TESTUSER", Name="GRANDCHILD")]
	public partial class GRANDCHILD
	{
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? PARENTID     { get; set; } // NUMBER
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? CHILDID      { get; set; } // NUMBER
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? GRANDCHILDID { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="INHERITANCECHILD")]
	public partial class INHERITANCECHILD
	{
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),  PrimaryKey,  NotNull] public decimal  INHERITANCECHILDID  { get; set; } // NUMBER
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),               NotNull] public decimal  INHERITANCEPARENTID { get; set; } // NUMBER
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),     Nullable         ] public decimal? TYPEDISCRIMINATOR   { get; set; } // NUMBER
		[Column(DbType="NVARCHAR2(100)", DataType=DataType.NVarChar, Length=100),    Nullable         ] public string   NAME                { get; set; } // NVARCHAR2(100)
	}

	[Table(Schema="TESTUSER", Name="INHERITANCEPARENT")]
	public partial class INHERITANCEPARENT
	{
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),  PrimaryKey,  NotNull] public decimal  INHERITANCEPARENTID { get; set; } // NUMBER
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),     Nullable         ] public decimal? TYPEDISCRIMINATOR   { get; set; } // NUMBER
		[Column(DbType="NVARCHAR2(100)", DataType=DataType.NVarChar, Length=100),    Nullable         ] public string   NAME                { get; set; } // NVARCHAR2(100)
	}

	[Table(Schema="TESTUSER", Name="ISSUE723TABLE")]
	public partial class ISSUE723TABLE
	{
		[Column(DbType="NUMBER",        DataType=DataType.Decimal, Length=22, Scale=0), PrimaryKey,  NotNull] public decimal ID          { get; set; } // NUMBER
		[Column(DbType="VARCHAR2(255)", DataType=DataType.VarChar, Length=255),            Nullable         ] public string  STRINGVALUE { get; set; } // VARCHAR2(255)
	}

	[Table(Schema="TESTUSER", Name="LINQDATATYPES")]
	public partial class LINQDATATYPE
	{
		[Column(DbType="NUMBER",        DataType=DataType.Decimal,   Length=22, Scale=0),               Nullable] public decimal?  ID             { get; set; } // NUMBER
		[Column(DbType="NUMBER (10,4)", DataType=DataType.Decimal,   Length=22, Precision=10, Scale=4), Nullable] public decimal?  MONEYVALUE     { get; set; } // NUMBER (10,4)
		[Column(DbType="TIMESTAMP(6)",  DataType=DataType.DateTime2, Length=11, Scale=6),               Nullable] public DateTime? DATETIMEVALUE  { get; set; } // TIMESTAMP(6)
		[Column(DbType="TIMESTAMP(6)",  DataType=DataType.DateTime2, Length=11, Scale=6),               Nullable] public DateTime? DATETIMEVALUE2 { get; set; } // TIMESTAMP(6)
		[Column(DbType="NUMBER",        DataType=DataType.Decimal,   Length=22, Scale=0),               Nullable] public decimal?  BOOLVALUE      { get; set; } // NUMBER
		[Column(DbType="RAW(16)",       DataType=DataType.Binary,    Length=16),                        Nullable] public byte[]    GUIDVALUE      { get; set; } // RAW(16)
		[Column(DbType="BLOB",          DataType=DataType.Blob,      Length=4000),                      Nullable] public byte[]    BINARYVALUE    { get; set; } // BLOB
		[Column(DbType="NUMBER",        DataType=DataType.Decimal,   Length=22, Scale=0),               Nullable] public decimal?  SMALLINTVALUE  { get; set; } // NUMBER
		[Column(DbType="NUMBER",        DataType=DataType.Decimal,   Length=22, Scale=0),               Nullable] public decimal?  INTVALUE       { get; set; } // NUMBER
		[Column(DbType="NUMBER (20,0)", DataType=DataType.Decimal,   Length=22, Precision=20, Scale=0), Nullable] public decimal?  BIGINTVALUE    { get; set; } // NUMBER (20,0)
		[Column(DbType="VARCHAR2(50)",  DataType=DataType.VarChar,   Length=50),                        Nullable] public string    STRINGVALUE    { get; set; } // VARCHAR2(50)
	}

	[Table(Schema="TESTUSER", Name="PARENT")]
	public partial class PARENT
	{
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? PARENTID { get; set; } // NUMBER
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22, Scale=0), Nullable] public decimal? VALUE1   { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="PARENT564")]
	public partial class PARENT564
	{
		[Column(DbType="NUMBER",        DataType=DataType.Decimal, Length=22, Scale=0), PrimaryKey,  NotNull] public decimal  ID          { get; set; } // NUMBER
		[Column(DbType="VARCHAR2(255)", DataType=DataType.VarChar, Length=255),            Nullable         ] public string   TYPE        { get; set; } // VARCHAR2(255)
		[Column(DbType="VARCHAR2(20)",  DataType=DataType.VarChar, Length=20),             Nullable         ] public string   STRINGVALUE { get; set; } // VARCHAR2(20)
		[Column(DbType="NUMBER",        DataType=DataType.Decimal, Length=22, Scale=0),    Nullable         ] public decimal? INTVALUE    { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="PATIENT")]
	public partial class PATIENT
	{
		[Column(DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),  PrimaryKey, NotNull] public decimal PERSONID  { get; set; } // NUMBER
		[Column(DbType="NVARCHAR2(512)", DataType=DataType.NVarChar, Length=512),             NotNull] public string  DIAGNOSIS { get; set; } // NVARCHAR2(512)

		#region Associations

		/// <summary>
		/// FK_PATIENT_PERSON
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_PATIENT_PERSON", BackReferenceName="PATIENT")]
		public PERSON PERSON { get; set; }

		#endregion
	}

	[Table(Schema="TESTUSER", Name="PERSON")]
	public partial class PERSON
	{
		[Column(DbType="NUMBER",       DataType=DataType.Decimal, Length=22), PrimaryKey,  NotNull] public decimal PERSONID   { get; set; } // NUMBER
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50),              NotNull] public string  FIRSTNAME  { get; set; } // VARCHAR2(50)
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50),              NotNull] public string  LASTNAME   { get; set; } // VARCHAR2(50)
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50),    Nullable         ] public string  MIDDLENAME { get; set; } // VARCHAR2(50)
		[Column(DbType="CHAR(1)",      DataType=DataType.Char,    Length=1),               NotNull] public char    GENDER     { get; set; } // CHAR(1)

		#region Associations

		/// <summary>
		/// FK_DOCTOR_PERSON_BackReference
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public DOCTOR DOCTOR { get; set; }

		/// <summary>
		/// FK_PATIENT_PERSON_BackReference
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public PATIENT PATIENT { get; set; }

		#endregion
	}

	[Table(Schema="TESTUSER", Name="SEQUENCETEST")]
	public partial class SEQUENCETEST
	{
		[Column(DbType="NUMBER",       DataType=DataType.Decimal, Length=22, Scale=0), PrimaryKey, NotNull] public decimal ID    { get; set; } // NUMBER
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50),                      NotNull] public string  VALUE { get; set; } // VARCHAR2(50)
	}

	[Table(Schema="TESTUSER", Name="STG_TRADE_INFORMATION")]
	public partial class STGTRADEINFORMATION
	{
		[Column(@"STG_TRADE_ID",          DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),   NotNull    ] public decimal   STGTRADEID          { get; set; } // NUMBER
		[Column(@"STG_TRADE_VERSION",     DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),   NotNull    ] public decimal   STGTRADEVERSION     { get; set; } // NUMBER
		[Column(@"INFORMATION_TYPE_ID",   DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),   NotNull    ] public decimal   INFORMATIONTYPEID   { get; set; } // NUMBER
		[Column(@"INFORMATION_TYPE_NAME", DbType="VARCHAR2(50)",   DataType=DataType.VarChar,  Length=50),      Nullable] public string    INFORMATIONTYPENAME { get; set; } // VARCHAR2(50)
		[Column(                          DbType="VARCHAR2(4000)", DataType=DataType.VarChar,  Length=4000),    Nullable] public string    VALUE               { get; set; } // VARCHAR2(4000)
		[Column(@"VALUE_AS_INTEGER",      DbType="NUMBER",         DataType=DataType.Decimal,  Length=22),      Nullable] public decimal?  VALUEASINTEGER      { get; set; } // NUMBER
		[Column(@"VALUE_AS_DATE",         DbType="DATE",           DataType=DataType.DateTime, Length=7),       Nullable] public DateTime? VALUEASDATE         { get; set; } // DATE
	}

	[Table(Schema="TESTUSER", Name="STRINGTEST")]
	public partial class STRINGTEST
	{
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50),    Nullable] public string STRINGVALUE1 { get; set; } // VARCHAR2(50)
		[Column(DbType="CHAR(50)",     DataType=DataType.Char,    Length=50),    Nullable] public string STRINGVALUE2 { get; set; } // CHAR(50)
		[Column(DbType="VARCHAR2(50)", DataType=DataType.VarChar, Length=50), NotNull    ] public string KEYVALUE     { get; set; } // VARCHAR2(50)
	}

	[Table(Schema="TESTUSER", Name="T_ENTITY")]
	public partial class TENTITY
	{
		[Column(@"ENTITY_ID", DbType="NUMBER",                       DataType=DataType.Decimal,   Length=22, Scale=0),              PrimaryKey,  NotNull] public decimal   ENTITYID { get; set; } // NUMBER
		[Column(              DbType="DATE",                         DataType=DataType.DateTime,  Length=7),                           Nullable         ] public DateTime? TIME     { get; set; } // DATE
		[Column(              DbType="INTERVAL DAY(3) TO SECOND(2)", DataType=DataType.Undefined, Length=11, Precision=3, Scale=2),    Nullable         ] public object    DURATION { get; set; } // INTERVAL DAY(3) TO SECOND(2)
	}

	[Table(Schema="TESTUSER", Name="TESTIDENTITY")]
	public partial class TESTIDENTITY
	{
		[Column(DbType="NUMBER", DataType=DataType.Decimal, Length=22), PrimaryKey, NotNull] public decimal ID { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="TESTMERGE1")]
	public partial class TESTMERGE1
	{
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                         PrimaryKey,  NotNull] public decimal         ID              { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD1          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD2          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD3          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD4          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD5          { get; set; } // NUMBER
		[Column(DbType="NUMBER (20,0)",               DataType=DataType.Decimal,        Length=22, Precision=20, Scale=0),     Nullable         ] public decimal?        FIELDINT64      { get; set; } // NUMBER (20,0)
		[Column(DbType="NUMBER (1,0)",                DataType=DataType.Decimal,        Length=22, Precision=1, Scale=0),      Nullable         ] public sbyte?          FIELDBOOLEAN    { get; set; } // NUMBER (1,0)
		[Column(DbType="VARCHAR2(20)",                DataType=DataType.VarChar,        Length=20),                            Nullable         ] public string          FIELDSTRING     { get; set; } // VARCHAR2(20)
		[Column(DbType="NVARCHAR2(40)",               DataType=DataType.NVarChar,       Length=40),                            Nullable         ] public string          FIELDNSTRING    { get; set; } // NVARCHAR2(40)
		[Column(DbType="CHAR(1)",                     DataType=DataType.Char,           Length=1),                             Nullable         ] public char?           FIELDCHAR       { get; set; } // CHAR(1)
		[Column(DbType="NCHAR(2)",                    DataType=DataType.NChar,          Length=2),                             Nullable         ] public string          FIELDNCHAR      { get; set; } // NCHAR(2)
		[Column(DbType="BINARY_FLOAT",                DataType=DataType.Single,         Length=4),                             Nullable         ] public float?          FIELDFLOAT      { get; set; } // BINARY_FLOAT
		[Column(DbType="BINARY_DOUBLE",               DataType=DataType.Double,         Length=8),                             Nullable         ] public double?         FIELDDOUBLE     { get; set; } // BINARY_DOUBLE
		[Column(DbType="DATE",                        DataType=DataType.DateTime,       Length=7),                             Nullable         ] public DateTime?       FIELDDATETIME   { get; set; } // DATE
		[Column(DbType="TIMESTAMP(6) WITH TIME ZONE", DataType=DataType.DateTimeOffset, Length=13, Scale=6),                   Nullable         ] public DateTimeOffset? FIELDDATETIME2  { get; set; } // TIMESTAMP(6) WITH TIME ZONE
		[Column(DbType="BLOB",                        DataType=DataType.Blob,           Length=4000),                          Nullable         ] public byte[]          FIELDBINARY     { get; set; } // BLOB
		[Column(DbType="RAW(16)",                     DataType=DataType.Binary,         Length=16),                            Nullable         ] public byte[]          FIELDGUID       { get; set; } // RAW(16)
		[Column(DbType="NUMBER (24,10)",              DataType=DataType.Decimal,        Length=22, Precision=24, Scale=10),    Nullable         ] public decimal?        FIELDDECIMAL    { get; set; } // NUMBER (24,10)
		[Column(DbType="VARCHAR2(20)",                DataType=DataType.VarChar,        Length=20),                            Nullable         ] public string          FIELDENUMSTRING { get; set; } // VARCHAR2(20)
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELDENUMNUMBER { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="TESTMERGE2")]
	public partial class TESTMERGE2
	{
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                         PrimaryKey,  NotNull] public decimal         ID              { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD1          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD2          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD3          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD4          { get; set; } // NUMBER
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELD5          { get; set; } // NUMBER
		[Column(DbType="NUMBER (20,0)",               DataType=DataType.Decimal,        Length=22, Precision=20, Scale=0),     Nullable         ] public decimal?        FIELDINT64      { get; set; } // NUMBER (20,0)
		[Column(DbType="NUMBER (1,0)",                DataType=DataType.Decimal,        Length=22, Precision=1, Scale=0),      Nullable         ] public sbyte?          FIELDBOOLEAN    { get; set; } // NUMBER (1,0)
		[Column(DbType="VARCHAR2(20)",                DataType=DataType.VarChar,        Length=20),                            Nullable         ] public string          FIELDSTRING     { get; set; } // VARCHAR2(20)
		[Column(DbType="NVARCHAR2(40)",               DataType=DataType.NVarChar,       Length=40),                            Nullable         ] public string          FIELDNSTRING    { get; set; } // NVARCHAR2(40)
		[Column(DbType="CHAR(1)",                     DataType=DataType.Char,           Length=1),                             Nullable         ] public char?           FIELDCHAR       { get; set; } // CHAR(1)
		[Column(DbType="NCHAR(2)",                    DataType=DataType.NChar,          Length=2),                             Nullable         ] public string          FIELDNCHAR      { get; set; } // NCHAR(2)
		[Column(DbType="BINARY_FLOAT",                DataType=DataType.Single,         Length=4),                             Nullable         ] public float?          FIELDFLOAT      { get; set; } // BINARY_FLOAT
		[Column(DbType="BINARY_DOUBLE",               DataType=DataType.Double,         Length=8),                             Nullable         ] public double?         FIELDDOUBLE     { get; set; } // BINARY_DOUBLE
		[Column(DbType="DATE",                        DataType=DataType.DateTime,       Length=7),                             Nullable         ] public DateTime?       FIELDDATETIME   { get; set; } // DATE
		[Column(DbType="TIMESTAMP(6) WITH TIME ZONE", DataType=DataType.DateTimeOffset, Length=13, Scale=6),                   Nullable         ] public DateTimeOffset? FIELDDATETIME2  { get; set; } // TIMESTAMP(6) WITH TIME ZONE
		[Column(DbType="BLOB",                        DataType=DataType.Blob,           Length=4000),                          Nullable         ] public byte[]          FIELDBINARY     { get; set; } // BLOB
		[Column(DbType="RAW(16)",                     DataType=DataType.Binary,         Length=16),                            Nullable         ] public byte[]          FIELDGUID       { get; set; } // RAW(16)
		[Column(DbType="NUMBER (24,10)",              DataType=DataType.Decimal,        Length=22, Precision=24, Scale=10),    Nullable         ] public decimal?        FIELDDECIMAL    { get; set; } // NUMBER (24,10)
		[Column(DbType="VARCHAR2(20)",                DataType=DataType.VarChar,        Length=20),                            Nullable         ] public string          FIELDENUMSTRING { get; set; } // VARCHAR2(20)
		[Column(DbType="NUMBER",                      DataType=DataType.Decimal,        Length=22),                            Nullable         ] public decimal?        FIELDENUMNUMBER { get; set; } // NUMBER
	}

	[Table(Schema="TESTUSER", Name="TESTTABLE")]
	public partial class TESTTABLE
	{
		[Column(DbType="NUMBER",        DataType=DataType.Decimal,   Length=22, Scale=0), PrimaryKey,  NotNull] public decimal   ID        { get; set; } // NUMBER
		[Column(DbType="VARCHAR2(50)",  DataType=DataType.VarChar,   Length=50),             Nullable         ] public string    FIELD1    { get; set; } // VARCHAR2(50)
		[Column(DbType="VARCHAR2(255)", DataType=DataType.VarChar,   Length=255),            Nullable         ] public string    FIELD2    { get; set; } // VARCHAR2(255)
		[Column(DbType="TIMESTAMP(6)",  DataType=DataType.DateTime2, Length=11, Scale=6),    Nullable         ] public DateTime? CREATEDON { get; set; } // TIMESTAMP(6)
	}

	[Table(Schema="TESTUSER", Name="T_TEST_USER")]
	public partial class TTESTUSER
	{
		[Column(@"USER_ID", DbType="NUMBER",        DataType=DataType.Decimal, Length=22),  PrimaryKey, NotNull] public decimal USERID { get; set; } // NUMBER
		[Column(            DbType="VARCHAR2(255)", DataType=DataType.VarChar, Length=255),             NotNull] public string  NAME   { get; set; } // VARCHAR2(255)

		#region Associations

		/// <summary>
		/// SYS_C0059918_BackReference
		/// </summary>
		[Association(ThisKey="USERID", OtherKey="USERID", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<TTESTUSERCONTRACT> SYSCs { get; set; }

		#endregion
	}

	[Table(Schema="TESTUSER", Name="T_TEST_USER_CONTRACT")]
	public partial class TTESTUSERCONTRACT
	{
		[Column(@"USER_CONTRACT_ID", DbType="NUMBER",        DataType=DataType.Decimal, Length=22),  PrimaryKey, NotNull] public decimal USERCONTRACTID { get; set; } // NUMBER
		[Column(@"USER_ID",          DbType="NUMBER",        DataType=DataType.Decimal, Length=22),              NotNull] public decimal USERID         { get; set; } // NUMBER
		[Column(@"CONTRACT_NO",      DbType="NUMBER",        DataType=DataType.Decimal, Length=22),              NotNull] public decimal CONTRACTNO     { get; set; } // NUMBER
		[Column(                     DbType="VARCHAR2(255)", DataType=DataType.VarChar, Length=255),             NotNull] public string  NAME           { get; set; } // VARCHAR2(255)

		#region Associations

		/// <summary>
		/// SYS_C0059918
		/// </summary>
		[Association(ThisKey="USERID", OtherKey="USERID", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="SYS_C0059918", BackReferenceName="SYSCs")]
		public TTESTUSER SYSC { get; set; }

		#endregion
	}

	public static partial class TestDataDBStoredProcedures
	{
		#region PERSONUPDATE

		public static int PERSONUPDATE(this DataConnection dataConnection, decimal? PPERSONID, string PFIRSTNAME, string PLASTNAME, string PMIDDLENAME, string PGENDER)
		{
			return dataConnection.ExecuteProc("TESTUSER.PERSON_UPDATE",
				new DataParameter("PPERSONID",   PPERSONID,   DataType.Decimal),
				new DataParameter("PFIRSTNAME",  PFIRSTNAME,  DataType.NVarChar),
				new DataParameter("PLASTNAME",   PLASTNAME,   DataType.NVarChar),
				new DataParameter("PMIDDLENAME", PMIDDLENAME, DataType.NVarChar),
				new DataParameter("PGENDER",     PGENDER,     DataType.Char));
		}

		#endregion

		#region PERSONDELETE

		public static int PERSONDELETE(this DataConnection dataConnection, decimal? PPERSONID)
		{
			return dataConnection.ExecuteProc("TESTUSER.PERSON_DELETE",
				new DataParameter("PPERSONID", PPERSONID, DataType.Decimal));
		}

		#endregion

		#region OUTREFTEST

		public static int OUTREFTEST(this DataConnection dataConnection, decimal? PID, out decimal? POUTPUTID, ref decimal? PINPUTOUTPUTID, string PSTR, out string POUTPUTSTR, ref string PINPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("TESTUSER.OUTREFTEST",
				new DataParameter("PID",             PID,             DataType.Decimal),
				new DataParameter("PINPUTOUTPUTID",  PINPUTOUTPUTID,  DataType.Decimal)  { Direction = ParameterDirection.InputOutput, Size = 22 },
				new DataParameter("PSTR",            PSTR,            DataType.NVarChar),
				new DataParameter("PINPUTOUTPUTSTR", PINPUTOUTPUTSTR, DataType.NVarChar) { Direction = ParameterDirection.InputOutput });

			POUTPUTID       = Converter.ChangeTypeTo<decimal?>(((IDbDataParameter)dataConnection.Command.Parameters["POUTPUTID"]).      Value);
			PINPUTOUTPUTID  = Converter.ChangeTypeTo<decimal?>(((IDbDataParameter)dataConnection.Command.Parameters["PINPUTOUTPUTID"]). Value);
			POUTPUTSTR      = Converter.ChangeTypeTo<string>  (((IDbDataParameter)dataConnection.Command.Parameters["POUTPUTSTR"]).     Value);
			PINPUTOUTPUTSTR = Converter.ChangeTypeTo<string>  (((IDbDataParameter)dataConnection.Command.Parameters["PINPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion

		#region OUTREFENUMTEST

		public static int OUTREFENUMTEST(this DataConnection dataConnection, string PSTR, out string POUTPUTSTR, ref string PINPUTOUTPUTSTR)
		{
			var ret = dataConnection.ExecuteProc("TESTUSER.OUTREFENUMTEST",
				new DataParameter("PSTR",            PSTR,            DataType.NVarChar),
				new DataParameter("PINPUTOUTPUTSTR", PINPUTOUTPUTSTR, DataType.NVarChar) { Direction = ParameterDirection.InputOutput });

			POUTPUTSTR      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["POUTPUTSTR"]).     Value);
			PINPUTOUTPUTSTR = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["PINPUTOUTPUTSTR"]).Value);

			return ret;
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static ALLTYPE Find(this ITable<ALLTYPE> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static BINARYDATA Find(this ITable<BINARYDATA> table, decimal BINARYDATAID)
		{
			return table.FirstOrDefault(t =>
				t.BINARYDATAID == BINARYDATAID);
		}

		public static DATATYPETEST Find(this ITable<DATATYPETEST> table, decimal DATATYPEID)
		{
			return table.FirstOrDefault(t =>
				t.DATATYPEID == DATATYPEID);
		}

		public static DOCTOR Find(this ITable<DOCTOR> table, decimal PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static INHERITANCECHILD Find(this ITable<INHERITANCECHILD> table, decimal INHERITANCECHILDID)
		{
			return table.FirstOrDefault(t =>
				t.INHERITANCECHILDID == INHERITANCECHILDID);
		}

		public static INHERITANCEPARENT Find(this ITable<INHERITANCEPARENT> table, decimal INHERITANCEPARENTID)
		{
			return table.FirstOrDefault(t =>
				t.INHERITANCEPARENTID == INHERITANCEPARENTID);
		}

		public static ISSUE723TABLE Find(this ITable<ISSUE723TABLE> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static PARENT564 Find(this ITable<PARENT564> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static PATIENT Find(this ITable<PATIENT> table, decimal PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static PERSON Find(this ITable<PERSON> table, decimal PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static SEQUENCETEST Find(this ITable<SEQUENCETEST> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TENTITY Find(this ITable<TENTITY> table, decimal ENTITYID)
		{
			return table.FirstOrDefault(t =>
				t.ENTITYID == ENTITYID);
		}

		public static TESTIDENTITY Find(this ITable<TESTIDENTITY> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTMERGE1 Find(this ITable<TESTMERGE1> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTMERGE2 Find(this ITable<TESTMERGE2> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTTABLE Find(this ITable<TESTTABLE> table, decimal ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TTESTUSER Find(this ITable<TTESTUSER> table, decimal USERID)
		{
			return table.FirstOrDefault(t =>
				t.USERID == USERID);
		}

		public static TTESTUSERCONTRACT Find(this ITable<TTESTUSERCONTRACT> table, decimal USERCONTRACTID)
		{
			return table.FirstOrDefault(t =>
				t.USERCONTRACTID == USERCONTRACTID);
		}
	}
}
