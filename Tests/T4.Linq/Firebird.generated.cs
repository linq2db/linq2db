//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.Mapping;

namespace FirebirdDataContext
{
	/// <summary>
	/// Database       : TestData
	/// Data Source    : DBHost
	/// Server Version : WI-V2.5.1.26351 Firebird 2.5/tcp (DBHost)/P12
	/// </summary>
	public partial class TestDataDB : LinqToDB.Data.DataConnection
	{
		public ITable<ALLTYPE>           ALLTYPES           { get { return this.GetTable<ALLTYPE>(); } }
		public ITable<CamelCaseName>     CamelCaseNames     { get { return this.GetTable<CamelCaseName>(); } }
		public ITable<CHILD>             Children           { get { return this.GetTable<CHILD>(); } }
		public ITable<DATATYPETEST>      DATATYPETESTs      { get { return this.GetTable<DATATYPETEST>(); } }
		public ITable<DOCTOR>            DOCTORs            { get { return this.GetTable<DOCTOR>(); } }
		public ITable<DUAL>              DUALs              { get { return this.GetTable<DUAL>(); } }
		public ITable<GRANDCHILD>        GRANDCHILDs        { get { return this.GetTable<GRANDCHILD>(); } }
		public ITable<INHERITANCECHILD>  INHERITANCECHILDs  { get { return this.GetTable<INHERITANCECHILD>(); } }
		public ITable<INHERITANCEPARENT> INHERITANCEPARENTs { get { return this.GetTable<INHERITANCEPARENT>(); } }
		public ITable<LINQDATATYPE>      LINQDATATYPES      { get { return this.GetTable<LINQDATATYPE>(); } }
		public ITable<PARENT>            PARENTs            { get { return this.GetTable<PARENT>(); } }
		public ITable<Parent564>         Parent564          { get { return this.GetTable<Parent564>(); } }
		public ITable<PARENT564>         PARENT564          { get { return this.GetTable<PARENT564>(); } }
		public ITable<PATIENT>           PATIENTs           { get { return this.GetTable<PATIENT>(); } }
		public ITable<PERSON>            People             { get { return this.GetTable<PERSON>(); } }
		public ITable<PERSONVIEW>        PERSONVIEWs        { get { return this.GetTable<PERSONVIEW>(); } }
		public ITable<SEQUENCETEST>      SEQUENCETESTs      { get { return this.GetTable<SEQUENCETEST>(); } }
		public ITable<TESTIDENTITY>      TESTIDENTITies     { get { return this.GetTable<TESTIDENTITY>(); } }
		public ITable<TESTMERGE1>        TESTMERGE1         { get { return this.GetTable<TESTMERGE1>(); } }
		public ITable<TESTMERGE2>        TESTMERGE2         { get { return this.GetTable<TESTMERGE2>(); } }
		public ITable<TestTable>         TestTables         { get { return this.GetTable<TestTable>(); } }
		public ITable<TESTTABLE>         TESTTABLEs         { get { return this.GetTable<TESTTABLE>(); } }

		public TestDataDB()
		{
			InitDataContext();
		}

		public TestDataDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("ALLTYPES")]
	public partial class ALLTYPE
	{
		[Column(DbType="integer",         DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            PrimaryKey,  NotNull] public int       ID                { get; set; } // integer
		[Column(DbType="bigint",          DataType=DataType.Int64,    Length=8, Precision=0, Scale=0),               Nullable         ] public long?     BIGINTDATATYPE    { get; set; } // bigint
		[Column(DbType="smallint",        DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),               Nullable         ] public short?    SMALLINTDATATYPE  { get; set; } // smallint
		[Column(DbType="decimal(18,0)",   DataType=DataType.Decimal,  Length=8, Precision=18, Scale=0),              Nullable         ] public decimal?  DECIMALDATATYPE   { get; set; } // decimal(18,0)
		[Column(DbType="integer",         DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      INTDATATYPE       { get; set; } // integer
		[Column(DbType="float",           DataType=DataType.Single,   Length=4, Precision=0, Scale=0),               Nullable         ] public float?    FLOATDATATYPE     { get; set; } // float
		[Column(DbType="float",           DataType=DataType.Single,   Length=4, Precision=0, Scale=0),               Nullable         ] public float?    REALDATATYPE      { get; set; } // float
		[Column(DbType="timestamp",       DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? TIMESTAMPDATATYPE { get; set; } // timestamp
		[Column(DbType="char(1)",         DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     CHARDATATYPE      { get; set; } // char(1)
		[Column(DbType="char(20)",        DataType=DataType.NChar,    Length=20, Precision=0, Scale=0),              Nullable         ] public string    CHAR20DATATYPE    { get; set; } // char(20)
		[Column(DbType="varchar(20)",     DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    VARCHARDATATYPE   { get; set; } // varchar(20)
		[Column(DbType="blob sub_type 1", DataType=DataType.Text,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public string    TEXTDATATYPE      { get; set; } // blob sub_type 1
		[Column(DbType="char(20)",        DataType=DataType.NChar,    Length=20, Precision=0, Scale=0),              Nullable         ] public string    NCHARDATATYPE     { get; set; } // char(20)
		[Column(DbType="varchar(20)",     DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    NVARCHARDATATYPE  { get; set; } // varchar(20)
		[Column(DbType="blob",            DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    BLOBDATATYPE      { get; set; } // blob
	}

	[Table("\"CamelCaseName\"")]
	public partial class CamelCaseName
	{
		[Column(@"\""Id\""",     DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey,  NotNull] public int    Id    { get; set; } // integer
		[Column(                 DbType="varchar(20)", DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),    Nullable         ] public string NAME1 { get; set; } // varchar(20)
		[Column(@"\""Name2\""",  DbType="varchar(20)", DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),    Nullable         ] public string Name2 { get; set; } // varchar(20)
		[Column(                 DbType="varchar(20)", DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),    Nullable         ] public string NAME3 { get; set; } // varchar(20)
		[Column(@"\""_NAME4\""", DbType="varchar(20)", DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),    Nullable         ] public string NAME4 { get; set; } // varchar(20)
		[Column(@"\""NAME 5\""", DbType="varchar(20)", DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),    Nullable         ] public string NAME5 { get; set; } // varchar(20)
	}

	[Table("CHILD")]
	public partial class CHILD
	{
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? PARENTID { get; set; } // integer
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? CHILDID  { get; set; } // integer
	}

	[Table("DATATYPETEST")]
	public partial class DATATYPETEST
	{
		[Column(              DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            PrimaryKey,  NotNull] public int       DATATYPEID { get; set; } // integer
		[Column(@"BINARY_",   DbType="blob",             DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    BINARY     { get; set; } // blob
		[Column(@"BOOLEAN_",  DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     BOOLEAN    { get; set; } // char(1)
		[Column(@"BYTE_",     DbType="smallint",         DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),               Nullable         ] public short?    BYTE       { get; set; } // smallint
		[Column(@"BYTES_",    DbType="blob",             DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    BYTES      { get; set; } // blob
		[Column(@"CHAR_",     DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     CHAR       { get; set; } // char(1)
		[Column(@"DATETIME_", DbType="timestamp",        DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? DATETIME   { get; set; } // timestamp
		[Column(@"DECIMAL_",  DbType="decimal(10,2)",    DataType=DataType.Decimal,  Length=8, Precision=10, Scale=2),              Nullable         ] public decimal?  DECIMAL    { get; set; } // decimal(10,2)
		[Column(@"DOUBLE_",   DbType="double precision", DataType=DataType.Double,   Length=8, Precision=0, Scale=0),               Nullable         ] public double?   DOUBLE     { get; set; } // double precision
		[Column(@"GUID_",     DbType="char(38)",         DataType=DataType.NChar,    Length=38, Precision=0, Scale=0),              Nullable         ] public string    GUID       { get; set; } // char(38)
		[Column(@"INT16_",    DbType="smallint",         DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),               Nullable         ] public short?    INT16      { get; set; } // smallint
		[Column(@"INT32_",    DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      INT32      { get; set; } // integer
		[Column(@"INT64_",    DbType="numeric(11,0)",    DataType=DataType.Decimal,  Length=8, Precision=11, Scale=0),              Nullable         ] public decimal?  INT64      { get; set; } // numeric(11,0)
		[Column(@"MONEY_",    DbType="decimal(18,4)",    DataType=DataType.Decimal,  Length=8, Precision=18, Scale=4),              Nullable         ] public decimal?  MONEY      { get; set; } // decimal(18,4)
		[Column(@"SBYTE_",    DbType="smallint",         DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),               Nullable         ] public short?    SBYTE      { get; set; } // smallint
		[Column(@"SINGLE_",   DbType="float",            DataType=DataType.Single,   Length=4, Precision=0, Scale=0),               Nullable         ] public float?    SINGLE     { get; set; } // float
		[Column(@"STREAM_",   DbType="blob",             DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    STREAM     { get; set; } // blob
		[Column(@"STRING_",   DbType="varchar(50)",      DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),              Nullable         ] public string    STRING     { get; set; } // varchar(50)
		[Column(@"UINT16_",   DbType="smallint",         DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),               Nullable         ] public short?    UINT16     { get; set; } // smallint
		[Column(@"UINT32_",   DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      UINT32     { get; set; } // integer
		[Column(@"UINT64_",   DbType="numeric(11,0)",    DataType=DataType.Decimal,  Length=8, Precision=11, Scale=0),              Nullable         ] public decimal?  UINT64     { get; set; } // numeric(11,0)
		[Column(@"XML_",      DbType="char(1000)",       DataType=DataType.NChar,    Length=1000, Precision=0, Scale=0),            Nullable         ] public string    XML        { get; set; } // char(1000)
	}

	[Table("DOCTOR")]
	public partial class DOCTOR
	{
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey, NotNull] public int    PERSONID { get; set; } // integer
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),             NotNull] public string TAXONOMY { get; set; } // varchar(50)

		#region Associations

		/// <summary>
		/// FK_DOCTOR_PERSON
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_DOCTOR_PERSON", BackReferenceName="DOCTOR")]
		public PERSON PERSON { get; set; }

		#endregion
	}

	[Table("DUAL")]
	public partial class DUAL
	{
		[Column(DbType="varchar(10)", DataType=DataType.NVarChar, Length=10, Precision=0, Scale=0), Nullable] public string DUMMY { get; set; } // varchar(10)
	}

	[Table("GRANDCHILD")]
	public partial class GRANDCHILD
	{
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? PARENTID     { get; set; } // integer
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? CHILDID      { get; set; } // integer
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? GRANDCHILDID { get; set; } // integer
	}

	[Table("INHERITANCECHILD")]
	public partial class INHERITANCECHILD
	{
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey,  NotNull] public int    INHERITANCECHILDID  { get; set; } // integer
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               NotNull] public int    INHERITANCEPARENTID { get; set; } // integer
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),     Nullable         ] public int?   TYPEDISCRIMINATOR   { get; set; } // integer
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),    Nullable         ] public string NAME                { get; set; } // varchar(50)
	}

	[Table("INHERITANCEPARENT")]
	public partial class INHERITANCEPARENT
	{
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey,  NotNull] public int    INHERITANCEPARENTID { get; set; } // integer
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),     Nullable         ] public int?   TYPEDISCRIMINATOR   { get; set; } // integer
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),    Nullable         ] public string NAME                { get; set; } // varchar(50)
	}

	[Table("LINQDATATYPES")]
	public partial class LINQDATATYPE
	{
		[Column(DbType="integer",       DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            Nullable] public int?      ID             { get; set; } // integer
		[Column(DbType="decimal(10,4)", DataType=DataType.Decimal,  Length=8, Precision=10, Scale=4),           Nullable] public decimal?  MONEYVALUE     { get; set; } // decimal(10,4)
		[Column(DbType="timestamp",     DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),            Nullable] public DateTime? DATETIMEVALUE  { get; set; } // timestamp
		[Column(DbType="timestamp",     DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),            Nullable] public DateTime? DATETIMEVALUE2 { get; set; } // timestamp
		[Column(DbType="char(1)",       DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),            Nullable] public char?     BOOLVALUE      { get; set; } // char(1)
		[Column(DbType="char(38)",      DataType=DataType.NChar,    Length=38, Precision=0, Scale=0),           Nullable] public string    GUIDVALUE      { get; set; } // char(38)
		[Column(DbType="blob",          DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0), Nullable] public byte[]    BINARYVALUE    { get; set; } // blob
		[Column(DbType="smallint",      DataType=DataType.Int16,    Length=2, Precision=0, Scale=0),            Nullable] public short?    SMALLINTVALUE  { get; set; } // smallint
		[Column(DbType="integer",       DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            Nullable] public int?      INTVALUE       { get; set; } // integer
		[Column(DbType="bigint",        DataType=DataType.Int64,    Length=8, Precision=0, Scale=0),            Nullable] public long?     BIGINTVALUE    { get; set; } // bigint
		[Column(DbType="varchar(50)",   DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),           Nullable] public string    STRINGVALUE    { get; set; } // varchar(50)
	}

	[Table("PARENT")]
	public partial class PARENT
	{
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? PARENTID { get; set; } // integer
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), Nullable] public int? VALUE1   { get; set; } // integer
	}

	[Table("\"Parent564\"")]
	public partial class Parent564
	{
		[Column(@"\""Id\""",          DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),   PrimaryKey,  NotNull] public int    Id          { get; set; } // integer
		[Column(@"\""Type\""",        DbType="varchar(255)", DataType=DataType.NVarChar, Length=255, Precision=0, Scale=0),    Nullable         ] public string Type        { get; set; } // varchar(255)
		[Column(@"\""StringValue\""", DbType="varchar(20)",  DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),     Nullable         ] public string StringValue { get; set; } // varchar(20)
		[Column(@"\""IntValue\""",    DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),      Nullable         ] public int?   IntValue    { get; set; } // integer
	}

	[Table("PARENT564")]
	public partial class PARENT564
	{
		[Column(DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),   PrimaryKey,  NotNull] public int    ID          { get; set; } // integer
		[Column(DbType="varchar(255)", DataType=DataType.NVarChar, Length=255, Precision=0, Scale=0),    Nullable         ] public string TYPE        { get; set; } // varchar(255)
		[Column(DbType="varchar(20)",  DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),     Nullable         ] public string STRINGVALUE { get; set; } // varchar(20)
		[Column(DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),      Nullable         ] public int?   INTVALUE    { get; set; } // integer
	}

	[Table("PATIENT")]
	public partial class PATIENT
	{
		[Column(DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),   PrimaryKey, NotNull] public int    PERSONID  { get; set; } // integer
		[Column(DbType="varchar(256)", DataType=DataType.NVarChar, Length=256, Precision=0, Scale=0),             NotNull] public string DIAGNOSIS { get; set; } // varchar(256)

		#region Associations

		/// <summary>
		/// INTEG_16953
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="INTEG_16953", BackReferenceName="INTEG")]
		public PERSON INTEG { get; set; }

		#endregion
	}

	[Table("PERSON")]
	public partial class PERSON
	{
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey,  NotNull] public int    PERSONID   { get; set; } // integer
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),              NotNull] public string FIRSTNAME  { get; set; } // varchar(50)
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),              NotNull] public string LASTNAME   { get; set; } // varchar(50)
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),    Nullable         ] public string MIDDLENAME { get; set; } // varchar(50)
		[Column(DbType="char(1)",     DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               NotNull] public char   GENDER     { get; set; } // char(1)

		#region Associations

		/// <summary>
		/// FK_DOCTOR_PERSON_BackReference
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public DOCTOR DOCTOR { get; set; }

		/// <summary>
		/// INTEG_16953_BackReference
		/// </summary>
		[Association(ThisKey="PERSONID", OtherKey="PERSONID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public PATIENT INTEG { get; set; }

		#endregion
	}

	[Table("PERSONVIEW", IsView=true)]
	public partial class PERSONVIEW
	{
		[Column(DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  Nullable] public int?   PERSONID   { get; set; } // integer
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0), Nullable] public string FIRSTNAME  { get; set; } // varchar(50)
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0), Nullable] public string LASTNAME   { get; set; } // varchar(50)
		[Column(DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0), Nullable] public string MIDDLENAME { get; set; } // varchar(50)
		[Column(DbType="char(1)",     DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),  Nullable] public char?  GENDER     { get; set; } // char(1)
	}

	[Table("SEQUENCETEST")]
	public partial class SEQUENCETEST
	{
		[Column(           DbType="integer",     DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),  PrimaryKey, NotNull] public int    ID    { get; set; } // integer
		[Column(@"VALUE_", DbType="varchar(50)", DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),             NotNull] public string VALUE { get; set; } // varchar(50)
	}

	[Table("TESTIDENTITY")]
	public partial class TESTIDENTITY
	{
		[Column(DbType="integer", DataType=DataType.Int32, Length=4, Precision=0, Scale=0), PrimaryKey, NotNull] public int ID { get; set; } // integer
	}

	[Table("TESTMERGE1")]
	public partial class TESTMERGE1
	{
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            PrimaryKey,  NotNull] public int       ID              { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD1          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD2          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD3          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD4          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD5          { get; set; } // integer
		[Column(DbType="bigint",           DataType=DataType.Int64,    Length=8, Precision=0, Scale=0),               Nullable         ] public long?     FIELDINT64      { get; set; } // bigint
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDBOOLEAN    { get; set; } // char(1)
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDSTRING     { get; set; } // varchar(20)
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDNSTRING    { get; set; } // varchar(20)
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDCHAR       { get; set; } // char(1)
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDNCHAR      { get; set; } // char(1)
		[Column(DbType="float",            DataType=DataType.Single,   Length=4, Precision=0, Scale=0),               Nullable         ] public float?    FIELDFLOAT      { get; set; } // float
		[Column(DbType="double precision", DataType=DataType.Double,   Length=8, Precision=0, Scale=0),               Nullable         ] public double?   FIELDDOUBLE     { get; set; } // double precision
		[Column(DbType="timestamp",        DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDDATETIME   { get; set; } // timestamp
		[Column(DbType="blob",             DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    FIELDBINARY     { get; set; } // blob
		[Column(DbType="char(38)",         DataType=DataType.NChar,    Length=38, Precision=0, Scale=0),              Nullable         ] public string    FIELDGUID       { get; set; } // char(38)
		[Column(DbType="decimal(18,10)",   DataType=DataType.Decimal,  Length=8, Precision=18, Scale=10),             Nullable         ] public decimal?  FIELDDECIMAL    { get; set; } // decimal(18,10)
		[Column(DbType="date",             DataType=DataType.Date,     Length=4, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDDATE       { get; set; } // date
		[Column(DbType="timestamp",        DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDTIME       { get; set; } // timestamp
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDENUMSTRING { get; set; } // varchar(20)
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELDENUMNUMBER { get; set; } // integer
	}

	[Table("TESTMERGE2")]
	public partial class TESTMERGE2
	{
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),            PrimaryKey,  NotNull] public int       ID              { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD1          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD2          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD3          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD4          { get; set; } // integer
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELD5          { get; set; } // integer
		[Column(DbType="bigint",           DataType=DataType.Int64,    Length=8, Precision=0, Scale=0),               Nullable         ] public long?     FIELDINT64      { get; set; } // bigint
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDBOOLEAN    { get; set; } // char(1)
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDSTRING     { get; set; } // varchar(20)
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDNSTRING    { get; set; } // varchar(20)
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDCHAR       { get; set; } // char(1)
		[Column(DbType="char(1)",          DataType=DataType.NChar,    Length=1, Precision=0, Scale=0),               Nullable         ] public char?     FIELDNCHAR      { get; set; } // char(1)
		[Column(DbType="float",            DataType=DataType.Single,   Length=4, Precision=0, Scale=0),               Nullable         ] public float?    FIELDFLOAT      { get; set; } // float
		[Column(DbType="double precision", DataType=DataType.Double,   Length=8, Precision=0, Scale=0),               Nullable         ] public double?   FIELDDOUBLE     { get; set; } // double precision
		[Column(DbType="timestamp",        DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDDATETIME   { get; set; } // timestamp
		[Column(DbType="blob",             DataType=DataType.Blob,     Length=int.MaxValue, Precision=0, Scale=0),    Nullable         ] public byte[]    FIELDBINARY     { get; set; } // blob
		[Column(DbType="char(38)",         DataType=DataType.NChar,    Length=38, Precision=0, Scale=0),              Nullable         ] public string    FIELDGUID       { get; set; } // char(38)
		[Column(DbType="decimal(18,10)",   DataType=DataType.Decimal,  Length=8, Precision=18, Scale=10),             Nullable         ] public decimal?  FIELDDECIMAL    { get; set; } // decimal(18,10)
		[Column(DbType="date",             DataType=DataType.Date,     Length=4, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDDATE       { get; set; } // date
		[Column(DbType="timestamp",        DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),               Nullable         ] public DateTime? FIELDTIME       { get; set; } // timestamp
		[Column(DbType="varchar(20)",      DataType=DataType.NVarChar, Length=20, Precision=0, Scale=0),              Nullable         ] public string    FIELDENUMSTRING { get; set; } // varchar(20)
		[Column(DbType="integer",          DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),               Nullable         ] public int?      FIELDENUMNUMBER { get; set; } // integer
	}

	[Table("\"TestTable\"")]
	public partial class TestTable
	{
		[Column(                    DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),   PrimaryKey,  NotNull] public int       ID        { get; set; } // integer
		[Column(@"\""Field1\""",    DbType="varchar(50)",  DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),     Nullable         ] public string    Field1    { get; set; } // varchar(50)
		[Column(@"\""Field2\""",    DbType="varchar(255)", DataType=DataType.NVarChar, Length=255, Precision=0, Scale=0),    Nullable         ] public string    Field2    { get; set; } // varchar(255)
		[Column(@"\""CreatedOn\""", DbType="timestamp",    DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),      Nullable         ] public DateTime? CreatedOn { get; set; } // timestamp
	}

	[Table("TESTTABLE")]
	public partial class TESTTABLE
	{
		[Column(DbType="integer",      DataType=DataType.Int32,    Length=4, Precision=0, Scale=0),   PrimaryKey,  NotNull] public int       ID        { get; set; } // integer
		[Column(DbType="varchar(50)",  DataType=DataType.NVarChar, Length=50, Precision=0, Scale=0),     Nullable         ] public string    FIELD1    { get; set; } // varchar(50)
		[Column(DbType="varchar(255)", DataType=DataType.NVarChar, Length=255, Precision=0, Scale=0),    Nullable         ] public string    FIELD2    { get; set; } // varchar(255)
		[Column(DbType="timestamp",    DataType=DataType.DateTime, Length=8, Precision=0, Scale=0),      Nullable         ] public DateTime? CREATEDON { get; set; } // timestamp
	}

	public static partial class TestDataDBStoredProcedures
	{
		#region OUTREFENUMTEST

		public static IEnumerable<OUTREFENUMTESTResult> OUTREFENUMTEST(this DataConnection dataConnection, string STR, string IN_INPUTOUTPUTSTR, out string INPUTOUTPUTSTR, out string OUTPUTSTR)
		{
			var ret = dataConnection.QueryProc<OUTREFENUMTESTResult>("OUTREFENUMTEST",
				new DataParameter("STR",               STR,               DataType.NVarChar),
				new DataParameter("IN_INPUTOUTPUTSTR", IN_INPUTOUTPUTSTR, DataType.NVarChar));

			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);
			OUTPUTSTR      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);

			return ret;
		}

		public partial class OUTREFENUMTESTResult
		{
			public string INPUTOUTPUTSTR { get; set; }
			public string OUTPUTSTR      { get; set; }
		}

		#endregion

		#region OUTREFTEST

		public static IEnumerable<OUTREFTESTResult> OUTREFTEST(this DataConnection dataConnection, int? ID, int? IN_INPUTOUTPUTID, string STR, string IN_INPUTOUTPUTSTR, out int? INPUTOUTPUTID, out string INPUTOUTPUTSTR, out int? OUTPUTID, out string OUTPUTSTR)
		{
			var ret = dataConnection.QueryProc<OUTREFTESTResult>("OUTREFTEST",
				new DataParameter("ID",                ID,                DataType.Int32),
				new DataParameter("IN_INPUTOUTPUTID",  IN_INPUTOUTPUTID,  DataType.Int32),
				new DataParameter("STR",               STR,               DataType.NVarChar),
				new DataParameter("IN_INPUTOUTPUTSTR", IN_INPUTOUTPUTSTR, DataType.NVarChar));

			INPUTOUTPUTID  = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTID"]). Value);
			INPUTOUTPUTSTR = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["INPUTOUTPUTSTR"]).Value);
			OUTPUTID       = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTID"]).      Value);
			OUTPUTSTR      = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTR"]).     Value);

			return ret;
		}

		public partial class OUTREFTESTResult
		{
			public int?   INPUTOUTPUTID  { get; set; }
			public string INPUTOUTPUTSTR { get; set; }
			public int?   OUTPUTID       { get; set; }
			public string OUTPUTSTR      { get; set; }
		}

		#endregion

		#region PATIENTSELECTALL

		public static IEnumerable<PATIENTSELECTALLResult> PATIENTSELECTALL(this DataConnection dataConnection, out int? PERSONID, out string FIRSTNAME, out string LASTNAME, out string MIDDLENAME, out char? GENDER, out string DIAGNOSIS)
		{
			var ret = dataConnection.QueryProc<PATIENTSELECTALLResult>("PATIENT_SELECTALL");

			PERSONID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).  Value);
			FIRSTNAME  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["FIRSTNAME"]). Value);
			LASTNAME   = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["LASTNAME"]).  Value);
			MIDDLENAME = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["MIDDLENAME"]).Value);
			GENDER     = Converter.ChangeTypeTo<char?> (((IDbDataParameter)dataConnection.Command.Parameters["GENDER"]).    Value);
			DIAGNOSIS  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["DIAGNOSIS"]). Value);

			return ret;
		}

		public partial class PATIENTSELECTALLResult
		{
			public int?   PERSONID   { get; set; }
			public string FIRSTNAME  { get; set; }
			public string LASTNAME   { get; set; }
			public string MIDDLENAME { get; set; }
			public string GENDER     { get; set; }
			public string DIAGNOSIS  { get; set; }
		}

		#endregion

		#region PATIENTSELECTBYNAME

		public static IEnumerable<PATIENTSELECTBYNAMEResult> PATIENTSELECTBYNAME(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME, out int? PERSONID, out string MIDDLENAME, out char? GENDER, out string DIAGNOSIS)
		{
			var ret = dataConnection.QueryProc<PATIENTSELECTBYNAMEResult>("PATIENT_SELECTBYNAME",
				new DataParameter("FIRSTNAME", FIRSTNAME, DataType.NVarChar),
				new DataParameter("LASTNAME",  LASTNAME,  DataType.NVarChar));

			PERSONID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).  Value);
			MIDDLENAME = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["MIDDLENAME"]).Value);
			GENDER     = Converter.ChangeTypeTo<char?> (((IDbDataParameter)dataConnection.Command.Parameters["GENDER"]).    Value);
			DIAGNOSIS  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["DIAGNOSIS"]). Value);

			return ret;
		}

		public partial class PATIENTSELECTBYNAMEResult
		{
			public int?   PERSONID   { get; set; }
			public string MIDDLENAME { get; set; }
			public string GENDER     { get; set; }
			public string DIAGNOSIS  { get; set; }
		}

		#endregion

		#region PERSONDELETE

		public static int PERSONDELETE(this DataConnection dataConnection, int? PERSONID)
		{
			return dataConnection.ExecuteProc("PERSON_DELETE",
				new DataParameter("PERSONID", PERSONID, DataType.Int32));
		}

		#endregion

		#region PERSONINSERT

		public static IEnumerable<PERSONINSERTResult> PERSONINSERT(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER, out int? PERSONID)
		{
			var ret = dataConnection.QueryProc<PERSONINSERTResult>("PERSON_INSERT",
				new DataParameter("FIRSTNAME",  FIRSTNAME,  DataType.NVarChar),
				new DataParameter("LASTNAME",   LASTNAME,   DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",     GENDER,     DataType.NChar));

			PERSONID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).Value);

			return ret;
		}

		public partial class PERSONINSERTResult
		{
			public int? PERSONID { get; set; }
		}

		#endregion

		#region PERSONINSERTOUTPUTPARAMETER

		public static IEnumerable<PERSONINSERTOUTPUTPARAMETERResult> PERSONINSERTOUTPUTPARAMETER(this DataConnection dataConnection, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER, out int? PERSONID)
		{
			var ret = dataConnection.QueryProc<PERSONINSERTOUTPUTPARAMETERResult>("PERSON_INSERT_OUTPUTPARAMETER",
				new DataParameter("FIRSTNAME",  FIRSTNAME,  DataType.NVarChar),
				new DataParameter("LASTNAME",   LASTNAME,   DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",     GENDER,     DataType.NChar));

			PERSONID = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).Value);

			return ret;
		}

		public partial class PERSONINSERTOUTPUTPARAMETERResult
		{
			public int? PERSONID { get; set; }
		}

		#endregion

		#region PERSONSELECTALL

		public static IEnumerable<PERSONSELECTALLResult> PERSONSELECTALL(this DataConnection dataConnection, out int? PERSONID, out string FIRSTNAME, out string LASTNAME, out string MIDDLENAME, out char? GENDER)
		{
			var ret = dataConnection.QueryProc<PERSONSELECTALLResult>("PERSON_SELECTALL");

			PERSONID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).  Value);
			FIRSTNAME  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["FIRSTNAME"]). Value);
			LASTNAME   = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["LASTNAME"]).  Value);
			MIDDLENAME = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["MIDDLENAME"]).Value);
			GENDER     = Converter.ChangeTypeTo<char?> (((IDbDataParameter)dataConnection.Command.Parameters["GENDER"]).    Value);

			return ret;
		}

		public partial class PERSONSELECTALLResult
		{
			public int?   PERSONID   { get; set; }
			public string FIRSTNAME  { get; set; }
			public string LASTNAME   { get; set; }
			public string MIDDLENAME { get; set; }
			public string GENDER     { get; set; }
		}

		#endregion

		#region PERSONSELECTBYKEY

		public static IEnumerable<PERSONSELECTBYKEYResult> PERSONSELECTBYKEY(this DataConnection dataConnection, int? ID, out int? PERSONID, out string FIRSTNAME, out string LASTNAME, out string MIDDLENAME, out char? GENDER)
		{
			var ret = dataConnection.QueryProc<PERSONSELECTBYKEYResult>("PERSON_SELECTBYKEY",
				new DataParameter("ID", ID, DataType.Int32));

			PERSONID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).  Value);
			FIRSTNAME  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["FIRSTNAME"]). Value);
			LASTNAME   = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["LASTNAME"]).  Value);
			MIDDLENAME = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["MIDDLENAME"]).Value);
			GENDER     = Converter.ChangeTypeTo<char?> (((IDbDataParameter)dataConnection.Command.Parameters["GENDER"]).    Value);

			return ret;
		}

		public partial class PERSONSELECTBYKEYResult
		{
			public int?   PERSONID   { get; set; }
			public string FIRSTNAME  { get; set; }
			public string LASTNAME   { get; set; }
			public string MIDDLENAME { get; set; }
			public string GENDER     { get; set; }
		}

		#endregion

		#region PERSONSELECTBYNAME

		public static IEnumerable<PERSONSELECTBYNAMEResult> PERSONSELECTBYNAME(this DataConnection dataConnection, string IN_FIRSTNAME, string IN_LASTNAME, out int? PERSONID, out string FIRSTNAME, out string LASTNAME, out string MIDDLENAME, out char? GENDER)
		{
			var ret = dataConnection.QueryProc<PERSONSELECTBYNAMEResult>("PERSON_SELECTBYNAME",
				new DataParameter("IN_FIRSTNAME", IN_FIRSTNAME, DataType.NVarChar),
				new DataParameter("IN_LASTNAME",  IN_LASTNAME,  DataType.NVarChar));

			PERSONID   = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["PERSONID"]).  Value);
			FIRSTNAME  = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["FIRSTNAME"]). Value);
			LASTNAME   = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["LASTNAME"]).  Value);
			MIDDLENAME = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["MIDDLENAME"]).Value);
			GENDER     = Converter.ChangeTypeTo<char?> (((IDbDataParameter)dataConnection.Command.Parameters["GENDER"]).    Value);

			return ret;
		}

		public partial class PERSONSELECTBYNAMEResult
		{
			public int?   PERSONID   { get; set; }
			public string FIRSTNAME  { get; set; }
			public string LASTNAME   { get; set; }
			public string MIDDLENAME { get; set; }
			public string GENDER     { get; set; }
		}

		#endregion

		#region PERSONUPDATE

		public static int PERSONUPDATE(this DataConnection dataConnection, int? PERSONID, string FIRSTNAME, string LASTNAME, string MIDDLENAME, char? GENDER)
		{
			return dataConnection.ExecuteProc("PERSON_UPDATE",
				new DataParameter("PERSONID",   PERSONID,   DataType.Int32),
				new DataParameter("FIRSTNAME",  FIRSTNAME,  DataType.NVarChar),
				new DataParameter("LASTNAME",   LASTNAME,   DataType.NVarChar),
				new DataParameter("MIDDLENAME", MIDDLENAME, DataType.NVarChar),
				new DataParameter("GENDER",     GENDER,     DataType.NChar));
		}

		#endregion

		#region SCALARDATAREADER

		public static IEnumerable<SCALARDATAREADERResult> SCALARDATAREADER(this DataConnection dataConnection, out int? INTFIELD, out string STRINGFIELD)
		{
			var ret = dataConnection.QueryProc<SCALARDATAREADERResult>("SCALAR_DATAREADER");

			INTFIELD    = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["INTFIELD"]).   Value);
			STRINGFIELD = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["STRINGFIELD"]).Value);

			return ret;
		}

		public partial class SCALARDATAREADERResult
		{
			public int?   INTFIELD    { get; set; }
			public string STRINGFIELD { get; set; }
		}

		#endregion

		#region SCALAROUTPUTPARAMETER

		public static IEnumerable<SCALAROUTPUTPARAMETERResult> SCALAROUTPUTPARAMETER(this DataConnection dataConnection, out int? OUTPUTINT, out string OUTPUTSTRING)
		{
			var ret = dataConnection.QueryProc<SCALAROUTPUTPARAMETERResult>("SCALAR_OUTPUTPARAMETER");

			OUTPUTINT    = Converter.ChangeTypeTo<int?>  (((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTINT"]).   Value);
			OUTPUTSTRING = Converter.ChangeTypeTo<string>(((IDbDataParameter)dataConnection.Command.Parameters["OUTPUTSTRING"]).Value);

			return ret;
		}

		public partial class SCALAROUTPUTPARAMETERResult
		{
			public int?   OUTPUTINT    { get; set; }
			public string OUTPUTSTRING { get; set; }
		}

		#endregion

		#region SCALARRETURNPARAMETER

		public static IEnumerable<SCALARRETURNPARAMETERResult> SCALARRETURNPARAMETER(this DataConnection dataConnection, out int? RETURN_VALUE)
		{
			var ret = dataConnection.QueryProc<SCALARRETURNPARAMETERResult>("SCALAR_RETURNPARAMETER");

			RETURN_VALUE = Converter.ChangeTypeTo<int?>(((IDbDataParameter)dataConnection.Command.Parameters["RETURN_VALUE"]).Value);

			return ret;
		}

		public partial class SCALARRETURNPARAMETERResult
		{
			public int? RETURN_VALUE { get; set; }
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static ALLTYPE Find(this ITable<ALLTYPE> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static CamelCaseName Find(this ITable<CamelCaseName> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static DATATYPETEST Find(this ITable<DATATYPETEST> table, int DATATYPEID)
		{
			return table.FirstOrDefault(t =>
				t.DATATYPEID == DATATYPEID);
		}

		public static DOCTOR Find(this ITable<DOCTOR> table, int PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static INHERITANCECHILD Find(this ITable<INHERITANCECHILD> table, int INHERITANCECHILDID)
		{
			return table.FirstOrDefault(t =>
				t.INHERITANCECHILDID == INHERITANCECHILDID);
		}

		public static INHERITANCEPARENT Find(this ITable<INHERITANCEPARENT> table, int INHERITANCEPARENTID)
		{
			return table.FirstOrDefault(t =>
				t.INHERITANCEPARENTID == INHERITANCEPARENTID);
		}

		public static Parent564 Find(this ITable<Parent564> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static PARENT564 Find(this ITable<PARENT564> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static PATIENT Find(this ITable<PATIENT> table, int PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static PERSON Find(this ITable<PERSON> table, int PERSONID)
		{
			return table.FirstOrDefault(t =>
				t.PERSONID == PERSONID);
		}

		public static SEQUENCETEST Find(this ITable<SEQUENCETEST> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTIDENTITY Find(this ITable<TESTIDENTITY> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTMERGE1 Find(this ITable<TESTMERGE1> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTMERGE2 Find(this ITable<TESTMERGE2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestTable Find(this ITable<TestTable> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TESTTABLE Find(this ITable<TESTTABLE> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
