//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/linq2db).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace DB2DataContext
{
	/// <summary>
	/// Database       : TESTDATA
	/// Data Source    : DBHost:50000
	/// Server Version : 10.01.0000
	/// </summary>
	public partial class TESTDATADB : LinqToDB.Data.DataConnection
	{
		public ITable<ALLTYPE>           ALLTYPES            { get { return this.GetTable<ALLTYPE>(); } }
		public ITable<Child>             Children            { get { return this.GetTable<Child>(); } }
		public ITable<Doctor>            Doctors             { get { return this.GetTable<Doctor>(); } }
		public ITable<GrandChild>        GrandChildren       { get { return this.GetTable<GrandChild>(); } }
		public ITable<InheritanceChild>  InheritanceChildren { get { return this.GetTable<InheritanceChild>(); } }
		public ITable<InheritanceParent> InheritanceParents  { get { return this.GetTable<InheritanceParent>(); } }
		public ITable<LinqDataType>      LinqDataTypes       { get { return this.GetTable<LinqDataType>(); } }
		public ITable<MASTERTABLE>       MASTERTABLEs        { get { return this.GetTable<MASTERTABLE>(); } }
		public ITable<Parent>            Parents             { get { return this.GetTable<Parent>(); } }
		public ITable<Patient>           Patients            { get { return this.GetTable<Patient>(); } }
		public ITable<Person>            People              { get { return this.GetTable<Person>(); } }
		public ITable<PERSONVIEW>        PERSONVIEWs         { get { return this.GetTable<PERSONVIEW>(); } }
		public ITable<SLAVETABLE>        SLAVETABLEs         { get { return this.GetTable<SLAVETABLE>(); } }
		public ITable<TestIdentity>      TestIdentities      { get { return this.GetTable<TestIdentity>(); } }
		public ITable<TestTable2>        TestTable2          { get { return this.GetTable<TestTable2>(); } }
		public ITable<TestTable3>        TestTable3          { get { return this.GetTable<TestTable3>(); } }

		public TESTDATADB()
		{
			InitDataContext();
		}

		public TESTDATADB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table(Schema="ADMINISTRATOR", Name="ALLTYPES")]
	public partial class ALLTYPE
	{
		[Column(DbType="INTEGER",                  DataType=DataType.Int32),                     PrimaryKey, Identity] public int       ID                { get; set; } // INTEGER
		[Column(DbType="BIGINT",                   DataType=DataType.Int64),                     Nullable            ] public long?     BIGINTDATATYPE    { get; set; } // BIGINT
		[Column(DbType="INTEGER",                  DataType=DataType.Int32),                     Nullable            ] public int?      INTDATATYPE       { get; set; } // INTEGER
		[Column(DbType="SMALLINT",                 DataType=DataType.Int16),                     Nullable            ] public short?    SMALLINTDATATYPE  { get; set; } // SMALLINT
		[Column(DbType="DECIMAL",                  DataType=DataType.Decimal,   Precision=30),   Nullable            ] public decimal?  DECIMALDATATYPE   { get; set; } // DECIMAL
		[Column(DbType="DECFLOAT(16)",             DataType=DataType.Decimal,   Precision=16),   Nullable            ] public decimal?  DECFLOATDATATYPE  { get; set; } // DECFLOAT(16)
		[Column(DbType="REAL",                     DataType=DataType.Single),                    Nullable            ] public float?    REALDATATYPE      { get; set; } // REAL
		[Column(DbType="DOUBLE",                   DataType=DataType.Double),                    Nullable            ] public double?   DOUBLEDATATYPE    { get; set; } // DOUBLE
		[Column(DbType="CHARACTER(1)",             DataType=DataType.Char,      Length=1),       Nullable            ] public char?     CHARDATATYPE      { get; set; } // CHARACTER(1)
		[Column(DbType="CHARACTER(20)",            DataType=DataType.Char,      Length=20),      Nullable            ] public string    CHAR20DATATYPE    { get; set; } // CHARACTER(20)
		[Column(DbType="VARCHAR(20)",              DataType=DataType.VarChar,   Length=20),      Nullable            ] public string    VARCHARDATATYPE   { get; set; } // VARCHAR(20)
		[Column(DbType="CLOB(1048576)",            DataType=DataType.Text,      Length=1048576), Nullable            ] public string    CLOBDATATYPE      { get; set; } // CLOB(1048576)
		[Column(DbType="DBCLOB(100)",              DataType=DataType.Text,      Length=100),     Nullable            ] public string    DBCLOBDATATYPE    { get; set; } // DBCLOB(100)
		[Column(DbType="CHAR (5) FOR BIT DATA",    DataType=DataType.Binary,    Length=5),       Nullable            ] public byte[]    BINARYDATATYPE    { get; set; } // CHAR (5) FOR BIT DATA
		[Column(DbType="VARCHAR (5) FOR BIT DATA", DataType=DataType.VarBinary, Length=5),       Nullable            ] public byte[]    VARBINARYDATATYPE { get; set; } // VARCHAR (5) FOR BIT DATA
		[Column(DbType="BLOB(1048576)",            DataType=DataType.Blob,      Length=1048576), Nullable            ] public byte[]    BLOBDATATYPE      { get; set; } // BLOB(1048576)
		[Column(DbType="GRAPHIC(10)",              DataType=DataType.Text,      Length=10),      Nullable            ] public string    GRAPHICDATATYPE   { get; set; } // GRAPHIC(10)
		[Column(DbType="DATE",                     DataType=DataType.Date),                      Nullable            ] public DateTime? DATEDATATYPE      { get; set; } // DATE
		[Column(DbType="TIME",                     DataType=DataType.Time),                      Nullable            ] public TimeSpan? TIMEDATATYPE      { get; set; } // TIME
		[Column(DbType="TIMESTAMP",                DataType=DataType.Timestamp),                 Nullable            ] public DateTime? TIMESTAMPDATATYPE { get; set; } // TIMESTAMP
		[Column(DbType="XML",                      DataType=DataType.Xml),                       Nullable            ] public string    XMLDATATYPE       { get; set; } // XML
	}

	[Table(Schema="ADMINISTRATOR", Name="Child")]
	public partial class Child
	{
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? ParentID { get; set; } // INTEGER
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? ChildID  { get; set; } // INTEGER
	}

	[Table(Schema="ADMINISTRATOR", Name="Doctor")]
	public partial class Doctor
	{
		[Column(DbType="INTEGER",     DataType=DataType.Int32),              PrimaryKey, NotNull] public int    PersonID { get; set; } // INTEGER
		[Column(DbType="VARCHAR(50)", DataType=DataType.VarChar, Length=50),             NotNull] public string Taxonomy { get; set; } // VARCHAR(50)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Doctor_Person", BackReferenceName="Doctor")]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Schema="ADMINISTRATOR", Name="GrandChild")]
	public partial class GrandChild
	{
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? ParentID     { get; set; } // INTEGER
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? ChildID      { get; set; } // INTEGER
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? GrandChildID { get; set; } // INTEGER
	}

	[Table(Schema="ADMINISTRATOR", Name="InheritanceChild")]
	public partial class InheritanceChild
	{
		[Column(DbType="INTEGER",     DataType=DataType.Int32),              PrimaryKey,  NotNull] public int    InheritanceChildId  { get; set; } // INTEGER
		[Column(DbType="INTEGER",     DataType=DataType.Int32),                           NotNull] public int    InheritanceParentId { get; set; } // INTEGER
		[Column(DbType="INTEGER",     DataType=DataType.Int32),                 Nullable         ] public int?   TypeDiscriminator   { get; set; } // INTEGER
		[Column(DbType="VARCHAR(50)", DataType=DataType.VarChar, Length=50),    Nullable         ] public string Name                { get; set; } // VARCHAR(50)
	}

	[Table(Schema="ADMINISTRATOR", Name="InheritanceParent")]
	public partial class InheritanceParent
	{
		[Column(DbType="INTEGER",     DataType=DataType.Int32),              PrimaryKey,  NotNull] public int    InheritanceParentId { get; set; } // INTEGER
		[Column(DbType="INTEGER",     DataType=DataType.Int32),                 Nullable         ] public int?   TypeDiscriminator   { get; set; } // INTEGER
		[Column(DbType="VARCHAR(50)", DataType=DataType.VarChar, Length=50),    Nullable         ] public string Name                { get; set; } // VARCHAR(50)
	}

	[Table(Schema="ADMINISTRATOR", Name="LinqDataTypes")]
	public partial class LinqDataType
	{
		[Column(DbType="INTEGER",                DataType=DataType.Int32),                            Nullable] public int?      ID             { get; set; } // INTEGER
		[Column(DbType="DECIMAL(10,4)",          DataType=DataType.Decimal,   Precision=10, Scale=4), Nullable] public decimal?  MoneyValue     { get; set; } // DECIMAL(10,4)
		[Column(DbType="TIMESTAMP",              DataType=DataType.Timestamp),                        Nullable] public DateTime? DateTimeValue  { get; set; } // TIMESTAMP
		[Column(DbType="TIMESTAMP",              DataType=DataType.Timestamp),                        Nullable] public DateTime? DateTimeValue2 { get; set; } // TIMESTAMP
		[Column(DbType="SMALLINT",               DataType=DataType.Int16),                            Nullable] public short?    BoolValue      { get; set; } // SMALLINT
		[Column(DbType="CHAR (16) FOR BIT DATA", DataType=DataType.Binary,    Length=16),             Nullable] public byte[]    GuidValue      { get; set; } // CHAR (16) FOR BIT DATA
		[Column(DbType="BLOB(5000)",             DataType=DataType.Blob,      Length=5000),           Nullable] public byte[]    BinaryValue    { get; set; } // BLOB(5000)
		[Column(DbType="SMALLINT",               DataType=DataType.Int16),                            Nullable] public short?    SmallIntValue  { get; set; } // SMALLINT
		[Column(DbType="INTEGER",                DataType=DataType.Int32),                            Nullable] public int?      IntValue       { get; set; } // INTEGER
		[Column(DbType="BIGINT",                 DataType=DataType.Int64),                            Nullable] public long?     BigIntValue    { get; set; } // BIGINT
		[Column(DbType="VARCHAR(50)",            DataType=DataType.VarChar,   Length=50),             Nullable] public string    StringValue    { get; set; } // VARCHAR(50)
	}

	[Table(Schema="ADMINISTRATOR", Name="MASTERTABLE")]
	public partial class MASTERTABLE
	{
		[Column(DbType="INTEGER", DataType=DataType.Int32), PrimaryKey(0), NotNull] public int ID1 { get; set; } // INTEGER
		[Column(DbType="INTEGER", DataType=DataType.Int32), PrimaryKey(1), NotNull] public int ID2 { get; set; } // INTEGER

		#region Associations

		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE_BackReference
		/// </summary>
		[Association(ThisKey="ID1, ID2", OtherKey="ID222222222222222222222222, ID1", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<SLAVETABLE> SLAVETABLEs { get; set; }

		#endregion
	}

	[Table(Schema="ADMINISTRATOR", Name="Parent")]
	public partial class Parent
	{
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? ParentID { get; set; } // INTEGER
		[Column(DbType="INTEGER", DataType=DataType.Int32), Nullable] public int? Value1   { get; set; } // INTEGER
	}

	[Table(Schema="ADMINISTRATOR", Name="Patient")]
	public partial class Patient
	{
		[Column(DbType="INTEGER",      DataType=DataType.Int32),               PrimaryKey, NotNull] public int    PersonID  { get; set; } // INTEGER
		[Column(DbType="VARCHAR(256)", DataType=DataType.VarChar, Length=256),             NotNull] public string Diagnosis { get; set; } // VARCHAR(256)

		#region Associations

		/// <summary>
		/// FK_Patient_Person
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=false, Relationship=Relationship.OneToOne, KeyName="FK_Patient_Person", BackReferenceName="Patient")]
		public Person Person { get; set; }

		#endregion
	}

	[Table(Schema="ADMINISTRATOR", Name="Person")]
	public partial class Person
	{
		[Column(DbType="INTEGER",      DataType=DataType.Int32),              PrimaryKey,  Identity] public int    PersonID   { get; set; } // INTEGER
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50), NotNull              ] public string FirstName  { get; set; } // VARCHAR(50)
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50), NotNull              ] public string LastName   { get; set; } // VARCHAR(50)
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50),    Nullable          ] public string MiddleName { get; set; } // VARCHAR(50)
		[Column(DbType="CHARACTER(1)", DataType=DataType.Char,    Length=1),  NotNull              ] public char   Gender     { get; set; } // CHARACTER(1)

		#region Associations

		/// <summary>
		/// FK_Doctor_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Doctor Doctor { get; set; }

		/// <summary>
		/// FK_Patient_Person_BackReference
		/// </summary>
		[Association(ThisKey="PersonID", OtherKey="PersonID", CanBeNull=true, Relationship=Relationship.OneToOne, IsBackReference=true)]
		public Patient Patient { get; set; }

		#endregion
	}

	[Table(Schema="ADMINISTRATOR", Name="PERSONVIEW", IsView=true)]
	public partial class PERSONVIEW
	{
		[Column(DbType="INTEGER",      DataType=DataType.Int32),              NotNull    ] public int    PersonID   { get; set; } // INTEGER
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50), NotNull    ] public string FirstName  { get; set; } // VARCHAR(50)
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50), NotNull    ] public string LastName   { get; set; } // VARCHAR(50)
		[Column(DbType="VARCHAR(50)",  DataType=DataType.VarChar, Length=50),    Nullable] public string MiddleName { get; set; } // VARCHAR(50)
		[Column(DbType="CHARACTER(1)", DataType=DataType.Char,    Length=1),  NotNull    ] public char   Gender     { get; set; } // CHARACTER(1)
	}

	[Table(Schema="ADMINISTRATOR", Name="SLAVETABLE")]
	public partial class SLAVETABLE
	{
		[Column(                                  DbType="INTEGER", DataType=DataType.Int32), NotNull] public int ID1                        { get; set; } // INTEGER
		[Column(@"ID 2222222222222222222222  22", DbType="INTEGER", DataType=DataType.Int32), NotNull] public int ID222222222222222222222222 { get; set; } // INTEGER
		[Column(@"ID 2222222222222222",           DbType="INTEGER", DataType=DataType.Int32), NotNull] public int ID2222222222222222         { get; set; } // INTEGER

		#region Associations

		/// <summary>
		/// FK_SLAVETABLE_MASTERTABLE
		/// </summary>
		[Association(ThisKey="ID222222222222222222222222, ID1", OtherKey="ID1, ID2", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_SLAVETABLE_MASTERTABLE", BackReferenceName="SLAVETABLEs")]
		public MASTERTABLE MASTERTABLE { get; set; }

		#endregion
	}

	[Table(Schema="ADMINISTRATOR", Name="TestIdentity")]
	public partial class TestIdentity
	{
		[Column(DbType="INTEGER", DataType=DataType.Int32), PrimaryKey, Identity] public int ID { get; set; } // INTEGER
	}

	[Table(Schema="ADMINISTRATOR", Name="TestTable2")]
	public partial class TestTable2
	{
		[Column(DbType="INTEGER",         DataType=DataType.Int32),                 PrimaryKey,  Identity] public int       ID          { get; set; } // INTEGER
		[Column(DbType="VARGRAPHIC(50)",  DataType=DataType.Text,      Length=50),  NotNull              ] public string    Name        { get; set; } // VARGRAPHIC(50)
		[Column(DbType="VARGRAPHIC(250)", DataType=DataType.Text,      Length=250),    Nullable          ] public string    Description { get; set; } // VARGRAPHIC(250)
		[Column(DbType="TIMESTAMP",       DataType=DataType.Timestamp),                Nullable          ] public DateTime? CreatedOn   { get; set; } // TIMESTAMP
	}

	[Table(Schema="ADMINISTRATOR", Name="TestTable3")]
	public partial class TestTable3
	{
		[Column(DbType="INTEGER",        DataType=DataType.Int32),            PrimaryKey, NotNull] public int    ID   { get; set; } // INTEGER
		[Column(DbType="VARGRAPHIC(50)", DataType=DataType.Text,  Length=50),             NotNull] public string Name { get; set; } // VARGRAPHIC(50)
	}

	public static partial class TableExtensions
	{
		public static ALLTYPE Find(this ITable<ALLTYPE> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static Doctor Find(this ITable<Doctor> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static InheritanceChild Find(this ITable<InheritanceChild> table, int InheritanceChildId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceChildId == InheritanceChildId);
		}

		public static InheritanceParent Find(this ITable<InheritanceParent> table, int InheritanceParentId)
		{
			return table.FirstOrDefault(t =>
				t.InheritanceParentId == InheritanceParentId);
		}

		public static MASTERTABLE Find(this ITable<MASTERTABLE> table, int ID1, int ID2)
		{
			return table.FirstOrDefault(t =>
				t.ID1 == ID1 &&
				t.ID2 == ID2);
		}

		public static Patient Find(this ITable<Patient> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static Person Find(this ITable<Person> table, int PersonID)
		{
			return table.FirstOrDefault(t =>
				t.PersonID == PersonID);
		}

		public static TestIdentity Find(this ITable<TestIdentity> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestTable2 Find(this ITable<TestTable2> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}

		public static TestTable3 Find(this ITable<TestTable3> table, int ID)
		{
			return table.FirstOrDefault(t =>
				t.ID == ID);
		}
	}
}
