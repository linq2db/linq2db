variables:
  solution: 'linq2db.sln'
  build_configuration: 'Azure'
  assemblyVersion: 3.0.0
  netfx46_tests: 'netfx46_tests'
  netcore21_tests: 'netcoreapp21_tests'

trigger: none
pr:
  branches:
    include:
    - '*'

stages:

########################################
#  Build and publish testable binaries #
########################################
- stage: ''
  displayName: ''
  jobs:
  - job: build_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build'

    steps:

    # mitigate https://status.dev.azure.com/_event/182998791
    - task: NuGetToolInstaller@1

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Build/linq2db.Default.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m'
      displayName: Build Solution

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp2.1 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP2.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/net46'
      displayName: Copy test configs for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/netcoreapp21'
      displayName: Copy test configs for NETCOREAPP2.1

    - task: CmdLine@2
      inputs:
        script: 'copy "$(System.DefaultWorkingDirectory)\Data\Create Scripts\Northwind.sql" $(Build.SourcesDirectory)\Build\Azure\scripts\northwind.sql'
      displayName: Copy northwind.sql to scripts

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETCOREAPP2.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        artifact: '$(netfx46_tests)'
      displayName: Publish test artifacts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish'
        artifact: '$(netcore21_tests)'
      displayName: Publish test artifacts for NETCOREAPP2.1

#################################################

  - job: test_linux_netcoreapp21_job
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Tests: Lin / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: ne(variables['Build.SourceBranchName'], 'release')
    condition: eq(variables['Build.SourceBranchName'], 'fake')

    strategy:
      matrix:
        Informix14:
          title: 'Informix 14.10'
          config: 'informix'
          script: 'informix14.sh'
          nuget: 'IBM.Data.DB2.Core-lnx -Version 2.2.0.100'
        DB2:
          title: 'DB2 LUW 11.5'
          config: 'db2'
          script: 'db2.sh'
          nuget: 'IBM.Data.DB2.Core-lnx -Version 2.2.0.100'
#        Informix12:
#          title: 'Informix 12.10'
#          config: 'informix'
#          script: 'informix12.sh'
#          nuget: 'IBM.Data.DB2.Core-lnx -Version 2.2.0.100'
#        SAPHANA2:
#          title: 'SAP HANA 2 SPS 04r40'
#          config: 'hana2'
#          script: 'mac.hana2.sh'
#          docker: 'true'
#          docker_login: 'true'
#        PostgreSQL:
#          title: 'PostgreSQL'
#          config: 'pgsql'
#          script: 'pgsql.sh'
#        Oracle11:
#          title: 'Oracle 11g XE'
#          config: 'oracle11'
#          script: 'oracle11.sh'
#        Oracle12:
#          title: 'Oracle 12c'
#          config: 'oracle12'
#          script: 'oracle12.sh'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: Docker@2
      displayName: Auth on hub.docker.com
      inputs:
        command: login
        containerRegistry: dockerhub
      condition: eq(variables['docker_login'], 'true')

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.1 /logger:trx
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Linux / NETCOREAPP2.1 / $(title)'

  - job: test_macos_netcoreapp21_job
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'Tests: Mac / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['Build.SourceBranchName'], 'fake')

    strategy:
      matrix:
#        Informix14:
#          title: 'Informix 14.10'
#          config: 'informix'
#          script: 'mac.informix14.sh'
#          docker: 'true'
#          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
#        DB2:
#          title: 'DB2 LUW 11.5'
#          config: 'db2'
#          script: 'mac.db2.sh'
#          docker: 'true'
#          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        SqlServer2019:
#          title: 'SQL Server 2019 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2019'
#          script: 'mac.sqlserver.2019.sh'
#          docker: 'true'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.fts.2019.ms'
          script: 'mac.sqlserver.2019.sh'
          docker: 'true'
#        Informix12:
#          title: 'Informix 12.10'
#          config: 'informix'
#          script: 'mac.informix12.sh'
#          docker: 'true'
#          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
#        SAPHANA2:
#          title: 'SAP HANA 2 SPS 04r40'
#          config: 'hana2'
#          script: 'mac.hana2.sh'
#          docker: 'true'
#          docker_login: 'true'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2017.ms'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        MySQL:
#          title: 'MySQL'
#          config: 'mysql'
#          script: 'mac.mysql.sh'
#          docker: 'true'
#        MySQL55:
#          title: 'MySQL 5.5'
#          config: 'mysql55'
#          script: 'mac.mysql55.sh'
#          docker: 'true'
#        MariaDB:
#          title: 'MariaDB'
#          config: 'mariadb'
#          script: 'mac.mariadb.sh'
#          docker: 'true'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: 'chmod +x mac.docker.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: eq(variables['docker'], 'true')
      displayName: Mark docker install script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/mac.docker.sh'
      condition: eq(variables['docker'], 'true')
      displayName: Install Docker

    - task: Docker@2
      displayName: Auth on hub.docker.com
      inputs:
        command: login
        containerRegistry: dockerhub
      condition: eq(variables['docker_login'], 'true')

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']
      
    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: and(succeeded(), variables['script'])
      displayName: Mark script as executable
      
    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: and(succeeded(), variables['script'])
      displayName: Setup tests

    - script: dotnet vstest linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.1 /logger:trx /Diag:diag.logz /Blame
      condition: succeeded()
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Mac / NETCOREAPP2.1 / $(title)'

#    - task: PublishPipelineArtifact@1
#      inputs:
#        archiveFilePatterns: '**/*.logz'
#        path: '$(System.DefaultWorkingDirectory)'
#        artifact: 'mac_test_logs'
#      displayName: Publish test diagnostics


###################################
#  Tests: Windows (NETCOREAPP2_1) #
#  Windows 2016                   #
###################################
  - job: test_win2016_netcoreapp21_job
    pool:
      vmImage: 'vs2017-win2016'
#      vmImage: 'windows-2019'
    displayName: 'Tests: Win / NETCOREAPP2.1 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
#    condition: eq(variables['Build.SourceBranchName'], 'fake')

    strategy:
      matrix:
        MariaDB:
          title: 'MariaDB'
          config: 'mariadb'
          script: 'mariadb.cmd'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - powershell: Get-OdbcDriver | Select Name, Platform
      displayName: List ODBC providers

    - powershell: '[System.Data.OleDb.OleDbEnumerator]::GetRootEnumerator() | % { $_.GetValue(0) + " => " + $_.GetValue(2) }'
      displayName: List OLEDB providers

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.1 /Diag:diag.logz /Blame'
        testRunTitle: 'Windows / NETCOREAPP2.1 / $(title)'
      displayName: '$(title)'

#    - task: PublishPipelineArtifact@1
#      inputs:
#        archiveFilePatterns: '**/*.logz'
#        path: '$(System.DefaultWorkingDirectory)'
#        artifact: 'win_core_test_logs'
#      displayName: Publish test diagnostics

###########################
#  Tests: Windows (NETFX) #
#  Windows 2019           #
###########################

  - job: test_win_netfx46_job_2019
    pool:
      vmImage: 'windows-2019'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
#    condition: eq(variables['Build.SourceBranchName'], 'fake')

    strategy:
      matrix:
        MariaDB:
          title: 'MariaDB'
          config: 'mariadb'
          script: 'mariadb.cmd'
#        SqlServer2016_2:
#          title: 'SQL Server 2016.2 (System.Data.SqlClient)'
#          config: 'sqlserver.2016'
#          script: 'sqlserver.2016.2.cmd'
#        SqlServer2019:
#          title: 'SQL Server 2019 (System.Data.SqlClient)'
#          config: 'sqlserver.2019'
#          script: 'sqlserver.2019.cmd'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)1'
#          config: 'sqlserver.2017.ms'
#          script: 'sqlserver.2017.cmd'
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)1'
#          config: 'sqlserver.2017'
#          script: 'sqlserver.2017.cmd'
#        SqlServer2016_MS:
#          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)1'
#          config: 'sqlserver.2016.ms'
#          script: 'sqlserver.2016.cmd'
#        SqlServer2016:
#          title: 'SQL Server 2016 (System.Data.SqlClient)1'
#          config: 'sqlserver.2016'
#          script: 'sqlserver.2016.cmd'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
        testRunTitle: 'Windows / NET46 / $(title)'
      displayName: '$(title)'

###########################
#  Tests: Windows (NETFX) #
#  Windows 2016           #
###########################

  - job: test_win_netfx46_job_2016
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['Build.SourceBranchName'], 'fake')

    strategy:
      matrix:
        SqlServer2005:
          title: 'SQL Server 2005 (System.Data.SqlClient)'
          config: 'sqlserver.2005'
          script: 'sqlserver.2005.cmd'
        SqlServer2005_MS:
          title: 'SQL Server 2005 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2005.ms'
          script: 'sqlserver.2005.cmd'
        SqlServer2008:
          title: 'SQL Server 2008 (System.Data.SqlClient)'
          config: 'sqlserver.2008'
          script: 'sqlserver.2008.cmd'
        SqlServer2008_MS:
          title: 'SQL Server 2008 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2008.ms'
          script: 'sqlserver.2008.cmd'
        SqlServer2012:
          title: 'SQL Server 2012 (System.Data.SqlClient)'
          config: 'sqlserver.2012'
          script: 'sqlserver.2012.cmd'
        SqlServer2012_MS:
          title: 'SQL Server 2012 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2012.ms'
          script: 'sqlserver.2012.cmd'
        SqlServer2014:
          title: 'SQL Server 2014 (System.Data.SqlClient)'
          config: 'sqlserver.2014'
          script: 'sqlserver.2014.cmd'
        SqlServer2014_MS:
          title: 'SQL Server 2014 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2014.ms'
          script: 'sqlserver.2014.cmd'
        SqlServer2016:
          title: 'SQL Server 2016 (System.Data.SqlClient)'
          config: 'sqlserver.2016'
          script: 'sqlserver.2016.cmd'
        SqlServer2016_MS:
          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2016.ms'
          script: 'sqlserver.2016.cmd'
        SqlServer2017:
          title: 'SQL Server 2017 (System.Data.SqlClient)'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.cmd'
        SqlServer2017_MS:
          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2017.ms'
          script: 'sqlserver.2017.cmd'
        SqlServer2019:
          title: 'SQL Server 2019 (System.Data.SqlClient)'
          config: 'sqlserver.2019'
          script: 'sqlserver.2019.cmd'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2019.ms'
          script: 'sqlserver.2019.cmd'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2017.ms'
#          script: 'sqlserver.2017.cmd'
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.2017'
#          script: 'sqlserver.2017.cmd'
#        SqlServer2016_MS:
#          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2016.ms'
#          script: 'sqlserver.2016.cmd'
#        SqlServer2016:
#          title: 'SQL Server 2016 (System.Data.SqlClient)'
#          config: 'sqlserver.2016'
#          script: 'sqlserver.2016.cmd'
#

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
        testRunTitle: 'Windows / NET46 / $(title)'
      displayName: '$(title)'
