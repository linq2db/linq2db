parameters:
  with_baselines: false

steps:
- checkout: none

# .NET 6 and 8 SDKs already installed https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
# so we need to install only x86 versions

- task: UseDotNet@2
  displayName: 'Install .NET 6 (x86)'
  inputs:
    packageType: sdk
    version: 6.x
  condition: and(variables.title, eq(variables.net60, 'true'), eq(variables.x86, 'true'), succeeded())
  env:
    PROCESSOR_ARCHITECTURE: x86

- task: UseDotNet@2
  displayName: 'Install .NET 8 (x86)'
  inputs:
    packageType: sdk
    version: 8.x
  condition: and(variables.title, eq(variables.net80, 'true'), eq(variables.x86, 'true'), succeeded())
  env:
    PROCESSOR_ARCHITECTURE: x86

- task: CmdLine@2
  inputs:
    script: 'git clone https://$(BASELINES_GH_PAT)@github.com/linq2db/linq2db.baselines.git baselines && cd baselines && git checkout -b $(baselines_branch) origin/$(baselines_branch) && cd ..'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: Checkout test baselines
  condition: and(variables.title, ${{ parameters.with_baselines }}, succeeded())

- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: $(artifact_test_binaries)
    targetPath: '$(System.DefaultWorkingDirectory)'
  condition: and(variables.title, succeeded())
  displayName: Extract test files

- task: CmdLine@2
  inputs:
    script: 'copy $(System.DefaultWorkingDirectory)\configs\netfx\$(config).json $(System.DefaultWorkingDirectory)\$(netfx_tfm)\UserDataProviders.json'
  displayName: Copy .NET FW test config
  condition: and(variables.title, eq(variables.netfx, 'true'), succeeded())

- task: CmdLine@2
  inputs:
    script: 'copy $(System.DefaultWorkingDirectory)\configs\net60\$(config).json $(System.DefaultWorkingDirectory)\net6.0\UserDataProviders.json'
  displayName: Copy .NET 6 test config
  condition: and(variables.title, eq(variables.net60, 'true'), succeeded())

- task: CmdLine@2
  inputs:
    script: 'copy $(System.DefaultWorkingDirectory)\configs\net80\$(config).json $(System.DefaultWorkingDirectory)\net8.0\UserDataProviders.json'
  displayName: Copy .NET 8 test config
  condition: and(variables.title, eq(variables.net80, 'true'), succeeded())

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_global)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
  condition: and(variables.title, variables.script_global, succeeded())
  displayName: Execute Global Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_global)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
  condition: and(variables.title, variables.psscript_global, succeeded())
  displayName: Execute Global PowerShell Setup Script

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(netfx_tfm)/main/x86'
  condition: and(variables.title, eq(variables.netfx, 'true'), eq(variables.x86, 'true'), variables.script_local, succeeded())
  displayName: Execute NETFX x86 Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(netfx_tfm)/main/x86'
  condition: and(variables.title, eq(variables.netfx, 'true'), eq(variables.x86, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NETFX x86 PowerShell Setup Script

- script: dotnet test $(netfx_tfm)/main/x86/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f $(netfx_tfm) -l trx $(extra)
  displayName: 'Tests (NETFX): $(title)'
  condition: and(eq(variables.netfx, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test $(netfx_tfm)/efcore/x86/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f $(netfx_tfm) -l trx $(extra)
  displayName: 'EF.Core Tests (NETFX): $(title)'
  condition: and(eq(variables.netfx, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(netfx_tfm)/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.netfx, 'true'), variables.script_local, succeeded())
  displayName: Execute NETFX x64 Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/$(netfx_tfm)/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.netfx, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NETFX x64 PowerShell Setup Script

- script: dotnet test $(netfx_tfm)/main/x64/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f $(netfx_tfm) -l trx --arch x64
  displayName: 'Tests (NETFX x64): $(title)'
  condition: and(eq(variables.netfx, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test $(netfx_tfm)/efcore/x64/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f $(netfx_tfm) -l trx --arch x64
  displayName: 'EF.Core Tests (NETFX x64): $(title)'
  condition: and(eq(variables.netfx, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net6.0/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.net60, 'true'), variables.script_local, succeeded())
  displayName: Execute NET 6 (x64) Setup Script

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net6.0/main/x86'
  condition: and(variables.title, eq(variables.x86, 'true'), eq(variables.net60, 'true'), variables.script_local, succeeded())
  displayName: Execute NET 6 (x86) Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net6.0/net60/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.net60, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NET 6 (x64) PowerShell Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net6.0/main/x86'
  condition: and(variables.title, eq(variables.x86, 'true'), eq(variables.net60, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NET 6 (x86) PowerShell Setup Script

- script: dotnet test net6.0/main/x64/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f net60 -l trx
  displayName: 'Tests (NET60): $(title)'
  condition: and(eq(variables.net60, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net6.0/main/x86/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f net60 -l trx
  displayName: 'Tests (NET60 x86): $(title)'
  condition: and(eq(variables.net60, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net6.0/efcore/x64/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f net60 -l trx
  displayName: 'EF.Core Tests (NET60): $(title)'
  condition: and(eq(variables.net60, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net6.0/efcore/x86/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f net60 -l trx
  displayName: 'EF.Core Tests (NET60 x86): $(title)'
  condition: and(eq(variables.net60, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net8.0/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.net80, 'true'), variables.script_local, succeeded())
  displayName: Execute NET 8 (x64) Setup Script

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net8.0/main/x86'
  condition: and(variables.title, eq(variables.x86, 'true'), eq(variables.net80, 'true'), variables.script_local, succeeded())
  displayName: Execute NET 8 (x86) Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net8.0/main/x64'
  condition: and(variables.title, ne(variables.x86, 'true'), eq(variables.net80, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NET 8 (x64) PowerShell Setup Script

- task: PowerShell@2
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)/scripts/$(psscript_local)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/net8.0/main/x86'
  condition: and(variables.title, eq(variables.x86, 'true'), eq(variables.net80, 'true'), variables.psscript_local, succeeded())
  displayName: Execute NET 8 (x86) PowerShell Setup Script

- script: dotnet test net8.0/main/x64/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f net80 -l trx
  displayName: 'Tests (.NET 8 x64): $(title)'
  condition: and(eq(variables.net80, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net8.0/main/x86/linq2db.Tests.dll --filter "TestCategory != SkipCI" -f net80 -l trx
  displayName: 'Tests (.NET 8 x86): $(title)'
  condition: and(eq(variables.net80, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net8.0/efcore/x64/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f net80 -l trx
  displayName: 'EF.Core Tests (.NET 8 x64): $(title)'
  condition: and(eq(variables.net80, 'true'), ne(variables.x86, 'true'), variables.title, succeeded())

- script: dotnet test net8.0/efcore/x86/linq2db.EntityFrameworkCore.Tests.dll --filter "TestCategory != SkipCI" -f net80 -l trx
  displayName: 'EF.Core Tests (.NET 8 x86): $(title)'
  condition: and(eq(variables.net80, 'true'), eq(variables.x86, 'true'), variables.title, succeeded())

- task: PublishTestResults@2
  condition: and(variables.title, succeededOrFailed())
  inputs:
    testRunner: VsTest
    testResultsFiles: '**/*.trx'
    testRunTitle: 'Windows / $(title)'
    failTaskOnMissingResultsFile: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Add baselines changes to commit (index)"
      $output = git add -A
      if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to add baselines changes. Error code ${LASTEXITCODE}, output: ${output}"
          exit 1
      }
      Write-Host "Create commit"
      $output = git commit -m "[Windows / $(title)] baselines"
      if ($output -match "nothing to commit") {
          Write-Host "No baselines changes detected"
          exit 0
      }
      if ($LASTEXITCODE -ne 0) {
          Write-Host "Failed to create commit. Error code ${LASTEXITCODE}, output: ${output}"
          exit 1
      }
      $rebaseAttempts = 10
      do {
          Write-Host "Pull with rebase"
          $output = git pull --rebase
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Failed to rebase. Error code ${LASTEXITCODE}, output: ${output}"
              Write-Host "Display conflict diff"
              $output = git diff ORIG_HEAD FETCH_HEAD
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "Failed to render diff. Error code ${LASTEXITCODE}, output:"
                  Write-Output $output
                  exit 1
              }
              Write-Output $output
              exit 1
          }
          Write-Host "Push baselines to server"
          $output = git push https://$(BASELINES_GH_PAT)@github.com/linq2db/linq2db.baselines.git $(baselines_branch)
          if ($LASTEXITCODE -ne 0) {
              Write-Host "Failed to push baselines. Error code ${LASTEXITCODE}, output: ${output}"
          } else {
              exit 0
          }
          $rebaseAttempts = $rebaseAttempts - 1
      } while ($rebaseAttempts -gt 0)
      Write-Host "Failed to push baselines"
      exit 1
    workingDirectory: '$(System.DefaultWorkingDirectory)/baselines'
  displayName: Commit test baselines
  condition: and(variables.title, succeeded(), ${{ parameters.with_baselines }})
  env:
    GITHUB_TOKEN: $(BASELINES_GH_PAT)
    EMAIL: azp@linq2db.com
    GIT_AUTHOR_NAME: Azure Pipelines Bot
    GIT_COMMITTER_NAME: Azure Pipelines Bot
