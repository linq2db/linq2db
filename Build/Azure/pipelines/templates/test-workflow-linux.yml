parameters:
  artifacts: ''
  netcoreversion: ''
  with_baselines: false

steps:
- checkout: none

- task: CmdLine@2
  inputs:
    script: 'git clone https://$(BASELINES_GH_PAT)@github.com/linq2db/linq2db.baselines.git baselines && cd baselines && git checkout -b baselines_$(system.pullRequest.sourceCommitId)_$(System.JobId) && cd ..'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: Checkout test baselines
  condition: and(variables.title, ${{ parameters.with_baselines }})

- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: ${{ parameters.artifacts }}
    targetPath: '$(System.DefaultWorkingDirectory)'
  condition: variables.title

- task: CmdLine@2
  inputs:
    script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: Copy test config
  condition: variables.title

- task: NuGet@0
  displayName: Install nugets
  inputs:
    command: 'install'
    arguments: '$(nuget) -ExcludeVersion'
    workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
  condition: and(variables.title, variables.nuget)

- task: CmdLine@2
  inputs:
    script: 'chmod +x $(script)'
    workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
  condition: and(variables.title, variables.script)
  displayName: Mark script as executable

- task: CmdLine@2
  inputs:
    script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
  condition: and(variables.title, variables.script)
  displayName: Setup tests

# just because there is no vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
- script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v${{ parameters.netcoreversion }} /logger:trx
  condition: and(variables.title, succeeded())
  displayName: 'Execute tests: $(title)'

- task: PublishTestResults@2
  condition: and(variables.title, succeededOrFailed())
  inputs:
    testRunner: VsTest
    testResultsFiles: '**/*.trx'
    testRunTitle: 'Linux / NETCOREAPP${{ parameters.netcoreversion }} / $(title)'

- task: CmdLine@2
  inputs:
    script: 'git add -A && git commit -m "[Linux / NETCOREAPP${{ parameters.netcoreversion }} / $(title)] baselines from https://github.com/linq2db/linq2db/pull/$(system.pullRequest.pullRequestNumber)" && git push https://$(BASELINES_GH_PAT)@github.com/linq2db/linq2db.baselines.git baselines_$(system.pullRequest.sourceCommitId)_$(System.JobId) && gh pr create --title "[Linux / NETCOREAPP${{ parameters.netcoreversion }} / $(title)] Baselines" --body "[Linux / NETCOREAPP${{ parameters.netcoreversion }} / $(title)] Baselines from  https://github.com/linq2db/linq2db/pull/$(system.pullRequest.pullRequestNumber)" --reviewer linq2db/baselines-reviewers --draft'
    workingDirectory: '$(System.DefaultWorkingDirectory)/baselines'
  displayName: Commit test baselines
  condition: and(variables.title, succeeded(), ${{ parameters.with_baselines }})
  continueOnError: true # dont fail if there is no changes to baselines
  env:
    GITHUB_TOKEN: $(BASELINES_GH_PAT)
    EMAIL: azp@linq2db.com
    GIT_AUTHOR_NAME: Azure Pipelines Bot
    GIT_COMMITTER_NAME: Azure Pipelines Bot

#    - task: Docker@2
#      displayName: Auth on hub.docker.com
#      inputs:
#        command: login
#        containerRegistry: dockerhub
#      condition: and(variables.title, eq(variables.docker_login, 'true'))
