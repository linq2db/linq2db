parameters:
  enabled: false
  experimental: false
  with_baselines: false
  test_matrix: []

jobs:
##############################################################################################
#  This job runs before tests and ensures we have branch in baselines repository and         #
#  creates it if it is missing                                                               #
##############################################################################################
- job: create_baselines_branch
  pool:
    vmImage: 'windows-2019'
  displayName: 'Create Test Baselines Branch'
  dependsOn: build_job
  condition: and(${{ parameters.enabled }}, ${{ parameters.with_baselines }})

  steps:
  - task: CmdLine@2
    inputs:
      script: |
        ECHO OFF
        SET PR_NUM=$(system.pullRequest.pullRequestNumber)
        SET USER=linq2db
        SET REPONAME=linq2db.baselines
        SET REPO=https://%GITHUB_TOKEN%@github.com/%USER%/%REPONAME%.git
        IF "%PR_NUM%" NEQ "" (SET BRANCHNAME=baselines/pr_%PR_NUM%) ELSE (SET BRANCHNAME=baselines/default)
        SET BRANCHCHECK=
        FOR /F %%I IN ('git ls-remote --heads %REPO% %BRANCHNAME%') DO SET BRANCHCHECK=%%I
        IF %ERRORLEVEL% NEQ 0 ECHO Faled to check branch %BRANCHNAME% existence & GOTO:FAIL
        IF [%BRANCHCHECK%] NEQ [] (
        ECHO Skip branch creation. Branch %BRANCHNAME% already exists. Hash:%BRANCHCHECK%
        ) ELSE (
        SET HEADHASH=
        FOR /F %%I IN ('git ls-remote %REPO% HEAD') DO SET HEADHASH=%%I
        IF [%HEADHASH%] EQU [] ECHO Cannot find baselines repository HEAD & GOTO:FAIL
        ECHO Create baselines branch %BRANCHNAME%
        gh api /repos/%USER%/%REPONAME%/git/refs -i -F ref=refs/heads/%BRANCHNAME% -F sha=%HEADHASH% | FIND "201 Created"
        IF ERRORLEVEL 1 (ECHO Failed to create baselines branch %BRANCHNAME% & GOTO:FAIL) ELSE (ECHO Created baselines branch %BRANCHNAME%)
        )
        ECHO Done
        EXIT /B 0
        :FAIL
        EXIT /B 1
        ECHO "##vso[task.setvariable variable=baselines_branch]%BRANCHNAME%"
        ECHO "##vso[task.setvariable variable=baselines_head]%BRANCHCHECK%"
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: Checkout test baselines
    env:
      GITHUB_TOKEN: $(BASELINES_GH_PAT)

##############################################################################################
#  Tests: Windows (NETFX 4.7.2)                                                              #
#  Windows 2019 (for Win2019 docker images, chocolatey-dependent tests and non-docker tests) #
##############################################################################################
- job: test_win_netfx472_job_2019
  pool:
    vmImage: 'windows-2019'
  displayName: 'Tests: Win / NETFX 4.7.2 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_win2019, 'true'), eq(test_config.enable_fw_net472, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_win }}
            script: ${{ test_config.script_win }}
            psscript: ${{ test_config.psscript_win }}

  steps:
  - template: test-workflow-windows.yml
    parameters:
      isCore: false
      artifacts: $(netfx472_tests)
      framework: '.NETFramework,Version=v4.7.2'
      titleFramework: 'NET472'
      with_baselines: ${{ parameters.with_baselines }}

#############################################
#  Tests: Windows (NETFX 4.7.2)             #
#  Windows 2016 (for Win2016 docker images) #
#############################################
- job: test_win_netfx472_job_2016
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'Tests: Win / NETFX 4.7.2 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_win2016, 'true'), eq(test_config.enable_fw_net472, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_win }}
            script: ${{ test_config.script_win }}
            psscript: ${{ test_config.psscript_win }}

  steps:
  - template: test-workflow-windows.yml
    parameters:
      isCore: true
      artifacts: $(netfx472_tests)
      framework: '.NETFramework,Version=v4.7.2'
      titleFramework: 'NET472'
      with_baselines: ${{ parameters.with_baselines }}

###################################
#  Tests: Windows (NETCOREAPP2_1) #
#  Windows 2016                   #
###################################
- job: test_win2016_netcoreapp21_job
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'Tests: Win / NETCOREAPP2.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_win2016, 'true'), eq(test_config.enable_fw_netcore21, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_win }}
            script: ${{ test_config.script_win }}
            psscript: ${{ test_config.psscript_win }}

  steps:
  - template: test-workflow-windows.yml
    parameters:
      isCore: true
      artifacts: $(netcore21_tests)
      framework: '.NETCoreApp,Version=v2.1'
      titleFramework: 'NETCOREAPP2.1'
      with_baselines: ${{ parameters.with_baselines }}

###################################
#  Tests: Windows (NETCOREAPP3_1) #
#  Windows 2016                   #
###################################
- job: test_win2016_netcoreapp31_job
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'Tests: Win / NETCOREAPP3.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_win2016, 'true'), eq(test_config.enable_fw_netcore31, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_win }}
            script: ${{ test_config.script_win }}
            psscript: ${{ test_config.psscript_win }}

  steps:
  - template: test-workflow-windows.yml
    parameters:
      isCore: true
      artifacts: $(netcore31_tests)
      framework: '.NETCoreApp,Version=v3.1'
      titleFramework: 'NETCOREAPP3.1'
      with_baselines: ${{ parameters.with_baselines }}

###################################
#  Tests: Windows (NETCOREAPP2_1) #
#  Windows 2019                   #
###################################
- job: test_win2019_netcoreapp21_job
  pool:
    vmImage: 'windows-2019'
  displayName: 'Tests: Win / NETCOREAPP2.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_win2019, 'true'), eq(test_config.enable_fw_netcore21, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_win }}
            script: ${{ test_config.script_win }}
            psscript: ${{ test_config.psscript_win }}

  steps:
  - template: test-workflow-windows.yml
    parameters:
      isCore: true
      artifacts: $(netcore21_tests)
      framework: '.NETCoreApp,Version=v2.1'
      titleFramework: 'NETCOREAPP2.1'
      with_baselines: ${{ parameters.with_baselines }}

########################################
#  Tests: Ubuntu 20.04 (NETCOREAPP2_1) #
########################################
- job: test_ubuntu_20_netcoreapp21_job
  pool:
    vmImage: 'ubuntu-20.04'
  displayName: 'Tests: Lin / NETCOREAPP2.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_ubuntu20, 'true'), eq(test_config.enable_fw_netcore21, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_linux }}
            script: ${{ test_config.script_linux }}
            docker_login: ${{ test_config.docker_login }}
            nuget: ${{ test_config.nuget_linux }}

  steps:
  - template: test-workflow-linux.yml
    parameters:
      artifacts: $(netcore21_tests)
      netcoreversion: '2.1'
      with_baselines: ${{ parameters.with_baselines }}

########################################
#  Tests: Ubuntu 20.04 (NETCOREAPP3_1) #
########################################
- job: test_ubuntu_20_netcoreapp31_job
  pool:
    vmImage: 'ubuntu-20.04'
  displayName: 'Tests: Lin / NETCOREAPP3.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_ubuntu20, 'true'), eq(test_config.enable_fw_netcore31, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_linux }}
            script: ${{ test_config.script_linux }}
            docker_login: ${{ test_config.docker_login }}
            nuget: ${{ test_config.nuget_linux }}

  steps:
  - template: test-workflow-linux.yml
    parameters:
      artifacts: $(netcore31_tests)
      netcoreversion: '3.1'
      with_baselines: ${{ parameters.with_baselines }}

########################################
#  Tests: Ubuntu 16.04 (NETCOREAPP2_1) #
########################################
- job: test_ubuntu_16_netcoreapp21_job
  pool:
    vmImage: 'ubuntu-16.04'
  displayName: 'Tests: Lin / NETCOREAPP2.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_ubuntu16, 'true'), eq(test_config.enable_fw_netcore21, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_linux }}
            script: ${{ test_config.script_linux }}
            docker_login: ${{ test_config.docker_login }}
            nuget: ${{ test_config.nuget_linux }}

  steps:
  - template: test-workflow-linux.yml
    parameters:
      artifacts: $(netcore21_tests)
      netcoreversion: '2.1'
      with_baselines: ${{ parameters.with_baselines }}

#################################
#  Tests: MacOS (NETCOREAPP2_1) #
#################################
- job: test_macos_netcoreapp21_job
  pool:
    vmImage: 'macOS-10.15'
  displayName: 'Tests: Mac / NETCOREAPP2.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_macos, 'true'), eq(test_config.enable_fw_netcore21, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_macos }}
            script: ${{ test_config.script_macos }}
            docker: ${{ test_config.install_docker_macos }}
            docker_login: ${{ test_config.docker_login }}
            nuget: ${{ test_config.nuget_macos }}

  steps:
  - template: test-workflow-macos.yml
    parameters:
      artifacts: $(netcore21_tests)
      netcoreversion: '2.1'
      with_baselines: ${{ parameters.with_baselines }}

#################################
#  Tests: MacOS (NETCOREAPP3_1) #
#################################
- job: test_macos_netcoreapp31_job
  pool:
    vmImage: 'macOS-10.15'
  displayName: 'Tests: Mac / NETCOREAPP3.1 / '
  dependsOn: create_baselines_branch
  condition: ${{ parameters.enabled }}

  strategy:
    matrix:
      ${{ each test_config in parameters.test_matrix }}:
        ${{ if and(eq(test_config.enable_os_macos, 'true'), eq(test_config.enable_fw_netcore31, 'true'), eq(test_config.is_experimental, parameters.experimental)) }}:
          ${{ test_config.name }}:
            title: ${{ test_config.title }}
            config: ${{ test_config.config_macos }}
            script: ${{ test_config.script_macos }}
            docker: ${{ test_config.install_docker_macos }}
            docker_login: ${{ test_config.docker_login }}
            nuget: ${{ test_config.nuget_macos }}

  steps:
  - template: test-workflow-macos.yml
    parameters:
      artifacts: $(netcore31_tests)
      netcoreversion: '3.1'
      with_baselines: ${{ parameters.with_baselines }}

################################################################
# This job runs after all tests and:                           #
# - if baselines branch has commits create PR (if none exists) #
# - if baselines branch has no commits - delete branch         #
# - if PR created, post link to it to main PR                  #
################################################################
- job: create_baselines_pr
  pool:
    vmImage: 'windows-2019'
  displayName: 'Create Test Baselines Pull Request'
  dependsOn:
  - test_win_netfx472_job_2019
  - test_win_netfx472_job_2016
  - test_win2016_netcoreapp21_job
  - test_win2016_netcoreapp31_job
  - test_win2019_netcoreapp21_job
  - test_ubuntu_20_netcoreapp21_job
  - test_ubuntu_20_netcoreapp31_job
  - test_ubuntu_16_netcoreapp21_job
  - test_macos_netcoreapp21_job
  - test_macos_netcoreapp31_job
  condition: and(${{ parameters.enabled }}, ${{ parameters.with_baselines }})

  steps:
  - task: CmdLine@2
    inputs:
      script: |
        ECHO OFF
        SET PRNUM=$(system.pullRequest.pullRequestNumber)
        SET BRANCHNAME=$(baselines_branch)
        SET BRANCHROOT=$(baselines_head)
        SET USER=linq2db
        SET REPONAME=linq2db.baselines
        SET SRCUSER=linq2db
        SET SRCREPONAME=linq2db
        SET REPO=https://%GITHUB_TOKEN%@github.com/%USER%/%REPONAME%.git
        IF [%BRANCHNAME%] EQU [] ECHO Baselines branch %BRANCHNAME% not found & GOTO:FAIL
        IF [%BRANCHROOT%] EQU [] ECHO Baselines branch root hash missing & GOTO:FAIL
        SET CURRENTHEAD=
        FOR /F %%I IN ('git ls-remote --heads %REPO% %BRANCHNAME%') DO SET CURRENTHEAD=%%I
        IF %ERRORLEVEL% EQU 1 ECHO Faled to check branch %BRANCHNAME% head & GOTO:FAIL
        IF [%CURRENTHEAD%] EQU [] ECHO Baselines branch %BRANCHNAME% doesn't exist & GOTO:FAIL
        IF [%BRANCHROOT%] EQU [%CURRENTHEAD%] (
        ECHO Baselines branch has no commits, remove it
        gh api -XDELETE /repos/%USER%/%REPONAME%/git/refs/heads/%BRANCHNAME%
        IF %ERRORLEVEL% EQU 0 ECHO Deleted empty baselines branch %BRANCHNAME% & GOTO:DONE
        ELSE ECHO Failed to delete baselines branch %BRANCHNAME% & GOTO:FAIL
        )
        gh api -XGET /repos/%USER%/%REPONAME%/pulls -F state=open -F head=MaceWindu:%BRANCHNAME% | FIND "html_url"
        IF %ERRORLEVEL% EQU 0 ECHO Baselines PR already exists, exit & GOTO:DONE
        IF [%PRNUM%] EQU [] (
        SET PRNAME=Baselines
        SET PRMESSAGE="Not associated with any pull request (tests triggered manually on master?)"
        ) ELSE (
        SET SOURCEPR=https://github.com/%SRCUSER%/%SRCREPONAME%/pulls/%PRNUM%
        SET PRNAME="Baselines for %SOURCEPR%"
        SET PRMESSAGE="Baselines for [#%PRNUM%](%SOURCEPR%)"
        )
        gh api /repos/%USER%/%REPONAME%/pulls -F title=%PRNAME% -F head=%BRANCHNAME% -F base=master -F draft=true -F body=%PRMESSAGE% | FIND "html_url"
        IF %ERRORLEVEL% EQU 1 ECHO Baselines PR creation failed & GOTO:FAIL
        IF [%PRNUM%] NEQ [] (
        SET MSG="Test baselines changed by this PR. Don't forget to merge/close baselines PR after this pr merged/closed."
        gh api /repos/%SRCUSER%/%SRCREPONAME%/issues/%PRNUM%/comments -F body=%MSG% | FIND "html_url"
        IF %ERRORLEVEL% EQU 1 ECHO Posting in source PR failed & GOTO:FAIL
        )
        :DONE
        ECHO Done
        EXIT /B 0
        :FAIL
        EXIT /B 1
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    displayName: Create Baselines PR
    env:
      GITHUB_TOKEN: $(BASELINES_GH_PAT)
