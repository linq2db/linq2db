parameters:
  with_nugets: false
  with_examples: false
  with_tests: false
  with_analyzers: false
  with_api_analyzers: false

jobs:
- job: build_job
  pool:
    vmImage: 'windows-2022'
  displayName: 'Build'

  steps:

  # .NET 6, 8 and 9 SDKs already installed https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
  # Don't add explicit SDK install for now as it will break LinqToDB.CLI without fix for https://github.com/dotnet/sdk/issues/45926

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
      workingDirectory: '$(Build.SourcesDirectory)'
      arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(assemblyVersion) -prop Version
    displayName: Update Linq To DB main assembly version

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
      workingDirectory: '$(Build.SourcesDirectory)'
      arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(ef3AssemblyVersion) -prop EF3Version
    displayName: Update EF.Core 3.1 integration assembly version

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
      workingDirectory: '$(Build.SourcesDirectory)'
      arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(ef6AssemblyVersion) -prop EF6Version
    displayName: Update EF.Core 6 integration assembly version

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
      workingDirectory: '$(Build.SourcesDirectory)'
      arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(ef8AssemblyVersion) -prop EF8Version
    displayName: Update EF.Core 8 integration assembly version

  - task: PowerShell@2
    inputs:
      filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
      workingDirectory: '$(Build.SourcesDirectory)'
      arguments: -path $(Build.SourcesDirectory)/Directory.Build.props -version $(ef9AssemblyVersion) -prop EF9Version
    displayName: Update EF.Core 9 integration assembly version

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: 'Examples/Examples.sln'
      arguments: '--configuration Debug'
    displayName: Build Examples (verify)
    condition: and(succeeded(), ${{ parameters.with_examples }})

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: $(solution)
      arguments: --configuration $(test_configuration)
    displayName: Build Solution for Tests
    condition: and(succeeded(), ${{ parameters.with_tests }})
    retryCountOnTaskFailure: 1 # https://github.com/dotnet/sdk/issues/44080

  - task: CmdLine@2
    inputs:
      script: |
        ECHO ON
        REM publish main and ef.core tests for all TFMs (without architecture!)
        FOR %%f IN ($(netfx_tfm) net6.0 net8.0 net9.0) DO (
            dotnet publish Tests/Linq/Tests.csproj -f %%f -c $(test_configuration) -o .build/publish/Tests/$(test_configuration)/%%f_x64
            if %errorlevel% neq 0 exit

            IF %%f EQU net9.0 (
                dotnet publish Tests/EntityFrameworkCore/Tests.EntityFrameworkCore.STS.csproj -f %%f -c $(test_configuration) -o .build/publish/EFTests/$(test_configuration)/%%f_x64
            ) ELSE (
                dotnet publish Tests/EntityFrameworkCore/Tests.EntityFrameworkCore.csproj -f %%f -c $(test_configuration) -o .build/publish/EFTests/$(test_configuration)/%%f_x64
            )
            if %errorlevel% neq 0 exit
        )

        REM publish main and ef.core tests for all TFMs for win-x86
        FOR %%f IN ($(netfx_tfm) net6.0 net8.0 net9.0) DO (
            IF %%f EQU $(netfx_tfm) (
                dotnet publish Tests/Linq/Tests.csproj -f %%f -c $(test_configuration) -a x86 -o .build/publish/Tests/$(test_configuration)/%%f_x86
            ) ELSE (
                dotnet publish Tests/Linq/Tests.csproj -f %%f -c $(test_configuration) -a x86 /p:DB2STUB=True -o .build/publish/Tests/$(test_configuration)/%%f_x86
            )
            if %errorlevel% neq 0 exit

            IF %%f EQU net9.0 (
                dotnet publish Tests/EntityFrameworkCore/Tests.EntityFrameworkCore.STS.csproj -f %%f -c $(test_configuration) -a x86 -o .build/publish/EFTests/$(test_configuration)/%%f_x86
            ) ELSE (
                dotnet publish Tests/EntityFrameworkCore/Tests.EntityFrameworkCore.csproj -f %%f -c $(test_configuration) -a x86 -o .build/publish/EFTests/$(test_configuration)/%%f_x86
            )
            if %errorlevel% neq 0 exit
        )

        mkdir testing
        if %errorlevel% neq 0 exit

        REM prepare test artifacts with binaries and test configs
        FOR %%f IN ($(netfx_tfm) net6.0 net8.0 net9.0) DO (
            FOR %%a IN (x86 x64) DO (
                xcopy /i /s .build\publish\Tests\$(test_configuration)\%%f_%%a testing\%%f\main\%%a
                if %errorlevel% neq 0 exit
                xcopy /i /s .build\publish\EFTests\$(test_configuration)\%%f_%%a testing\%%f\efcore\%%a
                if %errorlevel% neq 0 exit
                copy DataProviders.json testing\%%f\main\%%a
                if %errorlevel% neq 0 exit
                copy DataProviders.json testing\%%f\efcore\%%a
                if %errorlevel% neq 0 exit
            )
        )

        REM copy sqlite.interop.dll runtime, missing from publish for NETFX
        copy .build\bin\Tests\$(test_configuration)\$(netfx_tfm)\x86\SQLite.Interop.dll testing\$(netfx_tfm)\main\x86\x86\SQLite.Interop.dll
        if %errorlevel% neq 0 exit
        copy .build\bin\Tests\$(test_configuration)\$(netfx_tfm)\x64\SQLite.Interop.dll testing\$(netfx_tfm)\main\x64\x64\SQLite.Interop.dll
        if %errorlevel% neq 0 exit

        FOR %%c IN (netfx net60 net80 net90) DO (
            xcopy /i Build\$(test_configuration)\%%c testing\configs\%%c
            if %errorlevel% neq 0 exit
        )

        xcopy /i Build\$(test_configuration)\scripts testing\scripts
        if %errorlevel% neq 0 exit

        copy "Data\Create Scripts\Northwind.sql" testing\scripts\northwind.sql
        if %errorlevel% neq 0 exit
    condition: and(succeeded(), ${{ parameters.with_tests }})
    displayName: Build Test Artifacts

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/testing'
      artifact: $(artifact_test_binaries)
    condition: and(succeeded(), ${{ parameters.with_tests }})
    displayName: Publish Test Artifacts

# we shouldn't care about CI cleanup in general, but it's about limited disk space we need for next tasks
  - task: CmdLine@2
    inputs:
      script: |
        ECHO ON
        RD $(Build.SourcesDirectory)\testing /S /Q
        RD $(Build.SourcesDirectory)\.build /S /Q
    condition: and(succeeded(), ${{ parameters.with_tests }})
    displayName: Cleanup Test Artifacts

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: $(solution)
      arguments: -property:ContinuousIntegrationBuild=true -property:RunAnalyzersDuringBuild=$(with_analyzers) -property:RunApiAnalyzersDuringBuild=$(with_api_analyzers) --configuration $(release_configuration)
    displayName: Build Solution for Release and Nuget
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB/Release'
      artifact: '$(artifact_linq2db_binaries)'
    displayName: Publish linq2db build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.Tools/Release'
      artifact: '$(artifact_linq2db_tools_binaries)'
    displayName: Publish linq2db.Tools build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.Extensions/Release'
      artifact: '$(artifact_linq2db_extensions_binaries)'
    displayName: Publish linq2db.Extensions build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.Remote.Wcf/Release'
      artifact: '$(artifact_linq2db_remote_wcf_binaries)'
    displayName: Publish linq2db.remote.Wcf build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.Remote.Grpc/Release'
      artifact: '$(artifact_linq2db_remote_grpc_binaries)'
    displayName: Publish linq2db.remote.Grpc build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.CLI/Release'
      artifact: '$(artifact_linq2db_cli_binaries)'
    displayName: Publish linq2db.CLI build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.Scaffold/Release'
      artifact: '$(artifact_linq2db_scaffold_binaries)'
    displayName: Publish linq2db.Scaffold build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.FSharp/Release'
      artifact: '$(artifact_linq2db_fsharp_binaries)'
    displayName: Publish linq2db.FSharp build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.EntityFrameworkCore/Release'
      artifact: '$(artifact_linq2db_efcore_binaries)'
    displayName: Publish linq2db.EntityFrameworkCore build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/LinqToDB.EntityFrameworkCore.STS/Release'
      artifact: '$(artifact_linq2db_efcore_sts_binaries)'
    displayName: Publish linq2db.EntityFrameworkCore.STS build results
    condition: and(succeeded(), ${{ parameters.with_nugets }})

  - task: PublishPipelineArtifact@1
    inputs:
      path: '$(Build.SourcesDirectory)/.build/bin/NuGet/$(release_configuration)'
      artifact: '$(artifact_t4_binaries)'
    displayName: Publish nuget artifacts part 1
    condition: and(succeeded(), ${{ parameters.with_nugets }})
