variables:
  solution: 'linq2db.sln'
  build_configuration: 'Azure'
  assemblyVersion: 3.1.3
  nugetVersion: 3.1.3
  nugetDevVersion: 3.1.3
  artifact_nugets: 'nugets'
  artifact_linq2db_binaries: 'linq2db_binaries'
  artifact_linq2db_tools_binaries: 'linq2db_tools_binaries'
  artifact_linq2db_aspnet_binaries: 'linq2db_aspnet_binaries'
#  netfx45_tests: 'netfx45_tests' # maybe later
  netfx46_tests: 'netfx46_tests'
  netcore21_tests: 'netcoreapp21_tests'
  netcore31_tests: 'netcoreapp31_tests'

# build on commits to important branches: 'release', 'master'
trigger:
  - master
  - release
# don't trigger pr builds by default, users should trigger them manually using /azp bot commands to avoid situations
# when we have multiple test runs waiting for free job, when nobody needs them
# we only want to trigger it for pr to release branch
pr:
  - release

stages:

########################################
#  Build and publish testable binaries #
########################################
- stage: ''
  displayName: ''
  jobs:
  - job: build_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build'

    steps:

    # mitigate https://status.dev.azure.com/_event/182998791
    - task: NuGetToolInstaller@1

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Build/linq2db.Default.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m'
      displayName: Build Solution

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp2.1 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project for netcore 2.1

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp3.1 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project for netcore 3.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP2.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp3.1/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP3.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/net46'
      displayName: Copy test configs for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/netcoreapp21'
      displayName: Copy test configs for NETCOREAPP2.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp3.1/publish/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/netcoreapp31'
      displayName: Copy test configs for NETCOREAPP3.1

    - task: CmdLine@2
      inputs:
        script: 'copy "$(System.DefaultWorkingDirectory)\Data\Create Scripts\Northwind.sql" $(Build.SourcesDirectory)\Build\Azure\scripts\northwind.sql'
      displayName: Copy northwind.sql to scripts

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp3.1/publish/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETCOREAPP3.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETCOREAPP2.1

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        artifact: '$(netfx46_tests)'
      displayName: Publish test artifacts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.1/publish'
        artifact: '$(netcore21_tests)'
      displayName: Publish test artifacts for NETCOREAPP2.1

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp3.1/publish'
        artifact: '$(netcore31_tests)'
      displayName: Publish test artifacts for NETCOREAPP3.1

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'
        artifact: '$(artifact_linq2db_binaries)'
      displayName: Publish linq2db build results

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'
        artifact: '$(artifact_linq2db_tools_binaries)'
      displayName: Publish linq2db.Tools build results

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Source/LinqToDB.AspNet/bin/Release'
        artifact: '$(artifact_linq2db_aspnet_binaries)'
      displayName: Publish linq2db.AspNet build results

#############################
#  Build and Publish nugets #
#############################
  - job: build_nugets_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Nugets Generation'
    variables:
      - template: nuget-vars.yml
    dependsOn: build_job
    condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.SourceBranchName'], 'master')))

    steps:

    - powershell: echo "##vso[task.setvariable variable=packageVersion]$(packageVersion)-rc.$(Build.BuildId)"
      condition: ne(variables['Build.SourceBranchName'], 'release')
      displayName: Update nuget version

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifact_linq2db_binaries)'
        targetPath: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifact_linq2db_Tools_binaries)'
        targetPath: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifact_linq2db_aspnet_binaries)'
        targetPath: '$(Build.SourcesDirectory)/Source/LinqToDB.AspNet/bin/Release'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/BuildNuspecs.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/NuGet/*.nuspec -version $(packageVersion) -branch $(Build.SourceBranchName)
      displayName: Update nuspecs

    - task: CmdLine@2
      inputs:
        script: $(Build.SourcesDirectory)/NuGet/PackCI.bat
        workingDirectory: $(Build.SourcesDirectory)/NuGet
      displayName: Build nugets

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/NuGet/built'
        artifactName: '$(artifact_nugets)'
      displayName: Publish nugets to artifacts

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/NuGet/built/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '0dcc414b-ea54-451e-a54f-d63f05367c4b/967a4107-9788-41a4-9f6d-a2318aab1410'
      displayName: Publish to Azure Artifacts feed
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))

# apikey exires around 31/07/2020
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/NuGet/built/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'linq2db nuget.org feed'
      displayName: Publish to Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

##############################################################################################
#  Tests: Windows (NETFX 4.6)                                                                #
#  Windows 2019 (for Win2019 docker images, chocolatey-dependent tests and non-docker tests) #
##############################################################################################
  - job: test_win_netfx46_job_2019
    pool:
      vmImage: 'windows-2019'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        Access_OLEDB_JET:
          title: 'Access Jet'
          config: 'access'
        Access_OLEDB_ACE:
          title: 'Access ACE'
          config: 'access.ace'
          script: 'access.ace.cmd'
        Access_ODBC_MDB:
          title: 'Access ODBC MDB'
          config: 'access.odbc.mdb'
        Access_ODBC_ACE:
          title: 'Access ODBC ACE'
          config: 'access.odbc.ace'
          script: 'access.ace.cmd'
        SqlCE:
          title: 'SQL CE'
          config: 'sqlce'
          psscript: 'sqlce.ps1'
#        MariaDB:
#          title: 'MariaDB'
#          config: 'mariadb'
#          script: 'mariadb.cmd'
        SqlServer2019:
          title: 'SQL Server 2019 (System.Data.SqlClient)'
          config: 'sqlserver.2019'
          script: 'sqlserver.2019.cmd'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2019.ms'
          script: 'sqlserver.2019.cmd'
#        PostgreSQL10:
#          title: 'PostgreSQL 10'
#          config: 'pgsql10'
#          script: 'pgsql10.cmd'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
        testRunTitle: 'Windows / NET46 / $(title)'
      displayName: '$(title)'

#############################################
#  Tests: Windows (NETFX 4.6)               #
#  Windows 2016 (for Win2016 docker images) #
#############################################
  - job: test_win_netfx46_job_2016
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        SqlServer2005:
          title: 'SQL Server 2005 (System.Data.SqlClient)'
          config: 'sqlserver.2005'
          script: 'sqlserver.2005.cmd'
#        SqlServer2005_MS:
#          title: 'SQL Server 2005 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2005.ms'
#          script: 'sqlserver.2005.cmd'
        SqlServer2008:
          title: 'SQL Server 2008 (System.Data.SqlClient)'
          config: 'sqlserver.2008'
          script: 'sqlserver.2008.cmd'
#        SqlServer2008_MS:
#          title: 'SQL Server 2008 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2008.ms'
#          script: 'sqlserver.2008.cmd'
        SqlServer2012:
          title: 'SQL Server 2012 (System.Data.SqlClient)'
          config: 'sqlserver.2012'
          script: 'sqlserver.2012.cmd'
#        SqlServer2012_MS:
#          title: 'SQL Server 2012 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2012.ms'
#          script: 'sqlserver.2012.cmd'
        SqlServer2014:
          title: 'SQL Server 2014 (System.Data.SqlClient)'
          config: 'sqlserver.2014'
          script: 'sqlserver.2014.cmd'
#        SqlServer2014_MS:
#          title: 'SQL Server 2014 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2014.ms'
#          script: 'sqlserver.2014.cmd'
        SqlServer2016:
          title: 'SQL Server 2016 (System.Data.SqlClient)'
          config: 'sqlserver.2016'
          script: 'sqlserver.2016.cmd'
#        SqlServer2016_MS:
#          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2016.ms'
#          script: 'sqlserver.2016.cmd'
        SqlServer2017:
          title: 'SQL Server 2017 (System.Data.SqlClient)'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.cmd'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2017.ms'
#          script: 'sqlserver.2017.cmd'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
        testRunTitle: 'Windows / NET46 / $(title)'
      displayName: '$(title)'

###################################
#  Tests: Windows (NETCOREAPP2_1) #
#  Windows 2016                   #
###################################
  - job: test_win2016_netcoreapp21_job
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        Access_ODBC_ACE:
          title: 'Access ODBC ACE'
          config: 'access.odbc.ace'
          script: 'access.ace.x64.cmd'
# disabled due to a lot of random crashes https://github.com/dotnet/runtime/issues/36954
#        Access_OLEDB_ACE:
#          title: 'Access OleDb ACE'
#          config: 'access.ace'
#          script: 'access.ace.x64.cmd'
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        SqlCE:
          title: 'SQL CE'
          config: 'sqlce'
          psscript: 'sqlce.ps1'
        SqlServer2005:
          title: 'SQL Server 2005 (System.Data.SqlClient)'
          config: 'sqlserver.2005'
          script: 'sqlserver.2005.cmd'
#        SqlServer2005_MS:
#          title: 'SQL Server 2005 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2005.ms'
#          script: 'sqlserver.2005.cmd'
        SqlServer2008:
          title: 'SQL Server 2008 (System.Data.SqlClient)'
          config: 'sqlserver.2008'
          script: 'sqlserver.2008.cmd'
#        SqlServer2008_MS:
#          title: 'SQL Server 2008 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2008.ms'
#          script: 'sqlserver.2008.cmd'
        SqlServer2012:
          title: 'SQL Server 2012 (System.Data.SqlClient)'
          config: 'sqlserver.2012'
          script: 'sqlserver.2012.cmd'
#        SqlServer2012_MS:
#          title: 'SQL Server 2012 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2012.ms'
#          script: 'sqlserver.2012.cmd'
        SqlServer2014:
          title: 'SQL Server 2014 (System.Data.SqlClient)'
          config: 'sqlserver.2014'
          script: 'sqlserver.2014.cmd'
#        SqlServer2014_MS:
#          title: 'SQL Server 2014 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2014.ms'
#          script: 'sqlserver.2014.cmd'
        SqlServer2016:
          title: 'SQL Server 2016 (System.Data.SqlClient)'
          config: 'sqlserver.2016'
          script: 'sqlserver.2016.cmd'
#        SqlServer2016_MS:
#          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2016.ms'
#          script: 'sqlserver.2016.cmd'
        SqlServer2017:
          title: 'SQL Server 2017 (System.Data.SqlClient)'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.cmd'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2017.ms'
#          script: 'sqlserver.2017.cmd'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.1'
        testRunTitle: 'Windows / NETCOREAPP2.1 / $(title)'
      displayName: '$(title)'

###################################
#  Tests: Windows (NETCOREAPP3_1) #
#  Windows 2016                   #
###################################
  - job: test_win2016_netcoreapp31_job
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETCOREAPP3.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
# disabled due to a lot of random crashes https://github.com/dotnet/runtime/issues/36954
#        Access_OLEDB_ACE:
#          title: 'Access OleDb ACE'
#          config: 'access.ace'
#          script: 'access.ace.x64.cmd'
        Access_ODBC_ACE:
          title: 'Access ODBC ACE'
          config: 'access.odbc.ace'
          script: 'access.ace.x64.cmd'
#        SQLite:
#          title: 'SQLite'
#          config: 'sqlite'
#        SQLite_MS:
#          title: 'SQLite.MS'
#          config: 'sqlite.ms'
#        SqlCE:
#          title: 'SQL CE'
#          config: 'sqlce'
#          psscript: 'sqlce.ps1'
#        SqlServer2005:
#          title: 'SQL Server 2005 (System.Data.SqlClient)'
#          config: 'sqlserver.2005'
#          script: 'sqlserver.2005.cmd'
#        SqlServer2005_MS:
#          title: 'SQL Server 2005 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2005.ms'
#          script: 'sqlserver.2005.cmd'
#        SqlServer2008:
#          title: 'SQL Server 2008 (System.Data.SqlClient)'
#          config: 'sqlserver.2008'
#          script: 'sqlserver.2008.cmd'
#        SqlServer2008_MS:
#          title: 'SQL Server 2008 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2008.ms'
#          script: 'sqlserver.2008.cmd'
#        SqlServer2012:
#          title: 'SQL Server 2012 (System.Data.SqlClient)'
#          config: 'sqlserver.2012'
#          script: 'sqlserver.2012.cmd'
#        SqlServer2012_MS:
#          title: 'SQL Server 2012 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2012.ms'
#          script: 'sqlserver.2012.cmd'
#        SqlServer2014:
#          title: 'SQL Server 2014 (System.Data.SqlClient)'
#          config: 'sqlserver.2014'
#          script: 'sqlserver.2014.cmd'
#        SqlServer2014_MS:
#          title: 'SQL Server 2014 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2014.ms'
#          script: 'sqlserver.2014.cmd'
#        SqlServer2016:
#          title: 'SQL Server 2016 (System.Data.SqlClient)'
#          config: 'sqlserver.2016'
#          script: 'sqlserver.2016.cmd'
#        SqlServer2016_MS:
#          title: 'SQL Server 2016 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2016.ms'
#          script: 'sqlserver.2016.cmd'
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.2017'
#          script: 'sqlserver.2017.cmd'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.2017.ms'
#          script: 'sqlserver.2017.cmd'
#        PostgreSQL10:
#          title: 'PostgreSQL 10'
#          config: 'pgsql10'
#          script: 'pgsql10.cmd'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore31_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v3.1'
        testRunTitle: 'Windows / NETCOREAPP3.1 / $(title)'
      displayName: '$(title)'

###################################
#  Tests: Windows (NETCOREAPP2_1) #
#  Windows 2019                   #
###################################
  - job: test_win2019_netcoreapp21_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Tests: Win / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
#        MariaDB:
#          title: 'MariaDB'
#          config: 'mariadb.win'
#          script: 'mariadb.cmd'
        SqlServer2019:
          title: 'SQL Server 2019 (System.Data.SqlClient)'
          config: 'sqlserver.2019'
          script: 'sqlserver.2019.cmd'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.2019.ms'
          script: 'sqlserver.2019.cmd'
#        PostgreSQL10:
#          title: 'PostgreSQL 10'
#          config: 'pgsql10'
#          script: 'pgsql10.cmd'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.1'
        testRunTitle: 'Windows / NETCOREAPP2.1 / $(title)'
      displayName: '$(title)'

########################################
#  Tests: Ubuntu 20.04 (NETCOREAPP2_1) #
########################################
  - job: test_ubuntu_20_netcoreapp21_job
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Tests: Lin / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        SqlServer2017:
          title: 'SQL Server 2017 (System.Data.SqlClient)'
          config: 'sqlserver.fts.2017'
          script: 'sqlserver.2017.sh'
        SqlServer2017_MS:
          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.fts.2017'
          script: 'sqlserver.2017.sh'
        SqlServer2019:
          title: 'SQL Server 2019 (System.Data.SqlClient)'
          config: 'sqlserver.fts.2019'
          script: 'sqlserver.2019.sh'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.fts.2019.ms'
          script: 'sqlserver.2019.sh'
        MySQL:
          title: 'MySQL'
          config: 'mysql'
          script: 'mysql.sh'
        MySQL55:
          title: 'MySQL 5.5'
          config: 'mysql55'
          script: 'mysql55.sh'
        MariaDB:
          title: 'MariaDB'
          config: 'mariadb'
          script: 'mariadb.sh'
        PostgreSQL:
          title: 'PostgreSQL'
          config: 'pgsql'
          script: 'pgsql.sh'
        PostgreSQL92:
          title: 'PostgreSQL 9.2'
          config: 'pgsql92'
          script: 'pgsql92.sh'
        PostgreSQL93:
          title: 'PostgreSQL 9.3'
          config: 'pgsql93'
          script: 'pgsql93.sh'
        PostgreSQL95:
          title: 'PostgreSQL 9.5'
          config: 'pgsql95'
          script: 'pgsql95.sh'
        PostgreSQL10:
          title: 'PostgreSQL 10'
          config: 'pgsql10'
          script: 'pgsql10.sh'
        PostgreSQL11:
          title: 'PostgreSQL 11'
          config: 'pgsql11'
          script: 'pgsql11.sh'
        Sybase:
          title: 'Sybase ASE 16'
          config: 'sybase'
          script: 'sybase.sh'
        Oracle11:
          title: 'Oracle 11g XE'
          config: 'oracle11'
          script: 'oracle11.sh'
        Oracle12:
          title: 'Oracle 12c'
          config: 'oracle12'
          script: 'oracle12.sh'
        Firebird25:
          title: 'Firebird 2.5'
          config: 'firebird25'
          script: 'firebird25.sh'
        Firebird3:
          title: 'Firebird 3.0'
          config: 'firebird3'
          script: 'firebird3.sh'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.1 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Linux / NETCOREAPP2.1 / $(title)'

########################################
#  Tests: Ubuntu 20.04 (NETCOREAPP3_1) #
########################################
  - job: test_ubuntu_20_netcoreapp31_job
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Tests: Lin / NETCOREAPP3.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
#        SQLite:
#          title: 'SQLite'
#          config: 'sqlite'
#        SQLite_MS:
#          title: 'SQLite.MS'
#          config: 'sqlite.ms'
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'sqlserver.2017.sh'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'sqlserver.2017.sh'
#        SqlServer2019:
#          title: 'SQL Server 2019 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2019'
#          script: 'sqlserver.2019.sh'
#        SqlServer2019_MS:
#          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2019.ms'
#          script: 'sqlserver.2019.sh'
        MySQL:
          title: 'MySQL'
          config: 'mysql'
          script: 'mysql.sh'
#        MySQL55:
#          title: 'MySQL 5.5'
#          config: 'mysql55'
#          script: 'mysql55.sh'
#        MariaDB:
#          title: 'MariaDB'
#          config: 'mariadb'
#          script: 'mariadb.sh'
        PostgreSQL:
          title: 'PostgreSQL'
          config: 'pgsql'
          script: 'pgsql.sh'
#        PostgreSQL92:
#          title: 'PostgreSQL 9.2'
#          config: 'pgsql92'
#          script: 'pgsql92.sh'
#        PostgreSQL93:
#          title: 'PostgreSQL 9.3'
#          config: 'pgsql93'
#          script: 'pgsql93.sh'
#        PostgreSQL95:
#          title: 'PostgreSQL 9.5'
#          config: 'pgsql95'
#          script: 'pgsql95.sh'
#        PostgreSQL10:
#          title: 'PostgreSQL 10'
#          config: 'pgsql10'
#          script: 'pgsql10.sh'
#        PostgreSQL11:
#          title: 'PostgreSQL 11'
#          config: 'pgsql11'
#          script: 'pgsql11.sh'
#        Sybase:
#          title: 'Sybase ASE 16'
#          config: 'sybase'
#          script: 'sybase.sh'
#        Oracle11:
#          title: 'Oracle 11g XE'
#          config: 'oracle11'
#          script: 'oracle11.sh'
#        Oracle12:
#          title: 'Oracle 12c'
#          config: 'oracle12'
#          script: 'oracle12.sh'
#        Firebird25:
#          title: 'Firebird 2.5'
#          config: 'firebird25'
#          script: 'firebird25.sh'
#        Firebird3:
#          title: 'Firebird 3.0'
#          config: 'firebird3'
#          script: 'firebird3.sh'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore31_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v3.1 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Linux / NETCOREAPP3.1 / $(title)'

########################################
#  Tests: Ubuntu 16.04 (NETCOREAPP2_1) #
########################################
  - job: test_ubuntu_16_netcoreapp21_job
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Tests: Lin / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        Informix14:
          title: 'Informix 14.10'
          config: 'informix'
          script: 'informix14.sh'
          nuget: 'IBM.Data.DB2.Core-lnx -Version 2.2.0.100'
        DB2:
          title: 'DB2 LUW 11.5'
          config: 'db2'
          script: 'db2.sh'
          nuget: 'IBM.Data.DB2.Core-lnx -Version 2.2.0.100'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.1 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Linux / NETCOREAPP2.1 / $(title)'

#################################
#  Tests: MacOS (NETCOREAPP2_1) #
#################################
  - job: test_macos_netcoreapp21_job
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'Tests: Mac / NETCOREAPP2.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
# temporary disabled due to stack overflow exception during test run. needs investigation
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
        SqlServer2019:
          title: 'SQL Server 2019 (System.Data.SqlClient)'
          config: 'sqlserver.fts.2019'
          script: 'mac.sqlserver.2019.sh'
          docker: 'true'
        SqlServer2019_MS:
          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
          config: 'sqlserver.fts.2019.ms'
          script: 'mac.sqlserver.2019.sh'
          docker: 'true'
        MySQL:
          title: 'MySQL'
          config: 'mysql'
          script: 'mac.mysql.sh'
          docker: 'true'
        MySQL55:
          title: 'MySQL 5.5'
          config: 'mysql55'
          script: 'mac.mysql55.sh'
          docker: 'true'
        MariaDB:
          title: 'MariaDB'
          config: 'mariadb'
          script: 'mac.mariadb.sh'
          docker: 'true'
        PostgreSQL:
          title: 'PostgreSQL'
          config: 'pgsql'
          script: 'mac.pgsql.sh'
          docker: 'true'
        PostgreSQL92:
          title: 'PostgreSQL 9.2'
          config: 'pgsql92'
          script: 'mac.pgsql92.sh'
          docker: 'true'
        PostgreSQL93:
          title: 'PostgreSQL 9.3'
          config: 'pgsql93'
          script: 'mac.pgsql93.sh'
          docker: 'true'
        PostgreSQL95:
          title: 'PostgreSQL 9.5'
          config: 'pgsql95'
          script: 'mac.pgsql95.sh'
          docker: 'true'
        PostgreSQL10:
          title: 'PostgreSQL 10'
          config: 'pgsql10'
          script: 'mac.pgsql10.sh'
          docker: 'true'
        PostgreSQL11:
          title: 'PostgreSQL 11'
          config: 'pgsql11'
          script: 'mac.pgsql11.sh'
          docker: 'true'
        Sybase:
          title: 'Sybase ASE 16'
          config: 'sybase'
          script: 'sybase.sh'
          docker: 'true'
        Oracle11:
          title: 'Oracle 11g XE'
          config: 'oracle11'
          script: 'oracle11.sh'
          docker: 'true'
        Oracle12:
          title: 'Oracle 12c'
          config: 'oracle12'
          script: 'oracle12.sh'
          docker: 'true'
        Firebird25:
          title: 'Firebird 2.5'
          config: 'firebird25'
          script: 'firebird25.sh'
          docker: 'true'
        Firebird3:
          title: 'Firebird 3.0'
          config: 'firebird3'
          script: 'firebird3.sh'
          docker: 'true'
        Informix14:
          title: 'Informix 14.10'
          config: 'informix'
          script: 'mac.informix14.sh'
          docker: 'true'
          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
        DB2:
          title: 'DB2 LUW 11.5'
          config: 'db2'
          script: 'mac.db2.sh'
          docker: 'true'
          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore21_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: 'chmod +x mac.docker.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: eq(variables['docker'], 'true')
      displayName: Mark docker install script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/mac.docker.sh'
      condition: eq(variables['docker'], 'true')
      displayName: Install Docker

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: and(succeeded(), variables['script'])
      displayName: Mark script as executable
      
    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: and(succeeded(), variables['script'])
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.1 /logger:trx
      condition: succeeded()
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Mac / NETCOREAPP2.1 / $(title)'

#################################
#  Tests: MacOS (NETCOREAPP3_1) #
#################################
  - job: test_macos_netcoreapp31_job
    pool:
      vmImage: 'macOS-10.15'
    displayName: 'Tests: Mac / NETCOREAPP3.1 / '
    dependsOn: build_job
#    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))
    condition: eq(variables['System.PullRequest.TargetBranch'], 'release')

    strategy:
      matrix:
#        SQLite:
#          title: 'SQLite'
#          config: 'sqlite'
#        SQLite_MS:
#          title: 'SQLite.MS'
#          config: 'sqlite.ms'
# temporary disabled due to stack overflow exception during test run. needs investigation
#        SqlServer2017:
#          title: 'SQL Server 2017 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        SqlServer2017_MS:
#          title: 'SQL Server 2017 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2017'
#          script: 'mac.sqlserver.2017.sh'
#          docker: 'true'
#        SqlServer2019:
#          title: 'SQL Server 2019 (System.Data.SqlClient)'
#          config: 'sqlserver.fts.2019'
#          script: 'mac.sqlserver.2019.sh'
#          docker: 'true'
#        SqlServer2019_MS:
#          title: 'SQL Server 2019 (Microsoft.Data.SqlClient)'
#          config: 'sqlserver.fts.2019.ms'
#          script: 'mac.sqlserver.2019.sh'
#          docker: 'true'
        MySQL:
          title: 'MySQL'
          config: 'mysql'
          script: 'mac.mysql.sh'
          docker: 'true'
#        MySQL55:
#          title: 'MySQL 5.5'
#          config: 'mysql55'
#          script: 'mac.mysql55.sh'
#          docker: 'true'
#        MariaDB:
#          title: 'MariaDB'
#          config: 'mariadb'
#          script: 'mac.mariadb.sh'
#          docker: 'true'
        PostgreSQL:
          title: 'PostgreSQL'
          config: 'pgsql'
          script: 'mac.pgsql.sh'
          docker: 'true'
#        PostgreSQL92:
#          title: 'PostgreSQL 9.2'
#          config: 'pgsql92'
#          script: 'mac.pgsql92.sh'
#          docker: 'true'
#        PostgreSQL93:
#          title: 'PostgreSQL 9.3'
#          config: 'pgsql93'
#          script: 'mac.pgsql93.sh'
#          docker: 'true'
#        PostgreSQL95:
#          title: 'PostgreSQL 9.5'
#          config: 'pgsql95'
#          script: 'mac.pgsql95.sh'
#          docker: 'true'
#        PostgreSQL10:
#          title: 'PostgreSQL 10'
#          config: 'pgsql10'
#          script: 'mac.pgsql10.sh'
#          docker: 'true'
#        PostgreSQL11:
#          title: 'PostgreSQL 11'
#          config: 'pgsql11'
#          script: 'mac.pgsql11.sh'
#          docker: 'true'
#        Sybase:
#          title: 'Sybase ASE 16'
#          config: 'sybase'
#          script: 'sybase.sh'
#          docker: 'true'
#        Oracle11:
#          title: 'Oracle 11g XE'
#          config: 'oracle11'
#          script: 'oracle11.sh'
#          docker: 'true'
#        Oracle12:
#          title: 'Oracle 12c'
#          config: 'oracle12'
#          script: 'oracle12.sh'
#          docker: 'true'
#        Firebird25:
#          title: 'Firebird 2.5'
#          config: 'firebird25'
#          script: 'firebird25.sh'
#          docker: 'true'
#        Firebird3:
#          title: 'Firebird 3.0'
#          config: 'firebird3'
#          script: 'firebird3.sh'
#          docker: 'true'
#        Informix14:
#          title: 'Informix 14.10'
#          config: 'informix'
#          script: 'mac.informix14.sh'
#          docker: 'true'
#          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
#        DB2:
#          title: 'DB2 LUW 11.5'
#          config: 'db2'
#          script: 'mac.db2.sh'
#          docker: 'true'
#          nuget: 'IBM.Data.DB2.Core-osx -Version 2.0.0.100'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore31_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: 'chmod +x mac.docker.sh'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: eq(variables['docker'], 'true')
      displayName: Mark docker install script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/mac.docker.sh'
      condition: eq(variables['docker'], 'true')
      displayName: Install Docker

    - task: NuGet@0
      displayName: Install nugets
      inputs:
        command: 'install'
        arguments: '$(nuget) -ExcludeVersion'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['nuget']

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: and(succeeded(), variables['script'])
      displayName: Mark script as executable
      
    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: and(succeeded(), variables['script'])
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v3.1 /logger:trx
      condition: succeeded()
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
        testRunTitle: 'Mac / NETCOREAPP3.1 / $(title)'
