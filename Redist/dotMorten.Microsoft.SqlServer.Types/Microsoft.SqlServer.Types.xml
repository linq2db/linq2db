<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.SqlServer.Types</name>
    </assembly>
    <members>
        <member name="T:Microsoft.SqlServer.Types.HierarchyIdException">
            <summary>
            The exception that is thrown for invalid SqlHierarchyId values.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.HierarchyIdException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.HierarchyIdException"/> class.
            </summary>
            <remarks>
            <para>This is the default constructor for the <see cref="T:Microsoft.SqlServer.Types.HierarchyIdException"/> class.</para>
            <para>This creates an exception object by using a default error message.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.HierarchyIdException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.HierarchyIdException"/> class with a custom error message.
            </summary>
            <param name="message">A string that contains the custom error message. </param>
            <remarks>This constructor is called when an object throwing the exception is passing custom error information.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.HierarchyIdException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.HierarchyIdException"/> with a custom error message and the triggering exception object.
            </summary>
            <param name="message">A string that contains the error message </param>
            <param name="innerException">The exception instance that caused the current exception. </param>
            <remarks>The constructor is called by another exception object to transmit exception data upstream.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.HierarchyIdException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.HierarchyIdException"/> class with serialized data. 
            </summary>
            <param name="info">An object that contains the serialized object data about the exception that is thrown. </param>
            <param name="context">An object that contains the contextual information about the source or destination </param>
            <remarks>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Types.IGeographySink">
            <summary>
            Interface used by SqlGeographyBuilder to construct a SqlGeography object. This API is obsolete. <see cref="T:Microsoft.SqlServer.Types.IGeographySink110"/> should be used instead.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.AddLine(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructs additional points other than the starting endpoint in a geography type figure. This API is obsolete. IGeographySink110 should be used instead.
            </summary>
            <param name="latitude">A double that specifies the latitude of a point in a geography figure.</param>
            <param name="longitude">A double that specifies the longitude of a point in a geography figure.</param>
            <param name="z">A double that specifies the altitude of a point in a geography figure. Is Nullable.</param>
            <param name="m">A double that specifies the measure type for the point. Is Nullable.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.BeginFigure(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Starts the call sequence for a geography figure. 
            </summary>
            <param name="latitude">A double that specifies the latitude of the starting endpoint in a geography figure.</param>
            <param name="longitude">A double that specifies the longitude of the starting endpoint in a geography figure.</param>
            <param name="z">A double that specifies the altitude of the starting endpoint in a geography figure. Is Nullable.</param>
            <param name="m">A double that specifies the measure type for the starting endpoint. Is Nullable.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.BeginGeography(Microsoft.SqlServer.Types.OpenGisGeographyType)">
            <summary>
            Initializes a call sequence for a geography type. 
            </summary>
            <param name="type">OpenGisGeometryType object that indicates the type being created by the call sequence.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.EndFigure">
            <summary>
            Finishes a call sequence for a geography figure. 
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.EndGeography">
            <summary>
            Finishes a call sequence for a geography type.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink.SetSrid(System.Int32)">
            <summary>
            Sets the Spatial Reference Identifier (SRID) for a geography type call sequence. 
            </summary>
            <param name="srid">An int that contains the Spatial Reference Identifier for the geography type.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.IGeographySink110">
            <summary>
            Defines the interface used by SqlGeographyBuilder to construct a SqlGeography object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeographySink110.AddCircularArc(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Adds a circular arc geography type figure with the specified startpoint and endpoint.
            </summary>
            <param name="x1">The startpoint x-coordinate (latitude) of the circular arc.</param>
            <param name="y1">The startpoint y-coordinate (longitude) of the circular arc.</param>
            <param name="z1">The startpoint z-coordinate (altitude) of the circular arc. Is Nullable.</param>
            <param name="m1">The startpoint m-coordinate (measure) of the circular arc. Is Nullable.</param>
            <param name="x2">The endpoint x-coordinate (latitude) of the circular arc.</param>
            <param name="y2">The endpoint y-coordinate (longitude) of the circular arc.</param>
            <param name="z2">The endpoint z-coordinate (altitude) of the circular arc. Is Nullable.</param>
            <param name="m2">The endpoint m-coordinate (measure) of the circular arc. Is Nullable.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.IGeometrySink">
            <summary>
            Defines the interface that the <see cref="T:Microsoft.SqlServer.Types.SqlGeometryBuilder"/> class uses to construct a <see cref="T:Microsoft.SqlServer.Types.SqlGeometryBuilder"/> object. This API is obsolete. <see cref="T:Microsoft.SqlServer.Types.IGeometrySink110"/> should be used instead.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.AddLine(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Defines points other than the starting endpoint in a geometry instance.
            </summary>
            <param name="x">A double that specifies the x-coordinate of a point in a geometry instance.</param>
            <param name="y">A double that specifies the y-coordinate of a point in a geometry instance.</param>
            <param name="z">A double that specifies the z-coordinate of a point in a geometry instance. Is Nullable.</param>
            <param name="m">A double that specifies the measure for the point. Is Nullable.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.BeginFigure(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Defines the starting endpoint for a geometry instance.
            </summary>
            <param name="x">A double that specifies the x-coordinate of the starting endpoint of a geometry instance.</param>
            <param name="y">A double that specifies the y-coordinate of the starting endpoint of a geometry instance.</param>
            <param name="z">A double that specifies the z-coordinate of the starting endpoint of a geometry instance. Is Nullable.</param>
            <param name="m">A double that specifies the measure for the point. Is Nullable.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.BeginGeometry(Microsoft.SqlServer.Types.OpenGisGeometryType)">
            <summary>
            Starts the call sequence of a geometry type.
            </summary>
            <param name="type">OpenGisGeometryType object that indicates the type being created by the call sequence.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.EndFigure">
            <summary>
            Finishes a call sequence for a geometry figure.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.EndGeometry">
            <summary>
            Finishes a call sequence for a geometry figure.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink.SetSrid(System.Int32)">
            <summary>
            Sets the Spatial Reference Identifier (SRID) for a geometry type call sequence. 
            </summary>
            <param name="srid">An int that contains the Spatial Reference Identifier for the geometry type.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.IGeometrySink110">
            <summary>
            Defines the interface used by <see cref="T:Microsoft.SqlServer.Types.SqlGeometryBuilder"/> to construct a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.IGeometrySink110.AddCircularArc(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Adds a circular arc geometry type figure with the specified startpoint and endpoint.
            </summary>
            <param name="x1">The startpoint x-coordinate (latitude) of the circular arc.</param>
            <param name="y1">The startpoint y-coordinate (longitude) of the circular arc.</param>
            <param name="z1">The startpoint z-coordinate (altitude) of the circular arc. Is Nullable.</param>
            <param name="m1">The startpoint m-coordinate (measure) of the circular arc. Is Nullable.</param>
            <param name="x2">The endpoint x-coordinate (latitude) of the circular arc.</param>
            <param name="y2">The endpoint y-coordinate (longitude) of the circular arc.</param>
            <param name="z2">The endpoint z-coordinate (altitude) of the circular arc. Is Nullable.</param>
            <param name="m2">The endpoint m-coordinate (measure) of the circular arc. Is Nullable.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable">
            <summary>
            <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
            <para>Defines the interface that is implemented by <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> and <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> type objects to support spatial indexing.</para>
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable.GetGridCoverage(System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean[0:,0:],System.Boolean[0:,0:],System.Int32@,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
            <para>Gets the grid coverage.</para>
            </summary>
            <param name="isTopmostGrid">Indicates whether the grid is a top level (level 1) grid.</param>
            <param name="rGridMinX">The x-coordinate of the lower-left corner of the grid.</param>
            <param name="rGridMinY">The y-coordinate of the lower-left corner of the grid.</param>
            <param name="rGridWidth">The width of the grid.</param>
            <param name="rGridHeight">The height of the grid.</param>
            <param name="rFuzzX">The x-coordinate tolerance value.</param>
            <param name="rFuzzY">The y-coordinate tolerance value.</param>
            <param name="cGridRows">The number of rows in the grid.</param>
            <param name="cGridColumns">The number of columns in the grid.</param>
            <param name="touched">A two-dimensional array of bool values that specifies whether the cells touched the object.</param>
            <param name="contained">A two-dimensional array of bool values that specifies whether the cells contained the object.</param>
            <param name="cCellsTouched">When this method returns, contains the number of cells that the object touches.</param>
            <param name="cCellsContained">When this method returns, contains the number of cells that the object contains.</param>
            <param name="fGeometryExceedsGrid">When this method returns, contains a value that indicates whether the object exceeds the grid.</param>
            <param name="fHasAmbiguousTouchedCells">When this method returns, contains a value that indicates whether the object includes ambiguously touched cells.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable.GetBoundingBoxCorners(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
            <para>Returns the bounding box corners of the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> or <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance.</para>
            </summary>
            <param name="minX">When this method returns, contains the x-coordinate of the lower-left corner of the bounding box.</param>
            <param name="minY">When this method returns, contains the y-coordinate of the lower-left corner of the bounding box.</param>
            <param name="maxX">When this method returns, contains the x-coordinate of the upper-right corner of the bounding box.</param>
            <param name="maxY">When this method returns, contains the y-coordinate of the upper-right corner of the bounding box.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable.BufferForDistanceQuery(System.Double,System.Boolean@)">
            <summary>
            <para>This API supports the product infrastructure and is not intended to be used directly from your code.</para>
            <para>Constructs a buffer for the given distance.</para>
            </summary>
            <param name="distance">The distance used to calculate the buffer.</param>
            <param name="disableInternalFiltering">When this method returns, contains a value that indicates whether internal filtering is disabled.</param>
            <returns>The <see cref="T:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable"/> object that represents the buffer for the given distance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable.InteriorBufferForDistanceQuery(System.Double)">
            <summary>
            This API supports the product infrastructure and is not intended to be used directly from your code. 
            Constructs an interior buffer for the given distance.
            </summary>
            <param name="distance">The distance used to calculate the buffer.</param>
            <returns>The <see cref="T:Microsoft.SqlServer.Types.ISqlSpatialGridIndexable"/> object that represents the interior buffer for the given distance.</returns>
        </member>
        <member name="T:Microsoft.SqlServer.Types.OpenGisGeographyType">
            <summary>
            Lists supported and extended Open GIS geography types.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.Point">
            <summary>
            Point is a 0-dimensional object that represents a single location. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.LineString">
            <summary>
            LineString is a one-dimensional object that represents a sequence of points and the line segments connecting them.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.Polygon">
            <summary>
            Polygon is a two-dimensional surface stored as a sequence of points defining an exterior bounding ring and zero or more interior rings. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.MultiPoint">
            <summary>
            MultiPoint is a collection of zero or more points. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.MultiLineString">
            <summary>
            MultiLineString is a collection of zero or more geographyLineString instances. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.MultiPolygon">
            <summary>
            MultiPolygon is a collection of zero or more Polygon instances. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.GeometryCollection">
            <summary>
            GeometryCollection is a collection of zero or more geography instances.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.CircularString">
            <summary>
            A collection of zero or more continuous circular arc segments
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.CompoundCurve">
            <summary>
            A collection of zero or more continuous CircularString or LineString instances of either geometry or geography types.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.CurvePolygon">
            <summary>
            CurvePolygon is a topologically closed surface defined by an exterior bounding ring and zero or more interior rings
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeographyType.FullGlobe">
            <summary>
            FullGlobe is a special type of Polygon that covers the entire globe.
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Types.OpenGisGeometryType">
            <summary>
            Lists Open GIS geometry types.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.Point">
            <summary>
            Point is a 0-dimensional object that represents a single location.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.LineString">
            <summary>
            LineString is a one-dimensional object representing a sequence of points and the line segments connecting them.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.Polygon">
            <summary>
            Polygon is a two-dimensional surface stored as a sequence of points defining an exterior bounding ring and zero or more interior rings.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.MultiPoint">
            <summary>
            MultiPoint is a collection of zero or more points.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.MultiLineString">
            <summary>
            MultiLineString is a collection of zero or more geometryLineString instances.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.MultiPolygon">
            <summary>
            MultiPolygon is a collection of zero or more Polygon instances.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.GeometryCollection">
            <summary>
            GeometryCollection is a collection of zero or more geometry instances.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.CircularString">
            <summary>
             A CircularString is a collection of zero or more continuous circular arc segments.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.CompoundCurve">
            <summary>
            A CompoundCurve is a collection of zero or more continuous CircularString or LineString instances of either geometry or geography types.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.OpenGisGeometryType.CurvePolygon">
            <summary>
            A CurvePolygon is a topologically closed surface defined by an exterior bounding ring and zero or more interior rings.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.InteriorRing">
            <summary>
            V1 -Figure is an interior ring in a polygon. Interior rings represent holes in exterior rings. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.Point">
            <summary>
            V2 - Figure is a point
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.Stroke">
            <summary>
            V1 -Figure is a stroke. A stroke is a point or a line. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.Line">
            <summary>
            V2 - Figure is a line. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.ExteriorRing">
            <summary>
            V1 - Figure is an exterior ring in a polygon. An exterior ring represents the outer boundary of a polygon. 
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.Arc">
            <summary>
            V2 - Figure is an arc
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.FigureAttributes.Curve">
            <summary>
            V2 -  Figure is a composite curve, that is, it contains both line and arc segments. 
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Types.ShapeData">
            <summary>
            Used as data store for both Geometry and Geography,
            rather than duplicating implementation twice
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Types.ShapeDataBuilder">
            <summary>
            Shared implementation for Geography and Geometry builders
            </summary>
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlGeography">
            <summary>
            The SqlGeography type represents data in a geodetic (round earth) coordinate system.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Point(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance representing a Point instance from its x and y values and a spatial reference ID (SRID).
            </summary>
            <param name="latitude">A double that represents the latitude coordinate of the Point being generated.</param>
            <param name="longitude">A double that represents the longitude coordinate of the Point being generated.</param>
            <param name="srid">An int expression that represents the SRID of the geography instance you wish to return</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance constructed from the specified latitude, longitude, and SRID values.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.Long">
            <summary>
            Returns the longitude property of the geography instance.
            </summary>
            <value>A SqlDouble value that specifies the longitude.</value>
            <remarks>
            In the OpenGIS model, Long is defined only on geography instances composed of a single point.
            This property will return NULL if geography instances contain more than a single point. This 
            property is precise and read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.Lat">
            <summary>
            Returns the latitude property of the geography instance.
            </summary>
            <value>A SqlDouble value that specifies the latitude.</value>
            <remarks>
            In the OpenGIS model, Lat is defined only on geography instances composed of a single point.
            This property will return NULL if geography instances contain more than a single point. This property
            is precise and read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.Z">
            <summary>
            Gets the Z (elevation) value of the instance. The semantics of the elevation value are user-defined.
            </summary>
            <value>true if at least one point in a spatial object contains value Z; otherwise false.</value>
            <remarks>
            <para>The value of this property is null if the geography instance is not a point, as well as for any Point instance for which it is not set.</para>
            <para>This property is read-only.</para>
            <para>Z-coordinates are not used in any calculations made by the library and are not carried through any library calculations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.M">
            <summary>
            Returns the M (measure) value of the geography instance.
            </summary>
            <remarks>
            <para>The semantics of the measure value are user-defined but generally describe the distance along a linestring. For example, the measure value could be used to keep track of mileposts along a road.</para>
            <para>The value of this property is null if the geography instance is not a Point, as well as for any Point instance for which it is not set.</para>
            <para>This property is read-only.</para>
            <para>M values are not used in any calculations made by the library and will not be carried through any library calculations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.STSrid">
            <summary>
            Gets or sets id is an integer representing the Spatial Reference Identifier (SRID) of the instance.
            </summary>
            <value>A SqlInt32 that represents the SRID of the SqlGeography instance.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.HasZ">
            <summary>
            Returns true if at least one point in a spatial object contains value Z; otherwise returns false. This property is read-only.
            </summary>
            <value>true if at least one point in a spatial object contains value Z; otherwise false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.HasM">
            <summary>
            Returns true if at least one point in a spatial object contains value M; otherwise returns false. This property is read-only.
            </summary>
            <value>true if at least one point in a spatial object contains value M; otherwise false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.IsNull">
            <summary>
            Determines whether the SqlGeography instance is null.
            </summary>
            <value>A bool value that specifies whether the SqlGeography instance is null. If true, the instance is null. Otherwise, false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeography.Null">
            <summary>
            Returns a read-only property providing a null instance of the SqlGeography type.
            </summary>
            <value>A null instance of the SqlGeography class.</value>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.NumRings">
            <summary>
            Returns the total number of rings in a Polygon instance. 
            </summary>
            <returns>
            <para>A SqlInt32 value specifying the total number of rings.</para>
            <para>This method will return NULL if this is not a Polygon instance and will return 0 if the instance is empty.</para>
            </returns>
            <remarks>In the SQL Server geography type, external and internal rings are not distinguished, as any ring can be taken to be the external ring.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STGeometryType">
            <summary>
            Returns the Open Geospatial Consortium (OGC) type name represented by a geography instance.
            </summary>
            <returns>A SqlString value containing the OGC type name.</returns>
            <remarks>
            The OGC type names that can be returned by the STGeometryType method are Point, LineString, Polygon, GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STNumGeometries">
            <summary>
            Returns the number of geometries that make up a SqlGeography instance.
            </summary>
            <returns>A SqlInt32 value that specifies the number of geometries that make up the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance. </returns>
            <remarks>
            This method returns 1 if the geography instance is not a MultiPoint, MultiLineString, MultiPolygon, or GeometryCollection instance, or 0 if the SqlGeography instance is empty.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STNumPoints">
            <summary>
            Returns the total number of points in each of the figures in a SqlGeography instance
            </summary>
            <returns>A SqlInt32 value specifying the total number of points in each figure of the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance.</returns>
            <remarks>
            This method counts the points in the description of a SqlGeography instance. Duplicate points are counted.
            If this instance is a GeometryCollection, this method returns of the total number of points in each of the
            elements in the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STNumCurves">
            <summary>
            Returns the number of curves in a one-dimensional SqlGeography instance.
            </summary>
            <returns>The number of curves.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STGeometryN(System.Int32)">
            <summary>
            Returns a specified geography element in a GeometryCollection or one of its subtypes. 
            </summary>
            <param name="n">An int expression between 1 and the number of SqlGeography instances in the GeometryCollection.</param>
            <returns>A SqlGeography element from the specified instance in the GeometryCollection.</returns>
            <remarks>
            <para>When this method is used on a subtype of a GeometryCollection, such as MultiPoint or MultiLineString, this method returns the SqlGeography instance if called with N=1.</para>
            <para>This method returns null if the parameter is larger than the result of STNumGeometries and will throw an ArgumentOutOfRangeException if the expression parameter is less than 1.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STCurveN(System.Int32)">
            <summary>
            Returns the curve specified from a SqlGeography instance that is a LineString, CircularString, or CompoundCurve. 
            </summary>
            <param name="n">An integer between 1 and the number of curves in the SqlGeography instance.</param>
            <returns>The specified curve.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STPointN(System.Int32)">
            <summary>
            Returns the specified point in a SqlGeography instance.
            </summary>
            <param name="n">An int expression between 1 and the number of points in the SqlGeography instance.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> representing the specified point in the calling instance.</returns>
            <remarks>
            <para>If a SqlGeography instance is user-created, the STPointN method returns the point specified by expression by ordering the points in the order in which they were originally input.</para>
            <para>If a SqlGeography instance is constructed by the system, STPointN returns the point specified by expression by ordering all the points in the same order they would be output: first by geography instance, then by ring within the instance(if appropriate), and then by point within the ring.This order is deterministic.</para>
            <para>If this method is called with a value less than 1, it throws an ArgumentOutOfRangeException.</para>
            <para>If this method is called with a value greater than the number of points in the instance, it returns null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STStartPoint">
            <summary>
            Returns the start point of a SqlGeography instance. 
            </summary>
            <returns>A SqlGeography value that represents the start point of the calling SqlGeography.</returns>
            <remarks>STStartPoint is the equivalent of STPointN(1).</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STEndPoint">
            <summary>
            Returns the end point of a SqlGeography instance.
            </summary>
            <returns>A SqlGeography value containing the end point.</returns>
            <remarks>
            <para>STEndPoint is the equivalent of SqlGeography.STPointN(x.STNumPoints()).</para>
            <para>This method returns null if called on an empty geography instance.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.RingN(System.Int32)">
            <summary>
            Returns the specified ring of the SqlGeography instance: 1 ≤ n ≤ NumRings().
            </summary>
            <param name="n">An int expression between 1 and the number of rings in a polygon instance.</param>
            <returns>A SqlGeography object that represents the ring specified by n.</returns>
            <remarks>
            If the value of the ring index n is less than 1, this method throws an ArgumentOutOfRangeException. The ring index value must be greater than or equal to 1 and should be less than or equal to the number returned by NumRings.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STIsEmpty">
            <summary>
            Determines whether the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance is empty.
            </summary>
            <returns>A SqlBoolean value that indicates whether the calling instance is empty. Returns true if it is empty. Otherwise, returns false.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STAsText">
            <summary>
            Returns the Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation of a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance. 
            </summary>
            <returns>A SqlChars object containing the WKT representation of the SqlGeography.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.InstanceOf(System.String)">
            <summary>
            Tests if the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance is the same as the specified type.
            </summary>
            <param name="geometryType">Specifies the type of geometry that the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> will be compared to.</param>
            <returns>A SqlBoolean value indicating if the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> is of the specified geometry type.
            Returns true if the type of a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance is the same as the specified type, or if the specified 
            type is an ancestor of the instance type. Otherwise, returns false.</returns>
            <remarks>
            The input for the method must be one of the following: Geometry, Point, Curve, LineString, Surface, Polygon, GeometryCollection,
            MultiSurface, MultiPolygon, MultiCurve, MultiLineString, FullGlobe, and MultiPoint. This method throws an ArgumentException if 
            any other strings are used for the input.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.STGeomFromText(System.Data.SqlTypes.SqlChars,System.Int32)">
            <summary>
            Returns a SqlGeography instance from an Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation augmented with any Z (elevation) and M (measure) values carried by the instance.
            </summary>
            <param name="geometryTaggedText">The WKT representation of the SqlGeography instance you wish to return. </param>
            <param name="srid">An int expression that represents the spatial reference ID (SRID) of the SqlGeography instance you wish to return.</param>
            <returns>A SqlGeography instance constructed from the WKY representation.</returns>
            <remarks>
            <para>The OGC type of the SqlGeography instance returned by STGeomFromText is set to the corresponding WKT input.</para>
            <para>This method will throw a <see cref="T:System.FormatException"/> if the input is not well-formatted.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Parse(System.Data.SqlTypes.SqlString)">
            <summary>
            Returns a SqlGeography instance from an Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation. 
            </summary>
            <param name="s">The WKT representation of the <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance you wish to return. </param>
            <returns>A SqlGeography value constructed from the specified WKT representation.</returns>
            <remarks>
            The Parse method is equivalent to <see cref="M:Microsoft.SqlServer.Types.SqlGeography.STGeomFromText(System.Data.SqlTypes.SqlChars,System.Int32)"/> except that it assumes a spatial reference ID (SRID) of 4326 as a parameter. The input may carry optional Z (elevation) and M (measure) values.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Read(System.IO.BinaryReader)">
            <summary>
            Reads a binary representation of a geography type into a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> object.
            </summary>
            <param name="r">BinaryReader object that reads a binary representation of a geography type.</param>
            <remarks>
            <para>This member is sealed.</para>
            <para>This method will throw a FormatException if SRID value read by r is invalid.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a SqlGeography object to a binary stream.
            </summary>
            <param name="w">BinaryWriter object that writes a SqlGeography object to a binary stream.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Deserialize(System.Data.SqlTypes.SqlBytes)">
            <summary>
            Returns a constructed SqlGeometry from an internal SQL Server format for spatial data. Can be used for sending spatial data over the network or reading them from files.
            </summary>
            <param name="bytes">The data representing the spatial data being sent across the network.</param>
            <returns>The data being sent over the network.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Serialize">
            <summary>
            Used for sending spatial data across the network.
            </summary>
            <returns>A SqlBytes stream representing the spatial data being sent across the network.</returns>
            <remarks>
            Used in conjunction with <see cref="M:Microsoft.SqlServer.Types.SqlGeography.Deserialize(System.Data.SqlTypes.SqlBytes)"/>() for sending spatial data across the network.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.ToString">
            <summary>
            Returns the Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation of a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance augmented with any Z (elevation) and M (measure) values carried by the instance.
            </summary>
            <returns>A string containing the WKT representation of the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> instance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeography.Populate(Microsoft.SqlServer.Types.IGeographySink110)">
            <summary>
            Applies a geography type call sequence to IGeographySink object.
            </summary>
            <param name="sink">IGeographySink object that has a geography type call sequence of figures, lines, and points applied to it.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlGeographyBuilder">
            <summary>
            Constructs instances of SqlGeography objects by using IGeographySink interface.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.#ctor">
            <summary>
            Constructs a SqlGeographyBuilder object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeographyBuilder.ConstructedGeography">
            <summary>
            Retrieves the constructed spatial geography object.
            </summary>
            <value>Method returns a <see cref="T:Microsoft.SqlServer.Types.SqlGeography"/> object that represents the constructed spatial geography object.</value>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.BeginGeography(Microsoft.SqlServer.Types.OpenGisGeographyType)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.BeginFigure(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.BeginFigure(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.AddLine(System.Double,System.Double)">
            <summary>
            Constructs additional points in a geography type figure.
            </summary>
            <param name="latitude">A double that specifies the latitude of a point in a geography figure.</param>
            <param name="longitude">A double that specifies the longitude of a point in a geography figure.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.AddLine(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.EndFigure">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.EndGeography">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.SetSrid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeographyBuilder.AddCircularArc(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlGeometry">
            <summary>
            The SqlGeometry type represents data in a Euclidean (flat) coordinate system.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Point(System.Double,System.Double,System.Int32)">
            <summary>
            Constructs a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance that represents a Point instance from its X and Y values and an SRID.
            </summary>
            <param name="x">A double that represents the X-coordinate of the Point being generated.</param>
            <param name="y">A double that represents the Y-coordinate of the Point being generated.</param>
            <param name="srid">An int expression that represents the spatial reference ID (SRID) of the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance you wish to return.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance that represents a point on a Euclidian coordinate system.</returns>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.STX">
            <summary>
            Gets the X-coordinate property of a Point instance. 
            </summary>
            <value>
            A SqlDouble value that represents the X-coordinate value of a point.
            </value>
            <remarks>
            The value of this property will be null if the SqlGeometry instance is not a point.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.STY">
            <summary>
            Gets the Y-coordinate property of a Point instance.
            </summary>
            <value>
            A SqlDouble value that represents the Y-coordinate value of a point.
            </value>
            <remarks>
            The value of this property will be null if the SqlGeometry instance is not a point.
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.Z">
            <summary>
            Gets the Z (elevation) value of the instance. The semantics of the elevation value are user-defined.
            </summary>
            <value>A SqlDouble value that represents the elevation of the instance.</value>
            <remarks>
            <para>The value of this property will be null if the SqlGeometry instance is not a point, as well as for any Point instance for which it is not set.</para>
            <para>This property is read-only.</para>
            <para>Z-coordinates are not used in any calculations made by the library and is not carried through any library calculations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.M">
            <summary>
            Gets the M (measure) value of the SqlGeometry instance. The semantics of the measure value are user-defined.
            </summary>
            <value>A SqlDouble value containing the measure of the SqlGeometry value.</value>
            <remarks>
            <para>The value of this property will be null if the SqlGeometry instance is not a point, as well as for any Point instance for which it is not set.</para>
            <para>This property is read-only.</para>
            <para>M values are not used in any calculations made by the library and is not carried through any library calculations.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.STSrid">
            <summary>
            Gets or sets an integer that represents the Spatial Reference Identifier (SRID) of the instance.
            </summary>
            <remarks>A SqlInt32 value that contains the SRID of the SqlGeometry instance.</remarks>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.HasZ">
            <summary>
            Returns true if at least one point in a spatial object contains value Z; otherwise returns false. This property is read-only.
            </summary>
            <value>true if at least one point in a spatial object contains value Z; otherwise false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.HasM">
            <summary>
            Returns true if at least one point in a spatial object contains value M; otherwise returns false. This property is read-only.
            </summary>
            <value>true if at least one point in a spatial object contains value M; otherwise false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.IsNull">
            <summary>
            Gets a value that indicates whether the SqlGeometry object is null.
            </summary>
            <value>A bool value that indicates whether the object is null. If true, the object is null. Otherwise, false.</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometry.Null">
            <summary>
            Gets a read-only property providing a null instance of the SqlGeometry type. 
            </summary>
            <remarks>This member is static.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STGeometryType">
            <summary>
            Returns the Open Geospatial Consortium (OGC) type name represented by a geometry instance. SqlGeometry
            </summary>
            <returns>A <see cref="T:System.Data.SqlTypes.SqlString"/> value containing the OGC type.</returns>
            <remarks>
            The OGC type names that can be returned by STGeometryType are Point, LineString, Polygon, GeometryCollection, MultiPoint, MultiLineString, and MultiPolygon.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STNumGeometries">
            <summary>
            Returns the number of SqlGeometry that comprise a SqlGeometry instance.
            </summary>
            <returns>Returns 1 if the SqlGeometry instance is not a MultiPoint, MultiLineString, MultiPolygon, or
            GeometryCollection instance, and 0 if the SqlGeometry instance is empty.</returns>
            <remarks>
            If a geometry collection has nested empty elements, STNumGeometries will not return 0.
            Though the elements in the geometry collection instance are empty, the instance itself is not an empty set.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STNumCurves">
            <summary>
            Returns the number of curves in a one-dimensional SqlGeometry instance.
            </summary>
            <returns>The number of curves.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STNumPoints">
            <summary>
            Returns the sum of the number of points in each of the figures in a SqlGeometry instance.
            </summary>
            <returns>A SqlInt32 value that contains the sum of the number of points in each of the figures in the calling instance.</returns>
            <remarks>
            This method counts the points in the description of a SqlGeometry instance. Duplicate points are counted. 
            If this instance is a collection type, this method returns the sum of the points in each of its elements.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STNumInteriorRing">
            <summary>
            Returns the number of interior rings of a Polygon SqlGeometry instance.
            </summary>
            <returns>A SqlInt32 value that specifies the number of interior rings.</returns>
            <remarks>This method returns null if the SqlGeometry instance is not a polygon.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STGeometryN(System.Int32)">
            <summary>
            Returns the specified SqlGeometry in a SqlGeometry collection.
            </summary>
            <param name="n">An int expression between 1 and the number of SqlGeometry instances in the SqlGeometry collection that specifies the instance to return.</param>
            <returns>The SqlGeometry specified by n.</returns>
            <remarks>
            This method returns null if the parameter is larger than the result of <see cref="M:Microsoft.SqlServer.Types.SqlGeometry.STNumGeometries"/> and will throw an 
            <see cref="T:System.ArgumentOutOfRangeException"/> if the expression parameter is less than 1
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STCurveN(System.Int32)">
            <summary>
            Returns the curve specified from a SqlGeometry instance that is a LineString, CircularString, or CompoundCurve. 
            </summary>
            <param name="n">An integer between 1 and the number of curves in the geometry instance.</param>
            <returns>The specified curve.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STPointN(System.Int32)">
            <summary>
            Returns a specified point in a SqlGeometry instance. 
            </summary>
            <param name="n">An int expression between 1 and the number of points in the SqlGeometry instance.</param>
            <returns>A SqlGeometry that represents the specified point in the calling instance.</returns>
            <remarks>
            <para>If a SqlGeometry instance is user created, STPointN returns the point specified by expression by ordering the points in the order in which they were originally input.</para>
            <para>If a SqlGeometry instance was constructed by the system, STPointN returns the point specified by expression by ordering all the points in the same order they would be output: first by geometry, then by ring within the geometry(if appropriate), and then by point within the ring.This order is deterministic.</para>
            <para>If this method is called with a value less than 1, it throws an <see cref="T:System.ArgumentOutOfRangeException"/>.</para>
            <para>If this method is called with a value greater than the number of points in the instance, it returns null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STInteriorRingN(System.Int32)">
            <summary>
            Returns the specified interior ring of a Polygon SqlGeometry instance. 
            </summary>
            <param name="n">An int expression between 1 and the number of interior rings in the SqlGeometry instance.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> object that represents the interior ring of the Polygon.</returns>
            <remarks>
            This method returns null if the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance is not a polygon. This method will also throw an <see cref="T:System.ArgumentOutOfRangeException"/> 
            if the expression is larger than the number of rings. The number of rings can be returned using <see cref="M:Microsoft.SqlServer.Types.SqlGeometry.STNumInteriorRing"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STExteriorRing">
            <summary>
            Returns the exterior ring of a SqlGeometry instance that is a polygon. 
            </summary>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> object that represents the exterior ring of the calling instance.</returns>
            <remarks>his method returns null if the SqlGeometry instance is not a polygon.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STIsEmpty">
            <summary>
            Indicates whether the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance is empty.
            </summary>
            <returns>Returns true if the calling instance is empty. Returns false if it is not empty.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STAsText">
            <summary>
            Returns the Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation of a SqlGeometry instance. 
            </summary>
            <returns>A SqlChars object containing the WKT representation of the SqlGeometry.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.InstanceOf(System.String)">
            <summary>
            Tests if the <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance is the same as the specified type.
            </summary>
            <param name="geometryType">Specifies the type of geometry that the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> will be compared to.</param>
            <returns>A SqlBoolean value indicating if the calling <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> is of the specified geometry type.
            Returns true if the type of a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance is the same as the specified type, or if the specified 
            type is an ancestor of the instance type. Otherwise, returns false.</returns>
            <remarks>
            The input for the method must be one of the following: Geometry, Point, Curve, LineString, Surface, Polygon, GeometryCollection,
            MultiSurface, MultiPolygon, MultiCurve, MultiLineString, and MultiPoint. This method throws an ArgumentException if 
            any other strings are used for the input.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Deserialize(System.Data.SqlTypes.SqlBytes)">
            <summary>
            Returns a constructed SqlGeometry from an internal SQL Server format for spatial data.
            </summary>
            <param name="bytes">A SqlBytes that specifies the spatial data being sent over the network.</param>
            <returns>A SqlGeometry instance that represents the constructed geometry object being sent over the network.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Serialize">
            <summary>
            Returns the bytes that represent an internal SQL Server format of SqlGeometry type.
            </summary>
            <returns>Returns the bytes that represent an internal SQL Server format of SqlGeometry type.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.STGeomFromText(System.Data.SqlTypes.SqlChars,System.Int32)">
            <summary>
            Returns a SqlGeometry instance from an Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation augmented with any Z (elevation) and M (measure) values carried by the instanc
            </summary>
            <param name="geometryTaggedText">The WKT representation of the SqlGeometry instance you wish to return. </param>
            <param name="srid">An int expression that represents the spatial reference ID (SRID) of the SqlGeometry instance you wish to return.</param>
            <returns>A SqlGeometry instance constructed from the specified WKT representation.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Parse(System.Data.SqlTypes.SqlString)">
            <summary>
            Returns a SqlGeometry instance from an Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation.
            </summary>
            <param name="s">Specifies the the WKT representation of the SqlGeometry instance you wish to return.</param>
            <returns>A SqlGeometry instance interpreted from the provided WKT representation.
            Returns null if s is null.</returns>
            <remarks>
            <para>Parse is equivalent to STGeomFromText, with the exception that it assumes a spatial reference ID (SRID) of 0 as a parameter.</para>
            <para>The input may carry optional Z(elevation) and M(measure) values.</para>
            
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Read(System.IO.BinaryReader)">
            <summary>
            Reads a binary representation of a geometry type into a SqlGeometry object.
            </summary>
            <param name="r">BinaryReader object that reads a binary representation of a geometry type.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a SqlGeometry instance to a binary stream.
            </summary>
            <param name="w">BinaryWriter object that writes the SqlGeometry instance to a binary stream.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.ToString">
            <summary>
            Returns the Open Geospatial Consortium (OGC) Well-Known Text (WKT) representation of a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> instance augmented with any Z (elevation) and M (measure) values carried by the instance.
            </summary>
            <returns>A string value containing the WKT representation of the calling instance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometry.Populate(Microsoft.SqlServer.Types.IGeometrySink110)">
            <summary>
            Applies a geometry type call sequence to IGeometrySink object.
            </summary>
            <param name="sink">IGeometrySink object that has a geometry type call sequence of figures, lines, and points applied to it.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlGeometryBuilder">
            <summary>
            Constructs instances of <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> objects by using <see cref="T:Microsoft.SqlServer.Types.IGeometrySink"/> interface.
            </summary>
            <remarks>
            Throws <see cref="T:System.FormatException"/> for an invalid call sequence or when a call sequence is incomplete when <see cref="P:Microsoft.SqlServer.Types.SqlGeometryBuilder.ConstructedGeometry"/>() is invoked.
            </remarks>
            <example>
            <para>The following example constructs a <see cref="T:Microsoft.SqlServer.Types.SqlGeometry"/> object from a <c>MultiLineString</c>.</para>
            <code>
            SqlGeometryBuilder b = new SqlGeometryBuilder();
            b.SetSrid(0);
            b.BeginGeometry(OpenGisGeometryType.MultiLineString);
            b.BeginGeometry(OpenGisGeometryType.LineString);
            b.BeginFigure(1, 1);
            b.AddLine(3, 4);
            b.EndFigure();
            b.EndGeometry();
            b.BeginGeometry(OpenGisGeometryType.LineString);
            b.BeginFigure(-5, -3);
            b.AddLine(2, 2);
            b.EndFigure(); 
            b.EndGeometry();
            b.EndGeometry();
            SqlGeometry g = b.ConstructedGeometry();
            </code>
            </example>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.#ctor">
            <summary>
            Constructs a <see cref="T:Microsoft.SqlServer.Types.SqlGeometryBuilder"/> object.
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlGeometryBuilder.ConstructedGeometry">
            <summary>
            Retrieves constructed spatial geometry object.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.BeginGeometry(Microsoft.SqlServer.Types.OpenGisGeometryType)">
            <summary>
            Initializes a call sequence for a geometry type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.BeginFigure(System.Double,System.Double)">
            <summary>
            Starts the call sequence for a geometry figure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.BeginFigure(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Starts the call sequence for a geometry figure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.AddLine(System.Double,System.Double)">
            <summary>
            Constructs additional points in a <c>geometry</c> type figure.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.AddLine(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Constructs additional points in the call sequence for a geometry type.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.EndFigure">
            <summary>
            Finishes a call sequence for a geometry figure.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.EndGeometry">
            <summary>
            Finishes a call sequence for a geometry type.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.SetSrid(System.Int32)">
            <summary>
            Sets the Spatial Reference Identifier (SRID) for a geometry type call sequence.
            </summary>
            <param name="srid"></param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.AddCircularArc(System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double},System.Double,System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Adds a circular arc to the path.
            </summary>
            <param name="x1">The x1 value.</param>
            <param name="y1">The y1 value.</param>
            <param name="z1">The z1 value.</param>
            <param name="m1">The m1 value.</param>
            <param name="x2">The x2 value.</param>
            <param name="y2">The y2 value.</param>
            <param name="z2">The z2 value.</param>
            <param name="m2">The m2 value.</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlGeometryBuilder.AddCircularArc(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Adds a circular arc to the path.
            </summary>
            <param name="x1">The first latitude for the arc.</param>
            <param name="y1">The first longitude for the arc.</param>
            <param name="x2">The second latitude for the arc.</param>
            <param name="y2">The second longitude for the arc.</param>
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlHierarchyId">
            <summary>
            The SqlHierarchyId type represents a position in a hierarchical structure, specifying depth and breadth. 
            </summary>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlHierarchyId.IsNull">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> is null.
            </summary>
            <value>Boolean representing true (1) if the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is null; otherwise, false (0).</value>
        </member>
        <member name="P:Microsoft.SqlServer.Types.SqlHierarchyId.Null">
            <summary>
            Gets a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> with a hierarchy identification of null.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetRoot">
            <summary>
            Gets a value representing the root <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node of the hierarchy.
            </summary>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> representing the root node of the hierarchical tree. Root value is typically 0x.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.Parse(System.Data.SqlTypes.SqlString)">
            <summary>
            Converts the canonical string representation of a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node to a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> value.
            </summary>
            <param name="input">String representation of <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node.</param>
            <returns><see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> representing the node described canonically.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.CompareTo(System.Object)">
            <summary>
            Returns a value indicating the results of a comparison between a SqlHierarchyId and an object.
            </summary>
            <param name="obj">An object to be compared to this.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="table">
              <listheader>  
                  <term>Value</term>  
                  <description>Meaning</description>  
              </listheader>  
              <item><term>Less than zero</term><description>this is less than <paramref name="obj"/>.</description></item>  
              <item><term>Zero</term><description>this is equal to <paramref name="obj"/>.</description></item>  
              <item><term>Greater than zero</term><description>this is greater than <paramref name="obj"/>.</description></item>  
            </list>
            </returns>
            <remarks>
            Throws an exception if <paramref name="obj"/> is not a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node.
            This member is sealed.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.CompareTo(Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Returns a value indicating the results of a comparison between two <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> nodes.
            </summary>
            <param name="hid">A <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node to compare to this.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="table">
              <listheader>  
                  <term>Value</term>  
                  <description>Meaning</description>  
              </listheader>  
              <item><term>Less than zero</term><description>this is less than <paramref name="hid"/>.</description></item>  
              <item><term>Zero</term><description>this is equal to <paramref name="hid"/>.</description></item>  
              <item><term>Greater than zero</term><description>this is greater than <paramref name="hid"/>.</description></item>  
            </list>
            </returns>
            <remarks>
            If both <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> nodes are null, returns 0.
            If one <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is null, it is considered to be less than the non-null <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.Equals(System.Object)">
            <summary>
            Evaluates whether <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> and obj are equal.
            </summary>
            <param name="obj">The object against which to compare <c>this</c>.</param>
            <returns>Boolean. true (1) if this and obj are equal; otherwise, false (0).</returns>
            <remarks>
            <para>Returns false (0) if obj is not a SqlHierarchyId node.</para>
            <para>Returns true (1) if both this and obj are null.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetAncestor(System.Int32)">
            <summary>
            Retrieves the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node n levels up the hierarchical tree.
            </summary>
            <param name="n">An integer representing the number of levels to ascend in the hierarchy. </param>
            <returns>
            <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> representing the nth ancestor of <c>this</c>.
            If a number greater than <see cref="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetLevel"/> is passed, <c>null</c> is returned.
            If a negative number is passed, an exception is raised indicating that the argument is out of range.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetDescendant(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Gets the value of a descendant <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node that is greater than <paramref name="child1"/> and less than <paramref name="child2"/>.
            </summary>
            <param name="child1">The lower bound.</param>
            <param name="child2">The upper bound.</param>
            <returns>A SqlHierarchyId with a value greater than the lower bound and less than the upper bound.</returns>
            <remarks>
            <list type="bullet">
            <item>If parent is <c>null</c>, returns <c>null</c>.</item>
            <item>If parent is not null, and both <paramref name="child1"/> and <paramref name="child2"/> are <c>null</c>, returns a descendant of parent.</item>
            <item>If parent and <paramref name="child1"/> are not <c>null</c>, and <paramref name="child2"/> is <c>null</c>, returns a descendant of parent greater than <paramref name="child1"/>.</item>
            <item>If parent and <paramref name="child2"/> are not <c>null</c> and <paramref name="child1"/> is <c>null</c>, returns a descendant of parent less than <paramref name="child2"/>.</item>
            <item>If parent, <paramref name="child1"/>, and child2 are not <c>null</c>, returns a descendant of parent greater than <paramref name="child1"/> and less than <paramref name="child2"/>.</item>
            <item>An exception is raised if <paramref name="child1"/> or <paramref name="child2"/> are not <c>null</c> and are not a descendant of parent.</item>
            <item>If <paramref name="child1"/> >= <paramref name="child2"/>, an exception is raised.</item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetHashCode">
            <summary>
            Gets a hash of the path from the root node of the hierarchy tree to the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node.
            </summary>
            <returns>A 32-bit signed integer representing the hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetLevel">
            <summary>
            Gets a value indicating the level of the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node in the hierarchical tree.
            </summary>
            <returns>A 16-bit integer indicating the depth of the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node in the hierarchical tree. 
            The root of the hierarchy is level 0.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.GetReparentedValue(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Gets a value representing the location of a new <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node that has a path from newRoot equal to the path from oldRoot to <c>this</c>, effectively moving <c>this</c> to the new location.
            </summary>
            <param name="oldRoot">An ancestor of the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node specifying the endpoint of the path segment that is to be moved.</param>
            <param name="newRoot">The <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node that represents the new ancestor of <c>this</c>.</param>
            <returns>A <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node representing the new hierarchical location of <c>this</c>. Will return <c>null</c> if <paramref name="oldRoot"/>, <paramref name="newRoot"/>, or this are <c>null</c>.</returns>
            <remarks>
            <para>Returns a node whose path from the root is the path to <paramref name="newRoot"/>, followed by the path from <paramref name="oldRoot"/> to <c>this</c>.</para>
            <para>The <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> data type represents but does not enforce the hierarchical structure. Users must ensure that the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is appropriately structured for the new location.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.IsDescendantOf(Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is the descendant of the parent.
            </summary>
            <param name="parent">The specified <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node for which the IsDescendantOf test is performed.</param>
            <returns><c>Boolean</c>, <c>true</c> (1) for all the nodes in the sub-tree rooted at parent; <c>false</c> (0) for all other nodes.</returns>
            <remarks>parent is considered its own descendant.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.ToString">
            <summary>
            Returns the canonical string representation of a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node from a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> value.
            </summary>
            <returns></returns>
            <remarks>
            Called implicitly when a conversion from a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> data type to a string type occurs.
            Acts as the opposite of <see cref="M:Microsoft.SqlServer.Types.SqlHierarchyId.Parse(System.Data.SqlTypes.SqlString)"/>.
            </remarks>
            <example><code lang="sql">
            DECLARE @StringValue AS nvarchar(4000), @hierarchyidValue AS hierarchyid
            SET @StringValue = '/1/1/3/'
            SET @hierarchyidValue = 0x5ADE
            SELECT hierarchyid::Parse(@StringValue) AS hierarchyidRepresentation,
            @hierarchyidValue.ToString() AS StringRepresentation;
            GO
            </code></example>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.Write(System.IO.BinaryWriter)">
            <summary>
            Writes a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> to a specified binary writer.
            </summary>
            <param name="w">The specified binary writer.</param>
            <remarks>
            Throws an exception if w is <c>null</c>.
            Throws an exception if the <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> is <c>null</c>.
            This member is <c>sealed</c>.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.Read(System.IO.BinaryReader)">
            <summary>
            Reads from a specified binary reader into a <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/>.
            </summary>
            <param name="r">The specified binary reader.</param>
            <remarks>
            Throws an exception if r is null.<br/>
            Throws an exception if the SqlHierarchyId is not null.<br/>
            This member is sealed.
            </remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_Equality(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether two <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> nodes are equal.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns>Boolean. true (1) if <paramref name="hid1"/> and <paramref name="hid2"/> are equal; otherwise, false (0).</returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_Inequality(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether two <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> nodes are unequal.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns></returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_LessThan(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether one specified <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is less than another.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns></returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_GreaterThan(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether one specified <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is greater than another.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns></returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_LessThanOrEqual(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether one specified <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is less than or equal to another.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns></returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchyId.op_GreaterThanOrEqual(Microsoft.SqlServer.Types.SqlHierarchyId,Microsoft.SqlServer.Types.SqlHierarchyId)">
            <summary>
            Evaluates whether one specified <see cref="T:Microsoft.SqlServer.Types.SqlHierarchyId"/> node is greater than or equal to another.
            </summary>
            <param name="hid1">First node to compare.</param>
            <param name="hid2">Second node to compare.</param>
            <returns></returns>
            <remarks>Returns null if either <paramref name="hid1"/> or <paramref name="hid2"/> are null.</remarks>
        </member>
        <member name="T:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId">
            <summary>
            Represents hierarchical data.
            </summary>
        </member>
        <member name="F:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.PathSeparator">
            <summary>
            The Path separator character
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.#ctor(System.String)">
            <summary>
                Constructs an HierarchyId with the given canonical string representation value.
            </summary>
            <returns>Hierarchyid value.</returns>
            <param name="hierarchyId">Canonical string representation</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetAncestor(System.Int32)">
            <summary>
            Returns a hierarchyid representing the nth ancestor of this.
            </summary>
            <returns>A hierarchyid representing the nth ancestor of this.</returns>
            <param name="n">n</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetDescendant(System.Nullable{Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId},System.Nullable{Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId})">
            <summary>
            Returns a child node of the parent.
            </summary>
            <param name="child1"> null or the hierarchyid of a child of the current node. </param>
            <param name="child2"> null or the hierarchyid of a child of the current node. </param>
            <returns>
            Returns one child node that is a descendant of the parent.
            If both child1 and child2 are null, returns a child of parent.
            If child1 is not null, and child2 is null, returns a child of parent greater than child1.
            If child2 is not null and child1 is null, returns a child of parent less than child2.
            If child1 and child2 are not null, returns a child of parent greater than child1 and less than child2.
            If child1 is not null and not a child of parent, an exception is raised.
            If child2 is not null and not a child of parent, an exception is raised.
            If child1 >= child2, an exception is raised.
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetLevel">
            <summary>
            Returns an integer that represents the depth of the node this in the tree.
            </summary>
            <returns>An integer that represents the depth of the node this in the tree.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetRoot">
            <summary>
            Returns the root of the hierarchy tree.
            </summary>
            <returns>The root of the hierarchy tree.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.IsDescendantOf(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Returns true if this is a descendant of parent.
            </summary>
            <returns>True if this is a descendant of parent.</returns>
            <param name="parent">parent</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetReparentedValue(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Returns a node whose path from the root is the path to newRoot, followed by the path from oldRoot to this.
            </summary>
            <returns>Hierarchyid value.</returns>
            <param name="oldRoot">oldRoot</param>
            <param name="newRoot">newRoot</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.Parse(System.String)">
            <summary>
            Converts the canonical string representation of a hierarchyid to a hierarchyid value.
            </summary>
            <returns>Hierarchyid value.</returns>
            <param name="input">input</param>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.Compare(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> 
            A 32-bit signed integer that indicates the lexical relationship between the two comparands.
            Value Condition Less than zero: hid1 is less than hid2. 
            Zero: hid1 equals hid2. 
            Greater than zero: hid1 is greater than hid2. 
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_LessThan(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> 
            true if the the first parameter is less than the second parameter, false otherwise 
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_GreaterThan(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> 
            true if the the first parameter is greater than the second parameter, false otherwise 
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_LessThanOrEqual(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> 
            true if the the first parameter is less or equal than the second parameter, false otherwise 
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_GreaterThanOrEqual(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> 
                 true if the the first parameter is greater or equal than the second parameter, false otherwise 
            </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_Equality(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> true if the two HierarchyIds are equal, false otherwise </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.op_Inequality(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId,Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares two HierarchyIds by their values.
            </summary>
            <param name="hid1"> a HierarchyId to compare </param>
            <param name="hid2"> a HierarchyId to compare </param>
            <returns> true if the two HierarchyIds are not equal, false otherwise </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.Equals(Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId)">
            <summary>
            Compares this instance to a given HierarchyId by their values.
            </summary>
            <param name="other"> the HierarchyId to compare against this instance </param>
            <returns> true if this instance is equal to the given HierarchyId, and false otherwise </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.GetHashCode">
            <summary>
            Returns a value-based hash code, to allow HierarchyId to be used in hash tables.
            </summary>
            <returns> the hash value of this HierarchyId </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.Equals(System.Object)">
            <summary>
            Compares this instance to a given HierarchyId by their values.
            </summary>
            <param name="obj"> the HierarchyId to compare against this instance </param>
            <returns> true if this instance is equal to the given HierarchyId, and false otherwise </returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.ToString">
            <summary>
            Returns a string representation of the hierarchyid value.
            </summary>
            <returns>A string representation of the hierarchyid value.</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.SqlHierarchy.HierarchyId.CompareTo(System.Object)">
            <summary>
            Implementation of IComparable.CompareTo()
            </summary>
            <param name="obj"> The object to compare to </param>
            <returns> 0 if the HierarchyIds are "equal" (i.e., have the same _hierarchyId value) </returns>
        </member>
        <member name="T:Microsoft.SqlServer.Types.Wkt.WktWriter">
            <summary>
            Converts geometries to and from Well-Known Text.
            Also supports Z and M values (OGC SFS v1.2.0) as well as reordering of X and Y.
            </summary>
        </member>
        <member name="M:Microsoft.SqlServer.Types.Wkt.WktWriter.Write(Microsoft.SqlServer.Types.ShapeData,Microsoft.SqlServer.Types.Wkt.CoordinateOrder)">
            <summary>
            Writes a <see cref="T:Microsoft.SqlServer.Types.ShapeData"/> instance as Well-Known Text according to the OGC Simple Features Specification 1.2.0.
            </summary>
            <param name="g">Geometry</param>
            <param name="order"></param>
            <returns>Well-Known Text</returns>
        </member>
        <member name="M:Microsoft.SqlServer.Types.Wkt.WktWriter.Write(Microsoft.SqlServer.Types.ShapeData,System.Boolean,System.Boolean,Microsoft.SqlServer.Types.Wkt.CoordinateOrder)">
            <summary>
            Writes a <see cref="T:Microsoft.SqlServer.Types.ShapeData"/> instance as Well-Known Text according to the OGC Simple Features Specification 1.2.0.
            </summary>
            <param name="g">Geometry</param>
            <param name="includeZ">Include Z values</param>
            <param name="includeM">Include M values</param>
            <param name="order"></param>
            <returns>Well-Known Text</returns>
        </member>
    </members>
</doc>
