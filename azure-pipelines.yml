variables:
  solution: 'linq2db.sln'
  build_configuration: 'Azure'
  assemblyVersion: 3.0.0
  nugetVersion: 3.0.0
  artifact_nugets: 'nugets'
  artifact_linq2db_binaries: 'linq2db_binaries'
  artifact_linq2db_tools_binaries: 'linq2db_tools_binaries'
#  netfx45_tests: 'netfx45_tests' # maybe later
  netfx46_tests: 'netfx46_tests'
  netcore2_tests: 'netcoreapp20_tests'

trigger:
  - master
  - release
  - release.3.0
#pr: not specified, so we build all prs

stages:

########################################
#  Build and publish testable binaries #
########################################
- stage: Build
  displayName: ''
  jobs:
  - job: build_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build'

    steps:

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Build/linq2db.Default.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m'
      displayName: Build Solution

# need it for DotNetCoreCLI task be able to build C#8 project
    - task: DotNetCoreInstaller@1
      inputs:
        version: '3.0.100-preview7-012821'
      displayName: Install .NET Core 3p7 SDK

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp2.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP2.0

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/net46'
      displayName: Copy test configs for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish/configs'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/netcoreapp20'
      displayName: Copy test configs for NETCOREAPP2.0

    - task: CmdLine@2
      inputs:
        script: 'copy "$(System.DefaultWorkingDirectory)\Data\Create Scripts\Northwind.sql" $(Build.SourcesDirectory)\Build\Azure\scripts\northwind.sql'
      displayName: Copy northwind.sql to scripts

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETCOREAPP2.0

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46/scripts'
        sourceFolder: '$(Build.SourcesDirectory)/Build/Azure/scripts'
      displayName: Copy test scripts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        artifact: '$(netfx46_tests)'
      displayName: Publish test artifacts for NETFX46

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        artifact: '$(netcore2_tests)'
      displayName: Publish test artifacts for NETCOREAPP2.0

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'
        artifact: '$(artifact_linq2db_binaries)'
      displayName: Publish linq2db build results

    - task: PublishPipelineArtifact@1
      inputs:
        path: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'
        artifact: '$(artifact_linq2db_tools_binaries)'
      displayName: Publish linq2db.Tools build results

#############################
#  Build and Publish nugets #
#############################
  - job: build_nugets_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Nugets Generation'
    variables:
      packageVersion: $(nugetVersion)
    dependsOn: build_job
    condition: succeeded()

    steps:

    - powershell: echo "##vso[task.setvariable variable=packageVersion]$(packageVersion)-rc$(Build.BuildId)"
      condition: ne(variables['Build.SourceBranchName'], 'release')
      displayName: Update nuget version

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifact_linq2db_binaries)'
        targetPath: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(artifact_linq2db_Tools_binaries)'
        targetPath: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/BuildNuspecs.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/NuGet/*.nuspec -version $(packageVersion) -branch $(Build.SourceBranchName)
      displayName: Update nuspecs

    - task: CmdLine@2
      inputs:
        script: $(Build.SourcesDirectory)/NuGet/PackCI.bat
        workingDirectory: $(Build.SourcesDirectory)/NuGet
      displayName: Build nugets

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/NuGet/built'
        artifactName: '$(artifact_nugets)'
      displayName: Publish nugets to artifacts

    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/NuGet/built/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '0dcc414b-ea54-451e-a54f-d63f05367c4b/967a4107-9788-41a4-9f6d-a2318aab1410'
      displayName: Publish to Azure Artifacts feed
      condition: and(succeeded(), or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'release.3.0')))

# apikey exires around 31/07/2020
    - task: NuGetCommand@2
      inputs:
        command: 'push'
        packagesToPush: '$(Build.SourcesDirectory)/NuGet/built/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'linq2db nuget.org feed (allows update of linq2db and linq2db.EF nugets)'
      displayName: Publish to Nuget.org
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'release'))

####################################
#  Tests: Windows (NETFX 4.6) 2019 #
####################################
  - job: test_win_netfx46_job_2019
    pool:
      vmImage: 'windows-2019'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        Access_JET:
          title: 'Access Jet'
          config: 'access'
        Access_ACE:
          title: 'Access ACE'
          config: 'access.ace'
          script: 'access.ace.cmd'
        SqlCE:
          title: 'SQL CE'
          config: 'sqlce'
          psscript: 'sqlce.ps1'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
####################################
#  Tests: Windows (NETFX 4.6) 2016 #
####################################
  - job: test_win_netfx46_job_2016
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETFX 4.6 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))

    strategy:
      matrix:
        SqlServer2017:
          title: 'SQL Server 2017'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.cmd'
#        MySQL:
#          title: 'MySQL 5.7'
#          config: 'mysql'
#          script: 'mysql.cmd'
#        PostgreSQL:
#          title: 'PostgreSQL'
#          config: 'pgsql'
#          script: 'pgsql.cmd'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netfx46_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)\scripts\$(psscript)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['psscript']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
###################################
#  Tests: Windows (NETCOREAPP2_0) #
###################################
  - job: test_win_netcoreapp20_job
    pool:
      vmImage: 'vs2017-win2016'
    displayName: 'Tests: Win / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        SqlServer2017:
          title: 'SQL Server 2017'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.cmd'
#        MySQL:
#          title: 'MySQL 5.7'
#          config: 'mysql'
#          script: 'mysql.cmd'
#        PostgreSQL:
#          title: 'PostgreSQL'
#          config: 'pgsql'
#          script: 'pgsql.cmd'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore2_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'copy $(System.DefaultWorkingDirectory)\configs\$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)\scripts\$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

    - task: VSTest@2
      inputs:
        testAssemblyVer2: linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.0'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

#################################
#  Tests: Linux (NETCOREAPP2_0) #
#################################
  - job: test_linux_netcoreapp20_job
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Tests: Lin / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        SqlServer2017:
          title: 'SQL Server 2017'
          config: 'sqlserver.2017'
          script: 'sqlserver.2017.sh'
#        MySQL:
#          title: 'MySQL 5.7'
#          config: 'mysql'
#          script: 'mysql.sh'
#        PostgreSQL:
#          title: 'PostgreSQL'
#          config: 'pgsql'
#          script: 'pgsql.sh'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore2_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable

    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.0 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

#################################
#  Tests: MacOS (NETCOREAPP2_0) #
#################################
  - job: test_macos_netcoreapp20_job
    pool:
      vmImage: 'macOS-10.14'
    displayName: 'Tests: Mac / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'release'))

    strategy:
      matrix:
        SQLite:
          title: 'SQLite'
          config: 'sqlite'
        SQLite_MS:
          title: 'SQLite.MS'
          config: 'sqlite.ms'
        SqlServer2017:
          title: 'SQL Server 2017'
          config: 'sqlserver.2017'
          script: 'mac.sqlserver.2017.sh'
#        MySQL:
#          title: 'MySQL 5.7'
#          config: 'mysql'
#          script: 'mysql.sh'
#        PostgreSQL:
#          title: 'PostgreSQL'
#          config: 'pgsql'
#          script: 'pgsql.sh'

    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: '$(netcore2_tests)'
        targetPath: '$(System.DefaultWorkingDirectory)'

    - task: CmdLine@2
      inputs:
        script: 'cp $(System.DefaultWorkingDirectory)/configs/$(config).json UserDataProviders.json'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: Copy test config

    - task: CmdLine@2
      inputs:
        script: 'chmod +x $(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/scripts'
      condition: variables['script']
      displayName: Mark script as executable
      
    - task: CmdLine@2
      inputs:
        script: '$(System.DefaultWorkingDirectory)/scripts/$(script)'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      condition: variables['script']
      displayName: Setup tests

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.0 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
